(function() {
  "use strict";
  TS.registerModule("presence_manager", {
    sub_list_changed: new signals.Signal,
    onStart: function() {
      _has_started = true;
      if (_sub_list.length) _sendSubList();
      if (_query_list.length) _sendQueryList();
      TS.ms.disconnected_sig.add(_handleDisconnect);
      TS.ms.connected_sig.add(_handleConnect);
    },
    addPresenceList: function(presence_list) {
      if (_lists.indexOf(presence_list) === -1) {
        _lists.push(presence_list);
        presence_list.added_sig.add(_addMembers);
        presence_list.removed_sig.add(_removeMembers);
      }
    },
    removePresenceList: function(presence_list) {
      if (_lists.indexOf(presence_list) > -1) {
        _lists.splice(_lists.indexOf(presence_list), 1);
        presence_list.added_sig.remove(_addMembers);
        presence_list.removed_sig.remove(_removeMembers);
      }
    },
    isSubscribedToMember: function(member) {
      return _sub_list.indexOf(member) >= 0;
    },
    queryMemberPresence: function(members) {
      if (_.isArray(members)) {
        members.forEach(function(member) {
          _addMemberToQueryList(member);
        });
      } else {
        _addMemberToQueryList(members);
      }
      _sendQueryList();
    },
    periodicallyCheckPresenceConsistency: function(interval_ms) {
      if (_.isUndefined(interval_ms)) {
        interval_ms = 1e3;
      }
      if (_consistency_check_interval) {
        clearInterval(_consistency_check_interval);
        _consistency_check_interval = null;
      }
      _consistency_check_interval = setInterval(_sanityCheckSubscriptionList, interval_ms);
    },
    stopCheckingPresenceConsistency: function() {
      if (_consistency_check_interval) {
        clearInterval(_consistency_check_interval);
      }
      _consistency_check_interval = null;
    },
    getSubList: function() {
      return _sub_list.slice();
    },
    test: {
      getSubObject: function() {
        var members_with_names = {};
        var member;
        for (member in _members) {
          if (_members[member]) {
            members_with_names[member + " " + TS.members.getMemberById(member).name] = _members[member];
          }
        }
        return members_with_names;
      },
      getSubList: function() {
        return _sub_list;
      }
    }
  });
  var _SLACKBOT_ID = "USLACKBOT";
  var _SEND_MSG_THROTTLE_MS = 1e3;
  var _PRESENCE_SUB_LIST_MAX = 1300;
  var _has_started = false;
  var _lists = [];
  var _members = {};
  var _sub_list = [];
  var _query_list = [];
  var _is_sub_waiting = false;
  var _is_query_waiting = false;
  var _consistency_check_interval;
  var _did_warn_about_large_presence_list = false;
  var _addMemberToQueryList = function(member) {
    if (_sub_list.indexOf(member) > -1) return;
    if (_query_list.indexOf(member) > -1) return;
    _query_list.push(member);
  };
  var _addMembers = function(members) {
    if (!_.isArray(members)) members = [members];
    members.forEach(function(member) {
      _addMember(member);
    });
  };
  var _removeMembers = function(members) {
    if (!_.isArray(members)) members = [members];
    members.forEach(function(member) {
      _removeMember(member);
    });
  };
  var _addMember = function(member) {
    if (member === _SLACKBOT_ID) return;
    if (_members[member]) {
      _members[member] += 1;
    } else {
      _members[member] = 1;
      _sub_list.push(member);
      _sendSubList();
    }
    return null;
  };
  var _removeMember = function(member) {
    if (_members[member]) {
      _members[member] -= 1;
      if (!_members[member]) {
        var index = _sub_list.indexOf(member);
        _sub_list.splice(index, 1);
        _sendSubList();
      }
    }
    return null;
  };
  var _sendSubList = function() {
    if (!_has_started || _sub_list.length === 0 || _is_sub_waiting) return null;
    if (!_.get(TS, "model.ms_connected")) {
      return;
    }
    _is_sub_waiting = true;
    Promise.resolve().then(function() {
      _is_sub_waiting = false;
      TS.metrics.count("presence_manager", _sub_list.length);
      if (_sub_list && _sub_list.length > _PRESENCE_SUB_LIST_MAX) {
        if (!_did_warn_about_large_presence_list) {
          TS.console.logError({}, "presence_sub_list_too_long", "List length is " + _sub_list.length);
          _did_warn_about_large_presence_list = true;
        }
        _sub_list = _sub_list.slice(0, _PRESENCE_SUB_LIST_MAX);
      }
      TS.ms.send({
        type: "presence_sub",
        ids: _sub_list
      });
      if (TS.boot_data.feature_dnd_on_demand) {
        TS.presence_manager.sub_list_changed.dispatch();
      }
      return null;
    });
  };
  var _sendQueryList = function() {
    if (!_has_started || _query_list.length === 0 || _is_query_waiting) return null;
    if (!_.get(TS, "model.ms_connected")) {
      return;
    }
    _is_query_waiting = true;
    Promise.resolve().then(function() {
      _is_query_waiting = false;
      TS.ms.send({
        type: "presence_query",
        ids: _query_list
      });
      _query_list = [];
      return null;
    });
  };
  _sendSubList = _.throttle(_sendSubList, _SEND_MSG_THROTTLE_MS);
  _sendQueryList = _.throttle(_sendQueryList, _SEND_MSG_THROTTLE_MS);
  var _handleConnect = function() {
    _sendSubList();
    _sendQueryList();
  };
  var _handleDisconnect = function() {
    TS.ms.promiseToHaveOpenWebSocket().then(function() {
      _sendSubList();
      _sendQueryList();
      return null;
    });
  };
  var _sanityCheckSubscriptionList = function() {
    var id;
    var members = [];
    var visible_members = [];
    var hidden_members = [];
    var icons = Array.prototype.slice.call(document.querySelectorAll("[data-member-presence]"));
    icons.forEach(function(icon) {
      id = icon.getAttribute("data-member-presence");
      if ($(icon).is(":visible")) {
        visible_members.push(id);
      } else {
        hidden_members.push(id);
      }
    });
    visible_members = _.uniq(visible_members);
    if (_.difference(visible_members, _sub_list).length) {
      var missing_members = _.map(_.difference(visible_members, _sub_list), TS.members.getMemberById);
      TS.warn("There are members needing presence updates in the DOM that are not in the presence subscription list");
      TS.warn("Missing Names:", _.map(missing_members, "name"));
      TS.warn("Missing Ids:", _.map(missing_members, "id"));
    }
    members = _.uniq(visible_members.concat(hidden_members));
    if (_.difference(_sub_list, members).length) {
      var extra_members = _.map(_.difference(_sub_list, members), TS.members.getMemberById);
      TS.warn("There are members in the presence subscription list that are no longer in the DOM.");
      TS.warn("This might be fine if a longListView of members is showing, but once that list is removed these errors should go away.");
      TS.warn("Extra Names:", _.map(extra_members, "name"));
      TS.warn("Extra Ids:", _.map(extra_members, "id"));
    }
  };
})();
(function() {
  "use strict";
  TS.registerComponent("PresenceList", {
    _constructor: function(members) {
      this._list = [];
      this.added_sig = new signals.Signal;
      this.removed_sig = new signals.Signal;
      TS.presence_manager.addPresenceList(this);
      if (members) this.add(members);
    },
    add: function(members) {
      if (!_.isArray(members)) members = [members];
      var add_list = _.difference(members, this._list);
      if (add_list.length) {
        this._list = this._list.concat(add_list);
        this.added_sig.dispatch(add_list);
      }
    },
    remove: function(members) {
      if (!_.isArray(members)) members = [members];
      var remove_list = _.intersection(members, this._list);
      if (remove_list.length) {
        this._list = _.difference(this._list, remove_list);
        this.removed_sig.dispatch(remove_list);
      }
    },
    clear: function() {
      this.removed_sig.dispatch(this._list);
      this._list = [];
    },
    destroy: function() {
      this.removed_sig.dispatch(this._list);
      this._list = null;
    },
    createNewPresenceList: function(members) {
      return new TS.PresenceList(members);
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("compression", {
    onStart: function() {},
    compress: function(k, str, immediate, after) {
      var start = Date.now();
      if (immediate) {
        var result = LZString.compress(str);
        var elapsed = Date.now() - start;
        TS.log(488, k + " took " + elapsed + "ms to _compress immediately str.length: " + str.length);
        return after({
          k: k,
          str: result
        });
      }
      _doCompressionJob(k, str, function(result, job_work_ms) {
        var elapsed = Date.now() - start;
        TS.log(488, k + " took " + elapsed + "ms for the compression worker to callback (" + job_work_ms + "ms spent within the worker) result.length: " + result.length);
        after({
          k: k,
          str: result
        });
      });
    },
    deCompress: function(k, str) {
      return "";
    },
    terminate: function() {
      if (_worker) _worker.terminate();
      _worker = null;
    }
  });
  var _worker = null;
  var _count = 0;
  var _callbacks = {};
  var _doCompressionJob = function(k, str, callback) {
    if (!_worker) _makeWorker();
    _count += 1;
    var job_key = "job_key" + _count;
    _callbacks[job_key] = function(result, job_work_ms) {
      callback(result, job_work_ms);
      delete _callbacks[job_key];
    };
    _worker.postMessage({
      request: "compress",
      input: str,
      job_key: job_key,
      k: k
    });
  };
  var _makeWorker = function() {
    if (_worker) {
      TS.error("_makeWorker but there is a _worker");
      return;
    }
    var LZString_url = _.get(TS, "boot_data.vvv_paths.lz_string", "/js/libs/lz-string-1.4.4.js");
    var using_local_js = TS.qs_args.local_assets || TS.qs_args.js_path;
    var is_dev = TS.environment.is_dev;
    if (using_local_js || is_dev) {
      LZString_url = location.protocol + "//" + location.host + LZString_url;
    }
    _worker = TS.utility.makeWebWorker("function() {			self.importScripts('" + LZString_url + "');			self.onmessage = function(e) {				var start = Date.now();				var result;				if (e.data.request === 'compress') {					result = LZString.compress(e.data.input)				}				var elapsed = Date.now() - start;				postMessage({					request: e.data.request,					result: result,					job_key: e.data.job_key,					k: e.data.k,					elapsed: elapsed				});			}		}", function(e) {
      var callback = _callbacks[e.data.job_key];
      if (!callback) {
        TS.error("e.data.job_key:" + e.data.job_key + " had no record in _callbacks??");
        return;
      }
      callback(e.data.result, e.data.elapsed);
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("storage", {
    version: "0.85",
    msgs_version: window.boot_data && boot_data.cache_version || "unknown_version",
    cache_ts_version: window.boot_data && boot_data.cache_ts_version || "unknown_version",
    do_compression: !TS.model.is_our_app && typeof window.Worker !== "undefined" && (!window.bowser || !bowser.phantom),
    test: function() {
      return {
        getLocalStorage: _getLs,
        setLocalStorage: _setLs,
        getKeys: _getKeys,
        set: _set
      };
    },
    onStart: function() {
      TS.storage.onStart = function() {};
      if (TS.boot_data.page_has_incomplete_user_model) {
        if (TS.lazyLoadMembersAndBots()) TS.log(1989, "Flannel: disabling member bot cache");
        TS.storage.disableMemberBotCache();
      }
      if (!TS.storage.do_compression && !TS.boot_data.feature_disable_ls_compression && TS.boot_data.feature_force_ls_compression) {
        TS.warn("Special case: force-enabling LS compression for this session.");
        TS.storage.do_compression = true;
      }
      if (TS.storage.do_compression && TS.boot_data.feature_disable_ls_compression) {
        if (TS.pri) TS.log(488, "TS.storage: disabling compression");
        TS.storage.do_compression = false;
      }
      TS.storage.version += TS.storage.do_compression ? "-compressed-LZString" : "";
      var should_disable = _disabled || TS.qs_args.ls_disabled == "1" || !_ls || TS.boot_data && TS.boot_data.ls_disabled || function() {
        if (!TS.storage.storageAvailable()) {
          _removeAllOurKeys();
          if (!TS.storage.storageAvailable()) {
            TS.warn("TS.storage.storageAvailable() = false in onStart after flushing all our keys, so disabling");
            return true;
          }
        }
        return false;
      }();
      TS.log(488, "TS.storage.onStart should_disable:" + should_disable);
      TS.log(488, "TS.storage.do_compression:" + TS.storage.do_compression + " (_ls.getItem('is_compressed') === 'yes'):" + (_ls && _ls.getItem("is_compressed") === "yes"));
      TS.ui.window_unloaded_sig.add(_windowUnloaded);
      TS.ui.window_focus_changed_sig.add(_windowBlurred);
      TS.storage.setDisabled(should_disable);
      _set("rxn_records", null);
    },
    setDisabled: function(disabled) {
      if (_disabled == disabled) return;
      if (disabled || !_ls) {
        _disabled = true;
        if (_ls) _removeAllOurKeys();
      } else {
        _disabled = false;
        _setUp();
      }
      TS.info("_disabled:" + _disabled);
    },
    storageAvailable: function() {
      if (!_ls) return false;
      try {
        var key = "test_to_see_if_we_can_write_to_local_storage";
        _ls.setItem(key, "foo");
        _ls.removeItem(key);
        return true;
      } catch (err) {
        return false;
      }
    },
    storageSize: function(log) {
      var length = 0;
      if (!_ls) return length;
      var keys = _getKeys();
      var c = 0;
      var key;
      var value;
      for (var i = 0; i < keys.length; i += 1) {
        c += 1;
        key = keys[i];
        value = _ls.getItem(key);
        if (!value && value !== "") {
          TS.warn(key + " not measurable value, typeof:" + typeof value);
        } else {
          length += value.length;
          if (log) TS.info(key + "=" + (value.length * 2 / 1024).toFixed(2) + "KB (total=" + (length / 1024).toFixed(2) + "KB)");
        }
      }
      if (log) TS.info("total for " + c + " items is " + (length / 1024).toFixed(2) + "KB");
      return length;
    },
    isUsingMemberBotCache: function() {
      return !_user_bot_caching_disabled && (TS.model && TS.model.supports_user_bot_caching);
    },
    disableMemberBotCache: function() {
      if (TS.pri) TS.log(488, 'disableMemberBotCache(): _user_bot_caching_disabled is currently "' + _user_bot_caching_disabled + '"');
      _user_bot_caching_disabled = true;
    },
    completelyEmptyAllStorageAndReset: function() {
      TS.info("completelyEmptyAllStorageAndReset running");
      _completelyEmptyAllStorage();
      TS.storage.storeLastEventTS("", true, true);
      var fetched_b4_flush = TS.storage.fetchLastEventTS(true);
      TS.info("completelyEmptyAllStorageAndReset fetched_b4_flush:" + fetched_b4_flush);
      if (fetched_b4_flush) {
        TS.info("completelyEmptyAllStorageAndReset _getKeys:" + _getKeys().join(", "));
        TS.info("completelyEmptyAllStorageAndReset Object.keys(_buffer):" + Object.keys(_buffer).join(", "));
      }
      _flushBuffer(true, "completelyEmptyAllStorageAndReset");
      var fetched_after_flush = TS.storage.fetchLastEventTS(true);
      TS.info("completelyEmptyAllStorageAndReset fetched_after_flush:" + fetched_after_flush);
      if (fetched_after_flush) {
        TS.info("completelyEmptyAllStorageAndReset _getKeys:" + _getKeys().join(", "));
        TS.info("completelyEmptyAllStorageAndReset Object.keys(_buffer):" + Object.keys(_buffer).join(", "));
      }
    },
    cleanOutCacheTsStorage: function() {
      var keys = _getKeys();
      TS.dir(488, keys, "_getKeys()");
      TS.storage.storeBots();
      TS.storage.storeMembers();
      keys = _getKeys();
      TS.dir(488, keys, "_getKeys()");
    },
    flush: function(also_clear_cache) {
      TS.log(488, "TS.storage.flush()");
      _removeAllOurKeys();
      if (also_clear_cache) TS.storage.clearBufferAndCache();
    },
    clearBufferAndCache: function() {
      TS.log(488, "TS.storage.clearBufferAndCache()");
      _buffer = {};
      _ls_fetch_cache = {};
      _last_cache_ts_possible = null;
      if (TS.compresion) TS.compression.terminate();
    },
    fetchLastActiveModelObId: function() {
      return _get("last_active_model_ob_id", undefined);
    },
    storeLastActiveModelObId: function(id) {
      _set("last_active_model_ob_id", id || undefined, true);
    },
    fetchStorageVersion: function() {
      return _get("storage_version");
    },
    storeStorageVersion: function(val) {
      _set("storage_version", val, true);
    },
    fetchCacheTSStorageVersion: function() {
      return _get("storage_cache_ts_version");
    },
    storeCacheTSStorageVersion: function(val) {
      _set("storage_cache_ts_version", val, true);
    },
    _makeMsgInputId: function(id) {
      return "msg_input_" + id;
    },
    fetchLastMsgInput: function(id) {
      return _get(TS.storage._makeMsgInputId(id), null);
    },
    storeLastMsgInput: function(id, txt) {
      _set(TS.storage._makeMsgInputId(id), txt);
    },
    _makeCommentInputId: function(id) {
      return "comment_input_" + id;
    },
    fetchLastCommentInput: function(id) {
      return _get(TS.storage._makeCommentInputId(id), null);
    },
    storeLastCommentInput: function(id, txt) {
      _set(TS.storage._makeCommentInputId(id), txt);
    },
    fetchOldestTs: function(id) {
      return _get(_makeOldestTsId(id), null);
    },
    storeOldestTs: function(id, ts) {
      _set(_makeOldestTsId(id), ts);
    },
    fetchActiveHistory: function() {
      return _get("active_history", []) || [];
    },
    storeActiveHistory: function(history) {
      _set("active_history", history, true);
    },
    fetchLastEventTS: function(log) {
      return _get("last_event_ts", "", log) || "";
    },
    storeLastEventTS: function(ts, immediate, log) {
      _set("last_event_ts", ts, immediate, log);
    },
    fetchUIState: function() {
      return _get("ui_state", {}) || {};
    },
    storeUIState: function(state) {
      _set("ui_state", state);
    },
    fetchExpandableState: function() {
      return _get("expandable_state", {}) || {};
    },
    storeExpandableState: function(state) {
      _set("expandable_state", state);
    },
    fetchClientWindows: function() {
      return _get("client_windows", {}) || {};
    },
    storeClientWindows: function(wins) {
      _set("client_windows", wins);
    },
    fetchInputHistory: function() {
      var A = _get("input_history", []) || [];
      if (typeof A === "string") A = [A];
      var max = 300;
      if (A.length > max) A.length = max;
      return A;
    },
    storeInputHistory: function(history) {
      _set("input_history", history);
    },
    fetchCustomEmoji: function() {
      return _get("custom_emoji", null) || null;
    },
    storeCustomEmoji: function(val) {
      _set("custom_emoji", val);
    },
    fetchApps: function() {
      return _get("apps", null) || null;
    },
    storeApps: function(val) {
      _set("apps", val);
    },
    fetchAppsSearchResults: function() {
      return _get("apps_search", null) || null;
    },
    storeAppsSearchResults: function(val) {
      _set("apps_search", val);
    },
    fetchCmds: function() {
      return _get("cmds", null) || null;
    },
    storeCmds: function(val) {
      _set("cmds", val);
    },
    fetchChannelPageState: function() {
      return _get("channel_page_state", {}) || {};
    },
    storeChannelPageState: function(state) {
      _set("channel_page_state", state);
    },
    fetchInvitesState: function() {
      return _get("invites_state", []) || [];
    },
    storeInvitesState: function(state) {
      _set("invites_state", state);
    },
    fetchReplyInput: function(model_ob_id, thread_ts) {
      var inputs = _get("reply_inputs") || [];
      var prev_input = _.find(inputs, {
        model_ob_id: model_ob_id,
        thread_ts: thread_ts
      });
      return prev_input ? prev_input.text : "";
    },
    storeReplyInput: function(model_ob_id, thread_ts, text) {
      var max_saved_inputs = 10;
      var inputs = _get("reply_inputs") || [];
      inputs = _.reject(inputs, {
        model_ob_id: model_ob_id,
        thread_ts: thread_ts
      });
      if (inputs.length > max_saved_inputs) {
        inputs.shift();
      }
      inputs.push({
        model_ob_id: model_ob_id,
        thread_ts: thread_ts,
        text: text
      });
      _set("reply_inputs", inputs);
    },
    fetchFilterState: function() {
      return _get("team_filter_state", "") || "";
    },
    storeFilterState: function(state) {
      _set("team_filter_state", state);
    },
    fetchCallsState: function() {
      return _get("calls_state", {}) || {};
    },
    storeCallsState: function(state) {
      _set("calls_state", state);
    },
    fetchMembers: function() {
      if (!TS.storage.isUsingMemberBotCache()) {
        return [];
      }
      var members_data = _get("members_data");
      if (!members_data) return [];
      return members_data.members || [];
    },
    storeMembers: function(members) {
      if (!TS.storage.isUsingMemberBotCache()) {
        members = [];
      }
      _set("last_cache_ts", null, true);
      var members_data = members ? {
        members: members,
        cache_ts: _last_cache_ts_possible
      } : null;
      _set("members_data", members_data);
    },
    fetchBots: function() {
      if (!TS.storage.isUsingMemberBotCache()) return [];
      var bots_data = _get("bots_data");
      if (!bots_data) return [];
      return bots_data.bots || [];
    },
    storeBots: function(bots) {
      if (!TS.storage.isUsingMemberBotCache()) {
        bots = [];
      }
      _set("last_cache_ts", null, true);
      var bots_data = bots ? {
        bots: bots,
        cache_ts: _last_cache_ts_possible
      } : null;
      _set("bots_data", bots_data);
    },
    rememberLastCacheTS: function(ts) {
      if (!TS.storage.isUsingMemberBotCache()) {
        if (TS.pri && ts) TS.log(488, "rememberLastCacheTS: Exiting because isUsingMemberBotCache() returned false.");
        return;
      }
      if (!ts) return;
      if (_last_cache_ts_possible && ts <= _last_cache_ts_possible) {
        if (TS.pri) TS.log(488, "rememberLastCacheTS: provided ts of " + ts + " <= _last_cache_ts_possible of " + _last_cache_ts_possible + " - exiting.");
        return;
      }
      if (TS.pri) TS.log(488, "rememberLastCacheTS(" + ts + ")");
      _last_cache_ts_possible = ts;
    },
    fetchLastCacheTS: function() {
      var last_possible = parseInt(_last_cache_ts_possible, 10) || 0;
      if (!TS.storage.isUsingMemberBotCache()) {
        if (last_possible) {
          TS.warn("fetchLastCacheTS: isUsingMemberBotCache() = false, but returning last_possible of " + last_possible + " instead of 0.");
          return last_possible;
        }
        if (TS.pri) TS.log(488, "fetchLastCacheTS: returning 0 because isUsingMemberBotCache() returned false, and no last_possible from _last_cache_ts_possible.", last_possible, _last_cache_ts_possible);
        return 0;
      }
      var ls_result = parseInt(_get("last_cache_ts"), 10) || 0;
      var result = ls_result || last_possible;
      if (TS.pri) TS.log(488, 'fetchLastCacheTS: _get returned "' + ls_result + '", last_possible = "' + last_possible + '" - returning "' + result + '"');
      return result;
    },
    fetchFrecency: function(namespace) {
      return _get("frecency_" + namespace);
    },
    storeFrecency: function(namespace, data) {
      _set("frecency_" + namespace, data);
    },
    clearFrecency: function(namespace) {
      _set("frecency_" + namespace, "");
    },
    fetchEnterpriseState: function() {
      return _get("enterprise_state", {}) || {};
    },
    storeEnterpriseState: function(state) {
      _set("enterprise_state", state);
    }
  });
  var _prefix = window.boot_data.user_id + "_";
  var _msgs_id_part = "channel_msgs_";
  var _oldest_ts_part = "oldest_msg_ts_";
  var _makeOldestTsId = function(id) {
    return _oldest_ts_part + id;
  };
  var _disabled;
  var _user_bot_caching_disabled = false;
  var _immediate_saves = false;
  var _last_cache_ts_possible = null;
  var _buffer = {};
  var _ls_fetch_cache = {};
  var _slow_get_threshold = 1e3;
  var _slow_get_logged = false;
  var _slow_set_threshold = 1e3;
  var _slow_set_logged = false;
  var _slow_write_threshold = 1e3;
  var _slow_write_logged = false;
  var _slow_all_write_logged = false;
  var _flush_all_buffer_interv = null;
  var _flush_all_buffer_interv_ms = 5 * 60 * 1e3;
  var _flush_all_buffer_user_inactive_ms = 1e4;
  var _flush_one_buffer_user_inactive_ms = 1e3;
  var _getKeys = function() {
    var A = [];
    if (!_ls) return A;
    var len = _ls.length;
    if (!len) return A;
    for (var i = 0; i < len; i += 1) {
      A.push(_ls.key(i));
    }
    return A;
  };
  var _setUp = function() {
    var keys;
    if (!_disabled) {
      var temp_storage_version = TS.storage.fetchStorageVersion() || "";
      var is_compressed = temp_storage_version.indexOf("-compressed") != -1 || _ls.getItem("is_compressed") === "yes";
      if (TS.storage.do_compression && !is_compressed) {
        TS.warn("migrating to compressed format");
        keys = _getKeys();
        keys.forEach(function(k) {
          var name = k.replace(_prefix, "");
          var val = _convertTypeForFetch(k, _ls.getItem(k));
          var log_string = "converting: " + k + " -> " + name + " val.length: " + (val === undefined || val === null ? -1 : String(val).length);
          _set(name, null);
          _set(name, val);
          if (_get(name) == val) {
            TS.log(488, log_string + " SUCCESS _get(name) has a value:" + !!_get(name) + ", and it it the same as val");
          } else {
            TS.error(log_string + " FAILURE _get(name) !== val");
          }
        });
        TS.warn("migration to compressed format complete, " + keys.length + " migrated");
        TS.storage.storeStorageVersion(TS.storage.version);
      } else {
        TS.log(488, "no migration needed");
      }
      _ls.setItem("is_compressed", TS.storage.do_compression ? "yes" : "no");
    }
    var storage_cache_ts_version = TS.storage.fetchCacheTSStorageVersion();
    TS.log(488, "TS.storage.cache_ts_version:" + TS.storage.cache_ts_version);
    TS.log(488, "storage_cache_ts_version:" + storage_cache_ts_version);
    var storage_version = TS.storage.fetchStorageVersion() || "";
    TS.log(488, "TS.storage.version:" + TS.storage.version);
    TS.log(488, "storage_version:" + storage_version);
    TS.log(488, "TS.storage last_unload_flushing: " + _get("last_unload_flushing"));
    TS.log(488, "TS.storage.storageAvailable(): " + TS.storage.storageAvailable());
    keys = _getKeys();
    TS.dir(488, keys, "_getKeys()");
    if (!TS.storage.storageAvailable()) {
      TS.warn("TS.storage.storageAvailable() = false so flushing all our keys");
      _removeAllOurKeys();
    } else if (storage_version != TS.storage.version) {
      TS.warn("storage_version:" + storage_version + " does not match TS.storage.version:" + TS.storage.version + " so flushing all our keys: " + keys.join(", "));
      _removeAllOurKeys();
    } else if (!TS.storage.fetchLastEventTS()) {
      TS.warn("TS.storage.fetchLastEventTS() is empty so flushing channel data");
      _completelyEmptyAllStorage();
    } else if (storage_cache_ts_version != TS.storage.cache_ts_version) {
      TS.warn("storage_cache_ts_version:" + storage_cache_ts_version + " does not match TS.storage.cache_ts_version:" + TS.storage.cache_ts_version + " so flushing user/bot data");
      TS.storage.cleanOutCacheTsStorage();
    }
    TS.storage.storeStorageVersion(TS.storage.version);
    TS.storage.storeCacheTSStorageVersion(TS.storage.cache_ts_version);
    TS.ms.connected_sig.addOnce(_flushAllBufferOnIdleTimer);
  };
  var _removeAllOurKeys = function() {
    _getKeys().forEach(function(key) {
      if (key.indexOf(_prefix) === 0) _ls.removeItem(key);
    });
  };
  var _completelyEmptyAllStorage = function() {
    var keys = _getKeys();
    TS.log(488, keys, "_getKeys()");
    var key;
    for (var i = 0; i < keys.length; i += 1) {
      key = keys[i];
      if (key.indexOf(_prefix) !== 0) continue;
      if (key.indexOf(_msgs_id_part) == -1 && key.indexOf(_oldest_ts_part) == -1) continue;
      _ls.removeItem(key);
      delete _buffer[key];
      TS.warn("_ls.removeItem:" + key);
    }
    for (key in _buffer) {
      if (key.indexOf(_prefix) !== 0) continue;
      if (key.indexOf(_msgs_id_part) == -1 && key.indexOf(_oldest_ts_part) == -1) continue;
      delete _buffer[key];
      TS.warn("delete _buffer:" + key);
    }
    _ls_fetch_cache = {};
    keys = _getKeys();
    TS.dir(488, keys, "_getKeys()");
  };
  var _windowUnloaded = function() {
    _immediate_saves = true;
    _set("last_unload_flushing", (new Date).toString(), true);
    _flushBuffer(true, "_windowUnloaded");
    TS.compression.terminate();
  };
  var _windowBlurred = function() {
    _flushBuffer(true, "_windowBlurred");
  };
  var _flushAllBufferOnIdleTimer = function() {
    if (_flush_all_buffer_interv) {
      window.clearInterval(_flush_all_buffer_interv);
      _flush_all_buffer_interv = null;
    }
    _flush_all_buffer_interv = window.setInterval(_maybeFlushBuffer, _flush_all_buffer_interv_ms);
  };
  var _maybeFlushBuffer = function() {
    if (!TS.model) return;
    var buffer_count = Object.keys(_buffer).length;
    if (!buffer_count) return;
    var ok_to_flush_all = false;
    var ok_to_flush_why = "";
    if (!TS.model.ui.is_window_focused) {
      ok_to_flush_why = "window blurred!";
      ok_to_flush_all = true;
    }
    var ms_since_activity = Date.now() - TS.model.client.last_user_active_timestamp;
    if (!ok_to_flush_all) {
      if (ms_since_activity >= _flush_all_buffer_user_inactive_ms) {
        ok_to_flush_why = "window focused, but user has been idle long enough " + ms_since_activity + " >= " + _flush_all_buffer_user_inactive_ms;
        ok_to_flush_all = true;
      }
    }
    TS.log(488, "_maybeFlushBuffer ok_to_flush_all:" + ok_to_flush_all);
    if (ok_to_flush_all) {
      _flushBuffer(true, "maybeFlushBuffer (" + buffer_count + ") " + ok_to_flush_why);
      return;
    }
    var ok_to_flush_some = ms_since_activity > _flush_one_buffer_user_inactive_ms;
    TS.log(488, "_maybeFlushBuffer ok_to_flush_some:" + ok_to_flush_some);
    ok_to_flush_why = "window focused, but user has been idle long enough " + ms_since_activity + " >= " + _flush_one_buffer_user_inactive_ms;
    if (ok_to_flush_some) {
      _flushBuffer(false, "maybeFlushBuffer (" + buffer_count + ") " + ok_to_flush_why);
    }
  };
  var _prepareValForStorage = function(val) {
    return typeof val === "string" || typeof val === "number" || !val ? val : JSON.stringify(val);
  };
  var _correctBadValsFromStorage = function(val) {
    if (val === "undefined") return null;
    if (val === "null") return null;
    return val;
  };
  var _flushBuffer = function(all, why) {
    if (_disabled) return;
    var begin = new Date;
    var start = Date.now();
    var duration;
    var i = 0;
    var k;
    var do_log = TS.model && TS.model.team && TS.model.team.domain && TS.boot_data.feature_tinyspeck;
    var elapsed;
    var storage_size;
    var debug_time;
    var val;
    var message;
    for (k in _buffer) {
      if (_buffer[k].being_flushed) continue;
      val = _prepareValForStorage(_buffer[k].val);
      if (val === undefined || val === null) {
        _ls.removeItem(k);
        delete _buffer[k];
        delete _ls_fetch_cache[k];
      } else {
        try {
          _compressAndStore(k, val);
        } catch (err) {
          TS.warn("_flushBuffer _ls.setItem failed once, flushing all our keys. TS.storage.storageSize():" + TS.storage.storageSize(false));
          TS.error(0, err);
          _removeAllOurKeys();
          delete _buffer[k];
          delete _ls_fetch_cache[k];
          continue;
        }
      }
      i += 1;
      duration = Date.now() - start;
      if (do_log) {
        TS.log(488, "_flushBuffer _ls.setItem " + k + ": " + duration + "ms " + (_buffer[k] && _buffer[k].val && _buffer[k].val.toString ? _buffer[k].val.toString().substr(0, 100) : "NULL?"));
      }
      if (!all) {
        elapsed = new Date - begin;
        if (!_slow_write_logged && elapsed > _slow_write_threshold) {
          _slow_write_logged = true;
          debug_time = new Date;
          try {
            storage_size = TS.storage.storageSize();
          } catch (err) {}
          debug_time = new Date - debug_time;
          message = "Took " + elapsed + "ms for " + i + " item (!all case) (threshold is " + _slow_write_threshold + " ms). Key: " + k + ". Buffer length: " + (_buffer[k] && _buffer[k].val && _buffer[k].val.toString() ? _buffer[k].val.toString().length : "unknown (not a string)") + ". localStorage size: " + (storage_size || "unknown") + ". Time to read LS size: " + debug_time;
          TS.info("_flushBuffer exceeded slow write threshold: " + message);
        }
      }
      if (_buffer[k]) {
        _buffer[k].being_flushed = true;
      }
      if (!all) {
        TS.log(488, "_flushBuffer: Wrote one item. why: " + why);
        return;
      }
      _ls_fetch_cache = {};
    }
    if (i && !_slow_all_write_logged) {
      elapsed = new Date - begin;
      if (elapsed > _slow_write_threshold) {
        _slow_all_write_logged = true;
        try {
          storage_size = TS.storage.storageSize();
        } catch (err) {}
        message = "Took " + elapsed + "ms for " + i + " items (threshold is " + _slow_write_threshold + " ms). localStorage size: " + storage_size + ". App open for " + ((Date.now() - TS.boot_data.start_ms) / 1e3 / 60).toFixed(2) + " min. why: " + why;
        TS.info("_flushBuffer exceeded slow write threshold (all case): " + message);
      }
    }
    if (i === 0) {
      TS.log(488, "_flushBuffer: Nothing to save.");
    } else {
      TS.log(488, "_flushBuffer: Saved " + i + (i === 1 ? " item" : " items") + " why: " + why);
    }
  };
  var _get = function(name, default_value, log) {
    var k = _prefix + name;
    if (log) TS.info("_get name:" + name + " k:" + k + " disabled:" + _disabled + ' _buffer["' + k + '"].val:' + (_buffer[k] && _buffer[k].val));
    if (_disabled) {
      return _buffer[k] && _buffer[k].val || default_value;
    }
    if (k in _buffer) {
      return _buffer[k] && _buffer[k].val || default_value;
    }
    if (_ls_fetch_cache.hasOwnProperty(k)) {
      return _ls_fetch_cache[k];
    }
    var result = _convertTypeForFetch(k, _decompress(k, _ls.getItem(k)), default_value, log);
    _ls_fetch_cache[k] = result;
    return result;
  };
  var _convertTypeForFetch = function(k, val, default_value, log) {
    var elapsed = new Date;
    var result = _correctBadValsFromStorage(val);
    if (log) TS.info("_get _correctBadValsFromStorage(_ls.getItem(k)) k:" + k + " typeof result:" + typeof result + " /^[{[]/.test(result):" + /^[{[]/.test(result));
    var storage_size;
    if (result && typeof result === "string" && /^[{[]/.test(result)) {
      result = TS.utility.parseJSONOrElse(result) || result;
    }
    result = result || (default_value !== undefined ? default_value : null);
    elapsed = new Date - elapsed;
    if (!_slow_get_logged && elapsed > _slow_get_threshold) {
      _slow_get_logged = true;
      try {
        storage_size = TS.storage.storageSize();
      } catch (err) {}
      var message = "_get took longer than threshold: Took " + elapsed + "ms to read " + k + " (theshold is " + _slow_get_threshold + "ms), length = " + (result && !isNaN(result.length) ? result.length : "unknown") + ". Storage size: " + storage_size;
      TS.info(message);
    }
    return result;
  };
  var _set = function(name, value, immediate, log) {
    var failed = false;
    var elapsed = new Date;
    var storage_size;
    var k = _prefix + name;
    _buffer[k] = {
      val: value,
      being_flushed: false
    };
    _ls_fetch_cache[k] = _buffer[k].val;
    if (log) TS.info("_set immediate:" + immediate + " name:" + name + " k:" + k + " disabled:" + _disabled + " do_compression:" + TS.storage.do_compression + ' _buffer["' + k + '"].val:' + _buffer[k].val);
    if (immediate) {
      if (!_disabled) {
        var val = _prepareValForStorage(value);
        if (val === undefined || val === null) {
          _ls.removeItem(k);
          delete _buffer[k];
        } else {
          try {
            _compressAndStore(k, val, immediate);
          } catch (err) {
            TS.warn("_set _ls.setItem failed, flushing. TS.storage.storageSize():" + TS.storage.storageSize(false));
            failed = true;
          }
        }
      }
      if (log) TS.info("_set failed:" + failed);
      if (!failed) {
        if (log) TS.info('_set _buffer["' + k + '"]:' + (_buffer[k] && JSON.stringify(_buffer[k])));
        elapsed = new Date - elapsed;
        if (elapsed > _slow_set_threshold) {
          TS.warn("_set immediately " + name + ": " + elapsed + "ms " + (value && value.toString ? value.toString().substr(0, 100) : "NULL?"));
          if (!_slow_set_logged) {
            _slow_set_logged = true;
            try {
              storage_size = TS.storage.storageSize();
            } catch (err) {}
            var message = "_set exceeded slow set threshold (immediate): Took " + elapsed + "ms to write " + k + " (theshold is " + _slow_set_threshold + "ms), length = " + (value && !isNaN(value.length) ? value.length : "unknown") + ". Storage length: " + storage_size;
            TS.info(message);
          }
        } else {
          TS.log(488, "_set GOOD immediately: " + immediate + " " + name + ": " + elapsed + "ms", value);
        }
      }
    }
  };
  var _calcLastCacheTS = function() {
    var k = _prefix + "bots_data";
    var bots_data_raw = _ls.getItem(k);
    var bots_data = bots_data_raw && JSON.parse(_correctBadValsFromStorage(_decompress(k, bots_data_raw))) || null;
    var members_data_raw = _ls.getItem(k);
    var members_data = members_data_raw && JSON.parse(_correctBadValsFromStorage(_decompress(k, members_data_raw))) || null;
    if (!TS.model.bots.length && members_data && members_data.cache_ts) {
      if (TS.pri) TS.log(488, "_calcLastCacheTS: no TS.model.bots.length, but we have members_data && members_data.cache_ts = " + members_data.cache_ts);
      return members_data.cache_ts;
    } else if (bots_data && bots_data.cache_ts && members_data && members_data.cache_ts) {
      if (TS.pri) TS.log(488, "_calcLastCacheTS: bots_data && members_data && both have cache_ts, returning the lesser of " + bots_data.cache_ts + " and " + members_data.cache_ts);
      return bots_data.cache_ts < members_data.cache_ts ? bots_data.cache_ts : members_data.cache_ts;
    }
    if (TS.pri) TS.log(488, "_calcLastCacheTS: WTF maybe no members or bots data at all? Returning 0", members_data, bots_data);
    return 0;
  };
  var _storeLastCacheTS = function() {
    if (!TS.storage.isUsingMemberBotCache()) {
      if (TS.pri) TS.log(488, "_storeLastCacheTS(): Exiting because isUsingMemberBotCache() returned false.");
      return;
    }
    var last_cache_ts = _calcLastCacheTS();
    TS.log(488, "setting last_cache_ts from _calcLastCacheTS(): " + last_cache_ts);
    _set("last_cache_ts", last_cache_ts, true);
  };
  var _using_macgap_ls = !!(window.macgap && macgap.ls);
  var _ls = _using_macgap_ls ? macgap.ls : window.localStorage;
  var _getLs = function() {
    return _ls;
  };
  var _setLs = function(ls) {
    _ls = ls;
  };
  var _compressAndStore = function(k, str, immediate) {
    str = String(str);
    if (TS.storage.do_compression) {
      TS.compression.compress(k, str, immediate || _immediate_saves, _afterCompress);
      return;
    }
    _afterCompress({
      k: k,
      str: str
    });
  };
  var _afterCompress = function(ob) {
    _ls.setItem(ob.k, ob.str);
    var testAndFinishOrTryAgain = function(i) {
      var from_ls = _ls.getItem(ob.k);
      if (from_ls === ob.str) {
        if (i > 1) TS.warn(ob.k + " now saved, try #" + i);
        delete _buffer[ob.k];
        delete _ls_fetch_cache[ob.k];
        var name = ob.k.replace(_prefix, "");
        if (name === "bots_data" || name === "members_data") {
          _storeLastCacheTS();
        }
        return;
      }
      if (i > 1 && (!_buffer[ob.k] || _buffer[ob.k].val != ob.str)) {
        TS.error("buffer changed for " + ob.k + " so we don't care anymore, a new value is being set for it, try #" + i);
        return;
      }
      TS.error("WTF not saved, try #" + i + " " + ob.k + " " + (ob.str || "").length + " typeof ob.str:" + typeof ob.str + " from_ls:" + typeof from_ls);
      _ls.setItem(ob.k, ob.str);
      setTimeout(testAndFinishOrTryAgain, 1e3, i + 1);
    };
    testAndFinishOrTryAgain(1);
  };
  var _decompress = function(k, str) {
    if (!TS.storage.do_compression) {
      return str;
    }
    var start = Date.now();
    if (str) str = LZString.decompress(str);
    var elapsed = Date.now() - start;
    if (str) TS.log(488, k + " took " + elapsed + "ms to _decompress str.length: " + str.length);
    return str;
  };
})();
(function() {
  "use strict";
  TS.registerModule("api", {
    paused_sig: new signals.Signal,
    unpaused_sig: new signals.Signal,
    Q_empty_sig: new signals.Signal,
    onStart: function() {
      if (TS.boot_data.feature_name_tagging_client) {
        var name_tagging_arg_methods = ["channels.view", "rtm.leanStart", "rtm.start", "users.info", "users.list"];
        _.forEach(name_tagging_arg_methods, function(method) {
          if (_default_api_args_by_method[method]) {
            _.assign(_default_api_args_by_method[method], {
              name_tagging: true
            });
          } else {
            _default_api_args_by_method[method] = {
              name_tagging: true
            };
          }
        });
      }
      if (TS.boot_data.feature_sli_briefing) {
        _ensure_model_methodsA.push("highlights.briefing");
      }
    },
    test: function() {
      var test_ob = {
        _one_at_a_time_methodsA: _one_at_a_time_methodsA,
        _ensure_model_methodsA: _ensure_model_methodsA,
        _pause: _pause,
        _unPause: _unPause,
        _pauseUntilAPIConnectionRestored: _pauseUntilAPIConnectionRestored,
        _promisify: _promisify,
        _getMaxAttempts: _getMaxAttempts,
        _incrementPending: _incrementPending,
        _decrementPending: _decrementPending,
        _getDefaultArgsByMethodName: _getDefaultArgsByMethodName,
        _kickOffACallOrEnqueue: _kickOffACallOrEnqueue,
        _callOutsideHandler: _callOutsideHandler,
        _nextFromQ: _nextFromQ,
        _reQueue: _reQueue,
        _calculateHTTPErrorDelayMs: _calculateHTTPErrorDelayMs,
        _makeLogSafeMethodName: _makeLogSafeMethodName,
        _logError: _logError,
        _getAPIErrorObject: _getAPIErrorObject,
        _maybeShowConnectivityWarning: _maybeShowConnectivityWarning,
        _one_at_a_time_Q: _one_at_a_time_Q
      };
      Object.defineProperty(test_ob, "_pauseFor", {
        get: function() {
          return _pauseFor;
        },
        set: function(v) {
          _pauseFor = v;
        }
      });
      Object.defineProperty(test_ob, "_pauseUntilBackOnline", {
        get: function() {
          return _pauseUntilBackOnline;
        },
        set: function(v) {
          _pauseUntilBackOnline = v;
        }
      });
      Object.defineProperty(test_ob, "_pauseUntilServiceIsUp", {
        get: function() {
          return _pauseUntilServiceIsUp;
        },
        set: function(v) {
          _pauseUntilServiceIsUp = v;
        }
      });
      Object.defineProperty(test_ob, "_maybePauseUntilServiceIsUp", {
        get: function() {
          return _maybePauseUntilServiceIsUp;
        },
        set: function(v) {
          _maybePauseUntilServiceIsUp = v;
        }
      });
      Object.defineProperty(test_ob, "_one_at_a_time_call_pending", {
        get: function() {
          return _one_at_a_time_call_pending;
        },
        set: function(v) {
          _one_at_a_time_call_pending = v;
        }
      });
      Object.defineProperty(test_ob, "_is_paused", {
        get: function() {
          return _is_paused;
        },
        set: function(v) {
          _is_paused = v;
        }
      });
      Object.defineProperty(test_ob, "_ensure_model_methodsA", {
        get: function() {
          return _ensure_model_methodsA;
        },
        set: function(v) {
          _ensure_model_methodsA = v;
        }
      });
      Object.defineProperty(test_ob, "_one_at_a_time_methodsA", {
        get: function() {
          return _one_at_a_time_methodsA;
        },
        set: function(v) {
          _one_at_a_time_methodsA = v;
        }
      });
      Object.defineProperty(test_ob, "_max_attempts", {
        get: function() {
          return _max_attempts;
        }
      });
      Object.defineProperty(test_ob, "_pending", {
        get: function() {
          return _pending;
        },
        set: function(v) {
          _pending = v;
        }
      });
      Object.defineProperty(test_ob, "_pause_secs", {
        get: function() {
          return _pause_secs;
        },
        set: function(v) {
          _pause_secs = v;
        }
      });
      Object.defineProperty(test_ob, "_maybeTimingClearMarks", {
        get: function() {
          return _maybeTimingClearMarks;
        },
        set: function(v) {
          _maybeTimingClearMarks = v;
        }
      });
      Object.defineProperty(test_ob, "_maybeTimingCount", {
        get: function() {
          return _maybeTimingCount;
        },
        set: function(v) {
          _maybeTimingCount = v;
        }
      });
      Object.defineProperty(test_ob, "_maybeTimingMark", {
        get: function() {
          return _maybeTimingMark;
        },
        set: function(v) {
          _maybeTimingMark = v;
        }
      });
      Object.defineProperty(test_ob, "_maybeTimingMeasure", {
        get: function() {
          return _maybeTimingMeasure;
        },
        set: function(v) {
          _maybeTimingMeasure = v;
        }
      });
      Object.defineProperty(test_ob, "_maybeShowConnectivityWarning", {
        get: function() {
          return _maybeShowConnectivityWarning;
        },
        set: function(v) {
          _maybeShowConnectivityWarning = v;
        }
      });
      Object.defineProperty(test_ob, "_default_api_args", {
        get: function() {
          return _default_api_args;
        },
        set: function(v) {
          _default_api_args = v;
        }
      });
      Object.defineProperty(test_ob, "_default_api_args_by_method", {
        get: function() {
          return _default_api_args_by_method;
        },
        set: function(v) {
          _default_api_args_by_method = v;
        }
      });
      Object.defineProperty(test_ob, "_kickOffACall", {
        get: function() {
          return _kickOffACall;
        },
        set: function(v) {
          _kickOffACall = v;
        }
      });
      Object.defineProperty(test_ob, "_kickOffACallOrEnqueue", {
        get: function() {
          return _kickOffACallOrEnqueue;
        },
        set: function(v) {
          _kickOffACallOrEnqueue = v;
        }
      });
      Object.defineProperty(test_ob, "_last_connectivity_warning_time", {
        get: function() {
          return _last_connectivity_warning_time;
        },
        set: function(v) {
          _last_connectivity_warning_time = v;
        }
      });
      Object.defineProperty(test_ob, "_api_queue_depth_warning_threshold", {
        get: function() {
          return _api_queue_depth_warning_threshold;
        },
        set: function(v) {
          _api_queue_depth_warning_threshold = v;
        }
      });
      Object.defineProperty(test_ob, "_main_Q", {
        get: function() {
          return _main_Q;
        },
        set: function(v) {
          _main_Q = v;
        }
      });
      Object.defineProperty(test_ob, "_one_at_a_time_Q", {
        get: function() {
          return _one_at_a_time_Q;
        },
        set: function(v) {
          _one_at_a_time_Q = v;
        }
      });
      Object.defineProperty(test_ob, "_makeRequest", {
        get: function() {
          return _makeRequest;
        },
        set: function(v) {
          _makeRequest = v;
        }
      });
      return test_ob;
    },
    call: function(method, args, handler, dont_set_active, progressHandler) {
      return _kickOffACallOrEnqueue(method, args, handler, dont_set_active, progressHandler);
    },
    callImmediately: function(method, args, handler, dont_set_active, progressHandler) {
      var top_of_Q = true;
      if (_one_at_a_time_methodsA.indexOf(method) != -1) {
        if (_one_at_a_time_call_pending) {
          TS.warn(method + " cannot be called with TS.api.callImmediately because a one-at-a-time call is already pending, so sending to _kickOffACallOrEnqueue for enqueuing");
          return _kickOffACallOrEnqueue(method, args, handler, dont_set_active, progressHandler, top_of_Q);
        }
      }
      if (_is_paused) {
        TS.warn(method + " cannot be called with TS.api.callImmediately because we are waiting due to a non-200 response, so sending to _kickOffACallOrEnqueue for enqueuing");
        return _kickOffACallOrEnqueue(method, args, handler, dont_set_active, progressHandler, top_of_Q);
      }
      args = args || {};
      var p = _promisify(method, handler);
      return _kickOffACall(method, args, p, dont_set_active, progressHandler);
    },
    callSynchronously: function(method, args, handler, dont_set_active, progressHandler) {
      args = args || {};
      args._synchronously = true;
      return TS.api.callImmediately(method, args, handler, dont_set_active, progressHandler);
    },
    debugGetCounts: function() {
      return {
        _method_call_counts: _method_call_counts,
        _pending: _pending
      };
    },
    hasPendingRequests: function() {
      return !!_pending;
    },
    getQLengths: function() {
      return {
        _main_Q: _main_Q.length,
        _one_at_a_time_Q: _one_at_a_time_Q.length
      };
    },
    isPaused: function() {
      return _is_paused;
    },
    callFuncWhenApiQisEmpty: function(func) {
      if (TS.api.hasPendingRequests()) {
        if (!TS.api.Q_empty_sig.has(func)) {
          TS.api.Q_empty_sig.addOnce(func);
        }
      } else {
        func();
      }
    },
    debugShowStatus: function() {
      TS.console.group("TS.api status");
      if (_is_paused) {
        if (_pause_secs) {
          TS.console.log(2, "API calls are paused for " + _pause_secs + "more seconds");
        } else {
          TS.console.log(2, "API calls are paused.");
        }
      } else {
        TS.console.log(2, "API calls are NOT paused");
      }
      TS.console.warn(2, "Pending count is " + _pending + ", main queue length is " + _main_Q.length + ", and one-at-a-time queue length is " + _one_at_a_time_Q.length);
      if (_method_call_counts.total_asks == _method_call_counts.total_attempts) {
        TS.console.log(2, "Total API calls made (there have been no retries): " + _method_call_counts.total_asks);
      } else {
        TS.console.log(2, "Total API calls made (not including retries): " + _method_call_counts.total_asks);
        TS.console.log(2, "Total API calls made (including retries): " + _method_call_counts.total_attempts);
      }
      if (_method_call_counts.total_non_200s) {
        TS.console.warn(2, "Total non-200 API responses: " + _method_call_counts.total_non_200s);
      } else {
        TS.console.log(2, "No non-200 API responses");
      }
      TS.console.groupEnd("TS.api status");
    },
    debugShowQueue: function() {
      _.forEach({
        main: _main_Q,
        "one-at-a-time": _one_at_a_time_Q
      }, function(queue, queue_name) {
        TS.console.group("TS.api " + queue_name + " queue");
        if (queue.length) {
          queue.forEach(function(pending_call) {
            TS.console.log(2, pending_call.method, pending_call.args);
          });
        } else {
          TS.console.log(2, "Nothing pending in " + queue_name + " queue");
        }
        TS.console.groupEnd("TS.api " + queue_name + " queue");
      });
    },
    debugSetPaused: function(paused) {
      var debug_pause_secs = 100;
      if (paused) {
        _pause({
          reason: {
            DEBUG: true
          },
          retry_after: debug_pause_secs * 1e3
        });
        TS.console.log(2, "API calls are now paused for", debug_pause_secs, "seconds");
      } else {
        _unPause();
        TS.console.log(2, "API calls are now unpaused");
      }
    },
    runNextFromQueue: function() {
      if (_is_paused) {
        TS.info("Calls are paused, so runNextFromQueue doing anything");
        return;
      }
      TS.info("Running next from queue");
      _nextFromQ();
    }
  });
  var _default_api_args = {};
  var _default_api_args_by_method = {
    "channels.view": {
      canonical_avatars: true
    },
    "rtm.leanStart": {
      canonical_avatars: true
    },
    "rtm.start": {
      canonical_avatars: true
    },
    "users.info": {
      canonical_avatars: true
    },
    "users.list": {
      canonical_avatars: true
    }
  };
  var _ensure_model_methodsA = ["activity.mentions", "stars.list", "files.list", "files.info", "search.messages", "search.files", "channels.history", "groups.history", "im.history", "mpim.history", "channels.listShared", "groups.listShared", "unread.history", "pins.list", "subteams.users.list", "subteams.list", "channels.replies", "groups.replies", "im.replies", "subscriptions.thread.getView", "chat.command"];
  var _skip_extra_member_fetch_methods = ["channels.history"];
  var _timing_methodsA = ["rtm.start", "rtm.leanStart", "files.list"];
  var _progress_check_methodsA = ["rtm.start", "rtm.leanStart", "activity.mentions", "stars.list", "files.list", "files.info", "apps.list", "commands.list", "channels.list", "emoji.list", "help.issues.list", "subteams.list", "subteams.users.list", "rtm.checkFastReconnect"];
  var _one_at_a_time_methodsA = ["users.prefs.set", "rtm.start", "rtm.leanStart", "rtm.checkFastReconnect", "enterprise.setPhoto", "signup.createTeam"];
  var _no_retry_methodsA = ["channels.view", "dnd.teamInfo", "screenhero.rooms.create", "screenhero.rooms.join", "screenhero.rooms.refreshToken", "screenhero.rooms.invite"];
  var _no_token = ["api.test", "auth.emailToken", "auth.findTeam", "auth.findUser", "auth.loginMagic", "auth.signin", "enterprise.signup.complete", "enterprise.signup.checkDomain", "enterprise.signup.checkPassword", "helpdesk.get", "search.apps", "signup.addLead", "team.checkEmailDomains", "test.versionInfo", "oauth.access"];
  var _pending = 0;
  var _main_Q = [];
  var _one_at_a_time_call_pending = false;
  var _one_at_a_time_Q = [];
  var _limit = 4;
  var _is_paused = false;
  var _pause_secs = 0;
  var _pause_interv;
  var _max_attempts = 10;
  var _timeout_ms = 6e4;
  var _timeout_breathing_room_ms = 5e3;
  var _successful_breathing_ms = 100;
  var _method_call_counts = {
    total_asks: 0,
    total_attempts: 0,
    total_non_200s: 0
  };
  var _consecutive_errors = 0;
  var _getMaxAttempts = function(method) {
    if (method === "rtm.start") return 2;
    if (method === "rtm.leanStart") return 2;
    if (method === "rtm.checkFastReconnect") return 2;
    return _max_attempts;
  };
  var _exceededMaxConsecutiveErrors = function(method, attempts) {
    var max_attempts = _getMaxAttempts(method);
    if (method === "rtm.start" && attempts >= max_attempts) return true;
    if (method === "rtm.leanStart" && attempts >= max_attempts) return true;
    if (method === "rtm.checkFastReconnect" && attempts >= max_attempts) return true;
    if (_consecutive_errors >= 4) return true;
  };
  var _incrementPending = function(method) {
    _pending += 1;
    if (_pending >= 10) {
      _maybeTimingCount("ts_api_pending_10plus");
    } else if (_pending >= 5) {
      _maybeTimingCount("ts_api_pending_5plus");
    } else if (_pending >= 3) {
      _maybeTimingCount("ts_api_pending_3plus");
    } else if (_pending == 2) {
      _maybeTimingCount("ts_api_pending_2");
    } else if (_pending == 1) {
      _maybeTimingCount("ts_api_pending_1");
    }
    if (_one_at_a_time_methodsA.indexOf(method) != -1) {
      _one_at_a_time_call_pending = true;
    }
  };
  var _decrementPending = function(method) {
    _pending -= 1;
    if (_one_at_a_time_methodsA.indexOf(method) != -1) {
      _one_at_a_time_call_pending = false;
    }
  };
  var _onRequestDone = function(method) {
    _decrementPending(method);
    if (!_is_paused) _nextFromQ();
  };
  var _getDefaultArgsByMethodName = function(method) {
    return _.assign({}, _default_api_args, _default_api_args_by_method[method]);
  };
  var _kickOffACallOrEnqueue = function(method, args, handler, dont_set_active, progressHandler, top_of_Q) {
    if (_.isUndefined(method)) {
      TS.error("Tried to make API call, but API method name was not specified");
      throw new Error("Invalid API call");
    }
    args = _.defaults(args || {}, _getDefaultArgsByMethodName(method));
    var p = _promisify(method, handler);
    var use_Q;
    if (_one_at_a_time_methodsA.indexOf(method) != -1) {
      if (!_is_paused && !_one_at_a_time_call_pending) {
        return _kickOffACall(method, args, p, dont_set_active, progressHandler);
      }
      use_Q = _one_at_a_time_Q;
    } else {
      if (!_is_paused && _pending < _limit) {
        return _kickOffACall(method, args, p, dont_set_active, progressHandler);
      }
      use_Q = _main_Q;
    }
    var o = {
      p: p,
      method: method,
      args: args,
      dont_set_active: dont_set_active,
      progressHandler: progressHandler
    };
    if (top_of_Q) {
      use_Q.unshift(o);
    } else {
      use_Q.push(o);
    }
    if (_is_paused) {
      _maybeTimingCount("ts_api_called_while_paused");
      _maybeShowConnectivityWarning();
    }
    if (use_Q == _main_Q) {
      _maybeTimingCount("ts_api_main_queue_depth", _main_Q.length);
    }
    return p.promise;
  };
  var _kickOffACall = function(method, args, p, dont_set_active, progressHandler) {
    if (p.promise.isCancelled()) {
      TS.log(2, method + " cancelled before call could be made in TS.api");
      setTimeout(_nextFromQ, 1);
      return p.promise;
    }
    TS.log(2, 'calling method "' + method + '" args._attempts:' + args._attempts);
    _incrementPending(method);
    var is_search = method.indexOf("search.") > -1;
    if (TS.boot_data.page_needs_enterprise && args.enterprise_token && is_search && !TS.model.prefs.search_only_current_team) {
      args.token = args.enterprise_token;
    } else if (TS.boot_data.page_needs_enterprise && args.enterprise_token && !is_search) {
      args.token = args.enterprise_token;
    } else {
      args.token = TS.model.api_token;
    }
    if (!TS.client && !dont_set_active) {
      args.set_active = true;
      TS.model.last_net_send = Date.now();
    }
    var start = Date.now();
    var timing_ob = _startTiming(method, args);
    var timestamp = start / 1e3;
    var url = TS.model.api_url + method + "?_x_id=" + TS.boot_data.version_uid.substring(0, 8) + "-" + timestamp;
    _.each(TS.qs_args, function(value, key) {
      if (key.indexOf("feature_") == 0 || key.indexOf("exp_") == 0) {
        url += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(value);
      }
    });
    if ((method === "rtm.start" || method === "rtm.leanStart") && TS.client) {
      url = TS.utility.appendLogToUrlWithLimit(url, TS.ms.getConnectionFlowLog());
    }
    if (TS.boot_data.feature_channel_eventlog_client) {
      if (method === "channels.history" || method === "groups.history" || method === "im.history" || method === "mpim.history") {
        args.visible = 1;
      }
    }
    var headersHandler = function() {
      _logTimingForHeaders(timing_ob);
    };
    var dataHandler = function(data, request_id) {
      var ms = Date.now() - start;
      TS.dir(2, {
        data: data,
        args: args
      }, 'got api rsp for method "' + method + '" (took ' + ms + "ms)");
      data = data || {
        ok: false
      };
      if (data.ok) {
        _logTimingForCompletion(timing_ob);
        _callOutsideHandler(method, args, data, request_id, p);
        return {
          breathing_ms: _successful_breathing_ms,
          try_again: false
        };
      }
      _cancelTiming(timing_ob);
      _logError(method, args, data);
      if (_no_retry_methodsA.indexOf(method) != -1) {
        TS.warn('NOT re-Qing "' + method + '", as specified');
        _callOutsideHandler(method, args, data, request_id, p);
        return {
          breathing_ms: _successful_breathing_ms,
          try_again: false
        };
      }
      if ((data.status == 429 || data.status == 503) && args._attempts >= _getMaxAttempts(method) || args._synchronously) {
        TS.warn('NOT re-Qing api call "' + method + '" because we tried too many times (' + args._attempts + ")");
        _callOutsideHandler(method, args, data, request_id, p);
        return {
          breathing_ms: _successful_breathing_ms,
          try_again: false
        };
      }
      if (data.error === "_timeout") {
        return {
          breathing_ms: _timeout_breathing_room_ms,
          try_again: true
        };
      }
      if (data.error === "_badly_formed") {
        return {
          breathing_ms: _successful_breathing_ms,
          try_again: true
        };
      }
      if (data.error === "_http_error") {
        args._delay_ms = _calculateHTTPErrorDelayMs(args, data);
        if (data.status == 0 && _exceededMaxConsecutiveErrors(method, args._attempts)) {
          _pauseUntilBackOnline(args._attempts);
          return {
            breathing_ms: 0
          };
        } else if (data.status == 429) {
          _pauseFor(args._delay_ms);
        } else if (data.status >= 500 && _exceededMaxConsecutiveErrors(method, args._attempts)) {
          var retry_delay = function() {
            var args = {};
            return function() {
              args._delay_ms = _calculateHTTPErrorDelayMs(args, data);
            };
          }();
          _maybePauseUntilServiceIsUp(retry_delay, _getMaxAttempts(method), args._attempts);
          var try_again = args._attempts < _getMaxAttempts(method);
          return {
            breathing_ms: args._delay_ms,
            try_again: try_again
          };
        }
        _method_call_counts.total_non_200s += 1;
        return {
          breathing_ms: args._delay_ms
        };
      }
      var retry = false;
      var retry_max_attempts = 3;
      var retry_breathing_ms = _successful_breathing_ms;
      if (args._attempts < retry_max_attempts) {
        if ((method === "search.files" || method === "search.messages") && data.error === "solr_failed") {
          retry = true;
        } else if (method === "users.info" && data.error === "user_not_found") {
          retry_breathing_ms = 1e3 * args._attempts;
          retry = true;
        }
      }
      if (retry) {
        return {
          breathing_ms: retry_breathing_ms,
          try_again: true
        };
      }
      _callOutsideHandler(method, args, data, request_id, p);
      return {
        breathing_ms: _successful_breathing_ms,
        try_again: false
      };
    };
    _makeRequest(url, method, args, p, headersHandler, dont_set_active, progressHandler, dataHandler);
    return p.promise;
  };
  var _makeRequest = function(url, method, args, p, headersHandler, dont_set_active, progressHandler, dataHandler) {
    var req = new XMLHttpRequest;
    var abort_on_slow_progress = _progress_check_methodsA.indexOf(method) != -1;
    var progress_timer = 0;
    if (!args._attempts) {
      args._attempts = 0;
      _method_call_counts.total_asks += 1;
      _method_call_counts[method] = _method_call_counts[method] ? _method_call_counts[method] + 1 : 1;
    }
    args._attempts += 1;
    _method_call_counts.total_attempts += 1;
    TS.log(48, method + " count: " + _method_call_counts[method] + " (asks: " + _method_call_counts.total_asks + " attempts: " + _method_call_counts.total_attempts + ")");
    var on200Response = function() {
      if (TS._count_bytes_received) {
        TS._bytes_received += req.responseText.length;
      }
      var data = JSON.parse(req.responseText);
      _consecutive_errors = 0;
      var ret = dataHandler(data, req.getResponseHeader("X-Slack-Req-Id"));
      if (ret.try_again) {
        setTimeout(function() {
          _reQueue(method, args, p, dont_set_active, progressHandler);
        }, ret.breathing_ms);
      }
      _onRequestDone(method);
    };
    var onNon200Response = function() {
      if ((method === "rtm.start" || method === "rtm.leanStart") && TS.ms) TS.ms.logConnectionFlow("TS.api got a " + req.status + " response for method: " + method);
      var data = {
        ok: false,
        error: "_http_error",
        status: parseInt(req.status, 10),
        retry_after: parseInt(req.getResponseHeader && req.getResponseHeader("Retry-After"), 10)
      };
      if (data.status >= 500 || data.status == 0) {
        _consecutive_errors += 1;
      } else {
        _consecutive_errors = 0;
      }
      var ret = dataHandler(data);

      function retryRequest() {
        _reQueue(method, args, p, dont_set_active, progressHandler);
        _onRequestDone(method);
      }
      if (ret.try_again === false) {
        var request_id;
        _callOutsideHandler(method, args, data, request_id, p);
        _onRequestDone(method);
      } else if (ret.breathing_ms) {
        setTimeout(retryRequest, ret.breathing_ms);
      } else {
        retryRequest();
      }
    };
    var timeout = function() {
      req.onerror = _.noop;
      req.onreadystatechange = _.noop;
      req.onprogress = _.noop;
      req.abort();
      setProgressTimer = _.noop;
      var data = {
        ok: false,
        error: "_timeout",
        seconds: _timeout_ms
      };
      var ret = dataHandler(data);
      setTimeout(function() {
        if (ret.try_again) _reQueue(method, args, p, dont_set_active, progressHandler);
        _onRequestDone(method);
      }, ret.breathing_ms);
    };
    p.onCancel = function() {
      TS.log(2, method + " cancelled and aborted during request in TS.api");
      req.onerror = _.noop;
      req.onreadystatechange = _.noop;
      req.onprogress = _.noop;
      req.abort();
      setProgressTimer = _.noop;
      clearTimeout(progress_timer);
      setTimeout(_onRequestDone, _successful_breathing_ms, method);
    };
    var setProgressTimer = function(perc) {
      TS.log(222, method + " progress: " + (perc != undefined && perc != -1 && perc * 100 + "%" || perc != -1 && perc !== 0 && perc * 100 + "%" || "unknown"));
      if (!abort_on_slow_progress) return;
      clearTimeout(progress_timer);
      var progress_timeout_ms = _timeout_ms;
      if (method === "rtm.start") {
        if (args.cache_ts) {
          progress_timeout_ms = _timeout_ms * 1.5;
        } else {
          progress_timeout_ms = _timeout_ms * 2;
        }
      }
      progress_timer = setTimeout(function() {
        clearTimeout(progress_timer);
        TS.ms.logConnectionFlow(method + "_timeout");
        TS.error(_timeout_ms + "ms passed, no " + method + " progress");
        timeout();
      }, progress_timeout_ms);
    };
    req.onprogress = function(evt) {
      var perc = evt.lengthComputable ? evt.loaded / evt.total : -1;
      if (abort_on_slow_progress) setProgressTimer(perc);
      if (progressHandler) progressHandler(perc);
    };
    req.onerror = function() {};
    req.onreadystatechange = function() {
      if (req.readyState == 1) {} else if (req.readyState == 2) {
        if (headersHandler) headersHandler(req);
      } else if (req.readyState == 3) {} else if (req.readyState == 4) {
        req.onprogress({
          loaded: 1,
          total: 1,
          lengthComputable: true
        });
        req.onprogress = _.noop;
        clearTimeout(progress_timer);
        if (req.status == 200) {
          req.onreadystatechange = null;
          on200Response();
        } else {
          onNon200Response();
        }
      }
    };
    var form_data = new FormData;
    var include_token = _no_token.indexOf(method) < 0;
    var any_data = false;
    Object.keys(args).forEach(function(k) {
      if (k === "token" && !include_token) return;
      if (k[0] === "_") return;
      form_data.append(k, args[k]);
      any_data = true;
    });
    req.open("POST", url, !args._synchronously);
    req.setRequestHeader("X-Slack-Version-Ts", TS.boot_data.version_ts);
    if (abort_on_slow_progress) setProgressTimer(0);
    if (any_data) {
      req.send(form_data);
    } else {
      req.send();
    }
  };
  var _nextFromQ = function() {
    var o;
    if (_one_at_a_time_Q.length && !_one_at_a_time_call_pending) {
      o = _one_at_a_time_Q.shift();
    } else if (_main_Q.length >= QUEUE_FAIRNESS_THRESHOLD && _last_api_method_called) {
      o = _.find(_main_Q, function(queue_item) {
        return _makeMethodNameGeneric(queue_item.method) !== _last_api_method_called;
      });
      if (o && _main_Q[0] !== o) {
        _.remove(_main_Q, o);
      } else {
        o = _main_Q.shift();
      }
    } else if (_main_Q.length) {
      o = _main_Q.shift();
    }
    if (!o) {
      if (_pending === 0) {
        TS.api.Q_empty_sig.dispatch();
        _last_api_method_called = undefined;
      }
      return;
    }
    _last_api_method_called = _makeMethodNameGeneric(o.method);
    _kickOffACall(o.method, o.args, o.p, o.dont_set_active, o.progressHandler);
  };
  var _startTiming = function(method, args) {
    var complete_label = "api_call_" + _makeLogSafeMethodName(method);
    var headers_label = complete_label + "__headers";
    var mark_label = "start_" + _method_call_counts.total_asks + "_" + complete_label;
    _maybeTimingMark(mark_label);
    return {
      args: args,
      method: method,
      mark_label: mark_label,
      headers_label: headers_label,
      complete_label: complete_label,
      ephemeral: _timing_methodsA.indexOf(method) === -1
    };
  };
  var _logTimingForHeaders = function(timing_ob) {
    if (!timing_ob) return;
    _maybeTimingMeasure(timing_ob.headers_label, timing_ob.mark_label, null, {
      ephemeral: timing_ob.ephemeral
    });
    _addSpecialTiming(timing_ob, timing_ob.headers_label);
  };
  var _logTimingForCompletion = function(timing_ob) {
    if (!timing_ob) return;
    _maybeTimingMark(timing_ob.complete_label, timing_ob.mark_label, null, {
      ephemeral: timing_ob.ephemeral
    });
    _addSpecialTiming(timing_ob, timing_ob.complete_label);
    _maybeTimingClearMarks(timing_ob.mark_label);
  };
  var _addSpecialTiming = function(timing_ob, root_label) {
    if (!timing_ob) return;
    if (timing_ob.method === "rtm.start" || timing_ob.method === "rtm.leanStart") {
      var special_label = root_label;
      special_label += "__dmeliding_" + (timing_ob.args.only_relevant_ims ? "yes" : "no");
      special_label += "__usercache_" + (TS.storage.isUsingMemberBotCache() ? "yes" : "no");
      if (TS.storage.isUsingMemberBotCache()) {
        if (parseInt(timing_ob.args.cache_ts, 10)) {
          special_label += "__hadcache_yes";
        } else if (TS.model.had_bad_user_cache) {
          special_label += "__hadcache_bad";
          if (root_label == timing_ob.complete_label) TS.model.had_bad_user_cache = false;
        } else {
          special_label += "__hadcache_no";
        }
      }
      _maybeTimingMeasure(special_label, timing_ob.mark_label, null, {
        ephemeral: timing_ob.ephemeral
      });
    }
  };
  var _cancelTiming = function(timing_ob) {
    if (!timing_ob) return;
    _maybeTimingClearMarks(timing_ob.mark_label);
  };
  var _logError = function(method, args, data) {
    if (data.error === "file_deleted") {} else {
      TS.error('api call "' + method + '" not ok');
      if (TS.qs_args.log_api_failures) {
        try {
          TS.warn("args: " + JSON.stringify(args));
        } catch (err) {
          TS.warn("could not stringify args");
        }
        try {
          TS.warn("data: " + JSON.stringify(data));
        } catch (err) {
          TS.warn("could not stringify data");
        }
      } else {
        TS.warn("args/data logging skipped, run with ?log_api_failures=1 to enable full logging");
      }
    }
  };
  var _callOutsideHandler = function(method, args, data, request_id, p) {
    var proceed = function() {
      var can_log = TS.client && TS.client.stats && TS.client.stats.isEnabled();
      var start_mark_label;
      var measure_label;
      if (can_log) {
        _api_metrics_count += 1;
        start_mark_label = "api_response_handler_" + _api_metrics_count;
        measure_label = "slow_api_handler_" + method;
        TS.metrics.mark(start_mark_label);
      }
      p.handler(data.ok, data, args, request_id);
      if (can_log) {
        var duration = TS.metrics.measureAndClear(measure_label, start_mark_label);
        if (duration > _slow_api_threshold) TS.console.warn("API method handler took too long (" + duration + "): " + method, TS.console.getStackTrace());
      }
      return Promise.resolve();
    };
    if (!data.ok && data.active_migration && TS.boot_data) {
      var response_type = TS.boot_data.api_active_migration_error_response_type;
      if (!response_type) {
        TS.info('API returned "active_migration" (enterprise org migration) for ' + method + " - not alerting or reloading because no api_active_migration_error_response_type set.", data);
      } else if (TS.boot_data.ignore_api_active_migration_error) {
        TS.info('API returned "active_migration" (enterprise org migration) for ' + method + ' - skipping "' + response_type + '" because ignore_api_active_migration_error set.', data);
      } else if (response_type === "allow_reload") {
        if (!TS.boot_data.active_migration_reload_underway) {
          TS.warn('About to reload because API returned "active_migration" (enterprise org migration) for ' + method + " and api_active_migration_error_response_type allows reload.", data);
          TS.boot_data.active_migration_reload_underway = true;
          TS.reload(false, "TS.api._callOutsideHandler");
        }
      } else if (response_type === "show_dialog") {
        if (TS.boot_data.user_saw_migration_dialog) {
          TS.info('API returned "active_migration" (enterprise org migration) for ' + method + ", but user has already seen dialog. Doing nothing.");
        } else {
          TS.info('API returned "active_migration" (enterprise org migration) for ' + method + ". Showing migration dialog.");
          TS.ui.fs_modal.start({
            title: "This team is joining an Enterprise Organization!",
            body: "Apologies for the interruption. This team is currently being migrated into " + (data.enterprise_name ? "the <b>" + TS.utility.htmlEntities(data.enterprise_name) + "</b> Organization" : "an Organization") + ", which can take some time to complete. In the meantime, you won’t be able to use it, but we’ll email you once it’s done.",
            show_cancel_button: false,
            show_go_button: false,
            disable_default_controls: true,
            disable_esc: true
          });
          TS.boot_data.user_saw_migration_dialog = true;
        }
      } else {
        TS.warn('API returned "active_migration" (enterprise org migration) for ' + method + ', but api_active_migration_error_response_type of "' + response_type + '" not recognized - doing nothing.', data);
      }
      return proceed();
    }
    if (!data.ok) return proceed();
    if (_ensure_model_methodsA.indexOf(method) == -1) return proceed();
    var ensureBots = function() {
      if (!TS.lazyLoadMembersAndBots()) return Promise.resolve();
      if (method.indexOf("bots.") === 0) return Promise.resolve();
      TS.log(528, 'running api data from "' + method + '" through TS.bots.ensureBotsInDataArePresent()');
      return TS.bots.ensureBotsInDataArePresent(data, method, args.channel || undefined).catch(function(err) {
        TS.error(err);
      });
    };
    var ensureMembers = function() {
      if (TS.boot_data.feature_unknown_members && _.includes(_skip_extra_member_fetch_methods, method)) {
        return Promise.resolve();
      }
      if (method.indexOf("users.") === 0) return Promise.resolve();
      TS.log(528, 'running api data from "' + method + '" through TS.members.ensureMembersInDataArePresent()');
      return TS.members.ensureMembersInDataArePresent(data, method, args.channel || undefined).catch(function(err) {
        TS.error(err);
      });
    };
    var ensureModelObs = function() {
      TS.log(528, 'running api data from "' + method + '" through TS.shared.ensureModelObsInDataArePresent()');
      return TS.ensureFullyBooted().then(function() {
        return TS.shared.ensureModelObsInDataArePresent(data, method).catch(function(err) {
          TS.error(err);
        });
      });
    };
    var ensureTeams = function() {
      if (!TS.boot_data.feature_shared_channels_client) return Promise.resolve();
      if (method.indexOf("teams.") === 0) return Promise.resolve();
      TS.console.log(528, 'running api data from "' + method + '" through TS.teams.ensureTeamsInDataArePresent()');
      return TS.teams.ensureTeamsInDataArePresent(data).catch(function(err) {
        TS.console.error(err);
      });
    };
    ensureModelObs().then(function() {
      return Promise.join(ensureBots(), ensureMembers(), ensureTeams());
    }).then(proceed);
  };
  var _reQueue = function(method, args, p, dont_set_active, progressHandler) {
    TS.warn('re Qing api call "' + method + '"');
    var use_Q = _one_at_a_time_methodsA.indexOf(method) != -1 ? _one_at_a_time_Q : _main_Q;
    use_Q.unshift({
      method: method,
      args: args,
      p: p,
      dont_set_active: dont_set_active,
      progressHandler: progressHandler
    });
  };
  var _calculateHTTPErrorDelayMs = function(args, data) {
    var max_secs;
    var increase_rate;
    var retry_after_secs = data.retry_after || 0;
    if (data.status == 429 || data.status == 503) {
      increase_rate = 1.1;
      retry_after_secs = retry_after_secs || 60;
      max_secs = Math.max(180, parseInt(data.retry_after, 10) || 0);
    } else {
      increase_rate = 1.3;
      retry_after_secs = 1;
      max_secs = 60;
    }
    var ms = !args._delay_ms ? (retry_after_secs + 1) * 1e3 : Math.min(args._delay_ms * increase_rate, max_secs * 1e3);
    ms += Math.random() * (ms / 2);
    return Math.floor(ms);
  };
  var _makeLogSafeMethodName = function(method) {
    return String(method).replace(/\./g, "_");
  };
  var _getAPIErrorObject = function(response) {
    var error = new Error('API call "' + response.method + '" not ok');
    error.method = response.method;
    error.data = response.data;
    error.args = response.args;
    return error;
  };
  var _promisify = function(method, handler) {
    var reject_promise;
    var resolve_promise;
    var promise = new Promise(function(resolve, reject, onCancel) {
      resolve_promise = resolve;
      reject_promise = reject;
      onCancel(function() {
        if (typeof handler === "function") TS.error("Because you passed a handler, which is deprecated, this API call has been cancelled but your handler has not been called. Use Promise chaining to cancel and react.");
        promisfy_obj.onCancel();
      });
    });
    if (typeof handler === "function") {
      promise = promise.caught(_.noop);
    }
    var inner_handler = function(ok, data, args, request_id) {
      var resp_obj = {
        data: data,
        args: args,
        method: method,
        request_id: request_id
      };
      if (ok) {
        resolve_promise(resp_obj);
      } else {
        reject_promise(_getAPIErrorObject(resp_obj));
      }
      if (handler) {
        handler(ok, data, args, request_id);
      }
    };
    var promisfy_obj = {
      promise: promise,
      handler: inner_handler,
      onCancel: _.noop
    };
    return promisfy_obj;
  };
  var _timingFraction = .01;
  var _shouldSendTimingData = TS.qs_args.api_timings || Math.random() <= _timingFraction;
  var _maybeTimingCount = function(label, value) {
    if (!_shouldSendTimingData) return;
    TS.metrics.count(label, value);
  };
  var _maybeTimingMark = function(label) {
    if (!_shouldSendTimingData) return;
    TS.metrics.mark(label);
  };
  var _maybeTimingMeasure = function(measure_label, start_mark_label, end_mark_label, options) {
    if (!_shouldSendTimingData) return;
    TS.metrics.measure(measure_label, start_mark_label, end_mark_label, options);
  };
  var _maybeTimingClearMarks = function(mark_label) {
    if (!_shouldSendTimingData) return;
    TS.metrics.clearMarks(mark_label);
  };
  var _api_queue_depth_warning_threshold = 100;
  var _last_connectivity_warning_time = 0;
  var _maybeShowConnectivityWarning = function() {
    if (TS.ui.fs_modal.is_showing) return;
    if (!_is_paused) return;
    if (_main_Q.length < _api_queue_depth_warning_threshold) return;
    var max_connectivity_warning_interval = 5 * 60 * 1e3;
    if (Date.now() - _last_connectivity_warning_time < max_connectivity_warning_interval) return;
    _last_connectivity_warning_time = Date.now();
    TS.metrics.count("ts_api_connectivity_warning_shown");
    TS.ui.fs_modal.start({
      title: "Connection troubles",
      body: "We're having a bit of trouble with our connections to Slack's servers. We've seen this problem clear up with a restart of Slack, a solution which we suggest to you now only with great regret and self-loathing.",
      go_button_text: "Reload Slack",
      cancel_button_text: "Ignore",
      onGo: function() {
        TS.metrics.count("ts_api_connectivity_warning_reload");
        TS.reload(null, "API queue was too deep (" + _main_Q.length + " / " + _api_queue_depth_warning_threshold + ") and user chose to reload");
      },
      onCancel: function() {
        TS.metrics.count("ts_api_connectivity_warning_ignore");
      }
    });
  };
  var QUEUE_FAIRNESS_THRESHOLD = 5;
  var _last_api_method_called;
  var _makeMethodNameGeneric = function(method_name) {
    return method_name.replace(/^(channels|groups|im|mpim)\./, "_modelob_.");
  };
  var _pause = function(info) {
    if (typeof info === "undefined") {
      throw new Error("Please specify the reason pausing the API");
    }
    if (!_is_paused) {
      _is_paused = true;
      _maybeTimingCount("ts_api_pause");
      _maybeTimingMark("ts_api_pause_start");
      TS.api.paused_sig.dispatch(info);
    }
  };
  var _unPause = function() {
    if (_is_paused) {
      _is_paused = false;
      _maybeTimingCount("ts_api_unpause");
      _maybeTimingMeasure("ts_api_pause_duration", "ts_api_pause_start");
      _maybeTimingClearMarks("ts_api_pause_start");
    }
  };
  var _notifyUnpaused = function() {
    TS.api.unpaused_sig.dispatch();
  };
  var _PAUSE_TICK_MS = 1e3;
  var _pauseFor = function(delay_ms) {
    _pause_secs = Math.max(_pause_secs, Math.ceil(delay_ms / _PAUSE_TICK_MS));
    _pause({
      reason: {
        API_ERROR: true
      },
      retry_after: _pause_secs
    });
    clearInterval(_pause_interv);
    _pause_interv = setInterval(function() {
      _pause_secs -= 1;
      TS.api.paused_sig.dispatch({
        reason: {
          API_ERROR: true
        },
        retry_after: _pause_secs
      });
      if (!_pause_secs) {
        clearInterval(_pause_interv);
        _unPause();
        _notifyUnpaused();
        _nextFromQ();
      }
    }, _PAUSE_TICK_MS);
  };
  var _pauseUntilAPIConnectionRestored = function(reason, retry_interval, max_retries) {
    if (_is_paused) {
      return;
    }
    _pause({
      reason: reason
    });
    return TS.api.connection.waitForAPIConnection(retry_interval, max_retries).catch(function() {}).then(_unPause).then(_notifyUnpaused).then(_nextFromQ).catch(function(err) {
      TS.error("An error occured while waiting for API connection to come back", err);
      throw err;
    });
  };
  var _pauseUntilBackOnline = function(consecutive_connection_failures) {
    TS.warn(consecutive_connection_failures + " consecutive connection errors. Pausing API queue until internet returns");
    return _pauseUntilAPIConnectionRestored({
      OFFLINE: true
    });
  };
  var _pauseUntilServiceIsUp = function(retry_interval, max_retries, consecutive_500s) {
    TS.warn("Received " + consecutive_500s + " consecutive 500s; pausing API queue until we determine the service is in a good state");
    return _pauseUntilAPIConnectionRestored({
      SERVICE_DOWN: true
    }, retry_interval, max_retries);
  };
  var _is_checking_to_see_if_service_is_up = false;
  var _maybePauseUntilServiceIsUp = function(retry_interval, max_retries, consecutive_500s) {
    if (_is_checking_to_see_if_service_is_up) return;
    _is_checking_to_see_if_service_is_up = true;
    TS.api.connection.promiseToTestAPIConnection().then(function(is_online) {
      if (is_online) {} else {
        _pauseUntilServiceIsUp(retry_interval, max_retries, consecutive_500s);
      }
      return null;
    }).finally(function() {
      _is_checking_to_see_if_service_is_up = false;
    });
  };
  var _api_metrics_count = 0;
  var _slow_api_threshold = 1e3;
})();
(function() {
  "use strict";
  TS.registerModule("api.connection", {
    onStart: function() {
      _should_send_timing_data = TS.qs_args.api_timings || TS.utility.enableFeatureForUser(_timing_percentage);
    },
    test: function() {
      var test_ob = {};
      Object.defineProperty(test_ob, "_should_send_timing_data", {
        get: function() {
          return _should_send_timing_data;
        },
        set: function(v) {
          _should_send_timing_data = v;
        }
      });
      Object.defineProperty(test_ob, "_internet_connected_p", {
        get: function() {
          return _internet_connected_p;
        },
        set: function(v) {
          _internet_connected_p = v;
        }
      });
      Object.defineProperty(test_ob, "_ms_reconnected_p", {
        get: function() {
          return _ms_reconnected_p;
        },
        set: function(v) {
          _ms_reconnected_p = v;
        }
      });
      return test_ob;
    },
    waitForAPIConnection: function() {
      if (_internet_connected_p) return _internet_connected_p;
      var retry_interval = arguments.length <= 0 || arguments[0] === undefined ? 1e3 : arguments[0];
      var max_retries = arguments[1];
      var retry_attempts = 0;
      var retry_interval_value = typeof retry_interval === "function" ? retry_interval() : retry_interval;
      var retry_interval_ms = retry_interval_value;
      var _retryLater = function() {
        if (typeof max_retries === "number" && retry_attempts > max_retries) {
          var error_msg = "Unable to reconnect to the API after " + retry_attempts + " retry attempts";
          TS.warn(error_msg);
          failure_sig.dispatch(new Error(error_msg));
          return;
        }
        if (retry_attempts > 0) {
          var info = retry_attempts ? "Internet connection still offline after " + retry_attempts + " retry attempts" : "Internet connection still offline";
          TS.warn(info);
        }
        retry_attempts += 1;
        setTimeout(_testConnection, retry_interval_ms);
      };
      var _onSuccess = function() {
        if (retry_attempts > 0) {
          if (_should_send_timing_data) var offline_duration_ms = TS.metrics.measureAndClear("api_offline_duration", "api_connectivity_lost");
          var offline_duration_s = _.round(offline_duration_ms / 1e3, 2);
          var message = retry_attempts ? "Internet connection has been re-established after " + retry_attempts + " retry attempts;" : "Internet connection has been re-established";
          var info = [message, "offline for " + offline_duration_s + " seconds"];
          TS.info(info.join(" "));
        }
        success_sig.dispatch();
      };
      var _testConnection = function() {
        _testAPIConnection(function(is_online) {
          if (is_online) {
            _onSuccess();
          } else {
            _retryLater();
          }
        });
      };
      var success_sig = new signals.Signal;
      var failure_sig = new signals.Signal;
      if (_should_send_timing_data) TS.metrics.mark("api_connectivity_lost");
      _internet_connected_p = new Promise(function(resolve, reject) {
        success_sig.addOnce(function() {
          _internet_connected_p = undefined;
          resolve();
        });
        failure_sig.addOnce(function(err) {
          reject(err);
        });
        _testConnection();
      });
      return _internet_connected_p;
    },
    promiseToTestAPIConnection: function() {
      return new Promise(function(resolve) {
        _testAPIConnection(function(is_online) {
          resolve(is_online);
        });
      });
    },
    waitForMSToReconnect: function() {
      if (_ms_reconnected_p) {
        return _ms_reconnected_p;
      }
      if (TS.model.ms_connected) {
        return Promise.resolve();
      }
      _ms_reconnected_p = new Promise(function(resolve) {
        var ms_asleep = TS.model.ms_asleep;
        var calling_rtm_start = TS.model.calling_rtm_start;
        var calling_test_fast_reconnect = TS.model.calling_test_fast_reconnect;
        var info = ["API paused? " + TS.api.isPaused(), "MS asleep? " + ms_asleep, "Starting RTM? " + calling_rtm_start, "Attempting fast reconnect? " + calling_test_fast_reconnect];
        TS.info("Waiting for the MS to be reconnected. Current state: " + info.join(", "));
        if (calling_rtm_start) {
          TS.info("MS not connected, proceeding with rtm.start");
          _ms_reconnected_p = undefined;
          resolve();
          return;
        }
        if (calling_test_fast_reconnect) {
          TS.info("MS not connected, proceeding with a fast reconnect");
          _ms_reconnected_p = undefined;
          resolve();
          return;
        }
        TS.info("Listening for the MS connected signal");
        TS.ms.connected_sig.addOnce(function() {
          _ms_reconnected_p = undefined;
          resolve();
        });
        if (ms_asleep) {
          TS.info("MS is not connected, but it is asleep so not trying to wake it up");
        } else {
          TS.info("MS is not connected, but it is not asleep, so requesting a reconnect");
          TS.ms.reconnect_requested_sig.dispatch();
        }
      });
      return _ms_reconnected_p;
    }
  });
  var _internet_connected_p;
  var _ms_reconnected_p;
  var _timing_percentage = 1;
  var _should_send_timing_data;
  var _testAPIConnection = function(callback) {
    var connection_timeout_ms = 6e4;
    $.ajax({
      url: TS.model.api_url + "api.test",
      timeout: connection_timeout_ms
    }).then(function(data) {
      var is_online = !!(data && data.ok);
      callback(is_online);
    }).fail(function() {
      callback(false);
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("permissions", {});
})();
(function() {
  "use strict";
  TS.registerModule("permissions.channels", {
    canMemberJoinChannel: function(channel_model_ob, member_model_ob) {
      if (!channel_model_ob || !member_model_ob) return false;
      if (!TS.boot_data.page_needs_enterprise) return true;
      if (channel_model_ob.is_im || channel_model_ob.is_mpim) return true;
      if (!channel_model_ob.is_shared && !member_model_ob._is_local) return false;
      var teams = _.get(member_model_ob, "enterprise_user.teams");
      if (channel_model_ob.is_shared && !member_model_ob._is_local && _.isArray(teams)) {
        var allowed_teams;
        if (channel_model_ob.is_global_shared) {
          allowed_teams = _.map(TS.model.enterprise_teams, "id");
        } else {
          allowed_teams = channel_model_ob.shared_team_ids;
        }
        var matches = _.intersection(teams, allowed_teams);
        if (!matches.length) return false;
      }
      return true;
    },
    canMemberLeaveChannel: function(channel_model_ob, member_model_ob) {
      if (!channel_model_ob || !member_model_ob) return false;
      if (TS.channels.isChannelRequired(channel_model_ob) || member_model_ob.is_restricted) return false;
      return true;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("permissions.enterprise", {
    canUserLeaveTeam: function(user, team) {
      if (!TS.boot_data.page_needs_enterprise) return false;
      if (user.is_restricted) return false;
      if (!TS.enterprise.isUserOnTeam(user, team)) return false;
      return !!team.can_leave;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("permissions.members", {
    canPostInChannel: function(model_ob) {
      if (model_ob.is_general) return TS.permissions.members.canPostInGeneral(TS.model.user);
      if (TS.ims.isImWithDeletedMember(model_ob)) return false;
      return !TS.channels.read_only.isReadOnly(model_ob.id);
    },
    canPostInGeneral: function(user) {
      if (!user) {
        return false;
      }
      return _checkPrefCascade("who_can_post_general", user);
    },
    canPostInModelOb: function(member, model_ob) {
      if (model_ob.is_general) {
        return TS.permissions.members.canPostInGeneral(member);
      } else if (TS.boot_data.page_needs_enterprise && model_ob.is_shared) {
        return TS.permissions.members.canPostInChannel(model_ob);
      } else if (TS.ims.isImWithDeletedMember(model_ob)) {
        return false;
      }
      return true;
    },
    canAtMentionEveryone: function() {
      return _checkPrefCascade("who_can_at_everyone", TS.model.user);
    },
    canAtChannelOrGroup: function() {
      return _checkPrefCascade("who_can_at_channel", TS.model.user);
    },
    canArchiveChannels: function() {
      if (TS.model.user.is_restricted) return false;
      return _checkPrefCascade("who_can_archive_channels", TS.model.user);
    },
    canCreateChannels: function() {
      if (TS.model.user.is_restricted) return false;
      return _checkPrefCascade("who_can_create_channels", TS.model.user);
    },
    canCreateGroups: function() {
      if (TS.model.user.is_ultra_restricted) return false;
      return _checkPrefCascade("who_can_create_groups", TS.model.user);
    },
    canCreateMpims: function() {
      if (TS.model.user.is_ultra_restricted) return false;
      return true;
    },
    canCreateAndDeleteUserGroups: function() {
      if (TS.model.user.is_restricted) return false;
      return _checkPrefCascade("who_can_create_delete_user_groups", TS.model.user, true);
    },
    canEditUserGroups: function() {
      if (TS.model.user.is_restricted) return false;
      return _checkPrefCascade("who_can_edit_user_groups", TS.model.user, true);
    },
    canUserSeeMember: function(member) {
      if (!TS.model.user.is_restricted) {
        return true;
      } else if (member.is_self) {
        return true;
      } else if (member.is_slackbot) {
        return true;
      }
      return TS.members.getMembersForUser().indexOf(member) >= 0;
    },
    canKickFromChannels: function() {
      if (TS.model.user.is_restricted) return false;
      return _checkPrefCascade("who_can_kick_channels", TS.model.user, true);
    },
    canKickFromGroups: function() {
      if (TS.model.user.is_restricted) return false;
      return _checkPrefCascade("who_can_kick_groups", TS.model.user, true);
    },
    canCreateConvertOrgSharedChannels: function() {
      if (!TS.boot_data.page_needs_enterprise) return false;
      if (TS.model.user.enterprise_user && TS.model.user.enterprise_user.is_owner) return true;
      return TS.permissions.members.canManageOrgSharedChannels();
    },
    canManageOrgSharedChannels: function() {
      if (!TS.model.team.prefs.who_can_manage_shared_channels) return true;
      if (!TS.boot_data.page_needs_enterprise) return false;
      var user = TS.model.user;
      if (user.is_restricted) return false;
      if (TS.model.team.prefs.can_user_manage_shared_channels !== undefined) return TS.model.team.prefs.can_user_manage_shared_channels;
      var type = TS.model.team.prefs.who_can_manage_shared_channels.type[0];
      if (type === "regular") return true;
      if (type === "admin") return user.is_admin || user.is_owner || !!(user.enterprise_user && (user.enterprise_user.is_admin || user.enterprise_user.is_owner));
      if (type === "owner") {
        if (user.enterprise_user && (user.enterprise_user.is_admin || user.enterprise_user.is_owner)) return true;
        if (TS.model.team.prefs.who_can_manage_shared_channels.user && TS.model.team.prefs.who_can_manage_shared_channels.user.indexOf(TS.model.user.id) > -1) return true;
        return false;
      }
      return false;
    },
    canCreateSharedChannel: function() {
      if (!TS.boot_data.feature_shared_channels_client) return false;
      if (!TS.model.user.is_owner && !TS.model.user.is_admin) return false;
      return true;
    },
    canRequestSharedChannel: function() {
      if (!TS.boot_data.feature_shared_channels_client) return false;
      return true;
    },
    test: function() {
      var test_ob = {};
      Object.defineProperty(test_ob, "_checkPrefCascade", {
        get: function() {
          return _checkPrefCascade;
        },
        set: function(v) {
          _checkPrefCascade = v;
        }
      });
      return test_ob;
    }
  });
  var _checkPrefCascade = function(pref_name, user, dflt) {
    if (typeof dflt === "undefined") dflt = true;
    if (user.is_restricted) {
      return TS.model.team.prefs[pref_name] === "ra";
    }
    if (TS.model.team.prefs[pref_name] === "ra") return true;
    if (TS.model.team.prefs[pref_name] === "regular") return true;
    if (TS.model.team.prefs[pref_name] === "admin") return !!user.is_admin;
    if (TS.model.team.prefs[pref_name] === "owner") return !!user.is_owner;
    return dflt;
  };
})();
(function() {
  "use strict";
  TS.registerModule("tips", {
    onStart: function() {
      _$body.delegate(".ts_tip_lazy, .ts_tip_float", "mouseenter", _onMouseEnter);
      _$body.delegate(".ts_tip_float", "mouseleave", _onMouseLeave);
      _$body.on("click", ".ts_tip", function(e) {
        if (TS.isPartiallyBooted()) {
          e.preventDefault();
          e.stopPropagation();
          TS.incremental_boot.userDidInteractWithUI();
          return;
        }
        _toggleTipTitle($(this));
      });
    },
    hideAll: function() {
      $(".ts_tip").addClass("ts_tip_hide");
    },
    unhideAll: function() {
      $(".ts_tip").removeClass("ts_tip_hide");
    },
    updateTipTitle: function($tipped_el, tip) {
      var $tip_el = _getTipEl($tipped_el);
      if ($tip_el.length) {
        $tip_el.html(tip);
      } else {
        $tipped_el.attr("title", tip);
      }
      if (_$tipped_el && _$tipped_el[0] == $tipped_el[0]) {
        if (!tip) {
          _hideFloater();
        } else {
          _$floater_tip_el.html(tip);
          _positionFloater();
        }
      }
    },
    updateFloater: function(args) {
      if (_$floater_tip_el && args.title) {
        _$floater_tip_el.text(args.title);
      }
      if (_$floater && args.classes_to_add) {
        _$floater.addClass(args.classes_to_add.join(" "));
      }
    }
  });
  var _$body = $("BODY");
  var _$scroller = null;
  var _$tipped_el = null;
  var _$floater = null;
  var _$floater_tip_el = null;
  var _unhide_ms = 10;
  var _last_tim = 0;
  var _onMouseEnter = function(e) {
    _$tipped_el = $(e.currentTarget);
    var is_multiline = _$tipped_el.hasClass("ts_tip_multiline");
    _$tipped_el.addClass("ts_tip_hidden");
    if (_$tipped_el.children(".ts_tip_tip").length == 0) {
      _buildDom(_$tipped_el, is_multiline);
    }
    _$tipped_el.removeAttr("title");
    _$tipped_el.removeClass("ts_tip_lazy");
    $("#ts_tip_float_floater").remove();
    if (_$tipped_el.hasClass("ts_tip_float")) {
      var classes = _$tipped_el.attr("class").split(/\s+/).filter(function(name) {
        if (name === "ts_tip_float") return false;
        if (name === "ts_tip_lazy") return false;
        return name.indexOf("ts_tip") === 0;
      });
      var floater_html = TS.templates.builders.strBuilder('<div id="ts_tip_float_floater" style="width:${w}px; height:${h}px;" class="${classes}">${tip_html}</div>', {
        w: _$tipped_el.outerWidth(),
        h: _$tipped_el.outerHeight(),
        classes: classes.join(" "),
        tip_html: _$tipped_el.find(".ts_tip_tip").clone()[0].outerHTML
      });
      _$floater = $(floater_html);
      _$body.append(_$floater);
      _last_tim = setTimeout(function() {
        _$floater.removeClass("ts_tip_hidden");
        _positionFloater();
      }, _unhide_ms);
      _$scroller = _$tipped_el.closest(":scrollable(vertical)");
      _$scroller.on("scroll.ts_tip_removal", _hideFloater);
      _$tipped_el.on("destroyed.ts_tip_removal", _hideFloater);
      if (_$tipped_el.hasClass("ts_tip_hide_on_click")) {
        _$tipped_el.on("click.ts_tip_removal", _hideFloater);
      }
      if (is_multiline) {
        _$floater_tip_el = _$floater.find(".ts_tip_multiline_inner");
      } else {
        _$floater_tip_el = _$floater.find(".ts_tip_tip_inner");
        if (!_$floater_tip_el.length) _$floater_tip_el = _$floater.find(".ts_tip_tip");
      }
    } else {
      setTimeout(function() {
        _$tipped_el.removeClass("ts_tip_hidden");
      }, _unhide_ms);
    }
  };
  var _onMouseLeave = function() {
    _hideFloater();
  };
  var _hideFloater = function() {
    clearTimeout(_last_tim);
    if (_$floater) {
      _$floater.addClass("ts_tip_hidden");
    }
    if (_$tipped_el && _$tipped_el.length) {
      _$tipped_el.off("click.ts_tip_removal");
      _$tipped_el.off("destroyed.ts_tip_removal");
    }
    if (_$scroller) {
      _$scroller.off("scroll.ts_tip_removal");
    }
    _$scroller = null;
    _$tipped_el = null;
    _$floater = null;
    _$floater_tip_el = null;
  };
  var _positionFloater = function() {
    var offset = _$tipped_el.offset();
    var allowance = 2;
    var ww = window.innerWidth - allowance;
    var wh = window.innerHeight - allowance;
    var is_mulitline = _$floater.hasClass("ts_tip_multiline");
    var getRect = function() {
      if (is_mulitline) {
        return _$floater.find(".ts_tip_multiline_inner").dimensions_rect();
      }
      return _$floater.find(".ts_tip_tip").dimensions_rect();
    };
    var setHorizontalPositionClass = function(c) {
      _$floater.removeClass("			ts_tip_right 			ts_tip_rightish 			ts_tip_left 			ts_tip_leftish 			ts_tip_multiline_top_leftish 			ts_tip_multiline_top_left 			ts_tip_multiline_top_right 			ts_tip_multiline_top_rightish 		").addClass(c);
    };
    _$floater.css("left", offset.left).css("top", offset.top);
    var rect = getRect();
    if (rect.bottom > wh) {
      _$floater.removeClass("ts_tip_bottom").addClass("ts_tip_top");
    } else if (rect.top < allowance) {
      _$floater.removeClass("ts_tip_top").addClass("ts_tip_bottom");
    }
    if (is_mulitline) {
      if (rect.right > ww) {
        setHorizontalPositionClass("ts_tip_multiline_top_rightish");
      } else if (rect.left < allowance) {
        setHorizontalPositionClass("ts_tip_multiline_top_leftish");
      }
      rect = getRect();
      if (rect.right > ww) {
        setHorizontalPositionClass("ts_tip_multiline_top_right");
      } else if (rect.left < allowance) {
        setHorizontalPositionClass("ts_tip_multiline_top_left");
      }
    } else {
      if (rect.right > ww) {
        setHorizontalPositionClass("ts_tip_rightish");
      } else if (rect.left < allowance) {
        setHorizontalPositionClass("ts_tip_leftish");
      }
      rect = getRect();
      if (rect.right > ww) {
        setHorizontalPositionClass("ts_tip_right");
      } else if (rect.left < allowance) {
        setHorizontalPositionClass("ts_tip_left");
      }
    }
  };
  var _toggleTipTitle = function($tipped_el) {
    var $tip_el = _getTipEl($tipped_el);
    var toggle_attribute = "tip-toggle-auto";
    var $tip_toggle_el;
    if ($tipped_el.data(toggle_attribute)) {
      $tip_toggle_el = $tipped_el;
    } else if ($tip_el.data(toggle_attribute)) {
      $tip_toggle_el = $tip_el;
    }
    if (!($tip_toggle_el && $tip_toggle_el.length)) return;
    var current_text = $tip_el.html();
    var new_text = $tip_toggle_el.data(toggle_attribute);
    if (!new_text) return TS.warn("No toggle state text defined on tipped element. Please add text to data-tip-toggle-text or data-tip-toggle-auto attribute");
    TS.tips.updateTipTitle($tipped_el, new_text);
    $tip_toggle_el.data(toggle_attribute, current_text);
  };
  var _getTipEl = function($tipped_el) {
    var $tip_el = $tipped_el.find(".ts_tip_multiline_inner");
    if (!$tip_el.length) $tip_el = $tipped_el.find(".ts_tip_tip_inner");
    if (!$tip_el.length) $tip_el = $tipped_el.find(".ts_tip_tip");
    return $tip_el;
  };
  var _possiblyMakeLabelId = function($tipped_el) {
    if ($tipped_el.text().trim().length) {
      return;
    }
    if ($tipped_el.attr("aria-label")) {
      return;
    }
    return _.uniqueId("ts_tip_tip_");
  };
  var _buildDom = function($tipped_el, is_multiline) {
    var title = $tipped_el.prop("title");
    var label_id = _possiblyMakeLabelId($tipped_el);
    var id = label_id ? ' id="' + label_id + '"' : "";
    var inner = is_multiline ? '<span class="ts_tip_multiline_inner">' + title + "</span>" : title;
    var html = ["<span", id, ' class="ts_tip_tip"', ">", inner, "</span>"];
    $tipped_el.append(html.join(""));
    $tipped_el.attr("aria-labelledby", label_id);
  };
})();
(function() {
  "use strict";
  TS.registerModule("notifs", {
    onStart: function() {},
    canCorGHaveChannelMentions: function(c_id) {
      var model_ob = TS.channels.getChannelById(c_id) || TS.groups.getGroupById(c_id) || TS.mpims.getMpimById(c_id);
      if (!model_ob) {
        TS.error("no model_ob for c_id:" + c_id + "?");
        return true;
      }
      return TS.notifs.canModelObHaveChannelMentions(model_ob);
    },
    canModelObHaveChannelMentions: function(model_ob) {
      if (model_ob.is_im) {
        return false;
      }
      if (TS.model.team.prefs.who_can_at_channel === "admin" || TS.model.team.prefs.who_can_at_channel === "owner") {
        return true;
      }
      if (TS.channels.isChannelRequired(model_ob) && (TS.model.team.prefs.who_can_at_everyone === "admin" || TS.model.team.prefs.who_can_at_everyone === "owner")) {
        return true;
      }
      if (model_ob.is_general && (TS.model.team.prefs.who_can_post_general === "admin" || TS.model.team.prefs.who_can_post_general === "owner")) {
        return true;
      }
      var setting = TS.notifs.getCalculatedCorGNotifySetting(model_ob.id);
      if (setting !== "mentions" && setting !== "nothing") {
        return true;
      }
      return !TS.notifs.hasUserSuppressedCorGChannelMentions(model_ob);
    },
    hasUserSuppressedCorGChannelMentions: function(model_ob) {
      var i = TS.model.at_channel_suppressed_channels.indexOf(model_ob.id);
      if (i != -1) return true;
      return false;
    },
    hasUserSuppressedCorGChannelMentionsById: function(c_id) {
      var model_ob = TS.channels.getChannelById(c_id) || TS.groups.getGroupById(c_id) || TS.mpims.getMpimById(c_id);
      if (!model_ob) {
        TS.error("no model_ob for c_id:" + c_id + "?");
        return true;
      }
      return TS.notifs.hasUserSuppressedCorGChannelMentions(model_ob);
    },
    hasUserSuppressedCorGPushChannelMentions: function(c_id) {
      var model_ob = TS.channels.getChannelById(c_id) || TS.groups.getGroupById(c_id) || TS.mpims.getMpimById(c_id);
      if (!model_ob) {
        TS.error("no model_ob for c_id:" + c_id + "?");
        return true;
      }
      var i = TS.model.push_at_channel_suppressed_channels.indexOf(model_ob.id);
      if (i != -1) return true;
      return false;
    },
    isCorGMuted: function(c_id) {
      if (!c_id) {
        TS.error('wtf no c_id "' + c_id + '"');
        return false;
      }
      if (TS.model.muted_channels.indexOf(c_id) > -1) {
        return true;
      }
      return false;
    },
    getGlobalPushNotificationSetting: function() {
      if (TS.model.prefs.push_everything) return "everything";
      if (TS.model.prefs.push_mention_alert && TS.model.prefs.push_dm_alert) return "dm_and_mentions";
      if (TS.model.prefs.push_mention_alert) return "mentions";
      if (TS.model.prefs.push_dm_alert) return "dms";
      return "nothing";
    },
    getCorGsNotUsingGlobalPushNotificationSetting: function() {
      var ret = {
        nothing: [],
        mentions: [],
        everything: []
      };
      var model_ob;
      var i;
      var all = {};
      var id;
      var A;
      var global_setting = "quiet";
      if (TS.model.prefs.push_mention_alert) global_setting = "mentions";
      if (TS.model.prefs.push_everything) global_setting = "loud";
      A = TS.model.prefs.push_loud_channels_set ? TS.model.prefs.push_loud_channels_set.split(",") : [];
      for (i = 0; i < A.length; i += 1) {
        id = $.trim(A[i]);
        if (!id) continue;
        all[id] = "quiet";
      }
      A = TS.channels.getChannelsForUser();
      for (i = 0; i < A.length; i += 1) {
        if (!A[i]) continue;
        id = A[i].id;
        if (TS.notifs.getCalculatedCorGPushNotifySetting(id) !== "mentions") continue;
        if (!TS.notifs.hasUserSuppressedCorGPushChannelMentions(id)) continue;
        all[id] = "mentions_suppressed";
        ret.mentions.push(A[i]);
      }
      A = TS.model.prefs.push_mention_channels ? TS.model.prefs.push_mention_channels.split(",") : [];
      for (i = 0; i < A.length; i += 1) {
        id = $.trim(A[i]);
        if (!id) continue;
        if (!all[id]) continue;
        all[id] = "mentions";
      }
      A = TS.model.prefs.push_loud_channels ? TS.model.prefs.push_loud_channels.split(",") : [];
      for (i = 0; i < A.length; i += 1) {
        id = $.trim(A[i]);
        if (!id) continue;
        if (!all[id]) continue;
        all[id] = "loud";
      }
      _.forOwn(all, function(setting, id) {
        model_ob = TS.channels.getChannelById(id) || TS.groups.getGroupById(id) || TS.mpims.getMpimById(id);
        if (!model_ob) return;
        if (model_ob.is_archived) return;
        if (model_ob.is_channel && !model_ob.is_member) return;
        if (setting === "loud") {
          if (global_setting === "loud") return;
          ret.everything.push(model_ob);
        } else if (setting === "mentions") {
          if (global_setting === "mentions") return;
          ret.mentions.push(model_ob);
        } else if (setting === "mentions_suppressed") {} else {
          if (global_setting === "quiet") return;
          ret.nothing.push(model_ob);
        }
      });
      return ret;
    },
    getGlobalNotificationSetting: function() {
      if (!TS.model.prefs.growls_enabled) return "nothing";
      if (TS.model.prefs.all_channels_loud) return "everything";
      return "mentions";
    },
    getCorGsNotUsingGlobalNotificationSetting: function() {
      var ret = {
        nothing: [],
        mentions: [],
        everything: [],
        muted: []
      };
      var channels = TS.channels.getChannelsForUser();
      _.forOwn(channels, function(model_ob) {
        if (model_ob.is_archived) return;
        if (!model_ob.is_member) return;
        if (_isCorGNotifySettingNothingSetSpecifically(model_ob.id)) ret.nothing.push(model_ob);
        if (_isCorGNotifySettingMentionsSetSpecifically(model_ob.id)) ret.mentions.push(model_ob);
        if (_isCorGNotifySettingEverythingSetSpecifically(model_ob.id)) ret.everything.push(model_ob);
        if (TS.notifs.isCorGMuted(model_ob.id)) ret.muted.push(model_ob);
      });
      _.forOwn(TS.model.groups, function(model_ob) {
        if (model_ob.is_archived) return;
        if (_isCorGNotifySettingNothingSetSpecifically(model_ob.id)) ret.nothing.push(model_ob);
        if (_isCorGNotifySettingMentionsSetSpecifically(model_ob.id)) ret.mentions.push(model_ob);
        if (_isCorGNotifySettingEverythingSetSpecifically(model_ob.id)) ret.everything.push(model_ob);
        if (TS.notifs.isCorGMuted(model_ob.id)) ret.muted.push(model_ob);
      });
      _.forOwn(TS.model.mpims, function(model_ob) {
        if (model_ob.is_archived) return;
        if (_isCorGNotifySettingNothingSetSpecifically(model_ob.id)) ret.nothing.push(model_ob);
        if (_isCorGNotifySettingMentionsSetSpecifically(model_ob.id)) ret.mentions.push(model_ob);
        if (_isCorGNotifySettingEverythingSetSpecifically(model_ob.id)) ret.everything.push(model_ob);
        if (TS.notifs.isCorGMuted(model_ob.id)) ret.muted.push(model_ob);
      });
      return ret;
    },
    getCalculatedCorGNotifySetting: function(c_id) {
      if (!c_id) {
        TS.error('wtf no c_id "' + c_id + '"');
        return false;
      }
      var is_loud_changed = _isCorGLoudSet(c_id);
      if (is_loud_changed) {
        if (_isCorGLoud(c_id)) return "everything";
        if (_isCorGNever(c_id)) return "nothing";
        return "mentions";
      }
      if (TS.model.prefs.growls_enabled) {
        if (TS.model.prefs.all_channels_loud) return "everything";
        return "mentions";
      }
      return "nothing";
    },
    muteOrUnmuteCorG: function(c_id) {
      if (!c_id) return;
      if (TS.isPartiallyBooted()) {
        TS.incremental_boot.userDidInteractWithUI();
        return;
      }
      var model_ob = TS.shared.getModelObById(c_id);
      if (!model_ob) return;
      if (model_ob.is_im) return;
      var is_muted = TS.notifs.isCorGMuted(c_id);
      if (!is_muted) {
        TS.notifs.makeCorGMuted(c_id);
        if (model_ob.is_channel) {
          TS.channels.markMostRecentReadMsg(model_ob, TS.model.marked_reasons.muted);
        } else if (model_ob.is_mpim) {
          TS.mpims.markMostRecentReadMsg(model_ob, TS.model.marked_reasons.muted);
        } else if (model_ob.is_group) {
          TS.groups.markMostRecentReadMsg(model_ob, TS.model.marked_reasons.muted);
        }
      } else {
        TS.notifs.makeCorGNOTMuted(c_id);
      }
      var val = TS.model.muted_channels.join(",");
      TS.prefs.onPrefChanged({
        name: "muted_channels",
        value: val
      });
      TS.prefs.setPrefByAPI({
        name: "muted_channels",
        value: val
      });
    },
    makeCorGMuted: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.muted_channels.indexOf(c_id);
      if (i == -1) TS.model.muted_channels.push(c_id);
      TS.prefs.setMutedChannels(TS.model.muted_channels.join(","));
      if (!TS.client) return;
      if (channel) TS.channels.calcUnreadCnts(channel);
      if (group) TS.groups.calcUnreadCnts(group);
      if (mpim) TS.mpims.calcUnreadCnts(mpim);
    },
    makeCorGNOTMuted: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.muted_channels.indexOf(c_id);
      if (i != -1) TS.model.muted_channels.splice(i, 1);
      TS.prefs.setMutedChannels(TS.model.muted_channels.join(","));
      if (!TS.client) return;
      if (channel) TS.channels.calcUnreadCnts(channel);
      if (group) TS.groups.calcUnreadCnts(group);
      if (mpim) TS.mpims.calcUnreadCnts(mpim);
    },
    makeCorGSuppressed: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.at_channel_suppressed_channels.indexOf(c_id);
      if (i == -1) TS.model.at_channel_suppressed_channels.push(c_id);
      TS.prefs.setSuppressedChannels(TS.model.at_channel_suppressed_channels.join(","));
      if (!TS.client) return;
      if (channel) TS.channels.calcUnreadCnts(channel);
      if (group) TS.groups.calcUnreadCnts(group);
      if (mpim) TS.mpims.calcUnreadCnts(mpim);
    },
    makeCorGNOTSuppressed: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.at_channel_suppressed_channels.indexOf(c_id);
      if (i != -1) TS.model.at_channel_suppressed_channels.splice(i, 1);
      TS.prefs.setSuppressedChannels(TS.model.at_channel_suppressed_channels.join(","));
      if (!TS.client) return;
      if (channel) TS.channels.calcUnreadCnts(channel);
      if (group) TS.groups.calcUnreadCnts(group);
      if (mpim) TS.mpims.calcUnreadCnts(mpim);
    },
    makeCorGPushSuppressed: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.push_at_channel_suppressed_channels.indexOf(c_id);
      if (i == -1) TS.model.push_at_channel_suppressed_channels.push(c_id);
      TS.prefs.setPushSuppressedChannels(TS.model.push_at_channel_suppressed_channels.join(","));
    },
    makeCorGNOTPushSuppressed: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.push_at_channel_suppressed_channels.indexOf(c_id);
      if (i != -1) TS.model.push_at_channel_suppressed_channels.splice(i, 1);
      TS.prefs.setPushSuppressedChannels(TS.model.push_at_channel_suppressed_channels.join(","));
    },
    makeCorGDTopNothing: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.loud_channels.indexOf(c_id);
      if (i != -1) TS.model.loud_channels.splice(i, 1);
      TS.prefs.setLoudChannels(TS.model.loud_channels.join(","));
      i = TS.model.never_channels.indexOf(c_id);
      if (TS.model.prefs.growls_enabled) {
        if (i == -1) TS.model.never_channels.push(c_id);
        _markCorGAsDTopNonDefault(c_id);
      } else {
        if (i != -1) TS.model.never_channels.splice(i, 1);
        _markCorGAsDTopDefault(c_id);
      }
      TS.prefs.setNeverChannels(TS.model.never_channels.join(","));
    },
    makeCorGDTopEverything: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.never_channels.indexOf(c_id);
      if (i != -1) TS.model.never_channels.splice(i, 1);
      TS.prefs.setNeverChannels(TS.model.never_channels.join(","));
      i = TS.model.loud_channels.indexOf(c_id);
      if (TS.model.prefs.growls_enabled && TS.model.prefs.all_channels_loud) {
        if (i != -1) TS.model.loud_channels.splice(i, 1);
        _markCorGAsDTopDefault(c_id);
      } else {
        if (i == -1) TS.model.loud_channels.push(c_id);
        _markCorGAsDTopNonDefault(c_id);
      }
      TS.prefs.setLoudChannels(TS.model.loud_channels.join(","));
    },
    makeCorGDTopMentions: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.loud_channels.indexOf(c_id);
      if (i != -1) TS.model.loud_channels.splice(i, 1);
      TS.prefs.setLoudChannels(TS.model.loud_channels.join(","));
      i = TS.model.never_channels.indexOf(c_id);
      if (i != -1) TS.model.never_channels.splice(i, 1);
      TS.prefs.setNeverChannels(TS.model.never_channels.join(","));
      if (TS.model.prefs.growls_enabled && !TS.model.prefs.all_channels_loud) {
        _markCorGAsDTopDefault(c_id);
      } else {
        _markCorGAsDTopNonDefault(c_id);
      }
    },
    makeCorGPushNothing: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.push_loud_channels.indexOf(c_id);
      if (i != -1) TS.model.push_loud_channels.splice(i, 1);
      TS.prefs.setPushLoudChannels(TS.model.push_loud_channels.join(","));
      i = TS.model.push_mention_channels.indexOf(c_id);
      if (i != -1) TS.model.push_mention_channels.splice(i, 1);
      TS.prefs.setPushMentionChannels(TS.model.push_mention_channels.join(","));
      if (TS.model.prefs.push_everything || TS.model.prefs.push_mention_alert) {
        _markCorGAsPushNonDefault(c_id);
      } else {
        _markCorGAsPushDefault(c_id);
      }
    },
    makeCorGPushEverything: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.push_mention_channels.indexOf(c_id);
      if (i != -1) TS.model.push_mention_channels.splice(i, 1);
      TS.prefs.setPushMentionChannels(TS.model.push_mention_channels.join(","));
      i = TS.model.push_loud_channels.indexOf(c_id);
      if (TS.model.prefs.push_everything) {
        if (i != -1) TS.model.push_loud_channels.splice(i, 1);
        _markCorGAsPushDefault(c_id);
      } else {
        if (i == -1) TS.model.push_loud_channels.push(c_id);
        _markCorGAsPushNonDefault(c_id);
      }
      TS.prefs.setPushLoudChannels(TS.model.push_loud_channels.join(","));
    },
    makeCorGPushMentions: function(c_id) {
      var channel = TS.channels.getChannelById(c_id);
      var group = TS.groups.getGroupById(c_id);
      var mpim = TS.mpims.getMpimById(c_id);
      if (!channel && !group && !mpim) {
        TS.error('wtf no channel/group "' + c_id + '"');
        return false;
      }
      var i = TS.model.push_loud_channels.indexOf(c_id);
      if (i != -1) TS.model.push_loud_channels.splice(i, 1);
      TS.prefs.setPushLoudChannels(TS.model.push_loud_channels.join(","));
      i = TS.model.push_mention_channels.indexOf(c_id);
      if (!TS.model.prefs.push_mention_alert || TS.model.prefs.push_everything) {
        if (i == -1) TS.model.push_mention_channels.push(c_id);
        _markCorGAsPushNonDefault(c_id);
      } else {
        if (i != -1) TS.model.push_mention_channels.splice(i, 1);
        _markCorGAsPushDefault(c_id);
      }
      TS.prefs.setPushMentionChannels(TS.model.push_mention_channels.join(","));
    },
    getCalculatedCorGPushNotifySetting: function(c_id) {
      if (!c_id) {
        TS.error('wtf no c_id "' + c_id + '"');
        return false;
      }
      var is_push_loud_changed = _isCorGPushLoudSet(c_id);
      if (is_push_loud_changed) {
        if (_isCorGPushLoud(c_id)) return "everything";
        if (_isCorGPushMention(c_id)) return "mentions";
        return "nothing";
      }
      if (TS.model.prefs.push_everything) return "everything";
      if (TS.model.prefs.push_mention_alert) return "mentions";
      return "nothing";
    }
  });
  var _isCorGLoud = function(c_id) {
    if (!c_id) {
      TS.error('wtf no c_id "' + c_id + '"');
      return false;
    }
    if (TS.model.loud_channels.indexOf(c_id) > -1) {
      return true;
    }
    return false;
  };
  var _isCorGNever = function(c_id) {
    if (!c_id) {
      TS.error('wtf no c_id "' + c_id + '"');
      return false;
    }
    if (TS.model.never_channels.indexOf(c_id) > -1) {
      return true;
    }
    return false;
  };
  var _isCorGLoudSet = function(c_id) {
    if (!c_id) {
      TS.error('wtf no c_id "' + c_id + '"');
      return false;
    }
    if (TS.model.loud_channels_set && TS.model.loud_channels_set.indexOf(c_id) > -1) {
      return true;
    }
    return false;
  };
  var _isCorGNotifySettingNothingSetSpecifically = function(c_id) {
    if (TS.model.prefs.growls_enabled && TS.notifs.getCalculatedCorGNotifySetting(c_id) === "nothing") {
      return true;
    }
    return false;
  };
  var _isCorGNotifySettingMentionsSetSpecifically = function(c_id) {
    var setting = TS.notifs.getCalculatedCorGNotifySetting(c_id);
    if (setting !== "mentions") return false;
    if (!TS.model.prefs.growls_enabled || TS.model.prefs.all_channels_loud) {
      return true;
    }
    if (TS.notifs.hasUserSuppressedCorGChannelMentionsById(c_id)) {
      return true;
    }
    return false;
  };
  var _isCorGNotifySettingEverythingSetSpecifically = function(c_id) {
    if ((!TS.model.prefs.growls_enabled || !TS.model.prefs.all_channels_loud) && TS.notifs.getCalculatedCorGNotifySetting(c_id) === "everything") {
      return true;
    }
    return false;
  };
  var _isCorGPushLoud = function(c_id) {
    if (!c_id) {
      TS.error('wtf no c_id "' + c_id + '"');
      return false;
    }
    if (TS.model.push_loud_channels.indexOf(c_id) > -1) {
      return true;
    }
    return false;
  };
  var _isCorGPushMention = function(c_id) {
    if (!c_id) {
      TS.error('wtf no c_id "' + c_id + '"');
      return false;
    }
    if (TS.model.push_mention_channels.indexOf(c_id) > -1) {
      return true;
    }
    return false;
  };
  var _isCorGPushLoudSet = function(c_id) {
    if (!c_id) {
      TS.error('wtf no c_id "' + c_id + '"');
      return false;
    }
    if (TS.model.push_loud_channels_set && TS.model.push_loud_channels_set.indexOf(c_id) > -1) {
      return true;
    }
    return false;
  };
  var _markCorGAsDTopNonDefault = function(c_id) {
    var i = TS.model.loud_channels_set.indexOf(c_id);
    if (i == -1) TS.model.loud_channels_set.push(c_id);
    TS.prefs.setLoudChannelsSet(TS.model.loud_channels_set.join(","));
  };
  var _markCorGAsDTopDefault = function(c_id) {
    var i = TS.model.loud_channels_set.indexOf(c_id);
    if (i != -1) TS.model.loud_channels_set.splice(i, 1);
    TS.prefs.setLoudChannelsSet(TS.model.loud_channels_set.join(","));
  };
  var _markCorGAsPushNonDefault = function(c_id) {
    var i = TS.model.push_loud_channels_set.indexOf(c_id);
    if (i == -1) TS.model.push_loud_channels_set.push(c_id);
    TS.prefs.setPushLoudChannelsSet(TS.model.push_loud_channels_set.join(","));
  };
  var _markCorGAsPushDefault = function(c_id) {
    var i = TS.model.push_loud_channels_set.indexOf(c_id);
    if (i != -1) TS.model.push_loud_channels_set.splice(i, 1);
    TS.prefs.setPushLoudChannelsSet(TS.model.push_loud_channels_set.join(","));
  };
})();
(function() {
  "use strict";
  TS.registerModule("redux", {
    onStart: function() {
      if (TS.useRedux() || TS.useReactDownloads()) {
        _store = window.Redux.ConfigureStore();
      }
    },
    bindSelectorToStore: function(selector) {
      return function() {
        var args = [TS.redux.getState()].concat(Array.prototype.slice.apply(arguments));
        return selector.apply(undefined, args);
      };
    },
    getState: function() {
      return _store && _store.getState && _store.getState();
    },
    getStoreInstance: function() {
      return _store;
    },
    dispatch: function(action) {
      if (action && _store && _store.dispatch) {
        return _store.dispatch(action);
      }
    },
    test: function() {
      var test_ob = {};
      return test_ob;
    }
  });
  var _store;
})();
(function() {
  "use strict";
  TS.registerModule("redux.channels", {
    onStart: function() {
      if (TS.useRedux()) {
        _isGroup = window.Redux.Entities.Channels.isGroup;
        _isChannel = window.Redux.Entities.Channels.isChannel;
        _isMpim = window.Redux.Entities.Channels.isMpim;
        _isIm = window.Redux.Entities.Channels.isIm;
        _getAllChannels = TS.redux.bindSelectorToStore(window.Redux.Entities.Channels.getAllChannels);
        _getChannelById = TS.redux.bindSelectorToStore(window.Redux.Entities.Channels.getChannelById);
        _getChannelIdByName = TS.redux.bindSelectorToStore(window.Redux.Entities.ChannelsMeta.ChannelNamesToIds.getChannelIdByName);
        _getAllIdsNeedingMarking = TS.redux.bindSelectorToStore(window.Redux.Entities.ChannelsMeta.NeedsApiMarking.getAllIdsNeedingMarking);
        _addSignalListeners();
        Object.defineProperty(TS.model, "channels", {
          get: function() {
            return _buildModelArrayKey("channels");
          }
        });
        Object.defineProperty(TS.model, "groups", {
          get: function() {
            return _buildModelArrayKey("groups");
          }
        });
        Object.defineProperty(TS.model, "mpims", {
          get: function() {
            return _buildModelArrayKey("mpims");
          }
        });
        Object.defineProperty(TS.model, "ims", {
          get: function() {
            return _buildModelArrayKey("ims");
          }
        });
      }
    },
    forceUpdateOfEntityById: function(channel) {
      if (!channel || !channel.id) {
        return;
      }
      TS.redux.dispatch(window.Redux.Entities.Channels.forceUpdateOfChannelById(channel.id));
    },
    isChannel: function(entity) {
      return _isChannel(entity);
    },
    isMpim: function(entity) {
      return _isMpim(entity);
    },
    isGroup: function(entity) {
      return _isGroup(entity);
    },
    isIm: function(entity) {
      return _isIm(entity);
    },
    setMarkingState: function(id, needs_api_marking) {
      TS.redux.dispatch(window.Redux.Entities.ChannelsMeta.NeedsApiMarking.setMarkingState({
        id: id,
        needsApiMarking: needs_api_marking
      }));
    },
    clearAllMarkingFlags: function() {
      TS.redux.dispatch(window.Redux.Entities.ChannelsMeta.NeedsApiMarking.clearAllMarkingFlags());
    },
    getAllIdsNeedingMarking: function() {
      return _getAllIdsNeedingMarking();
    },
    bulkAddEntities: function(channels) {
      TS.redux.dispatch(window.Redux.Entities.Channels.bulkAddChannels(channels));
    },
    addEntity: function(channel) {
      TS.redux.dispatch(window.Redux.Entities.Channels.addChannel(channel));
    },
    removeEntity: function(channel) {
      TS.redux.dispatch(window.Redux.Entities.Channels.removeChannel(channel));
    },
    removeEntityFromNameMap: function(name) {
      TS.redux.dispatch(window.Redux.Entities.ChannelsMeta.ChannelNamesToIds.removeChannelFromNameMap({
        name: name
      }));
    },
    addEntityToNameMap: function(channel) {
      TS.redux.dispatch(window.Redux.Entities.ChannelsMeta.ChannelNamesToIds.addChannelToNameMap(channel));
    },
    replaceEntity: function(channel) {
      var previous_channel = TS.redux.channels.getEntityById(channel.id);
      if (previous_channel) {
        TS.redux.channels.removeEntity(previous_channel);
      }
      TS.redux.channels.addEntity(channel);
    },
    updateMutedChannels: function() {
      var muted_channels_map = _.reduce(TS.model.muted_channels, function(result, value) {
        result[value] = true;
        return result;
      }, {});
      TS.redux.dispatch(window.Redux.Entities.ChannelsMeta.MutedChannels.setMutedChannels(muted_channels_map));
    },
    getUpdatedReferenceToEntity: function(channel) {
      if (TS.useRedux() && channel && channel.id) {
        var updated_channel = TS.redux.channels.getEntityById(channel.id);
        if (updated_channel) {
          return updated_channel;
        }
      }
      return channel;
    },
    getEntityById: function(id) {
      var entity = _getChannelById(id);
      return _maybeWrapEntityInProxyObject(entity);
    },
    getEntityByName: function(name) {
      var cid = _getChannelIdByName(name);
      if (cid) {
        return TS.redux.channels.getEntityById(cid);
      }
      return null;
    },
    getChannelById: function(id) {
      var channel = TS.redux.channels.getEntityById(id);
      if (_isChannel(channel)) return channel;
      return null;
    },
    getChannelByName: function(name) {
      var channel = TS.redux.channels.getEntityByName(name);
      if (_isChannel(channel)) return channel;
      return null;
    },
    getGroupById: function(id) {
      var channel = TS.redux.channels.getEntityById(id);
      if (_isGroup(channel)) return channel;
      return null;
    },
    getGroupByName: function(name) {
      var channel = TS.redux.channels.getEntityByName(name);
      if (_isGroup(channel)) return channel;
      return null;
    },
    getMpimById: function(id) {
      var channel = TS.redux.channels.getEntityById(id);
      if (_isMpim(channel)) return channel;
      return null;
    },
    getMpimByName: function(name) {
      var channel = TS.redux.channels.getEntityByName(name);
      if (_isMpim(channel)) return channel;
      return null;
    },
    getImById: function(id) {
      var channel = TS.redux.channels.getEntityById(id);
      if (_isIm(channel)) return channel;
      return null;
    },
    getImByMemberId: function(member_id) {
      var channel = TS.redux.channels.getEntityByName(member_id);
      if (_isIm(channel)) return channel;
      return null;
    },
    getImproperlySetKeys: function() {
      TS.warn(Object.keys(_improperly_set_keys));
    },
    test: function() {
      var test_ob = {};
      return test_ob;
    }
  });
  var _isGroup;
  var _isChannel;
  var _isMpim;
  var _isIm;
  var _improperly_set_keys = {};
  var _getAllChannels;
  var _getChannelById;
  var _getChannelIdByName;
  var _getAllIdsNeedingMarking;
  var _cached_entities;
  var _cached_objects = {};
  var _clear_timeouts = {
    channels: undefined,
    groups: undefined,
    mpims: undefined,
    ims: undefined
  };
  var _redux_did_warn_about_stack = {};
  var _addSignalListeners = function() {
    TS.channels.unread_changed_sig.add(TS.redux.channels.forceUpdateOfEntityById);
    TS.channels.unread_highlight_changed_sig.add(TS.redux.channels.forceUpdateOfEntityById);
    TS.ims.unread_changed_sig.add(TS.redux.channels.forceUpdateOfEntityById);
    TS.ims.unread_highlight_changed_sig.add(TS.redux.channels.forceUpdateOfEntityById);
  };
  var _logStaleModelObAccess = function(immediate_caller, stack) {
    var STALE_MODEL_SET_VERSION = 1;
    TS.metrics.count("redux_stale_model_set_v" + STALE_MODEL_SET_VERSION);
    var info = {
      message: "Setting a property on a stale model object. Immediate caller: " + immediate_caller,
      stack: stack
    };
    var filename_and_line_number = immediate_caller.match(/\((.+):(\d+:\d+)\)/);
    if (filename_and_line_number && filename_and_line_number.length == 3) {
      info.fileName = filename_and_line_number[1];
      info.lineNumber = filename_and_line_number[2];
    }
    $.post(TS.boot_data.beacon_error_url, {
      description: "redux_stale_model_set_caller_v" + STALE_MODEL_SET_VERSION,
      error_json: JSON.stringify(info),
      team: _.get(TS, "model.team.id", "none"),
      user: TS.boot_data.user_id,
      version: TS.boot_data.version_ts
    });
  };
  var _shouldWrapEntityInProxyObject = function() {
    var use_a_proxy = window.Proxy && TS.boot_data && TS.boot_data.version_ts === "dev";
    if (TS.boot_data.feature_tinyspeck) {
      use_a_proxy = window.Proxy;
    }
    return use_a_proxy;
  };
  var _maybeWrapEntityInProxyObject = function(entity) {
    var use_a_proxy = entity && _shouldWrapEntityInProxyObject();
    if (use_a_proxy) {
      entity = new window.Proxy(entity, {
        set: function(target, property, value) {
          if (target && target.id && _getChannelById(target.id) !== target) {
            TS.console.logStackTrace("Setting a property on a stale model object");
            TS.generic_dialog.alert("Set a property on a stale model object, check the logs!", "Stale model object reference");
            var stack = TS.console.getStackTrace();
            var immediate_caller = _.get(stack.split("\n"), "[2]");
            if (!_redux_did_warn_about_stack[immediate_caller]) {
              _redux_did_warn_about_stack[immediate_caller] = true;
              _logStaleModelObAccess(immediate_caller, stack);
            }
          }
          _improperly_set_keys[property] = true;
          target[property] = value;
          return true;
        }
      });
    }
    return entity;
  };
  var _buildModelArrayKey = function(key) {
    var entities = _getAllChannels();
    var filter;
    switch (key) {
      case "channels":
        filter = _isChannel;
        break;
      case "groups":
        filter = _isGroup;
        break;
      case "ims":
        filter = _isIm;
        break;
      case "mpims":
        filter = _isMpim;
        break;
      default:
    }
    if (entities === _cached_entities && _cached_objects[key]) {
      return _cached_objects[key];
    }
    _cached_entities = entities;
    _cached_objects[key] = _.filter(entities, filter);
    if (_shouldWrapEntityInProxyObject()) {
      _cached_objects[key] = _.map(_cached_objects[key], _maybeWrapEntityInProxyObject);
    }
    if (!_clear_timeouts[key]) {
      _clear_timeouts[key] = _.defer(function() {
        delete _cached_objects[key];
        delete _clear_timeouts[key];
      });
    }
    return _cached_objects[key];
  };
})();
(function() {
  "use strict";
  TS.registerModule("redux.presence", {
    onStart: function() {
      if (TS.useRedux()) {
        _addSignalListeners();
      }
    },
    updatePresenceForMember: function(member) {
      if (!member || !member.id) {
        return;
      }
      TS.redux.dispatch(window.Redux.Features.Presence.updatePresence({
        memberId: member.id,
        presence: member.presence
      }));
    },
    addToBulkUpsertPayload: function(member) {
      _bulk_upsert_payload.push(member);
    },
    test: function() {
      var test_ob = {};
      return test_ob;
    }
  });
  var _bulk_upsert_payload = [];
  var _bulkUpsertPresences = function() {
    if (_bulk_upsert_payload.length) {
      TS.redux.dispatch(window.Redux.Features.Presence.bulkUpdatePresence(_bulk_upsert_payload));
      _bulk_upsert_payload = [];
    }
  };
  var _addSignalListeners = function() {
    TS.members.presence_changed_sig.add(TS.redux.presence.updatePresenceForMember);
    TS.members.batch_upserted_sig.add(_bulkUpsertPresences);
  };
})();
(function() {
  "use strict";
  TS.registerModule("redux.dnd", {
    onStart: function() {
      if (TS.useRedux()) {
        _getDndByMemberId = TS.redux.bindSelectorToStore(window.Redux.Features.Dnd.getDndByMemberId);
      }
    },
    updateMemberTypeForMember: function(member) {
      if (!member || !member.id) {
        return;
      }
      TS.redux.dispatch(window.Redux.Entities.MemberTypesById.updateMemberType(member));
    },
    isMemberInDndById: function(id) {
      return _getDndByMemberId(id);
    },
    updateDndForMember: function(id, is_in_dnd) {
      if (!id) {
        return;
      }
      TS.redux.dispatch(window.Redux.Features.Dnd.updateDnd({
        memberId: id,
        isInDnd: is_in_dnd
      }));
    },
    test: function() {
      var test_ob = {};
      return test_ob;
    }
  });
  var _getDndByMemberId;
})();
(function() {
  "use strict";
  TS.registerModule("redux.member_types", {
    onStart: function() {
      if (TS.useRedux()) {
        _addSignalListeners();
      }
    },
    updateMemberTypeForMember: function(member) {
      if (!member || !member.id) {
        return;
      }
      TS.redux.dispatch(window.Redux.Entities.MemberTypesById.updateMemberType(member));
    },
    addToBulkUpdatePayload: function(member) {
      _bulk_update_payload.push(member);
    },
    test: function() {
      var test_ob = {};
      return test_ob;
    }
  });
  var _bulk_update_payload = [];
  var _bulkUpdateMemberTypes = function() {
    if (_bulk_update_payload.length) {
      TS.redux.dispatch(window.Redux.Entities.MemberTypesById.bulkUpdateMemberType(_bulk_update_payload));
      _bulk_update_payload = [];
    }
  };
  var _addSignalListeners = function() {
    TS.members.changed_account_type_sig.add(TS.redux.member_types.updateMemberTypeForMember);
    TS.members.batch_upserted_sig.add(_bulkUpdateMemberTypes);
  };
})();
(function() {
  "use strict";
  TS.registerModule("channels", {
    switched_sig: new signals.Signal,
    pre_switched_sig: new signals.Signal,
    joined_sig: new signals.Signal,
    member_joined_sig: new signals.Signal,
    left_sig: new signals.Signal,
    member_left_sig: new signals.Signal,
    list_fetched_sig: new signals.Signal,
    history_fetched_sig: new signals.Signal,
    history_being_fetched_sig: new signals.Signal,
    message_received_sig: new signals.Signal,
    message_removed_sig: new signals.Signal,
    message_changed_sig: new signals.Signal,
    marked_sig: new signals.Signal,
    unread_changed_sig: new signals.Signal,
    unread_highlight_changed_sig: new signals.Signal,
    topic_changed_sig: new signals.Signal,
    purpose_changed_sig: new signals.Signal,
    created_sig: new signals.Signal,
    deleted_sig: new signals.Signal,
    renamed_sig: new signals.Signal,
    archived_sig: new signals.Signal,
    unarchived_sig: new signals.Signal,
    msg_not_sent_sig: new signals.Signal,
    data_retention_changed_sig: new signals.Signal,
    converted_to_shared_sig: new signals.Signal,
    shared_teams_updated_sig: new signals.Signal,
    data_updated_sig: new signals.Signal,
    addMsg: function(id, msg) {
      var channel = TS.channels.getChannelById(id);
      if (!channel) {
        TS.error('unknown channel "' + id + '"');
        return;
      }
      if (!TS.shared.addMsg(channel, msg)) return;
      var and_mark = !TS.utility.msgs.isTempMsg(msg);
      TS.channels.calcUnreadCnts(channel, and_mark);
      TS.utility.msgs.maybeTruncateMsgs(channel);
      TS.channels.message_received_sig.dispatch(channel, msg);
    },
    calcUnreadCnts: function(channel, and_mark) {
      TS.shared.calcUnreadCnts(channel, TS.channels, and_mark);
    },
    removeMsg: function(id, msg) {
      var channel = TS.channels.getChannelById(id);
      if (!channel) {
        TS.error('unknown channel "' + id + '"');
        return;
      }
      if (channel._archive_msgs) TS.utility.msgs.spliceMsg(channel._archive_msgs, msg);
      var msgs = channel.msgs;
      TS.utility.msgs.spliceMsg(msgs, msg);
      TS.channels.message_removed_sig.dispatch(channel, msg);
      TS.channels.calcUnreadCnts(channel, true);
    },
    sendMsg: function(channel_id, text, in_reply_to_msg, should_broadcast_reply) {
      var err_txt;
      var channel = TS.channels.getChannelById(channel_id);
      if (!channel) return false;
      if (channel.is_archived) return false;
      if (!channel.is_member) return false;
      var general = TS.channels.getGeneralChannel();
      var errorOut = function(err_txt, ephemeral_type) {
        if (ephemeral_type) {
          var ephemeral_msg = {
            text: err_txt,
            ephemeral_type: ephemeral_type,
            slackbot_feels: "sad_surprise"
          };
          TS.client.ui.addOrFlashEphemeralBotMsg(ephemeral_msg);
        } else {
          TS.generic_dialog.alert(err_txt).then(function() {
            if (in_reply_to_msg) {
              TS.ui.replies.focusReplyInput();
            } else {
              TS.view.focusMessageInput();
            }
          });
        }
        if (in_reply_to_msg) {
          TS.ui.replies.populateReplyInput(text);
          TS.ui.replies.focusReplyInput();
        } else {
          TS.utility.contenteditable.value(TS.client.ui.$msg_input, text);
          TS.view.focusMessageInput();
        }
      };
      if (channel.is_general && !TS.permissions.members.canPostInGeneral(TS.model.user)) {
        var general_posting_restricted = TS.i18n.t("A Team Owner has restricted posting to the #*{channel_name}* channel.", "channels")({
          channel_name: channel.name
        });
        errorOut(general_posting_restricted, "general_posting_restricted");
        return false;
      }
      var clean_text = TS.format.cleanMsg(text);
      var is_reply = !!in_reply_to_msg;
      var is_at_here = TS.model.here_regex.test(clean_text);
      var is_at_channel = TS.model.channel_regex.test(clean_text) && !is_reply || TS.model.group_regex.test(clean_text) && !is_reply || is_at_here;
      var is_at_everyone = TS.model.everyone_regex.test(clean_text) && !is_reply || TS.channels.isChannelRequired(channel) && is_at_channel;
      if (is_at_everyone) {
        if (!TS.permissions.members.canAtMentionEveryone()) {
          err_txt = "<p>" + TS.i18n.t("A Team Owner has restricted the use of <b>@everyone</b> messages.", "channels")() + "</p>";
          if (TS.model.user.is_restricted) {
            err_txt = "<p>" + TS.i18n.t("Your account is restricted, and you cannot send <b>@everyone</b> messages.", "channels")() + "</p>";
          }
          if (!TS.channels.isChannelRequired(channel) && TS.permissions.members.canAtChannelOrGroup()) {
            err_txt += '<p class="no_bottom_margin">' + TS.i18n.t("If you just want to address everyone in this channel, use <b>@channel</b> instead.", "channels")() + "</p>";
          }
          errorOut(err_txt);
          return false;
        }
        if (!TS.channels.isChannelRequired(channel) && !is_at_here) {
          if (!general || !general.is_member) {
            err_txt = "<p>" + TS.i18n.t("You cannot send <b>@everyone</b> messages.", "channels")() + "</p>";
            if (TS.permissions.members.canAtChannelOrGroup()) {
              err_txt += '<p class="no_bottom_margin">' + TS.i18n.t("If you just want to address everyone in this channel, use <b>@channel</b> instead.", "channels")() + "</p>";
            }
            errorOut(err_txt);
          } else {
            TS.generic_dialog.start({
              title: TS.i18n.t("Send @everyone a message", "channels")(),
              body: TS.i18n.t('<p class="bold">Would you like to switch to #{general_channel} and send your message?</p>							<p class="">Using <b>@everyone</b> in a message is a way to address your whole team, but it must be done in the #{general_channel} channel.</p>							<p class="no_bottom_margin">If you just want to address everyone in this channel, use <b>@channel</b> instead.</p>', "channels")({
                general_channel: general.name
              }),
              show_cancel_button: true,
              show_go_button: true,
              go_button_text: TS.i18n.t("Yes, send it", "channels")(),
              onGo: function() {
                TS.channels.displayChannel({
                  id: general.id,
                  and_send_txt: text
                });
              },
              onCancel: function() {
                TS.utility.contenteditable.value(TS.client.ui.$msg_input, text);
                TS.view.focusMessageInput();
              }
            });
          }
          return false;
        }
      }
      if (is_at_channel && !TS.permissions.members.canAtChannelOrGroup()) {
        var key_word = is_at_here ? "@here" : "@channel";
        err_txt = "<p>" + TS.i18n.t("A Team Owner has restricted the use of <b>{key_word}</b> messages.", "channels")({
          key_word: key_word
        }) + "</p>";
        errorOut(err_txt);
        return false;
      }
      if (!is_reply && TS.ui.needToShowAtChannelWarning(channel_id, text)) {
        TS.ui.at_channel_warning_dialog.startInMessagePane(channel_id, text, TS.channels);
        return false;
      }
      return TS.shared.sendMsg(channel_id, text, TS.channels, in_reply_to_msg, should_broadcast_reply);
    },
    onSendMsg: function(success, imsg) {
      var channel = TS.channels.getChannelById(imsg.SENT_MSG.channel);
      if (!channel) {
        TS.error("unknown channel? " + imsg.SENT_MSG.channel);
        return;
      }
      TS.shared.onSendMsg(success, imsg, channel, TS.channels);
    },
    displayChannel: function(options) {
      var current_options = _.defaults({}, options, {
        from_history: false,
        replace_history_state: false
      });
      var channel_id = current_options.id;
      if (!channel_id) {
        TS.error("no channel id supplied");
        return;
      }
      var channel_path = current_options.path;
      var and_send_txt = current_options.and_send_txt;
      var from_history = current_options.from_history;
      var replace_history_state = current_options.replace_history_state;
      if (TS.isPartiallyBooted() && channel_id !== TS.model.initial_cid) {
        TS.warn("Can't switch model objects during incremental boot; this is a programming error");
        TS.sounds.play("beep");
        return;
      }
      TS.metrics.mark("start_channel_change_" + channel_id);
      var channel = TS.channels.getChannelById(channel_id);
      if (!channel) {
        TS.error('channel "' + channel_id + '" unknown');
        return;
      }
      TS.utility.msgs.maybeClearPrevLastRead();
      TS.utility.msgs.maybeClearPrevLastRead(channel);
      TS.shared.maybeClearHasAutoScrolled();
      if (channel_id === TS.model.active_channel_id && !replace_history_state && !TS.client.activeChannelIsHidden()) {
        TS.warn('channel "' + channel_id + '" already displayed');
        if (and_send_txt) {
          TS.channels.sendMsg(channel_id, $.trim(and_send_txt));
        }
        return;
      }
      if (TS.pri) TS.log(999, "displayChannel: " + channel.id);
      if (channel._did_defer_initial_msg_history) {
        TS.shared.checkInitialMsgHistory(channel, TS.channels);
      }
      if (!channel.is_member) {
        if (and_send_txt) {
          TS.model.requested_channel_joins[channel_id] = {
            and_send_txt: and_send_txt
          };
          TS.channels.join(channel.name);
          return;
        }
        TS.client.archives.previous_model_ob = TS.shared.getActiveModelOb();
      }
      var no_history_add = replace_history_state ? false : from_history;
      var switched = TS.client.channelDisplaySwitched({
        id: channel_id,
        path: channel_path,
        replace_history_state: replace_history_state,
        no_history_add: no_history_add
      });
      if (switched) {
        TS.channels.pre_switched_sig.dispatch();
        TS.channels.switched_sig.dispatch();
      }
      if (and_send_txt) {
        TS.channels.sendMsg(channel_id, $.trim(and_send_txt));
      }
    },
    setLastRead: function(channel, ts, reason) {
      if (channel.last_read === ts) {
        return false;
      }
      if (ts.indexOf(TS.utility.date.fake_ts_unique_padder) > -1) {
        TS.error("bad ts: " + ts);
        return false;
      }
      var log_msg = channel.id + ". last_read = " + channel.last_read + " -> " + ts + ", reason: " + (reason || "unspecified");
      if (channel.last_read > ts) {
        var dont_allow_back_setting = TS.model.last_reads_set_by_client[channel.id + "_" + ts];
        delete TS.model.last_reads_set_by_client[channel.id + "_" + ts];
        if (dont_allow_back_setting) {
          TS.warn("NOT going back in time on channel " + log_msg);
          return;
        }
        if (TS.pri) TS.log(142, "going back in time on channel " + log_msg, TS.console.getStackTrace());
        TS.utility.msgs.maybeClearPrevLastRead(channel);
        TS.utility.msgs.setPrevLastRead(channel, ts);
      } else {
        if (TS.pri) TS.log(142, "TS.channels.setLastRead: " + log_msg);
        TS.utility.msgs.maybeClearPrevLastRead(channel);
        TS.utility.msgs.maybeSetPrevLastRead(channel, ts);
      }
      channel.last_read = ts;
      if (reason) channel._marked_reason = reason;
      TS.channels.marked_sig.dispatch(channel);
      TS.utility.msgs.maybeClearUsersCountsInfo(channel);
      TS.channels.calcUnreadCnts(channel);
      return true;
    },
    markMostRecentReadMsg: function(channel, reason, allow_latest_via_users_counts) {
      if (!channel) {
        TS.error("channel unknown");
        return;
      }
      if ((!channel.msgs || !channel.msgs.length) && !allow_latest_via_users_counts) return;
      var most_recent_valid_ts = TS.utility.msgs.getMostRecentValidTs(channel);
      if (!most_recent_valid_ts) {
        if (channel.is_member && (channel.msgs && channel.msgs.length || !channel._latest_via_users_counts)) TS.warn('no valid tses for channel "' + channel.id + '"???');
        return;
      }
      channel.all_read_this_session_once = true;
      TS.channels.markReadMsg(channel.id, most_recent_valid_ts, reason);
    },
    markReadMsg: function(channel_id, ts, reason) {
      var channel = TS.channels.getChannelById(channel_id);
      if (!channel) {
        TS.error('channel "' + channel_id + '" unknown');
        return;
      }
      if (channel.last_read === ts) {
        return;
      }
      if (TS.channels.setLastRead(channel, ts, reason)) {
        channel._marked_reason = reason;
        if (channel.is_member) {
          if (TS.useRedux()) {
            var needs_api_marking = true;
            TS.redux.channels.setMarkingState(channel.id, needs_api_marking);
          } else {
            channel.needs_api_marking = true;
          }
        }
      }
    },
    onMarked: function(ok, data, args) {
      var channel = TS.channels.getChannelById(args.channel);
      if (!channel) {
        TS.error('error: no channel "' + args.channel + '"');
        return;
      }
      if (ok || data && (data.error === "not_in_channel" || data.error === "is_archived")) {} else if (TS.useRedux()) {
        var needs_api_marking = true;
        TS.redux.channels.setMarkingState(channel.id, needs_api_marking);
      } else {
        channel.needs_api_marking = true;
      }
    },
    create: function(name, options) {
      options = options || {};
      if (TS.model.user.is_restricted) return Promise.reject(new Error("restricted_action"));
      if (!name) return Promise.reject(new Error("required"));
      if (TS.model.created_channels[name]) {
        return Promise.reject(new Error("name_taken"));
      }
      TS.model.created_channels[name] = true;
      return new Promise(function(resolve, reject) {
        return TS.api.call("channels.create", {
          name: name,
          validate: options.validate_name
        }).then(function(res) {
          TS.channels.onJoin(res.data.ok, res.data, res.args);
          resolve(res);
          return null;
        }).catch(function(res) {
          delete TS.model.created_channels[name];
          reject(res);
          return null;
        });
      });
    },
    join: function(name, callback, options) {
      options = options || {};
      if (TS.model.user.is_restricted) return Promise.reject(new Error("Account is restricted"));
      if (!name) return Promise.reject(new Error("No channel name given"));
      if (!TS.channels.getChannelByName(name)) {
        if (TS.model.created_channels[name]) {
          return Promise.reject("Already joining");
        }
        TS.model.created_channels[name] = true;
      }
      return new Promise(function(resolve, reject) {
        return TS.api.call("channels.join", {
          name: name,
          _in_background: !!options.in_background,
          validate: !!options.validate
        }).then(function(res) {
          TS.channels.onJoin(res.data.ok, res.data, res.args);
          if (callback) {
            callback(res.data.ok, res.data, res.args);
          } else {
            resolve(res);
          }
          return null;
        }).catch(function(res) {
          delete TS.model.created_channels[name];
          if (callback) {
            callback(res.data.ok, res.data, res.args);
          } else {
            reject(res);
          }
          return null;
        });
      });
    },
    onJoin: function(ok, data, args) {
      if (!ok) {
        if (data.error === "name_taken") {} else if (data.error === "is_archived") {
          TS.channels.displayChannel({
            id: TS.channels.getChannelByName(args.name).id
          });
        } else if (data.error === "restricted_action") {
          TS.generic_dialog.alert(TS.i18n.t("<p>You don’t have permission to create new channels.</p><p>Talk to your Team Owner.</p>", "channels")());
        } else {
          TS.error("failed to join channel");
          alert("failed to join channel");
        }
        return;
      }
      var channel_id;
      var channel;
      if (data.channel) {
        channel = TS.channels.upsertChannel(data.channel);
        channel_id = data.channel.id;
      }
      if (!channel_id) {
        TS.error("no channel_id?!!");
        return;
      }
      var and_send_txt = "";
      if (TS.model.requested_channel_joins[channel_id]) {
        and_send_txt = TS.model.requested_channel_joins[channel_id].and_send_txt;
        delete TS.model.requested_channel_joins[channel_id];
      }
      if (!channel) {
        TS.error("no channel?!!");
        return;
      }
      if (args._in_background) {
        return;
      }
      if (!channel.needs_created_message && !channel.never_needs_joined_msg) {
        channel.needs_joined_message = true;
      }
      if (TS.client) TS.channels.displayChannel({
        id: channel_id,
        and_send_txt: and_send_txt
      });
    },
    leave: function(id) {
      var channel = TS.channels.getChannelById(id);
      if (!channel) return;
      if (TS.boot_data.feature_default_shared_channels) {
        var can_leave = TS.permissions.channels.canMemberLeaveChannel(channel, TS.model.user);
        if (!can_leave) {
          TS.generic_dialog.alert(TS.i18n.t("Sorry, you can’t leave <strong>#{channel_name}</strong>!", "channels")({
            channel_name: channel.name
          }));
          return;
        }
      }
      if (TS.channels.isChannelRequired(channel) || TS.model.user.is_restricted) {
        TS.generic_dialog.alert(TS.i18n.t("Sorry, you can’t leave <strong>#{channel_name}</strong>!", "channels")({
          channel_name: channel.name
        }));
        return;
      } else if (channel.is_private) {
        TS.generic_dialog.start({
          title: TS.i18n.t("Leave {channel_name}", "channels")({
            channel_name: channel.name
          }),
          body: TS.i18n.t("<p>If you leave the private channel, you will no longer be able to see any of its messages. To rejoin the private channel, you will have to be re-invited.</p><p>Are you sure you wish to leave?</p>", "channels")(),
          go_button_text: TS.i18n.t("Yes, leave the private channel", "channels")(),
          onGo: function() {
            TS.api.call("channels.leave", {
              channel: id
            }, TS.channels.onLeave);
          }
        });
        return;
      }
      TS.channels.markMostRecentReadMsg(channel, TS.model.marked_reasons.left);
      TS.client.markLastReadsWithAPI();
      TS.api.call("channels.leave", {
        channel: id
      }, TS.channels.onLeave);
    },
    onLeave: function(ok, data, args) {
      if (!ok) {
        TS.error("failed to leave channel");
        return;
      }
      var channel = TS.channels.getChannelById(args.channel);
      if (!channel) {
        TS.error('error no channel "' + args.channel + '"');
        return;
      }
      channel.msgs.length = 0;
      if (channel.is_limited) channel.is_limited = false;
    },
    setTopic: function(id, topic) {
      TS.api.call("channels.setTopic", {
        channel: id,
        topic: topic
      }, TS.channels.onSetTopic);
    },
    onSetTopic: function(ok) {
      if (!ok) {
        TS.error("failed to set channel topic");
      }
    },
    setPurpose: function(id, purpose) {
      TS.api.call("channels.setPurpose", {
        channel: id,
        purpose: purpose
      }, TS.channels.onSetPurpose);
    },
    onSetPurpose: function(ok, data) {
      if (!ok) {
        TS.error("failed to set channel purpose");
        TS.channels.alertSetPurposeError(data.error);
      }
    },
    alertSetPurposeError: function(error) {
      var alert_text;
      if (error === "too_long") {
        alert_text = TS.i18n.t("Oooops! That purpose is too long. Please try again with fewer than 250 characters.", "channels")();
      } else if (error === "restricted_action" || error === "user_is_restricted") {
        alert_text = TS.i18n.t("Uh oh! You don’t have permission to change the purpose. Talk to your team admin.", "channels")();
      } else {
        alert_text = TS.i18n.t("Uh oh! Something went wrong with setting the purpose. Please try again.", "channels")();
      }
      TS.generic_dialog.alert(alert_text);
    },
    getChannelsFilteredBy: function(filter) {
      return TS.shared.getEntitiesFilteredBy("channels", filter);
    },
    getChannelById: function(id) {
      if (!id) return null;
      if (TS.useRedux()) {
        return TS.redux.channels.getChannelById(id);
      }
      var channel = _id_map[id];
      if (channel) {
        return channel;
      }
      var channels = TS.model.channels;
      if (!channels) return null;
      for (var i = 0; i < channels.length; i += 1) {
        channel = channels[i];
        if (channel.id === id) {
          TS.warn(id + " not in _id_map?");
          _id_map[id] = channel;
          return channel;
        }
      }
      return null;
    },
    getFirstChannelYouAreIn: function() {
      var channels = TS.model.channels;
      if (!channels) return null;
      return _.find(channels, "is_member");
    },
    getGeneralChannel: function() {
      var channels = TS.model.channels;
      if (!channels) return null;
      return _.find(channels, "is_general");
    },
    isChannelRequired: function(model_ob) {
      return model_ob.is_general || model_ob.is_required;
    },
    isChannelOrgDefault: function(model_ob) {
      if (model_ob.is_shared && TS.channels.isChannelRequired(model_ob)) return true;
      if (TS.boot_data.feature_default_shared_channels) return model_ob.is_default;
      return false;
    },
    getChannelByName: function(name) {
      if (TS.useRedux()) {
        return TS.redux.channels.getChannelByName(name);
      }
      name = _.toLower(name);
      var channels = TS.model.channels;
      var channel = _name_map[name];
      if (channel) {
        return channel;
      }
      if (!channels) return null;
      for (var i = 0; i < channels.length; i += 1) {
        channel = channels[i];
        if (channel._name_lc === name || "#" + channel._name_lc === name) {
          TS.warn(name + " not in _name_map?");
          _name_map["#" + name] = channel;
          _name_map[name] = channel;
          return channel;
        }
      }
      return null;
    },
    upsertChannel: function(channel, is_bulk_upsert) {
      return _upsertChannel(channel, is_bulk_upsert);
    },
    removeChannel: function(channel) {
      if (TS.useRedux()) {
        TS.redux.channels.removeEntity(channel);
      } else {
        var channels = TS.model.channels;
        if (TS.pri) TS.log(4, 'removing channel "' + channel.id + '"');
        var c;
        for (var i = 0; i < channels.length; i += 1) {
          c = channels[i];
          if (c.id === channel.id) {
            channels.splice(i, 1);
            break;
          }
        }
        delete _id_map[channel.id];
        delete _name_map[channel._name_lc];
        delete _name_map["#" + channel._name_lc];
      }
      if (TS.client) {
        if (TS.model.active_channel_id === channel.id) {
          TS.client.activeChannelDisplayGoneAway();
        }
      }
      channel.msgs.length = 0;
      if (channel.is_limited) channel.is_limited = false;
      TS.channels.deleted_sig.dispatch(channel);
    },
    channelRenamed: function(channel) {
      var existing_channel = TS.channels.getChannelById(channel.id);
      if (!TS.useRedux()) {
        delete _name_map[existing_channel._name_lc];
        delete _name_map["#" + existing_channel._name_lc];
      }
      channel.previous_names = [existing_channel._name_lc].concat(existing_channel.previous_names || []);
      var new_channel = TS.channels.upsertChannel(channel);
      new_channel._name_lc = _.toLower(new_channel.name);
      if (!TS.useRedux()) {
        _name_map[new_channel._name_lc] = new_channel;
        _name_map["#" + new_channel._name_lc] = new_channel;
      }
      TS.channels.renamed_sig.dispatch(new_channel);
    },
    markScrollTop: function(id, scroll_top) {
      var channel = TS.channels.getChannelById(id);
      if (!channel) return false;
      if (channel.scroll_top === scroll_top) {
        return false;
      }
      channel.scroll_top = scroll_top;
      return true;
    },
    maybeLoadScrollBackHistory: function(id, force) {
      var channel = TS.channels.getChannelById(id);
      if (!channel) return false;
      return TS.shared.maybeLoadScrollBackHistory(channel, TS.channels, force);
    },
    onHistory: function(ok, data, args) {
      var channel = TS.channels.getChannelById(args.channel);
      if (!channel) {
        TS.error('error no channel "' + args.channel + '"');
        return;
      }
      if (!ok || !data || !data.messages) {
        TS.error("failed to get history for channel " + args.channel);
        channel.history_is_being_fetched = false;
        channel.history_fetch_retries = (channel.history_fetch_retries || 0) + 1;
        var min_delay = 2500;
        var max_delay = 5e3;
        var delay = _.random(min_delay, max_delay);
        TS.info("retrying history fetch on channel " + channel.id + " in " + delay);
        window.setTimeout(function() {
          TS.info("retrying history fetch on channel " + channel.id + ", attempt #" + (channel.history_fetch_retries || "1"));
          TS.channels.fetchHistory(channel, args, TS.channels.onHistory);
        }, delay);
        return;
      }
      delete channel.history_fetch_retries;
      var fetching_more = TS.shared.onHistory(channel, data, args, TS.channels);
      if (!fetching_more) {
        channel.history_is_being_fetched = false;
        TS.channels.history_fetched_sig.dispatch(channel);
      }
      var and_mark = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(channel);
      TS.channels.calcUnreadCnts(channel, and_mark);
    },
    fetchHistory: function(channel, api_args, handler) {
      if (!channel) {
        TS.error('error no channel "' + channel + '"');
        return;
      }
      TS.shared.maybeClearHasAutoScrolled(channel);
      channel.history_is_being_fetched = true;
      channel.history_fetch_failed = false;
      TS.channels.history_being_fetched_sig.dispatch(channel);
      if (channel.history_fetch_retries > 5) {
        TS.error("giving up on channels.history for " + channel.id + ", channel.history_fetch_retries = " + channel.history_fetch_retries);
        delete channel.history_fetch_retries;
        channel.history_is_being_fetched = false;
        channel.history_fetch_failed = true;
        if (TS.client) TS.client.msg_pane.updateEndMarker();
        return;
      }
      TS.api.call("channels.history", api_args, handler || TS.channels.onHistory);
    },
    topicChanged: function(channel, user_id, ts, topic) {
      if (!channel.topic) channel.topic = {};
      channel.topic.creator = user_id;
      channel.topic.last_set = ts;
      channel.topic.value = topic;
      TS.channels.topic_changed_sig.dispatch(channel, user_id, topic);
    },
    purposeChanged: function(channel, user_id, ts, purpose) {
      if (!channel.purpose) channel.purpose = {};
      channel.purpose.creator = user_id;
      channel.purpose.last_set = ts;
      channel.purpose.value = purpose;
      TS.channels.purpose_changed_sig.dispatch(channel, user_id, purpose);
    },
    closeArchivedChannel: function(id) {
      TS.shared.closeArchivedChannel(id);
    },
    makeMembersWithPreselectsForTemplate: function(A, preselected_ids) {
      preselected_ids = preselected_ids || [];
      var ret = [];
      for (var i = 0; i < A.length; i += 1) {
        var member = A[i];
        var preselected = preselected_ids.indexOf(member.id) != -1;
        ret[i] = {
          member: member,
          preselected: preselected
        };
      }
      return ret;
    },
    getActiveMembersNotInThisChannelForInviting: function(id, act_like_an_admin) {
      if (TS.lazyLoadMembersAndBots()) {
        throw new Error("getActiveMembersNotInThisChannelForInviting is incomplete when flannel is enabled. It should not be used.");
      }
      var A = [];
      var is_admin = act_like_an_admin || TS.model.user.is_admin;
      if (TS.model.user.is_ultra_restricted) return A;
      var channel = TS.channels.getChannelById(id);
      if (!channel) return A;
      var member;
      var membership_status;
      var active_members = TS.members.getActiveMembersExceptSelfAndSlackbot();
      for (var m = 0; m < active_members.length; m += 1) {
        member = active_members[m];
        if (member.is_ultra_restricted) continue;
        if (!is_admin && member.is_restricted) continue;
        membership_status = TS.membership.getUserChannelMembershipStatus(member.id, channel);
        if (membership_status.is_known && !membership_status.is_member) {
          if (TS.permissions.channels.canMemberJoinChannel(channel, member)) A.push(member);
        }
      }
      return A;
    },
    fetchList: function() {
      TS.api.call("channels.list", {
        exclude_members: 1
      }, TS.channels.onListFetched);
    },
    onListFetched: function(ok, data) {
      if (!ok) {
        TS.error("failed to fetch channel list");
        return;
      }
      var is_bulk_upsert = false;
      if (TS.useRedux()) {
        is_bulk_upsert = true;
      }
      var channels_to_upsert = _.map(data.channels, function(channel) {
        return TS.channels.upsertChannel(channel, is_bulk_upsert);
      });
      if (TS.useRedux() && channels_to_upsert.length) {
        TS.redux.channels.bulkAddEntities(_.compact(channels_to_upsert));
      }
      TS.channels.list_fetched_sig.dispatch(data.channels);
    },
    kickMember: function(id, member_id) {
      if (!TS.permissions.members.canKickFromChannels()) return;
      var channel = TS.channels.getChannelById(id);
      if (!channel) return;
      return TS.shared.kickMember(channel, member_id);
    },
    getChannelsForUser: function() {
      var channels = TS.model.channels;
      if (!TS.model.user.is_restricted) {
        return channels;
      }
      return TS.channels.getChannelsUserIsIn();
    },
    getChannelsUserIsIn: function() {
      var channels = TS.model.channels;
      return _.filter(channels, "is_member");
    },
    getUnarchivedChannelsForUser: function() {
      var channels = TS.channels.getChannelsForUser();
      return _.reject(channels, "is_archived");
    },
    setDataRetention: function(channel_id, retention_type, retention_duration, handler) {
      var args = {
        channel: channel_id,
        retention_type: $("select[name=retention_type]").val()
      };
      if (args.retention_type == 1) {
        args.retention_duration = $("#retention_duration").val();
      }
      TS.api.call("channels.setRetention", args, function(ok, data, args) {
        if (handler) {
          handler(ok, data, args);
        }
        if (ok) {
          TS.channels.data_retention_changed_sig.dispatch(args);
        }
      });
    },
    getDataRetention: function(channel_id, handler) {
      TS.api.call("channels.getRetention", {
        channel: channel_id
      }, handler);
    }
  });
  var _id_map = {};
  var _name_map = {};
  var _upsertChannel = function(channel, is_bulk_upsert) {
    var existing_channel = TS.channels.getChannelById(channel.id);
    var members;
    delete channel.unread_count;
    if (TS.boot_data.feature_tinyspeck && channel.id === "C00") TS.warn("_upsertChannel() got a bad channel id of C00", channel);
    if (existing_channel) {
      if (TS.useRedux()) {
        existing_channel = _.assign({}, existing_channel);
      }
      if (TS.pri) TS.log(5, 'updating existing channel "' + channel.id + '"');
      for (var k in channel) {
        if (k === "members") {
          if (TS.membership.lazyLoadChannelMembership()) continue;
          members = channel.members;
          if (channel.is_shared) {
            existing_channel.members = _.union(existing_channel.members, members);
          } else {
            if (existing_channel.members.length !== members.length) TS.metrics.count("channel_upsert_membership_discrepancy");
            existing_channel.members.length = 0;
            for (var i = 0; i < members.length; i += 1) {
              existing_channel.members.push(members[i]);
            }
          }
        } else if (k === "pinned_items") {
          if (TS.client) {
            TS.pins.upsertPinnedItems(channel.pinned_items);
            existing_channel.pinned_items = channel.pinned_items;
          }
        } else {
          existing_channel[k] = channel[k];
        }
      }
      _maybeSetSharedTeams(existing_channel);
      channel = existing_channel;
      if (TS.isPartiallyBooted() && channel.oldest_msg_ts === null) {
        channel.oldest_msg_ts = TS.storage.fetchOldestTs(channel.id);
      }
      TS.shared.maybeResetHistoryFetched(channel);
      if (TS.client && channel.is_member) {
        var should_defer_initial_msg_history = true;
        TS.shared.checkInitialMsgHistory(channel, TS.channels, should_defer_initial_msg_history);
      }
      if (TS.useRedux()) {
        if (!is_bulk_upsert) {
          TS.redux.channels.replaceEntity(channel);
        }
      }
    } else {
      if (!TS.useRedux()) {
        if (TS.pri) TS.log(5, 'adding channel "' + channel.id + '"');
        TS.model.channels.push(channel);
      }
      _processNewChannelForUpserting(channel);
      if (TS.useRedux()) {
        if (!is_bulk_upsert) {
          TS.redux.channels.addEntity(channel);
        }
      } else {
        _id_map[channel.id] = channel;
        _name_map[channel._name_lc] = channel;
        _name_map["#" + channel._name_lc] = channel;
      }
      if (channel.pinned_items && TS.client) TS.pins.upsertPinnedItems(channel.pinned_items);
    }
    if (channel.is_member && channel.is_archived) {
      TS.error("channel.is_member and channel.is_archived are both true for " + channel.id);
      TS.dir(0, channel);
      channel.is_member = false;
    }
    if (TS.client) {
      var and_mark = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(channel);
      if (TS.model.active_cid === channel.id) {
        TS.channels.calcUnreadCnts(channel, and_mark);
      } else if (!existing_channel) {
        TS.channels.calcUnreadCnts(channel, and_mark);
      }
    }
    return channel;
  };
  var _maybeSetSharedTeams = function(channel) {
    if (!channel.is_shared) return;
    if (channel.is_global_shared) {
      if (channel.shares) delete channel.shares;
      if (channel.shared_team_ids) delete channel.shared_team_ids;
      return;
    }
    if (channel.shares && TS.shared.isModelObOrgShared(channel)) {
      channel.shared_team_ids = _(channel.shared_team_ids || []).concat(_.map(channel.shares, "id")).value();
      if (channel.shares) delete channel.shares;
    } else if (channel.shares && TS.shared.isModelObShared(channel)) {
      channel.shared_team_ids = _.map(channel.shares, "team.id");
      if (channel.shares) delete channel.shares;
    }
    channel.shared_team_ids = _(channel.shared_team_ids || []).uniq().value();
    if (TS.shared.isModelObShared(channel) && channel.shared_team_ids.length) TS.teams.ensureTeamsArePresent(channel.shared_team_ids);
  };
  var _processNewChannelForUpserting = function(channel) {
    TS.shared.setPriorityForDev(channel);
    channel.is_channel = true;
    channel.is_general = !!channel.is_general;
    if (TS.boot_data.feature_default_shared_channels) {
      channel.is_required = !!channel.is_required;
      channel.is_default = !!channel.is_default;
    }
    channel._name_lc = _.toLower(channel.name);
    channel._show_in_list_even_though_no_unreads = false;
    TS.shared.maybeResetHistoryFetched(channel);
    if (!TS.membership.lazyLoadChannelMembership() && !channel.members) channel.members = [];
    if (!channel.topic) channel.topic = {};
    if (!channel.purpose) channel.purpose = {};
    channel.is_member = !!channel.is_member;
    channel.scroll_top = -1;
    channel.history_is_being_fetched = false;
    if (!TS.useRedux()) {
      channel.needs_api_marking = false;
    }
    channel.unread_highlight_cnt = 0;
    channel.unread_highlights = [];
    channel.unread_cnt = 0;
    channel.unreads = [];
    channel.oldest_unread_ts = null;
    channel.has_fetched_history_after_scrollback = false;
    if (TS.client) {
      if (TS._incremental_boot && channel.msgs && channel.msgs.length > 0) {
        channel.msgs = channel.msgs.map(function(msg) {
          return TS.utility.msgs.processImsg(msg, channel.id);
        });
        TS.utility.msgs.setMsgs(channel, channel.msgs);
      } else {
        TS.utility.msgs.setMsgs(channel, []);
      }
    } else if (TS.boot_data.msgs) {
      TS.utility.msgs.ingestMessagesFromBootData(channel);
    }
    channel.oldest_msg_ts = TS.storage.fetchOldestTs(channel.id) || null;
    channel.last_msg_input = TS.storage.fetchLastMsgInput(channel.id) || null;
    if (TS.model.created_channels[channel.name]) {
      channel.needs_created_message = true;
      delete TS.model.created_channels[channel.name];
    }
    _maybeSetSharedTeams(channel);
  };
})();
(function() {
  "use strict";
  TS.registerModule("membership", {
    membership_counts_need_refetch_sig: new signals.Signal,
    onStart: function() {
      if (TS.lazyLoadMembersAndBots()) {
        TS.channels.member_left_sig.add(_modelObMemberRemoved);
        TS.channels.member_joined_sig.add(_modelObMemberAdded);
        TS.groups.member_left_sig.add(_modelObMemberRemoved);
        TS.groups.member_joined_sig.add(_modelObMemberAdded);
        TS.channels.switched_sig.add(_modelObSwitched);
        TS.groups.switched_sig.add(_modelObSwitched);
        TS.ims.switched_sig.add(_modelObSwitched);
        TS.mpims.switched_sig.add(_modelObSwitched);
        TS.channels.joined_sig.add(_modelObJoined);
        TS.channels.left_sig.add(_modelObLeft);
        TS.groups.left_sig.add(_modelObLeft);
        TS.ms.connected_sig.add(_maybeInvalidateLocalCache);
        var handler_priority = Infinity;
        TS.members.changed_deleted_sig.add(_markMembershipCountsAsStale, this, handler_priority);
        TS.members.non_loaded_changed_deleted_sig.add(_markMembershipCountsAsStale, this, handler_priority);
      }
    },
    test: function() {
      var test_ob = {};
      Object.defineProperty(test_ob, "_channel_member_counts_info", {
        get: function() {
          return _channel_member_counts_info;
        },
        set: function(v) {
          _channel_member_counts_info = v;
        }
      });
      Object.defineProperty(test_ob, "_promiseToGetChannelMemberCountsFromAPI", {
        get: function() {
          return _promiseToGetChannelMemberCountsFromAPI;
        },
        set: function(v) {
          _promiseToGetChannelMemberCountsFromAPI = v;
        }
      });
      Object.defineProperty(test_ob, "_isChannelMembershipKnownForUser", {
        get: function() {
          return _isChannelMembershipKnownForUser;
        },
        set: function(v) {
          _isChannelMembershipKnownForUser = v;
        }
      });
      Object.defineProperty(test_ob, "_getChannelMembershipForUser", {
        get: function() {
          return _getChannelMembershipForUser;
        },
        set: function(v) {
          _getChannelMembershipForUser = v;
        }
      });
      Object.defineProperty(test_ob, "_setChannelKnownMembership", {
        get: function() {
          return _setChannelKnownMembership;
        },
        set: function(v) {
          _setChannelKnownMembership = v;
        }
      });
      Object.defineProperty(test_ob, "_channel_known_member_statuses", {
        get: function() {
          return _channel_known_member_statuses;
        },
        set: function(v) {
          _channel_known_member_statuses = v;
        }
      });
      return test_ob;
    },
    lazyLoadChannelMembership: function() {
      return TS.lazyLoadMembersAndBots();
    },
    lazyLoadGroupMembership: function() {
      return false;
    },
    lazyLoadMpimMembership: function() {
      return false;
    },
    getUserChannelMembershipStatus: function(user_id, channel) {
      if (!_.isString(user_id)) throw new Error("Expected user_id to be a string");
      if (!_.isObject(channel)) throw new Error("Expected channel to be an object");
      if (channel.is_im) {
        return {
          is_known: true,
          is_member: user_id == TS.boot_data.user_id || user_id == channel.user
        };
      }
      if (!TS.membership.lazyLoadChannelMembership()) {
        var is_member = user_id !== "USLACKBOT" && _.includes(channel.members, user_id);
        return {
          is_known: true,
          is_member: is_member
        };
      }
      if (_isChannelMembershipKnownForUser(channel.id, user_id)) {
        return {
          is_known: true,
          is_member: _getChannelMembershipForUser(channel.id, user_id)
        };
      }
      var empty_response = {
        is_known: false
      };
      Object.defineProperty(empty_response, "is_member", {
        get: function() {
          throw new Error("Value for is_member is not known; check is_known before accessible this field");
        }
      });
      return empty_response;
    },
    setUserChannelMembership: function(user_id, channel, is_member) {
      if (!_.isString(user_id)) throw new Error("Expected user_id to be a string");
      if (TS.membership.lazyLoadChannelMembership()) {
        return _setChannelKnownMembership(channel.id, user_id, is_member);
      }
      var was_already_member = _.includes(channel.members, user_id);
      if (was_already_member == is_member) return false;
      if (is_member) {
        channel.members.push(user_id);
      } else {
        _.pull(channel.members, user_id);
      }
      return true;
    },
    ensureChannelMembershipIsKnownForUsers: function(channel_id, user_ids) {
      var user_ids_without_known_membership = _getUsersWithChannelMembershipUnknown(channel_id, user_ids);
      if (user_ids_without_known_membership.length === 0) {
        return Promise.resolve(false);
      }
      return TS.flannel.fetchChannelMembershipForUsers(channel_id, user_ids_without_known_membership).then(function(membership_info) {
        _.forEach(membership_info, function(is_member, user_id) {
          _setChannelKnownMembership(channel_id, user_id, is_member);
        });
        return true;
      });
    },
    isChannelMembershipKnownForUsers: function(channel_id, user_ids) {
      var user_ids_without_known_membership = _getUsersWithChannelMembershipUnknown(channel_id, user_ids);
      return user_ids_without_known_membership.length === 0;
    },
    notifyChannelMembershipChanged: function(user_id, channel, is_member, should_display_join_message) {
      var member = TS.members.getMemberById(user_id);
      if (!member) {
        var membership_description = is_member ? "joined" : "left";
        TS.warn("User " + user_id + " " + membership_description + " channel " + channel.id + " but we don’t have that user in our model");
        return;
      }
      if (is_member) {
        TS.channels.member_joined_sig.dispatch(channel, member, !should_display_join_message);
      } else {
        TS.channels.member_left_sig.dispatch(channel, member);
      }
    },
    promiseToGetMembershipCounts: function(model_ob) {
      var counts_info = TS.membership.getMembershipCounts(model_ob);
      if (counts_info.promise) {
        return counts_info.promise.then(function() {
          return Promise.resolve(TS.membership.getMembershipCounts(model_ob).counts);
        });
      }
      return Promise.resolve(counts_info.counts);
    },
    getMembershipCounts: function(model_ob) {
      _channel_member_counts_info[model_ob.id] = _channel_member_counts_info[model_ob.id] || {};
      var channel_member_counts = _channel_member_counts_info[model_ob.id];
      var should_fetch = !channel_member_counts.promise && (!channel_member_counts.counts || channel_member_counts.should_refetch);
      if (should_fetch) {
        channel_member_counts.should_refetch = false;
        channel_member_counts.promise = _promiseToGetChannelMemberCountsFromAPI(model_ob, channel_member_counts.last_fetched_ts || 0).then(function(counts) {
          channel_member_counts.counts = counts;
          delete channel_member_counts.promise;
          if (channel_member_counts.should_refetch) {
            TS.membership.getMembershipCounts(model_ob);
          }
          channel_member_counts.last_fetched_ts = Date.now();
          return null;
        });
      }
      return channel_member_counts;
    }
  });
  var _channel_member_counts_info = {};
  var _channel_known_member_statuses = {};
  var _membership_counts_api_promises = {};
  var _isChannelMembershipKnownForUser = function(model_ob_id, user_id) {
    if (!_channel_known_member_statuses[model_ob_id]) return false;
    return _.includes(_channel_known_member_statuses[model_ob_id].known_members, user_id) || _.includes(_channel_known_member_statuses[model_ob_id].known_non_members, user_id);
  };
  var _getChannelMembershipForUser = function(model_ob_id, user_id) {
    if (_channel_known_member_statuses[model_ob_id] && _.includes(_channel_known_member_statuses[model_ob_id].known_members, user_id)) {
      return true;
    } else if (_channel_known_member_statuses[model_ob_id] && _.includes(_channel_known_member_statuses[model_ob_id].known_non_members, user_id)) {
      return false;
    }
    throw new Error("Channel membership not known for the given user; this is a programming error");
  };
  var _setChannelKnownMembership = function(model_ob_id, user_id, is_member) {
    if (!TS.membership.lazyLoadChannelMembership()) return;
    if (!_.isString(model_ob_id)) throw new Error("model_ob_id should be a string");
    if (!_.isString(user_id)) throw new Error("user_id should be a string");
    if (!_.isBoolean(is_member)) throw new Error("is_member should be a boolean");
    if (!_channel_known_member_statuses[model_ob_id]) {
      _channel_known_member_statuses[model_ob_id] = {
        known_members: [],
        known_non_members: []
      };
    }
    if (_isChannelMembershipKnownForUser(model_ob_id, user_id) && _getChannelMembershipForUser(model_ob_id, user_id) == is_member) {
      return false;
    }
    TS.log(1990, "Noting " + user_id + " (" + _.get(TS.members.getMemberById(user_id), "name", "(member not loaded)") + ") " + (is_member ? "is" : "is NOT") + " a member of " + model_ob_id);
    if (is_member) {
      _channel_known_member_statuses[model_ob_id].known_members.push(user_id);
      _.pull(_channel_known_member_statuses[model_ob_id].known_non_members, user_id);
    } else {
      _channel_known_member_statuses[model_ob_id].known_non_members.push(user_id);
      _.pull(_channel_known_member_statuses[model_ob_id].known_members, user_id);
    }
    return true;
  };
  var _getUsersWithChannelMembershipUnknown = function(channel_id, user_ids) {
    if (!_.isString(channel_id)) throw new Error("Expected channel_id to be a string");
    if (!_.isArray(user_ids)) throw new Error("Expected user_ids to be an array");
    if (user_ids.length > 0 && !_.isString(user_ids[0])) throw new Error("Expected user_ids to be an array of strings");
    if (!TS.membership.lazyLoadChannelMembership()) return [];
    if (channel_id[0] === "D") {
      return [];
    }
    var user_ids_without_known_membership = user_ids.filter(function(user_id) {
      return !_isChannelMembershipKnownForUser(channel_id, user_id);
    });
    return user_ids_without_known_membership;
  };
  var _promiseToGetChannelMemberCountsFromAPI = function(model_ob, last_fetched_ts) {
    if (!model_ob) {
      TS.warn("_promiseToGetChannelMemberCountsFromAPI needs a model_ob!");
      return;
    }
    var MIN_CHANNEL_MEMBER_COUNT_FETCH_INTERVAL_MS = 1e4;
    var time_since_last_fetch = Date.now() - last_fetched_ts;
    var rate_limit_p = _membership_counts_api_promises[model_ob.id];
    if (rate_limit_p) {
      return rate_limit_p;
    }
    if (time_since_last_fetch < MIN_CHANNEL_MEMBER_COUNT_FETCH_INTERVAL_MS) {
      rate_limit_p = new Promise(function(resolve) {
        TS.log(1989, "Channel member counts (" + model_ob.id + "): it’s only been " + time_since_last_fetch + "ms since last fetch; waiting " + (MIN_CHANNEL_MEMBER_COUNT_FETCH_INTERVAL_MS - time_since_last_fetch) + " ms before fetching");
        setTimeout(resolve, MIN_CHANNEL_MEMBER_COUNT_FETCH_INTERVAL_MS - time_since_last_fetch);
      });
    } else {
      rate_limit_p = Promise.resolve();
    }
    var api_endpoint = model_ob.is_group ? "groups.info" : "channels.info";
    _membership_counts_api_promises[model_ob.id] = rate_limit_p.then(function() {
      TS.log(1989, "Channel member counts (" + model_ob.id + "): fetching counts from API");
      if (TS.lazyLoadMembersAndBots()) {
        return TS.flannel.fetchMembershipCountsForChannel(model_ob.id).then(function(counts) {
          TS.log(1989, "Channel member counts from flannel (" + model_ob.id + "): " + JSON.stringify(counts));
          return {
            member_count: counts.members,
            restricted_member_count: counts.guests,
            teams_member_count: counts.external_teams
          };
        }).finally(function() {
          _membership_counts_api_promises[model_ob.id] = null;
        });
      }
      return TS.api.call(api_endpoint, {
        channel: model_ob.id,
        no_members: api_endpoint === "channels.info",
        display_counts: true
      }).then(function(resp) {
        var counts;
        if (model_ob.is_group) {
          counts = resp.data.group.display_counts;
        } else {
          counts = resp.data.channel.display_counts;
        }
        TS.log(1989, "Channel member counts (" + model_ob.id + "): " + JSON.stringify(counts));
        return {
          member_count: counts.display_counts,
          restricted_member_count: counts.guest_counts
        };
      }).finally(function() {
        _membership_counts_api_promises[model_ob.id] = null;
      });
    });
    return _membership_counts_api_promises[model_ob.id];
  };
  var _maybeRefetchChannelMembersInfoAfterMembershipChange = function(model_ob, member_count_delta, changed_member_is_restricted) {
    if (!TS.lazyLoadMembersAndBots()) return;
    var channel_member_counts = _channel_member_counts_info[model_ob.id];
    if (!channel_member_counts) return;
    channel_member_counts.should_refetch = true;
    if (channel_member_counts.counts) {
      channel_member_counts.counts.member_count += member_count_delta;
      if (changed_member_is_restricted) channel_member_counts.counts.restricted_count += member_count_delta;
    }
  };
  var _modelObMemberAdded = function(changed_model_ob, member) {
    var member_count_delta = 1;
    _maybeRefetchChannelMembersInfoAfterMembershipChange(changed_model_ob, member_count_delta, member.is_restricted);
    if (TS.membership.lazyLoadChannelMembership()) {
      _setChannelKnownMembership(changed_model_ob.id, member.id, true);
    }
  };
  var _modelObMemberRemoved = function(changed_model_ob, member) {
    var member_count_delta = -1;
    _maybeRefetchChannelMembersInfoAfterMembershipChange(changed_model_ob, member_count_delta, member.is_restricted);
    if (TS.membership.lazyLoadChannelMembership()) {
      _setChannelKnownMembership(changed_model_ob.id, member.id, false);
    }
  };
  var _prev_active_model_ob_id;
  var _modelObSwitched = function() {
    if (_prev_active_model_ob_id) {
      var last_model_ob = TS.shared.getModelObById(_prev_active_model_ob_id);
      if (last_model_ob && last_model_ob.is_channel && !last_model_ob.is_member) {
        TS.log(1989, "Channel member counts (" + last_model_ob.id + "): removing local counts because we switched away and we are not a member");
        delete _channel_member_counts_info[last_model_ob.id];
      }
    }
    _prev_active_model_ob_id = TS.shared.getActiveModelOb().id;
  };
  var _modelObJoined = function(model_ob) {
    if (!TS.lazyLoadMembersAndBots()) return;
    _modelObMemberAdded(model_ob, TS.model.user);
  };
  var _modelObLeft = function(model_ob) {
    if (!TS.lazyLoadMembersAndBots()) return;
    TS.log(1989, "Channel member counts (" + model_ob.id + "): removing local counts because we left the channel");
    delete _channel_member_counts_info[model_ob.id];
    delete _channel_known_member_statuses[model_ob.id];
  };
  var _maybeInvalidateLocalCache = function(last_connect_was_fast) {
    if (last_connect_was_fast || TS.ms.num_times_connected === 0) return;
    var model_ob = TS.shared.getActiveModelOb();
    var current_channel_member_counts;
    if (model_ob && model_ob.id) {
      current_channel_member_counts = _channel_member_counts_info[model_ob.id] || {};
      current_channel_member_counts.should_refetch = true;
    }
    _channel_member_counts_info = {};
    _channel_known_member_statuses = {};
    _membership_counts_api_promises = {};
    if (model_ob && model_ob.id) {
      _channel_member_counts_info[model_ob.id] = current_channel_member_counts;
    }
    TS.membership.membership_counts_need_refetch_sig.dispatch();
  };
  var _markMembershipCountsAsStale = function() {
    _.forEach(_channel_member_counts_info, function(counts_info) {
      counts_info.should_refetch = true;
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("channels.read_only", {
    list_updated_sig: new signals.Signal,
    updateList: function(channel_ids) {
      if (!channel_ids || !_.isArray(channel_ids)) return;
      var new_read_only_channels = _.uniq(channel_ids);
      var new_channels = _.difference(new_read_only_channels, TS.model.read_only_channels);
      var old_channels = _.difference(TS.model.read_only_channels, new_read_only_channels);
      old_channels.forEach(function(channel_id) {
        var channel = TS.shared.getModelObById(channel_id);
        if (channel) channel.is_read_only = false;
      });
      new_channels.forEach(function(channel_id) {
        var channel = TS.shared.getModelObById(channel_id);
        if (channel) channel.is_read_only = true;
      });
      TS.model.read_only_channels = new_read_only_channels;
      TS.channels.read_only.list_updated_sig.dispatch();
    },
    addChannelToList: function(channel_id) {
      TS.model.read_only_channels = _.uniq(_.concat(TS.model.read_only_channels, channel_id));
      TS.channels.read_only.list_updated_sig.dispatch();
    },
    removeChannelFromList: function(channel_id) {
      TS.model.read_only_channels = TS.model.read_only_channels.filter(function(id) {
        return id !== channel_id;
      });
      TS.channels.read_only.list_updated_sig.dispatch();
    },
    isReadOnly: function(channel_id) {
      if (TS.boot_data.page_needs_enterprise) {
        if (TS.model.user.enterprise_user && TS.model.user.enterprise_user.is_owner) return false;
      } else if (TS.model.user.owner) {
        return false;
      }
      var model_ob = TS.shared.getModelObById(channel_id);
      if (!model_ob) return false;
      if (model_ob.is_im || model_ob.is_mpim) return false;
      if (!_.isUndefined(model_ob.is_read_only)) return model_ob.is_read_only;
      return TS.model.read_only_channels.indexOf(channel_id) > -1;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("channels.read_only.threads", {
    list_updated_sig: new signals.Signal,
    updateList: function(channel_ids) {
      if (!channel_ids || !_.isArray(channel_ids)) return;
      var new_threadable_channels = _.uniq(channel_ids);
      var new_channels = _.difference(new_threadable_channels, TS.model.threadable_channels);
      var old_channels = _.difference(TS.model.threadable_channels, new_threadable_channels);
      old_channels.forEach(function(channel_id) {
        var channel = TS.shared.getModelObById(channel_id);
        if (channel && channel.is_read_only) channel.can_thread = false;
      });
      new_channels.forEach(function(channel_id) {
        var channel = TS.shared.getModelObById(channel_id);
        if (channel && channel.is_read_only) channel.can_thread = true;
      });
      TS.model.threadable_channels = new_threadable_channels;
      TS.channels.read_only.threads.list_updated_sig.dispatch();
    },
    addChannelToList: function(channel_id) {
      TS.model.threadable_channels = _.uniq(_.concat(TS.model.threadable_channels, channel_id));
      TS.channels.read_only.threads.list_updated_sig.dispatch();
    },
    removeChannelFromList: function(channel_id) {
      TS.model.threadable_channels = TS.model.threadable_channels.filter(function(id) {
        return id !== channel_id;
      });
      TS.channels.read_only.threads.list_updated_sig.dispatch();
    },
    canThread: function(channel_id) {
      if (TS.boot_data.page_needs_enterprise) {
        if (TS.model.user.enterprise_user && TS.model.user.enterprise_user.is_owner) return true;
      } else if (TS.model.user.owner) {
        return true;
      }
      var model_ob = TS.shared.getModelObById(channel_id);
      if (!model_ob) return false;
      if (model_ob.is_im || model_ob.is_mpim) return true;
      if (!model_ob.is_shared) return true;
      if (!TS.channels.read_only.isReadOnly(channel_id)) return true;
      if (!_.isUndefined(model_ob.can_thread)) return model_ob.can_thread;
      return TS.model.threadable_channels.indexOf(channel_id) > -1;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("channels.ui", {
    onStart: function() {},
    showDataRetentionDialog: function(channel_id, handler, retention_type, retention_duration) {
      var load_retention_data = !retention_type;
      var model_ob = TS.shared.getModelObById(channel_id);
      if (!model_ob) {
        TS.error("unknown channel_id passed to data retention dialog:" + channel_id);
        return;
      }
      var channel_name;
      var model_type;
      if (model_ob.is_im || model_ob.is_mpim) {
        model_type = "conversation";
        channel_name = "this conversation";
      } else if (model_ob.is_group || model_ob.is_private) {
        model_type = "channel";
        channel_name = TS.utility.htmlEntities(model_ob.name);
      } else {
        model_type = "channel";
        channel_name = "#" + TS.utility.htmlEntities(model_ob.name);
      }
      var team_type = TS.model.team.prefs.retention_type;
      var team_duration = TS.model.team.prefs.retention_duration;
      if (model_ob.is_im || model_ob.is_mpim) {
        team_type = TS.model.team.prefs.dm_retention_type;
        team_duration = TS.model.team.prefs.dm_retention_duration;
      } else if (model_ob.is_group || model_ob.is_private) {
        team_type = TS.model.team.prefs.group_retention_type;
        team_duration = TS.model.team.prefs.group_retention_duration;
      }
      var modal_body = _retentionDialogLoadingHtml();
      if (!load_retention_data) {
        modal_body = TS.templates.channel_data_retention_dialog({
          model_type: model_type,
          retention_type: retention_type,
          retention_duration: retention_duration,
          team_type: team_type,
          team_duration: team_duration
        });
      }
      TS.generic_dialog.start({
        title: TS.i18n.t("Edit retention policy for {channel_name}", "channels")({
          channel_name: channel_name
        }),
        body: modal_body,
        go_button_text: TS.i18n.t("Save settings", "channels")(),
        enter_always_gos: true,
        onGo: function() {
          var type = $("select[name=retention_type]").val();
          var duration = $("#retention_duration").val();
          if (type === null) return;
          if (duration === null) return;
          var controller = TS.shared.getControllerForModelOb(model_ob);
          if (_.isFunction(controller.setDataRetention)) controller.setDataRetention(channel_id, type, duration, handler);
        },
        onShow: load_retention_data ? null : _onShowDataRetentionDialog
      });
      if (load_retention_data) {
        if (model_ob.is_im) {
          TS.ims.getDataRetention(channel_id, _onImGetRetention);
        } else if (model_ob.is_mpim) {
          TS.mpims.getDataRetention(channel_id, _onImGetRetention);
        } else if (model_ob.is_group) {
          TS.groups.getDataRetention(channel_id, _onGroupsGetRetention);
        } else {
          TS.channels.getDataRetention(channel_id, _onChannelsGetRetention);
        }
      }
    },
    showArchiveChannelDialog: function(model_ob) {
      TS.generic_dialog.start({
        title: TS.i18n.t("Archive #{channel_name}", "channels")({
          channel_name: model_ob.name
        }),
        body: TS.templates.channel_option_archive_channel({
          name: model_ob.name
        }),
        go_button_text: TS.i18n.t("Yes, archive the channel", "channels")(),
        onGo: function() {
          TS.api.call("channels.archive", {
            channel: model_ob.id
          }, function(ok, data) {
            if (ok) {
              if (TS.web) {
                $("p.alert").addClass("hidden");
                $("#archive_success").removeClass("hidden");
                $("#archive_btn").addClass("hidden");
                $("#unarchive_btn").removeClass("hidden");
              }
              return;
            }
            var err_str = TS.i18n.t("Archiving failed with error: {error}", "channels")({
              error: data.error
            });
            if (data.error === "last_ra_channel") {
              if (TS.model.user.is_admin) {
                err_str = TS.i18n.t("Sorry, you can‘t archive this channel because it is the only channel one of the guest account members belongs to. If you first disable the guest account, you will then be able to archive the channel.", "channels")();
              } else {
                err_str = TS.i18n.t("Sorry, you can‘t archive this channel because it is the only channel one of the guest account members belongs to.", "channels")();
              }
            } else if (data.error === "restricted_action") {
              err_str = TS.i18n.t("<p>You don‘t have permission to archive channels.</p><p>Talk to your Team Owner.</p>", "channels")();
            } else if (data.error === "already_archived") {
              err_str = TS.i18n.t("This channel was already archived.", "channels")();
            } else if (data.error === "cant_archive_general") {
              err_str = TS.i18n.t("This channel cannot be archived.", "channels")();
            }
            setTimeout(TS.generic_dialog.alert, 500, err_str);
          });
        }
      });
    },
    showArchiveGroupDialog: function(model_ob, and_leave) {
      var title = TS.i18n.t("{leave, select, true{Leave and archive}other{Archive}} {prefix}{name}", "channels")({
        leave: and_leave,
        prefix: TS.model.group_prefix,
        name: model_ob.name
      });
      var go_button_text = TS.i18n.t("{leave, select, true{Yes, leave & archive the channel}other{Yes, archive the channel}}", "channel")({
        leave: and_leave
      });
      TS.generic_dialog.start({
        title: title,
        body: TS.templates.channel_option_archive_group({
          name: model_ob.name,
          group_prefix: TS.model.group_prefix
        }),
        go_button_text: go_button_text,
        onGo: function() {
          TS.api.call("groups.archive", {
            channel: model_ob.id
          }, function(ok, data) {
            if (ok) {
              if (and_leave && TS.client) {
                TS.shared.closeArchivedChannel(model_ob.id);
              }
              if (TS.web) {
                $("p.alert").addClass("hidden");
                $("#archive_success").removeClass("hidden");
                $("#archive_btn").addClass("hidden");
                $("#unarchive_btn").removeClass("hidden");
              }
              return;
            }
            var err_str = TS.i18n.t("Archiving failed with error: {error}", "channels")({
              error: data.error
            });
            if (data.error === "last_ra_channel") {
              if (TS.model.user.is_admin) {
                err_str = TS.i18n.t("Sorry, you can’t archive this channel because it is the only channel one of the guest account members belongs to. If you first disable the guest account, you will then be able to archive the channel.", "channels")();
              } else {
                err_str = TS.i18n.t("Sorry, you can’t archive this channel because it is the only channel one of the guest account members belongs to.", "channels")();
              }
            } else if (data.error === "already_archived") {
              err_str = TS.i18n.t("This channel was already archived.", "channels")();
            } else if (data.error === "restricted_action") {
              err_str = TS.i18n.t("<p>You don‘t have permission to archive private channels.</p><p>Talk to your Team Owner.</p>", "channels")();
            }
            setTimeout(TS.generic_dialog.alert, 500, err_str);
          });
        }
      });
    },
    channelCreateDialogShowNameTakenAlert: function(div) {
      div.find(".modal_input_note").addClass("hidden");
      div.find(".name_taken_warning").removeClass("hidden");
      $("#channel_create_title").select();
    },
    channelCreateDialogShowDisallowedCharsAlert: function(div) {
      div.find(".modal_input_note").addClass("hidden");
      div.find(".invalid_chars_warning").removeClass("hidden");
      $("#channel_create_title").select();
    },
    channelCreateDialogShowSinglePunctuationAlert: function($div) {
      $div.find(".modal_input_note").addClass("hidden");
      $div.find(".single_punctuation_warning").removeClass("hidden");
      $("#channel_create_title").select();
    },
    channelCreateDialogShowOtherErrorAlert: function($div, text) {
      if (!text) text = TS.i18n.t("Sorry! Something went wrong.", "channels")();
      $div.find(".modal_input_note").addClass("hidden");
      $div.find(".other_error").removeClass("hidden").find(".error_message").text(text);
    },
    channelCreateDialogCleanName: function($div) {
      var title = $div.find(".title_input").val();
      var clean_title = TS.utility.cleanChannelName(title);
      while (title.substr(0, 1) === "#") title = title.substr(1);
      if (clean_title != title) {
        $div.find(".title_input").val(clean_title);
        TS.channels.ui.channelCreateDialogShowDisallowedCharsAlert($div);
        return false;
      }
      return true;
    },
    channelCreateDialogValidateInput: function($div) {
      var title = $div.find(".title_input").val();
      var clean_title = TS.utility.cleanChannelName(title);
      if (!TS.channels.ui.channelCreateDialogCleanName($div)) {
        return false;
      }
      if (clean_title === "_" || clean_title === "-") {
        TS.channels.ui.channelCreateDialogShowSinglePunctuationAlert($div);
        return false;
      }
      if (!title) {
        $("#channel_create_title").select();
        return false;
      }
      if (TS.channels.getChannelByName(title) || TS.groups.getGroupByName(title) || TS.members.getMemberByName(title)) {
        TS.channels.ui.channelCreateDialogShowNameTakenAlert($div);
        return false;
      }
      return true;
    }
  });
  var _onChannelsGetRetention = function(ok, data) {
    if (ok) {
      var type = data.retention.retention_type;
      var duration = data.retention.retention_duration;
      _replaceDataRetentionLoadingAnimation("channel", type, duration);
    } else {
      _replaceDataRetentionLoadingAnimationWithError("channel", data);
    }
  };
  var _onGroupsGetRetention = function(ok, data) {
    if (ok) {
      var type = data.retention.retention_type;
      var duration = data.retention.retention_duration;
      _replaceDataRetentionLoadingAnimation("group", type, duration);
    } else {
      _replaceDataRetentionLoadingAnimationWithError("group", data);
    }
  };
  var _onImGetRetention = function(ok, data) {
    if (ok) {
      var type = data.retention.retention_type;
      var duration = data.retention.retention_duration;
      _replaceDataRetentionLoadingAnimation("conversation", type, duration);
    } else {
      _replaceDataRetentionLoadingAnimationWithError("conversation", data);
    }
  };
  var _replaceDataRetentionLoadingAnimation = function(model_type, type, duration) {
    var anim = $("#generic_dialog .loading_hash_animation");
    var team_type = TS.model.team.prefs.retention_type;
    var team_duration = TS.model.team.prefs.retention_duration;
    if (model_type === "group") {
      team_type = TS.model.team.prefs.group_retention_type;
      team_duration = TS.model.team.prefs.group_retention_duration;
    } else if (model_type === "conversation") {
      team_type = TS.model.team.prefs.dm_retention_type;
      team_duration = TS.model.team.prefs.dm_retention_duration;
    }
    if (model_type === "group") {
      model_type = "channel";
    }
    anim.replaceWith(TS.templates.channel_data_retention_dialog({
      model_type: model_type,
      retention_type: type,
      retention_duration: duration,
      team_type: team_type,
      team_duration: team_duration
    }));
    _onShowDataRetentionDialog();
  };
  var _replaceDataRetentionLoadingAnimationWithError = function(model_type, data) {
    var anim = $("#generic_dialog .loading_hash_animation");
    if (data.error === "no_perms" || data.error === "is_archived" || data.error === "not_paid") {
      if (model_type === "group") {
        model_type = "channel";
      }
      anim.replaceWith('<p class="no_bottom_margin">' + TS.i18n.t("Sorry! You can‘t change the retention duration for this {model_type, select, conversation {conversation} other {channel}}.", "channels")({
        model_type: model_type
      }) + "</p>");
    } else {
      anim.replaceWith('<p class="no_bottom_margin">' + TS.i18n.t("Oops! Something went wrong. Please try again.", "channels")() + "</p>");
    }
  };
  var _onShowDataRetentionDialog = function() {
    $("select[name=retention_type]").change(function() {
      if (this.value != 1) {
        $("#team_retention_pref").removeClass("hidden");
        $("#retention_duration_container, #retention_duration_warning").addClass("hidden");
      } else {
        $("#team_retention_pref").addClass("hidden");
        $("#retention_duration_container, #retention_duration_warning").removeClass("hidden");
        if ($("#retention_duration").val() === 0) {
          $("#retention_duration").val("");
        }
        $("#retention_duration").focus();
      }
    }).change();
  };
  var _retentionDialogLoadingHtml = function() {
    var url = cdn_url + "/9c217/img/loading_hash_animation_@2x.gif";
    var loading_text = TS.i18n.t("Loading...", "channels")();
    return '<div class="loading_hash_animation" style="margin: 2rem;"><img src="' + url + '" alt="' + loading_text + '" /><br />' + loading_text + "</div>";
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.channels", {
    getPermissibleChannelName: function(name) {
      if (name.charAt(0) === "@" || name.charAt(0) === "#" && name.length === 1 || name.indexOf(",") > -1) {
        return null;
      }
      if (!(name && /^.+$/.test(name) && TS.permissions.members.canCreateChannels())) {
        return null;
      }
      var clean_name = TS.utility.cleanChannelName(name.substring(0, 21));
      if (!clean_name || TS.channels.getChannelByName(clean_name) || TS.groups.getGroupByName(clean_name) || TS.members.getMemberByName(clean_name)) return null;
      return clean_name;
    }
  });
})();
TS.registerModule("constants", {
  onStart: _.noop,
  avatar_size_map: {
    20: {
      standard: "image_24",
      retina: "image_48"
    },
    24: {
      standard: "image_24",
      retina: "image_48"
    },
    32: {
      standard: "image_32",
      retina: "image_72"
    },
    36: {
      standard: "image_48",
      retina: "image_72"
    },
    48: {
      standard: "image_48",
      retina: "image_72"
    },
    64: {
      standard: "image_64",
      retina: "image_64"
    },
    72: {
      standard: "image_72",
      retina: "image_192"
    },
    192: {
      standard: "image_192",
      retina: "image_192"
    }
  }
});
(function() {
  "use strict";
  TS.registerModule("groups", {
    switched_sig: new signals.Signal,
    pre_switched_sig: new signals.Signal,
    joined_sig: new signals.Signal,
    member_joined_sig: new signals.Signal,
    left_sig: new signals.Signal,
    member_left_sig: new signals.Signal,
    history_fetched_sig: new signals.Signal,
    history_being_fetched_sig: new signals.Signal,
    message_received_sig: new signals.Signal,
    message_removed_sig: new signals.Signal,
    message_changed_sig: new signals.Signal,
    marked_sig: new signals.Signal,
    unread_changed_sig: new signals.Signal,
    unread_highlight_changed_sig: new signals.Signal,
    topic_changed_sig: new signals.Signal,
    purpose_changed_sig: new signals.Signal,
    deleted_sig: new signals.Signal,
    renamed_sig: new signals.Signal,
    opened_sig: new signals.Signal,
    closed_sig: new signals.Signal,
    archived_sig: new signals.Signal,
    unarchived_sig: new signals.Signal,
    msg_not_sent_sig: new signals.Signal,
    data_retention_changed_sig: new signals.Signal,
    converted_to_shared_sig: new signals.Signal,
    shared_teams_updated_sig: new signals.Signal,
    addMsg: function(id, msg) {
      var group = TS.groups.getGroupById(id);
      if (!group) {
        TS.error('unknown group "' + id + '"');
        return;
      }
      if (!TS.shared.addMsg(group, msg)) return;
      var and_mark = !TS.utility.msgs.isTempMsg(msg);
      TS.groups.calcUnreadCnts(group, and_mark);
      TS.utility.msgs.maybeTruncateMsgs(group);
      TS.groups.message_received_sig.dispatch(group, msg);
      if (!group.is_open) {
        TS.api.call("groups.open", {
          channel: group.id
        }, TS.groups.onOpened);
      }
    },
    calcUnreadCnts: function(group, and_mark) {
      TS.shared.calcUnreadCnts(group, TS.groups, and_mark);
    },
    removeMsg: function(id, msg) {
      var group = TS.groups.getGroupById(id);
      if (!group) {
        TS.error('unknown group "' + id + '"');
        return;
      }
      if (group._archive_msgs) TS.utility.msgs.spliceMsg(group._archive_msgs, msg);
      var msgs = group.msgs;
      TS.utility.msgs.spliceMsg(msgs, msg);
      TS.groups.message_removed_sig.dispatch(group, msg);
      TS.groups.calcUnreadCnts(group, true);
    },
    sendMsg: function(group_id, text, in_reply_to_msg, should_broadcast_reply) {
      return TS.shared.sendMsgGroup(group_id, text, TS.groups, in_reply_to_msg, should_broadcast_reply);
    },
    onSendMsg: function(success, imsg) {
      var group = TS.groups.getGroupById(imsg.SENT_MSG.channel);
      if (!group) {
        TS.error("unknown group? " + imsg.SENT_MSG.channel);
        return;
      }
      TS.shared.onSendMsg(success, imsg, group, TS.groups);
    },
    closeGroup: function(id) {
      var group = TS.groups.getGroupById(id);
      if (!group) {
        return;
      }
      TS.api.call("groups.close", {
        channel: id
      }, TS.groups.onClosed);
    },
    onClosed: function(ok, data, args) {
      if (!ok) {
        return;
      }
      if (data.no_op) {
        var group = TS.groups.getGroupById(args.channel);
        if (group) {
          group.is_open = false;
          if (group.is_archived) group.was_archived_this_session = false;
          if (TS.model.active_group_id === group.id) {
            if (TS.client) TS.client.activeChannelDisplayGoneAway();
          }
          TS.groups.closed_sig.dispatch(group);
        }
      }
    },
    onOpened: function(ok) {
      if (!ok) {}
    },
    displayGroup: function(options) {
      var current_options = _.defaults({}, options, {
        from_history: false,
        replace_history_state: false
      });
      var group_id = current_options.id;
      if (!group_id) {
        TS.error("no group id supplied");
        return;
      }
      var group_path = current_options.path;
      var and_send_txt = current_options.and_send_txt;
      var from_history = current_options.from_history;
      var replace_history_state = current_options.replace_history_state;
      if (TS.isPartiallyBooted() && group_id !== TS.model.initial_cid) {
        TS.warn("Can't switch model objects during incremental boot; this is a programming error");
        TS.sounds.play("beep");
        return;
      }
      TS.metrics.mark("start_channel_change_" + group_id);
      var group = TS.groups.getGroupById(group_id);
      if (!group) {
        TS.error('group "' + group_id + '" unknown');
        return;
      }
      TS.utility.msgs.maybeClearPrevLastRead();
      TS.utility.msgs.maybeClearPrevLastRead(group);
      TS.shared.maybeClearHasAutoScrolled();
      if (group._did_defer_initial_msg_history) {
        TS.shared.checkInitialMsgHistory(group, TS.groups);
      }
      TS.log(999, "displayGroup " + group.id + " from_history:" + from_history + " replace_history_state:" + replace_history_state);
      if (group_id === TS.model.active_group_id && !replace_history_state && !TS.client.activeChannelIsHidden()) {
        TS.warn('group "' + group_id + '" already displayed');
        if (and_send_txt) {
          TS.groups.sendMsg(group_id, $.trim(and_send_txt));
        }
        return;
      }
      var no_history_add = replace_history_state ? false : from_history;
      var path = group_path || "/messages/" + group;
      var switched = TS.client.channelDisplaySwitched({
        id: group_id,
        path: path,
        replace_history_state: replace_history_state,
        no_history_add: no_history_add
      });
      if (switched) {
        TS.groups.pre_switched_sig.dispatch();
        TS.groups.switched_sig.dispatch();
      }
      if (group.is_open) {
        if (and_send_txt) {
          TS.groups.sendMsg(group_id, $.trim(and_send_txt));
        }
        return;
      }
      TS.model.requested_group_opens[group_id] = {
        and_send_txt: and_send_txt
      };
      TS.api.call("groups.open", {
        channel: group.id
      }, TS.groups.onOpened);
    },
    setLastRead: function(group, ts, reason) {
      if (group.last_read === ts) {
        return false;
      }
      if (ts.indexOf(TS.utility.date.fake_ts_unique_padder) > -1) {
        TS.error("bad ts:" + ts);
        return false;
      }
      var log_msg = group.id + ". last_read = " + group.last_read + " -> " + ts + ", reason: " + (reason || "unspecified");
      if (group.last_read > ts) {
        var dont_allow_back_setting = TS.model.last_reads_set_by_client[group.id + "_" + ts];
        delete TS.model.last_reads_set_by_client[group.id + "_" + ts];
        if (dont_allow_back_setting) {
          TS.warn("NOT going back in time on group " + log_msg);
          return;
        }
        if (TS.pri) TS.log(142, "going back in time on group " + log_msg);
        TS.utility.msgs.maybeClearPrevLastRead(group);
        TS.utility.msgs.setPrevLastRead(group, ts);
      } else {
        if (TS.pri) TS.log(142, "TS.groups.setLastRead: " + log_msg);
        TS.utility.msgs.maybeClearPrevLastRead(group);
        TS.utility.msgs.maybeSetPrevLastRead(group, ts);
      }
      group.last_read = ts;
      if (reason) group._marked_reason = reason;
      TS.groups.marked_sig.dispatch(group);
      TS.utility.msgs.maybeClearUsersCountsInfo(group);
      TS.groups.calcUnreadCnts(group);
      return true;
    },
    markMostRecentReadMsg: function(group, reason, allow_latest_via_users_counts) {
      if (!group) {
        TS.error("group unknown");
        return;
      }
      if ((!group.msgs || !group.msgs.length) && !allow_latest_via_users_counts) return;
      var most_recent_valid_ts = TS.utility.msgs.getMostRecentValidTs(group);
      if (!most_recent_valid_ts) {
        if (group.msgs && group.msgs.length || !group._latest_via_users_counts) TS.warn('no valid tses for group "' + group.id + '"???');
        return;
      }
      group.all_read_this_session_once = true;
      TS.groups.markReadMsg(group.id, most_recent_valid_ts, reason);
    },
    markReadMsg: function(group_id, ts, reason) {
      var group = TS.groups.getGroupById(group_id);
      if (!group) {
        TS.error('group "' + group_id + '" unknown');
        return;
      }
      if (group.last_read === ts) {
        return;
      }
      if (TS.groups.setLastRead(group, ts, reason)) {
        group._marked_reason = reason;
        if (TS.useRedux()) {
          var needs_api_marking = true;
          TS.redux.channels.setMarkingState(group.id, needs_api_marking);
        } else {
          group.needs_api_marking = true;
        }
      }
    },
    onMarked: function(ok, data, args) {
      var group = TS.groups.getGroupById(args.channel);
      if (!group) {
        TS.error('error no group "' + args.channel + '"');
        return;
      }
      if (ok || data && data.error === "is_archived") {} else if (TS.useRedux()) {
        var needs_api_marking = true;
        TS.redux.channels.setMarkingState(group.id, needs_api_marking);
      } else {
        group.needs_api_marking = true;
      }
    },
    create: function(name, options) {
      options = options || {};
      if (!name) return;
      TS.model.created_groups[name] = true;
      var and_invite_members_ids_str = options.and_invite_members_idsA ? options.and_invite_members_idsA.join(",") : "";
      return new Promise(function(resolve, reject) {
        TS.api.call("groups.create", {
          name: name,
          _and_invite_members_ids: and_invite_members_ids_str,
          validate: options.validate
        }).then(function(res) {
          resolve(res);
          TS.groups.onCreate(res.data.ok, res.data, res.args);
          return null;
        }).catch(function(res) {
          reject(res);
          return null;
        });
      });
    },
    createChild: function(group_id, and_invite_members_idsA, callback) {
      var group = TS.groups.getGroupById(group_id);
      if (!group) return;
      TS.model.archives_and_recreated_groups[group_id] = true;
      var and_invite_members_ids_str = and_invite_members_idsA ? and_invite_members_idsA.join(",") : "";
      TS.api.call("groups.createChild", {
        channel: group_id,
        _and_invite_members_ids: and_invite_members_ids_str
      }, function(ok, data, args) {
        TS.groups.onCreate(ok, data, args);
        if (callback) {
          callback(ok, data, args);
        }
      });
    },
    onCreate: function(ok, data, args) {
      if (!ok) {
        if (data.error === "name_taken") {} else if (data.error === "restricted_action") {} else {
          TS.error("failed to create group");
        }
        return;
      }
      var group;
      var group_id;
      if (data.group) {
        group = TS.groups.upsertGroup(data.group);
        group_id = data.group.id;
      }
      if (!group_id) {
        TS.error("no group_id?!!");
        return;
      }
      if (!group) {
        TS.error("no group?!!");
        return;
      }
      var and_invite_members_ids = args._and_invite_members_ids ? args._and_invite_members_ids.split(",") : null;
      if (and_invite_members_ids) {
        for (var i = 0; i < and_invite_members_ids.length; i += 1) {
          TS.api.call("groups.invite", {
            channel: group_id,
            user: and_invite_members_ids[i]
          });
        }
      }
      if (TS.client) TS.groups.displayGroup({
        id: group_id
      });
    },
    getLeaveAction: function(group_id) {
      if (TS.model.user.is_ultra_restricted) return "";
      if (!TS.groups.canLeaveGroup(group_id)) return "";
      var group = TS.groups.getGroupById(group_id);
      if (group.is_archived) {
        return "close";
      }
      var active_humans = group.active_members.filter(function(member_id) {
        var member = TS.members.getMemberById(member_id);
        return !member.is_bot;
      });
      if (active_humans.length === 1) {
        return "leave_and_archive";
      }
      return "leave";
    },
    leave: function(id) {
      var group = TS.groups.getGroupById(id);
      if (!group) {
        TS.error("WTF no group:" + id);
        return;
      }
      if (TS.boot_data.feature_default_shared_channels) {
        var can_leave = TS.permissions.channels.canMemberLeaveChannel(group, TS.model.user);
        if (!can_leave) {
          TS.generic_dialog.alert(TS.i18n.t("Sorry, you can’t leave <strong>{group_name}</strong>!", "channels")({
            group_name: TS.model.group_prefix + group.name
          }));
          return;
        }
      }
      var leave_action = TS.groups.getLeaveAction(id);
      if (leave_action === "close") {
        TS.shared.closeArchivedChannel(id);
      } else if (leave_action === "leave_and_archive") {
        TS.channels.ui.showArchiveGroupDialog(group, true);
      } else if (leave_action === "leave") {
        TS.generic_dialog.start({
          title: TS.i18n.t("Leave {group}", "groups")({
            group: TS.model.group_prefix + group.name
          }),
          body: TS.i18n.t("<p>If you leave the private channel, you will no longer be able to see any of its messages. To rejoin the private channel, you will have to be re-invited.</p><p>Are you sure you wish to leave?</p>", "groups")(),
          go_button_text: TS.i18n.t("Yes, leave the private channel", "groups")(),
          onGo: function() {
            TS.api.call("groups.leave", {
              channel: id
            }, TS.groups.onLeave);
          }
        });
      } else {
        TS.generic_dialog.alert(TS.i18n.t("Sorry, you can’t leave <strong>{group}</strong>!", "groups")({
          group: TS.model.group_prefix + group.name
        }));
      }
    },
    onLeave: function(ok, data, args) {
      if (!ok) {
        if (data && data.error === "last_member") {
          TS.shared.closeArchivedChannel(args.channel);
          return;
        }
        TS.error("failed to leave group");
        return;
      }
      var group = TS.groups.getGroupById(args.channel);
      if (!group) return;
      group.msgs.length = 0;
      if (group.is_limited) group.is_limited = false;
    },
    setTopic: function(id, topic) {
      TS.api.call("groups.setTopic", {
        channel: id,
        topic: topic
      }, TS.groups.onSetTopic);
    },
    onSetTopic: function(ok) {
      if (!ok) {
        TS.error("failed to set group topic");
      }
    },
    setPurpose: function(id, purpose) {
      TS.api.call("groups.setPurpose", {
        channel: id,
        purpose: purpose
      }, TS.groups.onSetPurpose);
    },
    onSetPurpose: function(ok, data) {
      if (!ok) {
        TS.error("failed to set group purpose");
        TS.channels.alertSetPurposeError(data.error);
      }
    },
    getGroupsFilteredBy: function(filter) {
      return TS.shared.getEntitiesFilteredBy("groups", filter);
    },
    getGroupById: function(id) {
      if (!id) return null;
      if (TS.useRedux()) {
        return TS.redux.channels.getGroupById(id);
      }
      var groups = TS.model.groups;
      var group = _id_map[id];
      if (group) {
        return group;
      }
      if (!groups) return null;
      for (var i = 0; i < groups.length; i += 1) {
        group = groups[i];
        if (group.id === id) {
          TS.warn(id + " not in _id_map?");
          _id_map[id] = group;
          return group;
        }
      }
      return null;
    },
    getGroupByName: function(name) {
      if (TS.useRedux()) {
        return TS.redux.channels.getGroupByName(name);
      }
      name = _.toLower(name);
      var groups = TS.model.groups;
      var group = _name_map[name];
      if (group) {
        return group;
      }
      if (!groups) return null;
      for (var i = 0; i < groups.length; i += 1) {
        group = groups[i];
        if (group._name_lc === name || TS.model.group_prefix + group._name_lc === name) {
          TS.warn(name + " not in _name_map?");
          _name_map[name] = group;
          _name_map[TS.model.group_prefix + name] = group;
          return group;
        }
      }
      return null;
    },
    upsertGroup: function(group, is_bulk_upsert) {
      return _upsertGroup(group, is_bulk_upsert);
    },
    removeGroup: function(group) {
      if (TS.useRedux()) {
        TS.redux.channels.removeEntity(group);
      } else {
        var groups = TS.model.groups;
        TS.log(4, 'removing group "' + group.id + '"');
        var c;
        for (var i = 0; i < groups.length; i += 1) {
          c = groups[i];
          if (c.id === group.id) {
            groups.splice(i, 1);
            break;
          }
        }
        delete _id_map[group.id];
        delete _name_map[group._name_lc];
        delete _name_map[TS.model.group_prefix + group._name_lc];
      }
      if (TS.client) {
        if (TS.model.active_group_id === group.id) {
          TS.client.activeChannelDisplayGoneAway();
        }
      }
      group.msgs.length = 0;
      if (group.is_limited) group.is_limited = false;
      TS.groups.deleted_sig.dispatch(group);
    },
    groupRenamed: function(group) {
      var existing_group = TS.groups.getGroupById(group.id);
      if (!TS.useRedux()) {
        delete _name_map[existing_group._name_lc];
        delete _name_map[TS.model.group_prefix + existing_group._name_lc];
      }
      var new_group = TS.groups.upsertGroup(group);
      new_group._name_lc = _.toLower(new_group.name);
      if (!TS.useRedux()) {
        _name_map[new_group._name_lc] = new_group;
        _name_map[TS.model.group_prefix + new_group._name_lc] = new_group;
      }
      TS.groups.renamed_sig.dispatch(new_group);
    },
    markScrollTop: function(id, scroll_top) {
      var group = TS.groups.getGroupById(id);
      if (!group) return false;
      if (group.scroll_top === scroll_top) {
        return false;
      }
      group.scroll_top = scroll_top;
      return true;
    },
    maybeLoadScrollBackHistory: function(id, force) {
      var group = TS.groups.getGroupById(id);
      if (!group) return false;
      return TS.shared.maybeLoadScrollBackHistory(group, TS.groups, force);
    },
    onHistory: function(ok, data, args) {
      var group = TS.groups.getGroupById(args.channel);
      if (!group) {
        TS.error('error no group "' + args.channel + '"');
        return;
      }
      if (!ok || !data || !data.messages) {
        TS.error("failed to get history for group " + args.channel);
        group.history_is_being_fetched = false;
        group.history_fetch_retries = (group.history_fetch_retries || 0) + 1;
        var min_delay = 2500;
        var max_delay = 5e3;
        var delay = _.random(min_delay, max_delay);
        TS.info("retrying history fetch on group " + group.id + " in " + delay);
        window.setTimeout(function() {
          TS.info("retrying history fetch on group " + group.id + ", attempt #" + (group.history_fetch_retries || "1"));
          TS.groups.fetchHistory(group, args, TS.groups.onHistory);
        }, delay);
        return;
      }
      delete group.history_fetch_retries;
      var fetching_more = TS.shared.onHistory(group, data, args, TS.groups);
      if (!fetching_more) {
        group.history_is_being_fetched = false;
        TS.groups.history_fetched_sig.dispatch(group);
      }
      var and_mark = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(group);
      TS.groups.calcUnreadCnts(group, and_mark);
    },
    fetchHistory: function(group, api_args, handler) {
      if (!group) {
        TS.error('error no group "' + group + '"');
        return;
      }
      TS.shared.maybeClearHasAutoScrolled(group);
      group.history_is_being_fetched = true;
      group.history_fetch_failed = false;
      TS.groups.history_being_fetched_sig.dispatch(group);
      if (group.history_fetch_retries > 5) {
        delete group.history_fetch_retries;
        group.history_is_being_fetched = false;
        group.history_fetch_failed = true;
        if (TS.client) TS.client.msg_pane.updateEndMarker();
        return;
      }
      if (group.is_private && _.startsWith(group.id, "C")) {
        TS.api.call("channels.history", api_args, handler || TS.groups.onHistory);
      } else {
        TS.api.call("groups.history", api_args, handler || TS.groups.onHistory);
      }
    },
    topicChanged: function(group, user_id, ts, topic) {
      if (!group.topic) group.topic = {};
      group.topic.creator = user_id;
      group.topic.last_set = ts;
      group.topic.value = topic;
      TS.groups.topic_changed_sig.dispatch(group, user_id, topic);
    },
    purposeChanged: function(group, user_id, ts, purpose) {
      if (!group.purpose) group.purpose = {};
      group.purpose.creator = user_id;
      group.purpose.last_set = ts;
      group.purpose.value = purpose;
      TS.groups.purpose_changed_sig.dispatch(group, user_id, purpose);
    },
    getUnarchivedClosedGroups: function() {
      var groups = TS.groups.getUnarchivedGroups();
      return _.reject(groups, "is_open");
    },
    getUnarchivedGroups: function() {
      var groups = TS.model.groups;
      return _.reject(groups, "is_archived");
    },
    getActiveMembersNotInThisGroupForInviting: function(id, act_like_an_admin, members_subset) {
      var model_ob = TS.shared.getModelObById(id);
      if (!model_ob) return [];
      return _getActiveMembersForInvitingWorker(act_like_an_admin, model_ob, members_subset);
    },
    getActiveMembersForInviting: function(act_like_an_admin) {
      return _getActiveMembersForInvitingWorker(act_like_an_admin);
    },
    calcActiveMembersForGroup: function(group) {
      group.active_members.length = 0;
      if (!group.members) return;
      var member;
      for (var m = 0; m < group.members.length; m += 1) {
        member = TS.members.getMemberById(group.members[m]);
        if (!member) continue;
        if (member.deleted) continue;
        group.active_members.push(member.id);
      }
    },
    calcActiveMembersForAllGroups: function() {
      var groups = TS.model.groups;
      for (var i = 0; i < groups.length; i += 1) {
        TS.groups.calcActiveMembersForGroup(groups[i]);
      }
    },
    createSuggestedName: function(member_idsA) {
      var name = TS.model.user.name;
      var membersA = [];
      var member;
      var i;
      var max_l = TS.model.channel_name_max_length;
      for (i = 0; i < member_idsA.length; i += 1) {
        member = TS.members.getMemberById(member_idsA[i]);
        if (!member) continue;
        membersA.push(member);
      }
      membersA.sort(function compare(a, b) {
        var a_srt = a._name_lc;
        var b_srt = b._name_lc;
        if (a_srt < b_srt) return -1;
        if (a_srt > b_srt) return 1;
        return 0;
      });
      for (i = 0; i < membersA.length; i += 1) {
        member = membersA[i];
        name += "-" + member.name.split("-")[0];
      }
      if (name.length > max_l) {
        name = name.substr(0, max_l);
        if (name.charAt(name.length - 1) === "-") {
          name = name.substr(0, max_l - 1);
        }
      }
      var name_root = name;
      var suffix = 1;
      var suffix_str;
      while (TS.channels.getChannelByName(name) || TS.groups.getGroupByName(name) || TS.members.getMemberByName(name)) {
        suffix_str = (suffix + 1).toString();
        suffix += 1;
        name = name_root + suffix_str;
        if (name.length > max_l) {
          name = name_root.substr(0, max_l - suffix_str.length) + suffix_str;
        }
      }
      return name;
    },
    kickMember: function(id, member_id) {
      if (!TS.permissions.members.canKickFromGroups()) return;
      var group = TS.groups.getGroupById(id);
      if (!group) return;
      return TS.shared.kickMember(group, member_id);
    },
    canLeaveGroup: function(group_id) {
      if (!TS.model.user.is_restricted) return true;
      if (TS.model.user.is_ultra_restricted) return false;
      if (TS.channels.getChannelsForUser().length) return true;
      var groups = TS.model.groups;
      var group;
      for (var i = 0; i < groups.length; i += 1) {
        group = groups[i];
        if (group.is_archived) continue;
        if (group.id === group_id) continue;
        return true;
      }
      return false;
    },
    setDataRetention: function(group_id, retention_type, retention_duration, handler) {
      var args = {
        channel: group_id,
        retention_type: parseInt($("select[name=retention_type]").val(), 10)
      };
      if (args.retention_type === 1) {
        args.retention_duration = $("#retention_duration").val();
      }
      TS.api.call("groups.setRetention", args, function(ok, data, args) {
        if (handler) {
          handler(ok, data, args);
        }
        if (ok) {
          TS.groups.data_retention_changed_sig.dispatch(args);
        }
      });
    },
    getDataRetention: function(group_id, handler) {
      TS.api.call("groups.getRetention", {
        channel: group_id
      }, handler);
    }
  });
  var _id_map = {};
  var _name_map = {};
  var _getActiveMembersForInvitingWorker = function(act_like_an_admin, group, members_subset) {
    if (TS.lazyLoadMembersAndBots()) {
      throw new Error("_getActiveMembersForInvitingWorker is incomplete when flannel is enabled. It should not be used.");
    }
    var A = [];
    if (TS.model.user.is_ultra_restricted && !act_like_an_admin) return A;
    var members_for_user = members_subset || TS.members.getActiveMembersExceptSelfAndSlackbot();
    var member;
    var membership_status;
    var user_is_definitely_not_member_of_group;
    for (var m = 0; m < members_for_user.length; m += 1) {
      member = members_for_user[m];
      if (member.deleted) continue;
      if (member.is_slackbot) continue;
      if (member.is_self) continue;
      if (member.is_ultra_restricted) continue;
      if (!group) {
        A.push(member);
      } else {
        membership_status = TS.membership.getUserChannelMembershipStatus(member.id, group);
        user_is_definitely_not_member_of_group = membership_status.is_known && !membership_status.is_member;
        if (user_is_definitely_not_member_of_group) {
          if (TS.permissions.channels.canMemberJoinChannel(group, member)) A.push(member);
        }
      }
    }
    return A;
  };
  var _upsertGroup = function(group, is_bulk_upsert) {
    var existing_group = TS.groups.getGroupById(group.id);
    var members;
    delete group.unread_count;
    if (existing_group) {
      if (TS.useRedux()) {
        existing_group = _.assign({}, existing_group);
      }
      TS.log(4, 'updating existing group "' + group.id + '"');
      for (var k in group) {
        if (k === "members") {
          members = group.members;
          existing_group.members.length = 0;
          for (var i = 0; i < members.length; i += 1) {
            existing_group.members.push(members[i]);
          }
        } else if (k === "pinned_items") {
          if (TS.client) {
            TS.pins.upsertPinnedItems(group.pinned_items);
            existing_group.pinned_items = group.pinned_items;
          }
        } else {
          existing_group[k] = group[k];
        }
      }
      _maybeSetSharedTeams(existing_group);
      group = existing_group;
      if (TS.isPartiallyBooted() && group.oldest_msg_ts === null) {
        group.oldest_msg_ts = TS.storage.fetchOldestTs(group.id);
      }
      TS.shared.maybeResetHistoryFetched(group);
      if (TS.client) {
        var should_defer_initial_msg_history = true;
        TS.shared.checkInitialMsgHistory(group, TS.groups, should_defer_initial_msg_history);
      }
      if (TS.useRedux()) {
        if (!is_bulk_upsert) {
          TS.redux.channels.replaceEntity(group);
        }
      }
    } else {
      if (!TS.useRedux()) {
        TS.log(4, 'adding group "' + group.id + '"');
        TS.model.groups.push(group);
      }
      TS.utility.ensureInArray(TS.model.all_group_ids, group.id);
      _processNewGroupForUpserting(group);
      if (TS.useRedux()) {
        if (!is_bulk_upsert) {
          TS.redux.channels.addEntity(group);
        }
      } else {
        _id_map[group.id] = group;
        _name_map[group._name_lc] = group;
        _name_map[TS.model.group_prefix + group._name_lc] = group;
      }
      if (group.pinned_items && TS.client) TS.pins.upsertPinnedItems(group.pinned_items);
    }
    if (TS.client) {
      var and_mark = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(group);
      if (TS.model.active_cid === group.id) {
        TS.groups.calcUnreadCnts(group, and_mark);
      } else if (!existing_group) {
        TS.groups.calcUnreadCnts(group, and_mark);
      }
    }
    TS.groups.calcActiveMembersForGroup(group);
    return group;
  };
  var _maybeSetSharedTeams = function(channel) {
    if (!channel.is_shared) return;
    if (!TS.boot_data.page_needs_enterprise) return;
    if (channel.is_global_shared) {
      if (channel.shares) delete channel.shares;
      if (channel.shared_team_ids) delete channel.shared_team_ids;
      return;
    }
    if (channel.shares) {
      channel.shared_team_ids = _(channel.shared_team_ids || []).concat(_.map(channel.shares, "id")).value();
      if (channel.shares) delete channel.shares;
    }
    channel.shared_team_ids = _(channel.shared_team_ids || []).uniq().value();
  };
  var _processNewGroupForUpserting = function(group) {
    TS.shared.setPriorityForDev(group);
    group.is_group = true;
    group._name_lc = _.toLower(group.name);
    group._show_in_list_even_though_no_unreads = false;
    TS.shared.maybeResetHistoryFetched(group);
    group.active_members = [];
    group.scroll_top = -1;
    group.history_is_being_fetched = false;
    if (!TS.useRedux()) {
      group.needs_api_marking = false;
    }
    group.unread_highlight_cnt = 0;
    group.unread_highlights = [];
    group.unread_cnt = 0;
    group.unreads = [];
    group.oldest_unread_ts = null;
    group.has_fetched_history_after_scrollback = false;
    if (TS.client) {
      if (TS._incremental_boot && group.msgs && group.msgs.length > 0) {
        group.msgs = group.msgs.map(function(msg) {
          return TS.utility.msgs.processImsg(msg, group.id);
        });
        TS.utility.msgs.setMsgs(group, group.msgs);
      } else {
        TS.utility.msgs.setMsgs(group, []);
      }
    } else if (TS.boot_data.msgs) {
      TS.utility.msgs.ingestMessagesFromBootData(group);
    }
    group.oldest_msg_ts = TS.storage.fetchOldestTs(group.id) || null;
    group.last_msg_input = TS.storage.fetchLastMsgInput(group.id) || null;
    if (TS.model.created_groups[group.name]) {
      delete TS.model.created_groups[group.name];
    }
    _maybeSetSharedTeams(group);
  };
})();
(function() {
  "use strict";
  TS.registerModule("files", {
    team_file_added_sig: new signals.Signal,
    team_file_deleted_sig: new signals.Signal,
    team_file_deleted_success_sig: new signals.Signal,
    team_file_changed_sig: new signals.Signal,
    team_file_shared_sig: new signals.Signal,
    team_file_comment_added_sig: new signals.Signal,
    team_file_comment_edited_sig: new signals.Signal,
    team_file_comment_deleted_sig: new signals.Signal,
    file_uploaded_sig: new signals.Signal,
    file_uploading_sig: new signals.Signal,
    file_progress_sig: new signals.Signal,
    file_canceled_sig: new signals.Signal,
    file_queue_emptied_sig: new signals.Signal,
    channel_files_fetched_sig: new signals.Signal,
    user_changed_public_url_sig: new signals.Signal,
    uploadQ: [],
    uploading: false,
    polling_count: 0,
    polling_file_id: null,
    polling_ticket: null,
    polling_tim: null,
    polling_handler: null,
    waiting_for_refresh: {},
    supported_audio_type_re: /^(mp3|wav)$/,
    supported_video_type_re: /^(mp4|mov|webm)$/,
    onStart: function() {
      TS.prefs.team_disable_file_editing_changed_sig.add(TS.files.getFileActions, TS.files.upsertAndSignal);
    },
    isFilePrivate: function(file) {
      return !file.is_public && !file.is_external && !file.is_shared;
    },
    isFileUntitled: function(file) {
      return file.name === "-";
    },
    createPublicURL: function(file, callback) {
      if (TS.model.team.prefs.disallow_public_file_urls) {
        return;
      }
      TS.api.callImmediately("files.sharedPublicURL", {
        file: file.id
      }, function(ok, data, args) {
        if (ok) {
          TS.files.upsertAndSignal({
            id: file.id,
            public_url_shared: true
          });
          TS.files.user_changed_public_url_sig.dispatch(data.file);
        } else if (data.error && data.error === "not_allowed") {
          TS.model.team.prefs.disallow_public_file_urls = true;
          if (TS.boot_data.feature_external_files) {
            TS.generic_dialog.alert(TS.i18n.t("An administator has disabled external file URL creation. You will not be able to create an external URL for this Post.", "files")());
          } else {
            TS.generic_dialog.alert(TS.i18n.t("An administator has disabled public file URL creation. You will not be able to create a public URL for this space.", "files")());
          }
        }
        if (callback && typeof callback === "function") {
          callback(ok, data, args);
        }
      });
    },
    createSpace: function(callback) {
      TS.api.callSynchronously("files.createSpace", {}, function(ok, data) {
        if (ok) {
          var file = TS.files.upsertAndSignal(data.file).file;
          if (TS.web) TS.ssb.upsertFileInSSBParentWin(file);
          callback(file);
        } else {
          TS.generic_dialog.alert('<p class="no_bottom_margin">' + TS.i18n.t("Oops! Something went wrong. Please try again.", "files")() + "</p>");
          callback(null);
        }
      });
    },
    createAndOpenNewSpace: function(optional_callback, open_in_browser) {
      TS.files.createSpace(function(file) {
        if (file) {
          var qs = TS.model.active_cid ? "?origin_channel=" + TS.model.active_cid : "";
          var url = file.permalink + qs;
          if (open_in_browser || !TS.ssb.openNewFileWindow(file, url, qs)) {
            TS.utility.openInNewTab(url, file.id);
          }
        }
        if (typeof optional_callback === "function") {
          optional_callback(file);
        }
      });
    },
    createArugula: function(callback) {
      TS.api.callSynchronously("files.createArugula", {}, function(ok, data) {
        if (ok) {
          var file = TS.files.upsertAndSignal(data.file).file;
          if (TS.web) TS.ssb.upsertFileInSSBParentWin(file);
          callback(file);
        } else {
          TS.generic_dialog.alert('<p class="no_bottom_margin">' + TS.i18n.t("Oops! Something went wrong. Please try again.", "files")() + "</p>");
          callback(null);
        }
      });
    },
    createAndOpenNewArugula: function(optional_callback, open_in_browser) {
      TS.files.createArugula(function(file) {
        if (file) {
          var qs = TS.model.active_cid ? "?origin_channel=" + TS.model.active_cid : "";
          var url = file.permalink + qs;
          if (open_in_browser || !TS.ssb.openNewFileWindow(file, url, qs)) {
            TS.utility.openInNewTab(url, file.id);
          }
        }
        if (typeof optional_callback === "function") {
          optional_callback(file);
        }
      });
    },
    promptForFileUnshare: function(file_id, c_id) {
      var channel = TS.channels.getChannelById(c_id);
      if (!channel) var group = TS.groups.getGroupById(c_id);
      if (!group) group = TS.mpims.getMpimById(c_id);
      if (!group && !channel) return;
      var body = TS.i18n.t("<p>Are you sure you want to un-share this file from the <strong>{channel_name}</strong> {is_private, select, true {private} other {}} channel?</p>			<p>Un-sharing the file will not remove existing share and comment messages, but it will keep any future comments from appearing in the channel.</p>", "files")({
        is_private: !channel,
        channel_name: channel ? "#" + channel.name : group.name
      });
      TS.generic_dialog.start({
        title: TS.i18n.t("Un-share file", "files")(),
        body: body,
        show_cancel_button: true,
        show_go_button: true,
        go_button_text: TS.i18n.t("Yes, unshare this file", "files")(),
        cancel_button_text: TS.i18n.t("Cancel", "files")(),
        onGo: function() {
          TS.files.unshareFile(file_id, c_id);
        }
      });
    },
    shareFile: function(id, channel_id, comment, share_quietly, callback) {
      var share_args = {
        file: id,
        channel: channel_id,
        comment: comment || ""
      };
      share_args.resharing_aware = true;
      if (share_quietly) {
        share_args.share_quietly = true;
      }
      return TS.api.call("files.share", share_args, function(ok, data, args) {
        TS.files.onFileShare(ok, data, args);
        if (callback) callback(ok, data, args);
      });
    },
    onFileShare: function(ok, data, args) {
      if (!ok) {
        return;
      }
      TS.files.fetchFileInfo(args.file, function(id, file) {
        if (TS.web) {
          TS.files.upsertAndSignal(file);
        }
      });
      if (TS.web && TS.web.space) TS.web.space.onFileShare(ok, data, args);
    },
    unshareFile: function(id, channel_id, callback) {
      TS.api.call("files.unshare", {
        file: id,
        channel: channel_id
      }, function(ok, data, args) {
        TS.files.onFileUnShare(ok, data, args);
        if (callback) {
          callback(id, TS.files.getFileById(id));
        }
      });
    },
    fetchFileInfo: function(id, callback) {
      var raw = false;
      return _fetchFileInfoWorker(id, raw, callback);
    },
    fetchFileInfoRaw: function(id, callback) {
      var raw = true;
      return _fetchFileInfoWorker(id, raw, callback);
    },
    onFileUnShare: function(ok, data, args) {
      if (!ok) {
        return;
      }
      TS.files.fetchFileInfo(args.file, function(id, file) {
        if (TS.web) {
          TS.files.upsertAndSignal(file);
        }
      });
    },
    fetchTeamFiles: function(types_str, callback) {
      TS.api.call("files.list", {
        types: types_str,
        count: _files_page_size
      }, function(ok, data, args) {
        if (ok) {
          if (data.files) {
            var file;
            for (var i = 0; i < data.files.length; i += 1) {
              file = data.files[i];
              TS.files.upsertFile(file);
            }
          }
        }
        if (callback) callback(ok, data, args);
      });
    },
    fetchMemberFiles: function(id, types_str, callback) {
      TS.api.call("files.list", {
        user: id,
        types: types_str,
        count: _files_page_size
      }, function(ok, data, args) {
        if (ok) {
          if (data.files) {
            var file;
            for (var i = 0; i < data.files.length; i += 1) {
              file = data.files[i];
              TS.files.upsertFile(file);
            }
          }
        }
        if (callback) callback(ok, data, args);
      });
    },
    fetchChannelFiles: function(id, callback, count, types) {
      var types_str = types && types.length ? types.join(",") : "";
      if (callback) {
        TS.api.call("files.list", {
          channel: id,
          types: types_str,
          count: count
        }, function(ok, data, args) {
          if (ok) {
            TS.files.onChannelFetch(ok, data, args);
          }
          callback(ok, data, args);
        });
      } else {
        TS.api.call("files.list", {
          channel: id,
          types: types_str
        }, TS.files.onChannelFetch);
      }
    },
    fetchMultipleFiles: function(file_ids, callback, no_upsert) {
      return TS.api.call("files.list", {
        files: file_ids.join(",")
      }, function(ok, data, args) {
        if (ok) {
          if (data.files && !no_upsert) {
            var file;
            for (var i = 0; i < data.files.length; i += 1) {
              file = data.files[i];
              TS.files.upsertFile(file);
            }
          }
        }
        if (callback) callback(ok, data, args);
      });
    },
    onChannelFetch: function(ok, data, args) {
      if (!ok) {
        return;
      }
      if (data.files) {
        var file;
        for (var i = 0; i < data.files.length; i += 1) {
          file = data.files[i];
          TS.files.upsertFile(file);
        }
      }
      TS.files.channel_files_fetched_sig.dispatch(args.channel, data.files);
    },
    addComment: function(id, comment, channel_id, callback) {
      var args = {
        file: id,
        comment: comment,
        channel: channel_id || ""
      };
      TS.api.callImmediately("files.comments.add", args, function(ok, data, args) {
        TS.files.onFileComment(ok, data, args);
        if (callback) {
          callback(ok, data, args);
        }
      });
    },
    onFileComment: function(ok, data, args) {
      if (!ok) {
        return;
      }
      var file = TS.files.getFileById(args.file);
      if (!file) {
        TS.error("no file? " + args.file);
        return;
      }
      TS.files.addCommentToFile(data.comment, file);
    },
    getFileById: function(id) {
      return TS.files.getFileByProp("id", id);
    },
    getFileByDownloadUrlPrivate: function(url) {
      return TS.files.getFileByProp("url_private_download", url);
    },
    getFileByProp: function(name, value) {
      if (!name) return null;
      if (!value) return null;
      var files = TS.model.files;
      var file;
      for (var i = 0; i < files.length; i += 1) {
        file = files[i];
        if (file[name] == value) return file;
      }
      return null;
    },
    getFileActions: function(file) {
      if (!file) return;
      var actions = {};
      var file_belongs_to_user = false;
      if (file.user == TS.model.user.id) file_belongs_to_user = true;
      if (file.is_public) {
        actions.share = true;
      } else if (file_belongs_to_user) {
        actions.share = true;
      } else {
        actions.share_private_file = true;
      }
      actions.comment = true;
      if (!file.public_url_shared && file.mode !== "external" && !TS.model.user.is_restricted && !TS.model.team.prefs.disallow_public_file_urls) {
        if (file.is_public) {
          actions.create_public_link = true;
        } else if (file_belongs_to_user) {
          actions.create_public_link = true;
        }
      }
      if (file.public_url_shared && !TS.model.user.is_restricted && (TS.model.user.is_admin || file_belongs_to_user) && !TS.model.team.prefs.disallow_public_file_urls) {
        actions.revoke_public_link = true;
      }
      if (file.mode === "hosted" || file.mode === "snippet") {
        actions.download = true;
      }
      if (file.mimetype && file.mimetype.indexOf("image/") === 0 || file.mode === "external" || file.mode === "snippet" || file.mode === "email") {
        actions.open_original = true;
      }
      if (TS.web) {
        if (file.mode === "post" || file.mode === "snippet" || file.mode === "space" || file.mode === "email" || file.mode === "arugula") {
          actions.print = true;
        }
      }
      if (file.mode === "space" && !(file.user === "USLACKBOT" && file.name === "Getting_Started_with_Posts")) {
        actions.learn_more = true;
      }
      if (file.mode === "space" || file.mode === "arugula") {
        actions.new_window = true;
      }
      if (file.mode === "space" && file.state !== "locked") actions.edit = true;
      if (file_belongs_to_user) {
        if (file.mode === "snippet" || file.mode === "post" || file.mode === "space" || file.mode === "arugula") {
          actions.edit = true;
        }
        if (file.mode === "hosted" || file.mode === "email") {
          actions.edit_title = true;
        }
        actions.delete_file = true;
      }
      if (TS.model.user.is_admin) {
        var file_is_from_other_team;
        if (TS.boot_data.feature_shared_channels_client) {
          file_is_from_other_team = TS.utility.teams.isMemberExternalById(file.user);
        }
        actions.delete_file = !file_is_from_other_team;
      }
      if (TS.clipboard.canWriteText()) {
        actions.copy_file_link = true;
      }
      if (file.mode === "external") {
        if (file_belongs_to_user || TS.model.user.is_admin) {
          actions.refresh = true;
        }
      }
      if (window.Dropbox && Dropbox.isBrowserSupported() && TS.model.prefs.dropbox_enabled) {
        if (file.mode === "hosted") {
          actions.save_to_dropbox = true;
        }
      }
      if (TS.client) {
        var model_ob = TS.shared.getActiveModelOb();
        if (TS.pins.canUserPinHere(model_ob)) {
          if (file.pinned_to && file.pinned_to.indexOf(model_ob.id) !== -1) {
            actions.unpin_file = true;
          } else {
            var can_pin = !!file.is_public;
            if (file.channels) {
              can_pin = can_pin || file.channels.indexOf(model_ob.id) !== -1;
            } else {
              TS.warn("No channels array for file object in getFileActions(): " + file.id);
            }
            if (file.groups) {
              can_pin = can_pin || file.groups.indexOf(model_ob.id) !== -1;
            } else {
              TS.warn("No groups array for file object in getFileActions(): " + file.id);
            }
            if (file.ims) {
              can_pin = can_pin || file.ims.indexOf(model_ob.id) !== -1;
            } else {
              TS.warn("No ims array for file object in getFileActions(): " + file.id);
            }
            if (can_pin) actions.pin_file = true;
          }
        }
      }
      actions.rxn_file = true;
      if (TS.model.team.prefs.disable_file_editing) {
        actions.edit = false;
        actions.edit_title = false;
      }
      if (TS.model.team.prefs.disable_file_deleting) {
        actions.delete_file = false;
      }
      if (file.is_tombstoned) {
        actions.edit = false;
        actions.edit_title = false;
        actions.delete_file = false;
      }
      return actions;
    },
    getFileCommentActions: function(comment, file) {
      if (!comment) return {};
      var actions = {
        can_edit: true,
        can_delete: true
      };
      if (comment.user != TS.model.user.id) {
        actions.can_edit = false;
      } else if (TS.model.team.prefs.msg_edit_window_mins > -1 && (Date.now() - TS.utility.date.toDateObject(comment.timestamp)) / 6e4 > TS.model.team.prefs.msg_edit_window_mins) {
        actions.can_edit = false;
      }
      if (!TS.model.team.prefs.allow_message_deletion) {
        if (!TS.model.user.is_admin) {
          actions.can_delete = false;
        }
      } else if (comment.user != TS.model.user.id) {
        if (!TS.model.user.is_admin) {
          actions.can_delete = false;
        }
      }
      if (TS.client) {
        var model_ob = TS.shared.getActiveModelOb();
        if (TS.pins.canUserPinHere(model_ob)) {
          if (comment.pinned_to && comment.pinned_to.indexOf(model_ob.id) !== -1) {
            actions.can_unpin = true;
          } else {
            var can_pin = !!file.is_public;
            if (file.channels) {
              can_pin = can_pin || file.channels.indexOf(model_ob.id) !== -1;
            } else {
              TS.warn("No channels array for file object in getFileCommentActions(): " + file.id);
            }
            if (file.groups) {
              can_pin = can_pin || file.groups.indexOf(model_ob.id) !== -1;
            } else {
              TS.warn("No groups array for file object in getFileCommentActions(): " + file.id);
            }
            if (file.ims) {
              can_pin = can_pin || file.ims.indexOf(model_ob.id) !== -1;
            } else {
              TS.warn("No ims array for file object in getFileCommentActions(): " + file.id);
            }
            if (can_pin) actions.can_pin = true;
          }
        }
      }
      actions.rxn_file_comment = true;
      return actions;
    },
    getThumbSrcForFile: function(file, options) {
      try {
        file = _ensureFileObject(file);
      } catch (err) {
        return false;
      }
      if (!file.thumb_360 && !file.thumb_360_gif) return false;
      if (!options) options = {};
      if (!options.max_size) options.max_size = 480;
      if (TS.model.prefs.a11y_animations === false && file.filetype === "gif") {
        if (file.deanimate_gif) {
          return file.deanimate_gif;
        }
        if (options.max_size > 360 && file.thumb_480) {
          return file.thumb_480;
        } else if (file.thumb_160) {
          return file.thumb_160;
        }
      }
      if (file.thumb_480_gif || file.thumb_360_gif) {
        if (options.max_size > 360 && file.thumb_480_gif) return file.thumb_480_gif;
        if (file.thumb_360_gif) return file.thumb_360_gif;
      }
      if (options.max_size > 480 && file.thumb_1024) return file.thumb_1024;
      if (options.max_size > 360 && file.thumb_960) return file.thumb_960;
      if (file.thumb_720) return file.thumb_720;
      if (file.thumb_480) return file.thumb_480;
      return file.thumb_360;
    },
    fileIsImage: function(file) {
      try {
        file = _ensureFileObject(file);
      } catch (err) {
        return false;
      }
      var has_thumb = file.thumb_360 || file.thumb_360_gif;
      var has_image_mimetype = file.mimetype && file.mimetype.indexOf("image/") !== -1;
      return has_thumb && has_image_mimetype;
    },
    fileHasRichPreview: function(file) {
      try {
        file = _ensureFileObject(file);
      } catch (err) {
        return false;
      }
      var has_image_mimetype = file.mimetype && file.mimetype.indexOf("image/") !== -1;
      return file.has_rich_preview && !has_image_mimetype;
    },
    fileIsSupportedAudio: function(file) {
      return TS.files.supported_audio_type_re.test(_ensureFileObject(file).filetype);
    },
    fileIsSupportedVideo: function(file) {
      return TS.files.supported_video_type_re.test(_ensureFileObject(file).filetype);
    },
    fileIsHostedSupportedMedia: function(file) {
      try {
        file = _ensureFileObject(file);
      } catch (err) {
        return false;
      }
      var is_supported = TS.files.fileIsSupportedAudio(file) || TS.files.fileIsSupportedVideo(file);
      var is_hosted = !file.is_external || !_.isEmpty(_.get(file, "video.outputs"));
      return is_supported && is_hosted;
    },
    fileIsPDF: function(file) {
      try {
        file = _ensureFileObject(file);
      } catch (err) {
        return false;
      }
      return file.filetype === "pdf";
    },
    getFileTemplateArguments: function(file, image_1x_max_size) {
      var args = {};
      args.current_user_id = TS.model.user.id;
      args.file_partial = "generic";
      if (/(snippet|post|email|arugula)/.test(file.mode)) args.file_partial = file.mode;
      if (/(space)/.test(file.mode)) args.file_partial = "post";
      if (TS.files.fileIsImage(file)) {
        args.file_partial = "image";
        args.image_src = TS.files.getThumbSrcForFile(file, {
          max_size: image_1x_max_size
        });
        args.image_width = image_1x_max_size === 360 ? file.thumb_360_w : file.thumb_480_w || file.thumb_360_w;
        args.image_height = image_1x_max_size === 360 ? file.thumb_360_h : file.thumb_480_h || file.thumb_360_h;
        args.preserve_aspect_ratio = args.image_width > 0 && args.image_height > 0;
        args.preview_actions_class = "";
        if (args.image_width < 170 || args.image_height < 50) {
          args.preview_actions_class += " overflow_preview_actions";
        }
        if (args.image_width < 170) {
          args.preview_actions_class += " overflow_preview_actions_width";
        }
      }
      if (/(post|space|email|arugula|generic)/.test(args.file_partial)) args.title_hider = true;
      if (file.mode === "snippet") args.title_hider = file.title === "Untitled";
      args.filesize = file.size > 2e4 && !/(gdoc|gpres|gsheet|gdraw)/.test(file.filetype);
      if (!/(space|post)/.test(file.filetype)) args.meta_filetype = new Handlebars.SafeString(TS.templates.builders.makeFiletypeHTML(file));
      if (TS.templates.builders.makeExternalFiletypeHTML(file) === args.meta_filetype) args.meta_filetype = false;
      if (TS.files.fileIsHostedSupportedMedia(file)) {
        if (TS.files.fileIsSupportedVideo(file)) {
          args.file_is_video = true;
          var best_output = {
            width: file.width,
            height: file.height,
            source: file.url_private,
            size: file.size
          };
          if (file.video) {
            args.transcoding_status = file.video.status;
            if (file.video.outputs) {
              for (var i = file.video.outputs.length - 1; i >= 0; i -= 1) {
                var output = file.video.outputs[i];
                if (!output.source) continue;
                if (!best_output.width || output.width > best_output.width) best_output = output;
              }
            }
          }
          args.video_height = TS.model.native_video_embed_height;
          args.video_preload = "metadata";
          if (best_output.size <= TS.model.native_media_preload_limit_bytes) args.video_preload = "auto";
          args.best_source = best_output.source;
        }
        if (TS.files.fileIsSupportedAudio(file)) {
          args.file_is_audio = true;
          args.audio_preload = "metadata";
          if (file.size <= TS.model.native_media_preload_limit_bytes) args.audio_preload = "auto";
        }
      }
      return args;
    },
    getFileDetailsMetaTemplateArguments: function(file) {
      var file_actions = TS.files.getFileActions(file);
      var is_post = file.mode === "post";
      var is_post_or_space = file.mode === "space" || file.mode === "post";
      var is_snippet = file.mode === "snippet";
      var is_arugula = file.mode === "arugula";
      var template_args = {
        file: file,
        user: TS.model.user,
        download: file.mode === "hosted",
        edit_link: is_post ? file.edit_link : file.permalink,
        edit: (is_post_or_space || is_snippet) && file.user === TS.model.user.id,
        is_post: is_post,
        is_post_or_space: is_post_or_space,
        is_snippet: is_snippet,
        is_arugula: is_arugula,
        show_open_public_link: !TS.model.team.prefs.disallow_public_file_urls,
        show_revoke_public_link: !TS.model.team.prefs.disallow_public_file_urls && file_actions.revoke_public_link
      };
      if (file.mode === "email") {
        template_args.to_more_count = file.to.length - 1;
        template_args.cc_more_count = file.cc.length - 1;
      }
      if (file && file.id) {
        if (file.mode === "snippet" || file.mode === "post" || file.mode === "space") {
          if (!file.content && !file.content_html && !file.content_highlight_html) {
            TS.files.fetchFileInfo(file.id);
          }
        }
      }
      return template_args;
    },
    createFileCommentsGroup: function(file) {
      var comments_grouped = {};

      function generateCommentsGroupedObj(file, c_id, comment) {
        var model_ob = TS.shared.getModelObById(c_id);
        var display_name = model_ob && TS.shared.getDisplayNameForModelOb(model_ob);
        var share_info_channel = file.share_info && file.share_info[c_id];
        var share_info_timestamp = share_info_channel && share_info_channel.timestamp;
        var share_info_member = TS.members.getMemberById(share_info_channel && share_info_channel.user_id);
        var share_info_name = share_info_member && TS.members.getMemberDisplayName(share_info_member);
        comments_grouped[c_id] = {
          name: display_name,
          first_share: {
            name: share_info_name,
            timestamp: share_info_timestamp
          },
          comments: comment ? [comment] : []
        };
      }
      for (var i = file.comments.length - 1; i >= 0; i -= 1) {
        var comment = file.comments[i];
        if (comment.channel) {
          if (comments_grouped[comment.channel]) {
            comments_grouped[comment.channel].comments.unshift(comment);
          } else {
            generateCommentsGroupedObj(file, comment.channel, comment);
          }
        }
      }
      _.each([file.channels, file.groups, file.ims, file.mpims], function(list) {
        if (list) {
          for (var i = list.length - 1; i >= 0; i -= 1) {
            var c_id = list[i];
            if (!comments_grouped[c_id]) {
              generateCommentsGroupedObj(file, c_id);
            }
          }
        }
      });
      file._comments_grouped = comments_grouped;
    },
    resetFileCommentsGroup: function(file) {
      file._comments_grouped = null;
    },
    sortFiles: function(files) {
      function compare(a, b) {
        if (a.timestamp < b.timestamp) return 1;
        if (a.timestamp > b.timestamp) return -1;
        return 0;
      }
      files.sort(compare);
    },
    getFileCommentById: function(file, comment_id) {
      var comment;
      for (var i = 0; i < file.comments.length; i += 1) {
        comment = file.comments[i];
        if (comment.id == comment_id) return comment;
      }
      return null;
    },
    addCommentToFile: function(comment, file) {
      var exisiting_comment = TS.files.getFileCommentById(file, comment.id);
      if (exisiting_comment) {
        return exisiting_comment;
      }
      comment._rxn_key = TS.rxns.getRxnKey("file_comment", comment.id);
      TS.rxns.upsertRxnsFromDataAndUpdateUI(comment._rxn_key, comment.reactions);
      delete comment.reactions;
      file.comments.push(comment);
      TS.files.sortCommentsOnFile(file);
      TS.files.team_file_comment_added_sig.dispatch(file, comment);
      return comment;
    },
    editCommentOnFile: function(comment, file) {
      var was_comment;
      var good = false;
      var initial_comment_changed = false;
      for (var i = 0; i < file.comments.length; i += 1) {
        was_comment = file.comments[i];
        if (was_comment.id == comment.id) {
          good = true;
          file.comments[i] = comment;
          if (was_comment.is_starred) {
            comment.is_starred = true;
          }
          if (was_comment._rxn_key) {
            comment._rxn_key = was_comment._rxn_key;
          }
          if (was_comment.pinned_to && !comment.pinned_to) {
            comment.pinned_to = was_comment.pinned_to;
          }
          if (file.initial_comment && was_comment.id == file.initial_comment.id) {
            file.initial_comment = comment;
            initial_comment_changed = true;
          }
          break;
        }
      }
      if (!good) {
        return false;
      }
      TS.files.sortCommentsOnFile(file);
      TS.files.team_file_comment_edited_sig.dispatch(file, comment);
      if (initial_comment_changed) TS.files.team_file_changed_sig.dispatch(file);
      return true;
    },
    deleteCommentOnFile: function(comment_id, file) {
      var was_comment;
      var A = [];
      var deleted_comment;
      for (var i = 0; i < file.comments.length; i += 1) {
        was_comment = file.comments[i];
        if (was_comment.id == comment_id) {
          deleted_comment = was_comment;
          if (file.initial_comment && was_comment.id == file.initial_comment.id) {
            file.initial_comment = null;
          }
          continue;
        }
        A.push(was_comment);
      }
      if (A.length == file.comments.length) {
        return;
      }
      file.comments = A;
      TS.files.sortCommentsOnFile(file);
      TS.files.team_file_comment_deleted_sig.dispatch(file, comment_id, deleted_comment);
      TS.files.team_file_changed_sig.dispatch(file);
    },
    sortCommentsOnFile: function(file) {
      function compare(a, b) {
        if (a.timestamp > b.timestamp) return 1;
        if (a.timestamp < b.timestamp) return -1;
        return 0;
      }
      file.comments.sort(compare);
    },
    upsertFile: function(file) {
      if (Object.keys(file).length < 2) {
        TS.error("upserting a bad file object! it has less than 2 properties");
      }
      if (file.mode === "space") {
        try {
          if (file.preview && /^\s*<document>/.test(file.preview)) {
            var $p = $(file.preview);
            if ($p.length) file.preview = $p.html();
            if ($p.length) {
              var $first_fragment = $p.children().eq(0);
              if ($first_fragment.hasClass("list")) {
                $first_fragment.find("li:not(:first)").remove();
              }
              if ($first_fragment.prop("tagName").toLowerCase() === "pre") {
                file.preview_in_list = $first_fragment.length ? '<span class="monospace">' + TS.utility.htmlEntities($first_fragment.text()) + "</span>" : "";
              } else {
                file.preview_in_list = $first_fragment.length ? TS.utility.htmlEntities($first_fragment.text()) : "";
              }
            }
          }
        } catch (err) {
          TS.log(93, "problem with file.preview id:" + file.id);
          if (TS.boot_data.feature_tinyspeck) TS.log(93, "(TS-ONLY log) file.preview: " + file.preview);
        }
        try {
          if (file.content_html) {
            var $c = $(file.content_html);
            if ($c.length) file.content_html = $c.html();
          }
        } catch (err) {
          TS.log(93, "problem with file.content_html id:" + file.id);
          if (TS.boot_data.feature_tinyspeck) TS.log(93, "(TS-ONLY log) file.content_html: " + file.content_html);
        }
      }
      if (file.mode === "post" && file.preview) {
        var preview = file.preview;
        var preview_list = preview.split("\n");
        var preview_list_length = preview_list.length;
        for (var j = 0; j < preview_list_length; j += 1) {
          var preview_line = preview_list[j];
          if (preview_line) {
            file.preview_in_list = preview_line;
            break;
          }
        }
      }
      if (file.mode === "snippet") {
        var content_keys = ["content", "content_highlight_html"];
        var max_length_of_content = 12800;
        _.forEach(content_keys, function(content_key) {
          if (file[content_key] && file[content_key].length > max_length_of_content) {
            file[content_key] = truncate(file[content_key], max_length_of_content);
            file.is_truncated = true;
          }
        });
      }
      var files = TS.model.files;
      var existing_file = TS.files.getFileById(file.id);
      var status = "NOOP";
      var what_changed = [];
      var c_ids_to_save;
      var comment;
      var existing_rxns;
      var i;
      if (existing_file) {
        file._rxn_key = TS.rxns.getRxnKey("file", file.id);
        existing_rxns = TS.rxns.getExistingRxnsByKey(file._rxn_key);
        if (existing_rxns && !file.reactions) {
          TS.warn("file:" + file.id + " has reactions in local model, but we are upserting an object that does NOT have reactions, which seems suspicious");
        } else {
          TS.rxns.upsertRxnsFromDataAndUpdateUI(file._rxn_key, file.reactions);
        }
        delete file.reactions;
        if (file.comments) {
          for (i = 0; i < file.comments.length; i += 1) {
            comment = file.comments[i];
            comment._rxn_key = TS.rxns.getRxnKey("file_comment", comment.id);
            existing_rxns = TS.rxns.getExistingRxnsByKey(comment._rxn_key);
            if (existing_rxns && !comment.reactions) {
              TS.warn("comment:" + file.id + " has reactions in local model, but we are upserting an object that does NOT have reactions, which seems suspicious");
            } else {
              TS.rxns.upsertRxnsFromDataAndUpdateUI(comment._rxn_key, comment.reactions);
            }
            delete comment.reactions;
          }
        }
        if (file.initial_comment) {
          file.initial_comment._rxn_key = TS.rxns.getRxnKey("file_comment", file.initial_comment.id);
          existing_rxns = TS.rxns.getExistingRxnsByKey(file.initial_comment._rxn_key);
          if (existing_rxns && !file.initial_comment.reactions) {
            TS.warn("initial_comment:" + file.id + " has reactions in local model, but we are upserting an object that does NOT have reactions, which seems suspicious");
          } else {
            TS.rxns.upsertRxnsFromDataAndUpdateUI(file.initial_comment._rxn_key, file.initial_comment.reactions);
          }
          delete file.initial_comment.reactions;
        }
        if (file.is_tombstoned !== existing_file.is_tombstoned) {
          for (var key in existing_file) {
            if (key === "is_tombstoned") {
              existing_file[key] = !!file[key];
            } else {
              delete existing_file[key];
            }
          }
        } else if (file.is_tombstoned == existing_file.is_tombstoned && !file.is_tombstoned) {
          delete existing_file.is_tombstoned;
        }
        c_ids_to_save = (existing_file.channels || []).concat(existing_file.ims || []).concat(existing_file.groups || []);
        for (var k in file) {
          if (k === "channels" || k === "ims" || k === "groups" || k === "pinned_to" || k === "to" || k === "from" || k === "cc" || k === "attachments") {
            var changed = false;
            var new_prop_array = _.isArray(file[k]) ? file[k] : [];
            var old_prop_array = _.isArray(existing_file[k]) ? existing_file[k] : [];
            if (k === "to" || k === "from" || k === "cc" || k === "attachments") {
              if (old_prop_array.length != new_prop_array.length) {
                changed = true;
              }
            } else if (old_prop_array.join("") != new_prop_array.join("")) {
              changed = true;
              if (k === "channels" || k === "ims" || k === "groups") {
                c_ids_to_save = c_ids_to_save.concat(file[k] || []);
              }
            }
            if (changed) {
              existing_file[k] = file[k];
              status = "CHANGED";
              what_changed.push(k);
            }
          } else if (k === "preview") {
            if (existing_file[k] !== file[k]) {
              existing_file[k] = file[k];
              if (existing_file.content) delete existing_file.content;
              if (existing_file.content_html) delete existing_file.content_html;
              if (existing_file.content_highlight_html) delete existing_file.content_highlight_html;
              status = "CHANGED";
              what_changed = what_changed.concat([k, "content", "content_html", "content_highlight_html"]);
            }
          } else if (k === "comments") {
            if (file[k] && !TS.utility.areSimpleObjectsEqual(file[k], existing_file[k], "file:" + file.id + " " + file.name)) {
              existing_file[k] = file[k];
              status = "CHANGED";
              what_changed.push(k);
            }
          } else if (k === "content") {
            if (file[k] && existing_file[k] != file[k]) {
              existing_file[k] = file[k];
              status = "CHANGED";
              what_changed.push(k);
            }
          } else if (k === "editor" || k === "state") {
            if (file[k] != existing_file[k]) {
              c_ids_to_save = [];
              what_changed.push(k);
              existing_file[k] = file[k];
              status = "CHANGED";
            }
          } else if (k === "initial_comment") {
            existing_file[k] = file[k];
          } else if (k === "reactions") {
            existing_file[k] = file[k];
          } else if ((k === "channel_map" || k === "group_map" || k === "im_map" || k === "teams" || k === "teams_shared_with" || k === "users") && !TS.utility.isScalar(file[k])) {
            existing_file[k] = file[k];
          } else if (k === "video") {
            if (file[k] && !TS.utility.areSimpleObjectsEqual(file[k], existing_file[k], "file:" + file.id + " " + file.name)) {
              existing_file[k] = file[k];
              status = "CHANGED";
              what_changed.push(k);
            }
          } else if (existing_file[k] != file[k]) {
            if (file[k] && !TS.utility.isScalar(file[k])) {
              existing_file[k] = file[k];
              TS.warn(k + " is not scalar! it needs to be handled by upsertFile specifically to test if it has changed! " + typeof file[k]);
            } else if (typeof file[k] !== "boolean" || !file[k] != !existing_file[k]) {
              what_changed.push(k + " [" + existing_file[k] + "] -> [" + file[k] + "]");
              existing_file[k] = file[k];
              status = "CHANGED";
            }
          }
        }
      } else {
        status = "ADDED";
        file._rxn_key = TS.rxns.getRxnKey("file", file.id);
        TS.rxns.upsertRxnsFromDataAndUpdateUI(file._rxn_key, file.reactions);
        delete file.reactions;
        if (file.comments) {
          for (i = 0; i < file.comments.length; i += 1) {
            comment = file.comments[i];
            comment._rxn_key = TS.rxns.getRxnKey("file_comment", comment.id);
            TS.rxns.upsertRxnsFromDataAndUpdateUI(comment._rxn_key, comment.reactions);
            delete comment.reactions;
          }
          if (file.initial_comment) {
            file.initial_comment._rxn_key = TS.rxns.getRxnKey("file_comment", file.initial_comment.id);
            TS.rxns.upsertRxnsFromDataAndUpdateUI(file.initial_comment._rxn_key, file.initial_comment.reactions);
            delete file.initial_comment.reactions;
          }
        }
        files.push(file);
        var member = TS.members.getMemberById(file.user);
        if (member) {
          member.files.push(file);
          TS.files.sortFiles(member.files);
        } else {
          TS.error("hmmm, file " + file.id + " does not have a known user " + file.user);
        }
        _addFileToInlineImgs(file);
        existing_file = file;
      }
      if (status === "CHANGED") {
        _addFileToInlineImgs(file);
        if (_.includes(what_changed, "comments")) {
          TS.utility.msgs.updateCommentReferences(existing_file);
        }
      }
      if (!existing_file.comments) {
        existing_file.comments = [];
      } else {
        existing_file.comments_count = Math.max(existing_file.comments_count, existing_file.comments.length);
      }
      if (!existing_file.channels) {
        existing_file.channels = [];
      }
      if (!existing_file.ims) {
        existing_file.ims = [];
      }
      if (!existing_file.groups) {
        existing_file.groups = [];
      }
      existing_file.is_shared = existing_file.groups.length > 0 || existing_file.channels.length > 0;
      TS.files.sortFiles(TS.model.files);
      return {
        status: status,
        file: existing_file,
        what_changed: what_changed
      };
    },
    upsertAndSignal: function(file) {
      var upsert = TS.files.upsertFile(file);
      if (upsert.status === "CHANGED") {
        TS.files.team_file_changed_sig.dispatch(upsert.file);
      } else if (upsert.status === "ADDED") {
        TS.files.team_file_added_sig.dispatch(upsert.file);
      }
      return upsert;
    },
    removeFile: function(file_id) {
      TS.log(4, 'removing file "' + file_id + '"');
      var file = TS.files.getFileById(file_id);
      if (file) file.is_deleted = true;
      TS.model.channels.forEach(function(channel) {
        if (file) TS.utility.msgs.removeFileSharesAndMentions(channel, file);
        if (file) TS.utility.msgs.removeFileComments(channel, file);
        TS.utility.msgs.removeFileReferences(channel, file_id);
      });
      TS.model.groups.forEach(function(group) {
        if (file) TS.utility.msgs.removeFileSharesAndMentions(group, file);
        if (file) TS.utility.msgs.removeFileComments(group, file);
        TS.utility.msgs.removeFileReferences(group, file_id);
      });
      TS.model.ims.forEach(function(im) {
        if (file) TS.utility.msgs.removeFileSharesAndMentions(im, file);
        if (file) TS.utility.msgs.removeFileComments(im, file);
        TS.utility.msgs.removeFileReferences(im, file_id);
      });
      TS.model.mpims.forEach(function(mpim) {
        if (file) TS.utility.msgs.removeFileSharesAndMentions(mpim, file);
        if (file) TS.utility.msgs.removeFileComments(mpim, file);
        TS.utility.msgs.removeFileReferences(mpim, file_id);
      });
      if (file) TS.files.team_file_deleted_sig.dispatch(file);
    },
    upload: function(args) {
      if (TS.files.uploading) {
        TS.files.uploadQ.push(args);
      } else {
        TS.files.actuallyUpload(args);
      }
    },
    actuallyUpload: function(args) {
      TS.files.uploading = true;
      args.retry_num = args.retry_num || 0;
      var form_data = new FormData;
      var display_name;
      var cancelable = !!args.file;
      if (args.text) {
        display_name = args.title || args.filetype;
        TS.files.file_uploading_sig.dispatch(display_name, args.retry_num > 0, cancelable);
        form_data.append("content", args.text);
        if (args.filetype) {
          form_data.append("filetype", args.filetype);
        }
        if (args.filename) {
          TS.warn("ignoring filename because it makes no sense for text files");
        }
      } else {
        display_name = args.title || args.filename || args.file && args.file.name || "blob";
        TS.files.file_uploading_sig.dispatch(display_name, args.retry_num > 0, cancelable);
        if (typeof args.file === "string") {
          form_data.append("content64", args.file);
        } else {
          form_data.append("file", args.file);
        }
        if (args.filename) {
          form_data.append("filename", args.filename);
        }
        if (args.filetype) {
          TS.warn("ignoring filetype we send a filename which can intuit it");
        }
      }
      form_data.append("token", TS.model.api_token);
      if (args.channels && args.channels.length) {
        var channels_str = "";
        if (typeof args.channels === "string") {
          channels_str = args.channels;
        } else if (args.channels.join) {
          channels_str = args.channels.join(",");
        }
        form_data.append("channels", channels_str);
      }
      form_data.append("title", args.title);
      if (args.initial_comment) {
        form_data.append("initial_comment", args.initial_comment);
      }
      var api_method = "files.uploadAsync";
      if (args.link) {
        if (args.is_dropbox) api_method = "files.uploadExternal";
        if (args.is_box) api_method = "files.uploadExternal";
        form_data.append("link", args.link);
      }
      var url;
      if (api_method === "files.uploadAsync") {
        url = TS.model.async_api_url + api_method;
      } else {
        url = TS.model.api_url + api_method;
      }
      var errored = false;
      _current_xhr = $.ajax({
        url: url,
        data: form_data,
        dataType: "json",
        cache: false,
        contentType: false,
        processData: false,
        type: "POST",
        xhr: function() {
          var xhr = jQuery.ajaxSettings.xhr();
          if (xhr.upload) {
            xhr.upload.addEventListener("progress", function(evt) {
              if (evt.lengthComputable) {
                var percent_done = parseInt(100 * evt.loaded / evt.total, 10);
                TS.files.file_progress_sig.dispatch(percent_done);
              } else {
                TS.info("Upload length not computable");
              }
            }, false);
          }
          return xhr;
        },
        error: function(data, textStatus, errorThrown) {
          errored = true;
          TS.info("Error: Failed to upload file.");
          TS.info("textStatus:" + textStatus + " errorThrown:" + errorThrown);
          TS.info("data:" + data);
          if (textStatus === "abort") {
            TS.files.file_canceled_sig.dispatch(display_name);
            TS.files.uploadOver(false);
            return;
          }
          if (args.retry_num === 0) {
            args.retry_num += 1;
            TS.files.actuallyUpload(args);
          } else {
            TS.generic_dialog.start({
              title: TS.i18n.t("Upload failed", "files")(),
              body: TS.i18n.t("Hmm, it looks like your file failed to upload. Want to try again?", "files")(),
              go_button_text: TS.i18n.t("Yes, try again", "files")(),
              cancel_button_text: TS.i18n.t("No, cancel", "files")(),
              onGo: function() {
                args.retry_num += 1;
                TS.files.actuallyUpload(args);
              },
              onCancel: function() {
                TS.files.uploadOver(false);
              }
            });
          }
        },
        complete: function(data) {
          if (errored) return;
          data = jQuery.parseJSON(data.responseText);
          if (data && data.ok && data.file) {
            if (api_method === "files.uploadAsync") {
              var pollHandler = function(ok, data, args) {
                if (!TS.files.polling_file_id) return;
                if (ok) {
                  if (data.status === "complete") {
                    var upsert = TS.files.upsertAndSignal(data.file);
                    TS.files.uploadProcessingOver(true, upsert.file.id);
                  } else if (data.status === "failed") {
                    var debug_str = "";
                    if (data.debug && TS.boot_data.feature_tinyspeck) {
                      debug_str = "<br><br>TS only Debugging:<br><br>" + data.debug;
                    }
                    TS.generic_dialog.start({
                      title: TS.i18n.t("Upload failed", "files")(),
                      body: TS.i18n.t("Hmm, it looks like your file failed to upload. Want to try again?", "files")() + debug_str,
                      go_button_text: TS.i18n.t("Yes, try again", "files")(),
                      cancel_button_text: TS.i18n.t("No, cancel", "files")(),
                      onGo: function() {
                        args.retry_num += 1;
                        TS.files.actuallyUpload(args);
                      },
                      onCancel: function() {
                        TS.files.uploadProcessingOver(false, TS.files.polling_file_id);
                      }
                    });
                  } else {
                    TS.files.pollForUploadProcessing();
                  }
                } else {
                  TS.generic_dialog.start({
                    title: TS.i18n.t("Upload failed", "files")(),
                    body: TS.i18n.t("Hmm, it looks like your file failed to upload.", "files")(),
                    show_cancel_button: true
                  });
                  TS.files.uploadProcessingOver(false, TS.files.polling_file_id);
                }
              };
              TS.files.startPollingForUploadProcessing(data.file, data.ticket, pollHandler);
            } else {
              var upsert = TS.files.upsertAndSignal(data.file);
              TS.files.uploadOver(data.ok, upsert.file.id);
            }
          } else {
            TS.info("Error: Failed to upload file.");
            TS.info(data);
            if (data) {
              if (args.retry_num === 0) {
                args.retry_num += 1;
                TS.files.actuallyUpload(args);
              } else if (data.error === "folders_not_supported") {
                TS.generic_dialog.start({
                  title: TS.i18n.t("Folders not supported", "files")(),
                  body: TS.i18n.t("<p>Sorry, <strong>{folder_name}</strong> is a folder, and folder uploads are not supported by Slack.</p>									<p>Try uploading a .zip version of the file instead.</p>", "files")({
                    folder_name: TS.utility.htmlEntities(args.filename)
                  }),
                  show_cancel_button: false,
                  esc_for_ok: true,
                  onGo: function() {
                    TS.generic_dialog.end();
                    TS.files.uploadOver(false);
                  }
                });
              } else if (data.error === "request_timeout") {
                TS.generic_dialog.start({
                  title: TS.i18n.t("File upload timed out", "files")(),
                  body: TS.i18n.t('<p>It looks like you’re on a slow or inconsistent internet connection. You may want to try your file upload again later. Or, try again now and it might work if you cross your fingers!</p>									<p>If you’re still having problems, you can:</p>									<ul><li><a href="/help/test" target="{new_win_name}" class="bold">Run our Self-Help Tests</a></li>									<li><a href="/help/requests/new" target="{new_win_name}" class="bold">Contact our support team</li></ul>', "files")({
                    new_win_name: TS.templates.builders.newWindowName()
                  }),
                  show_cancel_button: false,
                  esc_for_ok: true,
                  onGo: function() {
                    TS.generic_dialog.end();
                    TS.files.uploadOver(false);
                  }
                });
              } else if (data.error === "file_uploads_disabled") {
                TS.generic_dialog.start({
                  title: TS.i18n.t("Upload failed", "files")(),
                  body: TS.i18n.t("At the request of your administrator, file uploads have been disabled on this team.", "files")(),
                  show_cancel_button: false,
                  onGo: function() {
                    TS.files.uploadOver(false);
                  }
                });
              } else if (data.error === "file_uploads_except_images_disabled") {
                TS.generic_dialog.start({
                  title: TS.i18n.t("Upload failed", "files")(),
                  body: TS.i18n.t("At the request of your administrator, only images can be uploaded to this team.", "files")(),
                  show_cancel_button: false,
                  onGo: function() {
                    TS.files.uploadOver(false);
                  }
                });
              } else {
                TS.generic_dialog.start({
                  title: TS.i18n.t("Upload failed", "files")(),
                  body: TS.i18n.t("Hmm, it looks like your file failed to upload. Want to try again?", "files")(),
                  go_button_text: TS.i18n.t("Yes, try again", "files")(),
                  cancel_button_text: TS.i18n.t("No, cancel", "files")(),
                  onGo: function() {
                    args.retry_num += 1;
                    TS.files.actuallyUpload(args);
                  },
                  onCancel: function() {
                    TS.files.uploadOver(false);
                  }
                });
              }
            } else {
              alert("Upload failed.");
              TS.files.uploadOver(false);
            }
          }
        }
      });
    },
    startPollingForUploadProcessing: function(file_id, ticket, pollHandler) {
      TS.files.polling_count = 0;
      TS.files.polling_file_id = file_id;
      TS.files.polling_ticket = ticket;
      TS.files.polling_handler = pollHandler;
      TS.files.pollForUploadProcessing();
    },
    pollForUploadProcessing: function() {
      TS.files.polling_count += 1;
      TS.files.polling_tim = setTimeout(function() {
        if (!TS.files.polling_ticket) return;
        TS.api.callImmediately("files.uploadStatus", {
          ticket: TS.files.polling_ticket
        }, function(ok, data, args) {
          if (!TS.files.polling_ticket) return;
          TS.files.polling_handler(ok, data, args);
        });
      }, TS.files.polling_count * 1e3);
    },
    uploadProcessingOver: function(ok, file_id) {
      if (TS.files.polling_file_id != file_id) {
        return;
      }
      TS.info("TS.files.uploadProcessingOver polling_file_id:" + TS.files.polling_file_id + " polling_ticket:" + TS.files.polling_ticket + " polling_count:" + TS.files.polling_count);
      TS.files.polling_count = 0;
      TS.files.polling_file_id = null;
      TS.files.polling_ticket = null;
      TS.files.polling_handler = null;
      clearTimeout(TS.files.polling_tim);
      TS.files.uploadOver(ok, file_id);
    },
    uploadOver: function(ok, file_id) {
      TS.files.file_uploaded_sig.dispatch(ok, file_id);
      TS.files.uploading = false;
      _current_xhr = null;
      if (TS.files.uploadQ.length) {
        TS.files.actuallyUpload.call(null, TS.files.uploadQ.shift());
      } else {
        TS.files.file_queue_emptied_sig.dispatch();
      }
    },
    cancelCurrentUpload: function() {
      if (_current_xhr) {
        _current_xhr.abort();
      }
    },
    deleteFile: function(id) {
      TS.api.call("files.delete", {
        file: id
      }, TS.files.onFileDelete);
    },
    onFileDelete: function(ok) {
      if (!ok) {}
    },
    endEditFileTitle: function() {
      $("#file_edit_title_container").addClass("hidden");
      $("#file_title_container").removeClass("hidden");
    },
    saveEditFileTitle: function(file_id) {
      var file = TS.files.getFileById(file_id);
      if (!file) return;
      var val = $("#file_edit_title_input").val();
      if (!$.trim(val)) {
        TS.sounds.play("beep");
        return;
      }
      var prev_title = file.title;
      if (prev_title == val) {
        TS.files.endEditFileTitle();
        return;
      }
      TS.api.callImmediately("files.edit", {
        file: file_id,
        title: val
      }, function(ok) {
        if (!ok) {
          TS.files.upsertAndSignal({
            id: file_id,
            title: prev_title
          });
          TS.generic_dialog.alert(TS.i18n.t("Something’s gone wrong, and your change didn’t save. If you see this message more than once, you may want to try restarting Slack.", "files")(), TS.i18n.t("Oh, crumbs!", "files")(), TS.i18n.t("Got it", "files")());
        }
      });
      val = TS.utility.htmlEntities(val);
      TS.files.upsertAndSignal({
        id: file_id,
        title: val
      });
      TS.files.endEditFileTitle();
    },
    editFileTitle: function(file_id) {
      var file = TS.files.getFileById(file_id);
      if (!file) return;
      var title = file.title;
      if (title) {
        title = TS.format.unFormatMsg(title);
      } else {
        title = file.name;
      }
      $("#file_title_container").addClass("hidden");
      $("#file_edit_title_container").removeClass("hidden");
      $("#file_edit_title_input").val(title);
      $("#file_edit_title_input").select();
    },
    openBoxChooser: function() {
      TS.utility.box.unregister(TS.utility.box.SUCCESS_EVENT_TYPE, TS.files.onBoxChooser);
      TS.utility.box.success(TS.files.onBoxChooser);
      TS.utility.box.launchPopup();
    },
    onBoxChooser: function(box_files) {
      var files = new Array(box_files.length);
      for (var i = 0; i < box_files.length; i += 1) {
        var b = box_files[i];
        files[i] = {
          name: b.name,
          link: b.url,
          is_box: true
        };
      }
      TS.ui.upload_dialog.startWithCommentFromChatInput(files);
    },
    openDropboxChooser: function() {
      var linkType = "preview";
      Dropbox.choose({
        success: TS.files.onDropboxChooser,
        linkType: linkType,
        multiselect: true
      });
    },
    onDropboxChooser: function(dropbox_files) {
      var files = [];
      for (var i = 0; i < dropbox_files.length; i += 1) {
        var d = dropbox_files[i];
        files.push({
          name: d.name,
          size: d.bytes,
          link: d.link,
          icon: d.icon,
          is_dropbox: true
        });
      }
      TS.ui.upload_dialog.startWithCommentFromChatInput(files);
    },
    makeFileNameFromFile: function(file) {
      return file.name || TS.i18n.t("Pasted image at {date}", "files")({
        date: TS.utility.date.toFilenameFriendlyDate(Date.now() / 1e3)
      }) + ".png";
    },
    makeFileTitleFromFile: function(file) {
      return file.name || TS.i18n.t("Pasted image at {date}", "files")({
        date: TS.utility.date.toDate(Date.now() / 1e3)
      });
    },
    justUploadTheseFileNow: function(files) {
      var file;
      for (var i = 0; i < files.length; i += 1) {
        file = files[i];
        if (file.size > TS.model.upload_file_size_limit_bytes) {
          continue;
        }
        TS.files.upload({
          file: file,
          filename: TS.files.makeFileNameFromFile(file),
          title: TS.files.makeFileTitleFromFile(file),
          channels: [TS.shared.getActiveModelOb().id],
          initial_comment: ""
        });
      }
    },
    refreshFile: function(id) {
      TS.files.startRefreshingFile(id);
      TS.api.call("files.refresh", {
        file: id
      }, TS.files.onFileRefresh);
    },
    onFileRefresh: function(ok, data, args) {
      var id = args.file;
      if (ok) {
        TS.menu.$menu.find("#refresh_file").find(".item_label").text(TS.i18n.t("File refreshed!", "files")()).end();
      } else if (!ok) {
        TS.files.doneRefreshingFile(id, '<span class="moscow_red">' + TS.i18n.t("Refresh failed.", "files")() + "</span>", 5e3);
        TS.menu.$menu.find("#refresh_file").find(".item_label").text(TS.i18n.t("Refresh failed", "files")()).end();
      }
      if (ok && !data.will_refresh) {
        TS.files.doneRefreshingFile(id, '<span class="moscow_red">' + TS.i18n.t("File refreshed < 1 minute ago.", "files")() + "</span>", 5e3);
      }
      if (TS.web && ok) {
        TS.menu.$menu.find("#refresh_file").find(".item_label").text(TS.i18n.t("Reloading...", "files")());
        TS.reload(false, "TS.files.onFileRefresh");
      }
      if (!ok) {
        if (data.error === "file_deleted") {
          var existing_file = TS.files.getFileById(id);
          if (existing_file) {
            TS.files.removeFile(existing_file.id);
          }
        }
      }
    },
    fileWasMaybeRefreshed: function(file) {
      if (!file) return;
      if (!TS.files.waiting_for_refresh[file.id]) return;
      TS.files.doneRefreshingFile(file.id, '<span class="kelly_green">' + TS.i18n.t("File refreshed!", "files")() + "</span>", 6e4);
    },
    startRefreshingFile: function(id) {
      TS.files.waiting_for_refresh[id] = true;
      $('.file_refresh[data-file-id="' + id + '"]').addClass("hidden");
      $('.file_refresh_status[data-file-id="' + id + '"]').removeClass("hidden");
    },
    doneRefreshingFile: function(id, msg, ms) {
      delete TS.files.waiting_for_refresh[id];
      $('.file_refresh_status[data-file-id="' + id + '"]').html(msg);
      setTimeout(function() {
        $('.file_refresh[data-file-id="' + id + '"]').removeClass("hidden");
        $('.file_refresh_status[data-file-id="' + id + '"]').text(TS.i18n.t("Refreshing file...", "files")()).addClass("hidden");
      }, ms);
    },
    shareOrReshareFile: function(file_id, hide_file_preview, space_has_title, source_model_ob_id, allow_create) {
      var file = TS.files && TS.files.getFileById ? TS.files.getFileById(file_id) : null;
      var can_reshare = false;
      var is_owned_by_other = file.user != TS.model.user.id;
      var is_owned_by_a_user = !file.bot_id;
      if (TS.files.isFilePrivate(file) && is_owned_by_other && is_owned_by_a_user) {
        can_reshare = true;
      }
      if (!file) {
        TS.error("File for reshare doesn't exist: " + file_id);
      } else if (can_reshare) {
        TS.files.reShareConfirmation([file], function() {
          TS.ui.share_dialog.start(file_id, hide_file_preview, space_has_title, source_model_ob_id, null, allow_create);
        });
      } else {
        TS.ui.share_dialog.start(file_id, hide_file_preview, space_has_title, source_model_ob_id, null, allow_create);
      }
    },
    reShareConfirmation: function(files, callback) {
      var file_owners = files.map(function(file) {
        return TS.members.getMemberDisplayNameById(file.user, true);
      });
      file_owners = _.uniq(file_owners);
      var msg_title = TS.i18n.t("You’re about to share {file_count, plural, =1 {a private file} other {private files}}", "files")({
        file_count: files.length
      });
      var msg_body = TS.i18n.t("<p><strong>{user_names}</strong> {file_owners_count, plural, =1 {has} other {have}} privately shared {file_count, plural, =1 {the file <strong>{file_title}</strong>} other {these files}} with you. Are you sure you want to proceed with sharing {file_count, plural, =1 {it} other {them}} somewhere else?</p><p>It’s important to note that any comments on {file_count, plural, =1 {the file <strong>{file_title}</strong>} other {these files}} will also be shared.</p>", "files")({
        user_names: TS.i18n.listify(file_owners).join(""),
        file_owners_count: file_owners.length,
        file_count: files.length,
        file_title: files.length === 1 ? TS.format.formatNoSpecials(files[0].title || "Untitled") : ""
      });
      TS.generic_dialog.start({
        title: msg_title,
        body: msg_body,
        show_cancel_button: true,
        show_go_button: true,
        go_button_text: TS.i18n.t("Proceed with sharing", "files")(),
        cancel_button_text: TS.i18n.t("Cancel", "files")(),
        onGo: callback
      });
    },
    updateFileListItem: function(file, $container) {
      var $file_list_item = $container.find('.file_list_item[data-file-id="' + file.id + '"]');
      if ($file_list_item.length) {
        $file_list_item.replaceWith(TS.templates.builders.fileHTML(file));
        if (TS.files.fileIsImage(file)) $container.find(".lazy").lazyload();
      }
    }
  });
  var _current_xhr = null;
  var _files_page_size = 20;
  var _pending_file_requests = {};
  var _addFileToInlineImgs = function(file) {
    if (!TS.files.fileIsImage(file)) return;
    var inline_img = {
      width: file.thumb_360_w,
      height: file.thumb_360_h,
      link_url: file.url_private,
      internal_file_id: file.id
    };
    if (file.filetype === "gif") {
      if (file.deanimate_gif) {
        TS.inline_imgs.makeInternalInlineImg(file.deanimate_gif, inline_img);
      } else if (file.thumb_160) {
        TS.inline_imgs.makeInternalInlineImg(file.thumb_160, inline_img);
      }
    }
    if (file.thumb_480_gif || file.thumb_360_gif) {
      if (file.thumb_480_gif) TS.inline_imgs.makeInternalInlineImg(file.thumb_480_gif, inline_img);
      if (file.thumb_360_gif) TS.inline_imgs.makeInternalInlineImg(file.thumb_360_gif, inline_img);
    } else {
      if (file.thumb_720) TS.inline_imgs.makeInternalInlineImg(file.thumb_720, inline_img);
      if (file.thumb_480) TS.inline_imgs.makeInternalInlineImg(file.thumb_480, inline_img);
      if (file.thumb_360) TS.inline_imgs.makeInternalInlineImg(file.thumb_360, inline_img);
    }
  };
  var _fetchFileInfoWorker = function(id, raw, callback) {
    var handleRsp = function(rsp) {
      var file;
      if (rsp && rsp.data) {
        var no_upsert = !!raw;
        _onFileFetch(rsp.data.ok, rsp.data, rsp.args, no_upsert);
        file = raw ? rsp.data.file : TS.files.getFileById(id);
      }
      if (callback) {
        callback(id, file);
      }
      return file || id;
    };
    var comment_limit = 500;
    var file_p = _pending_file_requests[id];
    if (!file_p) {
      file_p = TS.api.call("files.info", {
        file: id,
        page: 1,
        count: comment_limit,
        truncate: 1
      });
      _pending_file_requests[id] = file_p;
      file_p.finally(function() {
        delete _pending_file_requests[id];
      });
    }
    return file_p.then(function(response) {
      return handleRsp(response);
    }).catch(function(err) {
      return handleRsp(err);
    });
  };
  var _onFileFetch = function(ok, data, args, no_upsert) {
    if (!ok) {
      if (data.error === "file_deleted") {
        var existing_file = TS.files.getFileById(args.file);
        if (existing_file) {
          TS.files.removeFile(existing_file.id);
        } else if (args.file) {
          TS.files.removeFile(args.file);
        }
      } else if (data.error === "file_not_found") {
        TS.files.removeFile(args.file);
      }
      return;
    }
    if (data.file) {
      data.file.comments = data.comments;
      data.file.content = data.content;
      data.file.content_html = data.content_html;
      data.file.content_highlight_html = data.content_highlight_html;
      if (!no_upsert) {
        TS.files.upsertAndSignal(data.file);
      }
    }
  };
  var _ensureFileObject = function(file_or_file_id) {
    var file = _.isString(file_or_file_id) ? TS.files.getFileById(file_or_file_id) : file_or_file_id;
    if (!_.isObject(file)) throw new Error("Expected file or file ID.");
    return file;
  };
})();
(function() {
  "use strict";
  TS.registerModule("rooms", {
    added_sig: new signals.Signal,
    changed_name_sig: new signals.Signal,
    changed_participants_sig: new signals.Signal,
    changed_date_end_sig: new signals.Signal,
    changed_channels_sig: new signals.Signal,
    onStart: function() {},
    getRoomById: function(id) {
      return TS.rooms.getRoomByProp("id", id);
    },
    getRoomByProp: function(name, value) {
      if (!name) return null;
      var match = null;
      _.forOwn(TS.model.rooms, function(room) {
        if (room[name] === value) {
          match = room;
          return false;
        }
      });
      return match;
    },
    upsertAndSignal: function(room) {
      var upsert = TS.rooms.upsertRoom(room);
      if (upsert.status === "CHANGED") {
        if (upsert.what_changed.indexOf("name") != -1) {
          TS.rooms.changed_name_sig.dispatch(upsert.room);
        }
        if (upsert.what_changed.indexOf("participants") != -1) {
          TS.rooms.changed_participants_sig.dispatch(upsert.room);
        }
        if (upsert.what_changed.indexOf("date_end") != -1) {
          TS.rooms.changed_date_end_sig.dispatch(upsert.room);
        }
        if (upsert.what_changed.indexOf("channels") != -1) {
          TS.rooms.changed_channels_sig.dispatch(upsert.room);
        }
      } else if (upsert.status === "ADDED") {
        TS.rooms.added_sig.dispatch(upsert.room);
      }
      return upsert;
    },
    upsertRoom: function(room) {
      var rooms = TS.model.rooms;
      var existing_room = TS.rooms.getRoomById(room.id);
      var status = "NOOP";
      var what_changed = [];
      var c_ids_to_save;
      if (room.date_start) room.date_start = Number(room.date_start);
      if (room.date_end) room.date_end = Number(room.date_end);
      if (room.was_rejected) room.was_rejected = Boolean(room.was_rejected);
      if (room.is_dm_call) room.is_dm_call = Boolean(room.is_dm_call);
      if (room.was_missed) room.was_missed = Boolean(room.was_missed);
      if (existing_room) {
        TS.log(4, 'updating existing room "' + room.id + '"');
        c_ids_to_save = existing_room.channels || [];
        _.forOwn(room, function(val, k) {
          if (_special_struct_keys.indexOf(k) !== -1) {
            if (val && !TS.utility.areSimpleObjectsEqual(val, existing_room[k])) {
              what_changed.push(k);
              existing_room[k] = val;
              status = "CHANGED";
              if (k === "channels") {
                c_ids_to_save = c_ids_to_save.concat(val || []);
              }
            }
          } else if (existing_room[k] != val) {
            if (val && !TS.utility.isScalar(val)) {
              existing_room[k] = val;
              TS.warn(k + " is not scalar! it needs to be handled by upsertRoom specifically to test if it has changed! " + typeof room[k]);
            } else if (typeof val !== "boolean" || !val != !existing_room[k]) {
              what_changed.push(k);
              existing_room[k] = val;
              status = "CHANGED";
            }
          }
        });
        room = existing_room;
      } else if (room.id) {
        status = "ADDED";
        TS.log(4, 'adding room "' + room.id);
        rooms.push(room);
      } else {
        TS.error("bad error, no room.id");
      }
      return {
        status: status,
        room: room,
        what_changed: what_changed
      };
    }
  });
  var _special_struct_keys = ["participants", "channels", "participant_history", "participants_camera_on", "participants_camera_off", "participants_screenshare_on", "participants_screenshare_off"];
})();
(function() {
  "use strict";
  TS.registerModule("ims", {
    switched_sig: new signals.Signal,
    pre_switched_sig: new signals.Signal,
    history_fetched_sig: new signals.Signal,
    history_being_fetched_sig: new signals.Signal,
    message_received_sig: new signals.Signal,
    message_removed_sig: new signals.Signal,
    message_changed_sig: new signals.Signal,
    marked_sig: new signals.Signal,
    closed_sig: new signals.Signal,
    unread_changed_sig: new signals.Signal,
    unread_highlight_changed_sig: new signals.Signal,
    opened_sig: new signals.Signal,
    msg_not_sent_sig: new signals.Signal,
    data_retention_changed_sig: new signals.Signal,
    addMsg: function(id, msg) {
      var im = TS.ims.getImById(id);
      if (!im) {
        TS.error('unknown im "' + id + '"');
        return;
      }
      if (!TS.shared.addMsg(im, msg)) return;
      var and_mark = !TS.utility.msgs.isTempMsg(msg);
      TS.ims.calcUnreadCnts(im, and_mark);
      TS.utility.msgs.maybeTruncateMsgs(im);
      TS.ims.message_received_sig.dispatch(im, msg);
      if (!im.is_open) {
        TS.api.call("im.open", {
          user: im.user,
          return_im: true,
          reason: "TS.ims.addMsg"
        }, TS.ims.onOpened);
      }
    },
    calcUnreadCnts: function(im, and_mark) {
      TS.shared.calcUnreadCnts(im, TS.ims, and_mark);
    },
    removeMsg: function(id, msg) {
      var im = TS.ims.getImById(id);
      if (!im) {
        TS.error('unknown im "' + id + '"');
        return;
      }
      if (im._archive_msgs) TS.utility.msgs.spliceMsg(im._archive_msgs, msg);
      var msgs = im.msgs;
      TS.utility.msgs.spliceMsg(msgs, msg);
      TS.ims.message_removed_sig.dispatch(im, msg);
      TS.ims.calcUnreadCnts(im, true);
    },
    sendMsg: function(im_id, text, in_reply_to_msg, should_broadcast_reply) {
      return TS.shared.sendMsg(im_id, text, TS.ims, in_reply_to_msg, should_broadcast_reply);
    },
    onSendMsg: function(success, imsg) {
      var im = TS.ims.getImById(imsg.SENT_MSG.channel);
      if (!im) {
        TS.error("unknown im? " + imsg.SENT_MSG.channel);
        return;
      }
      TS.shared.onSendMsg(success, imsg, im, TS.ims);
    },
    closeImByMemberId: function(member_id) {
      var im = TS.ims.getImByMemberId(member_id);
      if (!im) {
        return;
      }
      TS.ims.closeIm(im.id);
    },
    closeIm: function(id) {
      var im = TS.ims.getImById(id);
      if (!im || !im.is_open) return;
      im.is_open = false;
      var is_im_active = TS.model.active_im_id == id;
      if (is_im_active && TS.client) TS.client.activeChannelDisplayGoneAway();
      TS.ims.onClosed(true, {
        no_op: !is_im_active
      }, {
        channel: id
      });
      TS.api.call("im.close", {
        channel: id
      }).catch(function() {
        im.is_open = true;
        TS.ims.onClosed(true, {
          no_op: !is_im_active
        }, {
          channel: id
        });
      });
    },
    onClosed: function(ok, data, args) {
      if (!ok) {
        return;
      }
      if (data.no_op) {
        var im = TS.ims.getImById(args.channel);
        if (im) TS.ims.closed_sig.dispatch(im);
      }
    },
    startImById: function(id, from_history, and_send_txt) {
      var im = TS.ims.getImById(id);
      if (!im) {
        TS.error(id + " not an im");
        return;
      }
      TS.ims.startImByMemberId(im.user, from_history, and_send_txt);
    },
    startImByMemberName: function(member_name, from_history, and_send_txt) {
      var member = TS.members.getMemberByName(member_name);
      if (!member) {
        TS.error("no member?? " + member_name);
        return;
      }
      TS.ims.startImByMemberId(member.id, from_history, and_send_txt);
    },
    startImByMemberId: function(member_id, from_history, and_send_txt) {
      var im = TS.ims.getImByMemberId(member_id);
      if (im) {
        if (TS.ims.isImWithDeletedMember(im)) {
          TS.client.archives.previous_model_ob = TS.shared.getActiveModelOb();
        }
        TS.ims.displayIm(im.id, from_history);
        if (im.is_open) {
          if (and_send_txt) {
            TS.ims.sendMsg(im.id, $.trim(and_send_txt));
          }
          return Promise.resolve();
        }
      }
      TS.model.requested_im_opens[member_id] = {
        and_send_txt: and_send_txt
      };
      return TS.api.call("im.open", {
        user: member_id,
        return_im: true,
        reason: "TS.ims.startImByMemberId"
      }, TS.ims.onOpened);
    },
    promiseToStartImByMemberId: function(member_id, from_history, and_send_txt, callback) {
      var start_p = TS.ims.startImByMemberId(member_id, from_history, and_send_txt, callback);
      var isActive = function() {
        var now_active = TS.shared.getActiveModelOb();
        return now_active && now_active.is_im && now_active.user === member_id;
      };
      if (isActive()) return Promise.resolve();
      return start_p.then(function() {
        if (isActive()) return Promise.resolve();
        var im_switched;
        return new Promise(function(resolve) {
          im_switched = function() {
            if (isActive()) return resolve();
          };
          TS.ims.switched_sig.add(im_switched);
        }).timeout(3e4).finally(function() {
          delete TS.model.requested_im_opens[member_id];
          TS.ims.switched_sig.remove(im_switched);
        });
      });
    },
    onOpened: function(ok, data, args) {
      if (!ok) {
        return;
      }
      if (args.return_im && data.channel) {
        TS.ims.upsertIm(data.channel);
      }
    },
    displayIm: function(im_id, from_history, and_send_txt) {
      if (TS.isPartiallyBooted() && im_id !== TS.model.initial_cid) {
        TS.warn("Can't switch model objects during incremental boot; this is a programming error");
        TS.sounds.play("beep");
        return;
      }
      TS.metrics.mark("start_channel_change_" + im_id);
      var im = TS.ims.getImById(im_id);
      if (!im) {
        TS.error('im "' + im_id + '" unknown');
        return;
      }
      TS.utility.msgs.maybeClearPrevLastRead();
      TS.utility.msgs.maybeClearPrevLastRead(im);
      TS.shared.maybeClearHasAutoScrolled();
      if (im._did_defer_initial_msg_history) {
        TS.shared.checkInitialMsgHistory(im, TS.ims);
      }
      if (im_id == TS.model.active_im_id && !TS.client.activeChannelIsHidden()) {
        if (and_send_txt) {
          TS.ims.sendMsg(im.id, $.trim(and_send_txt));
        }
        return;
      }
      var switched = TS.client.channelDisplaySwitched({
        id: im_id,
        no_history_add: from_history
      });
      if (switched) {
        TS.ims.pre_switched_sig.dispatch();
        TS.ims.switched_sig.dispatch();
      }
      if (and_send_txt) {
        TS.ims.sendMsg(im.id, $.trim(and_send_txt));
      }
    },
    setLastRead: function(im, ts, reason) {
      if (im.last_read == ts) {
        return false;
      }
      if (ts.indexOf(TS.utility.date.fake_ts_unique_padder) > -1) {
        TS.error("bad ts:" + ts);
        return false;
      }
      var log_msg = im.id + ". last_read = " + im.last_read + " -> " + ts + ", reason: " + (reason || "unspecified");
      if (im.last_read > ts) {
        var dont_allow_back_setting = TS.model.last_reads_set_by_client[im.id + "_" + ts];
        delete TS.model.last_reads_set_by_client[im.id + "_" + ts];
        if (dont_allow_back_setting) {
          TS.warn("NOT going back in time on im " + log_msg);
          return;
        }
        if (TS.pri) TS.log(142, "going back in time on im " + log_msg);
        TS.utility.msgs.maybeClearPrevLastRead(im);
        TS.utility.msgs.setPrevLastRead(im, ts);
      } else {
        if (TS.pri) TS.log(142, "TS.ims.setLastRead: " + log_msg);
        TS.utility.msgs.maybeClearPrevLastRead(im);
        TS.utility.msgs.maybeSetPrevLastRead(im, ts);
      }
      im.last_read = ts;
      if (reason) im._marked_reason = reason;
      TS.ims.marked_sig.dispatch(im);
      TS.utility.msgs.maybeClearUsersCountsInfo(im);
      TS.ims.calcUnreadCnts(im);
      return true;
    },
    markMostRecentReadMsg: function(im, reason, allow_latest_via_users_counts) {
      if (!im) {
        TS.error("im unknown");
        return;
      }
      if ((!im.msgs || !im.msgs.length) && !allow_latest_via_users_counts) return;
      var most_recent_valid_ts = TS.utility.msgs.getMostRecentValidTs(im);
      if (!most_recent_valid_ts) {
        if (im.msgs && im.msgs.length || !im._latest_via_users_counts) TS.warn('no valid tses for im "' + im.id + '"???');
        return;
      }
      im.all_read_this_session_once = true;
      TS.ims.markReadMsg(im.id, most_recent_valid_ts, reason);
    },
    markReadMsg: function(im_id, ts, reason) {
      var im = TS.ims.getImById(im_id);
      if (!im) {
        TS.error('im "' + im_id + '" unknown');
        return;
      }
      if (im.last_read == ts) {
        return;
      }
      if (TS.ims.setLastRead(im, ts, reason)) {
        im._marked_reason = reason;
        if (TS.useRedux()) {
          var needs_api_marking = true;
          TS.redux.channels.setMarkingState(im.id, needs_api_marking);
        } else {
          im.needs_api_marking = true;
        }
      }
    },
    onMarked: function(ok, data, args) {
      var im = TS.ims.getImById(args.channel);
      if (!im) {
        TS.error('wtf no im "' + args.channel + '"');
        return;
      }
      if (!ok) {
        if (TS.useRedux()) {
          var needs_api_marking = true;
          TS.redux.channels.setMarkingState(im.id, needs_api_marking);
        } else {
          im.needs_api_marking = true;
        }
      }
    },
    getImsFilteredBy: function(filter) {
      return TS.shared.getEntitiesFilteredBy("ims", filter);
    },
    getImById: function(id) {
      if (!id) return null;
      if (TS.useRedux()) {
        return TS.redux.channels.getImById(id);
      }
      var ims = TS.model.ims;
      var im = _id_map[id];
      if (im) {
        return im;
      }
      if (!ims) return null;
      for (var i = 0; i < ims.length; i += 1) {
        im = ims[i];
        if (im.id == id) {
          TS.warn(id + " not in _id_map");
          _id_map[id] = im;
          return im;
        }
      }
      return null;
    },
    getDisplayNameOfUserForIm: function(im) {
      return TS.members.getMemberDisplayName(TS.members.getMemberById(im.user));
    },
    getDisplayNameOfUserForImLowerCase: function(im) {
      return TS.members.getMemberDisplayNameLowerCase(TS.members.getMemberById(im.user));
    },
    getImByUsername: function(name) {
      var member = TS.members.getMemberByName(name);
      if (!member) return null;
      return TS.ims.getImByMemberId(member.id);
    },
    getImByMemberId: function(id) {
      if (TS.useRedux()) {
        return TS.redux.channels.getImByMemberId(id);
      }
      var ims = TS.model.ims;
      var im = _member_id_map[id];
      if (im) {
        return im;
      }
      if (!ims) return null;
      for (var i = 0; i < ims.length; i += 1) {
        im = ims[i];
        if (im.user == id) {
          TS.warn(id + " not in _member_id_map?");
          _member_id_map[id] = im;
          return im;
        }
      }
      return null;
    },
    getFirstOpenIm: function() {
      var ims = TS.model.ims;
      var im;
      if (!ims) return null;
      for (var i = 0; i < ims.length; i += 1) {
        im = ims[i];
        if (im.is_open) return im;
      }
      return null;
    },
    isImWithDeletedMember: function(model_ob) {
      if (!model_ob.is_im) return false;
      var member = TS.members.getMemberById(model_ob.user);
      if (!member || !member.deleted) return false;
      return true;
    },
    setNameFromMember: function(member) {
      var im = TS.ims.getImByMemberId(member.id);
      if (!im) return;
      _setName(im, member);
    },
    upsertIm: function(im, is_bulk_upsert) {
      var existing_im = TS.ims.getImById(im.id);
      delete im.unread_count;
      if (existing_im) {
        if (TS.useRedux()) {
          existing_im = _.assign({}, existing_im);
        }
        if (TS.pri) TS.log(4, 'updating existing im "' + im.id + '"');
        _.each(_.keys(im), function(k) {
          existing_im[k] = im[k];
        });
        im = existing_im;
        if (TS.isPartiallyBooted() && im.oldest_msg_ts === null) {
          im.oldest_msg_ts = TS.storage.fetchOldestTs(im.id);
        }
        TS.shared.maybeResetHistoryFetched(im);
        if (TS.client && (im.is_open || im.unread_cnt)) {
          var should_defer_initial_msg_history = true;
          TS.shared.checkInitialMsgHistory(im, TS.ims, should_defer_initial_msg_history);
        }
        if (TS.useRedux()) {
          if (!is_bulk_upsert) {
            TS.redux.channels.replaceEntity(im);
          }
        }
      } else {
        if (!TS.useRedux()) {
          if (TS.pri) TS.log(4, 'adding im "' + im.id + '"');
          TS.model.ims.push(im);
        }
        TS.utility.ensureInArray(TS.model.all_im_ids, im.id);
        var member = TS.members.getMemberById(im.user);
        _processNewImForUpserting(im, member);
        if (TS.useRedux()) {
          if (!is_bulk_upsert) {
            TS.redux.channels.addEntity(im);
          }
        } else {
          _id_map[im.id] = im;
          _member_id_map[im.user] = im;
        }
      }
      if (TS.client) {
        var and_mark = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(im);
        if (TS.model.active_cid == im.id) {
          TS.ims.calcUnreadCnts(im, and_mark);
        } else if (!existing_im) {
          TS.ims.calcUnreadCnts(im, and_mark);
        }
      }
      return im;
    },
    markScrollTop: function(id, scroll_top) {
      var im = TS.ims.getImById(id);
      if (!im) return false;
      if (im.scroll_top == scroll_top) {
        return false;
      }
      im.scroll_top = scroll_top;
      return true;
    },
    maybeLoadScrollBackHistory: function(id, force) {
      var im = TS.ims.getImById(id);
      if (!im) return false;
      return TS.shared.maybeLoadScrollBackHistory(im, TS.ims, force);
    },
    onHistory: function(ok, data, args) {
      var im = TS.ims.getImById(args.channel);
      if (!im) {
        TS.error('wtf no im "' + args.channel + '"');
        return;
      }
      if (!ok || !data || !data.messages) {
        TS.error("failed to get history for im " + args.channel);
        im.history_is_being_fetched = false;
        im.history_fetch_retries = (im.history_fetch_retries || 0) + 1;
        var min_delay = 2500;
        var max_delay = 5e3;
        var delay = _.random(min_delay, max_delay);
        TS.info("retrying history fetch on im " + im.id + " in " + delay);
        window.setTimeout(function() {
          TS.info("retrying history fetch on im " + im.id + ", attempt #" + (im.history_fetch_retries || "1"));
          TS.ims.fetchHistory(im, args, TS.ims.onHistory);
        }, delay);
        return;
      }
      delete im.history_fetch_retries;
      var fetching_more = TS.shared.onHistory(im, data, args, TS.ims);
      if (!fetching_more) {
        im.history_is_being_fetched = false;
        TS.ims.history_fetched_sig.dispatch(im);
      }
      var and_mark = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(im);
      TS.ims.calcUnreadCnts(im, and_mark);
      if (TS.view) {
        if (!fetching_more && im.unread_cnt) {
          TS.client.channel_pane.rebuild("ims");
        }
      }
    },
    fetchHistory: function(im, api_args, handler) {
      if (!im) {
        TS.error('wtf no im "' + im + '"');
        return;
      }
      TS.shared.maybeClearHasAutoScrolled(im);
      im.history_is_being_fetched = true;
      im.history_fetch_failed = false;
      TS.ims.history_being_fetched_sig.dispatch(im);
      if (im.history_fetch_retries > 5) {
        delete im.history_fetch_retries;
        im.history_is_being_fetched = false;
        im.history_fetch_failed = true;
        if (TS.client) TS.client.msg_pane.updateEndMarker();
        return;
      }
      TS.api.call("im.history", api_args, handler || TS.ims.onHistory);
    },
    checkForOldImsToClose: function() {
      return TS.shared.checkForOldImsToClose();
    },
    setDataRetention: function(im_id, retention_type, retention_duration, handler) {
      var args = {
        channel: im_id,
        retention_type: $("select[name=retention_type]").val()
      };
      if (args.retention_type == 1) {
        args.retention_duration = $("#retention_duration").val();
      }
      TS.api.call("im.setRetention", args, function(ok, data, args) {
        if (handler) {
          handler(ok, data, args);
        }
        if (ok) {
          TS.ims.data_retention_changed_sig.dispatch(args);
        }
      });
    },
    getDataRetention: function(im_id, handler) {
      TS.api.call("im.getRetention", {
        channel: im_id
      }, handler);
    }
  });
  var _id_map = {};
  var _member_id_map = {};
  var _setName = function(im, member) {
    if (TS._incremental_boot && im.name) {} else {
      im.name = im.user;
    }
    if (member) im.name = member.name;
    im._name_lc = _.toLower(im.name);
  };
  var _processNewImForUpserting = function(im, member) {
    TS.shared.setPriorityForDev(im);
    im.is_im = true;
    _setName(im, member);
    if (member) {
      if (member.is_slackbot) {
        im.is_slackbot_im = true;
      } else if (member.is_self) {
        im.is_self_im = true;
      }
    }
    TS.shared.maybeResetHistoryFetched(im);
    im.opened_this_session = false;
    im.scroll_top = -1;
    im.history_is_being_fetched = false;
    if (!TS.useRedux()) {
      im.needs_api_marking = false;
    }
    im.unread_highlight_cnt = 0;
    im.unread_highlights = [];
    im.unread_cnt = 0;
    im.unreads = [];
    im.oldest_unread_ts = null;
    im.has_fetched_history_after_scrollback = false;
    if (TS.client) {
      if (TS._incremental_boot && im.msgs && im.msgs.length > 0) {
        im.msgs = im.msgs.map(function(msg) {
          return TS.utility.msgs.processImsg(msg, im.id);
        });
        TS.utility.msgs.setMsgs(im, im.msgs);
      } else {
        TS.utility.msgs.setMsgs(im, []);
      }
    } else if (TS.boot_data.msgs) {
      TS.utility.msgs.ingestMessagesFromBootData(im);
    }
    im.oldest_msg_ts = TS.storage.fetchOldestTs(im.id) || null;
    im.last_msg_input = TS.storage.fetchLastMsgInput(im.id) || null;
  };
})();
(function() {
  "use strict";
  TS.registerModule("mpims", {
    switched_sig: new signals.Signal,
    pre_switched_sig: new signals.Signal,
    joined_sig: new signals.Signal,
    member_joined_sig: new signals.Signal,
    history_fetched_sig: new signals.Signal,
    history_being_fetched_sig: new signals.Signal,
    message_received_sig: new signals.Signal,
    message_removed_sig: new signals.Signal,
    message_changed_sig: new signals.Signal,
    marked_sig: new signals.Signal,
    closed_sig: new signals.Signal,
    unread_changed_sig: new signals.Signal,
    unread_highlight_changed_sig: new signals.Signal,
    opened_sig: new signals.Signal,
    msg_not_sent_sig: new signals.Signal,
    data_retention_changed_sig: new signals.Signal,
    onStart: function() {
      TS.prefs.display_real_names_override_changed_sig.add(_realNamePrefChanged);
      TS.prefs.team_display_real_names_changed_sig.add(_realNamePrefChanged);
      TS.members.changed_profile_sig.add(_memberRealNameChanged);
    },
    getVisibleMpims: function() {
      var all = TS.model.mpims;
      return all.filter(function(mpim) {
        if (mpim.is_open) return true;
        if (mpim.is_starred) return true;
        if (mpim.unread_cnt) return true;
        if (!mpim.latest && (!mpim.msgs || !mpim.msgs.length)) return false;
        if (mpim.members && mpim.members.length === 2) return false;
        if (TS.model.user.is_ultra_restricted) return true;
        return true;
      });
    },
    addMsg: function(id, msg) {
      var mpim = TS.mpims.getMpimById(id);
      if (!mpim) {
        TS.error('unknown mpim "' + id + '"');
        return;
      }
      if (!TS.shared.addMsg(mpim, msg)) return;
      var and_mark = !TS.utility.msgs.isTempMsg(msg);
      TS.mpims.calcUnreadCnts(mpim, and_mark);
      TS.utility.msgs.maybeTruncateMsgs(mpim);
      TS.mpims.message_received_sig.dispatch(mpim, msg);
      if (!mpim.is_open && TS.utility.msgs.msgCanCountAsUnread(msg)) {
        if (mpim.members.length == 1) {
          var user = mpim.members[0];
          TS.api.call("im.open", {
            user: user,
            return_im: true,
            reason: "TS.mpims.addMsg"
          }, TS.ims.onOpened);
        } else if (mpim.members.length > 1) {
          var users = mpim.members.join(",");
          TS.api.call("mpim.open", {
            users: users
          }, TS.mpims.onOpened);
        } else {}
      }
    },
    calcUnreadCnts: function(mpim, and_mark) {
      TS.shared.calcUnreadCnts(mpim, TS.mpims, and_mark);
    },
    removeMsg: function(id, msg) {
      var mpim = TS.mpims.getMpimById(id);
      if (!mpim) {
        TS.error('unknown mpim "' + id + '"');
        return;
      }
      if (mpim._archive_msgs) TS.utility.msgs.spliceMsg(mpim._archive_msgs, msg);
      var msgs = mpim.msgs;
      TS.utility.msgs.spliceMsg(msgs, msg);
      TS.mpims.message_removed_sig.dispatch(mpim, msg);
      TS.mpims.calcUnreadCnts(mpim, true);
    },
    sendMsg: function(mpim_id, text, in_reply_to_msg, should_broadcast_reply) {
      return TS.shared.sendMsgGroup(mpim_id, text, TS.mpims, in_reply_to_msg, should_broadcast_reply);
    },
    onSendMsg: function(success, imsg) {
      var mpim = TS.mpims.getMpimById(imsg.SENT_MSG.channel);
      if (!mpim) {
        TS.error("unknown mpim? " + imsg.SENT_MSG.channel);
        return;
      }
      TS.shared.onSendMsg(success, imsg, mpim, TS.mpims);
    },
    closeMpim: function(id) {
      var mpim = TS.mpims.getMpimById(id);
      if (!mpim) {
        return;
      }
      TS.api.call("mpim.close", {
        channel: id
      }, TS.mpims.onClosed);
    },
    onClosed: function(ok, data, args) {
      if (!ok) {
        return;
      }
      if (data.no_op) {
        var mpim = TS.mpims.getMpimById(args.channel);
        if (mpim) TS.mpims.closed_sig.dispatch(mpim);
      }
    },
    startMpimWithMembers: function(members, callback) {
      var ids = members.map(function(user) {
        return user.id;
      });
      ids = ids.join(",");
      TS.api.call("mpim.open", {
        users: ids
      }, function(ok, data, args) {
        if (data.group) {
          var mpim = TS.mpims.upsertMpim(data.group);
          if (mpim) {
            TS.mpims.displayMpim({
              id: mpim.id
            });
          } else {
            TS.error("no mpim?!?");
          }
        }
        if (callback) callback(ok, data, args);
      });
    },
    onOpened: function(ok) {
      if (!ok) {}
    },
    displayMpim: function(options) {
      var current_options = _.defaults({}, options, {
        from_history: false,
        replace_history_state: false
      });
      var mpim_id = current_options.id;
      if (!mpim_id) {
        TS.error("no mpim id supplied");
        return;
      }
      var mpim_path = current_options.path;
      var and_send_txt = current_options.and_send_txt;
      var from_history = current_options.from_history;
      var replace_history_state = current_options.replace_history_state;
      if (TS.isPartiallyBooted() && mpim_id !== TS.model.initial_cid) {
        TS.warn("Can't switch model objects during incremental boot; this is a programming error");
        TS.sounds.play("beep");
        return;
      }
      TS.metrics.mark("start_channel_change_" + mpim_id);
      var mpim = TS.mpims.getMpimById(mpim_id);
      if (!mpim) {
        TS.error('mpim "' + mpim_id + '" unknown');
        return;
      }
      TS.utility.msgs.maybeClearPrevLastRead();
      TS.utility.msgs.maybeClearPrevLastRead(mpim);
      TS.shared.maybeClearHasAutoScrolled();
      if (mpim._did_defer_initial_msg_history) {
        TS.shared.checkInitialMsgHistory(mpim, TS.mpims);
      }
      if (mpim_id == TS.model.active_mpim_id && !replace_history_state && !TS.client.activeChannelIsHidden()) {
        TS.warn('mpim "' + mpim_id + '" already displayed');
        if (and_send_txt) {
          TS.mpims.sendMsg(mpim_id, $.trim(and_send_txt));
        }
        return;
      }
      var no_history_add = replace_history_state ? false : from_history;
      var path = mpim_path || "/messages/" + mpim;
      var switched = TS.client.channelDisplaySwitched({
        id: mpim_id,
        path: path,
        replace_history_state: replace_history_state,
        no_history_add: no_history_add
      });
      if (switched) {
        TS.mpims.pre_switched_sig.dispatch();
        TS.mpims.switched_sig.dispatch();
      }
      if (mpim.is_open) {
        if (and_send_txt) {
          TS.mpims.sendMsg(mpim_id, $.trim(and_send_txt));
        }
        return;
      }
      TS.model.requested_mpim_opens[mpim_id] = {
        and_send_txt: and_send_txt
      };
      var user_ids = mpim.members.filter(function(member_id) {
        return TS.model.user.id !== member_id;
      });
      TS.api.call("mpim.open", {
        users: user_ids.join(",")
      }, TS.mpims.onOpened);
    },
    setLastRead: function(mpim, ts, reason) {
      if (mpim.last_read == ts) {
        return false;
      }
      if (ts.indexOf(TS.utility.date.fake_ts_unique_padder) > -1) {
        TS.error("bad ts:" + ts);
        return false;
      }
      var log_msg = mpim.id + ". last_read = " + mpim.last_read + " -> " + ts + ", reason: " + (reason || "unspecified");
      if (mpim.last_read > ts) {
        var dont_allow_back_setting = TS.model.last_reads_set_by_client[mpim.id + "_" + ts];
        delete TS.model.last_reads_set_by_client[mpim.id + "_" + ts];
        if (dont_allow_back_setting) {
          TS.warn("NOT going back in time on mpim " + log_msg);
          return;
        }
        if (TS.pri) TS.log(142, "going back in time on mpim " + log_msg);
        TS.utility.msgs.maybeClearPrevLastRead(mpim);
        TS.utility.msgs.setPrevLastRead(mpim, ts);
      } else {
        if (TS.pri) TS.log(142, "TS.mpims.setLastRead: " + log_msg);
        TS.utility.msgs.maybeClearPrevLastRead(mpim);
        TS.utility.msgs.maybeSetPrevLastRead(mpim, ts);
      }
      mpim.last_read = ts;
      if (reason) mpim._marked_reason = reason;
      TS.mpims.marked_sig.dispatch(mpim);
      TS.utility.msgs.maybeClearUsersCountsInfo(mpim);
      TS.mpims.calcUnreadCnts(mpim);
      return true;
    },
    markMostRecentReadMsg: function(mpim, reason, allow_latest_via_users_counts) {
      if (!mpim) {
        TS.error("mpim unknown");
        return;
      }
      if ((!mpim.msgs || !mpim.msgs.length) && !allow_latest_via_users_counts) return;
      var most_recent_valid_ts = TS.utility.msgs.getMostRecentValidTs(mpim);
      if (!most_recent_valid_ts) {
        if (mpim.msgs && mpim.msgs.length || !mpim._latest_via_users_counts) TS.warn('no valid tses for mpim "' + mpim.id + '"???');
        return;
      }
      mpim.all_read_this_session_once = true;
      TS.mpims.markReadMsg(mpim.id, most_recent_valid_ts, reason);
    },
    markReadMsg: function(mpim_id, ts, reason) {
      var mpim = TS.mpims.getMpimById(mpim_id);
      if (!mpim) {
        TS.error('mpim "' + mpim_id + '" unknown');
        return;
      }
      if (mpim.last_read == ts) {
        return;
      }
      if (TS.mpims.setLastRead(mpim, ts, reason)) {
        mpim._marked_reason = reason;
        if (TS.useRedux()) {
          var needs_api_marking = true;
          TS.redux.channels.setMarkingState(mpim.id, needs_api_marking);
        } else {
          mpim.needs_api_marking = true;
        }
      }
    },
    onMarked: function(ok, data, args) {
      var mpim = TS.mpims.getMpimById(args.channel);
      if (!mpim) {
        TS.error('error no mpim "' + args.channel + '"');
        return;
      }
      if (!ok) {
        if (TS.useRedux()) {
          var needs_api_marking = true;
          TS.redux.channels.setMarkingState(mpim.id, needs_api_marking);
        } else {
          mpim.needs_api_marking = true;
        }
      }
    },
    getMpimsFilteredBy: function(filter) {
      return TS.shared.getEntitiesFilteredBy("mpims", filter);
    },
    getMpimById: function(id) {
      if (!id) return null;
      if (TS.useRedux()) {
        return TS.redux.channels.getMpimById(id);
      }
      var mpims = TS.model.mpims;
      var mpim = _id_map[id];
      if (mpim) {
        return mpim;
      }
      if (!mpims) return null;
      for (var i = 0; i < mpims.length; i += 1) {
        mpim = mpims[i];
        if (mpim.id == id) {
          TS.warn(id + " not in _id_map?");
          _id_map[id] = mpim;
          return mpim;
        }
      }
      return null;
    },
    getMpimByName: function(name) {
      if (TS.useRedux()) {
        return TS.redux.channels.getMpimByName(name);
      }
      name = _.toLower(name);
      var mpims = TS.model.mpims;
      var mpim = _name_map[name];
      if (mpim) return mpim;
      if (!mpims) return null;
      for (var i = 0; i < mpims.length; i += 1) {
        mpim = mpims[i];
        if (mpim._name_lc == name) {
          TS.warn(name + " not in _name_map?");
          _name_map[mpim._name_lc] = mpim;
          _name_map[mpim._internal_name] = mpim;
          return mpim;
        }
      }
      return null;
    },
    getActiveMembers: function(mpim) {
      var members = TS.mpims.getMembersInDisplayOrder(mpim);
      return members.filter(function(m) {
        return !m.deleted;
      });
    },
    getMembersInDisplayOrder: function(mpim) {
      if (!mpim) return;
      if (mpim._members && mpim._members.length === mpim.members.length - 1) return mpim._members;
      mpim._members = _.without(mpim.members, TS.model.user.id).map(function(user_id) {
        var member = TS.members.getMemberById(user_id);
        if (!member) TS.warn("Could not find a member in model with id: " + user_id);
        return member;
      });
      return _.compact(mpim._members);
    },
    getDisplayName: function(mpim, for_header, show_last_initial, truncate_at, for_dm_badge) {
      var should_truncate = _.isInteger(truncate_at);
      if (mpim._display_name && !for_header && !show_last_initial && !should_truncate && !for_dm_badge) return mpim._display_name;
      if (mpim._display_name_truncated && !for_header && !show_last_initial && !for_dm_badge && should_truncate) return mpim._display_name_truncated;
      if (for_dm_badge) return _getDmBadgeDisplayName(mpim);
      if (TS.boot_data.feature_name_tagging_client) return _getDisplayTitle(mpim, for_header);
      var members = TS.mpims.getMembersInDisplayOrder(mpim);
      var display_real_names = TS.members.shouldDisplayRealNames();
      var valid_members = _.compact(members);
      var missing_count = members.length - valid_members.length;
      if (missing_count) {
        var valid_ids = _(valid_members).map("id").value().join(",");
        TS.warn("TS.mpims.getDisplayName(): Missing " + missing_count + " members. Valid IDs = " + valid_ids);
        members = valid_members;
      }
      var first_name_map = {};
      if (display_real_names) {
        members.forEach(function(member) {
          if (member.profile.first_name) {
            if (!first_name_map[member.profile.first_name]) first_name_map[member.profile.first_name] = [];
            first_name_map[member.profile.first_name].push(member);
          }
        });
      }
      var names = members.map(function(member) {
        var current_status = "";
        if (TS.members.getMemberCurrentStatus(member).emoji || TS.members.getMemberCurrentStatus(member).text) {
          current_status = " " + TS.templates.current_status({
            tip_direction: "bottom",
            member: member,
            classes: "ts_tip_float"
          });
        }
        if (member.profile.first_name && display_real_names) {
          var first_name = $.trim(member.profile.first_name);
          var last_name = $.trim(member.profile.last_name);
          var name = first_name;
          if (first_name_map[first_name] && first_name_map[first_name].length > 1 && last_name || show_last_initial) {
            name += " " + _getFirstLetter(last_name) + ".";
          }
          if (for_header) {
            name = TS.utility.htmlEntities($.trim(name));
            name = '<span class="mpdm_member ' + TS.templates.makeMemberDomId(member) + " " + TS.templates.makeMemberPresenceStateClass(member) + '" data-member-id="' + member.id + '">' + name + current_status + "</span>";
          }
          return name;
        }
        var user_name = $.trim(member.name);
        if (for_header) {
          user_name = TS.utility.htmlEntities(user_name);
          user_name = '<span class="mpdm_member ' + TS.templates.makeMemberDomId(member) + " " + TS.templates.makeMemberPresenceStateClass(member) + '" data-member-id="' + member.id + '">' + user_name + current_status + "</span>";
        }
        return user_name;
      });
      var display_name;
      if (should_truncate && for_header) {
        display_name = names.slice(0, truncate_at).join(" ");
      } else if (for_header) {
        display_name = names.join(" ");
      } else if (should_truncate && names.length > truncate_at + 1) {
        var show_names = names.splice(0, truncate_at);
        display_name = TS.i18n.t("{names} and {others_count, number} others", "mpims")({
          names: show_names.join(", "),
          others_count: names.length
        });
      } else {
        display_name = names.join(", ");
      }
      if (!for_header && !show_last_initial && !should_truncate) mpim._display_name = display_name;
      if (!for_header && !show_last_initial && should_truncate) mpim._display_name_truncated = display_name;
      return display_name;
    },
    getDisplayNameLowerCase: function(mpim) {
      if (mpim._display_name_lc) return mpim._display_name_lc;
      var display_name = TS.mpims.getDisplayName(mpim);
      mpim._display_name_lc = _.toLower(display_name);
      return mpim._display_name_lc;
    },
    getTooltipText: function(mpim) {
      var members = TS.mpims.getMembersInDisplayOrder(mpim);
      var names = members.map(function(member) {
        if (member.profile.real_name) return member.profile.real_name;
        return member.name;
      });
      var tooltip = names.join(", ");
      if (tooltip === TS.mpims.getDisplayName(mpim)) return "";
      return tooltip;
    },
    getMpimArchivesPath: function(mpim) {
      return "/archives/" + mpim.id;
    },
    getMemberCount: function(mpim) {
      return Math.min(Math.max(mpim.members.length - 1, 2), 9);
    },
    upsertMpim: function(mpim_group, is_bulk_upsert) {
      var existing_mpim = TS.mpims.getMpimById(mpim_group.id);
      delete mpim_group.unread_count;
      if (existing_mpim) {
        if (TS.useRedux()) {
          existing_mpim = _.assign({}, existing_mpim);
        }
        TS.log(4, 'updating existing mpim "' + existing_mpim.id + '"');
        for (var k in mpim_group) {
          if (k === "name") continue;
          existing_mpim[k] = mpim_group[k];
        }
        mpim_group = existing_mpim;
        if (TS.isPartiallyBooted() && mpim_group.oldest_msg_ts === null) {
          mpim_group.oldest_msg_ts = TS.storage.fetchOldestTs(mpim_group.id);
        }
        TS.shared.maybeResetHistoryFetched(existing_mpim);
        if (TS.client && (mpim_group.is_open || mpim_group.unread_cnt)) {
          var should_defer_initial_msg_history = true;
          TS.shared.checkInitialMsgHistory(mpim_group, TS.mpims, should_defer_initial_msg_history);
        }
        if (TS.useRedux()) {
          if (!is_bulk_upsert) {
            TS.redux.channels.replaceEntity(mpim_group);
          }
        }
      } else {
        if (!TS.useRedux()) {
          TS.log(4, 'adding mpim "' + mpim_group.id + '"');
          TS.model.mpims.push(mpim_group);
        }
        TS.utility.ensureInArray(TS.model.all_group_ids, mpim_group.id);
        _processNewMpimForUpserting(mpim_group);
        if (TS.useRedux()) {
          if (!is_bulk_upsert) {
            TS.redux.channels.addEntity(mpim_group);
          }
        } else {
          _id_map[mpim_group.id] = mpim_group;
        }
      }
      if (TS.client) {
        var and_mark = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(mpim_group);
        if (TS.model.active_cid == mpim_group.id) {
          TS.mpims.calcUnreadCnts(mpim_group, and_mark);
        } else if (!existing_mpim) {
          TS.mpims.calcUnreadCnts(mpim_group, and_mark);
        }
      }
      return mpim_group;
    },
    processNewMpimForUpserting: function(mpim_group) {
      _processNewMpimForUpserting(mpim_group);
    },
    markScrollTop: function(id, scroll_top) {
      var mpim = TS.mpims.getMpimById(id);
      if (!mpim) return false;
      if (mpim.scroll_top == scroll_top) {
        return false;
      }
      mpim.scroll_top = scroll_top;
      return true;
    },
    maybeLoadScrollBackHistory: function(id, force) {
      var mpim = TS.mpims.getMpimById(id);
      if (!mpim) return false;
      return TS.shared.maybeLoadScrollBackHistory(mpim, TS.mpims, force);
    },
    onHistory: function(ok, data, args) {
      var mpim = TS.mpims.getMpimById(args.channel);
      if (!mpim) {
        TS.error('error no mpim "' + args.channel + '"');
        return;
      }
      if (!ok || !data || !data.messages) {
        TS.error("failed to get history for mpim " + args.channel);
        mpim.history_is_being_fetched = false;
        mpim.history_fetch_retries = (mpim.history_fetch_retries || 0) + 1;
        var min_delay = 2500;
        var max_delay = 5e3;
        var delay = _.random(min_delay, max_delay);
        TS.info("retrying history fetch on mpim " + mpim.id + " in " + delay);
        window.setTimeout(function() {
          TS.info("retrying history fetch on mpim " + mpim.id + ", attempt #" + (mpim.history_fetch_retries || "1"));
          TS.ims.fetchHistory(mpim, args, TS.mpims.onHistory);
        }, delay);
        return;
      }
      delete mpim.history_fetch_retries;
      var fetching_more = TS.shared.onHistory(mpim, data, args, TS.mpims);
      if (!fetching_more) {
        mpim.history_is_being_fetched = false;
        TS.mpims.history_fetched_sig.dispatch(mpim);
      }
      var and_mark = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(mpim);
      TS.mpims.calcUnreadCnts(mpim, and_mark);
      if (TS.view) {
        if (!fetching_more && mpim.unread_cnt) {
          TS.client.channel_pane.rebuild("ims");
        }
      }
    },
    fetchHistory: function(mpim, api_args, handler) {
      if (!mpim) {
        TS.error('error no mpim "' + mpim + '"');
        return;
      }
      TS.shared.maybeClearHasAutoScrolled(mpim);
      mpim.history_is_being_fetched = true;
      mpim.history_fetch_failed = false;
      TS.mpims.history_being_fetched_sig.dispatch(mpim);
      if (mpim.history_fetch_retries > 5) {
        delete mpim.history_fetch_retries;
        mpim.history_is_being_fetched = false;
        mpim.history_fetch_failed = true;
        if (TS.client) TS.client.msg_pane.updateEndMarker();
        return;
      }
      TS.api.call("mpim.history", api_args, handler || TS.mpims.onHistory);
    },
    setNamesFromMember: function(member) {
      TS.model.mpims.forEach(function(mpim) {
        if (_.includes(mpim.members, member.id)) {
          _updateMpimName(mpim);
          _clearDisplayNameCache(mpim);
        }
      });
    },
    checkMpimMatch: function(mpim, prefix_regexes, suffix_regexes) {
      if (!mpim) return;
      var match_names_only = true;
      var every_regex_matched = true;
      var members = TS.mpims.getMembersInDisplayOrder(mpim);
      for (var i = 0; i < prefix_regexes.length; i += 1) {
        var regex_matched = false;
        for (var j = 0; j < members.length; j += 1) {
          if (TS.utility.members.checkMemberMatch(members[j], prefix_regexes[i], match_names_only) || suffix_regexes && TS.utility.members.checkMemberMatch(members[j], suffix_regexes[i], match_names_only)) {
            regex_matched = true;
          }
        }
        if (!regex_matched) every_regex_matched = false;
      }
      return every_regex_matched;
    },
    setDataRetention: function(group_id, retention_type, retention_duration, handler) {
      var args = {
        channel: group_id,
        retention_type: $("select[name=retention_type]").val()
      };
      if (args.retention_type == 1) {
        args.retention_duration = $("#retention_duration").val();
      }
      TS.api.call("mpim.setRetention", args, function(ok, data, args) {
        if (handler) {
          handler(ok, data, args);
        }
        if (ok) {
          TS.mpims.data_retention_changed_sig.dispatch(args);
        }
      });
    },
    getDataRetention: function(group_id, handler) {
      TS.api.call("mpim.getRetention", {
        channel: group_id
      }, handler);
    },
    convertToGroup: function(mpim, group_name, options) {
      options = options || {};
      var c_id = mpim.id;
      return TS.api.call("mpim.convertToGroup", {
        channel: c_id,
        name: group_name,
        validate: !!options.validate_name
      });
    }
  });
  var _id_map = {};
  var _name_map = {};
  var _did_log_mpim_debug_msg = false;
  var _makeNameForMpim = function(mpim) {
    var members = TS.mpims.getMembersInDisplayOrder(mpim);
    if (members.length < 2) {
      return mpim._internal_name;
    }
    if (_.compact(members).length < members.length) {
      var members_we_have = _(members).compact().map("id").value();
      var members_we_are_missing = _.without(mpim.members, members_we_have);
      TS.warn("Missing some members in MPIM " + mpim.id + ":" + members_we_are_missing.join(","));
      var still_missing_members = _.reject(members_we_are_missing, TS.members.getMemberById);
      if (still_missing_members.length > 0) {
        TS.warn("Some members (" + still_missing_members.join(",") + ") were still unavailable when we tried again; unable to recover");
      } else {
        TS.info("All members were available when we tried again; recovering");
        delete mpim._members;
        members = TS.mpims.getMembersInDisplayOrder();
      }
      if (!_did_log_mpim_debug_msg) {
        _did_log_mpim_debug_msg = true;
        TS.console.logStackTrace("We are somehow trying to generate a name for an mpim without having all members locally. Here's a stack trace");
        if (TS.boot_data.feature_tinyspeck) {
          TS.metrics.count("mpim_missing_members_bug_ts_only");
        } else {
          TS.metrics.count("mpim_missing_members_bug");
        }
      }
    }
    return "@" + _(members).compact().map(function(member) {
      if (!member._is_local) return member.name + "_" + member.team_id;
      return member.name;
    }).value().join(",");
  };
  var _updateMpimName = function(mpim) {
    if (mpim._name_lc) {
      if (TS.useRedux()) {
        TS.redux.channels.removeEntityFromNameMap(mpim._name_lc);
      } else {
        delete _name_map[mpim._name_lc];
      }
    }
    mpim.name = _makeNameForMpim(mpim);
    mpim._name_lc = _.toLower(mpim.name);
    if (TS.useRedux()) {
      TS.redux.channels.addEntityToNameMap(mpim);
    } else {
      _name_map[mpim._name_lc] = mpim;
    }
  };
  var _memberRealNameChanged = function(member) {
    TS.model.mpims.forEach(function(mpim) {
      if (mpim.members.indexOf(member.id) !== -1) _clearDisplayNameCache(mpim);
    });
  };
  var _realNamePrefChanged = function() {
    TS.model.mpims.forEach(_clearDisplayNameCache);
  };
  var _clearDisplayNameCache = function(mpim) {
    delete mpim._display_name;
    delete mpim._display_name_lc;
  };
  var _getFirstLetter = function(word) {
    var first = word.charCodeAt(0);
    var second;
    if (first >= 55296 && first <= 56319 && word.length > 1) {
      second = word.charCodeAt(1);
      if (second >= 56320 && second <= 57343) {
        return word.substring(0, 2);
      }
    }
    return word.substring(0, 1);
  };
  var _getDisplayTitle = function(mpim, for_header) {
    var members = TS.mpims.getMembersInDisplayOrder(mpim);
    var names = members.map(function(member) {
      var name = TS.members.getMemberDisplayName(member);
      if (for_header) {
        var current_status = "";
        if (TS.members.getMemberCurrentStatus(member).emoji || TS.members.getMemberCurrentStatus(member).text) {
          current_status = " " + TS.templates.current_status({
            tip_direction: "bottom",
            member: member,
            classes: "ts_tip_float"
          });
        }
        name = TS.utility.htmlEntities($.trim(name));
        name = '<li class="mpdm_member ' + TS.templates.makeMemberDomId(member) + " " + TS.templates.makeMemberPresenceStateClass(member) + '" data-member-id="' + member.id + '">' + name + current_status + "</li>";
      }
      return name;
    });
    var display_name = for_header ? names.join(" ") : names.join(", ");
    if (!for_header) mpim._display_name = display_name;
    return display_name;
  };
  var _getDmBadgeDisplayName = function(mpim) {
    var members = TS.mpims.getMembersInDisplayOrder(mpim);
    var names = members.map(function(member) {
      return TS.members.getMemberDisplayName(member);
    });
    var display_name = TS.i18n.listify(names, {
      strong: true
    }).join("");
    return display_name;
  };
  var _processNewMpimForUpserting = function(mpim_group) {
    mpim_group._internal_name = mpim_group.name;
    if (!TS.useRedux()) {
      _name_map[mpim_group._internal_name] = mpim_group;
    }
    _updateMpimName(mpim_group);
    TS.shared.setPriorityForDev(mpim_group);
    mpim_group.is_mpim = true;
    mpim_group.opened_this_session = false;
    mpim_group.scroll_top = -1;
    mpim_group.history_is_being_fetched = false;
    if (!TS.useRedux()) {
      mpim_group.needs_api_marking = false;
    }
    mpim_group.unread_highlight_cnt = 0;
    mpim_group.unread_highlights = [];
    mpim_group.unread_cnt = 0;
    mpim_group.unreads = [];
    mpim_group.oldest_unread_ts = null;
    mpim_group.has_fetched_history_after_scrollback = false;
    if (TS.client) {
      TS.shared.maybeResetHistoryFetched(mpim_group);
      if (TS._incremental_boot && mpim_group.msgs && mpim_group.msgs.length > 0) {
        mpim_group.msgs = mpim_group.msgs.map(function(msg) {
          return TS.utility.msgs.processImsg(msg, mpim_group.id);
        });
        TS.utility.msgs.setMsgs(mpim_group, mpim_group.msgs);
      } else {
        TS.utility.msgs.setMsgs(mpim_group, []);
      }
    } else if (TS.boot_data.msgs) {
      TS.utility.msgs.ingestMessagesFromBootData(mpim_group);
    }
    mpim_group.oldest_msg_ts = TS.storage.fetchOldestTs(mpim_group.id);
    mpim_group.last_msg_input = TS.storage.fetchLastMsgInput(mpim_group.id);
  };
})();
(function() {
  "use strict";
  TS.registerModule("shared", {
    msg_sent_sig: new signals.Signal,
    onStart: function() {
      if (TS.client) {
        TS.ms.connected_sig.addOnce(_logBootChannelSwitch);
        TS.channels.switched_sig.add(_logChannelSwitch);
        TS.ims.switched_sig.add(_logChannelSwitch);
        TS.groups.switched_sig.add(_logChannelSwitch);
        TS.mpims.switched_sig.add(_logChannelSwitch);
        if (TS.client && TS.client.unread) TS.client.unread.switched_sig.add(_logChannelSwitch);
        if (TS.client && TS.client.threads) TS.client.threads.switched_sig.add(_logChannelSwitch);
        TS.ms.connected_sig.add(_clearPromises);
      }
    },
    test: function() {
      var test_ob = {};
      Object.defineProperty(test_ob, "_queried_usernames", {
        get: function() {
          return _queried_usernames;
        },
        set: function(v) {
          _queried_usernames = v;
        }
      });
      return test_ob;
    },
    calcUnreadCnts: function(model_ob, controller, and_mark) {
      if (TS._incremental_boot) {
        return;
      }
      if (model_ob._did_defer_initial_msg_history) {
        if (TS.boot_data.feature_disable_history_prefetch) {
          TS.log(58, "calcUnreadCnts (" + model_ob.id + "): History prefetch disabled. msgs.length: " + (model_ob.msgs && model_ob.msgs.length));
        } else if (TS.boot_data.feature_delay_channel_history_fetch && !model_ob.is_im && !model_ob.is_mpim) {
          if (!model_ob._delayed_fetch_timer) {
            var min_delay = 2500;
            var max_delay = 1e4;
            var delay = _.random(min_delay, max_delay);
            if (TS.pri) TS.log(58, "calcUnreadCnts (" + model_ob.id + "): no history in model, no history call yet - delaying " + delay + " ms before history fetch.");
            model_ob._delayed_fetch_timer = window.setTimeout(function() {
              if (TS.pri) TS.log(58, "calcUnreadCnts (" + model_ob.id + "): fetching after " + delay + " ms delay.");
              delete model_ob._delayed_fetch_timer;
              TS.shared.checkInitialMsgHistory(model_ob, controller);
            }, delay);
          }
        } else {
          TS.shared.checkInitialMsgHistory(model_ob, controller);
          return;
        }
      }
      model_ob.unreads.length = 0;
      model_ob.unread_highlights.length = 0;
      model_ob.oldest_unread_ts = null;
      var msgs = model_ob.msgs;
      var was_cnt = model_ob.unread_cnt;
      var was_highlight_cnt = model_ob.unread_highlight_cnt;
      var msg;
      var some_can_cnt_as_unread = false;
      var this_can_cnt_as_unread = false;
      var can_have_any_unreads = true;
      var user_is_away = TS.model.user.presence === "away";
      if (!model_ob.was_archived_this_session) {
        if (model_ob.is_archived) can_have_any_unreads = false;
        if (model_ob.is_channel && !model_ob.is_member) can_have_any_unreads = false;
      }
      if (model_ob.is_im) {
        var member = TS.members.getMemberById(model_ob.user);
        if (member && member.deleted) can_have_any_unreads = false;
      }
      var model_ob_is_muted = TS.notifs.isCorGMuted(model_ob.id);
      var channel_mentions_can_count = model_ob.is_im || model_ob.is_mpim || TS.notifs.canModelObHaveChannelMentions(model_ob);
      if (can_have_any_unreads && msgs) {
        for (var i = 0; i < msgs.length; i += 1) {
          msg = msgs[i];
          if (msg.ts <= model_ob.last_read) continue;
          if (TS.utility.msgs.isTempMsg(msg) && !msg._alert_even_though_temp) continue;
          this_can_cnt_as_unread = TS.utility.msgs.msgCanCountAsUnread(msg);
          some_can_cnt_as_unread = some_can_cnt_as_unread || this_can_cnt_as_unread;
          if (!this_can_cnt_as_unread) continue;
          model_ob.unreads.push(msg.ts);
          if (!model_ob.oldest_unread_ts || msg.ts < model_ob.oldest_unread_ts) {
            model_ob.oldest_unread_ts = msg.ts;
          }
          if (channel_mentions_can_count) {
            var msg_time_ms = parseFloat(msg.ts) * 1e3;
            var ignore_at_here_mentions = user_is_away || msg_time_ms < TS.model.user._presence_last_changed;
            if (TS.utility.msgs.msgContainsMention(msg, ignore_at_here_mentions)) {
              model_ob.unread_highlights.push(msg.ts);
            }
          } else if (TS.utility.msgs.getMsgMentionData(msg).non_channel_mentions) {
            model_ob.unread_highlights.push(msg.ts);
          }
        }
      }
      if (!some_can_cnt_as_unread && model_ob.unreads.length) {
        model_ob.unreads.length = 0;
        model_ob.unread_highlights.length = 0;
        model_ob.oldest_unread_ts = null;
        if (and_mark) {
          controller.markMostRecentReadMsg(model_ob, TS.model.marked_reasons.none_qualify);
        }
      }
      if (TS.pri) TS.log(99, "TS.shared.calcUnreadCnts: " + model_ob.id + ", unreads.length: " + model_ob.unreads.length + " and_mark: " + and_mark);
      model_ob.unread_cnt = model_ob.unreads.length;
      if (model_ob_is_muted) {
        if (model_ob.unread_cnt) model_ob._show_in_list_even_though_no_unreads = true;
      }
      model_ob.unread_highlight_cnt = model_ob.unread_highlights.length;
      TS.shared.maybeMarkReadIfMuted(model_ob, controller);
      TS.utility.msgs.countAllUnreads();
      if (was_cnt != model_ob.unread_cnt) {
        controller.unread_changed_sig.dispatch(model_ob);
      }
      if (was_highlight_cnt != model_ob.unread_highlight_cnt) {
        controller.unread_highlight_changed_sig.dispatch(model_ob);
      }
      if (TS.client) {
        if (!model_ob._users_counts_info || !model_ob._users_counts_info.has_unreads) return;
        if (!model_ob._history_fetched_since_last_connect || model_ob.history_is_being_fetched) return;
        if (!model_ob.msgs.length || model_ob.unread_cnt) return;
        delete model_ob._users_counts_info;
        if (TS.notifs.isCorGMuted(model_ob.id)) {
          if (TS.pri) TS.log(99, "TS.shared.calcUnreadCnts: " + model_ob.id + ": ignoring possible users.counts has_unreads discrepancy because channel is muted.");
          return;
        }
        var current_model_ob = TS.shared.getActiveModelOb();
        if (current_model_ob && current_model_ob.id === model_ob.id) {
          if (TS.pri) TS.log(99, "TS.shared.calcUnreadCnts: " + model_ob.id + ": ignoring possible users.counts has_unreads discrepancy due to active channel.");
          return;
        }
        var latest = TS.utility.msgs.getMostRecentValidTs(model_ob);
        var mark_reason = TS.model.marked_reasons.none_qualify;
        TS.warn('Found users.counts discrepancy: has_unreads = true for "' + model_ob.id + '", but client calculated 0 unreads after fetching history (' + model_ob.msgs.length + ' msgs). Marking now with reason="' + mark_reason + '" to correct discrepancy, assuming last_read (' + model_ob.last_read + ") < latest (" + latest + ").");
        if (parseFloat(model_ob.last_read) >= parseFloat(latest)) {
          TS.warn('Error last >= latest for "' + model_ob.id + '"? Bailing, not attempting to mark.');
          return;
        }
        controller.markMostRecentReadMsg(model_ob, mark_reason);
      }
    },
    getLatestMsgTs: function(model_ob) {
      if (model_ob.latest && model_ob.latest.ts) {
        if (TS.pri) TS.console.log(58, "getLatestMsgTs (" + model_ob.id + "): returning model_ob.latest.ts of " + model_ob.latest.ts);
        return model_ob.latest.ts;
      }
      var result = model_ob.latest || model_ob._latest_via_users_counts;
      if (TS.pri) TS.console.log(58, "getLatestMsgTs (" + model_ob.id + "): no latest.ts, returning latest || _latest_via_users_counts (" + model_ob.latest + " || " + model_ob._latest_via_users_counts + ") -> " + result);
      return result;
    },
    queueConsistencyCheckAfterHistory: function(model_ob) {
      if (!model_ob) {
        TS.warn("queueConsistencyCheck: no model_ob");
        return;
      }
      if (model_ob._consistency_is_being_checked || model_ob._consistency_has_been_checked) return;
      var controller = TS.shared.getControllerForModelOb(model_ob);
      controller.history_fetched_sig.addOnce(function(history_model_ob) {
        if (!history_model_ob) return;
        if (history_model_ob._consistency_is_being_checked || history_model_ob._consistency_has_been_checked) return;
        if (TS.pri) TS.log(58, '"' + model_ob.id + '": fetched history, now checking consistency.');
        TS.utility.msgs.checkConsistencyViaApi(history_model_ob.id);
      });
    },
    maybeFetchHistoryAndThenCheckConsistency: function(model_ob) {
      var and_consistency = true;
      TS.shared.maybeFetchHistory(model_ob, and_consistency);
    },
    maybeFetchHistory: function(model_ob, also_check_consistency) {
      if (!model_ob) {
        TS.warn("maybeFetchHistory: no model_ob?");
        return;
      }
      var function_sig;
      if (TS.pri) function_sig = 'maybeFetchHistory: "' + model_ob.id + '": ';
      if (model_ob.history_is_being_fetched) {
        if (TS.pri) TS.log(58, function_sig + "history is being fetched already. Queueing consistency check and exiting.");
        TS.shared.queueConsistencyCheckAfterHistory(model_ob);
        return;
      }
      if (model_ob._history_fetched_since_last_connect) {
        if (TS.pri) TS.log(58, function_sig + "history already fetched.");
        TS.utility.msgs.checkConsistencyViaApi(TS.model.active_cid);
        return;
      }
      if (TS.pri) {
        if (also_check_consistency) {
          TS.log(58, function_sig + "checking history first, then consistency.");
        } else {
          TS.log(58, function_sig + "checking history.");
        }
      }
      if (also_check_consistency) TS.shared.queueConsistencyCheckAfterHistory(model_ob);
      var controller = TS.shared.getControllerForModelOb(model_ob);
      TS.shared.checkInitialMsgHistory(model_ob, controller);
      if (TS.client && TS.client.msg_pane) TS.client.msg_pane.maybeClearNewMsgsTimer(model_ob);
    },
    checkInitialMsgHistory: function(model_ob, controller, defer_api_check) {
      if (model_ob.history_is_being_fetched) {
        TS.warn('checkInitialMsgHistory NOT DOING ANYTHING, because "' + model_ob.id + '" history_is_being_fetched:true');
        return;
      }
      if (TS.boot_data.feature_delay_channel_history_fetch && model_ob._delayed_fetch_timer) {
        if (TS.pri) TS.log(58, "checkInitialMsgHistory (" + model_ob.id + "): Clearing _delayed_fetch_timer and fetching immediately");
        window.clearTimeout(model_ob._delayed_fetch_timer);
        delete model_ob._delayed_fetch_timer;
      }
      delete model_ob._did_defer_initial_msg_history;
      if (defer_api_check) {
        model_ob._needs_unread_recalc = true;
      } else {
        TS.utility.msgs.maybeFetchUserDataFromLS(model_ob);
      }
      var initial_count = TS.model.initial_msgs_cnt;
      var latest_ts = TS.shared.getLatestMsgTs(model_ob);
      var msg = TS.utility.msgs.getMsg(latest_ts, model_ob.msgs);
      if (msg && !model_ob._history_fetched_since_last_connect) {
        if (TS.pri) TS.log(58, 'We have all recent "' + model_ob.id + '" messages, but have not fetched history since last connect. Will fetch, omitting "latest".');
        msg = null;
        latest_ts = null;
      }
      var api_args;
      if (msg) {
        TS.log(58, 'we have all recent "' + model_ob.id + '" msgs unread_count:' + model_ob.unread_count + " unread_cnt:" + model_ob.unread_cnt + " initial_count:" + initial_count);
        TS.shared.maybeDealWithAllSentTempMsgs(model_ob, controller);
        var status = TS.utility.msgs.getOlderMsgsStatus(model_ob);
        if (model_ob.msgs.length < TS.model.initial_msgs_cnt && status.more) {
          if (TS.isPartiallyBooted()) {} else {
            TS.error("calling loadHistory because status.more=true && model_ob.msgs.length < TS.model.initial_msgs_cnt: " + model_ob.msgs.length + " < " + TS.model.initial_msgs_cnt);
            TS.dir(0, status, model_ob.id);
            TS.shared.loadHistory(model_ob, controller, initial_count);
          }
          return true;
        }
      } else if (defer_api_check) {
        model_ob._did_defer_initial_msg_history = true;
      } else {
        if (TS.boot_data && TS.boot_data.feature_disable_history_prefetch) {
          if (TS.shared.getActiveModelOb().id === model_ob.id) {
            TS.log(58, "checkInitialMsgHistory: Allowing fetch for active of " + model_ob.id);
          } else {
            TS.log(58, "checkInitialMsgHistory: NOT fetching for " + model_ob.id + " (not active)");
            return;
          }
        }
        TS.log(58, 'WE DO NOT HAVE ALL RECENT MESSAGES for "' + model_ob.id + '" unread_count:' + model_ob.unread_count + " unread_cnt:" + model_ob.unread_cnt + " initial_count:" + initial_count);
        var no_oldest = false;
        if (!model_ob.msgs.length) {}
        api_args = {
          channel: model_ob.id,
          count: initial_count,
          inclusive: typeof model_ob.latest === "string",
          ignore_replies: true
        };
        if (latest_ts) {
          api_args.latest = latest_ts;
        }
        if (no_oldest) {
          TS.log(58, 'we have some but not all recent "' + model_ob.id + '" msgs but we no_oldest so are not setting oldest for api call');
        } else if (model_ob.msgs.length && !TS.utility.msgs.isTempMsg(model_ob.msgs[0])) {
          TS.log(58, 'we have some but not all recent "' + model_ob.id + '" msgs');
          api_args.oldest = model_ob.msgs[0].ts;
        } else {
          TS.log(58, 'we have no "' + model_ob.id + '" msgs');
        }
        if (!model_ob._history_fetched_since_last_connect) {
          if (!model_ob.msgs.length) {
            if (TS.pri) TS.log(58, 'we have no msgs for "' + model_ob.id + '", and have not fetched history since last connection');
            if (api_args.latest) {
              if (TS.pri) TS.log(58, "no msgs.length. dropping api_args.latest of " + api_args.latest + ' for "' + model_ob.id + '"');
              delete api_args.latest;
            }
            if (api_args.oldest) {
              if (TS.pri) TS.log(58, "no msgs.length. dropping api_args.oldest of " + api_args.oldest + ' for "' + model_ob.id + '"');
              delete api_args.oldest;
            }
          } else if (model_ob.msgs.length === 1 && !TS.utility.msgs.isTempMsg(model_ob.msgs[0])) {
            if (TS.pri) TS.log(58, 'first new message on "' + model_ob.id + ", fetching history without any latest/oldest");
            delete api_args.latest;
            delete api_args.oldest;
          } else {
            if (TS.pri) TS.log(58, "we have some (" + model_ob.msgs.length + ') but not all recent msgs for "' + model_ob.id + '", and have not fetched history since last connection');
            if (api_args.latest) {
              if (TS.pri) TS.log(58, 'first history fetch since connect for "' + model_ob.id + '" - deleting api_args.latest of ' + api_args.latest);
              delete api_args.latest;
            }
            if (api_args.oldest && api_args.count) {
              if (TS.pri) TS.log(58, "We have api_args.oldest, fetching oldest + " + api_args.count + ' messages on "' + model_ob.id + '" to get client up-to-date.');
            }
          }
        }
        var doIt = function() {
          if (model_ob.history_is_being_fetched) {
            if (TS.pri) TS.log(58, 'NOT fetching history on "' + model_ob.id + '", history already being fetched');
          } else {
            if (TS.pri) TS.log(58, 'fetching history for "' + model_ob.id + '" with api_args', api_args);
            if (TS.useRedux()) {
              model_ob = TS.redux.channels.getUpdatedReferenceToEntity(model_ob);
            }
            controller.fetchHistory(model_ob, api_args);
          }
        };
        if (TS.model.ms_connected) {
          doIt();
        } else {
          TS.ms.connected_sig.addOnce(doIt);
        }
      }
    },
    maybeLoadScrollBackHistory: function(model_ob, controller, force) {
      if (!force && model_ob.scroll_top !== 0) return false;
      var status = TS.utility.msgs.getOlderMsgsStatus(model_ob);
      if (!status.more) {
        TS.info("Not loading scrollback in " + model_ob.id + ": " + status.text);
        if (status.code === 3) {
          var debug_old_msg_timestamps = _.map(model_ob.msgs, "ts");
          TS.shared.checkForMoreMsgs(model_ob).then(function() {
            var message;
            message = "more messages than expected in " + model_ob.id;
            TS.logError(message, "oldest_msg_ts or is_limited is wrong", "Scrollback history error");
            var debug_new_msg_timestamps = _.map(model_ob.msgs, "ts");
            var debug_timestamp_differences_old = _.difference(debug_old_msg_timestamps, debug_new_msg_timestamps);
            var debug_timestamp_differences_new = _.difference(debug_new_msg_timestamps, debug_old_msg_timestamps);
            if (debug_timestamp_differences_old.length || debug_timestamp_differences_new.length) {
              message = "timestamps not present in new data:" + debug_timestamp_differences_old.toString() + "; timestamps not present in old data: " + debug_timestamp_differences_new.toString();
              TS.logError(message, "Found a difference in timestamps before and after history call", "Scrollback history error");
            } else {
              TS.log(null, "Did not find a difference between old and new timestamp data after history API call.");
            }
            if (TS.shared.getActiveModelOb().id !== model_ob.id || model_ob.history_is_being_fetched) return;
            if (model_ob.is_limited) model_ob.is_limited = false;
            if (model_ob.oldest_msg_ts) TS.utility.msgs.resetOldestMsgsTs(model_ob);
            TS.shared.loadScrollBackHistory(model_ob, controller);
          }, _.noop);
        }
        return false;
      }
      return TS.shared.loadScrollBackHistory(model_ob, controller);
    },
    loadScrollBackHistory: function(model_ob, controller) {
      if (!model_ob.msgs.length) {
        if (TS.pri) TS.log(58, "TS.shared.loadScrollbackHistory: No messages in " + model_ob.id + " yet; not loading scrollback history.");
        if (!model_ob._history_fetched_since_last_connect) {
          if (TS.pri) TS.log(58, "TS.shared.loadScrollBackHistory: No messages, and history has not been fetched since last connect; doing an initial fetch.");
          TS.shared.checkInitialMsgHistory(model_ob, controller);
        }
        return;
      }
      TS.info(model_ob.id + " HAS MORE");
      TS.shared.loadHistory(model_ob, controller);
      model_ob.has_fetched_history_after_scrollback = true;
      model_ob.fetched_history_after_scrollback_time = Date.now();
      return true;
    },
    loadHistory: function(model_ob, controller, count) {
      var api_args = {
        channel: model_ob.id,
        latest: model_ob.msgs[model_ob.msgs.length - 1].ts,
        count: count || TS.model.subsequent_msgs_cnt,
        ignore_replies: true
      };
      controller.fetchHistory(model_ob, api_args);
    },
    checkForMoreMsgs: function(model_ob) {
      var api_args = {
        channel: model_ob.id,
        latest: model_ob.msgs[model_ob.msgs.length - 1].ts,
        count: 1,
        ignore_replies: true
      };
      return TS.api.call(TS.shared.getHistoryApiMethodForModelOb(model_ob), api_args).then(function(res) {
        if (res.data.messages && res.data.messages.length > 0) {
          return Promise.resolve(res);
        }
        return Promise.reject(new Error("No more messages"));
      });
    },
    onSendMsg: function(success, imsg, model_ob, controller) {
      var temp_msg = TS.utility.msgs.getMsgByRspId(imsg.reply_to, model_ob.msgs);
      if (!success) {
        if (temp_msg) {
          TS.model.unsent_msgs[temp_msg.ts] = true;
          controller.msg_not_sent_sig.dispatch(model_ob, temp_msg, imsg);
        } else {
          TS.error("that makes no sense");
        }
        return;
      }
      TS.view.scroll_down_when_msg_from_user_is_added = true;
      var new_msg;
      if (temp_msg) {
        new_msg = _.cloneDeep(temp_msg);
        new_msg.text = imsg.text;
        new_msg.ts = imsg.ts;
        delete new_msg.rsp_id;
        controller.removeMsg(model_ob.id, temp_msg);
      } else {
        TS.warn("no temp msg for " + imsg.reply_to);
        new_msg = {
          text: imsg.text,
          user: TS.model.user.id,
          ts: imsg.ts
        };
      }
      if (imsg.SENT_MSG.thread_ts) {
        new_msg.thread_ts = imsg.SENT_MSG.thread_ts;
      }
      controller.addMsg(imsg.SENT_MSG.channel || model_ob.id, TS.utility.msgs.processImsg(new_msg, model_ob.id));
      var channel_type;
      if (model_ob.is_channel) {
        channel_type = TS.i18n.t("channel", "shared")();
      } else if (model_ob.is_group && !model_ob.is_mpim) {
        channel_type = TS.i18n.t("private channel", "shared")();
      } else {
        return;
      }
      var subteam_matches = imsg.text.match(/<!subteam(.*?)>/g);
      if (subteam_matches) {
        for (var k = 0; k < subteam_matches.length; k += 1) {
          var cmd = subteam_matches[k].replace(">", "").replace("<", "");
          cmd = cmd.split("|")[0];
          var user_group_id = cmd.split("^")[1];
          if (!user_group_id) continue;
          (function(local_user_group_id) {
            TS.user_groups.getUserGroupMembers(local_user_group_id, function(updated_group) {
              var user_group_member_ids = _.uniq(updated_group.users);
              if (!user_group_member_ids) return;
              TS.membership.ensureChannelMembershipIsKnownForUsers(model_ob.id, user_group_member_ids).then(function() {
                var member_ids_not_in_channel = [];
                user_group_member_ids.forEach(function(member_id) {
                  if (!TS.membership.getUserChannelMembershipStatus(member_id, model_ob).is_member) {
                    member_ids_not_in_channel.push(member_id);
                  }
                });
                if (!member_ids_not_in_channel.length) return null;
                var ts = TS.utility.date.makeTsStamp();
                var name = "<!subteam^" + local_user_group_id + ">";
                var count = member_ids_not_in_channel.length;
                var prompt = "TS.client.ui.promptForGroupOrChannelInvite('" + model_ob.id + "', '" + member_ids_not_in_channel.join(",") + "', '" + ts + "')";
                var message = "TS.client.ui.sendChannelMsgThroughSlackBot('" + model_ob.id + "', '" + imsg.ts + "', '" + member_ids_not_in_channel.join(",") + "', '" + ts + "')";
                var nothing = "TS.utility.msgs.removeEphemeralMsg('" + model_ob.id + "', '" + ts + "')";
                TS.client.msg_pane.addMaybeClick(prompt, TS.client.ui.promptForGroupOrChannelInvite.bind(Object.create(null), model_ob.id, member_ids_not_in_channel.join(","), ts));
                TS.client.msg_pane.addMaybeClick(message, TS.client.ui.sendChannelMsgThroughSlackBot.bind(Object.create(null), model_ob.id, imsg.ts, member_ids_not_in_channel.join(","), ts));
                TS.client.msg_pane.addMaybeClick(nothing, TS.utility.msgs.removeEphemeralMsg.bind(Object.create(null), model_ob.id, ts));
                var bot_text = "";
                bot_text = TS.i18n.t("{member_count, plural, =1 {One member} =2 {Two members} =3 {Three members} =4 {Four members} =5 {Five members} =6 {Six members} =7 {Seven members} =8 {Eight members} =9 {Nine members} =10 {Ten members} other {# members}} of the {name} group {member_count, plural, =1 {isn’t} other {aren’t}} in this {channel}. ", "shared")({
                  name: name,
                  member_count: count,
                  channel: channel_type
                });
                if (model_ob.id.charAt(0) === "G") {
                  bot_text += TS.i18n.t("If you’d like I can <javascript:{prompt}|invite them to join>, or, <javascript:{nothing}|do nothing>.", "shared")({
                    prompt: prompt,
                    nothing: nothing
                  });
                } else {
                  bot_text += TS.i18n.t("If you’d like Slack can <javascript:{message}|notify them about your message>.", "shared")({
                    message: message
                  });
                }
                TS.client.ui.addEphemeralBotMsg({
                  channel: model_ob.id,
                  ts: ts,
                  text: bot_text,
                  thread_ts: new_msg.thread_ts
                });
                return null;
              });
            });
          })(user_group_id);
        }
      }
      var stats_enabled = TS.client && TS.client.stats && TS.client.stats.isEnabled();
      if (stats_enabled) TS.metrics.measureAndClear("send_msg_" + TS.shared.getTypeForModelOb(), "msg_input_try_to_submit");
    },
    sendMsg: function(c_id, raw_text, controller, in_reply_to_msg, should_broadcast_reply) {
      if (!raw_text) return false;
      var model_ob = TS.shared.getModelObById(c_id);
      var d = model_ob && model_ob.msgs && model_ob.msgs[0] && TS.utility.date.toDateObject(model_ob.msgs[0].ts + 1) || Date.now();
      var temp_ts = TS.utility.date.makeTsStamp(d);
      var text = TS.format.cleanMsg(raw_text);
      if (!TS.boot_data.feature_name_tagging_client) {
        var possible_at_mentions = _(TS.utility.members.getUsernamesMentionedInString(raw_text)).reject(TS.members.getMemberByName).reject(TS.user_groups.getUserGroupsByHandle).reject(function(username) {
          return _queried_usernames[username];
        }).value();
        if (possible_at_mentions.length > 0) {
          var this_context = this;
          var args = arguments;
          _tryFetchingMembersWithUsernames(possible_at_mentions).then(function() {
            TS.shared.sendMsg.apply(this_context, args);
          });
          return true;
        }
      }
      var params = {
        type: "message",
        channel: c_id,
        text: $.trim(text)
      };
      if (in_reply_to_msg) {
        params.thread_ts = in_reply_to_msg.thread_ts || in_reply_to_msg.ts;
        params.reply_broadcast = should_broadcast_reply;
      }
      var rsp_id = TS.ms.send(params, controller.onSendMsg, temp_ts);
      TS.typing.userEnded(model_ob);
      var placeholder_msg = {
        type: "message",
        text: text,
        user: TS.model.user.id,
        ts: temp_ts,
        rsp_id: rsp_id
      };
      TS.ui.handy_rxns.decorateMsg(placeholder_msg, placeholder_msg.text);
      if (params.thread_ts) {
        placeholder_msg.thread_ts = params.thread_ts;
        placeholder_msg._hidden_reply = true;
        placeholder_msg._was_reply_broadcast = params.reply_broadcast;
      }
      controller.addMsg(c_id, placeholder_msg);
      TS.shared.msg_sent_sig.dispatch(model_ob, rsp_id);
      return true;
    },
    sendMsgGroup: function(model_ob_id, text, controller, in_reply_to_msg, should_broadcast_reply) {
      var model_ob = TS.shared.getModelObById(model_ob_id);
      var model_label = model_ob.is_mpim ? TS.i18n.t("conversation", "shared")() : TS.i18n.t("channel", "shared")();
      var model_label_untranslated = model_ob.is_mpim ? "conversation" : "channel";
      if (!model_ob) return false;
      if (model_ob.is_archived) return false;
      var general = TS.channels.getGeneralChannel();
      var errorOut = function(err_txt) {
        TS.generic_dialog.alert(err_txt).then(function() {
          if (in_reply_to_msg) {
            TS.ui.replies.focusReplyInput();
          } else {
            TS.view.focusMessageInput();
          }
        });
        if (in_reply_to_msg) {
          TS.ui.replies.populateReplyInput(text);
        } else {
          TS.utility.contenteditable.value(TS.client.ui.$msg_input, text);
        }
      };
      var clean_text = TS.format.cleanMsg(text);
      var is_reply = !!in_reply_to_msg;
      var err_txt;
      if (TS.model.everyone_regex.test(clean_text) && !is_reply) {
        if (!TS.permissions.members.canAtMentionEveryone()) {
          err_txt = "<p>" + TS.i18n.t("A Team Owner has restricted the use of <strong>{everyone}</strong> messages.", "shared")({
            everyone: TS.templates.builders.atLabel("everyone")
          }) + "</p>";
          if (TS.permissions.members.canAtChannelOrGroup()) {
            err_txt += '<p class="no_bottom_margin">' + TS.i18n.t("If you just want to address everyone in this {conversation_or_channel}, use <strong>{at_label}</strong> instead.", "shared")({
              conversation_or_channel: model_label,
              at_label: TS.templates.builders.atLabel(model_label_untranslated)
            }) + "</p>";
          } else if (TS.model.user.is_restricted) {
            err_txt = "<p>" + TS.i18n.t("Your account is restricted, and you cannot send <strong>{everyone}</strong> messages.", "shared")({
              everyone: TS.templates.builders.atLabel("everyone")
            }) + "</p>";
          }
          errorOut(err_txt);
          return false;
        }
        if (!general || !general.is_member) {
          err_txt = "<p>" + TS.i18n.t("You cannot send <strong>{everyone}</strong> messages.", "shared")({
            everyone: TS.templates.builders.atLabel("everyone")
          }) + "</p>";
          if (TS.permissions.members.canAtChannelOrGroup()) {
            err_txt += '<p class="no_bottom_margin">' + TS.i18n.t("If you just want to address everyone in this {conversation_or_channel}, use <strong>{at_label}</strong> instead.", "shared")({
              conversation_or_channel: model_label,
              at_label: TS.templates.builders.atLabel(model_label_untranslated)
            }) + "</p>";
          }
          errorOut(err_txt);
        } else {
          TS.generic_dialog.start({
            title: TS.i18n.t("Send {everyone} a message", "shared")({
              everyone: TS.templates.builders.atLabel("everyone")
            }),
            body: TS.i18n.t('<p class="bold">Would you like to switch to {general_channel} and send your message?</p><p class="">Using <strong>{everyone}</strong> in a message is a way to address your whole team, but it must be done in the {general_channel} channel.</p><p class="no_bottom_margin">If you just want to address everyone in this {conversation_or_channel}, use <strong>{channel}</strong> instead.</p>', "shared")({
              general_channel: "#" + TS.utility.htmlEntities(general.name),
              conversation_or_channel: model_label,
              everyone: TS.templates.builders.atLabel("everyone"),
              channel: TS.templates.builders.atLabel("channel")
            }),
            show_cancel_button: true,
            show_go_button: true,
            go_button_text: TS.i18n.t("Yes, send it", "shared")(),
            onGo: function() {
              TS.channels.displayChannel({
                id: general.id,
                and_send_txt: text
              });
            },
            onCancel: function() {
              TS.utility.contenteditable.value(TS.client.ui.$msg_input, text);
              TS.view.focusMessageInput();
            }
          });
        }
        return false;
      }
      var is_at_here = TS.model.here_regex.test(clean_text);
      var is_at_group = (TS.model.channel_regex.test(clean_text) || TS.model.group_regex.test(clean_text)) && !is_reply;
      if ((is_at_group || is_at_here) && !TS.permissions.members.canAtChannelOrGroup()) {
        var key_word = is_at_here ? TS.templates.builders.atLabel("here") : TS.templates.builders.atLabel("channel");
        err_txt = "<p>" + TS.i18n.t("A Team Owner has restricted the use of <strong>{key_word}</strong> messages.", "shared")({
          key_word: key_word
        }) + "</p>";
        errorOut(err_txt);
        return false;
      }
      if (!is_reply && TS.ui.needToShowAtChannelWarning(model_ob_id, text)) {
        TS.ui.at_channel_warning_dialog.startInMessagePane(model_ob_id, text, controller);
        return false;
      }
      return TS.shared.sendMsg(model_ob_id, text, controller, in_reply_to_msg, should_broadcast_reply);
    },
    onHistory: function(model_ob, data, args, controller) {
      var msgs = model_ob.msgs;
      var imsg;
      if (data.is_limited) {
        if (TS.pri) TS.log(58, 'data.is_limited case: setting has_more = false, is_limited = true for "' + model_ob.id + '"', args);
        data.has_more = false;
        model_ob.is_limited = true;
      }
      var needs_unread_recalc;
      if (!model_ob._history_fetched_since_last_connect) {
        if (TS.pri) TS.log(58, 'first history fetch for "' + model_ob.id + '"', args);
        if (TS.client && TS.client.msg_pane) TS.client.msg_pane.maybeResetUnreadsCheck(model_ob);
        if (args.oldest) {
          if (!data.has_more) {
            if (TS.pri) TS.log(58, 'first history fetch. has_more is false for "' + model_ob.id + '" - we should have all recent msgs. Setting _history_fetched_since_last_connect.', args);
            model_ob._history_fetched_since_last_connect = true;
            if (model_ob.history_is_being_fetched) {
              if (TS.pri) TS.log(58, 'Resetting history_is_being_fetched for "' + model_ob.id + '"');
              model_ob.history_is_being_fetched = false;
            }
            needs_unread_recalc = true;
            if (TS.client && TS.client.msg_pane) {
              TS.client.msg_pane.maybeStartNewMsgsTimer(model_ob);
            }
          } else {
            model_ob.msgs = [];
            api_args = {
              channel: model_ob.id,
              count: TS.model.initial_msgs_cnt,
              inclusive: true
            };
            if (TS.pri) TS.log(58, 'first history fetch. has_more is TRUE for "' + model_ob.id + '" - dumping history and fetching most recent ' + TS.model.initial_msgs_cnt + " msgs. prior history call data follows.", args);
            controller.fetchHistory(model_ob, api_args);
            return true;
          }
        } else {
          if (TS.boot_data.feature_scrollback_half_measures && TS.model.prefs.start_scroll_at_oldest) {
            var last_read = parseInt(model_ob.last_read, 10) ? model_ob.last_read : null;
            if (data.messages && last_read && !args._second_attempt_for_last_read) {
              var oldest_msg = _.minBy(data.messages, "ts");
              if (oldest_msg && oldest_msg.ts > last_read) {
                var api_args = {
                  channel: model_ob.id,
                  count: 3 * TS.model.initial_msgs_cnt,
                  inclusive: true,
                  _second_attempt_for_last_read: true
                };
                if (TS.pri) TS.log(58, "last_read for " + model_ob.id + " is older than the first history response, trying again with a larger count");
                controller.fetchHistory(model_ob, api_args);
                return true;
              }
            }
          }
          if (TS.pri) TS.log(58, 'first history fetch. no "oldest" param for "' + model_ob.id + '", marking _history_fetched_since_last_connect = true.', args);
          model_ob._history_fetched_since_last_connect = true;
          if (model_ob.history_is_being_fetched) {
            if (TS.pri) TS.log(58, 'Resetting history_is_being_fetched for "' + model_ob.id + '"');
            model_ob.history_is_being_fetched = false;
          }
          needs_unread_recalc = true;
          if (TS.client && TS.client.msg_pane) TS.client.msg_pane.maybeStartNewMsgsTimer(model_ob);
        }
      }
      if (args.oldest) {
        if (data.has_more) {
          TS.info(model_ob.id + " has more than one page of msg history between what is in cache and the latest, so let's dump what we have and just use this page of results");
          TS.info(model_ob.id + " args.oldest:" + args.oldest);
          msgs.length = 0;
          if (model_ob.is_limited) model_ob.is_limited = false;
        }
      }
      var new_msgs = [];
      var new_msgs_tses = [];
      if (data.messages) {
        for (var i = 0; i < data.messages.length; i += 1) {
          if (!TS.utility.msgs.getMsg(data.messages[i].ts, msgs)) {
            imsg = data.messages[i];
            new_msgs.push(TS.utility.msgs.processImsgFromHistory(imsg, model_ob.id));
            new_msgs_tses.push(imsg.ts);
          }
        }
        if (TS.pri) TS.log(58, 'got history for "' + model_ob.id + '", added ' + new_msgs.length + " new messages out of " + data.messages.length + " total.");
      }
      if (TS.boot_data.feature_tinyspeck && model_ob._msgs_to_merge_on_history && model_ob._msgs_to_merge_on_history.length) {
        var did_add_merged_messages;
        _.each(model_ob._msgs_to_merge_on_history, function(item) {
          if (new_msgs_tses.indexOf(item.ts) === -1 && !TS.utility.msgs.getMsg(item.ts, msgs) && !TS.utility.msgs.isTempMsg(item)) {
            if (TS.boot_data.feature_tinyspeck) TS.warn('got history for "' + model_ob.id + '", merging in msg with ts=' + item.ts + " because it was not included in the history response.", args);
            new_msgs.push(TS.utility.msgs.processImsgFromHistory(item, model_ob.id));
            did_add_merged_messages = true;
          } else if (TS.pri) {
            TS.log(58, "NOT merging message for " + model_ob.id + " with ts = " + item.ts + " because it already exists, or is temporary.");
          }
        });
        model_ob._msgs_to_merge_on_history = null;
      }
      if (new_msgs.length && !TS.utility.msgs.getDisplayedMsgs(new_msgs).length) {
        TS.warn("no displayed msgs in this page for " + model_ob.id + " ! We expect TS.client.ui.afterHistoryFetch to detect this and load another page");
      }
      msgs = new_msgs.concat(msgs);
      if (did_add_merged_messages) TS.utility.msgs.sortMsgs(msgs);
      msgs = TS.utility.msgs.setMsgs(model_ob, msgs);
      TS.log(4, model_ob.id + " msgs has more history now");
      if (model_ob.latest && model_ob.latest.ts && !TS.utility.msgs.getMsg(model_ob.latest.ts, msgs)) {
        TS.log(4, "tacking on latest msg " + model_ob.latest.ts);
        imsg = model_ob.latest;
        TS.utility.msgs.appendMsg(msgs, TS.utility.msgs.processImsgFromHistory(imsg, model_ob.id));
        TS.utility.msgs.sortMsgs(msgs);
      }
      if (!args.oldest) {
        if (!data.has_more && !data.is_limited) {
          TS.utility.msgs.setOldestMsgsTs(model_ob);
        }
      }
      TS.shared.maybeDealWithAllSentTempMsgs(model_ob, controller);
      if (needs_unread_recalc) {
        if (TS.pri) TS.log(58, "onHistory: post-message merge, doing recalc of unread counts for " + model_ob.id);
        var and_mark = false;
        controller.calcUnreadCnts(model_ob, and_mark);
      }
    },
    maybeDealWithAllSentTempMsgs: function(model_ob, controller) {
      if (!TS.ms) return;
      _.forOwn(TS.ms.sent_map, function(sent_data, k) {
        if (sent_data.msg.channel != model_ob.id) return;
        var temp_ts = sent_data.temp_ts;
        var temp_msg = TS.utility.msgs.getMsg(temp_ts, model_ob.msgs);
        if (!temp_msg) return;
        var existing_msg = TS.utility.msgs.getNonTempMsgFromUserMatchingText(sent_data.msg.text, TS.model.user.id, model_ob.msgs);
        if (existing_msg) {
          var existing_time = TS.utility.date.toDateObject(existing_msg.ts);
          var temp_time = TS.utility.date.toDateObject(temp_ts);
          if (existing_time < temp_time) {
            TS.info("existing_msg time is older than temp_msg time, so it can’t be the message we were looking for");
            existing_msg = null;
          }
        }
        if (!existing_msg) {
          TS.warn("not removing, we don’t appear to have this non-temp message: " + sent_data.msg.ts);
          TS.model.unsent_msgs[temp_msg.ts] = true;
          controller.msg_not_sent_sig.dispatch(model_ob, temp_msg);
          return;
        }
        TS.info("removing temp_msg: " + temp_msg.ts + " existing_msg:" + existing_msg.ts);
        delete TS.ms.sent_map[k];
        if (!controller) controller = TS.shared.getControllerForModelOb(model_ob);
        if (_.isFunction(controller.removeMsg)) controller.removeMsg(model_ob.id, temp_msg);
      });
    },
    getControllerForModelOb: function(model_ob) {
      if (!model_ob) return {};
      if (model_ob.is_im) {
        return TS.ims;
      } else if (model_ob.is_mpim) {
        return TS.mpims;
      } else if (model_ob.is_group) {
        return TS.groups;
      }
      return TS.channels;
    },
    getActiveModelOb: function() {
      var model_ob;
      if (TS.client) {
        if (TS.model.active_channel_id) {
          model_ob = TS.channels.getChannelById(TS.model.active_channel_id);
        } else if (TS.model.active_im_id) {
          model_ob = TS.ims.getImById(TS.model.active_im_id);
        } else if (TS.model.active_mpim_id) {
          model_ob = TS.mpims.getMpimById(TS.model.active_mpim_id);
        } else if (TS.model.active_group_id) {
          model_ob = TS.groups.getGroupById(TS.model.active_group_id);
        }
      } else if (TS.boot_data.channel_id) {
        model_ob = TS.channels.getChannelById(TS.boot_data.channel_id);
      } else if (TS.boot_data.im_id) {
        model_ob = TS.ims.getImById(TS.boot_data.im_id);
      } else if (TS.boot_data.mpim_id) {
        model_ob = TS.mpims.getMpimById(TS.boot_data.mpim_id);
      } else if (TS.boot_data.group_id) {
        model_ob = TS.groups.getGroupById(TS.boot_data.group_id);
      } else {
        TS.warn("error getActiveModelOb found no ob");
        TS.warn("TS.boot_data.channel_id: " + TS.boot_data.channel_id);
        TS.warn("TS.boot_data.im_id: " + TS.boot_data.im_id);
        TS.warn("TS.boot_data.group_id: " + TS.boot_data.group_id);
      }
      return model_ob;
    },
    getDisplayNameForModelOb: function(model_ob) {
      if (model_ob.is_mpim) {
        return TS.mpims.getDisplayName(model_ob);
      } else if (model_ob.is_im) {
        var escaped = false;
        var include_at_sign = true;
        return TS.members.getMemberDisplayNameById(model_ob.user, escaped, include_at_sign);
      } else if (model_ob.is_group || model_ob.is_private) {
        return model_ob.name;
      } else if (model_ob.is_channel) {
        return "#" + model_ob.name;
      }
      TS.warn("getDisplayNameForModelOb: unknown model_ob type: " + model_ob.id);
      return model_ob.id;
    },
    getTypeForModelOb: function(model_ob) {
      model_ob = model_ob || TS.shared.getActiveModelOb();
      if (!model_ob) return "";
      if (model_ob.is_mpim) return "mpim";
      if (model_ob.is_slackbot_im) return "slackbot";
      if (model_ob.is_im) return "im";
      if (model_ob.is_group) return "group";
      if (model_ob.is_channel) return "channel";
      return "";
    },
    getDisplayNameForModelObNoSigns: function(model_ob) {
      if (model_ob.is_mpim) {
        return TS.mpims.getDisplayName(model_ob);
      } else if (model_ob.is_im) {
        var escaped = false;
        var include_at_sign = false;
        return TS.members.getMemberDisplayNameById(model_ob.user, escaped, include_at_sign);
      } else if (model_ob.is_group || model_ob.is_channel) {
        return model_ob.name;
      }
      TS.warn("getDisplayNameForModelOb: unknown model_ob type: " + model_ob.id);
      return model_ob.id;
    },
    getEntitiesFilteredBy: function(type, filter) {
      if (!type) return [];
      if (!filter) {
        return TS.model[type];
      }
      return _.filter(TS.model[type], filter);
    },
    getModelObById: function(id) {
      if (!id) return null;
      var ob_type = id[0];
      if (ob_type === "C") {
        return TS.channels.getChannelById(id);
      } else if (ob_type === "G") {
        return TS.mpims.getMpimById(id) || TS.groups.getGroupById(id);
      } else if (ob_type === "S") {
        return TS.user_groups.getUserGroupsById(id);
      } else if (ob_type === "E") {
        return TS.emoji.getEmojiById(id);
      } else if (ob_type === "B") {
        return TS.bots.getBotById(id);
      } else if (ob_type === "U" || ob_type === "W") {
        return TS.members.getMemberById(id);
      }
      return TS.ims.getImById(id);
    },
    getAllModelObsForUser: function() {
      return TS.channels.getChannelsForUser().concat(TS.model.groups, TS.model.ims, TS.model.mpims);
    },
    getShareModelObId: function(model_ob_id, callback) {
      var im;
      var channel;
      var maybeCancelArchivesView = function(id) {
        if (TS.model.archive_view_is_showing && TS.client.archives.current_model_ob.id == id) {
          TS.client.archives.cancel();
        }
      };
      if (model_ob_id && TS.utility.strLooksLikeAMemberId(model_ob_id)) {
        im = TS.ims.getImByMemberId(model_ob_id);
        if (!im) {
          TS.api.call("im.open", {
            user: model_ob_id,
            return_im: true,
            reason: "TS.shared.getShareModelObId"
          }, function(ok, data, args) {
            if (ok) {
              TS.ims.onOpened(ok, data, args);
              im = TS.ims.getImByMemberId(model_ob_id);
              if (im) {
                callback(im.id);
              } else if (TS.web) {
                callback(data.channel.id);
              } else {
                TS.error("getShareModelObId opened an IM, but it is not in the model? data.channel.id: " + data.channel.id);
              }
            } else {
              TS.error("getShareModelObId try to open an IM, but failed data: " + JSON.stringify(data || null));
            }
          });
        } else {
          model_ob_id = im.id;
          maybeCancelArchivesView(model_ob_id);
          callback(model_ob_id);
        }
      } else if (model_ob_id && model_ob_id.charAt(0) === "C") {
        channel = TS.channels.getChannelById(model_ob_id);
        if (!channel.is_member && !channel.is_archived) {
          TS.channels.join(channel.name, function(ok) {
            if (ok) {
              callback(model_ob_id);
            } else {
              callback(model_ob_id);
            }
          });
        } else {
          maybeCancelArchivesView(model_ob_id);
          callback(model_ob_id);
        }
      } else {
        maybeCancelArchivesView(model_ob_id);
        callback(model_ob_id);
      }
    },
    getModelObIdForSendingMsg: function(id, callback) {
      var im;
      var channel;
      if (id && TS.utility.strLooksLikeAMemberId(id)) {
        im = TS.ims.getImByMemberId(id);
        if (!im) {
          TS.api.call("im.open", {
            user: id,
            return_im: true,
            reason: "TS.shared.getModelObIdForSendingMsg"
          }, function(ok, data, args) {
            if (ok) {
              TS.ims.onOpened(ok, data, args);
              im = TS.ims.getImByMemberId(id);
              if (im) {
                callback(im.id);
              } else if (TS.web) {
                callback(data.channel.id);
              } else {
                TS.error("getModelObIdForSendingMsg opened an IM, but it is not in the model? data.channel.id: " + data.channel.id);
              }
            } else {
              TS.error("getModelObIdForSendingMsg try to open an IM, but failed data: " + JSON.stringify(data || null));
            }
          });
        } else {
          id = im.id;
          callback(id);
        }
      } else if (id && id.charAt(0) === "C") {
        channel = TS.channels.getChannelById(id);
        if (!channel.is_member && !channel.is_archived) {
          TS.channels.join(channel.name, function(ok) {
            if (ok) {
              callback(id);
            } else {
              callback(id);
            }
          });
        } else {
          callback(id);
        }
      } else {
        callback(id);
      }
    },
    maybeMarkReadIfMuted: function(model_ob) {
      if (!model_ob) return;
      if (!TS.notifs.isCorGMuted(model_ob.id)) return;
      if (!model_ob.unreads.length || model_ob.unread_highlights.length) return;
      if (TS.model.prefs.sidebar_behavior === "hide_read_channels") {
        if (TS.model.active_cid == model_ob.id) return;
      } else if (TS.model.prefs.sidebar_behavior === "hide_read_channels_unless_starred" && !model_ob.is_starred) {
        if (TS.model.active_cid == model_ob.id) return;
      }
      if (model_ob.is_mpim) {
        TS.mpims.markMostRecentReadMsg(model_ob, TS.model.marked_reasons.muted);
      } else if (model_ob.is_group) {
        TS.groups.markMostRecentReadMsg(model_ob, TS.model.marked_reasons.muted);
      } else {
        TS.channels.markMostRecentReadMsg(model_ob, TS.model.marked_reasons.muted);
      }
    },
    markReadMsg: function(model_ob_id, ts, reason) {
      var model_ob = TS.shared.getModelObById(model_ob_id);
      var controller = TS.shared.getControllerForModelOb(model_ob);
      if (_.isFunction(controller.markReadMsg)) controller.markReadMsg(model_ob.id, ts, reason);
    },
    moveLastMsgInput: function(from_channel, to_channel) {
      if (!from_channel.last_msg_input) return;
      to_channel.last_msg_input = from_channel.last_msg_input;
      from_channel.last_msg_input = "";
      TS.storage.storeLastMsgInput(from_channel.id, from_channel.last_msg_input);
      TS.storage.storeLastMsgInput(to_channel.id, to_channel.last_msg_input);
    },
    closeArchivedChannel: function(id) {
      var model_ob = TS.shared.getModelObById(id);
      if (!model_ob) return;
      if (!model_ob.is_archived) return;
      model_ob.was_archived_this_session = false;
      TS.client.activeChannelDisplayGoneAway();
    },
    getLastMsg: function(model_ob) {
      if (!model_ob.msgs || model_ob.msgs.length === 0) return null;
      for (var i = 0; i < model_ob.msgs.length; i += 1) {
        if (!TS.utility.msgs.isMsgHidden(model_ob.msgs[i]) && !model_ob.msgs[i].is_ephemeral) return model_ob.msgs[i];
      }
      return null;
    },
    sorterByLastMsg: function(a, b) {
      var a_msg = a && TS.shared.getLastMsg(a);
      var b_msg = b && TS.shared.getLastMsg(b);
      var a_ts;
      var b_ts;
      if (a_msg) {
        a_ts = parseFloat(a_msg.ts);
      } else if (a) {
        a_ts = TS.shared.getLatestMsgTs(a);
        if (a_ts) a_ts = parseFloat(a_ts);
      }
      if (b_msg) {
        b_ts = parseFloat(b_msg.ts);
      } else if (b) {
        b_ts = TS.shared.getLatestMsgTs(b);
        if (b_ts) b_ts = parseFloat(b_ts);
      }
      if (a_ts && b_ts) {
        if (a_ts > b_ts) return -1;
        if (b_ts > a_ts) return 1;
      } else {
        if (a_ts) return -1;
        if (b_ts) return 1;
      }
      return 0;
    },
    hasUnreads: function(model_ob) {
      if (!model_ob) return false;
      var latest_ts = TS.shared.getLatestMsgTs(model_ob);
      if (!latest_ts) return false;
      return latest_ts > model_ob.last_read;
    },
    checkForOldImsToClose: function() {
      var ims = TS.model.ims;
      var mpims = TS.model.mpims;
      var model_obs = ims.concat(mpims);
      var model_ob;
      var activity_ts;
      var activity_date;
      var ms_since_activity;
      var i;
      var dms_listed_cnt = 0;
      var allow_in_list = 11;
      var allow_elapsed_ms = 1e3 * 60 * 60 * 168;
      for (i = 0; i < model_obs.length; i += 1) {
        model_ob = model_obs[i];
        if (!model_ob.is_open && !model_ob.unread_cnt) continue;
        dms_listed_cnt += 1;
      }
      var this_too_many = dms_listed_cnt - allow_in_list;
      if (this_too_many < 1) return;
      TS.info("checkForOldImsToClose might close some. this_too_many:" + this_too_many);
      var leaveA = [];
      for (i = 0; i < model_obs.length; i += 1) {
        model_ob = model_obs[i];
        if (model_ob.is_slackbot_im) continue;
        if (model_ob.is_self_im) continue;
        if (!model_ob.is_open) continue;
        if (model_ob.unread_cnt) continue;
        if (model_ob.is_starred) continue;
        if (model_ob.opened_this_session) continue;
        if (model_ob == TS.shared.getActiveModelOb()) continue;
        activity_ts = TS.shared.getLatestMsgTs(model_ob) || "";
        if (model_ob.msgs && model_ob.msgs.length && model_ob.msgs[0] && model_ob.msgs[0].ts > activity_ts) {
          activity_ts = model_ob.msgs[0].ts;
        }
        if (activity_ts) {
          activity_date = TS.utility.date.toDateObject(activity_ts);
        } else {
          activity_date = new Date(model_ob.created * 1e3);
        }
        ms_since_activity = new Date - activity_date;
        if (ms_since_activity > allow_elapsed_ms) {
          TS.info(model_ob.id + " " + activity_date + " ms_since_activity:" + ms_since_activity + " allow_elapsed_ms:" + allow_elapsed_ms);
          leaveA.push({
            model_ob: model_ob,
            ms_since_activity: ms_since_activity
          });
        }
      }
      if (!leaveA.length) {
        TS.info("checkForOldImsToClose found no candidates for closing");
      }
      leaveA.sort(function compare(a, b) {
        var a_srt = a.ms_since_activity;
        var b_srt = b.ms_since_activity;
        if (a_srt < b_srt) return 1;
        if (a_srt > b_srt) return -1;
        return 0;
      });
      leaveA.length = leaveA.length > this_too_many ? this_too_many : leaveA.length;
      for (i = 0; i < leaveA.length; i += 1) {
        model_ob = leaveA[i].model_ob;
        TS.warn("checkForOldImsToClose CLOSING:" + model_ob.id + " ms_since_activity:" + leaveA[i].ms_since_activity);
        if (model_ob.is_im) {
          TS.ims.closeIm(model_ob.id);
        } else if (model_ob.is_mpim) {
          TS.mpims.closeMpim(model_ob.id);
        }
      }
    },
    ensureModelObIsPresent: function(c_id) {
      return new Promise(function(resolve, reject) {
        if (!c_id) return resolve();
        if (typeof c_id !== "string") return resolve();
        _getModelObByIdFromModelOrApi(c_id).then(resolve, reject);
      });
    },
    getModelObIdsNotPresent: function(c_ids) {
      return c_ids.filter(function(c_id) {
        return !TS.shared.getModelObById(c_id);
      });
    },
    promiseToHaveAllRelevantImIds: function() {
      _ensure_im_ids_p = _ensure_im_ids_p || new Promise(function(resolve, reject) {
        TS.api.callImmediately("im.list").then(function(resp) {
          if (resp.data && resp.data.ims && resp.data.ims.length) {
            resp.data.ims.forEach(function(im) {
              TS.utility.ensureInArray(TS.model.all_im_ids, im.id);
            });
            TS.log(528, "TS.model.all_im_ids: " + TS.model.all_im_ids);
          }
          resolve();
        }, function(err) {
          _ensure_im_ids_p = null;
          reject(err);
        });
      });
      return _ensure_im_ids_p;
    },
    promiseToHaveAllRelevantGroupIds: function() {
      _ensure_group_ids_p = _ensure_group_ids_p || new Promise(function(resolve, reject) {
        TS.api.callImmediately("groups.list", {
          no_sort: true
        }).then(function(resp) {
          if (resp.data && resp.data.groups && resp.data.groups.length) {
            resp.data.groups.forEach(function(group) {
              TS.utility.ensureInArray(TS.model.all_group_ids, group.id);
            });
            TS.log(528, "TS.model.all_group_ids: " + TS.model.all_group_ids);
          }
          resolve();
        }, function(err) {
          _ensure_group_ids_p = null;
          reject(err);
        });
      });
      return _ensure_group_ids_p;
    },
    ensureModelObsArePresent: function(c_ids) {
      if (!c_ids || !c_ids.length) {
        return Promise.resolve();
      }
      var promises = c_ids.map(function(c_id) {
        return TS.shared.ensureModelObIsPresent(c_id).reflect();
      });
      return Promise.all(promises).then(function(results) {
        var rejection_reasons = [];
        results.forEach(function(result) {
          if (result.isFulfilled()) return;
          rejection_reasons.push(result.reason());
        });
        if (rejection_reasons.length) {
          return Promise.reject(new Error("some ensureModelObsArePresent c_ids failed:\n" + rejection_reasons.join("\n")));
        }
        return Promise.resolve();
      });
    },
    ensureModelObsInDataArePresent: function(data, source) {
      var c_ids = TS.utility.extractAllModelObIds(data, source);
      return TS.shared.ensureModelObsArePresent(c_ids);
    },
    getHistoryApiMethodForModelOb: function(model_ob) {
      if (model_ob.is_mpim) return "mpim.history";
      if (model_ob.is_group && (!model_ob.is_private && !_.startsWith(model_ob.id, "C"))) return "groups.history";
      if (model_ob.is_im) return "im.history";
      return "channels.history";
    },
    addMsg: function(model_ob, msg) {
      return _addMsgsWorker(model_ob, [msg]);
    },
    addMsgs: function(model_ob, msgs) {
      if (_addMsgsWorker(model_ob, msgs)) {
        var and_mark = false;
        var controller = TS.shared.getControllerForModelOb(model_ob);
        if (_.isFunction(controller.calcUnreadCnts)) controller.calcUnreadCnts(model_ob, and_mark);
        TS.utility.msgs.maybeTruncateMsgs(model_ob);
        if (TS.client) {
          if (TS.model.active_cid !== model_ob.id) {
            if (TS.pri) TS.log(58, 'Got message(s) for "' + model_ob.id + '", but not active_cid "' + TS.model.active_cid + '" (yet.) NOT rebuilding.');
          } else {
            if (TS.pri) TS.log(58, "Got messages on active channel, rebuilding.");
            TS.client.msg_pane.rebuildMsgsWithReason("addMsgs: got messages on active channel " + model_ob.id);
          }
        }
        return true;
      }
      return false;
    },
    kickMember: function(model_ob, member_id) {
      var is_kickable_model_ob = model_ob.is_channel || model_ob.is_group && !model_ob.is_mpim;
      if (!is_kickable_model_ob) return;
      if (model_ob.is_group) {
        if (!TS.permissions.members.canKickFromGroups()) return;
      } else if (!TS.permissions.members.canKickFromChannels()) {
        return;
      }
      var member = TS.members.getMemberById(member_id);
      if (!member) return;
      var escaped = true;
      var include_at_sign = true;
      var member_display_name = TS.members.getMemberDisplayName(member, escaped, include_at_sign);
      var model_ob_display_name = TS.shared.getDisplayNameForModelOb(model_ob);
      TS.membership.ensureChannelMembershipIsKnownForUsers(model_ob.id, [member_id]).then(function() {
        if (!TS.membership.getUserChannelMembershipStatus(member_id, model_ob).is_member) {
          TS.generic_dialog.alert(TS.i18n.t("<strong>{user_name}</strong> is not a member of {channel_name}.", "shared")({
            user_name: member_display_name,
            channel_name: model_ob_display_name
          }));
          return null;
        }
        var confirm_msg;
        if (model_ob.is_group) {
          confirm_msg = "<p>" + TS.i18n.t("If you remove <strong>{user_name}</strong> from {channel_name}, they will no longer be able to see any of its messages. To rejoin the private channel, they will have to be re-invited.</p><p>Are you sure you wish to do this?", "shared")({
            user_name: member_display_name,
            channel_name: model_ob_display_name
          }) + "</p>";
        } else {
          confirm_msg = "<p>" + TS.i18n.t("Are you sure you wish to remove <strong>{user_name}</strong> from {channel_name}?", "shared")({
            user_name: member_display_name,
            channel_name: model_ob_display_name
          }) + "</p>";
        }
        var api_endpoint = model_ob.is_group ? "groups.kick" : "channels.kick";
        TS.generic_dialog.start({
          title: TS.i18n.t("Remove {user_name}", "shared")({
            user_name: member_display_name
          }),
          body: confirm_msg,
          go_button_text: TS.i18n.t("Yes, remove them", "shared")(),
          onGo: function() {
            TS.api.call(api_endpoint, {
              channel: model_ob.id,
              user: member_id
            }).catch(function(resp) {
              TS.info("Removing user failed; api=" + api_endpoint + "; error=" + resp.data.error);
              setTimeout(function() {
                var account_type = member.is_ultra_restricted ? TS.i18n.t("Single-channel guests", "shared")() : TS.i18n.t("Multi-channel guests", "shared")();
                if (resp.data.error === "cant_kick_from_last_channel" && TS.model.user.is_admin) {
                  TS.generic_dialog.start({
                    title: TS.i18n.t("Removing {member_display_name} failed", "shared")({
                      member_display_name: member_display_name
                    }),
                    body: TS.i18n.t("<p>{account_type} (like <strong>{member_display_name}</strong>) can’t be removed from channels.</p><p>If <strong>{member_display_name}</strong> should no longer have access to your Slack team, we suggest deactivating their account.</p>", "shared")({
                      account_type: account_type,
                      member_display_name: member_display_name
                    }),
                    go_button_text: TS.i18n.t("Manage Team Members", "shared")(),
                    show_cancel_button: true,
                    onGo: function() {
                      TS.utility.openInNewTab("/admin#restricted", TS.templates.builders.newWindowName());
                    }
                  });
                  return;
                }
                var err_str;
                switch (resp.data.error) {
                  case "cant_kick_from_last_channel":
                    err_str = TS.i18n.t("<p>{account_type} (like <strong>{member_display_name}</strong>) can’t be removed from channels.</p><p>Please contact a Team Admin if <strong>{member_display_name}</strong> should no longer have access to your Slack team.</p>", "shared")({
                      account_type: account_type,
                      member_display_name: member_display_name
                    });
                    break;
                  case "restricted_action":
                    err_str = TS.i18n.t("<p>Hmm, looks like you don’t have permission to kick from channels.</p><p>Please contact a Team Admin if <strong>{member_display_name}</strong> should no longer have access to your Slack team.</p>", "shared")({
                      member_display_name: member_display_name
                    });
                    break;
                  default:
                    err_str = TS.i18n.t("<p>Something’s gone wrong, and we couldn’t remove <strong>{member_display_name}</strong> from {channel}. We suspect this is only temporary. Try again in a bit?</p>", "shared")({
                      member_display_name: member_display_name,
                      channel: model_ob_display_name
                    });
                }
                TS.generic_dialog.alert(err_str, TS.i18n.t("Removing {member_display_name} failed", "shared")({
                  member_display_name: member_display_name
                }));
              }, 500);
            });
          }
        });
        return null;
      });
    },
    maybeResetHistoryFetchedOnAll: function() {
      if (!TS.client) return;
      if (TS.pri) TS.log(58, "maybeResetHistoryFetchedOnAll()");

      function reset(item) {
        TS.shared.maybeResetHistoryFetched(item);
      }
      _.forEach(TS.model.channels, reset);
      _.forEach(TS.model.ims, reset);
      _.forEach(TS.model.mpims, reset);
      _.forEach(TS.model.groups, reset);
    },
    maybeResetHistoryFetched: function(model_ob) {
      if (!TS.client) return;
      if (!model_ob) {
        TS.warn("maybeResetHistoryFetched: WTF no model_ob", model_ob);
        return;
      }
      if (!model_ob._history_fetched_since_last_connect) return;
      if (TS.pri && model_ob._history_fetched_since_last_connect) TS.log(58, 'resetting history_fetched_since_last_connect for "' + model_ob.id + '"');
      model_ob._history_fetched_since_last_connect = false;
    },
    maybeClearHasAutoScrolled: function() {
      var active_model_ob = TS.shared.getActiveModelOb();
      if (active_model_ob && active_model_ob._has_auto_scrolled) {
        if (TS.pri) TS.log(58, 'resetting _has_auto_scrolled for "' + active_model_ob.id + '"');
        active_model_ob._has_auto_scrolled = false;
      }
    },
    setPriorityForDev: function(model_ob) {
      if (!TS.boot_data.feature_sli_channel_priority) return;
      if (TS.boot_data.version_ts !== "dev") return;
      if (model_ob.priority || model_ob.priority === 0) return;
      model_ob.priority = TS.utility.strToApparentlyRndPerc(model_ob.id);
    },
    isModelObShared: function(model_ob) {
      if (!_.isObject(model_ob)) return false;
      if (model_ob.is_shared && !model_ob.is_org_shared) return true;
      return false;
    },
    isModelObOrgShared: function(model_ob) {
      if (!model_ob || !TS.model || !TS.model.team) return false;
      var can_have_shared_obs = TS.boot_data.page_needs_enterprise;
      return can_have_shared_obs && model_ob.is_org_shared;
    },
    isRelevantTeam: function() {
      var is_relevant = true;
      if (!TS.boot_data.page_needs_enterprise || !TS.model.team || !TS.model.team.enterprise_id || !TS.boot_data.other_accounts) return is_relevant;
      if (!window.winssb) return is_relevant;
      if (TS.pri) TS.log(ncc, "isRelevantTeam()");
      var enterprise_teams = TS.model.enterprise_teams;
      if (enterprise_teams.length === 1) return is_relevant;
      var team_ids = _.map(enterprise_teams, function(item) {
        return item.id;
      });
      var relevant_team_ids = TSSSB.call("getLastActiveTeamIdForTeamIds", team_ids);
      var most_relevant_team_id;
      var ncc = 1701;
      if (TS.pri) TS.log(ncc, "isRelevantTeam(): Got relevant team IDs from SSB", relevant_team_ids);
      if (relevant_team_ids instanceof Array && relevant_team_ids.length) {
        most_relevant_team_id = relevant_team_ids[0];
        if (TS.pri) TS.log(ncc, "isRelevantTeam(): Array case - taking the first relevant team id", most_relevant_team_id, relevant_team_ids);
      } else {
        if (TS.pri) TS.log(ncc, "isRelevantTeam(): relevant_team_ids is not an array, OR, is empty?", relevant_team_ids);
        TS.log(ncc, "isRelevantTeam(): Electron did not provide any matches for the given team_ids", team_ids);
      }
      if (!most_relevant_team_id) {
        if (TS.pri) TS.log(ncc, "Invalid response from SSB lastActiveTeamIdForTeamIds() call? Exiting.");
        return is_relevant;
      }
      if (TS.pri) TS.log(ncc, "comparing most_relevant_team_id ( " + most_relevant_team_id + ") -> TS.model.team_id (" + TS.model.team.id + ")");
      if (most_relevant_team_id === TS.model.team.id) {
        if (TS.pri) TS.log(ncc, "isRelevantTeam(): " + TS.model.team.id + " is relevant. Including.");
      } else {
        if (TS.pri) TS.log(ncc, "isRelevantTeam(): " + TS.model.team.id + " is NOT relevant. Excluding.");
        is_relevant = false;
      }
      return is_relevant;
    },
    isRelevantTeamForSharedModelOb: function(model_ob) {
      var is_relevant = true;
      if (!model_ob) return is_relevant;
      if (!window.winssb) return is_relevant;
      if (!TS.boot_data.page_needs_enterprise || !TS.model.team || !TS.model.team.enterprise_id || !TS.boot_data.other_accounts) return is_relevant;
      if (!model_ob.is_org_shared && !model_ob.is_shared) return is_relevant;
      var enterprise_team_ids;
      var ncc = 1701;
      if (TS.pri) TS.log(ncc, "isRelevantTeamForSharedModelOb(): " + model_ob.id);
      if (model_ob.is_im || model_ob.is_global_shared) {
        enterprise_team_ids = _.map(TS.model.enterprise_teams, "id");
      } else {
        enterprise_team_ids = model_ob.shared_team_ids;
      }
      if (!enterprise_team_ids) {
        if (TS.pri) TS.log(ncc, "Could not find shared team IDs for " + model_ob.id + "? Exiting.");
        return is_relevant;
      }
      var relevant_team_ids = TSSSB.call("getLastActiveTeamIdForTeamIds", enterprise_team_ids);
      var most_relevant_team_id;
      if (TS.pri) TS.log(ncc, "Got relevant team IDs from SSB", relevant_team_ids);
      if (relevant_team_ids instanceof Array && relevant_team_ids.length) {
        most_relevant_team_id = relevant_team_ids[0];
        if (TS.pri) TS.log(ncc, "Array case - taking the first relevant team id", most_relevant_team_id, relevant_team_ids);
      } else {
        if (TS.pri) TS.log(ncc, "relevant_team_ids is not an array, OR, is empty?", relevant_team_ids);
        if (enterprise_team_ids && enterprise_team_ids.length) {
          if (TS.pri) TS.log(ncc, "we have enterprise_team_ids, looking there and taking the first item.", enterprise_team_ids);
          most_relevant_team_id = enterprise_team_ids[0];
        } else if (TS.pri) {
          TS.log(ncc, "WTF no enterprise_team_ids, either?");
        }
      }
      if (!most_relevant_team_id) {
        if (TS.pri) TS.log(ncc, "Invalid response from SSB lastActiveTeamIdForTeamIds() call on " + model_ob.id + "? Exiting.");
        return is_relevant;
      }
      if (TS.pri) TS.log(ncc, "comparing most_relevant_team_id ( " + most_relevant_team_id + ") -> TS.model.team_id (" + TS.model.team.id + ")");
      if (most_relevant_team_id === TS.model.team.id) {
        if (TS.pri) TS.log(ncc, "Shared channel " + model_ob.id + " is relevant for this team (" + TS.model.team.id + "). Including.");
      } else {
        if (TS.pri) TS.log(ncc, "Shared channel " + model_ob.id + " is NOT relevant for this team (" + TS.model.team.id + "). Excluding.");
        is_relevant = false;
      }
      return is_relevant;
    },
    checkDisplayEmailAddressPref: function() {
      if (!TS.client || !TS.model.team || !TS.model.team.prefs) return;
      var email_count = 0;
      var bots_count = 0;
      var potential_emails = 0;
      var min_email_threshold = .5;
      if (TS.model.members) {
        _.each(TS.model.members, function(member) {
          if (member.is_bot) bots_count += 1;
          if (!member || !member.profile || !member.profile.email) return;
          if (member.id === TS.model.user.id) return;
          email_count += 1;
        });
      }
      potential_emails = TS.model.members.length - bots_count;
      if (!TS.model.team.prefs.display_email_addresses) {
        if (email_count) {
          TS.info("Email display hidden for this team, but found " + email_count + " email fields in TS.model.members.");
          TS.shared.onDisplayEmailAddressesPrefChanged();
        } else {
          TS.info("Email display hidden for this team. Client model OK. ✓");
        }
      } else if (!email_count) {
        TS.info("Email display allowed for this team, but no email fields found in TS.model.members.");
        TS.shared.onDisplayEmailAddressesPrefChanged();
      } else if (email_count / potential_emails < min_email_threshold) {
        TS.warn("Email display allowed for this team, but < " + min_email_threshold * 100 + "% of non-bot members (" + email_count + "/" + potential_emails + ") in model have email fields. Dumping LS cache to correct inconsistency.");
        TS.shared.onDisplayEmailAddressesPrefChanged();
      }
    },
    onDisplayEmailAddressesPrefChanged: function() {
      if (!TS.model || !TS.model.team || !TS.model.team.prefs) return;
      TS.info('Team pref "display_email_addresses" -> ' + TS.model.team.prefs.display_email_addresses);
      var email_count = 0;
      if (TS.model.members) {
        TS.model.members = _.map(TS.model.members, function(member) {
          if (!member.profile || !member.profile.email) return member;
          if (member.id === TS.model.user.id) return member;
          email_count += 1;
          if (!TS.model.team.prefs.display_email_addresses) member.profile.email = undefined;
          return member;
        });
      }
      if (!TS.model.team.prefs.display_email_addresses) {
        if (email_count) {
          TS.info("display_email_addresses check: found and cleared " + email_count + " email fields from TS.model.members.");
        } else {
          TS.info("display_email_addresses check: TS.model.members is already clear of email fields. ✓");
        }
      } else if (!email_count) {
        TS.info("display_email_addresses check: pref enabled, but 0 email fields found in TS.model.members.");
      }
      if (TS.storage) {
        TS.info("display_email_addresses check: clearing members from LS, disabling member/bot cache for remainder of session.");
        TS.storage.clearBufferAndCache();
        var members = [];
        TS.storage.storeMembers(members);
        TS.storage.disableMemberBotCache();
      }
      var make_sure_active_channel_is_in_view = false;
      if (TS.client && TS.client.ui && !TS.model.ms_logged_in_once) TS.client.ui.rebuildAll(make_sure_active_channel_is_in_view);
    }
  });
  var _ensure_im_ids_p;
  var _ensure_group_ids_p;
  var _addMsgsWorker = function(model_ob, msgs) {
    var added_any = false;
    if (!model_ob._history_fetched_since_last_connect) {
      var log_prefix;
      if (TS.pri) log_prefix = 'Defer case: First new message on "' + model_ob.id + '" - ';
      if (!msgs || !msgs.length) TS.warn("_addMsgsWorker(" + model_ob.id + "): WTF no msgs to add?");
      if (model_ob.history_is_being_fetched || !model_ob._history_fetched_since_last_connect) {
        if (TS.pri) TS.log(58, log_prefix + "queueing " + msgs.length + " msgs to merge on history fetch for " + model_ob.id);
        model_ob._msgs_to_merge_on_history = (model_ob._msgs_to_merge_on_history || []).concat(msgs);
      }
      if (TS.boot_data.feature_delay_channel_history_fetch && !model_ob.is_im && !model_ob.is_mpim && !model_ob.msgs.length) {
        if (TS.pri) TS.log(58, log_prefix + "no history in model, no history call yet - waiting for calcUnreadCnts() which will trigger a delayed history fetch.");
      } else if (model_ob.msgs.length) {
        if (model_ob.history_is_being_fetched) {
          if (TS.pri) TS.log(58, log_prefix + "some history, history fetch is already underway - queueing " + msgs.length + " message(s) to be merged with history call, as they are unlikely to be in the history response.");
        } else if (!model_ob._history_fetched_since_last_connect) {
          if (TS.pri) TS.log(58, log_prefix + "some history, have not fetched history since last reconnect - attaching " + msgs.length + " new messages to model for merging when the history call returns.");
          TS.shared.maybeFetchHistoryAndThenCheckConsistency(model_ob);
        }
      } else if (model_ob.history_is_being_fetched) {
        if (TS.pri) TS.log(58, log_prefix + "no history in model, but history is already pending - queueing " + msgs.length + " message(s) for merging with history call");
      } else if (!model_ob._history_fetched_since_last_connect) {
        if (TS.pri) TS.log(58, log_prefix + "no history in model, no history call yet - fetching, and queueing " + msgs.length + " message(s) for merging with history call");
        TS.shared.maybeFetchHistoryAndThenCheckConsistency(model_ob);
      } else if (TS.pri) {
        TS.log(58, log_prefix + "Edge case - " + msgs.length + " new message(s) to add, but no history and we have called history, too?");
      }
    }
    msgs = _.filter(msgs, function(msg) {
      var exists = msg.ts && TS.utility.msgs.getMsg(msg.ts, model_ob.msgs);
      if (exists) TS.log(58, "Not adding duplicate message " + msg.ts + ", already in " + model_ob.id);
      return !exists;
    });
    if (!msgs.length) {
      if (TS.pri) TS.log(58, "No messages to add to " + model_ob.id + " - exiting.");
      return false;
    }
    if (TS.pri) TS.log(58, "Adding " + (msgs.length > 1 ? "messages" : "message") + " to " + model_ob.id);
    msgs.forEach(function(msg) {
      if (TS.utility.msgs.validateMsg(model_ob.id, msg, model_ob.msgs)) {
        added_any = true;
        TS.utility.msgs.appendMsg(model_ob.msgs, msg);
      }
    });
    if (!added_any) return false;
    TS.utility.msgs.sortMsgs(model_ob.msgs);
    TS.utility.msgs.maybeSetOldestMsgsTsAfterMsgAdded(model_ob);
    return true;
  };
  var _getModelObByIdFromModelOrApi = function(c_id) {
    if (typeof c_id !== "string") {
      return Promise.reject(Error('c_id: "' + c_id + '" is not a String'));
    }
    TS.log(529, '_getModelObByIdFromModelOrApi c_id: "' + c_id + '"');
    var model_ob = TS.shared.getModelObById(c_id);
    if (model_ob) {
      return Promise.resolve(model_ob);
    }
    if (c_id.charAt(0) === "C") {
      return _getModelObByIdFromApi(c_id);
    } else if (c_id.charAt(0) === "G") {
      return TS.shared.promiseToHaveAllRelevantGroupIds().then(function() {
        if (TS.model.all_group_ids.indexOf(c_id) == -1) {
          TS.maybeWarn(528, "c_id:" + c_id + " is not in TS.model.all_group_ids, not calling the API");
          return Promise.resolve();
        }
        return _getModelObByIdFromApi(c_id);
      }).catch(function(err) {
        if (err && err.method === "groups.list") {
          return _getModelObByIdFromApi(c_id);
        }
        return Promise.reject(err);
      });
    }
    return TS.shared.promiseToHaveAllRelevantImIds().then(function() {
      if (TS.model.all_im_ids.indexOf(c_id) == -1) {
        TS.maybeWarn(528, "c_id:" + c_id + " is not in TS.model.all_im_ids, not calling the API");
        return Promise.resolve();
      }
      return _getModelObByIdFromApi(c_id);
    }).catch(function(err) {
      if (err && err.method === "im.list") {
        return _getModelObByIdFromApi(c_id);
      }
      return Promise.reject(err);
    });
  };
  var _getModelObByIdFromApi = function(c_id) {
    TS.log(529, '_getModelObByIdFromApi c_id: "' + c_id + '"');
    return new Promise(function(resolve, reject) {
      var tries = TS.model.incrementUnknownIdHandled(c_id);
      if (c_id.charAt(0) === "C") {
        var channels_info_args = {
          channel: c_id
        };
        if (TS.membership && TS.membership.lazyLoadChannelMembership()) {
          channels_info_args.no_members = true;
        }
        TS.api.callImmediately("channels.info", channels_info_args).then(function(resp) {
          resolve(TS.channels.upsertChannel(resp.data.channel));
          TS.model.reportResultOfUnknownIdHandled(c_id, true);
        }, function(ret) {
          if (TS.boot_data.page_needs_enterprise && ret.data && ret.data.error && ret.data.error === "channel_not_found") {
            TS.maybeWarn(98765, "_getModelObByIdFromApi called for a channel but it is not found for enterprise. Channel:", c_id);
            resolve();
            TS.model.reportResultOfUnknownIdHandled(c_id, true);
            return;
          }
          reject(Error((ret.data && ret.data.error || "unknown error") + " try #" + tries + " calling channels.info with channel:" + c_id));
          TS.model.reportResultOfUnknownIdHandled(c_id, false);
        });
      } else if (c_id.charAt(0) === "G") {
        TS.api.callImmediately("groups.info", {
          channel: c_id
        }).then(function(resp) {
          if (resp.data.group.is_mpim) {
            resolve(TS.mpims.upsertMpim(resp.data.group));
          } else {
            resolve(TS.groups.upsertGroup(resp.data.group));
          }
          TS.model.reportResultOfUnknownIdHandled(c_id, true);
        }, function(ret) {
          reject(Error((ret.data && ret.data.error || "unknown error") + " try #" + tries + " calling groups.info with channel:" + c_id));
          TS.model.reportResultOfUnknownIdHandled(c_id, false);
        });
      } else {
        TS.api.callImmediately("im.info", {
          channel: c_id
        }).then(function(resp) {
          resolve(TS.ims.upsertIm(resp.data.im));
          TS.model.reportResultOfUnknownIdHandled(c_id, true);
        }, function(ret) {
          reject(Error((ret.data && ret.data.error || "unknown error") + " try #" + tries + " calling im.info with channel:" + c_id));
          TS.model.reportResultOfUnknownIdHandled(c_id, false);
        });
      }
    });
  };
  var _prev_model_ob = null;
  var _logChannelSwitch = function(is_boot) {
    var curr_model_ob = TS.client.activeChannelIsHidden() ? null : TS.shared.getActiveModelOb();
    var prev_model_ob = _prev_model_ob;
    if (prev_model_ob && prev_model_ob.id) {
      _logChannelSwitchedOutEvent(prev_model_ob);
    }
    if (curr_model_ob && curr_model_ob.id) {
      _logChannelSwitchedEvent(curr_model_ob, is_boot);
      var curr_channel_type = curr_model_ob.id.charAt(0);
      if (curr_channel_type === "D") {
        _logDmOpenEvent(curr_model_ob);
      }
    }
    _prev_model_ob = curr_model_ob;
  };
  var _logChannelSwitchedEvent = function(model_ob, is_boot) {
    var id = model_ob.id;
    var channel_type = id.charAt(0);
    var payload = {
      channel_id: id,
      channel_type: channel_type,
      is_boot: !!is_boot,
      unread_channel_ids: _getUnreadChannelIds(),
      mentioned_channel_ids: _getMentionedChannelIds()
    };
    if (!is_boot) {
      payload.num_unreads = model_ob.unread_cnt;
    }
    TS.clog.track("CHANNEL_SWITCHED", payload);
  };
  var _logChannelSwitchedOutEvent = function(model_ob) {
    var id = model_ob.id;
    var channel_type = id.charAt(0);
    var payload = {
      channel_id: id,
      channel_type: channel_type
    };
    TS.clog.track("CHANNEL_SWITCHED_OUT", payload);
  };
  var _getUnreadChannelIds = function() {
    return _getFilteredChannelIds(function(c) {
      return c.unread_cnt > 0;
    });
  };
  var _getMentionedChannelIds = function() {
    return _getFilteredChannelIds(function(c) {
      return c.unread_highlight_cnt > 0;
    });
  };
  var _getFilteredChannelIds = function(filterFn) {
    if (!TS.model) return [];
    var ids = [];
    var idMapFn = function(c) {
      return c.id;
    };
    if (TS.model.channels) {
      ids = ids.concat(_.map(_.filter(TS.model.channels, filterFn), idMapFn));
    }
    if (TS.model.groups) {
      ids = ids.concat(_.map(_.filter(TS.model.groups, filterFn), idMapFn));
    }
    if (TS.model.ims) {
      ids = ids.concat(_.map(_.filter(TS.model.ims, filterFn), idMapFn));
    }
    return ids;
  };
  var _logDmOpenEvent = function(model_ob) {
    var id = model_ob.id;
    var payload = {};
    var im = TS.ims.getImById(id);
    var user = im ? TS.members.getMemberById(im.user) : null;
    if (user && user.is_bot) {
      var bot_id = user.profile.bot_id;
      var bot = TS.bots.getBotById(bot_id);
      payload.app_id = bot ? bot.app_id : "";
      payload.bot_id = bot_id;
    }
    TS.clog.track("DM_OPEN", payload);
  };
  var _logBootChannelSwitch = function() {
    var is_boot = true;
    _logChannelSwitch(is_boot);
  };
  var _queried_usernames = {};
  var _tryFetchingMembersWithUsernames = function(usernames) {
    TS.log(1989, "Flannel: seeing if usernames might reference users we have not loaded yet: ", usernames.join(", "));
    var promises = usernames.map(function(username) {
      _queried_usernames[username] = true;
      return TS.flannel.fetchAndUpsertObjectsWithQuery(username).catch(_.noop);
    });
    return Promise.all(promises);
  };
  var _clearPromises = function(is_fast_reconnect) {
    if (is_fast_reconnect) return;
    _ensure_im_ids_p = null;
    _ensure_group_ids_p = null;
  };
})();
(function() {
  "use strict";
  TS.registerModule("teams", {
    added_sig: new signals.Signal,
    rename_sig: new signals.Signal,
    changed_sig: new signals.Signal,
    unlinked_sig: new signals.Signal,
    changed_icon_sig: new signals.Signal,
    onStart: function() {
      if (TS.boot_data.feature_shared_channels_client) {
        TS.ms.on_msg_sig.add(TS.teams.ensureTeamsInDataArePresent);
        TS.teams.changed_icon_sig.add(_handleTeamChange);
        TS.teams.rename_sig.add(_handleTeamChange);
        TS.team.team_name_changed_sig.add(_updateTeamInfoForCurrentView);
      }
    },
    getTeamById: function(id) {
      if (!TS.boot_data.feature_shared_channels_client) {
        TS.console.warn("external shared channels must be on to use this");
        return;
      }
      if (!_.isString(id)) return null;
      if (_id_map[id]) return _id_map[id];
      if (TS.model.team.id === id) return TS.model.team;
      if (_.find(TS.model.enterprise_teams, {
          id: id
        })) return _.find(TS.model.enterprise_teams, {
        id: id
      });
      var teams = TS.model.teams;
      if (!teams) {
        TS.console.warn("Trying to look up team by id (" + id + ") but TS.model.teams is not present.");
        return null;
      }
      var team;
      for (var i = 0; i < teams.length; i += 1) {
        team = teams[i];
        if (team.id === id) {
          _id_map[id] = team;
          return team;
        }
      }
      TS.console.warn("team " + id + " not in local model");
      return null;
    },
    getTeamByDomain: function(domain) {
      if (!TS.boot_data.feature_shared_channels_client) {
        TS.console.warn("external shared channels must be on to use this");
        return;
      }
      if (!_.isString(domain)) return null;
      if (TS.model.team.domain === domain) return TS.model.team;
      if (!TS.model.teams) {
        TS.console.warn("TS.teams.getTeamByDomain() → TS.model.teams is missing.");
        return null;
      }
      var team = _.find(TS.model.teams, {
        domain: domain
      });
      if (team) return team;
      return null;
    },
    getTeamByMsg: function(msg) {
      if (!TS.boot_data.feature_shared_channels_client) {
        TS.console.warn("external shared channels must be on to use this");
        return;
      }
      if (!_.isObject(msg)) return null;
      var team_id = msg.source_team_id;
      if (!team_id) return null;
      var team = TS.teams.getTeamById(team_id);
      if (team) return team;
      return null;
    },
    getTeamNameByMember: function(member) {
      if (!TS.boot_data.feature_shared_channels_client) return;
      if (!_.isObject(member)) return null;
      var team = TS.teams.getTeamById(member.team_id);
      if (team && team.name) return team.name;
      return null;
    },
    getTeamNameById: function(id) {
      if (!TS.boot_data.feature_shared_channels_client) return;
      var team = TS.teams.getTeamById(id);
      if (!_.isObject(team)) return null;
      if (team && team.name) return team.name;
      return null;
    },
    updateTeamName: function(imsg) {
      if (!imsg.name) return;
      var team = TS.teams.getTeamById(imsg.source_team);
      if (!team) return;
      team = _.clone(team);
      team.name = imsg.name;
      TS.teams.upsertAndSignal(team);
    },
    updateTeamIcon: function(imsg) {
      if (!imsg.icon) return;
      var team = TS.teams.getTeamById(imsg.source_team);
      if (!team) return;
      team = _.clone(team);
      team.icon = imsg.icon;
      TS.teams.upsertAndSignal(team);
    },
    upsertAndSignal: function(team) {
      if (!TS.boot_data.feature_shared_channels_client) {
        TS.console.warn("external shared channels must be on to use this");
        return;
      }
      var upsert = TS.teams.upsertTeam(team);
      if (upsert.status === "CHANGED") {
        if (upsert.what_changed.indexOf("icon") != -1) {
          TS.teams.changed_icon_sig.dispatch(upsert.team);
        }
        if (upsert.what_changed.indexOf("name") != -1) {
          TS.teams.rename_sig.dispatch(upsert.team);
        }
        if (upsert.what_changed.indexOf("unlinked") != -1) {
          TS.teams.unlinked_sig.dispatch(upsert.team);
        }
      } else if (upsert.status === "ADDED") {
        TS.teams.added_sig.dispatch(upsert.team);
      }
      return upsert;
    },
    upsertTeam: function(team) {
      if (!TS.boot_data.feature_shared_channels_client) {
        TS.console.warn("external shared channels must be on to use this");
        return;
      }
      var teams = TS.model.teams;
      var existing_team = TS.teams.getTeamById(team.id);
      var status = "NOOP";
      var what_changed = [];
      if (existing_team) {
        for (var key in team) {
          if (key === "icon") {
            if (team[key] && !TS.utility.areSimpleObjectsEqual(team[key], existing_team[key])) {
              existing_team.icon = team.icon;
              status = "CHANGED";
              what_changed.push(key);
            }
          } else if (existing_team[key] != team[key]) {
            if (typeof team[key] !== "boolean" || !team[key] != !existing_team[key]) {
              what_changed.push(key);
              existing_team[key] = team[key];
              status = "CHANGED";
            }
          }
        }
        team = existing_team;
      } else {
        status = "ADDED";
        if (TS.pri) TS.log(4, 'adding team "' + team.id + '"');
        _processNewTeamForUpserting();
        teams.push(team);
        _id_map[team.id] = team;
      }
      return {
        status: status,
        team: team,
        what_changed: what_changed
      };
    },
    ensureTeamsArePresent: function(t_ids) {
      if (!TS.boot_data.feature_shared_channels_client) {
        TS.console.warn("external shared channels must be on to use this");
        return Promise.resolve();
      }
      if (!_.isArray(t_ids)) return Promise.reject(Error("t_ids is not an array"));
      var missing_team_ids = _.reject(t_ids, TS.teams.getTeamById);
      if (!missing_team_ids.length) return Promise.resolve();
      return _getTeamsByIdFromModelOrApi(missing_team_ids).then(function() {
        return null;
      });
    },
    ensureTeamsInDataArePresent: function(data) {
      if (!TS.boot_data.feature_shared_channels_client) {
        return Promise.resolve();
      }
      var team_ids = TS.utility.extractAllTeamIds(data);
      return TS.teams.ensureTeamsArePresent(team_ids);
    }
  });
  var _id_map = {};
  var _processNewTeamForUpserting = function() {
    if (!TS.boot_data.feature_shared_channels_client) {
      TS.console.warn("external shared channels must be on to use this");
    }
  };
  var _getTeamsByIdFromModelOrApi = function(t_ids) {
    if (!_.isArray(t_ids)) return Promise.reject(Error("t_ids is not an array"));
    var args = {
      teams: t_ids
    };
    return new Promise(function(resolve, reject) {
      TS.api.callImmediately("team.info", args).then(function(response) {
        var teams = [];
        response.data.teams.forEach(function(team) {
          teams.push(TS.teams.upsertAndSignal(team).team);
        });
        resolve(teams);
      }, function(ret) {
        reject(Error(ret.data && ret.data.error || "unknown error"));
      });
    });
  };
  var _handleTeamChange = function(team) {
    if (team != TS.model.team) _updateTeamMembers(team);
    _updateTeamInfoForCurrentView(team);
  };
  var _updateTeamMembers = function(team) {
    if (!_.isObject(team)) return;
    var team_members = TS.utility.teams.getMembersForTeam(team);
    if (!team_members.length) return;
    _.forEach(team_members, function(member) {
      TS.members.changed_profile_sig.dispatch(member);
    });
  };
  var _updateTeamInfoForCurrentView = function(team) {
    if (!_.isObject(team)) return;
    var model_ob = TS.shared.getActiveModelOb();
    if (TS.shared.isModelObShared(model_ob)) TS.channels.shared_teams_updated_sig.dispatch(model_ob);
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.teams", {
    isMemberExternal: function(member) {
      if (!TS.boot_data.feature_shared_channels_client) return false;
      if (!_.isObject(member)) return false;
      if (!member.team_id) return false;
      if (!member._is_local && member._is_from_org) return false;
      return !member._is_local && !member._is_from_org;
    },
    isMemberExternalById: function(id) {
      var member = TS.members.getMemberById(id);
      if (!member) {
        TS.console.warn("Trying to check for external team membership by id (" + id + ") but member is not present in the model.");
        return false;
      }
      return TS.utility.teams.isMemberExternal(member);
    },
    isMemberGuest: function(member) {
      if (!_.isObject(member)) return false;
      if (member.is_external || member.is_restricted) return true;
      return false;
    },
    isMsgFromOtherTeam: function(msg) {
      if (!_.isObject(msg)) return false;
      if (!msg.source_team_id) return false;
      if (msg.source_team_id && TS.model.team.id != msg.source_team_id) {
        return true;
      }
      return false;
    },
    getMembersForTeam: function(team) {
      if (!_.isObject(team)) return;
      if (!team.id) return;
      var team_members = _.filter(TS.model.members, {
        team_id: team.id
      });
      return team_members;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("members", {
    status_changed_sig: new signals.Signal,
    presence_changed_sig: new signals.Signal,
    ds_presence_changed_sig: new signals.Signal,
    user_color_changed_sig: new signals.Signal,
    joined_team_sig: new signals.Signal,
    changed_current_status_sig: new signals.Signal,
    changed_name_sig: new signals.Signal,
    changed_real_name_sig: new signals.Signal,
    changed_deleted_sig: new signals.Signal,
    changed_profile_sig: new signals.Signal,
    changed_tz_sig: new signals.Signal,
    changed_account_type_sig: new signals.Signal,
    changed_admin_perms_sig: new signals.Signal,
    changed_owner_perms_sig: new signals.Signal,
    changed_self_sig: new signals.Signal,
    lazily_added_sig: new signals.Signal,
    batch_upserted_sig: new signals.Signal,
    non_loaded_changed_deleted_sig: new signals.Signal,
    member_was_upserted_sig: new signals.Signal,
    is_in_bulk_upsert_mode: false,
    members_for_user_changed_sig: new signals.Signal,
    onStart: function() {
      _storeMembersThrottled = TS.utility.throttleFunc(_storeMembersThrottled, 20);
      if (TS.client) TS.client.user_added_to_team_sig.add(TS.members.userAddedToTeam);
      if (TS.client) TS.client.user_removed_from_team_sig.add(TS.members.userRemovedFromTeam);
      TS.channels.member_joined_sig.add(_maybeUpdateMembersUserCanSee);
      TS.channels.member_left_sig.add(_maybeUpdateMembersUserCanSee);
      if (TS.boot_data.feature_shared_channels_client) {
        TS.members.lazily_added_sig.add(TS.teams.ensureTeamsInDataArePresent);
      }
      if (TS.client) {
        TS.client.login_sig.addOnce(function() {
          if (TS.membership.lazyLoadChannelMembership()) {
            TS.members.non_loaded_changed_deleted_sig.add(_maybeUpdateMembersUserCanSee);
            TS.members.changed_deleted_sig.add(_maybeUpdateMembersUserCanSee);
          }
        });
      }
    },
    getMemberById: function(id, no_unknown) {
      if (!_.isString(id)) return null;
      if (id && id.charAt(0) === "@") id = id.substring(1);
      if (!_id_map.hasOwnProperty(id)) {
        var members = TS.model.members;
        if (Object.keys(_id_map).length < TS.model.members.length) {
          members.forEach(function(member) {
            _id_map[member.id] = member;
          });
        }
      }
      if (_id_map.hasOwnProperty(id)) return _id_map[id];
      if (TS.boot_data.feature_unknown_members && !no_unknown) return _getUnknownMemberAndFetch(id);
      return null;
    },
    getMemberByName: function(name) {
      name = _.toLower(name);
      if (!_name_map.hasOwnProperty(name)) {
        var members = TS.model.members;
        if (Object.keys(_name_map).length < TS.model.members.length) {
          members.forEach(function(member) {
            _name_map[member._name_lc] = member.id;
            _name_map["@" + member._name_lc] = member.id;
          });
        }
      }
      if (_name_map.hasOwnProperty(name)) return TS.members.getMemberById(_name_map[name]);
      return null;
    },
    getMemberByNameAndTeamDomain: function(name, domain) {
      if (!TS.boot_data.feature_shared_channels_client) return TS.members.getMemberByName(name);
      name = _.toLower(name).replace(/^@/, "");
      var members = TS.model.members;
      var members_with_name = _.filter(members, {
        _name_lc: name
      });
      if (members_with_name.length === 0) return null;
      if (members_with_name.length === 1) return members_with_name[0];
      var team = TS.teams.getTeamByDomain(domain);
      if (team && team.id) {
        var member = _.find(members_with_name, {
          team_id: team.id
        });
        if (member) return member;
      }
      return null;
    },
    getMemberByNameAndTeamId: function(name, t_id) {
      if (!TS.boot_data.feature_shared_channels_client) return TS.members.getMemberByName(name);
      name = _.toLower(name).replace(/^@/, "");
      var members = TS.model.members;
      var members_with_name = _.filter(members, {
        _name_lc: name
      });
      if (members_with_name.length === 0) return null;
      if (members_with_name.length === 1) return members_with_name[0];
      var member = _.find(members_with_name, {
        team_id: t_id
      });
      if (member) return member;
      return null;
    },
    getMemberByEmail: function(email) {
      email = _.toLower(email);
      var members = TS.model.members;
      var member;
      for (var i = 0; i < members.length; i += 1) {
        member = members[i];
        if (!member.profile) continue;
        if (!member.profile.email) continue;
        if (_.toLower(member.profile.email) == email) return member;
      }
      return null;
    },
    upsertAndSignal: function(member) {
      var upsert = TS.members.upsertMember(member);
      if (upsert.status === "ADDED" && TS.lazyLoadMembersAndBots()) {
        TS.members.lazily_added_sig.dispatch(upsert.member);
      } else if (upsert.status === "CHANGED") {
        if (upsert.what_changed.indexOf("current_status") != -1) {
          TS.members.changed_current_status_sig.dispatch(upsert.member);
        }
        if (upsert.what_changed.indexOf("profile") != -1) {
          TS.members.changed_profile_sig.dispatch(upsert.member);
        }
        if (upsert.what_changed.indexOf("is_restricted") != -1 || upsert.what_changed.indexOf("is_ultra_restricted") != -1) {
          TS.members.changed_account_type_sig.dispatch(upsert.member);
        }
        if (upsert.what_changed.indexOf("real_name") != -1) {
          TS.members.changed_real_name_sig.dispatch(upsert.member);
        }
        if (upsert.what_changed.indexOf("name") != -1) {
          TS.members.changed_name_sig.dispatch(upsert.member);
        }
        if (upsert.what_changed.indexOf("tz") != -1) {
          TS.members.changed_tz_sig.dispatch(upsert.member);
        }
        if (upsert.what_changed.indexOf("deleted") != -1) {
          TS.members.changed_deleted_sig.dispatch(upsert.member);
          var im = TS.ims.getImByMemberId(upsert.member.id);
          if (im) TS.ims.calcUnreadCnts(im, true);
          TS.groups.calcActiveMembersForAllGroups();
        }
        if (upsert.what_changed.indexOf("presence") != -1) {
          TS.members.presence_changed_sig.dispatch(upsert.member);
        }
        if (upsert.what_changed.indexOf("is_owner") != -1) {
          TS.members.changed_owner_perms_sig.dispatch(upsert.member);
        }
        if (upsert.what_changed.indexOf("is_admin") != -1) {
          TS.members.changed_admin_perms_sig.dispatch(upsert.member);
        }
        if (member.is_self) {
          TS.members.changed_self_sig.dispatch(upsert.member);
          TS.model.makeYouRegex();
        }
      }
      return upsert;
    },
    upsertMember: function(member) {
      var members = TS.model.members;
      var existing_member = TS.members.getMemberById(member.id);
      var status = "NOOP";
      var what_changed = [];
      var existing_member_updated_at = _.get(existing_member, "updated", NaN);
      var member_updated_at = _.get(member, "updated", NaN);
      var can_skip_upsert = existing_member_updated_at === member_updated_at && !TS.isPartiallyBooted();
      if (can_skip_upsert && TS.boot_data.feature_skip_member_upserts_if_not_updated && TS.boot_data.user_id === "W1W6AGD6X") {
        return {
          status: "NOOP",
          member: existing_member,
          what_changed: []
        };
      }
      if (member.is_ultra_restricted) {
        member.is_restricted = true;
      }
      if (existing_member) {
        if (TS.pri) TS.log(4, 'updating existing member "' + member.id + '"');
        if (TS.boot_data.feature_skip_member_upserts_if_not_updated) {
          var is_synthetic_event_from_flannel = !!member._is_synthetic_event_from_flannel;
          delete member._is_synthetic_event_from_flannel;
          if (!TS.presence_manager.isSubscribedToMember(member.id) || is_synthetic_event_from_flannel) {
            member.presence = existing_member.presence;
          }
        }
        var upsert_status = _processExistingMemberForUpserting(existing_member, member);
        status = upsert_status.status;
        what_changed = upsert_status.what_changed;
        if (_.includes(what_changed, "presence") && TS.useRedux()) {
          if (TS.members.is_in_bulk_upsert_mode) {
            TS.redux.presence.addToBulkUpsertPayload(existing_member);
          } else {
            TS.redux.presence.updatePresenceForMember(existing_member);
          }
        }
        if (TS.useRedux() && (_.includes(what_changed, "is_restricted") || _.includes(what_changed, "is_ultra_restricted"))) {
          if (TS.members.is_in_bulk_upsert_mode) {
            TS.redux.member_types.addToBulkUpdatePayload(existing_member);
          } else {
            TS.redux.member_types.updateMemberTypeForMember(existing_member);
          }
        }
        member = existing_member;
      } else if (member.id) {
        status = "ADDED";
        _processNewMemberForUpserting(member);
        if (TS.pri) TS.log(4, 'adding member "' + member.id + '" color:' + member.color + " member_color:" + member.member_color);
        _id_map[member.id] = member;
        _name_map[member._name_lc] = member.id;
        _name_map["@" + member._name_lc] = member.id;
        if (member.presence && TS.useRedux()) {
          if (TS.members.is_in_bulk_upsert_mode) {
            TS.redux.presence.addToBulkUpsertPayload(member);
          } else {
            TS.redux.presence.updatePresenceForMember(member);
          }
        }
        if (TS.useRedux()) {
          if (TS.members.is_in_bulk_upsert_mode) {
            TS.redux.member_types.addToBulkUpdatePayload(member);
          } else {
            TS.redux.member_types.updateMemberTypeForMember(member);
          }
        }
        members.push(member);
      } else {
        TS.error("bad error, no member.id");
      }
      if (member.is_self && member.deleted) {
        TS.reload(null, "member.is_self && member.deleted");
        return;
      }
      if (!TS.members.is_in_bulk_upsert_mode) {
        TS.members.invalidateMembersUserCanSeeArrayCaches();
        TS.members.invalidateActiveMembersArrayCaches();
      }
      if (status === "ADDED" || status === "CHANGED") TS.members.maybeStoreMembers();
      TS.members.member_was_upserted_sig.dispatch();
      if (can_skip_upsert && TS.boot_data.feature_skip_member_upserts_if_not_updated) {
        if (status === "CHANGED") {
          what_changed.forEach(function(changed_field) {
            try {
              throw new Error(changed_field.replace("debug:", ""));
            } catch (e) {
              e.fileName = member.id;
              var silent = true;
              TS.console.logError(e, "can_skip_upsert_error_debug", undefined, silent);
            }
          });
          what_changed = what_changed.filter(function(changed_field) {
            return changed_field.indexOf("debug:") !== 0;
          });
          TS.metrics.count("can_skip_upsert_error");
        } else if (status === "NOOP") {
          TS.metrics.count("can_skip_upsert_ok");
        }
      }
      return {
        status: status,
        member: member,
        what_changed: what_changed
      };
    },
    processExistingMemberForUpserting: function(existing_member, member) {
      return _processExistingMemberForUpserting(existing_member, member);
    },
    processNewMemberForUpserting: function(member) {
      _processNewMemberForUpserting(member);
    },
    setMemberUserColor: function(member, color) {
      color = TS.utility.htmlEntities(color);
      member.member_color = color || member.color;
      if (color && color != member.color) {
        TS.model.user_colors[member.id] = color;
      } else {
        delete TS.model.user_colors[member.id];
      }
      TS.members.user_color_changed_sig.dispatch(member);
    },
    toggleUserPresence: function() {
      var new_presence = TS.model.user.presence === "away" ? "active" : "away";
      var args = {
        presence: new_presence
      };
      return TS.api.call("presence.set", args);
    },
    usernameChanged: function(member, prev_value) {
      delete _name_map[prev_value];
      delete _name_map["@" + prev_value];
      member._name_lc = _.toLower(member.name);
      _name_map[member._name_lc] = member.id;
      _name_map["@" + member._name_lc] = member.id;
      _setImAndMpimNames(member);
    },
    getActiveMembersWithSelfAndNotSlackbot: function() {
      if (!_active_members_with_self_and_not_slackbot.length) {
        _active_members_with_self_and_not_slackbot = TS.members.fillMembersWithOptions(_active_members_with_self_and_not_slackbot, {
          include_self: true,
          include_slackbot: false,
          include_bots: true
        });
      }
      return _active_members_with_self_and_not_slackbot;
    },
    getActiveMembersWithSelfAndNotBots: function() {
      if (!_active_members_with_self_and_not_bots.length) {
        _active_members_with_self_and_not_bots = TS.members.fillMembersWithOptions(_active_members_with_self_and_not_bots, {
          include_self: true,
          include_slackbot: false,
          include_bots: false
        });
      }
      return _active_members_with_self_and_not_bots;
    },
    getActiveMembersExceptSelfAndSlackbot: function() {
      if (!_active_members_except_self_and_slackbot.length) {
        _active_members_except_self_and_slackbot = TS.members.fillMembersWithOptions(_active_members_except_self_and_slackbot, {
          include_self: false,
          include_slackbot: false,
          include_bots: true
        });
      }
      return _active_members_except_self_and_slackbot;
    },
    getActiveMembersExceptSelfAndBots: function() {
      if (!_active_members_except_self_and_bots.length) {
        _active_members_except_self_and_bots = TS.members.fillMembersWithOptions(_active_members_except_self_and_bots, {
          include_self: false,
          include_slackbot: false,
          include_bots: false
        });
      }
      return _active_members_except_self_and_bots;
    },
    getActiveMembersWithSelfAndSlackbot: function() {
      if (!_active_members_with_self_and_slackbot.length) {
        _active_members_with_self_and_slackbot = TS.members.fillMembersWithOptions(_active_members_with_self_and_slackbot, {
          include_self: true,
          include_slackbot: true,
          include_bots: true
        });
      }
      return _active_members_with_self_and_slackbot;
    },
    getActiveMembersWithSlackbotAndNotSelf: function() {
      if (!_active_members_with_slackbot_and_not_self.length) {
        _active_members_with_slackbot_and_not_self = TS.members.fillMembersWithOptions(_active_members_with_slackbot_and_not_self, {
          include_self: false,
          include_slackbot: true,
          include_bots: true
        });
      }
      return _active_members_with_slackbot_and_not_self;
    },
    getMembersWithOptions: function(options) {
      var all_members = TS.members.getMembersForUser();
      var results = _.filter(all_members, function(member) {
        if (member.is_stranger) return false;
        if (!options.include_deleted && member.deleted) return false;
        if (!options.include_slackbot && member.is_slackbot) return false;
        if (!options.include_self && member.is_self) return false;
        if (!options.include_bots && member.is_bot) return false;
        return true;
      });
      return results;
    },
    fillMembersWithOptions: function(members, options) {
      if (!_.isArray(members)) {
        throw new TypeError("members passed to fillMembersWithOptions is not an array!");
      }
      members.length = 0;
      var filtered_members = TS.members.getMembersWithOptions(options);
      _.each(filtered_members, function(member) {
        members.push(member);
      });
      return members;
    },
    getMembersForUser: function() {
      if (!TS.model.user.is_restricted && !TS.boot_data.feature_shared_channels_client) return TS.model.members;
      if (_members_for_user.length) return _members_for_user;
      if (!TS.model.user.is_restricted) {
        _members_for_user = _.filter(TS.model.members, function(member) {
          return member.is_stranger !== true;
        });
        return _members_for_user;
      }
      var user_id_map = {};
      if (TS.membership.lazyLoadChannelMembership()) {
        (TS.model.guest_accessible_user_ids || []).forEach(function(user_id) {
          user_id_map[user_id] = true;
        });
      } else {
        TS.shared.getAllModelObsForUser().forEach(function(model_ob) {
          if (model_ob.is_group && !model_ob.is_archived) {
            model_ob.members.forEach(function(user_id) {
              user_id_map[user_id] = true;
            });
          } else if (model_ob.is_channel && model_ob.is_member) {
            model_ob.members.forEach(function(user_id) {
              user_id_map[user_id] = true;
            });
          } else if (model_ob.is_im) {
            user_id_map[model_ob.user] = true;
          }
        });
      }
      var is_partially_booted = TS.isPartiallyBooted();
      _members_for_user = Object.keys(user_id_map).map(function(user_id) {
        return {
          id: user_id,
          user: TS.members.getMemberById(user_id)
        };
      }).filter(function(id_and_user) {
        var user = id_and_user.user;
        if (!user && is_partially_booted) {
          return false;
        }
        if (!user) {
          return false;
        }
        return !user.deleted;
      }).map(function(id_and_user) {
        return id_and_user.user;
      });
      return _members_for_user;
    },
    shouldDisplayRealNames: function() {
      var override = TS.model.prefs.display_real_names_override;
      return TS.model.team.prefs.display_real_names && override != -1 || override == 1;
    },
    getMemberDisplayNameById: function(id, should_escape, include_at_sign) {
      var member = TS.members.getMemberById(id);
      return member ? TS.members.getMemberDisplayName(member, should_escape, include_at_sign) : id;
    },
    getMemberDisplayName: function(member, should_escape, include_at_sign) {
      if (!member) return "NO MEMBER??";
      var unescaped_display_name = function() {
        if (TS.boot_data.feature_name_tagging_client) {
          return TS.members.getMemberPreferredName(member) || TS.members.getMemberFullName(member);
        }
        if (!TS.model.team) return member.name;
        var username_prefix = include_at_sign ? "@" : "";
        if (TS.members.shouldDisplayRealNames()) {
          if (member.profile && member.profile.real_name && member.profile.real_name.length) {
            return member.profile.real_name;
          }
          return username_prefix + member.name;
        }
        return username_prefix + member.name;
      }();
      return should_escape ? TS.utility.htmlEntities(unescaped_display_name) : unescaped_display_name;
    },
    getMemberDisplayNameLowerCase: function(member, should_escape) {
      if (!member) return "NO MEMBER??";
      if (!TS.model.team) return member._name_lc;
      if (TS.members.shouldDisplayRealNames()) {
        if (member.profile && member.profile.real_name) {
          if (should_escape) return TS.utility.htmlEntities(member._real_name_lc);
          return member._real_name_lc;
        }
      }
      return member._name_lc;
    },
    getMemberRealName: function(member_or_id) {
      return _getMemberNameHelper(member_or_id, "real_name");
    },
    getMemberFullName: function(member_or_id) {
      return _getMemberNameHelper(member_or_id, "full_name");
    },
    getMemberFullNameLowerCase: function(member_or_id) {
      return _getMemberNameHelper(member_or_id, "_full_name_normalized_lc");
    },
    getMemberPreferredName: function(member_or_id) {
      return _getMemberNameHelper(member_or_id, "display_name");
    },
    getMemberPreferredNameLowerCase: function(member_or_id) {
      return _getMemberNameHelper(member_or_id, "_display_name_normalized_lc");
    },
    getMemberUsernameAndRealNameInCorrectOrder: function(member_or_id) {
      var member = _ensureMember(member_or_id);
      var display_name = TS.members.getMemberDisplayName(member);
      var name_data = {
        names_in_order: [],
        is_username_first: true
      };
      if (display_name === member.name) {
        name_data.names_in_order.push(member.name);
        if (member.is_self) {
          name_data.names_in_order.push(TS.i18n.t("(you)", "members")());
        } else if (member.profile.real_name && member.profile.real_name !== member.name) {
          name_data.names_in_order.push(member.profile.real_name);
        }
      } else {
        name_data.is_username_first = false;
        if (member.profile.real_name && member.profile.real_name !== member.name) {
          name_data.names_in_order.push(member.profile.real_name);
        }
        var name = member.is_self ? TS.i18n.t("(you)", "members")() : member.name;
        name_data.names_in_order.push(name);
      }
      return name_data;
    },
    getMemberSecondaryName: function(member_or_id) {
      var member = _ensureMember(member_or_id);
      if (TS.members.shouldDisplayRealNames()) {
        return TS.members.getMemberPreferredName(member);
      }
      return TS.members.getMemberRealName(member);
    },
    getMemberCurrentStatus: function(member_or_id) {
      var member = _ensureMember(member_or_id);
      if (!(member && member.profile)) {
        return {
          emoji: "",
          text: ""
        };
      }
      return {
        emoji: member.profile.status_emoji || "",
        text: member.profile.status_text || ""
      };
    },
    getMemberCurrentStatusForDisplay: function(member_or_id, options) {
      var current_status = TS.members.getMemberCurrentStatus(member_or_id);
      var current_status_text = "";
      if (current_status.text) {
        current_status_text += '<span class="prevent_copy_paste" aria-label=" "></span>' + TS.format.formatCurrentStatus(current_status.text, undefined, options);
      }
      var current_status_emoji = TS.format.formatCurrentStatus(current_status.emoji, undefined, _.assign({
        transform_missing_emoji: true
      }, options));
      return current_status_emoji + current_status_text;
    },
    invalidateMembersUserCanSeeArrayCaches: function(no_signal) {
      if (!TS.model.user || !TS.boot_data.feature_shared_channels_client && !TS.model.user.is_restricted) return;
      var was_length = _members_for_user.length;
      if (!was_length) return;
      _members_for_user.length = 0;
      TS.members.invalidateActiveMembersArrayCaches();
      if (no_signal) return;
      var A = TS.members.getMembersForUser();
      if (A.length !== was_length) {
        TS.members.members_for_user_changed_sig.dispatch();
      }
    },
    invalidateActiveMembersArrayCaches: function() {
      _active_members_with_self_and_not_slackbot.length = 0;
      _active_members_with_self_and_not_bots.length = 0;
      _active_members_except_self_and_slackbot.length = 0;
      _active_members_except_self_and_bots.length = 0;
      _active_members_with_self_and_slackbot.length = 0;
      _active_members_with_slackbot_and_not_self.length = 0;
      _active_local_members_with_slackbot_and_not_self.length = 0;
      _active_local_members_with_self_and_slackbot.length = 0;
    },
    canUserPostInGeneral: function() {
      return TS.permissions.members.canPostInGeneral(TS.model.user);
    },
    memberSorterByActive: function(a, b) {
      if (a.presence != b.presence) {
        if (a.presence === "active") return -1;
        if (b.presence === "active") return 1;
      }
      var a_srt = TS.members.getMemberDisplayNameLowerCase(a);
      var b_srt = TS.members.getMemberDisplayNameLowerCase(b);
      if (a_srt < b_srt) return -1;
      if (a_srt > b_srt) return 1;
      return 0;
    },
    memberSorterByActiveWithBotsLast: function(a, b) {
      if (a.presence != b.presence) {
        if (a.presence === "active") return -1;
        if (b.presence === "active") return 1;
      }
      var a_bot = a.is_bot || a.is_slackbot;
      var b_bot = b.is_bot || b.is_slackbot;
      if (a_bot !== b_bot) {
        if (!a_bot) return -1;
        if (!b_bot) return 1;
      }
      var a_srt = TS.members.getMemberDisplayNameLowerCase(a);
      var b_srt = TS.members.getMemberDisplayNameLowerCase(b);
      if (a_srt < b_srt) return -1;
      if (a_srt > b_srt) return 1;
      return 0;
    },
    memberSorterByName: function(a, b) {
      var a_srt = TS.members.getMemberNameForSort(a);
      var b_srt = TS.members.getMemberNameForSort(b);
      if (a_srt < b_srt) return -1;
      if (a_srt > b_srt) return 1;
      return 0;
    },
    getMemberNameForSort: function(member) {
      return TS.members.getMemberDisplayNameLowerCase(member);
    },
    prepareMembersForLS: function() {
      var new_members = [];
      var new_member;
      var member;
      var k;
      var i;
      for (i = 0; i < TS.model.members.length; i += 1) {
        member = TS.model.members[i];
        if (!member) {
          TS.warn("prepareMembersForLS: no member at offset " + i + "??");
          continue;
        }
        if (!member._is_local) continue;
        new_member = {};
        new_members.push(new_member);
        for (k in member) {
          if (k === "files") continue;
          if (k === "activity") continue;
          if (k === "stars") continue;
          if (k === "mentions") continue;
          if (k.indexOf("_") === 0) continue;
          new_member[k] = member[k];
        }
        new_member.profile = _omitImagesFromProfile(new_member.profile);
      }
      return new_members;
    },
    maybeStoreMembers: function(force) {
      if (!TS.storage.isUsingMemberBotCache()) return;
      if (TS.members.is_in_bulk_upsert_mode) return;
      _storeMembersThrottled(force || false);
    },
    ensureMembersInDataArePresent: function(data, source, channel_id) {
      var ret = TS.utility.extractAllMemberIds(data, source, channel_id);
      if (_.get(TS, "model.team.id") === "T02J3DPUE" && !_.isEmpty(ret.m_ids)) {
        var has_u_ids = _.some(ret.m_ids, function(id) {
          return id[0] === "U";
        });
        if (has_u_ids) {
          var info = {
            message: "Fetching U users on W team from source: " + source,
            stack: TS.console.getStackTrace()
          };
          $.post(TS.boot_data.beacon_error_url, {
            description: "fetch_u_on_w_team",
            error_json: JSON.stringify(info),
            team: _.get(TS, "model.team.id", "none"),
            user: TS.boot_data.user_id,
            version: TS.boot_data.version_ts
          });
        }
      }
      return TS.members.ensureMembersArePresent(ret.m_ids, ret.c_ids, ret.t_ids);
    },
    getMemberIdsNotPresent: function(m_ids, c_ids, t_ids) {
      var new_m_ids = [];
      var new_c_ids = [];
      var new_t_ids = [];
      m_ids.forEach(function(m_id, i) {
        if (!TS.members.getMemberById(m_id, true)) {
          new_m_ids.push(m_id);
          new_c_ids.push(c_ids[i]);
          new_t_ids.push(t_ids[i]);
        }
      });
      return {
        m_ids: new_m_ids,
        c_ids: new_c_ids,
        t_ids: new_t_ids
      };
    },
    ensureMembersArePresent: function(m_ids) {
      if (!m_ids || !m_ids.length) {
        return Promise.resolve();
      }
      if (TS.boot_data.feature_unknown_members) {
        _.each(m_ids, TS.members.ensureMemberIsHydrated);
        return Promise.resolve();
      }
      var known_unique_m_ids = _(m_ids).uniq().filter(TS.members.getMemberById).value();
      var unknown_unique_m_ids = _.difference(m_ids, known_unique_m_ids);
      var batch_size = TS.useSocket() && TS.boot_data.should_use_flannel ? _flannel_max_users : _users_info_api_max_users;
      var promises = _(unknown_unique_m_ids).chunk(batch_size).map(function(batch) {
        return _fetchAndUpsertMembersWithIds(batch).reflect();
      }).value();
      return Promise.all(promises).then(function(results) {
        var rejection_reasons = results.filter(function(p) {
          return p.isRejected();
        }).map(function(p) {
          return p.reason();
        });
        if (rejection_reasons.length) {
          var e = new Error("Some member fetches failed");
          e.rejection_reasons = rejection_reasons;
          return Promise.reject(e);
        }
        return Promise.resolve();
      });
    },
    ensureMembersArePresentInSharedModelObs: function(model_obs) {
      model_obs = model_obs.filter(function(model_ob) {
        return !!model_ob.is_shared;
      });
      return TS.members.ensureMembersArePresentInModelObs(model_obs);
    },
    ensureMembersArePresentInModelObs: function(model_obs) {
      var m_ids = [];
      var c_ids = [];
      if (TS.boot_data.page_needs_enterprise && TS.boot_data.exclude_org_members) return Promise.resolve();
      model_obs.forEach(function(model_ob) {
        if (model_ob.is_im) {
          m_ids.push(model_ob.user);
          c_ids.push(model_ob.id);
        } else if (model_ob.is_mpim) {
          m_ids.push.apply(m_ids, model_ob.members || []);
          c_ids.push.apply(c_ids, _.fill(Array(model_ob.members && model_ob.members.length || 0), model_ob.id));
        } else if (model_ob.is_channel) {} else if (model_ob.is_group) {
          m_ids.push.apply(m_ids, model_ob.members || []);
          c_ids.push.apply(c_ids, _.fill(Array(model_ob.members && model_ob.members.length || 0), model_ob.id));
        } else {
          TS.warn("ensureMembersArePresentInModelObs found an unexpected model_ob type");
        }
      });
      if (!m_ids.length) return Promise.resolve();
      return TS.members.ensureMembersArePresent(m_ids, c_ids);
    },
    ensureMemberIsHydrated: function(id) {
      if (TS.boot_data.feature_unknown_members) TS.members.getMemberById(id);
    },
    startBatchUpsert: function() {
      if (TS.members.is_in_bulk_upsert_mode) return false;
      TS.members.is_in_bulk_upsert_mode = true;
      return true;
    },
    finishBatchUpsert: function() {
      if (!TS.members.is_in_bulk_upsert_mode) return false;
      TS.members.is_in_bulk_upsert_mode = false;
      TS.members.invalidateMembersUserCanSeeArrayCaches();
      TS.members.invalidateActiveMembersArrayCaches();
      TS.members.maybeStoreMembers();
      TS.members.batch_upserted_sig.dispatch();
      return true;
    },
    allocateTeamListMembers: function(members_for_user) {
      var member;
      var members = [];
      var disabled_members = [];
      var deleted_bots = [];
      var bots = [];
      var restricted_members = [];
      var ultra_restricted_members = [];
      members_for_user.sort(function(a, b) {
        var a_name = a._real_name_lc || a._name_lc;
        var b_name = b._real_name_lc || b._name_lc;
        if (a_name > b_name) return 1;
        if (b_name > a_name) return -1;
        return 0;
      });
      for (var i = 0; i < members_for_user.length; i += 1) {
        member = members_for_user[i];
        if (member.deleted) {
          if (member.is_bot) {
            deleted_bots.push(member);
          } else {
            disabled_members.push(member);
          }
        } else if (member.is_ultra_restricted) {
          ultra_restricted_members.push(member);
        } else if (member.is_restricted) {
          restricted_members.push(member);
        } else if (member.is_bot || member.is_slackbot) {
          bots.push(member);
        } else {
          members.push(member);
        }
      }
      return {
        members: members,
        disabled_members: disabled_members,
        deleted_bots: deleted_bots,
        bots: bots,
        restricted_members: restricted_members,
        ultra_restricted_members: ultra_restricted_members
      };
    },
    promiseToSearchMembers: function(maybe_searcher_p) {
      if (!TS.boot_data.page_needs_enterprise && !TS.boot_data.feature_shared_channels_client && !TS.lazyLoadMembersAndBots()) return Promise.reject(new Error("API search not yet enabled"));
      return Promise.resolve(maybe_searcher_p).then(function(searcher) {
        if (!searcher) return Promise.reject(new Error("No search parameters provided"));
        searcher.query = searcher.query && searcher.query.trim() || "";
        searcher.include_org = !!TS.boot_data.page_needs_enterprise && !!searcher.include_org;
        searcher.org_team_ids = searcher.include_org && Array.isArray(searcher.org_team_ids) ? searcher.org_team_ids : [];
        searcher = _readyMemberSearcher(searcher, _isNewMemberSearch(searcher));
        if (searcher._is_new || searcher.num_remaining > 0) return _promiseToSearchMembers(searcher);
        return Promise.resolve(searcher);
      });
    },
    isLocalTeamMember: function(member) {
      if (!member) {
        TS.warn("isLocalTeamMember: No member provided?");
        return;
      }
      if (member._is_local) return member._is_local;
      return member.team_id === TS.model.team.id;
    },
    isNewMemberSearch: function(searcher) {
      return _isNewMemberSearch(searcher);
    },
    readyMemberSearcher: function(searcher, is_new) {
      return _readyMemberSearcher(searcher, is_new);
    },
    buildPromiseToSearchMembersArguments: function(searcher) {
      return _buildPromiseToSearchMembersArguments(searcher);
    },
    haveAllMembersForModelOb: function(model_ob) {
      if (!TS.lazyLoadMembersAndBots()) return true;
      if (TS.membership.lazyLoadChannelMembership() && model_ob.is_channel && !model_ob.is_group) {
        return false;
      }
      var model_ob_members = model_ob.members || [model_ob.user];
      var available_members = _.map(TS.model.members, "id");
      return !_.difference(model_ob_members, available_members).length;
    },
    userAddedToTeam: function(team_id) {
      var updated_member = _.merge({}, TS.model.user);
      updated_member.enterprise_user.teams = _.uniq(updated_member.enterprise_user.teams.concat(team_id));
      TS.members.upsertMember(updated_member);
    },
    userRemovedFromTeam: function(team_id) {
      var updated_member = _.merge({}, TS.model.user);
      updated_member.enterprise_user.teams = updated_member.enterprise_user.teams.filter(function(team) {
        return team !== team_id;
      });
      TS.members.upsertMember(updated_member);
    },
    fetchMemberObjectsForUserProfileFields: function(member) {
      var unique_member_ids = [];
      if (member.is_restricted && member.profile.guest_invited_by) unique_member_ids.push(member.profile.guest_invited_by);
      var profile_fields = TS.team.getVisibleTeamProfileFieldsForMember(member);
      var profile_ids = _.chain(profile_fields).filter({
        type: "user"
      }).reduce(function(member_ids, field) {
        return member_ids.concat(field.value.split(/\s*,\s*/));
      }, []).value();
      unique_member_ids = _.chain(unique_member_ids).concat(profile_ids).compact().uniq().value();
      if (!unique_member_ids.length) return Promise.resolve();
      return TS.members.ensureMembersArePresent(unique_member_ids);
    },
    test: function() {
      var test = {};
      Object.defineProperty(test, "_id_map", {
        get: function() {
          return _id_map;
        },
        set: function(v) {
          _id_map = v;
        }
      });
      Object.defineProperty(test, "_name_map", {
        get: function() {
          return _name_map;
        },
        set: function(v) {
          _name_map = v;
        }
      });
      Object.defineProperty(test, "_maybeRefetchAccessibleUserIds", {
        get: function() {
          return _maybeRefetchAccessibleUserIds;
        },
        set: function(v) {
          _maybeRefetchAccessibleUserIds = v;
        }
      });
      Object.defineProperty(test, "_is_refetching_accessible_user_ids", {
        get: function() {
          return _is_refetching_accessible_user_ids;
        },
        set: function(v) {
          _is_refetching_accessible_user_ids = v;
        }
      });
      Object.defineProperty(test, "_did_receive_multiple_calls_to_refetch_accessible_user_ids", {
        get: function() {
          return _did_receive_multiple_calls_to_refetch_accessible_user_ids;
        },
        set: function(v) {
          _did_receive_multiple_calls_to_refetch_accessible_user_ids = v;
        }
      });
      Object.defineProperty(test, "_accessible_user_ids_last_fetched_ts", {
        get: function() {
          return _accessible_user_ids_last_fetched_ts;
        },
        set: function(v) {
          _accessible_user_ids_last_fetched_ts = v;
        }
      });
      Object.defineProperty(test, "_maybeSetDeletedStatus", {
        get: function() {
          return _maybeSetDeletedStatus;
        },
        set: function(v) {
          _maybeSetDeletedStatus = v;
        }
      });
      Object.defineProperty(test, "_maybeSetTeamId", {
        get: function() {
          return _maybeSetTeamId;
        },
        set: function(v) {
          _maybeSetTeamId = v;
        }
      });
      Object.defineProperty(test, "_maybeSetLocality", {
        get: function() {
          return _maybeSetLocality;
        },
        set: function(v) {
          _maybeSetLocality = v;
        }
      });
      Object.defineProperty(test, "_setImAndMpimNames", {
        get: function() {
          return _setImAndMpimNames;
        },
        set: function(v) {
          _setImAndMpimNames = v;
        }
      });
      Object.defineProperty(test, "_setLowerCaseNamesForMember", {
        get: function() {
          return _setLowerCaseNamesForMember;
        },
        set: function(v) {
          _setLowerCaseNamesForMember = v;
        }
      });
      Object.defineProperty(test, "_setImagesForMember", {
        get: function() {
          return _setImagesForMember;
        },
        set: function(v) {
          _setImagesForMember = v;
        }
      });
      return test;
    }
  });
  var _id_map = {};
  var _name_map = {};
  var _active_members_with_self_and_not_slackbot = [];
  var _active_members_with_self_and_not_bots = [];
  var _active_members_except_self_and_slackbot = [];
  var _active_members_except_self_and_bots = [];
  var _active_members_with_self_and_slackbot = [];
  var _active_members_with_slackbot_and_not_self = [];
  var _active_local_members_with_slackbot_and_not_self = [];
  var _active_local_members_with_self_and_slackbot = [];
  var _members_for_user = [];
  var _unknown_member_ids = [];
  var _users_info_api_max_users = 250;
  var _flannel_max_users = 100;
  var _ensureMember = function(member_or_id) {
    return _.isString(member_or_id) ? TS.members.getMemberById(member_or_id) : member_or_id;
  };
  var _maybeSetMemberKnown = function(member) {
    if (TS.boot_data.feature_unknown_members) return;
    if (member.is_unknown) delete member.is_unknown;
    _.pull(_unknown_member_ids, member.id);
  };
  var _maybeSetMemberColor = function(member) {
    if (member.member_color) return;
    member.member_color = member.color;
    if (TS.model.user_colors[member.id]) {
      TS.members.setMemberUserColor(member, TS.model.user_colors[member.id]);
    }
  };
  var _maybeSetDeletedStatus = function(member, what_changed) {
    if (!TS.boot_data.page_needs_enterprise) return;
    if (member.enterprise_user && member.enterprise_user.teams && member.enterprise_user.teams.length > 0) {
      if (TS.boot_data.app === "web") {
        if (member.enterprise_user.teams.indexOf(TS.model.team.id) > -1) member.deleted = false;
      } else if (what_changed && what_changed.length && what_changed.indexOf("deleted") >= 0) {
        if (member.deleted) {
          member.deleted = false;
          var index = what_changed.indexOf("deleted");
          if (index >= 0) what_changed.splice(index, 1);
        }
      } else {
        member.deleted = false;
      }
    }
  };
  var _maybeSetTeamId = function(member) {
    if (member.team_id) return;
    if (member.enterprise_user && member.id === member.enterprise_user.id) {
      member.team_id = member.enterprise_user.teams[0];
      return;
    }
    member.team_id = TS.model.team.id;
  };
  var _maybeSetLocality = function(member) {
    if (!member) {
      TS.warn("_maybeSetLocality: No member provided?");
      return;
    }
    member._is_local = member.team_id === TS.model.team.id;
    if (TS.boot_data.page_needs_enterprise) {
      if (TS.boot_data.app !== "web") {
        member._is_local = member.enterprise_user && member.enterprise_user.teams && member.enterprise_user.teams.indexOf(TS.model.team.id) > -1;
      }
      member._is_from_org = !member._is_local && !!member.enterprise_user && TS.model.enterprise && TS.model.enterprise.id === member.enterprise_user.enterprise_id;
    }
    if (TS.boot_data.feature_shared_channels_client) {
      member.is_external = TS.utility.teams.isMemberExternal(member);
      if (TS.useRedux()) {
        TS.redux.member_types.updateMemberTypeForMember(member);
      }
    }
  };
  var _setImAndMpimNames = function(member) {
    TS.ims.setNameFromMember(member);
    TS.mpims.setNamesFromMember(member);
  };
  var _fetchAndUpsertMembersWithIds = function(m_ids, always_use_api) {
    if (_.isEmpty(m_ids)) return Promise.resolve();
    if (!Array.isArray(m_ids)) return Promise.reject(new Error("m_ids is not an array"));
    m_ids = _.uniq(m_ids);
    var fetched_members_p;
    var fetch_via_flannel = TS.useSocket() && TS.boot_data.should_use_flannel && !always_use_api;
    if (fetch_via_flannel) {
      fetched_members_p = TS.flannel.fetchAndUpsertObjectsByIds(m_ids);
    } else {
      var calling_args = {
        users: m_ids
      };
      if (TS.lazyLoadMembersAndBots()) {
        calling_args.custom_fields_mode = "user";
      }
      fetched_members_p = TS.api.call("users.info", calling_args).then(function(resp) {
        return resp.data.users.map(function(raw_user) {
          return TS.members.upsertAndSignal(raw_user).member;
        });
      });
    }
    return fetched_members_p.then(function(fetched_members) {
      if (fetched_members.length !== m_ids.length) {
        if (fetch_via_flannel && TS.boot_data.feature_shared_channels_client) {
          var missing_member_ids_readable = _.difference(m_ids, _.map(fetched_members, "id")).join(",");
          return _fetchAndUpsertMembersWithIds(m_ids, true).tap(function(fetched_members_second_attempt) {
            if (fetched_members_second_attempt.length == m_ids.length) {
              TS.warn("_fetchAndUpsertMembersWithIds tried to fetch members from Flannel but had to fall back to the API (everything worked out, though). Members: " + missing_member_ids_readable);
            } else {
              TS.warn("_fetchAndUpsertMembersWithIds tried to fetch members from Flannel and from the API and still could not find them. Missing members: " + missing_member_ids_readable);
            }
          });
        }
      }
      return fetched_members;
    }).tap(function(fetched_members) {
      if (fetched_members.length !== m_ids.length) {
        TS.warn("_fetchAndUpsertMembersWithIds requested " + m_ids.length + " members but received " + fetched_members.length + ". Missing members: " + _.difference(m_ids, _.map(fetched_members, "id")).join(","));
      }
      return fetched_members;
    });
  };
  var _getMemberNameHelper = function(member_or_id, type) {
    var member = _ensureMember(member_or_id);
    if (!member) return "NO MEMBER??";
    if (!member.profile) {
      if (member.is_bot && member.name) {
        return member.name;
      }
      return "NO MEMBER??";
    }
    if (member.profile[type]) return member.profile[type];
    if (member[type]) return member[type];
    if (member.profile[type + "_normalized"]) {
      return member.profile[type + "_normalized"];
    }
    return "";
  };
  var _storeMembersThrottled = function(force) {
    var members = TS.members.prepareMembersForLS();
    var existing = !force && TS.storage.fetchMembers();
    if (force || !existing || !TS.utility.areSimpleObjectsEqual(existing, members)) {
      TS.storage.storeMembers(members);
    }
  };
  var _isNewMemberSearch = function(searcher) {
    return searcher._last_query !== searcher.query || searcher._last_include_org !== searcher.include_org || _.xor(searcher._last_org_team_ids, searcher.org_team_ids).length;
  };
  var _readyMemberSearcher = function(searcher, is_new) {
    searcher = searcher || {};
    if (searcher.hasOwnProperty("_searcher_p") && is_new) searcher._searcher_p.cancel();
    if (!searcher.hasOwnProperty("_cursor_mark") || is_new) searcher._cursor_mark = "";
    if (!searcher.hasOwnProperty("full_profile_filter")) searcher.full_profile_filter = true;
    if (!searcher.hasOwnProperty("include_bots")) searcher.include_bots = true;
    if (!searcher.hasOwnProperty("include_deleted")) searcher.include_deleted = false;
    if (!searcher.hasOwnProperty("include_self")) searcher.include_self = false;
    if (!searcher.hasOwnProperty("include_slackbot")) searcher.include_slackbot = true;
    if (!searcher.hasOwnProperty("items") || is_new) searcher.items = [];
    if (!searcher.hasOwnProperty("not_member_of")) searcher.not_member_of = [];
    if (!searcher.hasOwnProperty("member_of")) searcher.member_of = [];
    if (!searcher.hasOwnProperty("num_found") || is_new) searcher.num_found = 0;
    if (!searcher.hasOwnProperty("num_remaining") || is_new) searcher.num_remaining = 0;
    if (!searcher.hasOwnProperty("num_new") || is_new) searcher.num_new = 0;
    if (!searcher.hasOwnProperty("max_api_results")) searcher.max_api_results = 100;
    if (is_new) {
      searcher._last_query = searcher.query;
      searcher._last_include_org = searcher.include_org;
      searcher._last_org_team_ids = searcher.org_team_ids;
    }
    searcher._is_new = !!is_new;
    return searcher;
  };
  var _promiseToSearchMembers = function(searcher) {
    var promiseToSearch = function() {
      return _promiseToSearchMembersWorker(searcher);
    };
    if (searcher._is_new) {
      searcher._searcher_p = promiseToSearch();
    } else {
      searcher._searcher_p = searcher._searcher_p.then(promiseToSearch);
    }
    return searcher._searcher_p;
  };
  var _buildPromiseToSearchMembersArguments = function(searcher) {
    var matchers = [TS.utility.search.makeClause("is", "user")];
    if (searcher._last_query) {
      var query_matchers = searcher._last_query.split(/\s*,\s*|\s+/).map(function(q) {
        return q.charAt("0") === "@" ? q.substring(1) : q;
      }).filter(function(q) {
        return !!q;
      }).map(function(query) {
        if (query.length === 1 || !searcher.full_profile_filter) {
          if (TS.boot_data.feature_name_tagging_client) {
            return TS.utility.search.makeConjunction("OR", [TS.utility.search.makeClause("real_name", query), TS.utility.search.makeClause("display_name", query)]);
          }
          return TS.utility.search.makeConjunction("OR", [TS.utility.search.makeClause("name", query), TS.utility.search.makeClause("real_name", query)]);
        }
        return TS.utility.search.makeClause("fuzzy", query);
      });
      matchers = matchers.concat(query_matchers);
    }
    if (searcher.not_member_of && searcher.not_member_of.length) {
      var not_member_of_matchers = searcher.not_member_of.map(function(id) {
        return TS.utility.search.makeClause("not_member_of", id);
      });
      matchers.push(not_member_of_matchers.length > 1 ? TS.utility.search.makeConjunction("OR", not_member_of_matchers) : not_member_of_matchers[0]);
    }
    if (searcher.member_of && searcher.member_of.length) {
      var member_of_matchers = searcher.member_of.map(function(id) {
        return TS.utility.search.makeClause("member_of", id);
      });
      matchers.push(member_of_matchers.length > 1 ? TS.utility.search.makeConjunction("OR", member_of_matchers) : member_of_matchers[0]);
    }
    if (searcher._last_include_org && searcher._last_org_team_ids.length) {
      var org_matchers = searcher._last_org_team_ids.map(function(id) {
        return TS.utility.search.makeClause("belongs_to_team_id", id);
      });
      matchers.push(org_matchers.length > 1 ? TS.utility.search.makeConjunction("OR", org_matchers) : org_matchers[0]);
    }
    var query = matchers.length > 1 ? TS.utility.search.makeConjunction("AND", matchers) : matchers[0];
    var calling_args = {
      query: query,
      count: searcher.max_api_results,
      include_bots: searcher.include_bots,
      include_deleted: searcher.include_deleted,
      raw_query: searcher.query
    };
    if (searcher._last_include_org) calling_args.all_of_org = searcher._last_include_org;
    if (searcher._cursor_mark) calling_args.cursor_mark = searcher._cursor_mark;
    if (searcher.determine_membership_for_channel) calling_args.determine_membership_for_channel = searcher.determine_membership_for_channel;
    return calling_args;
  };
  var _promiseToSearchMembersWorker = function(searcher) {
    var calling_args = _buildPromiseToSearchMembersArguments(searcher);
    searcher.num_new = 0;
    return TS.utility.search.promiseToSearch(calling_args).then(function(response) {
      if (!response.data.items.length) return Promise.resolve(searcher);
      if (!searcher.num_remaining) {
        searcher.num_remaining = response.data.num_found;
        searcher.num_found = response.data.num_found;
      }
      searcher.num_remaining -= response.data.items.length;
      searcher._cursor_mark = response.data.next_cursor_mark;
      var matches = response.data.items.map(function(member) {
        var full_member = TS.members.getMemberById(member.id);
        if (!full_member) {
          if (searcher._last_include_org && member.team_id !== TS.model.team.id) {
            member.is_primary_owner = false;
            member.is_owner = false;
            member.is_admin = false;
          }
          full_member = TS.members.upsertMember(member).member;
        }
        return full_member;
      }).filter(function(member) {
        if (member.is_self && !searcher.include_self || member.is_slackbot && !searcher.include_slackbot) {
          searcher.num_found -= 1;
          return false;
        }
        if (searcher.limit_by_model_relevancy) {
          return TS.utility.members.isMemberRelevantToModel(member, searcher.limit_by_model_relevancy);
        }
        return true;
      });
      searcher.num_new = matches.length;
      searcher.items.push.apply(searcher.items, matches);
      return Promise.resolve(searcher);
    });
  };
  var _omitImagesFromProfile = function(profile) {
    if (!_.isObject(profile)) return profile;
    return _.omitBy(profile, function(value, key) {
      return key.indexOf("image_") === 0;
    });
  };
  var _processExistingMemberForUpserting = function(existing_member, member) {
    var status = "NOOP";
    var what_changed = [];
    _setPresenceForMemberAlwaysActive(existing_member, member);
    Object.keys(member).forEach(function(k) {
      if (k === "profile") {
        var old_profile = _omitImagesFromProfile(existing_member.profile);
        var new_profile = _omitImagesFromProfile(member.profile);
        if (_.isObject(new_profile)) {
          if (old_profile.status_text !== new_profile.status_text || old_profile.status_emoji !== new_profile.status_emoji) {
            status = "CHANGED";
            what_changed.push("current_status");
            existing_member.profile.status_text = new_profile.status_text;
            existing_member.profile.status_emoji = new_profile.status_emoji;
          }
          old_profile = _.omit(old_profile, ["status_text", "status_emoji"]);
          new_profile = _.omit(new_profile, ["status_text", "status_emoji"]);
          if (!_.isEqual(old_profile, new_profile)) {
            var name_changed = _.some(["real_name", "full_name", "display_name"], function(name_type) {
              return new_profile[name_type] != old_profile[name_type];
            });
            if (!_.isUndefined(old_profile.fields) && _.isUndefined(new_profile.fields)) {
              if (!TS.calls) {
                TS.warn("So uh, yeah, we just tried to overwrite the `fields` value. Keeping what we have instead. User: " + member.id);
              }
              new_profile.fields = old_profile.fields;
            }
            existing_member.profile = _.assign(existing_member.profile, new_profile);
            if (name_changed) {
              _setLowerCaseNamesForMember(existing_member);
            }
            var image_changed = old_profile.avatar_hash != new_profile.avatar_hash;
            if (image_changed) _setImagesForMember(existing_member);
            if (TS.boot_data.feature_skip_member_upserts_if_not_updated) {
              Object.keys(old_profile).concat(Object.keys(new_profile)).forEach(function(profile_key) {
                if (old_profile[profile_key] !== new_profile[profile_key]) {
                  what_changed.push("debug:profile." + profile_key);
                }
              });
            }
            status = "CHANGED";
            what_changed.push(k);
          }
        }
      } else if (k === "enterprise_user") {
        if (existing_member[k]) {
          for (var l in member[k]) {
            if (!_.isEqual(existing_member[k][l], member[k][l])) {
              existing_member[k][l] = member[k][l];
              status = "CHANGED";
              what_changed.push(k);
            }
          }
        } else {
          existing_member[k] = member[k];
          status = "CHANGED";
          what_changed.push(k);
        }
      } else if (k === "id") {
        var maybe_replace_id = existing_member.id != member.id && existing_member.enterprise_user && member.enterprise_user;
        if (maybe_replace_id) {
          var existing_is_canonical = existing_member.enterprise_user.id == existing_member.id;
          var change_to_local = member.id != member.enterprise_user.id;
          if (existing_is_canonical && change_to_local) {
            existing_member.id = member.id;
            status = "CHANGED";
            what_changed.push(k);
          }
        }
      } else if (k === "teams") {
        if (TS.boot_data.feature_skip_member_upserts_if_not_updated) {
          var existing_teams = existing_member.teams || [];
          var new_teams = member.teams || [];
          Object.keys(existing_teams).concat(Object.keys(new_teams)).forEach(function(teams_key) {
            if (existing_teams[teams_key] !== new_teams[teams_key]) {
              what_changed.push("debug:teams." + teams_key);
            }
          });
        }
        existing_member[k] = member[k];
        status = "CHANGED";
        what_changed.push(k);
      } else if (existing_member[k] != member[k]) {
        if (k === "is_admin") {
          TS.console.maybeWarn(1975, k + "is changing from `" + existing_member[k] + "` to `" + member[k] + "`");
          TS.console.maybeTrace(1975);
        }
        if (member[k] && !TS.utility.isScalar(member[k])) {
          existing_member[k] = member[k];
          TS.warn(k + " is not scalar! it needs to be handled by upsertMember specifically to test if it has changed! " + typeof member[k]);
        } else if (typeof member[k] !== "boolean" || !member[k] != !existing_member[k]) {
          what_changed.push(k);
          status = "CHANGED";
          var prev_value = existing_member[k];
          var new_value = member[k];
          existing_member[k] = new_value;
          if (k === "name") {
            TS.members.usernameChanged(existing_member, prev_value);
          } else if (k === "real_name") {
            existing_member._real_name_lc = _.toLower(existing_member.profile.real_name);
          }
        }
      }
    });
    _maybeSetMemberKnown(existing_member);
    _maybeSetMemberColor(existing_member);
    _maybeSetDeletedStatus(existing_member, what_changed);
    _maybeSetTeamId(existing_member);
    _maybeSetLocality(existing_member);
    return {
      status: status,
      what_changed: what_changed
    };
  };
  var _fetchAndUpsertUnknownMembers = function() {
    if (!TS.boot_data.feature_unknown_members) return Promise.resolve();
    if (!_unknown_member_ids.length) return Promise.resolve();
    var batch_size = TS.useSocket() && TS.boot_data.should_use_flannel ? _flannel_max_users : _users_info_api_max_users;
    var ids = _unknown_member_ids.splice(0, batch_size);
    return _fetchAndUpsertMembersWithIds(ids).then(function(members) {
      var id_map = _.keyBy(members, "id");
      ids.forEach(function(id) {
        var member = _id_map[id];
        if (!member) return;
        if (member === id_map[id]) {
          TS.warn("member id " + id + " is no longer unknown");
          _maybeSetMemberKnown(member);
        } else {
          TS.warn("member id " + id + " is for a non-existent member");
          member.is_non_existent = true;
        }
      });
      return _fetchAndUpsertUnknownMembers();
    });
  };
  var _getUnknownMemberAndFetch = function(id) {
    if (!TS.boot_data.feature_unknown_members) return null;
    if (!id || _id_map[id]) return;
    if (!TS.model.ms_logged_in_once) return;
    TS.warn("member id " + id + " not found in members map, added unknown member to map");
    var member = _makeUnknownMemberStub(id);
    _id_map[id] = member;
    _unknown_member_ids.push(id);
    _id_map._size += 1;
    if (_unknown_member_ids.length === 1) _.defer(_fetchAndUpsertUnknownMembers);
    return member;
  };
  var _makeUnknownMemberStub = function(id) {
    var member = {
      id: id,
      name: id
    };
    _processNewMemberForUpserting(member);
    member.is_unknown = true;
    member.is_non_existent = false;
    return member;
  };
  var _setImagesForUnknownMember = function(member) {
    if (!TS.boot_data.feature_unknown_members) return;
    if (!_.isObject(member.profile)) return;
    if (!member.is_unknown && !member.is_non_existent) return;
    member.profile.image_24 = cdn_url + "/66f9/img/avatars/ava_0002-24.png";
    member.profile.image_32 = cdn_url + "/0180/img/avatars/ava_0002-32.png";
    member.profile.image_48 = cdn_url + "/66f9/img/avatars/ava_0002-48.png";
    member.profile.image_72 = cdn_url + "/66f9/img/avatars/ava_0002-72.png";
    member.profile.image_192 = cdn_url + "/7fa9/img/avatars/ava_0002-192.png";
    member.profile.image_512 = cdn_url + "/7fa9/img/avatars/ava_0002-512.png";
  };
  var _processNewMemberForUpserting = function(member) {
    if (!member.profile || typeof member.profile !== "object") {
      member.profile = {};
    }
    if (member.id === "USLACKBOT") {
      member.is_slackbot = true;
    }
    _maybeSetMemberKnown(member);
    _maybeSetMemberColor(member);
    _maybeSetDeletedStatus(member);
    _maybeSetTeamId(member);
    _maybeSetLocality(member);
    member._first_name_lc = "";
    member._last_name_lc = "";
    member._real_name_lc = "";
    member._real_name_normalized_lc = "";
    if (TS.boot_data.feature_name_tagging_client) {
      member._display_name_lc = "";
      member._display_name_normalized_lc = "";
    }
    _setLowerCaseNamesForMember(member);
    _setImagesForMember(member);
    member.files = [];
    member.activity = [];
    member.stars = [];
    member.mentions = [];
    _setPresenceForNewMember(member);
    _setImAndMpimNames(member);
  };
  var _setLowerCaseNamesForMember = function(member) {
    if ("name" in member) member._name_lc = _.toLower(member.name);
    if (!_.isObject(member.profile)) return;
    if ("first_name" in member.profile) member._first_name_lc = _.toLower(member.profile.first_name);
    if ("last_name" in member.profile) member._last_name_lc = _.toLower(member.profile.last_name);
    if ("real_name" in member.profile) member._real_name_lc = _.toLower(member.profile.real_name);
    if ("real_name_normalized" in member.profile) member._real_name_normalized_lc = _.toLower(member.profile.real_name_normalized);
    if (TS.boot_data.feature_name_tagging_client) {
      if ("display_name" in member.profile) member._display_name_lc = _.toLower(member.profile.display_name);
      if ("display_name_normalized" in member.profile) member._display_name_normalized_lc = _.toLower(member.profile.display_name_normalized);
    }
  };
  var _setImagesForMember = function(member) {
    if (!_.isObject(member.profile)) return;
    _maybeSetTeamId(member);
    if (TS.boot_data.feature_unknown_members && !member.profile.avatar_hash && member.is_unknown) return _setImagesForUnknownMember(member);
    var image_url = TS.model.team.avatar_base_url + member.team_id + "-" + member.id + "-" + member.profile.avatar_hash + "-";
    _.forEach(["24", "32", "48", "72", "192", "512", "1024"], function(size) {
      member.profile["image_" + size] = image_url + size;
    });
    delete member.profile.image_original;
  };
  var _setPresenceForMemberAlwaysActive = function(existing_member, member) {
    if (_.get(existing_member, "profile.always_active") !== _.get(member, "profile.always_active")) {
      member.presence = _.get(member, "profile.always_active") ? "active" : "away";
    }
  };
  var _setPresenceForNewMember = function(member) {
    if (!member.presence && !_.isEmpty(TS.model.online_users)) {
      var index = TS.model.online_users.indexOf(member.id);
      if (index > -1) {
        member.presence = "active";
        TS.model.online_users.splice(index, 1);
      }
    }
    member.presence = member.presence === "active" ? "active" : "away";
    if (_.get(member, "profile.always_active")) {
      member.presence = "active";
    }
  };
  var _is_refetching_accessible_user_ids = false;
  var _did_receive_multiple_calls_to_refetch_accessible_user_ids = false;
  var _accessible_user_ids_last_fetched_ts = 0;
  var _maybeRefetchAccessibleUserIds = function() {
    if (!TS.model.user.is_restricted) return;
    if (!TS.membership.lazyLoadChannelMembership()) return;
    if (_is_refetching_accessible_user_ids) {
      _did_receive_multiple_calls_to_refetch_accessible_user_ids = true;
      return;
    }
    _is_refetching_accessible_user_ids = true;
    var MIN_FETCH_INTERVAL_MS = 1e4;
    var time_since_last_fetch = Date.now() - _accessible_user_ids_last_fetched_ts;
    var rate_limit_p;
    if (time_since_last_fetch < MIN_FETCH_INTERVAL_MS) {
      rate_limit_p = new Promise(function(resolve) {
        setTimeout(resolve, MIN_FETCH_INTERVAL_MS - time_since_last_fetch);
      });
    } else {
      rate_limit_p = Promise.resolve();
    }
    rate_limit_p.then(function() {
      _did_receive_multiple_calls_to_refetch_accessible_user_ids = false;
      return TS.flannel.fetchAccessibleUserIdsForGuests();
    }).then(function(accessible_user_ids) {
      if (!_.isEqual(_.sortBy(accessible_user_ids), _.sortBy(TS.model.guest_accessible_user_ids))) {
        TS.model.guest_accessible_user_ids = accessible_user_ids;
        _members_for_user.length = 0;
      }
      return null;
    }).finally(function() {
      _is_refetching_accessible_user_ids = false;
      _accessible_user_ids_last_fetched_ts = Date.now();
      if (_did_receive_multiple_calls_to_refetch_accessible_user_ids) {
        _did_receive_multiple_calls_to_refetch_accessible_user_ids = false;
        _maybeRefetchAccessibleUserIds();
      }
    });
  };
  var _maybeUpdateMembersUserCanSee = function() {
    TS.members.invalidateMembersUserCanSeeArrayCaches();
    _maybeRefetchAccessibleUserIds();
  };
})();
(function() {
  "use strict";
  TS.registerModule("pending_users", {
    sanitizeNameFields: function(invitee) {
      if (!invitee.invite_prefs || invitee.invite_prefs.full_name) return;
      var prefs = invitee.invite_prefs;
      if (prefs.first_name && prefs.last_name) {
        prefs.full_name = [prefs.first_name, prefs.last_name].join(" ").trim();
      } else if (prefs.first_name) {
        prefs.full_name = prefs.first_name;
      } else if (prefs.last_name) {
        prefs.full_name = prefs.last_name;
      }
    },
    getUserNameForSort: function(invitee) {
      if (invitee.invite_prefs && invitee.invite_prefs.full_name) {
        return invitee.invite_prefs.full_name.toLowerCase();
      }
      return invitee.email;
    },
    filterOutURAs: function(invitees) {
      return invitees.filter(function(invitee) {
        if (invitee.invite_prefs && invitee.invite_prefs.type === "ultra_restricted") {
          return false;
        }
        return true;
      });
    },
    checkUserMatch: function(invitee, regex) {
      return invitee.invite_prefs && invitee.invite_prefs.full_name && invitee.invite_prefs.full_name.match(regex) || invitee.email.match(regex);
    },
    invitePendingUsersToChannel: function(invitees, channel_id) {
      if (!channel_id || !invitees || !invitees.length) return;
      var all_emails = invitees.map(function(user) {
        return user.email;
      });
      while (all_emails.length) {
        var emails = all_emails.splice(0, 30).join(",");
        TS.api.call("channels.invitePendingUsers", {
          channel: channel_id,
          emails: emails
        });
      }
    },
    usersSorterByName: function(a, b) {
      var a_name = a.member ? TS.members.getMemberNameForSort(a.member) : TS.pending_users.getUserNameForSort(a);
      var b_name = b.member ? TS.members.getMemberNameForSort(b.member) : TS.pending_users.getUserNameForSort(b);
      if (a_name < b_name) return -1;
      if (a_name > b_name) return 1;
      return 0;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("team", {
    team_profile_changed_sig: new signals.Signal,
    team_plan_changed_sig: new signals.Signal,
    team_email_domain_changed_sig: new signals.Signal,
    team_domain_changed_sig: new signals.Signal,
    team_name_changed_sig: new signals.Signal,
    onStart: function() {
      if (TS.ms) TS.ms.connected_sig.add(_getTeamProfileOnNextRequest, TS.team);
      _maybeSetupTeamModel();
    },
    upsertAndSignal: function(team) {
      if (!team) return;
      var upsert = TS.team.upsertTeam(team);
      if (upsert.status === "CHANGED") {
        if (upsert.what_changed.indexOf("profile") != -1) {
          TS.team.team_profile_changed_sig.dispatch(upsert.team);
        }
        if (upsert.what_changed.indexOf("email_domain") != -1) {
          TS.team.team_email_domain_changed_sig.dispatch(upsert.team);
        }
        if (upsert.what_changed.indexOf("domain") != -1) {
          TS.team.team_domain_changed_sig.dispatch(upsert.team);
        }
      }
      return upsert;
    },
    upsertTeam: function(team, do_not_propagate) {
      _maybeSetupTeamModel();
      var existing_team = TS.model.team;
      var status = "NOOP";
      var what_changed = [];
      if (team) {
        TS.log(4, 'updating team "' + team.id + '"');
        for (var k in team) {
          if (k === "profile") {
            if (team.profile.fields && team.profile.fields.length) {
              if (typeof team.profile.fields[0] === "object") {
                _mergeFields(team.profile.fields);
              } else if (typeof team.profile.fields[0] === "string") {
                _deleteFields(team.profile.fields);
              }
              what_changed.push(k);
              status = "CHANGED";
            }
          } else if (k === "prefs" || k === "icon" || k === "cannot_leave_reasons") {
            existing_team[k] = team[k];
          } else if (existing_team[k] != team[k]) {
            if (team[k] && !TS.utility.isScalar(team[k])) {
              existing_team[k] = team[k];
              TS.warn(k + " is not scalar! it needs to be handled by upsertTeam specifically to test if it has changed! " + typeof team[k]);
            } else if (typeof team[k] !== "boolean" || !team[k] != !existing_team[k]) {
              existing_team[k] = team[k];
              what_changed.push(k);
              status = "CHANGED";
            }
          }
        }
        if (TS.boot_data.page_needs_enterprise) {
          var enterprise_team = TS.enterprise.getTeamById(team.id);
          existing_team = _.merge({}, existing_team, enterprise_team);
          TS.model.team = existing_team;
          if (!do_not_propagate) {
            do_not_propagate = true;
            TS.enterprise.upsertEnterpriseTeam(existing_team, do_not_propagate);
          }
        }
      }
      return {
        status: status,
        team: existing_team,
        what_changed: what_changed
      };
    },
    ensureTeamProfileFields: function() {
      if (_promise_to_get_team_profile) return _promise_to_get_team_profile;
      _promise_to_get_team_profile = TS.api.call("team.profile.get").then(function(response) {
        TS.team.upsertTeam({
          profile: response.data.profile
        });
        return null;
      });
      return _promise_to_get_team_profile;
    },
    getTeamProfileFieldById: function(id) {
      if (!TS.model.team.profile.fields.length) TS.warn("Ensure profile fields exist before calling getTeamProfileFieldById");
      for (var i = 0; i < TS.model.team.profile.fields.length; i += 1) {
        if (TS.model.team.profile.fields[i].id === id) return TS.model.team.profile.fields[i];
      }
      return null;
    },
    getVisibleTeamProfileFields: function() {
      if (!TS.model.team.profile.fields.length) TS.warn("Ensure profile fields exist before calling getVisibleTeamProfileFields");
      return TS.model.team.profile.fields.filter(function(field) {
        return !field.is_hidden;
      });
    },
    getHiddenTeamProfileFields: function() {
      if (!TS.model.team.profile.fields.length) TS.warn("Ensure profile fields exist before calling getHiddenTeamProfileFields");
      return TS.model.team.profile.fields.filter(function(field) {
        return field.is_hidden;
      });
    },
    getTeamCustomStatusPresets: function() {
      return _.map(TS.model.team.prefs.custom_status_presets, function(preset) {
        return {
          text: preset[1],
          emoji: preset[0]
        };
      });
    },
    sortTeamProfileFieldsByOrdering: function() {
      if (!TS.model.team.profile.fields.length) {
        TS.warn("Ensure profile fields exist before calling sortTeamProfileFieldsByOrdering");
      } else {
        TS.model.team.profile.fields.sort(function(this_field, that_field) {
          return this_field.ordering - that_field.ordering;
        });
      }
    },
    getVisibleTeamProfileFieldsForMember: function(member, include_empty_member_fields) {
      if (!(member && member.profile)) return [];
      if (!TS.model.team.profile.fields.length) TS.warn("Ensure profile fields exist before calling getVisibleTeamProfileFieldsForMember");
      return TS.model.team.profile.fields.filter(function(field) {
        return (include_empty_member_fields || _.get(member.profile, ["fields", field.id, "value"])) && !field.is_hidden;
      }).map(function(field) {
        return $.extend(true, {
          value: _.get(member.profile, ["fields", field.id, "value"]),
          alt: _.get(member.profile, ["fields", field.id, "alt"])
        }, field);
      });
    },
    isEntireTeamLoaded: function() {
      return _entire_team_loaded;
    }
  });
  var _entire_team_loaded = false;
  var _promise_to_get_team_profile;
  var _getTeamProfileOnNextRequest = function() {
    _promise_to_get_team_profile = null;
  };
  var _isEmpty = function(fields) {
    if (fields && fields.length) _.remove(fields, function(field) {
      return !field;
    });
    return !(fields && fields.length);
  };
  var _maybeSetupTeamModel = function() {
    if (_.get(window, "TS.model.team.profile.fields")) return;
    TS.model.team = TS.model.team || {};
    TS.model.team.profile = TS.model.team.profile || {};
    TS.model.team.profile.fields = TS.model.team.profile.fields || [];
  };
  var _mergeFields = function(fields) {
    if (_isEmpty(fields)) return;
    var sort = false;
    var upsert_members = false;
    var map = TS.model.team.profile.fields.reduce(function(accumulator, field) {
      accumulator[field.id] = field;
      return accumulator;
    }, {});
    fields.forEach(function(field) {
      var existing_field = map[field.id];
      if (existing_field) {
        upsert_members = upsert_members || _mustUpsertMembersAfterMerge(existing_field, field);
        sort = sort || existing_field.ordering !== field.ordering;
        $.extend(true, existing_field, field);
      } else {
        TS.model.team.profile.fields.push(field);
        if (TS.model.members && field.type === "options_list") upsert_members = true;
      }
    });
    if (sort) TS.team.sortTeamProfileFieldsByOrdering();
    if (upsert_members) _upsertMembers(fields);
  };
  var _deleteFields = function(fields) {
    if (_isEmpty(fields)) return;
    _.remove(TS.model.team.profile.fields, function(field) {
      return fields.indexOf(field.id) !== -1;
    });
    _upsertMembers(fields);
  };
  var _upsertMembers = function(fields) {
    if (!fields || !fields.length) return;
    if (!TS.model.members) return;
    fields.forEach(function(field) {
      TS.model.members.forEach(function(member) {
        if (member.profile.fields && member.profile.fields[field.id || field]) {
          if (field.id) {
            if (field.type !== "options_list") return;
            var value_is_valid = field.possible_values.indexOf(member.profile.fields[field.id].value) !== -1;
            if (value_is_valid) return;
          }
          var member_to_upsert = $.extend(true, {}, member);
          delete member_to_upsert.profile.fields[field.id || field];
          TS.members.upsertMember(member_to_upsert);
        }
      });
    });
  };
  var _mustUpsertMembersAfterMerge = function(old_field, new_field) {
    if (TS.model.members && new_field.type === "options_list") {
      return new_field.possible_values.some(function(value) {
        return old_field.possible_values.indexOf(value) === -1;
      });
    }
    return false;
  };
})();
(function() {
  "use strict";
  TS.registerModule("apps", {
    onStart: function() {
      var always_wait = true;
      _resetUpAppsThrottled = TS.utility.throttleFunc(_resetUpAppsThrottled, 3e3, always_wait);
    },
    resetUpApps: function() {
      TS.storage.storeApps("");
      _resetUpAppsThrottled();
    },
    setUp: function() {
      return TS.apps.fetchApps();
    },
    ingestApp: function(app) {
      if (!app || !app.id) return;
      TS.model.apps[app.id] = app;
      TS.storage.storeApps({
        data: TS.model.apps,
        cache_ts: TS.model.apps_cache_ts
      });
    },
    ingestApps: function(apps) {
      if (typeof apps !== "object" || !apps) return;
      TS.storage.storeApps({
        data: apps,
        cache_ts: TS.model.apps_cache_ts
      });
      TS.model.apps = {};
      _.forEach(apps, function(app) {
        TS.model.apps[app.id] = app;
      });
    },
    fetchApps: function() {
      var ls_apps = TS.storage.fetchApps();
      if (ls_apps && TS.model.apps_cache_ts == ls_apps.cache_ts) {
        TS.model.did_we_load_with_app_cache = true;
        TS.apps.ingestApps(ls_apps.data);
        return Promise.resolve();
      }
      return TS.api.call("apps.list").then(function(res) {
        TS.model.apps_cache_ts = res.data.cache_ts;
        TS.apps.ingestApps(res.data.apps);
      }).catch(_.noop);
    },
    getAppById: function(app_id) {
      if (!_.isString(app_id)) return null;
      var apps = TS.model.apps;
      if (!apps) {
        TS.warn("Trying to look up app by id (" + app_id + ") but TS.model.apps is not present.");
        return null;
      }
      var app = _.find(TS.model.apps, {
        id: app_id
      });
      if (app) {
        return app;
      }
      TS.warn("Trying to look up app by id (" + app_id + ") but it is not present.");
      return null;
    },
    promiseToGetFullAppProfile: function(bot_id, show_auth_summary) {
      if (!_.isString(bot_id)) return null;
      return new Promise(function(resolve, reject, onCancel) {
        var apps_profile_promise = TS.api.call("apps.profile.get", {
          bot: bot_id,
          show_auth_summary: !!show_auth_summary
        }).then(function(res) {
          if (res.data.ok && res.data.app_profile) {
            var app = res.data.app_profile;
            TS.apps.ingestApp(app);
            resolve(app);
          } else {
            reject(res.data.error);
            TS.warn("Trying to look up app by bot id (" + bot_id + ") but it failed.");
          }
        }).catch(function(error) {
          TS.warn("Trying to look up app by bot id (" + bot_id + ") but it failed.");
          reject(error.data);
        });
        onCancel(function() {
          apps_profile_promise.cancel();
        });
      });
    },
    sortNames: function(names) {
      return names.slice().sort(TS.i18n.sorter);
    },
    constructTemplateArgsForCardAndProfile: function(app, bot_id) {
      if (!app) return TS.warn("Trying to build app card but it failed.");
      var template_args = {
        name: app.name,
        desc: app.desc,
        app_icons: app.icons,
        app_id: app.id,
        bot_id: bot_id,
        is_slack_integration: app.is_slack_integration,
        is_directory_published: app.is_directory_published,
        commands: _.toArray(app.commands)
      };
      var is_bot = _.get(app, "bot_user.id");
      var app_name;
      if (app.app_card_color) {
        template_args.color = TS.utility.hex2rgb(app.app_card_color);
        template_args.color.hex = app.app_card_color;
      }
      if (app.config && app.config.is_custom_integration) {
        if (app.config.icons) {
          if (app.config.icons.emoji) {
            var emoji_img_html = TS.emoji.graphicReplace(TS.utility.htmlEntities(app.config.icons.emoji), {
              force_img: true
            });
            template_args.emoji_img_tag = new Handlebars.SafeString(emoji_img_html);
          } else {
            template_args.bot_icons = app.config.icons;
          }
        }
        if (app.bot_user) {
          app_name = app.config.real_name ? app.config.real_name : app.bot_user.username;
        } else {
          app_name = app.config.username;
        }
        template_args.name = app_name;
        template_args.desc = app.config.descriptive_label;
        template_args.username = app.config.username;
        template_args.custom_integration_type = app.config.custom_integration_type;
        template_args.date_created = app.config.date_created;
        var creator_name = '<a class="bold member charcoal_grey" data-member-id=' + app.config.created_by + ">" + TS.members.getMemberDisplayNameById(app.config.created_by, true, true) + "</a>";
        template_args.custom_integration_creator = new Handlebars.SafeString(creator_name);
      }
      if (_.get(app.config, "date_deleted") > 0 || _.get(app.auth, "revoked") === true) {
        template_args.deleted = true;
        template_args.app_id = app.id;
      }
      if (!app.is_slack_integration && (!app.auth || app.auth.revoked)) {
        template_args.disabled = true;
      } else if (app.is_slack_integration && (!app.config || (app.config.is_active !== "1" || app.config.date_deleted !== "0"))) {
        template_args.disabled = true;
      }
      if (is_bot || !app.is_slack_integration) {
        template_args.show_settings_section = true;
      }
      if (app.installation_summary) {
        var installation_summary = app.installation_summary.replace(/<@([A-Z0-9]+)>/g, function(match, user_id) {
          if (TS.members.getMemberById(user_id)) {
            return '<span class="app_card_member_link" data-member-profile-link=' + user_id + ">" + TS.members.getMemberDisplayNameById(user_id, true, true) + "</span>";
          }
          return '<span class="app_card_member_link" data-member-profile-link=' + user_id + ">A user</span>";
        });
        installation_summary = installation_summary.replace(/#([a-z0-9-]+)/g, function(match, channel_name) {
          var installation_summary_channel = TS.channels.getChannelByName(channel_name);
          if (installation_summary_channel) {
            var prefix = TS.templates.builders.makeChannelPrefix(installation_summary_channel);
            return '<span class="app_card_channel_link internal_channel_link" data-channel-id="' + installation_summary_channel.id + '">' + prefix + channel_name + "</span>";
          }
          return channel_name;
        });
        template_args.installation_summary = new Handlebars.SafeString(installation_summary);
      }
      if (is_bot) {
        template_args.bot_user = app.bot_user.id;
        template_args.username = app.bot_user.username;
        template_args.bot_user_channel_count = app.bot_user.memberships_count;
        if (app.bot_user.memberships_count < 1 && app.is_slack_integration) {
          template_args.show_settings_section = false;
        }
        var model_ob = TS.shared.getActiveModelOb();
        if (TS.model.active_channel_id || TS.model.active_group_id) {
          var membership_status = TS.membership.getUserChannelMembershipStatus(app.bot_user.id, model_ob);
          var is_bot_member_of_channel = membership_status.is_known && membership_status.is_member;
          if (!membership_status.is_known) {
            TS.warn("Not sure whether bot user " + app.bot_user.id + " is a member of " + model_ob.id + "; assuming not just to be sure");
          }
          if (is_bot_member_of_channel) {
            if (model_ob.is_group && TS.permissions.members.canKickFromGroups() || model_ob.is_channel && TS.permissions.members.canKickFromChannels()) {
              template_args.channel_kick_name = (TS.model.active_channel_id ? "#" : "") + model_ob.name;
            }
          }
        }
        if (!template_args.disabled) {
          if (!TS.model.user.is_ultra_restricted) {
            template_args.show_channel_invite = true;
          }
        }
        if (template_args.deleted === true) {
          template_args.hide_link_to_app_profile = true;
        }
      }
      if (app.long_desc_formatted) template_args.long_description = new Handlebars.SafeString(app.long_desc_formatted);
      if (app.support_url) template_args.support_url = app.support_url;
      if (app.user_can_manage) template_args.user_can_manage = app.user_can_manage;
      if (app.is_slack_integration && _.isEmpty(_.get(app, "commands"))) {
        template_args.hide_expand_button = true;
      }
      return template_args;
    }
  });
  var _resetUpAppsThrottled = function() {
    TS.apps.setUp();
  };
})();
(function() {
  "use strict";
  TS.registerModule("bots", {
    added_sig: new signals.Signal,
    changed_name_sig: new signals.Signal,
    changed_deleted_sig: new signals.Signal,
    changed_icons_sig: new signals.Signal,
    changed_during_bulk_upsert_sig: new signals.Signal,
    is_in_bulk_upsert_mode: false,
    onStart: function() {
      _storeBotsThrottled = TS.utility.throttleFunc(_storeBotsThrottled, 20);
    },
    getBotById: function(id) {
      if (_id_map[id]) return _id_map[id];
      var bots = TS.model.bots;
      var bot;
      for (var i = 0; i < bots.length; i += 1) {
        bot = bots[i];
        if (bot.id == id) {
          TS.warn(id + " not in _id_map");
          _id_map[id] = bot;
          return bot;
        }
      }
      return null;
    },
    getBotByMsg: function(msg) {
      var member = TS.members.getMemberById(msg.user);
      var bot_id = msg.bot_id || _.get(member, "profile.bot_id");
      if (!bot_id) return null;
      var bot = TS.bots.getBotById(bot_id);
      if (bot) {
        bot.id = bot_id;
        return bot;
      }
      if (msg.bot_profile) {
        msg.bot_profile.id = bot_id;
        return msg.bot_profile;
      }
      return null;
    },
    getBotByName: function(name) {
      var bots = TS.model.bots;
      var bot;
      if (typeof name === "undefined") {
        return null;
      }
      for (var i = 0; i < bots.length; i += 1) {
        bot = bots[i];
        if (bot.name.toLowerCase() == name.toLowerCase()) return bot;
      }
      return null;
    },
    getBotInfoByMsg: function(msg) {
      var member = TS.members.getMemberById(msg.user);
      var bot = TS.bots.getBotByMsg(msg);
      var bot_id = _.get(bot, "id") || _.get(member, "profile.bot_id");
      if (bot_id && !bot && TS.lazyLoadMembersAndBots()) {
        TS.info(1989, "Flannel: failed to find a bot (" + bot_id + ") whilst lazy loading bots");
      }
      var app_id = _.get(member, "profile.api_app_id") || _.get(bot, "app_id");
      if (!app_id && !bot_id) {
        TS.warn("Unable to get bot info for message", msg);
        return null;
      }
      return {
        bot_id: bot_id,
        app_id: app_id
      };
    },
    getBotNameById: function(id) {
      var bot = TS.bots.getBotById(id);
      if (bot && bot.name) {
        return bot.name;
      }
    },
    upsertAndSignal: function(bot) {
      var upsert = TS.bots.upsertBot(bot);
      if (upsert.status === "CHANGED") {
        if (upsert.what_changed.indexOf("icons") != -1) {
          TS.bots.changed_icons_sig.dispatch(upsert.bot);
        }
        if (upsert.what_changed.indexOf("name") != -1) {
          TS.bots.changed_name_sig.dispatch(upsert.bot);
        }
        if (upsert.what_changed.indexOf("deleted") != -1) {
          TS.bots.changed_deleted_sig.dispatch(upsert.bot);
        }
      }
      return upsert;
    },
    upsertBot: function(bot) {
      var bots = TS.model.bots;
      var existing_bot = TS.bots.getBotById(bot.id);
      var status = "NOOP";
      var what_changed = [];
      if (existing_bot) {
        if (TS.pri) TS.log(5, 'updating existing bot "' + bot.id + '"');
        for (var k in bot) {
          if (k === "icons") {
            if (bot[k] && !TS.utility.areSimpleObjectsEqual(bot[k], existing_bot[k], "bot:" + bot.id + " " + bot.name)) {
              existing_bot.icons = bot.icons;
              status = "CHANGED";
              what_changed.push(k);
            }
          } else if (existing_bot[k] != bot[k]) {
            if (bot[k] && !TS.utility.isScalar(bot[k])) {
              existing_bot[k] = bot[k];
              TS.warn(k + " is not scalar! it needs to be handled by upsertBot specifically to test if it has changed! " + typeof bot[k]);
            } else if (typeof bot[k] !== "boolean" || !bot[k] != !existing_bot[k]) {
              what_changed.push(k);
              existing_bot[k] = bot[k];
              status = "CHANGED";
            }
          }
        }
        bot = existing_bot;
      } else {
        status = "ADDED";
        if (TS.pri) TS.log(5, 'adding bot "' + bot.id + '"');
        TS.bots.processNewBotForUpserting(bot);
        bots.push(bot);
        _id_map[bot.id] = bot;
      }
      if (status === "ADDED" || status === "CHANGED") {
        _bots_changed_during_bulk_upsert = true;
        TS.bots.maybeStoreBots();
      }
      return {
        status: status,
        bot: bot,
        what_changed: what_changed
      };
    },
    processNewBotForUpserting: function() {},
    prepareBotsForLS: function() {
      return _.cloneDeep(TS.model.bots);
    },
    maybeStoreBots: function(force) {
      if (!TS.storage.isUsingMemberBotCache()) return;
      if (TS.bots.is_in_bulk_upsert_mode) return;
      _storeBotsThrottled(force || false);
    },
    configureUrl: function(member) {
      if (!member.is_bot) return;
      var url;
      var app_id = _getBotAppId(member);
      if (app_id) {
        url = "/apps/" + app_id;
      } else if (member.profile.bot_id) {
        url = "/services/" + member.profile.bot_id;
      }
      return url;
    },
    startBatchUpsert: function() {
      if (TS.bots.is_in_bulk_upsert_mode) return false;
      TS.bots.is_in_bulk_upsert_mode = true;
      _bots_changed_during_bulk_upsert = false;
      return true;
    },
    finishBatchUpsert: function() {
      if (!TS.bots.is_in_bulk_upsert_mode) return false;
      TS.bots.is_in_bulk_upsert_mode = false;
      TS.bots.maybeStoreBots();
      if (_bots_changed_during_bulk_upsert) {
        TS.bots.changed_during_bulk_upsert_sig.dispatch();
      }
      return true;
    },
    ensureBotsInDataArePresent: function(data) {
      var bot_ids = TS.utility.extractAllBotIds(data);
      return TS.bots.ensureBotsArePresent(bot_ids);
    },
    ensureBotsArePresent: function(bot_ids) {
      var bot_id_blacklist = ["B01", "BSLACKBOT"];
      var required_bot_ids = _(bot_ids).difference(bot_id_blacklist).reject(TS.bots.getBotById).value();
      if (!required_bot_ids.length) return Promise.resolve();
      var fetched_bots_p;
      if (TS.useSocket() && TS.boot_data.should_use_flannel) {
        fetched_bots_p = TS.flannel.fetchAndUpsertObjectsByIds(required_bot_ids);
      } else {
        fetched_bots_p = TS.api.call("bots.info", {
          bots: required_bot_ids.join(",")
        }).then(function(resp) {
          return resp.data.bots.map(function(raw_bot) {
            return TS.bots.upsertAndSignal(raw_bot).bot;
          });
        });
      }
      return fetched_bots_p.tap(function(fetched_bots) {
        if (fetched_bots.length !== required_bot_ids.length) {
          TS.warn("TS.bots.ensureBotsArePresent requested " + required_bot_ids.length + " bots but received " + fetched_bots.length + ". Missing bots: " + _.difference(required_bot_ids, _.map(fetched_bots, "id")).join(","));
        }
      });
    }
  });
  var _bots_changed_during_bulk_upsert;
  var _id_map = {};
  var _getBotAppId = function(member) {
    var app_id = member.profile.api_app_id;
    if (!app_id && TS.model.apps && TS.model.apps.length) {
      var bot_app = _.find(TS.model.apps, function(app) {
        return app.name.toLowerCase() == member.name.toLowerCase();
      });
      if (bot_app) app_id = bot_app.id;
    }
    return app_id;
  };
  var _storeBotsThrottled = function(force) {
    var bots = TS.bots.prepareBotsForLS();
    var existing = !force && TS.storage.fetchBots();
    if (force || !existing || !TS.utility.areSimpleObjectsEqual(existing, bots)) {
      TS.storage.storeBots(bots);
    }
  };
})();
(function() {
  "use strict";
  TS.registerModule("members.view", {
    team_filter_changed_sig: new signals.Signal,
    filter_timer: null,
    onStart: function() {
      _is_web_admin_page = TS.web && TS.web.admin;
      var _SEARCH_DEBOUNCE_DELAY = 500;
      _debounced_members_search = TS.utility.debounceWithPromise(_promiseToSearch, _SEARCH_DEBOUNCE_DELAY);
      _debounced_restricted_search = TS.utility.debounceWithPromise(_promiseToSearch, _SEARCH_DEBOUNCE_DELAY);
      _debounced_deleted_search = TS.utility.debounceWithPromise(_promiseToSearch, _SEARCH_DEBOUNCE_DELAY);
    },
    switchTabs: function(tab_name) {
      if (_is_web_admin_page && TS.web.admin.view === "invites") {
        $("#" + tab_name + "_invites_tab").trigger("click");
      } else if (TS.client) {
        $("#" + tab_name + "_members_tab").find("a").trigger("click");
      } else {
        $("#" + tab_name + "_members_tab").trigger("click");
      }
    },
    bindTeamFilter: function(filter_container_id, scroller_id, options) {
      options = options || {};
      var $div = $(filter_container_id);
      var $input = $div.find("input.member_filter");
      var $icon_close = $div.find(".icon_close");
      _storeFilterArgumentsByScrollerId(scroller_id, options);
      _query_for_match = null;
      if (options.full_profile_filter && !options.is_long_list_view) {
        $input.on("focus", function() {
          TS.team.ensureTeamProfileFields();
        });
      }
      $input.bind("keyup update-team-filter", function() {
        var new_query = $input.val();
        if (TS.members.view.filter_timer) {
          window.clearTimeout(TS.members.view.filter_timer);
        }
        var search = function() {
          if (new_query.trim().toLocaleLowerCase() !== _query_for_match) {
            TS.members.view.filterTeam(new_query, filter_container_id, scroller_id, options).then(function() {
              if (TS.view) TS.view.rebuildUserGroupList();
            });
          }
          $icon_close.toggleClass("hidden", !new_query.trim());
        };
        if (options.is_long_list_view) {
          search();
        } else {
          TS.members.view.filter_timer = window.setTimeout(search, TS.members.getMembersForUser().length > 500 ? 250 : 50);
        }
      });
      $icon_close.bind("click", function() {
        TS.members.view.clearFilter(filter_container_id, scroller_id);
        if (TS.view) TS.view.rebuildUserGroupList();
        _query_for_match = null;
        setTimeout(function() {
          $input.focus();
        }, 0);
      });
    },
    filterTeam: function(new_query, filter_container_id, scroller_id, options) {
      var args = _getFilterArgumentsByScrollerId(scroller_id);
      if (_.get(options, "full_profile_filter") || _.get(args, "full_profile_filter")) {
        return TS.team.ensureTeamProfileFields().then(function() {
          if (_useSolrSearch(args)) {
            return _promiseToFilterTeam(new_query, filter_container_id, scroller_id, args);
          }
          _filterTeam(new_query, filter_container_id, scroller_id, options);
          return Promise.resolve();
        });
      }
      _filterTeam(new_query, filter_container_id, scroller_id);
      return Promise.resolve();
    },
    getTeamFilter: function() {
      return _query_for_match;
    },
    selectMatch: function(filter_container_id) {
      var $div = $(filter_container_id);
      var list_items_id = $div.data("list-items-id");
      var $list_items_container = $(list_items_id);
      var $list_items = $list_items_container.find(".member_item");
      var $active_items = $list_items.filter(".active");
      if ($active_items.length == 1) {
        var $active_item = $active_items.first();
        var member_id = $active_item.data("member-id");
        if (member_id) {
          TS.ims.startImByMemberId(member_id);
          TS.menu.end();
        }
      }
    },
    clearFilter: function(filter_container_id, scroller_id) {
      var args = _getFilterArgumentsByScrollerId(scroller_id);
      var $div = $(filter_container_id);
      var $input = $div.find("input.member_filter");
      var $icon_close = $div.find(".icon_close");
      var list_items_id = $div.data("list-items-id");
      var $list_items_container = $(list_items_id);
      var $list_items = $list_items_container.find(".member_item");
      _query_for_match = "";
      TS.storage.storeFilterState(_query_for_match);
      if (TS.members.view.filter_timer) {
        window.clearTimeout(TS.members.view.filter_timer);
        TS.members.view.filter_timer = null;
      }
      $input.val("");
      $icon_close.addClass("hidden");
      if (_useSolrSearch(args)) {
        _cleanUpPromiseToFilterTeam(scroller_id);
        TS.members.view.filterTeam(_query_for_match, filter_container_id, scroller_id, args);
      } else {
        $(".restricted_header, .bot_header, .ra_invite_prompt, .restricted_info").removeClass("hidden");
        $list_items_container.find(".no_results").addClass("hidden");
        $list_items.addClass("active");
        if (_lazy_clones[scroller_id]) {
          _lazy_clones[scroller_id].detachEvents();
          delete _lazy_clones[scroller_id];
        }
        $list_items_container.find(".member_item.clone").remove();
        $list_items_container.find(".filter_header").remove();
        TS.members.view.team_filter_changed_sig.dispatch("", TS.members.getMembersForUser().length);
        if (TS.client && scroller_id) {
          var $scroller = $(scroller_id);
          $scroller.trigger("resize-immediate");
          TS.ui.utility.updateClosestMonkeyScroller($scroller);
        }
      }
    },
    onTeamDirectoryItemClick: function(e) {
      if ($(e.target).closest("a").length) return;
      var $item = $(this);
      var member_id = $item.data("member-id");
      var member = TS.members.getMemberById(member_id);
      if (!member) return;
      if (TS.client) TS.client.ui.previewMember(member_id);
    },
    findMatchesInMemberList: function(members, query, include_profile_fields) {
      return _findMatchesInMemberList(members, query, include_profile_fields);
    },
    getHeaderLabelForMatchKey: function(key) {
      return _getHeaderLabelForMatchKey(key);
    }
  });
  var _query_for_match = "";
  var _lazy_clones = {};
  var _label_map = {};
  var _arguments_map = {};
  var _team_list_items = {};
  var _filters = {
    members: {},
    restricted: {},
    deleted: {}
  };
  var _FILTER_API_COUNT = 100;
  var _APPROXIMATE_ITEM_HEIGHT = TS.client ? 92 : 116;
  var _debounced_members_search;
  var _debounced_restricted_search;
  var _debounced_deleted_search;
  var _includeOrg = function() {
    if (_.get(TS, "web.admin.view") === "list" && TS.boot_data.feature_api_admin_page && TS.boot_data.page_needs_enterprise) return false;
    return TS.boot_data.page_needs_enterprise;
  };
  var _useSolrSearch = function(args) {
    if (TS.boot_data.page_needs_enterprise && args && args.is_long_list_view) return true;
    if (_.get(TS, "web.admin.view") === "list" && TS.boot_data.feature_api_admin_page && TS.boot_data.page_needs_enterprise) return true;
  };
  var _storeFilterArgumentsByScrollerId = function(scroller_id, options) {
    _arguments_map[scroller_id] = options;
  };
  var _getFilterArgumentsByScrollerId = function(scroller_id) {
    var args = _arguments_map[scroller_id];
    if (!args) {
      TS.error("Missing arguments for a bound filter");
      return;
    }
    if (_.isFunction(args)) args = args() || {};
    args.include_org = _includeOrg();
    return args;
  };
  var _updateTabCounts = function() {
    if (TS.lazyLoadMembersAndBots()) return;
    var members_count = _filters.members.filter_num_found - _filters.filtered_items.bots.length;
    var restricted_count = _filters.restricted.filter_num_found || 0;
    var deleted_count = _filters.deleted.filter_num_found || 0;
    var $restricted_members_tab = $("#restricted_members_tab");
    if (restricted_count === 0) {
      $restricted_members_tab.addClass("hidden");
    } else {
      $restricted_members_tab.removeClass("hidden");
    }
    var $disabled_members_tab = $("#disabled_members_tab");
    if (deleted_count === 0) {
      $disabled_members_tab.addClass("hidden");
    } else {
      $disabled_members_tab.removeClass("hidden");
    }
    $("#disabled_members_count_value").text(deleted_count);
    $("#restricted_members_count_value").text(restricted_count);
    $("#active_members_count_value").text(Math.max(0, members_count - restricted_count));
  };
  var _startSpinner = function(filter_container_id) {
    var $icon = $(filter_container_id).find(".ts_icon_search");
    if ($icon.next().is(filter_container_id + "_spinner")) return;
    var spinner = TS.templates.loading_indicator({
      id: filter_container_id.substring(1) + "_spinner"
    });
    $icon.after(spinner);
    $icon.addClass("hidden");
  };
  var _stopSpinner = function(filter_container_id) {
    $(filter_container_id).find(".ts_icon_search").removeClass("hidden");
    $(filter_container_id + "_spinner").remove();
  };
  var _cleanUpPromiseToFilterTeam = function(scroller_id) {
    if (_filters.filter_p) _filters.filter_p.cancel();
    if (_filters.filtered_items) _filters.filtered_items = {};
    _filters.filter_last_query = null;
    _filters.filter_last_include_org = null;
    _filters.members.filter_cursor_mark = "";
    _filters.members.filter_num_remaining = 0;
    _filters.members.filter_num_found = 0;
    _filters.members.filter_scroll_mark = 0;
    _filters.restricted.filter_cursor_mark = "";
    _filters.restricted.filter_num_remaining = 0;
    _filters.restricted.filter_num_found = 0;
    _filters.restricted.filter_scroll_mark = 0;
    _filters.deleted.filter_cursor_mark = "";
    _filters.deleted.filter_num_remaining = 0;
    _filters.deleted.filter_num_found = 0;
    _filters.deleted.filter_scroll_mark = 0;
    if (TS.client) {
      $(scroller_id).off("scroll.filter").scrollTop(0);
    } else if (TS.web) {
      $(window).off("scroll.filter").scrollTop(0);
    }
  };
  var _promiseToFilterTeam = function(raw_query, filter_container_id, scroller_id, options) {
    var query_for_display = raw_query.trim();
    _query_for_match = query_for_display.toLocaleLowerCase();
    TS.storage.storeFilterState(_query_for_match);
    var new_query = _filters.filter_last_query !== _query_for_match || _filters.filter_last_include_org !== options.include_org || _filters.filter_last_sort !== options.sort || _filters.filter_last_sort_dir !== options.sort_dir;
    if (new_query) {
      _cleanUpPromiseToFilterTeam(scroller_id);
      _filters.filter_last_query = _query_for_match;
      _filters.filter_last_include_org = options.include_org;
      if (options.sort) _filters.filter_last_sort = options.sort;
      if (options.sort_dir) _filters.filter_last_sort_dir = options.sort_dir;
    }
    _startSpinner(filter_container_id);
    var promiseToFilter = function() {
      return Promise.resolve().then(function() {
        return _promiseToSearchAndCombineResults(_filters, new_query, _query_for_match, options);
      }).then(function(response) {
        _stopSpinner(filter_container_id);
        return _displayPromiseToSearchResults(response, _filters, new_query, _query_for_match, query_for_display, filter_container_id, scroller_id, options);
      }).finally(function() {
        TS.utility.rAF(function() {
          if (TS.client) TS.ui.utility.updateClosestMonkeyScroller($(scroller_id));
        });
      });
    };
    if (new_query) {
      _filters.filter_p = promiseToFilter();
    } else {
      _filters.filter_p = _filters.filter_p.then(promiseToFilter);
    }
    return _filters.filter_p;
  };
  var _promiseToSearchAndCombineResults = function(filters, new_query, query_for_match, options) {
    var need_more_m = new_query || TS.model.ui_state.tab_name === "active_members" && filters.members.filter_num_remaining;
    var need_more_r = new_query || TS.model.ui_state.tab_name === "restricted_members" && filters.restricted.filter_num_remaining;
    var need_more_d = new_query || TS.model.ui_state.tab_name === "disabled_members" && filters.members.filter_num_remaining;
    if (!need_more_m && !need_more_r && !need_more_d) {
      _updateTabCounts();
      return Promise.resolve(filters.filtered_items);
    }
    var members_options = _.assign({}, options, {
      restricted: false
    });
    filters.members.filter_p = need_more_m ? _debounced_members_search(filters.members, query_for_match, members_options) : Promise.resolve([]);
    var restricted_options = _.assign({}, options, {
      restricted: true
    });
    filters.restricted.filter_p = need_more_r ? _debounced_restricted_search(filters.restricted, query_for_match, restricted_options) : Promise.resolve([]);
    var deleted_options = _.assign({}, options, {
      include_deleted: 2,
      include_restricted_and_full_members: true
    });
    filters.deleted.filter_p = need_more_d ? _debounced_deleted_search(filters.deleted, query_for_match, deleted_options) : Promise.resolve([]);
    return Promise.join(filters.members.filter_p, filters.restricted.filter_p, filters.deleted.filter_p, function(members, restricted, deleted) {
      var matches = (options.sort ? _allocateTeamListMembers : TS.members.allocateTeamListMembers)(members.concat(restricted, deleted));
      matches.members = _.uniqBy(matches.members, function(member) {
        return member.id;
      });
      matches.disabled_members = _.uniqBy(matches.disabled_members, function(member) {
        return member.id;
      });
      matches.restricted_members = _.uniqBy(matches.restricted_members, function(member) {
        return member.id;
      });
      matches.ultra_restricted_members = _.uniqBy(matches.ultra_restricted_members, function(member) {
        return member.id;
      });
      if (new_query) {
        filters.filtered_items = matches;
      } else {
        filters.filtered_items.members.push.apply(filters.filtered_items.members, matches.members);
        filters.filtered_items.disabled_members.push.apply(filters.filtered_items.disabled_members, matches.disabled_members);
        filters.filtered_items.deleted_bots.push.apply(filters.filtered_items.deleted_bots, matches.deleted_bots);
        filters.filtered_items.bots.push.apply(filters.filtered_items.bots, matches.bots);
        filters.filtered_items.restricted_members.push.apply(filters.filtered_items.restricted_members, matches.restricted_members);
        filters.filtered_items.ultra_restricted_members.push.apply(filters.filtered_items.ultra_restricted_members, matches.ultra_restricted_members);
      }
      return Promise.resolve(filters.filtered_items);
    });
  };
  var _displayPromiseToSearchResults = function(items, filters, new_query, query_for_match, query_for_display, filter_container_id, scroller_id, options) {
    if (!items) return;
    if (_.get(TS, "web.admin")) {
      return TS.web.admin.setLongListAdminListItems({
        items: items,
        no_dividers: !!query_for_match,
        query: query_for_match,
        new_query: !!new_query,
        num_found: {
          members: _filters.members.filter_num_found || 0,
          restricted: _filters.restricted.filter_num_found || 0,
          disabled: _filters.deleted.filter_num_found || 0
        },
        remaining: {
          members: _filters.members.filter_num_remaining || 0,
          restricted: _filters.restricted.filter_num_remaining || 0,
          disabled: _filters.deleted.filter_num_remaining || 0
        }
      }, function() {
        _promiseToFilterTeam(query_for_match, filter_container_id, scroller_id, options);
      });
    }
    _updateTabCounts();
    if (TS.client) {
      _team_list_items = TS.view.buildLongListTeamListItems(items, !!query_for_match);
    } else if (TS.web.members) {
      _team_list_items = TS.web.members.buildLongListTeamListItems(items, !!query_for_match);
    }
    var need_to_reset_current_subtab = false;
    if (TS.model.ui_state.tab_name === "disabled_members" && (_filters.deleted.filter_num_found || 0) === 0) need_to_reset_current_subtab = true;
    if (TS.model.ui_state.tab_name === "restricted_members" && (_filters.restricted.filter_num_found || 0) === 0) need_to_reset_current_subtab = true;
    var user_groups = TS.model.user_groups.filter(function(ug) {
      return !ug.date_delete;
    });
    if (TS.model.ui_state.tab_name === "user_groups" && user_groups.length === 0) need_to_reset_current_subtab = true;
    if (need_to_reset_current_subtab) {
      TS.model.ui_state.tab_name = "active_members";
      TS.storage.storeUIState(TS.model.ui_state);
      $("#active_members_tab").trigger("click");
    }
    var $active_members_list = $("#active_members_list");
    if ($active_members_list.length) {
      $active_members_list.longListView("setItems", _team_list_items.active_members_list_items);
      if (new_query) $active_members_list.longListView("scrollToTop");
    }
    var $restricted_members_list = $("#restricted_members_list");
    if ($restricted_members_list.length) {
      $restricted_members_list.longListView("setItems", _team_list_items.restricted_members_list_items);
      if (new_query) $restricted_members_list.longListView("scrollToTop");
    }
    var $deleted_members_list = $("#deleted_members_list");
    if ($deleted_members_list.length) {
      $deleted_members_list.longListView("setItems", _team_list_items.deleted_members_list_items);
      if (new_query) $deleted_members_list.longListView("scrollToTop");
    }
    var active_matches = items.members.concat(items.bots);
    var restricted_matches = items.restricted_members.concat(items.ultra_restricted_members);
    var disabled_matches = items.disabled_members.concat(items.deleted_bots);
    var tabs = [{
      name: "active",
      label: TS.i18n.t("full team members", "members_view")(),
      matches: active_matches
    }, {
      name: "restricted",
      label: TS.i18n.t("multi-channel guests", "members_view")(),
      matches: restricted_matches
    }, {
      name: "disabled",
      label: TS.i18n.t("deactivated accounts", "members_view")(),
      matches: disabled_matches
    }];
    tabs.forEach(function(tab) {
      var $no_results = $("#" + tab.name + "_no_results");

      function noMatchesCase() {
        var template_args = {
          query: query_for_display,
          tab: tab,
          active_matches: active_matches,
          show_active_matches: tab.name !== "active" && active_matches.length > 0,
          restricted_matches: restricted_matches,
          show_restricted_matches: tab.name !== "restricted" && restricted_matches.length > 0,
          disabled_matches: disabled_matches,
          show_disabled_matches: tab.name !== "disabled" && disabled_matches.length > 0
        };
        var html = TS.templates.team_list_no_results(template_args);
        $no_results.removeClass("hidden").html(html);
        $no_results.find(".clear_members_filter").one("click", function() {
          TS.members.view.clearFilter(filter_container_id, scroller_id);
        });
      }
      if (tab.matches.length > 0 || !query_for_match) {
        $no_results.addClass("hidden").empty();
      } else {
        noMatchesCase();
      }
    });
    if (new_query) {
      if (scroller_id === "#team_list_scroller") {
        if (TS.client) {
          var $scrollable = $(scroller_id);
          var $list = $scrollable.find("#team_list_members_wrapper");
          $scrollable.on("scroll.filter", function() {
            var maybe_scroll_mark = $scrollable.scrollTop() + $scrollable.height() + _APPROXIMATE_ITEM_HEIGHT;
            var list_items_height;
            if (TS.model.ui_state.tab_name === "active_members") {
              if (maybe_scroll_mark <= filters.members.filter_scroll_mark) return;
              list_items_height = $list.height();
              if (maybe_scroll_mark > list_items_height && filters.members.filter_p && filters.members.filter_p.isResolved()) {
                _promiseToFilterTeam(query_for_match, filter_container_id, scroller_id, options);
                filters.members.filter_scroll_mark = maybe_scroll_mark;
              }
            }
            if (TS.model.ui_state.tab_name === "restricted_members") {
              if (maybe_scroll_mark <= filters.restricted.filter_scroll_mark) return;
              list_items_height = $list.height();
              if (maybe_scroll_mark > list_items_height && filters.restricted.filter_p && filters.restricted.filter_p.isResolved()) {
                _promiseToFilterTeam(query_for_match, filter_container_id, scroller_id, options);
                filters.restricted.filter_scroll_mark = maybe_scroll_mark;
              }
            }
          });
        } else if (TS.web) {
          $(window).off("scroll.filter").on("scroll.filter", _.throttle(function() {
            var list_items_height = 0;
            var count = 0;
            var remaining = 0;
            var filter_p = null;
            if (TS.model.ui_state.tab_name === "active_members") {
              list_items_height = _.parseInt($("#active_members_list > .list_items").css("height"));
              count = _.reject(_team_list_items.active_members_list_items, {
                is_divider: true
              }).length;
              remaining = filters.members.filter_num_remaining;
              filter_p = filters.members.filter_p;
            }
            if (TS.model.ui_state.tab_name === "restricted_members") {
              list_items_height = _.parseInt($("#restricted_members_list > .list_items").css("height"));
              count = _.reject(_team_list_items.restricted_members_list_items, {
                is_divider: true
              }).length;
              remaining = filters.restricted.filter_num_remaining;
              filter_p = filters.restricted.filter_p;
            }
            if (TS.model.ui_state.tab_name === "disabled_members") {
              list_items_height = _.parseInt($("#disabled_members_list > .list_items").css("height"));
              count = _.reject(_team_list_items.deleted_members_list_items, {
                is_divider: true
              }).length;
              remaining = filters.deleted.filter_num_remaining;
              filter_p = _filters.deleted.filter_p;
            }
            var buffer = .9 * Math.min(count, _FILTER_API_COUNT);
            list_items_height = _.isNaN(list_items_height) ? 0 : list_items_height;
            list_items_height -= buffer * _APPROXIMATE_ITEM_HEIGHT;
            if (list_items_height && remaining && $(this).scrollTop() > list_items_height && filter_p && filter_p.isResolved()) {
              _promiseToFilterTeam(query_for_match, filter_container_id, scroller_id, options);
            }
          }, 50, {
            leading: true
          }));
        }
      }
      var count_for_query = (filters.members.filter_num_found || 0) + (filters.restricted.filter_num_found || 0) + (filters.deleted.filter_num_found || 0);
      TS.members.view.team_filter_changed_sig.dispatch(query_for_display, count_for_query);
    }
  };
  var _buildPromiseToSearchArguments = function(filter, query_for_match, options) {
    var matchers = [];
    if (query_for_match) {
      matchers = query_for_match.split(/\s*,\s*|\s+/).map(function(q) {
        return q.charAt("0") === "@" ? q.substring(1) : q;
      }).filter(function(q) {
        return !!q;
      }).map(function(query) {
        if (query.length === 1 || !options.full_profile_filter) {
          var is_real_name_match = TS.utility.search.makeClause("real_name", query);
          if (TS.boot_data.feature_name_tagging_client) {
            var is_display_name_match = TS.utility.search.makeClause("display_name", query);
            var is_real_name_or_display_name_match = TS.utility.search.makeConjunction("OR", [is_real_name_match, is_display_name_match]);
            return is_real_name_or_display_name_match;
          }
          var is_name_match = TS.utility.search.makeClause("name", query);
          var is_name_or_real_name_match = TS.utility.search.makeConjunction("OR", [is_name_match, is_real_name_match]);
          return is_name_or_real_name_match;
        }
        return TS.utility.search.makeClause("fuzzy_with_email", query);
      });
    }
    matchers.push(TS.utility.search.makeClause("is", "user"));
    if (options.restricted) {
      var restricted_matcher = TS.utility.search.makeClause("level", "restricted");
      var ultra_restricted_matcher = TS.utility.search.makeClause("level", "ultra_restricted");
      matchers.push(TS.utility.search.makeConjunction("OR", [restricted_matcher, ultra_restricted_matcher]));
    }
    var query = matchers.length > 1 ? TS.utility.search.makeConjunction("AND", matchers) : matchers[0];
    var calling_args = {
      query: query,
      count: _FILTER_API_COUNT,
      include_bots: options.include_bots,
      exclude_slackbot: options.exclude_slackbot,
      include_deleted: options.include_deleted
    };
    if (options.sort) calling_args.sort = options.sort;
    if (options.sort_dir) calling_args.sort_dir = options.sort_dir;
    if (options.include_org) calling_args.all_of_org = options.include_org;
    if (filter.filter_cursor_mark) calling_args.cursor_mark = filter.filter_cursor_mark;
    if (options.endpoint) calling_args.endpoint = options.endpoint;
    return calling_args;
  };
  var _promiseToSearch = function(filter, query_for_match, options) {
    var calling_args = _buildPromiseToSearchArguments(filter, query_for_match, options);
    if (TS.lazyLoadMembersAndBots()) {
      calling_args.raw_query = query_for_match;
    }
    return TS.utility.search.promiseToSearch(calling_args).then(function(response) {
      if (!filter.filter_num_remaining) {
        filter.filter_num_remaining = response.data.num_found;
        filter.filter_num_found = response.data.num_found;
      }
      filter.filter_num_remaining -= response.data.items.length;
      filter.filter_cursor_mark = response.data.next_cursor_mark;
      if (!response.data.items.length) return Promise.resolve([]);
      var matches = response.data.items.map(function(member) {
        var full_member = TS.members.getMemberById(member.id);
        if (!full_member || !_.isEqual(full_member, member)) {
          if (options.include_org && member.team_id !== TS.model.team.id) {
            member.is_primary_owner = false;
            member.is_owner = false;
            member.is_admin = false;
          }
          full_member = TS.members.upsertMember(member).member;
        }
        return full_member;
      });
      if (!options.restricted && !options.include_restricted_and_full_members) {
        matches = matches.filter(function(member) {
          return !member.is_restricted;
        });
      }
      if (matches.length) return Promise.resolve(matches);
      if (filter.filter_num_remaining) return _promiseToSearch(filter, query_for_match, options);
      return Promise.resolve([]);
    });
  };
  var _filterTeam = function(new_query, filter_container_id, scroller_id, options) {
    var $div = $(filter_container_id);
    var query_for_display = new_query.trim();
    _query_for_match = query_for_display.toLocaleLowerCase();
    var list_items_id = $div.data("list-items-id");
    var $list_items_container = $(list_items_id);
    var $list_items = $list_items_container.find(".member_item:not(.clone)");
    var $list_items_active = $list_items.filter(".active");
    var $list_items_cloned = $list_items_container.find(".member_item.clone");
    var $list_items_cloned_header = $list_items_container.find(".filter_header");
    var lazy_load = !TS.web && filter_container_id === "#team_filter";
    var node_hash = {};
    var $parent_node;
    var $last_focused_node;
    var matches;
    TS.storage.storeFilterState(_query_for_match);
    var can_use_fast_detach = false;
    var $display_toggle_element;
    if (_is_web_admin_page && filter_container_id === "#team_filter") {
      $display_toggle_element = $list_items_container.find(".tab_pane.selected");
    }
    if (!$display_toggle_element && !TS.web && filter_container_id === "#team_filter") {
      $display_toggle_element = $("#team_list_members");
    }
    if ($display_toggle_element && $display_toggle_element.length) {
      $display_toggle_element.addClass("hidden");
    }
    if (can_use_fast_detach) {
      $parent_node = $list_items.parent();
      $last_focused_node = document.activeElement ? $(document.activeElement) : null;
      $list_items.detach();
    }
    if (_lazy_clones[scroller_id]) {
      _lazy_clones[scroller_id].detachEvents();
      delete _lazy_clones[scroller_id];
    }
    $list_items_cloned.remove();
    $list_items_cloned_header.remove();
    $list_items_active.removeClass("active");
    $list_items_container.find(".no_results").addClass("hidden");
    if (can_use_fast_detach) {
      $parent_node.append($list_items);
      if ($last_focused_node) {
        $last_focused_node.focus();
      }
    }
    var tabs;
    if (_is_web_admin_page && TS.web.admin.view === "invites") {
      var all_matches = [];
      var pending_matches = [];
      var accepted_matches = [];
      $.each($list_items, function(i, item) {
        var id;
        item = $(item);
        id = item.data("invite-id");
        node_hash[id] = item;
      });
      pending_matches = _findMatchesInMemberList(TS.web.admin.pending_invites, _query_for_match).name || [];
      accepted_matches = _findMatchesInMemberList(TS.web.admin.accepted_invites, _query_for_match).name || [];
      all_matches = pending_matches.concat(accepted_matches);
      if (all_matches.length > 0) {
        $.each(all_matches, function(i, invite) {
          if (invite && invite.member && invite.member.id && node_hash[invite.member.id]) {
            node_hash[invite.member.id].addClass("active");
          }
        });
        if (scroller_id) $(scroller_id).trigger("resize");
      }
      tabs = [{
        name: "pending",
        label: TS.i18n.t("pending invitations", "members_view")(),
        matches: pending_matches
      }, {
        name: "accepted",
        label: TS.i18n.t("accepted invitations", "members_view")(),
        matches: accepted_matches
      }];
      tabs.forEach(function(tab) {
        var $no_results = $("#" + tab.name + "_no_results");
        if (tab.matches.length > 0) {
          $no_results.addClass("hidden").empty();
          return;
        }
        var template_args = {
          query: query_for_display,
          tab: tab,
          pending_matches: pending_matches,
          show_pending_matches: tab.name !== "pending" && pending_matches.length > 0,
          accepted_matches: accepted_matches,
          show_accepted_matches: tab.name !== "accepted" && accepted_matches.length > 0
        };
        var html = TS.templates.team_list_no_results(template_args);
        $no_results.removeClass("hidden").html(html);
        $no_results.find(".clear_members_filter").on("click", function() {
          TS.members.view.clearFilter(filter_container_id, scroller_id);
        });
      });
      matches = all_matches;
    } else {
      var all_members;
      var active_matches = [];
      var restricted_matches = [];
      var disabled_matches = [];
      if (_is_web_admin_page) {
        if (!new_query.length) {
          all_members = TS.web.admin.getMembersForUser();
        } else {
          all_members = TS.members.getMembersForUser();
        }
      } else {
        all_members = TS.members.getMembersForUser();
      }
      $(".restricted_header, .bot_header, .ra_invite_prompt, .restricted_info").toggleClass("hidden", !!_query_for_match);
      $.each($list_items, function(i, item) {
        var id;
        item = $(item);
        id = item.data("member-id");
        node_hash[id] = item;
      });
      all_matches = _findMatchesInMemberList(all_members, _query_for_match, options.full_profile_filter);
      var keys = Object.keys(all_matches);
      if (keys.length > 0) {
        _displayMatches(all_matches, keys, node_hash, disabled_matches, restricted_matches, active_matches, lazy_load ? scroller_id : "");
        if (scroller_id) {
          var $scroller = $(scroller_id);
          $scroller.trigger("resize");
          TS.ui.utility.updateClosestMonkeyScroller($scroller);
        }
      } else if (filter_container_id === "#file_member_filter") {
        $list_items_container.find(".query").text(query_for_display);
        $list_items_container.find(".no_results").removeClass("hidden");
      }
      if (filter_container_id === "#team_filter") {
        tabs = [{
          name: "active",
          label: TS.i18n.t("full team members", "members_view")(),
          matches: active_matches
        }, {
          name: "restricted",
          label: TS.i18n.t("multi-channel guests", "members_view")(),
          matches: restricted_matches
        }, {
          name: "disabled",
          label: TS.i18n.t("deactivated accounts", "members_view")(),
          matches: disabled_matches
        }];
        tabs.forEach(function(tab) {
          var $no_results = $("#" + tab.name + "_no_results");

          function noMatchesCase() {
            var template_args = {
              query: query_for_display,
              tab: tab,
              active_matches: active_matches,
              show_active_matches: tab.name !== "active" && active_matches.length > 0,
              restricted_matches: restricted_matches,
              show_restricted_matches: tab.name !== "restricted" && restricted_matches.length > 0,
              disabled_matches: disabled_matches,
              show_disabled_matches: TS.web && tab.name !== "disabled" && disabled_matches.length > 0
            };
            var html = TS.templates.team_list_no_results(template_args);
            $no_results.removeClass("hidden").html(html);
            $no_results.find(".clear_members_filter").on("click", function() {
              TS.members.view.clearFilter(filter_container_id, scroller_id);
            });
          }
          if (tab.matches.length > 0) {
            $no_results.addClass("hidden").empty();
            return;
          }
          noMatchesCase();
        });
      }
      matches = active_matches.concat(restricted_matches, disabled_matches);
    }
    if ($display_toggle_element && $display_toggle_element.length) {
      $display_toggle_element.removeClass("hidden");
    }
    TS.ui.utility.updateClosestMonkeyScroller($(scroller_id));
    TS.members.view.team_filter_changed_sig.dispatch(query_for_display, matches.length);
  };
  var _getHeaderLabelForMatchKey = function(key) {
    return _label_map[key] || key;
  };
  var _getFilterHeader = function(label, values) {
    var header = document.createElement("div");
    var header_label = document.createElement("strong");
    header.classList.add("filter_header");
    header_label.appendChild(document.createTextNode(label));
    if (values.length) header_label.appendChild(document.createTextNode(": "));
    header.appendChild(header_label);
    values.forEach(function(value, index) {
      header.appendChild(value);
      if (index < values.length - 1) header.appendChild(document.createTextNode(", "));
    });
    return header;
  };
  var _getHighlightedValue = function(value, match) {
    var highlighted_value = document.createElement("span");
    var strong_value = document.createElement("strong");
    var parts = value.split(match);
    strong_value.appendChild(document.createTextNode(match));
    highlighted_value.appendChild(document.createTextNode(parts.shift()));
    highlighted_value.appendChild(strong_value);
    highlighted_value.appendChild(document.createTextNode(parts.join(match)));
    return highlighted_value;
  };
  var _displayMatches = function(matches, keys, node_hash, disabled_matches, restricted_matches, active_matches, lazy_id) {
    var $lazy = $(lazy_id);
    var parent_disabled_fragment = document.createDocumentFragment();
    var parent_restricted_fragment = document.createDocumentFragment();
    var parent_active_fragment = document.createDocumentFragment();
    var $disabled_parent;
    var $restricted_parent;
    var $active_parent;
    var is_admin_subset_case = _is_web_admin_page && TS.web.admin.isSubsetCase();
    keys.sort(function(keyA, keyB) {
      return TS.i18n.sorter(_label_map[keyA], _label_map[keyB]);
    }).forEach(function(key) {
      var disabled_fragment = document.createDocumentFragment();
      var restricted_fragment = document.createDocumentFragment();
      var active_fragment = document.createDocumentFragment();
      var disabled_matches_values = [];
      var restricted_matches_values = [];
      var active_matches_values = [];
      var disabled_matches_value_map = {};
      var restricted_matches_value_map = {};
      var active_matches_value_map = {};
      if (is_admin_subset_case) {
        if (!$active_parent) {
          $active_parent = $("#active_members > div:first-of-type");
          $restricted_parent = $("#restricted_members > div:first-of-type");
          $disabled_parent = $("#disabled_members > div:first-of-type");
        }
      }
      matches[key].forEach(function(match) {
        var member = match.member;
        var node;
        var node_created = false;
        if (member && member.id) {
          node = node_hash[member.id];
          if (!node && is_admin_subset_case) {
            node = $(TS.web.admin.buildMemberHTML(member, false, false));
            node_created = true;
          }
          if (node) {
            if (key === "name" && !node_created) {
              node.addClass("active");
            } else if (member.deleted) {
              if (!$disabled_parent) $disabled_parent = node.parent();
              if (match.value && !disabled_matches_value_map[match.value]) disabled_matches_value_map[match.value] = disabled_matches_values.push(_getHighlightedValue(match.value, match.match));
              disabled_fragment.appendChild(node.clone().addClass("active clone").get(0));
            } else if (member.is_restricted) {
              if (!$restricted_parent) $restricted_parent = node.parent();
              if (match.value && !restricted_matches_value_map[match.value]) restricted_matches_value_map[match.value] = restricted_matches_values.push(_getHighlightedValue(match.value, match.match));
              restricted_fragment.appendChild(node.clone().addClass("active clone").get(0));
            } else {
              if (!$active_parent) $active_parent = node.parent();
              if (match.value && !active_matches_value_map[match.value]) active_matches_value_map[match.value] = active_matches_values.push(_getHighlightedValue(match.value, match.match));
              active_fragment.appendChild(node.clone().addClass("active clone").get(0));
            }
          }
          if (member.deleted) {
            disabled_matches.push(member);
          } else if (member.is_restricted) {
            restricted_matches.push(member);
          } else {
            active_matches.push(member);
          }
        }
      });
      if (disabled_fragment.childNodes && disabled_fragment.childNodes.length) {
        parent_disabled_fragment.appendChild(_getFilterHeader(_getHeaderLabelForMatchKey(key), disabled_matches_values));
        parent_disabled_fragment.appendChild(disabled_fragment);
      }
      if (restricted_fragment.childNodes && restricted_fragment.childNodes.length) {
        parent_restricted_fragment.appendChild(_getFilterHeader(_getHeaderLabelForMatchKey(key), restricted_matches_values));
        parent_restricted_fragment.appendChild(restricted_fragment);
      }
      if (active_fragment.childNodes && active_fragment.childNodes.length) {
        parent_active_fragment.appendChild(_getFilterHeader(_getHeaderLabelForMatchKey(key), active_matches_values));
        parent_active_fragment.appendChild(active_fragment);
      }
      disabled_fragment = null;
      restricted_fragment = null;
      active_fragment = null;
      disabled_matches_values = null;
      restricted_matches_values = null;
      active_matches_values = null;
      disabled_matches_value_map = null;
      restricted_matches_value_map = null;
      active_matches_value_map = null;
    });
    if ($disabled_parent) $disabled_parent.append(parent_disabled_fragment);
    if ($restricted_parent) $restricted_parent.append(parent_restricted_fragment);
    if ($active_parent) $active_parent.append(parent_active_fragment);
    if ($lazy.length) {
      var $clones = $lazy.find(".member_item.clone");
      _lazy_clones[lazy_id] = $clones.find(".lazy").lazyload({
        container: $lazy,
        ignore_when_hidden_element: $lazy,
        all_images_same_size: true
      });
      $clones.one("remove", function() {
        if (_lazy_clones[lazy_id]) {
          _lazy_clones[lazy_id].detachEvents();
          delete _lazy_clones[lazy_id];
        }
      });
    }
    if (is_admin_subset_case) {
      if (TS.web.admin.lazyload && TS.web.admin.lazyload.detachEvents) {
        TS.web.admin.lazyload.detachEvents();
        TS.web.admin.lazyload = null;
      }
      if (!TS.web.admin.lazyload) {
        TS.web.admin.lazyload = $("#admin_list").find(".lazy").lazyload();
      }
    }
    parent_disabled_fragment = null;
    parent_restricted_fragment = null;
    parent_active_fragment = null;
    $disabled_parent = null;
    $restricted_parent = null;
    $active_parent = null;
  };
  var _allocateTeamListMembers = function(members) {
    return _.reduce(members, function(result, member) {
      if (member.deleted) {
        if (member.is_bot) {
          result.deleted_bots.push(member);
        } else {
          result.disabled_members.push(member);
        }
      } else if (member.is_ultra_restricted) {
        result.ultra_restricted_members.push(member);
      } else if (member.is_restricted) {
        result.restricted_members.push(member);
      } else if (member.is_bot || member.is_slackbot) {
        result.bots.push(member);
      } else {
        result.members.push(member);
      }
      return result;
    }, {
      members: [],
      disabled_members: [],
      deleted_bots: [],
      bots: [],
      restricted_members: [],
      ultra_restricted_members: []
    });
  };
  var _is_web_admin_page;
  var _findMatchesInMemberList = function(members, query, include_profile_fields) {
    var start_regex = new RegExp("^" + TS.utility.regexpEscape(query), "i");
    var suffix_regex = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(query), "i");
    var matches = {};
    var team_fields = include_profile_fields && query ? TS.team.getVisibleTeamProfileFields() : [];
    _label_map = {
      title: "What I Do",
      name: "Name"
    };
    members.forEach(function(member) {
      var match;
      if (TS.boot_data.feature_name_tagging_client) {
        match = member._real_name_lc && (member._real_name_lc.match(start_regex) || member._real_name_lc.match(suffix_regex)) || member.email && (member.email.match(start_regex) || member.email.match(suffix_regex)) || member.profile && member.profile.email && (member.profile.email.match(start_regex) || member.profile.email.match(suffix_regex)) || member.profile && member.profile.real_name_normalized && (member.profile.real_name_normalized.match(start_regex) || member.profile.real_name_normalized.match(suffix_regex)) || member.profile && member.profile.real_name && (member.profile.real_name.match(start_regex) || member.profile.real_name.match(suffix_regex)) || member.profile && member.profile.display_name_normalized && (member.profile.display_name_normalized.match(start_regex) || member.profile.display_name_normalized.match(suffix_regex)) || member.profile && member.profile.preferred_name && (member.profile.preferred_name.match(start_regex) || member.profile.preferred_name.match(suffix_regex));
      } else {
        match = member.name && (member.name.match(start_regex) || member.name.match(suffix_regex)) || member.first_name && (member.first_name.match(start_regex) || member.first_name.match(suffix_regex)) || member.last_name && (member.last_name.match(start_regex) || member.last_name.match(suffix_regex)) || member._real_name_lc && (member._real_name_lc.match(start_regex) || member._real_name_lc.match(suffix_regex)) || member.email && (member.email.match(start_regex) || member.email.match(suffix_regex)) || member.profile && member.profile.email && (member.profile.email.match(start_regex) || member.profile.email.match(suffix_regex)) || member.profile && member.profile.real_name_normalized && (member.profile.real_name_normalized.match(start_regex) || member.profile.real_name_normalized.match(suffix_regex)) || member.profile && member.profile.real_name && (member.profile.real_name.match(start_regex) || member.profile.real_name.match(suffix_regex));
      }
      if (match) {
        if (!matches.name) matches.name = [];
        matches.name.push({
          member: member
        });
      }
      if (include_profile_fields && query) {
        match = member.profile && member.profile.title && (member.profile.title.match(start_regex) || member.profile.title.match(suffix_regex));
        if (match) {
          if (!matches.title) matches.title = [];
          matches.title.push({
            member: member
          });
        }
      }
      if (team_fields.length && member.profile && member.profile.fields) {
        team_fields.forEach(function(team_field) {
          var field = member.profile.fields[team_field.id];
          if (!field) return;
          match = null;
          if (team_field.type === "user") {
            if (field.value) {
              var value = "";
              field.value.split(/\s*,\s*/).some(function(id) {
                value = TS.members.getMemberDisplayNameById(id, false);
                return value.match(start_regex) || value.match(suffix_regex);
              });
              if (match) {
                if (!matches[team_field.id]) matches[team_field.id] = [];
                matches[team_field.id].push({
                  member: member,
                  value: value,
                  match: match[0]
                });
              }
            }
          } else {
            match = field.value && (field.value.match(start_regex) || field.value.match(suffix_regex));
            if (match) {
              if (!matches[team_field.id]) matches[team_field.id] = [];
              matches[team_field.id].push({
                member: member,
                value: field.value,
                match: match[0]
              });
            } else {
              match = field.alt && (field.alt.match(start_regex) || field.alt.match(suffix_regex));
              if (match) {
                if (!matches[team_field.id]) matches[team_field.id] = [];
                matches[team_field.id].push({
                  member: member,
                  value: field.alt,
                  match: match[0]
                });
              }
            }
          }
          if (match && !_label_map[team_field.id]) _label_map[team_field.id] = team_field.label;
        });
      }
    });
    return matches;
  };
})();
(function() {
  "use strict";
  TS.registerModule("prefs", {
    highlight_words_changed_sig: new signals.Signal,
    seen_welcome_2_changed_sig: new signals.Signal,
    emoji_mode_changed_sig: new signals.Signal,
    obey_inline_img_limit_changed_sig: new signals.Signal,
    messages_theme_changed_sig: new signals.Signal,
    expand_inline_imgs_changed_sig: new signals.Signal,
    expand_internal_inline_imgs_changed_sig: new signals.Signal,
    expand_non_media_attachments_changed_sig: new signals.Signal,
    webapp_spellcheck_changed_sig: new signals.Signal,
    color_names_in_list_changed_sig: new signals.Signal,
    search_only_my_channels_changed_sig: new signals.Signal,
    search_exclude_channels_changed_sig: new signals.Signal,
    search_exclude_bots_changed_sig: new signals.Signal,
    search_only_current_team_changed_sig: new signals.Signal,
    box_enabled_changed_sig: new signals.Signal,
    dropbox_enabled_changed_sig: new signals.Signal,
    read_changed_sig: new signals.Signal,
    push_changed_sig: new signals.Signal,
    time24_changed_sig: new signals.Signal,
    sidebar_behavior_changed_sig: new signals.Signal,
    dtop_notif_changed_sig: new signals.Signal,
    muted_channels_changed_sig: new signals.Signal,
    mac_ssb_bullet_changed_sig: new signals.Signal,
    team_hide_referers_changed_sig: new signals.Signal,
    team_require_at_for_mention_changed_sig: new signals.Signal,
    sidebar_theme_changed_sig: new signals.Signal,
    no_invites_widget_in_sidebar_changed_sig: new signals.Signal,
    no_omnibox_in_channels_changed_sig: new signals.Signal,
    k_key_omnibox_auto_hide_count_changed_sig: new signals.Signal,
    prev_next_btn_changed_sig: new signals.Signal,
    display_real_names_override_changed_sig: new signals.Signal,
    team_display_real_names_changed_sig: new signals.Signal,
    team_perms_pref_changed_sig: new signals.Signal,
    privacy_policy_seen_changed_sig: new signals.Signal,
    two_factor_update_seen_changed_sig: new signals.Signal,
    compliance_export_start_changed_sig: new signals.Signal,
    team_disallow_public_file_urls_changed_sig: new signals.Signal,
    msg_preview_changed_sig: new signals.Signal,
    mentions_exclude_at_channels_changed_sig: new signals.Signal,
    mentions_exclude_at_user_groups_changed_sig: new signals.Signal,
    team_auth_mode_changed_sig: new signals.Signal,
    team_sso_auth_restrictions_changed_sig: new signals.Signal,
    team_posts_migrating_changed_sig: new signals.Signal,
    preferred_skin_tone_changed_sig: new signals.Signal,
    separate_private_channels_changed_sig: new signals.Signal,
    separate_shared_channels_changed_sig: new signals.Signal,
    whats_new_read_changed_sig: new signals.Signal,
    team_dnd_enabled_changed_sig: new signals.Signal,
    team_dnd_start_hour_changed_sig: new signals.Signal,
    team_dnd_end_hour_changed_sig: new signals.Signal,
    team_invites_only_admins_changed_sig: new signals.Signal,
    tz_changed_sig: new signals.Signal,
    team_allow_calls_changed_sig: new signals.Signal,
    team_calling_app_name_changed_sig: new signals.Signal,
    team_calling_app_id_changed_sig: new signals.Signal,
    team_handy_rxns_changed_sig: new signals.Signal,
    channel_handy_rxns_changed_sig: new signals.Signal,
    frecency_jumper_changed_sig: new signals.Signal,
    jumbomoji_changed_sig: new signals.Signal,
    hide_hex_swatch_changed_sig: new signals.Signal,
    channel_sort_changed_sig: new signals.Signal,
    show_memory_instrument_changed_sig: new signals.Signal,
    enable_unread_view_changed_sig: new signals.Signal,
    measure_css_usage_changed_sig: new signals.Signal,
    enable_react_emoji_picker_changed_sig: new signals.Signal,
    team_disable_file_editing_changed_sig: new signals.Signal,
    team_disable_file_deleting_changed_sig: new signals.Signal,
    team_display_email_addresses_changed_sig: new signals.Signal,
    all_unreads_sort_order_changed_sig: new signals.Signal,
    email_alerts_changed_sig: new signals.Signal,
    a11y_animations_changed_sig: new signals.Signal,
    setPrefs: function(prefs) {
      TS.model.prefs = prefs;
      TS.prefs.mergeEmojiUse(TS.model.prefs.emoji_use);
      TS.prefs.mergeFrecencyJumper(TS.ui.frecency.isEnterprise() ? TS.model.prefs.frecency_ent_jumper : TS.model.prefs.frecency_jumper);
      TS.prefs.setUserColors(TS.model.prefs.user_colors);
      TS.prefs.setLoudChannels(TS.model.prefs.loud_channels);
      TS.prefs.setSuppressedChannels(TS.model.prefs.at_channel_suppressed_channels);
      TS.prefs.setPushSuppressedChannels(TS.model.prefs.push_at_channel_suppressed_channels);
      TS.prefs.setNeverChannels(TS.model.prefs.never_channels);
      TS.prefs.setMutedChannels(TS.model.prefs.muted_channels);
      TS.prefs.setLoudChannelsSet(TS.model.prefs.loud_channels_set);
      TS.prefs.setPushLoudChannels(TS.model.prefs.push_loud_channels);
      TS.prefs.setPushMentionChannels(TS.model.prefs.push_mention_channels);
      TS.prefs.setPushLoudChannelsSet(TS.model.prefs.push_loud_channels_set);
      TS.prefs.setSearchExcludeChannels(TS.model.prefs.search_exclude_channels);
      TS.prefs.setChannelSort(TS.model.prefs.channel_sort);
      TS.prefs.setSidebarThemeCustomValues(TS.utility.parseJSONOrElse(TS.model.prefs.sidebar_theme_custom_values, undefined));
      TS.emoji.setEmojiMode();
      TS.prefs.setTheme();
      TS.model.prefs.emoji_autocomplete_big = false;
      TSSSB.call("runFromTray", !!TS.model.prefs.winssb_run_from_tray);
      TSSSB.call("windowFlashBehavior", TS.model.prefs.winssb_window_flash_behavior);
      if (TS.boot_data.feature_name_tagging_client) {
        if (!TS.model.prefs.require_at) {
          TS.model.prefs.require_at = true;
        }
        if (!TS.model.team.prefs.require_at_for_mention) {
          TS.model.team.prefs.require_at_for_mention = true;
        }
      }
      if (TS.boot_data.page_needs_enterprise) {
        TS.model.prefs.require_at = true;
        TS.model.team.prefs.require_at_for_mention = true;
      }
    },
    setChannelSort: function(channel_sort) {
      TS.model.channel_sort = channel_sort;
    },
    setHighlightWords: function(highlight_words) {
      TS.model.prefs.highlight_words = highlight_words;
      if (TS.boot_data.feature_name_tagging_client) {
        TS.model.highlight_words = [];
      } else {
        TS.model.highlight_words = ["@" + TS.model.user.name];
        if (!TS.model.team.prefs.require_at_for_mention) {
          TS.model.highlight_words.push(TS.model.user.name);
        }
      }
      TS.model.highlight_words.push("<@" + TS.model.user.id);
      if (highlight_words && typeof highlight_words === "string") {
        TS.model.highlight_words = TS.model.highlight_words.concat(highlight_words.split(","));
      }
      TS.model.highlight_words_regex = null;
    },
    setSuppressedChannels: function(at_channel_suppressed_channels) {
      TS.model.prefs.at_channel_suppressed_channels = at_channel_suppressed_channels;
      TS.model.at_channel_suppressed_channels = [];
      if (at_channel_suppressed_channels && typeof at_channel_suppressed_channels === "string") {
        TS.model.at_channel_suppressed_channels = TS.model.at_channel_suppressed_channels.concat(at_channel_suppressed_channels.split(","));
      }
    },
    setPushSuppressedChannels: function(push_at_channel_suppressed_channels) {
      TS.model.prefs.push_at_channel_suppressed_channels = push_at_channel_suppressed_channels;
      TS.model.push_at_channel_suppressed_channels = [];
      if (push_at_channel_suppressed_channels && typeof push_at_channel_suppressed_channels === "string") {
        TS.model.push_at_channel_suppressed_channels = TS.model.push_at_channel_suppressed_channels.concat(push_at_channel_suppressed_channels.split(","));
      }
    },
    setLoudChannels: function(loud_channels) {
      TS.model.prefs.loud_channels = loud_channels;
      TS.model.loud_channels = [];
      if (loud_channels && typeof loud_channels === "string") {
        TS.model.loud_channels = TS.model.loud_channels.concat(loud_channels.split(","));
      }
    },
    setNeverChannels: function(never_channels) {
      TS.model.prefs.never_channels = never_channels;
      TS.model.never_channels = [];
      if (never_channels && typeof never_channels === "string") {
        TS.model.never_channels = TS.model.never_channels.concat(never_channels.split(","));
      }
    },
    setMutedChannels: function(muted_channels) {
      if (TS.model.prefs.muted_channels !== muted_channels || !_has_set_muted_channels_before) {
        TS.model.prev_muted_channels = TS.model.prefs.muted_channels && typeof TS.model.prefs.muted_channels === "string" ? TS.model.prefs.muted_channels.split(",") : [];
        TS.model.prefs.muted_channels = muted_channels;
      } else {
        return;
      }
      _has_set_muted_channels_before = true;
      var i;
      var model_ob;
      TS.model.muted_channels = [];
      TS.model.newly_muted_channels = [];
      TS.model.newly_unmuted_channels = [];
      if (muted_channels && typeof muted_channels === "string") {
        TS.model.muted_channels = TS.model.muted_channels.concat(muted_channels.split(","));
        TS.model.newly_unmuted_channels = _.difference(TS.model.prev_muted_channels, TS.model.muted_channels);
        TS.model.newly_muted_channels = _.difference(TS.model.muted_channels, TS.model.prev_muted_channels);
      }
      for (i = 0; i < TS.model.muted_channels.length; i += 1) {
        model_ob = TS.shared.getModelObById(TS.model.muted_channels[i]);
        if (!model_ob) continue;
        if (!model_ob.unread_cnt) continue;
        model_ob._show_in_list_even_though_no_unreads = true;
      }
      TS.model.channels.forEach(function(model_ob) {
        if (TS.notifs.isCorGMuted(model_ob.id)) return;
        model_ob._show_in_list_even_though_no_unreads = false;
      });
      TS.model.groups.forEach(function(model_ob) {
        if (TS.notifs.isCorGMuted(model_ob.id)) return;
        model_ob._show_in_list_even_though_no_unreads = false;
      });
      if (TS.useRedux()) {
        TS.redux.channels.updateMutedChannels();
      }
    },
    setLoudChannelsSet: function(loud_channels_set) {
      TS.model.prefs.loud_channels_set = loud_channels_set;
      TS.model.loud_channels_set = [];
      if (loud_channels_set && typeof loud_channels_set === "string") {
        TS.model.loud_channels_set = TS.model.loud_channels_set.concat(loud_channels_set.split(","));
      }
    },
    setPushLoudChannels: function(push_loud_channels) {
      TS.model.prefs.push_loud_channels = push_loud_channels;
      TS.model.push_loud_channels = [];
      if (push_loud_channels && typeof push_loud_channels === "string") {
        TS.model.push_loud_channels = TS.model.push_loud_channels.concat(push_loud_channels.split(","));
      }
    },
    setPushMentionChannels: function(push_mention_channels) {
      TS.model.prefs.push_mention_channels = push_mention_channels;
      TS.model.push_mention_channels = [];
      if (push_mention_channels && typeof push_mention_channels === "string") {
        TS.model.push_mention_channels = TS.model.push_mention_channels.concat(push_mention_channels.split(","));
      }
    },
    setPushLoudChannelsSet: function(push_loud_channels_set) {
      TS.model.prefs.push_loud_channels_set = push_loud_channels_set;
      TS.model.push_loud_channels_set = [];
      if (push_loud_channels_set && typeof push_loud_channels_set === "string") {
        TS.model.push_loud_channels_set = TS.model.push_loud_channels_set.concat(push_loud_channels_set.split(","));
      }
    },
    setSearchExcludeChannels: function(search_exclude_channels) {
      TS.model.prefs.search_exclude_channels = search_exclude_channels;
      TS.model.search_exclude_channels = [];
      if (search_exclude_channels && typeof search_exclude_channels === "string") {
        TS.model.search_exclude_channels = TS.model.search_exclude_channels.concat(search_exclude_channels.split(","));
      }
    },
    mergeFrecencyJumper: function(frecency_jumper) {
      if (!frecency_jumper || typeof frecency_jumper !== "object") {
        frecency_jumper = TS.utility.parseJSONOrElse(frecency_jumper || null) || {};
      }
      TS.model.frecency_jumper = frecency_jumper;
      return true;
    },
    mergeEmojiUse: function(emoji_use) {
      if (!TS.model.emoji_names) TS.emoji.makeMenuLists();
      if (!emoji_use || typeof emoji_use !== "object") {
        emoji_use = TS.utility.parseJSONOrElse(emoji_use || null) || {};
        emoji_use = _.pickBy(emoji_use, function(count, name) {
          return _.includes(TS.model.emoji_names, name);
        });
      }
      var something_changed = false;
      for (var k in emoji_use) {
        if (!TS.model.emoji_use.hasOwnProperty(k) || emoji_use[k] > TS.model.emoji_use[k]) {
          TS.model.emoji_use[k] = emoji_use[k];
          something_changed = true;
        }
      }
      if (!something_changed) {
        TS.log(777, "mergeEmojiUse TS.model.emoji_use unchanged");
        return false;
      }
      TS.dir(777, TS.model.emoji_use, "mergeEmojiUse TS.model.emoji_use set to:");
      return true;
    },
    setUserColors: function(user_colors) {
      TS.model.prefs.user_colors = user_colors;
      var parse = user_colors ? JSON.parse(user_colors) : {};
      TS.model.user_colors = parse || {};
    },
    setTheme: function() {
      if (TS.model.prefs.messages_theme === "default") {
        TS.model.prefs.messages_theme = "light_with_avatars";
      }
      TS.model.prefs.theme = "light";
      TS.model.prefs.avatars = true;
      if (TS.model.prefs.messages_theme === "dense") {
        TS.model.prefs.theme = "dense";
        TS.model.prefs.avatars = false;
      } else if (TS.model.prefs.messages_theme === "light") {
        TS.model.prefs.theme = "light";
        TS.model.prefs.avatars = false;
      } else if (TS.model.prefs.messages_theme === "light_with_avatars") {
        TS.model.prefs.theme = "light";
        TS.model.prefs.avatars = true;
      }
    },
    onTeamPrefChanged: function(imsg) {
      if (imsg.name === "msg_edit_window_mins") {
        TS.model.team.prefs.msg_edit_window_mins = imsg.value;
      } else if (imsg.name === "allow_message_deletion") {
        TS.model.team.prefs.allow_message_deletion = !!imsg.value;
      } else if (imsg.name === "hide_referers") {
        TS.model.team.prefs.hide_referers = !!imsg.value;
        TS.prefs.team_hide_referers_changed_sig.dispatch();
      } else if (imsg.name === "require_at_for_mention") {
        if (!TS.boot_data_feature_name_tagging_client) {
          TS.model.team.prefs.require_at_for_mention = !!imsg.value;
          TS.prefs.setHighlightWords(TS.model.prefs.highlight_words);
          TS.prefs.team_require_at_for_mention_changed_sig.dispatch();
        }
      } else if (imsg.name === "display_real_names") {
        TS.model.team.prefs.display_real_names = !!imsg.value;
        TS.prefs.team_display_real_names_changed_sig.dispatch();
      } else if (imsg.name === "display_email_addresses") {
        TS.model.team.prefs.display_email_addresses = !!imsg.value;
        TS.prefs.team_display_email_addresses_changed_sig.dispatch();
      } else if (imsg.name.indexOf("who_can_") === 0) {
        if (TS.model.team.prefs[imsg.name] != imsg.value) {
          TS.model.team.prefs[imsg.name] = imsg.value;
          TS.prefs.team_perms_pref_changed_sig.dispatch(imsg.name);
        }
      } else if (imsg.name === "compliance_export_start") {
        if (TS.model.team.prefs.compliance_export_start != imsg.value) {
          TS.model.team.prefs.compliance_export_start = imsg.value;
          TS.prefs.compliance_export_start_changed_sig.dispatch();
        }
      } else if (imsg.name === "disallow_public_file_urls") {
        TS.model.team.prefs.disallow_public_file_urls = !!imsg.value;
        TS.prefs.team_disallow_public_file_urls_changed_sig.dispatch();
      } else if (imsg.name === "auth_mode") {
        TS.model.team.prefs.auth_mode = imsg.value;
        TS.prefs.team_auth_mode_changed_sig.dispatch();
      } else if (imsg.name === "sso_auth_restrictions") {
        TS.model.team.prefs.sso_auth_restrictions = imsg.value;
        TS.prefs.team_sso_auth_restrictions_changed_sig.dispatch();
      } else if (imsg.name === "posts_migrating") {
        TS.model.team.prefs.posts_migrating = imsg.value;
        TS.prefs.team_posts_migrating_changed_sig.dispatch();
      } else if (imsg.name === "dnd_enabled") {
        TS.model.team.prefs.dnd_enabled = imsg.value;
        TS.prefs.team_dnd_enabled_changed_sig.dispatch();
      } else if (imsg.name === "dnd_start_hour") {
        TS.model.team.prefs.dnd_start_hour = imsg.value;
        TS.prefs.team_dnd_start_hour_changed_sig.dispatch();
      } else if (imsg.name === "dnd_end_hour") {
        TS.model.team.prefs.dnd_end_hour = imsg.value;
        TS.prefs.team_dnd_end_hour_changed_sig.dispatch();
      } else if (imsg.name === "invites_only_admins") {
        TS.model.team.prefs.invites_only_admins = imsg.value;
        TS.prefs.team_invites_only_admins_changed_sig.dispatch();
      } else if (imsg.name === "allow_calls") {
        TS.model.team.prefs.allow_calls = imsg.value;
        TS.prefs.team_allow_calls_changed_sig.dispatch();
      } else if (imsg.name === "calling_app_id") {
        TS.model.team.prefs.calling_app_id = imsg.value;
        TS.prefs.team_calling_app_id_changed_sig.dispatch();
      } else if (imsg.name === "calling_app_name") {
        TS.model.team.prefs.calling_app_name = imsg.value;
        TS.prefs.team_calling_app_name_changed_sig.dispatch();
      } else if (imsg.name === "team_handy_rxns") {
        TS.rxns.clearHandyRxnsDisplayDataCache();
        TS.model.team.prefs.team_handy_rxns = imsg.value;
        TS.prefs.team_handy_rxns_changed_sig.dispatch();
      } else if (imsg.name === "channel_handy_rxns") {
        TS.rxns.clearHandyRxnsDisplayDataCache();
        TS.model.team.prefs.channel_handy_rxns = imsg.value;
        TS.prefs.channel_handy_rxns_changed_sig.dispatch();
      } else if (imsg.name === "disable_file_editing") {
        TS.model.team.prefs.disable_file_editing = imsg.value;
        TS.prefs.team_disable_file_editing_changed_sig.dispatch();
      } else if (imsg.name === "disable_file_deleting") {
        TS.model.team.prefs.disable_file_deleting = imsg.value;
        TS.prefs.team_disable_file_deleting_changed_sig.dispatch();
      } else if (imsg.name === "who_can_post_general") {
        TS.model.team.prefs[imsg.name] = imsg.value;
        var general_id = TS.channels.getGeneralChannel().id;
        if (TS.permissions.members.canPostInGeneral()) {
          TS.channels.read_only.removeChannelFromList(general_id);
        } else {
          TS.channels.read_only.addChannelToList(general_id);
        }
      } else {
        TS.model.team.prefs[imsg.name] = imsg.value;
      }
    },
    updateTeamPrefCanUserManageSharedChannels: function(imsg) {
      TS.model.team.prefs.can_user_manage_shared_channels = imsg.can_manage;
    },
    onPrefChanged: function(imsg) {
      switch (imsg.name) {
        case "flannel_server_pool":
          TS.model.prefs.flannel_server_pool = imsg.value;
          break;
        case "color_names_in_list":
          TS.model.prefs.color_names_in_list = !!imsg.value;
          TS.prefs.color_names_in_list_changed_sig.dispatch();
          break;
        case "display_real_names_override":
          TS.model.prefs.display_real_names_override = imsg.value;
          TS.prefs.display_real_names_override_changed_sig.dispatch();
          break;
        case "growls_enabled":
          TS.model.prefs.growls_enabled = !!imsg.value;
          TS.prefs.dtop_notif_changed_sig.dispatch();
          break;
        case "sidebar_theme":
          if (TS.model.prefs.sidebar_theme !== imsg.value) {
            TS.model.prefs.sidebar_theme = imsg.value;
            TS.prefs.sidebar_theme_changed_sig.dispatch();
          }
          break;
        case "sidebar_theme_custom_values":
          if (TS.model.prefs.sidebar_theme_custom_values !== imsg.value) {
            TS.prefs.setSidebarThemeCustomValues(JSON.parse(imsg.value));
            TS.prefs.sidebar_theme_changed_sig.dispatch();
          }
          break;
        case "expand_inline_imgs":
          TS.model.prefs.expand_inline_imgs = !!imsg.value;
          TS.prefs.expand_inline_imgs_changed_sig.dispatch();
          break;
        case "webapp_spellcheck":
          TS.model.prefs.webapp_spellcheck = !!imsg.value;
          TS.prefs.webapp_spellcheck_changed_sig.dispatch();
          break;
        case "expand_internal_inline_imgs":
          TS.model.prefs.expand_internal_inline_imgs = !!imsg.value;
          TS.prefs.expand_internal_inline_imgs_changed_sig.dispatch();
          break;
        case "expand_non_media_attachments":
          TS.model.prefs.expand_non_media_attachments = !!imsg.value;
          TS.prefs.expand_non_media_attachments_changed_sig.dispatch();
          break;
        case "messages_theme":
          TS.model.prefs.messages_theme = imsg.value;
          TS.prefs.setTheme();
          TS.prefs.messages_theme_changed_sig.dispatch();
          break;
        case "highlight_words":
          TS.prefs.setHighlightWords(imsg.value);
          TS.prefs.highlight_words_changed_sig.dispatch();
          break;
        case "at_channel_suppressed_channels":
          TS.prefs.setSuppressedChannels(imsg.value);
          TS.prefs.dtop_notif_changed_sig.dispatch();
          break;
        case "push_at_channel_suppressed_channels":
          TS.prefs.setPushSuppressedChannels(imsg.value);
          TS.prefs.push_changed_sig.dispatch();
          break;
        case "loud_channels":
          TS.prefs.setLoudChannels(imsg.value);
          break;
        case "never_channels":
          TS.prefs.setNeverChannels(imsg.value);
          break;
        case "muted_channels":
          TS.prefs.setMutedChannels(imsg.value);
          TS.prefs.muted_channels_changed_sig.dispatch();
          break;
        case "loud_channels_set":
          TS.prefs.setLoudChannelsSet(imsg.value);
          TS.prefs.dtop_notif_changed_sig.dispatch();
          break;
        case "push_loud_channels":
          TS.prefs.setPushLoudChannels(imsg.value);
          break;
        case "push_mention_channels":
          TS.prefs.setPushMentionChannels(imsg.value);
          break;
        case "push_loud_channels_set":
          TS.prefs.setPushLoudChannelsSet(imsg.value);
          TS.prefs.push_changed_sig.dispatch();
          break;
        case "emoji_use":
          if (TS.prefs.mergeEmojiUse(imsg.value)) {
            TS.emoji.maybeRemakeMenuListsIfFrequentsChanged();
          }
          break;
        case "user_colors":
          _.each(_.keys(TS.model.user_colors), function(member_id) {
            var member = TS.members.getMemberById(member_id);
            if (member) TS.members.setMemberUserColor(member, member.color);
          });
          TS.prefs.setUserColors(imsg.value);
          _.forOwn(TS.model.user_colors, function(color, member_id) {
            var member = TS.members.getMemberById(member_id);
            if (member) TS.members.setMemberUserColor(member, color);
          });
          break;
        case "graphic_emoticons":
          TS.rxns.clearHandyRxnsDisplayDataCache();
          TS.model.prefs.graphic_emoticons = imsg.value;
          TS.emoji.setEmojiMode();
          TS.prefs.emoji_mode_changed_sig.dispatch();
          break;
        case "ss_emojis":
          TS.model.prefs.ss_emojis = imsg.value;
          TS.emoji.setEmojiMode();
          TS.prefs.emoji_mode_changed_sig.dispatch();
          TS.emoji.makeMenuLists();
          break;
        case "emoji_mode":
          TS.rxns.clearHandyRxnsDisplayDataCache();
          TS.model.prefs.emoji_mode = imsg.value;
          TS.emoji.setEmojiMode();
          TS.prefs.emoji_mode_changed_sig.dispatch();
          TS.emoji.makeMenuLists();
          break;
        case "obey_inline_img_limit":
          TS.model.prefs.obey_inline_img_limit = imsg.value;
          TS.prefs.obey_inline_img_limit_changed_sig.dispatch();
          break;
        case "search_only_my_channels":
          TS.model.prefs.search_only_my_channels = !!imsg.value;
          TS.prefs.search_only_my_channels_changed_sig.dispatch();
          break;
        case "search_only_current_team":
          TS.model.prefs.search_only_current_team = !!imsg.value;
          TS.prefs.search_only_current_team_changed_sig.dispatch();
          break;
        case "search_exclude_channels":
          TS.prefs.setSearchExcludeChannels(imsg.value);
          TS.prefs.search_exclude_channels_changed_sig.dispatch();
          break;
        case "search_exclude_bots":
          TS.model.prefs.search_exclude_bots = !!imsg.value;
          TS.prefs.search_exclude_bots_changed_sig.dispatch();
          break;
        case "has_uploaded":
          TS.model.prefs.has_uploaded = !!imsg.value;
          break;
        case "has_invited":
          TS.model.prefs.has_invited = !!imsg.value;
          break;
        case "has_created_channel":
          TS.model.prefs.has_created_channel = !!imsg.value;
          break;
        case "no_joined_overlays":
          TS.model.prefs.no_joined_overlays = !!imsg.value;
          break;
        case "no_created_overlays":
          TS.model.prefs.no_created_overlays = !!imsg.value;
          break;
        case "seen_welcome_2":
          TS.model.prefs.seen_welcome_2 = !!imsg.value;
          TS.prefs.seen_welcome_2_changed_sig.dispatch();
          break;
        case "box_enabled":
          TS.model.prefs.box_enabled = !!imsg.value;
          TS.prefs.box_enabled_changed_sig.dispatch();
          break;
        case "dropbox_enabled":
          TS.model.prefs.dropbox_enabled = !!imsg.value;
          TS.prefs.dropbox_enabled_changed_sig.dispatch();
          break;
        case "mark_msgs_read_immediately":
          if (TS.model.prefs.mark_msgs_read_immediately !== !!imsg.value) {
            TS.model.prefs.mark_msgs_read_immediately = !!imsg.value;
            TS.prefs.read_changed_sig.dispatch();
          }
          break;
        case "start_scroll_at_oldest":
          if (TS.model.prefs.start_scroll_at_oldest !== !!imsg.value) {
            TS.model.prefs.start_scroll_at_oldest = !!imsg.value;
            TS.prefs.read_changed_sig.dispatch();
          }
          break;
        case "mac_ssb_bullet":
          if (TS.model.prefs.mac_ssb_bullet !== !!imsg.value) {
            TS.model.prefs.mac_ssb_bullet = !!imsg.value;
            TS.prefs.mac_ssb_bullet_changed_sig.dispatch();
          }
          break;
        case "all_channels_loud":
          if (TS.model.prefs.all_channels_loud !== !!imsg.value) {
            TS.model.prefs.all_channels_loud = !!imsg.value;
            TS.prefs.dtop_notif_changed_sig.dispatch();
          }
          break;
        case "push_everything":
          if (TS.model.prefs.push_everything !== !!imsg.value) {
            TS.model.prefs.push_everything = !!imsg.value;
            TS.prefs.push_changed_sig.dispatch();
          }
          break;
        case "push_mention_alert":
          if (TS.model.prefs.push_mention_alert !== !!imsg.value) {
            TS.model.prefs.push_mention_alert = !!imsg.value;
            TS.prefs.push_changed_sig.dispatch();
          }
          break;
        case "push_dm_alert":
          if (TS.model.prefs.push_dm_alert !== !!imsg.value) {
            TS.model.prefs.push_dm_alert = !!imsg.value;
            TS.prefs.push_changed_sig.dispatch();
          }
          break;
        case "time24":
          if (TS.model.prefs.time24 !== !!imsg.value) {
            TS.model.prefs.time24 = !!imsg.value;
            TS.prefs.time24_changed_sig.dispatch();
          }
          break;
        case "sidebar_behavior":
          if (TS.model.prefs.sidebar_behavior != imsg.value) {
            TS.model.prefs.sidebar_behavior = imsg.value;
            TS.prefs.sidebar_behavior_changed_sig.dispatch();
          }
          break;
        case "two_factor_update_seen":
          if (TS.model.two_factor_update_seen != imsg.value) {
            TS.mode.prefs.two_factor_update_seen = imsg.value;
            TS.prefs.two_factor_update_seen_changed_sig.dispatch();
          }
          break;
        case "privacy_policy_seen":
          if (TS.model.prefs.privacy_policy_seen != imsg.value) {
            TS.model.prefs.privacy_policy_seen = imsg.value;
            TS.prefs.privacy_policy_seen_changed_sig.dispatch();
          }
          break;
        case "last_seen_at_channel_warning":
          if (TS.model.prefs.last_seen_at_channel_warning != imsg.value) {
            TS.model.prefs.last_seen_at_channel_warning = imsg.value;
          }
          break;
        case "msg_preview":
          if (TS.model.prefs.msg_preview != imsg.value) {
            TS.model.prefs.msg_preview = imsg.value;
            TS.prefs.msg_preview_changed_sig.dispatch();
          }
          break;
        case "msg_preview_persistent":
          if (TS.model.prefs.msg_preview_persistent != imsg.value) {
            TS.model.prefs.msg_preview_persistent = imsg.value;
            TS.prefs.msg_preview_changed_sig.dispatch();
          }
          break;
        case "winssb_run_from_tray":
          if (TS.model.prefs.winssb_run_from_tray != imsg.value) {
            TS.model.prefs.winssb_run_from_tray = imsg.value;
            TSSSB.call("runFromTray", !!TS.model.prefs.winssb_run_from_tray);
          }
          break;
        case "winssb_window_flash_behavior":
          if (TS.model.prefs.winssb_window_flash_behavior != imsg.value) {
            TS.model.prefs.winssb_window_flash_behavior = imsg.value;
            TSSSB.call("windowFlashBehavior", TS.model.prefs.winssb_window_flash_behavior);
          }
          break;
        case "mentions_exclude_at_channels":
          if (TS.model.prefs.mentions_exclude_at_channels != imsg.value) {
            TS.model.prefs.mentions_exclude_at_channels = imsg.value;
            TS.prefs.mentions_exclude_at_channels_changed_sig.dispatch();
          }
          break;
        case "mentions_exclude_at_user_groups":
          if (TS.model.prefs.mentions_exclude_at_user_groups != imsg.value) {
            TS.model.prefs.mentions_exclude_at_user_groups = imsg.value;
            TS.prefs.mentions_exclude_at_user_groups_changed_sig.dispatch();
          }
          break;
        case "no_invites_widget_in_sidebar":
          if (TS.model.prefs.no_invites_widget_in_sidebar != imsg.value) {
            TS.model.prefs.no_invites_widget_in_sidebar = imsg.value;
            TS.prefs.no_invites_widget_in_sidebar_changed_sig.dispatch();
          }
          break;
        case "no_omnibox_in_channels":
          if (TS.model.prefs.no_omnibox_in_channels != imsg.value) {
            TS.model.prefs.no_omnibox_in_channels = imsg.value;
            TS.prefs.no_omnibox_in_channels_changed_sig.dispatch();
            if (TS.model.prefs.no_omnibox_in_channels) {
              TS.clog.track("QUICKSWITCHER_ACTION", {
                trigger: "quick_switcher_pref_changed",
                action: "button_hidden"
              });
            } else {
              TS.clog.track("QUICKSWITCHER_ACTION", {
                trigger: "quick_switcher_pref_changed",
                action: "button_shown"
              });
            }
          }
          break;
        case "k_key_omnibox_auto_hide_count":
          if (TS.model.prefs.k_key_omnibox_auto_hide_count != imsg.value) {
            TS.model.prefs.k_key_omnibox_auto_hide_count = imsg.value;
            TS.prefs.k_key_omnibox_auto_hide_count_changed_sig.dispatch();
          }
          break;
        case "prev_next_btn":
          if (TS.model.prefs.prev_next_btn != imsg.value) {
            TS.model.prefs.prev_next_btn = imsg.value;
            TS.prefs.prev_next_btn_changed_sig.dispatch();
          }
          break;
        case "preferred_skin_tone":
          if (TS.model.prefs.preferred_skin_tone != imsg.value) {
            TS.rxns.clearHandyRxnsDisplayDataCache();
            TS.model.prefs.preferred_skin_tone = imsg.value;
            TS.prefs.preferred_skin_tone_changed_sig.dispatch();
          }
          break;
        case "separate_private_channels":
          if (TS.model.prefs.separate_private_channels != imsg.value) {
            TS.model.prefs.separate_private_channels = imsg.value;
            TS.prefs.separate_private_channels_changed_sig.dispatch();
          }
          break;
        case "separate_shared_channels":
          if (TS.model.prefs.separate_shared_channels != imsg.value) {
            TS.model.prefs.separate_shared_channels = imsg.value;
            TS.prefs.separate_shared_channels_changed_sig.dispatch();
          }
          break;
        case "whats_new_read":
          if (TS.model.prefs.whats_new_read != imsg.value) {
            TS.model.prefs.whats_new_read = imsg.value;
            TS.prefs.whats_new_read_changed_sig.dispatch();
          }
          break;
        case "tz":
          if (TS.model.prefs.tz != imsg.value) {
            TS.model.prefs.tz = imsg.value;
            TS.prefs.tz_changed_sig.dispatch();
          }
          break;
        case "frecency_jumper":
          if (TS.ui.frecency.isEnterprise()) break;
          if (TS.prefs.mergeFrecencyJumper(imsg.value)) {
            TS.prefs.frecency_jumper_changed_sig.dispatch();
          }
          break;
        case "frecency_ent_jumper":
          TS.log(666, "Received a pref_change event for frecency_ent_jumper.");
          if (TS.prefs.mergeFrecencyJumper(imsg.value)) {
            TS.prefs.frecency_jumper_changed_sig.dispatch();
          }
          break;
        case "jumbomoji":
          if (TS.model.prefs.jumbomoji != imsg.value) {
            TS.model.prefs.jumbomoji = imsg.value;
            TS.prefs.jumbomoji_changed_sig.dispatch();
          }
          break;
        case "hide_hex_swatch":
          if (TS.model.prefs.hide_hex_swatch != imsg.value) {
            TS.model.prefs.hide_hex_swatch = imsg.value;
            TS.prefs.hide_hex_swatch_changed_sig.dispatch();
          }
          break;
        case "a11y_animations":
          if (TS.model.prefs.a11y_animations !== imsg.value) {
            TS.model.prefs.a11y_animations = imsg.value;
            TS.prefs.a11y_animations_changed_sig.dispatch();
            if (TS.client) {
              TS.clog.track("PREF_USER_CLIENT_UPDATE", {
                a11y_animations: TS.model.prefs.a11y_animations
              });
            }
          }
          break;
        case "show_memory_instrument":
          if (TS.model.prefs.show_memory_instrument !== imsg.value) {
            TS.model.prefs.show_memory_instrument = imsg.value;
            TS.prefs.show_memory_instrument_changed_sig.dispatch();
          }
          break;
        case "channel_sort":
          if (TS.model.prefs.channel_sort !== imsg.value) {
            TS.model.prefs.channel_sort = imsg.value;
            TS.prefs.setChannelSort(TS.model.prefs.channel_sort);
            TS.prefs.channel_sort_changed_sig.dispatch();
          }
          break;
        case "enable_unread_view":
          if (TS.model.prefs.enable_unread_view !== imsg.value) {
            TS.model.prefs.enable_unread_view = imsg.value;
            TS.prefs.enable_unread_view_changed_sig.dispatch();
          }
          break;
        case "measure_css_usage":
          if (TS.model.prefs.measure_css_usage !== imsg.value) {
            TS.model.prefs.measure_css_usage = imsg.value;
            TS.prefs.measure_css_usage_changed_sig.dispatch();
          }
          break;
        case "enable_react_emoji_picker":
          if (TS.model.prefs.enable_react_emoji_picker !== imsg.value) {
            TS.model.prefs.enable_react_emoji_picker = imsg.value;
            TS.prefs.enable_react_emoji_picker_changed_sig.dispatch();
          }
          break;
        case "client_logs_pri":
          TS.model.prefs[imsg.name] = imsg.value;
          TS.console.setAppropriatePri();
          break;
        case "email_alerts":
          TS.model.prefs[imsg.name] = imsg.value;
          TS.prefs.email_alerts_changed_sig.dispatch();
          break;
        default:
          TS.model.prefs[imsg.name] = imsg.value;
      }
    },
    hex_regex: new RegExp(/^#?([0-9a-f]{6})$/i),
    setSidebarThemeCustomValues: function(ob) {
      var good_values = false;
      if (ob && typeof ob === "object" && ob.length === undefined) {
        _.forOwn(ob, function(v, k) {
          good_values = false;
          if (!v) return false;
          if (!v.substr) return false;
          ob[k] = v.substr(0, 7);
          if (!v.match(TS.prefs.hex_regex)) return false;
          good_values = true;
        });
      }
      if (good_values) {
        TS.model.prefs.sidebar_theme_custom_values = JSON.stringify(ob);
      } else {
        TS.model.prefs.sidebar_theme = "default";
        TS.model.prefs.sidebar_theme_custom_values = JSON.stringify(TS.sidebar_themes.default_themes.default_theme);
      }
    },
    setMultiPrefsByAPI: function(prefs, handler) {
      var value = "";
      _.forOwn(prefs, function(v, k) {
        value += "&" + encodeURIComponent(k) + "=" + encodeURIComponent(v);
      });
      if (!value) {
        TS.error(" no prefs to set?");
        return;
      }
      var args = {
        prefs: value
      };
      return TS.prefs.setPrefByAPI(args, handler);
    },
    setPrefByAPI: function(args, handler) {
      var localHandler = function(ok, data, args) {
        if (!ok) {
          var desc;
          if (args.hasOwnProperty("name")) {
            desc = "pref name: " + args.name;
          } else if (args.prefs) {
            desc = "(multiple prefs)";
          }
          TS.logError(desc, "TS.prefs.setPrefByAPI call got a not ok rsp", "API response error");
          setTimeout(function() {
            if (args.prefs) {
              TS.error("multi preferences setting failed.");
            } else {
              TS.error('"' + args.name + '" preference setting failed.');
            }
          }, 0);
        }
        if (handler) {
          handler(ok, data, args);
        }
      };
      var func = TS.model.window_unloading ? TS.api.callSynchronously : TS.api.callImmediately;
      return func("users.prefs.set", args, localHandler);
    },
    setTeamPrefByAPI: function(prefs, onError) {
      var func = TS.model.window_unloading ? TS.api.callSynchronously : TS.api.callImmediately;
      var d = $.Deferred();
      func("team.prefs.set", {
        prefs: JSON.stringify(prefs)
      }, function(ok, data) {
        var pref_name;
        if (ok) {
          if (TS.web) {
            for (pref_name in prefs) {
              if (prefs.hasOwnProperty(pref_name) && data.prefs.hasOwnProperty(pref_name)) {
                TS.prefs.onTeamPrefChanged({
                  name: pref_name,
                  value: data.prefs[pref_name]
                });
              }
            }
          }
          d.resolve(data.prefs);
        } else {
          d.reject(data);
          if (onError) onError(data);
        }
      });
      return d;
    },
    saveHighlightWords: function(val, callback, force) {
      var highlight_words_new = _cleanHighlightWords(val);
      if (force || TS.model.prefs.highlight_words != highlight_words_new) {
        return TS.prefs.setPrefByAPI({
          name: "highlight_words",
          value: highlight_words_new
        }, callback);
      }
      return Promise.resolve();
    },
    getReadStateTrackingPref: function() {
      var val = "default";
      if (TS.model.prefs.mark_msgs_read_immediately && TS.model.prefs.start_scroll_at_oldest) {
        val = "immediate_scroll";
      } else if (TS.model.prefs.mark_msgs_read_immediately) {
        val = "immediate";
      }
      return val;
    },
    setReadStateTrackingPref: function(val, handler) {
      var prefs = {};
      if (val === "immediate_scroll" || val === "immediate") {
        prefs.mark_msgs_read_immediately = true;
        TS.model.prefs.mark_msgs_read_immediately = true;
        if (val === "immediate_scroll") {
          prefs.start_scroll_at_oldest = true;
          TS.model.prefs.start_scroll_at_oldest = true;
        } else {
          prefs.start_scroll_at_oldest = false;
          TS.model.prefs.start_scroll_at_oldest = false;
        }
      } else {
        prefs.mark_msgs_read_immediately = false;
        TS.model.prefs.mark_msgs_read_immediately = false;
        prefs.start_scroll_at_oldest = false;
        TS.model.prefs.start_scroll_at_oldest = false;
      }
      TS.prefs.setMultiPrefsByAPI(prefs, handler);
    },
    test: function() {
      return {
        _cleanHighlightWords: _cleanHighlightWords
      };
    }
  });
  var _has_set_muted_channels_before = false;
  var _cleanHighlightWords = function(val) {
    if (!_.isString(val)) return "";
    val = TS.format.replaceUnicodeDoppelgangers(val);
    return _(val).split(",").map(_.trim).compact().join(",");
  };
})();
(function() {
  "use strict";
  TS.registerModule("search", {
    search_dispatched_sig: new signals.Signal,
    quick_search_results_fetched_sig: new signals.Signal,
    all_search_results_fetched_sig: new signals.Signal,
    message_search_results_fetched_sig: new signals.Signal,
    file_search_results_fetched_sig: new signals.Signal,
    autosuggest_search_results_fetched_sig: new signals.Signal,
    search_filter_set_sig: new signals.Signal,
    search_filetype_filter_set_sig: new signals.Signal,
    search_sort_set_sig: new signals.Signal,
    search_channel_set_sig: new signals.Signal,
    search_group_set_sig: new signals.Signal,
    search_member_set_sig: new signals.Signal,
    message_search_more_results_fetched_sig: new signals.Signal,
    query: "",
    query_string: "",
    last_search_query: "",
    previous_query: "",
    sort: "timestamp",
    filter: "messages",
    filetype: "all",
    results: {},
    submit_tim: 0,
    delay: 500,
    suggestions: [],
    input: "",
    from_regex: /from:[@*\-.\w]+/gi,
    member: null,
    from: null,
    in_regex: /in:[#*\-.\w]+/gi,
    channel: null,
    group: null,
    im: null,
    per_page: -1,
    keyword_modifiers: ["after", "before", "bot", "during", "from", "to", "has", "in", "on"],
    keyword_modifier_pair_regex: null,
    keyword_modifier_extract_regex: null,
    search_query_max_length: 250,
    onStart: function() {
      TS.search.keyword_modifier_pair_regex = new RegExp("^(" + TS.search.keyword_modifiers.join("|") + "):S+$");
      TS.search.keyword_modifier_extract_regex = new RegExp("^(" + TS.search.keyword_modifiers.join("|") + "):w*");
      TS.search.per_page = parseInt(TS.qs_args.search_count, 10) || 20;
      if (TS.client) TS.search.delay = 10;
      if (TS.client) {
        TS.client.login_sig.add(TS.search.loggedIn, TS.search);
      } else if (TS.web) {
        TS.web.login_sig.add(TS.search.loggedIn, TS.search);
      }
      TS.search.search_channel_set_sig.add(TS.search.searchAll, TS.search);
      TS.search.search_group_set_sig.add(TS.search.searchAll, TS.search);
      TS.search.search_member_set_sig.add(TS.search.searchAll, TS.search);
      TS.prefs.search_only_my_channels_changed_sig.add(TS.search.searchAll, TS.search);
      TS.prefs.search_only_current_team_changed_sig.add(TS.search.searchAll, TS.search);
      TS.prefs.search_exclude_bots_changed_sig.add(TS.search.searchAll, TS.search);
      TS.files.team_file_changed_sig.add(_teamFileChanged);
      if (TS.qs_args.delay) TS.search.delay = TS.qs_args.delay;
      TS.search.input = $("#search_terms");
      if (!TS.boot_data.feature_texty_search) {
        TSSSB.call("inputFieldCreated", TS.search.input.get(0));
      }
      if (TS.boot_data.feature_texty_search) {
        TS.utility.contenteditable.create(TS.search.input, {
          modules: {
            slacksearch: true
          },
          singleLineInput: true,
          placeholder: TS.i18n.t("Search", "page_client")(),
          onFocus: function() {
            $("#client-ui").addClass("search_focused");
          },
          onBlur: function() {
            $("#client-ui").removeClass("search_focused");
          },
          onEnter: function() {
            TS.search.submitSearch();
            return true;
          },
          onTextChange: function() {
            var is_empty = TS.utility.contenteditable.isEmpty(TS.search.input);
            $("#header_search_form").toggleClass("active", !is_empty);
          }
        });
      }
    },
    loggedIn: function() {
      TS.search.sort = "timestamp";
    },
    startSearchTimer: function(query, count, callback) {
      clearTimeout(TS.search.submit_tim);
      TS.search.submit_tim = setTimeout(TS.search.dispatchSearch, TS.search.delay, query, count, callback);
      TS.search.search_dispatched_sig.dispatch();
    },
    getNextPageOfSearchResults: function(query, page) {
      TS.search.dispatchSearch(query, TS.search.per_page, TS.search.onSearchAll, page);
    },
    getNextPageOfMessageResults: function(query, page) {
      _callSearchPerSe("search.messages", query, TS.search.per_page, page, _onSearchMessages);
    },
    getNextPageOfFileResults: function(query, page) {
      _callSearchPerSe("search.files", query, TS.search.per_page, page, _onSearchFiles);
    },
    extractNonModifierSearchTxt: function(txt) {
      var ret = "";
      var A = txt.split(" ");
      A.forEach(function(m) {
        if (m.match(TS.search.keyword_modifier_extract_regex)) return;
        ret += " " + m;
      });
      ret = $.trim(ret);
      return ret;
    },
    dispatchSearch: function(query, count, callback, page) {
      if (TS.isPartiallyBooted()) {
        if (!_pending_dispatch_search_args) {
          var this_context = this;
          TS.ms.connected_sig.addOnce(function() {
            TS.search.dispatchSearch.apply(this_context, _pending_dispatch_search_args);
            _pending_dispatch_search_args = undefined;
          });
        }
        _pending_dispatch_search_args = arguments;
        return;
      }
      if (!page || page === 1) {
        var system_find_str = TS.search.extractNonModifierSearchTxt(query);
        if (system_find_str) TSSSB.call("writeFindString", system_find_str);
      }
      if (TS.search.separateMessagesAndFiles()) {
        if (!page || page === 1) TS.search.results[query] = null;
        var response_tracker = _makeSearchCallbackTracker();
        _callSearchPerSe("search.messages", query, count, page, response_tracker.msgs);
        _callSearchPerSe("search.files", query, count, page, response_tracker.files);
      } else {
        _callSearchPerSe("search.all", query, count, page, callback);
      }
    },
    setFilter: function(filter) {
      TS.search.filter = filter;
      TS.search.search_filter_set_sig.dispatch();
    },
    setFiletypeFilter: function(filter) {
      TS.search.filetype = filter;
      TS.search.search_filetype_filter_set_sig.dispatch();
    },
    moreTopResults: function() {
      TS.search.sort = "score";
      TS.search.switchToRelevant(true);
      TS.clog.track("SEARCH_OPEN", {
        open_method: "top_results_see_more",
        click_module_position: 0,
        click_module_name: "score",
        request_id: TS.search.last_request_id
      });
    },
    hasCachedRelevantResults: function() {
      return TS.search.filter === "messages" && _.has(TS.search.results[TS.search.query].messages, "modules.score");
    },
    hasCachedRecentResults: function() {
      return TS.search.filter === "messages" && _.has(TS.search.results[TS.search.query].messages, "timestamp_messages");
    },
    switchToRelevant: function(fromTopResults) {
      var timestamp_messages = TS.search.results[TS.search.query].messages;
      TS.search.results[TS.search.query].messages = timestamp_messages.modules.score;
      TS.search.results[TS.search.query].messages.timestamp_messages = timestamp_messages;
      TS.search.results[TS.search.query].messages.order = 0;
      TS.search.search_sort_set_sig.dispatch(fromTopResults);
      TS.search.view.renderResults(true);
    },
    switchToRecent: function() {
      TS.search.results[TS.search.query].messages = TS.search.results[TS.search.query].messages.timestamp_messages;
      TS.search.view.renderResults(true);
    },
    topResultsFeedback: function(source, feedback_value) {
      var emoji_list = [":bow:"];
      if (feedback_value === "top_results_useful") {
        var random_tone = Math.floor(Math.random() * 5) + 2;
        emoji_list = [":tada:", ":raised_hands::skin-tone-" + random_tone + ":"];
      }
      var emoji = emoji_list[Math.floor(Math.random() * emoji_list.length)];
      $(source).closest(".top_results_feedback").html("Thanks for your feedback! " + TS.emoji.graphicReplace(emoji));
      TS.clog.track("SEARCH_FEEDBACK", {
        search_feedback_value: feedback_value,
        request_id: TS.search.last_request_id
      });
    },
    setSort: function(sort, no_reissue_search) {
      if (TS.search.sort === sort) return;
      $(".search_toggle").toggleClass("active");
      TS.search.sort = sort;
      TS.search.search_sort_set_sig.dispatch();
      if (sort !== "score" && sort !== "model") {
        sort = "timestamp";
      }
      TS.prefs.setPrefByAPI({
        name: "search_sort",
        value: sort
      });
      TS.clog.track("SEARCH_OPEN", {
        open_method: "set_sort_" + sort,
        request_id: TS.search.last_request_id
      });
      if (sort === "timestamp" && TS.search.hasCachedRecentResults()) {
        TS.search.switchToRecent();
      } else if (sort === "score" && TS.search.hasCachedRelevantResults()) {
        TS.search.switchToRelevant();
      } else if (!no_reissue_search) {
        TS.search.searchAll();
      }
    },
    setChannel: function(id) {
      var channel = TS.channels.getChannelById(id);
      if (channel) {
        TS.search.channel = channel;
        TS.search.group = null;
        TS.search.im = null;
      } else {
        TS.search.channel = null;
      }
      TS.search.search_channel_set_sig.dispatch();
    },
    setGroup: function(id) {
      var group = TS.groups.getGroupById(id);
      if (group) {
        TS.search.group = group;
        TS.search.channel = null;
        TS.search.im = null;
      } else {
        TS.search.group = null;
      }
      TS.search.search_group_set_sig.dispatch();
    },
    setMember: function(id) {
      var member = TS.members.getMemberById(id);
      if (member) {
        TS.search.member = member;
      } else {
        TS.search.member = null;
        TS.search.from = null;
        var input_val = TS.utility.contenteditable.value(TS.search.input).trim();
        var from_matches = input_val.match(TS.search.from_regex);
        if (from_matches) {
          $.each(from_matches, function(i, match) {
            input_val = $.trim(input_val.replace(match, ""));
          });
          TS.utility.contenteditable.value(TS.search.input, input_val);
        }
      }
      TS.search.search_member_set_sig.dispatch();
    },
    searchAll: function(query) {
      if (!TS.client) {
        clearTimeout(TS.search.widget.key_tim);
      }
      TS.search.previous_query = TS.search.query;
      _last_search_time = new Date;
      if (query) {
        TS.search.query = query;
      } else {
        TS.search.query = TS.utility.contenteditable.value(TS.search.input).trim();
      }
      TS.search.query = $.trim(TS.search.query);
      TS.search.query_string = TS.search.query;
      if (TS.search.query_string) {
        TS.search.startSearchTimer(TS.search.query_string, TS.search.per_page, TS.search.onSearchAll);
      } else {
        TS.search.view.updateOptions();
        if (TS.client) {
          TS.search.autocomplete.stopSpinner();
        } else {
          TS.search.widget.stopSpinner();
        }
      }
    },
    onSearchAll: function(ok, data, args) {
      if (TS.qs_args.force_search_fail === "1") {
        window.failed_once = true;
        ok = false;
        data = {
          ok: false,
          error: "solr_failed"
        };
      }
      if (!ok) {
        var err_str = data && data.error ? data.error : "unknown_error";
        if (!data) {
          data = {
            ok: false,
            error: err_str
          };
        }
        data.query = data.query || args.query;
        data.messages = data.messages || {
          total: 0,
          paging: {
            count: TS.search.per_page,
            total: 0,
            page: 1,
            pages: 0
          },
          matches: []
        };
        data.files = data.files || {
          total: 0,
          paging: {
            count: TS.search.per_page,
            total: 0,
            page: 1,
            pages: 0
          },
          matches: []
        };
      }
      if (args.query !== TS.search.query_string) {
        if (!TS.search.results[args.query] || !TS.search.results[args.query].error) {
          return;
        }
      }
      TS.search.last_search_query = args.query;
      if (TS.client) TS.search.upsertFiles(data);
      TS.search.expandChannelsAndCheckForMsgsInModel(data);
      if (args.page === 1) {
        TS.search.results[args.query] = data;
        TS.search.results[args.query]._time_of_search = Date.now();
        TS.search.all_search_results_fetched_sig.dispatch(data, args);
        TS.search.getNextPageOfSearchResults(args.query, 2);
      } else {
        var existing = TS.search.results[args.query];
        if (existing.messages.matches) data.messages.matches = existing.messages.matches.concat(data.messages.matches);
        if (existing.files.matches) data.files.matches = existing.files.matches.concat(data.files.matches);
        TS.search.results[args.query] = data;
        TS.search.all_search_results_fetched_sig.dispatch(data, args);
      }
    },
    searchSuggest: function(query) {
      TS.api.call("search.autocomplete", {
        query: query
      }, TS.search.onSearchSuggest);
    },
    onSearchSuggest: function(ok, data, args) {
      if (!TS.client) {
        if (TS.search.widget.suppress_suggestions) {
          TS.search.widget.suppress_suggestions = false;
          return;
        }
      }
      if (!ok) {
        return;
      }
      TS.search.suggestions = [];
      if (data.suggestions[0] === TS.search.query && data.suggestions.length === 1) {
        TS.search.suggestions = [];
      } else {
        $.each(data.suggestions, function(i, value) {
          TS.search.suggestions[i] = {
            value: value,
            highlighted: TS.search.highlightSuggestion(TS.utility.htmlEntities(value))
          };
        });
      }
      TS.search.autosuggest_search_results_fetched_sig.dispatch(data, args);
    },
    highlightSuggestion: function(value) {
      var current = TS.utility.contenteditable.value(TS.search.input);
      var pattern = new RegExp("(" + TS.utility.preg_quote(current) + ")", "gi");
      var highlighted = value.replace(pattern, "<b>$1</b>");
      return highlighted;
    },
    expandChannelsAndCheckForMsgsInMatch: function(match) {
      var model_ob;
      var c_id = match.channel.id;
      var existing_rxns;
      _ingestMsgSearchResultExtras(match, c_id);
      _nextprev_names.forEach(function(name) {
        if (!match[name]) return;
        _ingestMsgSearchResultExtras(match[name], c_id);
      });
      existing_rxns = TS.rxns.getExistingRxnsByKey(match._rxn_key);
      if (existing_rxns && !match.reactions) {
        TS.warn("msg:" + match.ts + " has reactions in local model, but we got an object in search results that does NOT have reactions, which seems suspicious");
      } else {
        TS.rxns.upsertRxnsFromDataAndUpdateUI(match._rxn_key, match.reactions);
      }
      model_ob = TS.shared.getModelObById(c_id);
      if (model_ob) {
        if (match.type === "im" && !TS.ims.isImWithDeletedMember(model_ob)) {
          match.im_exists = true;
        }
        if (model_ob.msgs) {
          match.is_loaded = !!TS.utility.msgs.getMsg(match.ts, model_ob.msgs);
        } else if (TS.client) {
          TS.warn(model_ob.id + " has no msgs");
        }
        match.channel = model_ob;
        if (!match.permalink) match.permalink = TS.utility.msgs.constructMsgPermalink(model_ob, match.ts);
      }
    },
    expandChannelsAndCheckForMsgsInModel: function(results) {
      var match;
      var i;
      if (!results.messages || !results.messages.matches) return;
      for (i = 0; i < results.messages.matches.length; i += 1) {
        match = results.messages.matches[i];
        if (!match) continue;
        TS.search.expandChannelsAndCheckForMsgsInMatch(match);
      }
      if (results.messages.modules && results.messages.modules.score) {
        for (i = 0; i < results.messages.modules.score.matches.length; i += 1) {
          match = results.messages.modules.score.matches[i];
          if (!match) continue;
          TS.search.expandChannelsAndCheckForMsgsInMatch(match);
        }
        if (results.messages.modules.score.top_results) {
          for (i = 0; i < results.messages.modules.score.top_results.length; i += 1) {
            match = results.messages.modules.score.top_results[i];
            if (!match) continue;
            TS.search.expandChannelsAndCheckForMsgsInMatch(match);
          }
        }
      }
    },
    upsertFiles: function(data) {
      if (!data.files || !data.files.matches) return;
      for (var i = 0; i < data.files.matches.length; i += 1) {
        if (data.files.matches[i].preview) {
          data.files.matches[i].preview_search = data.files.matches[i].preview;
          delete data.files.matches[i].preview;
        }
        data.files.matches[i] = TS.files.upsertFile(data.files.matches[i]).file;
      }
    },
    getResultsByQuery: function(query) {
      return TS.search.results[query];
    },
    getMatchByQueryAndTs: function(query, ts) {
      return TS.search.getMatchByQueryByThings(query, ts);
    },
    getMatchByQueryAndChannelAndTs: function(query, channel_id, ts) {
      return TS.search.getMatchByQueryByThings(query, ts, channel_id);
    },
    getMatchByQueryAndChannelAndTsAndModule: function(return_ob, query, channel_id, ts, module) {
      var results = TS.search.getResultsByQuery(query);
      if (!results) {
        TS.error("WTF no results?");
        return null;
      }
      if (!results.messages.modules) {
        TS.error("WTF no results.messages.modules?");
        return null;
      }
      if (!results.messages.modules[module]) {
        TS.error("WTF no results.messages.modules." + module + "?");
      }
      var match;
      for (var i = 0; i < results.messages.modules[module].top_results.length; i += 1) {
        match = results.messages.modules[module].top_results[i];
        if (!match) {
          TS.error("WTF no match?");
          continue;
        }
        if ((!channel_id || match.channel.id === channel_id) && match.ts === ts) {
          if (return_ob) {
            return {
              match: match,
              index: i
            };
          }
          return match;
        }
      }
      return null;
    },
    getMatchByQueryByThings: function(query, ts, channel_id) {
      var results = TS.search.getResultsByQuery(query);
      if (!results) {
        TS.error("WTF no results?");
        return null;
      }
      return TS.search.getMatchFromResultsByThings(true, results, ts, channel_id);
    },
    getMatchFromResultsByThings: function(return_ob, results, ts, channel_id) {
      if (!results) {
        TS.error("WTF no results?");
        return null;
      }
      if (!results.messages) {
        TS.error("WTF no results.messages?");
        return null;
      }
      if (!results.messages.matches) {
        TS.error("WTF no results.messages.matches?");
        return null;
      }
      var match;
      for (var i = 0; i < results.messages.matches.length; i += 1) {
        match = results.messages.matches[i];
        if (!match) {
          TS.error("WTF no match?");
          continue;
        }
        if ((!channel_id || match.channel.id === channel_id) && match.ts === ts) {
          if (return_ob) {
            return {
              match: match,
              index: i
            };
          }
          return match;
        }
      }
      return null;
    },
    truncateQuery: function(q) {
      if (q.length > TS.search.search_query_max_length) {
        return q.substring(0, TS.search.search_query_max_length);
      }
      return q;
    },
    resetSearchOptions: function() {
      TS.search.channel = null;
      TS.search.group = null;
      TS.search.im = null;
      TS.search.member = null;
      TS.search.from = null;
      TS.search.searchAll();
    },
    saveSearch: function(params, callback) {
      if (!params.terms) return;
      params.terms = $.trim(params.terms);
      if (TS.search.keyword_modifier_pair_regex.test(params.terms)) return;
      TS.api.call("search.save", params, callback);
    },
    separateMessagesAndFiles: function() {
      return !!TS.client;
    },
    setInputVal: function(txt) {
      TS.utility.contenteditable.value(TS.search.input, txt);
      TS.utility.contenteditable.focus(TS.search.input);
    },
    appendToInputAndSelect: function(txt) {
      var current = TS.utility.contenteditable.value(TS.search.input);
      if (current && !/\s$/.test(current)) current += " ";
      TS.utility.contenteditable.value(TS.search.input, current + txt);
      if (!TS.boot_data.feature_texty_search) {
        TS.search.input.textrange("set", current.length, current.length + txt.length);
      }
    },
    submitSearch: function() {
      TS.search.input.closest("form").trigger("submit");
    },
    searchSessionExpired: function() {
      return _last_search_time && Date.now() - _last_search_time > _max_session_time;
    },
    debugQuery: function(team_id, user_id) {
      var uri = "/mc/search_eval_query.php" + "?team_id=" + team_id + "&user_id=" + user_id + "&query=" + encodeURIComponent(TS.search.query_string);
      window.open(uri);
    },
    getSort: function(method) {
      return method === "search.files" ? "auto" : TS.search.sort;
    }
  });
  var _last_search_time;
  var _max_session_time = 5 * 60 * 1e3;
  var _nextprev_names = ["next", "next_2", "previous", "previous_2"];
  var _ingestMsgSearchResultExtras = function(ob, c_id) {
    ob._rxn_key = TS.rxns.getRxnKey("message", ob.ts, c_id);
    TS.utility.msgs.processAttachments(ob.attachments);
    TS.ui.handy_rxns.decorateMsg(ob, TS.format.replaceHighlightMarkers(ob.text));
    if (ob.extracts && ob.extracts.length) {
      ob.extracts.forEach(function(extract) {
        extract._rxn_key = ob._rxn_key;
        TS.ui.handy_rxns.decorateMsg(extract, TS.format.replaceHighlightMarkers(extract.text));
      });
    }
  };
  var _pending_dispatch_search_args;
  var _callSearchPerSe = function(method, query, count, page, callback) {
    var args = {
      query: TS.emoji.maybeGetCanonicalEmojiString(query),
      highlight: true,
      count: count,
      types: [TS.search.filetype],
      sort: TS.search.getSort(method),
      page: page || 1,
      extracts: 1,
      extra_message_data: 1,
      max_extract_len: 150,
      highlight_attachments: 1,
      active_cid: TS.model.active_cid,
      top_results: 1,
      experts: 1,
      locale: TS.i18n.localeOrPseudo()
    };
    if (method === "search.all") args.no_posts = 1;
    if (method !== "search.files") args.more_matches = true;
    if (TS.boot_data.page_needs_enterprise && TS.boot_data.enterprise_api_token) {
      args.enterprise_token = TS.boot_data.enterprise_api_token;
      if (method === "search.messages") args.team = TS.model.team.id;
    }
    TS.api.call(method, args, callback);
  };
  var _onSearchMessages = function(ok, data, args, request_id) {
    if (!ok || !data.messages) {
      var err_str = data && data.error ? data.error : "unknown_error";
      if (!data) {
        data = {
          ok: false,
          error: err_str
        };
      }
      data.query = data.query || args.query;
      data.messages = data.messages || {
        total: 0,
        paging: {
          count: TS.search.per_page,
          total: 0,
          page: 1,
          pages: 0
        },
        matches: []
      };
    }
    data.query = TS.emoji.maybeGetLocalizedEmojiString(data.query);
    args.query = TS.emoji.maybeGetLocalizedEmojiString(args.query);
    if (args.query !== TS.search.query_string) {
      if (!TS.search.results[args.query] || !TS.search.results[args.query].error) {
        return;
      }
    }
    if (TS.search.last_search_query !== args.query) {
      delete TS.search.results[TS.search.last_search_query];
    }
    TS.search.last_search_query = args.query;
    TS.search.last_request_id = request_id;
    TS.search.expandChannelsAndCheckForMsgsInModel(data);
    var existing = TS.search.results[args.query];
    if (args.page == 1) {
      if (!existing) {
        TS.search.results[args.query] = data;
        existing = data;
      } else {
        $.extend(existing, data);
      }
      existing.initial_messages_total = data.messages.total;
      existing._time_of_search = Date.now();
      TS.search.message_search_results_fetched_sig.dispatch(existing, args);
    } else {
      if (existing.messages && existing.messages.matches) {
        data.messages.matches = existing.messages.matches.concat(data.messages.matches);
      }
      $.extend(existing, data);
      TS.search.message_search_results_fetched_sig.dispatch(existing, args);
    }
  };
  var _onSearchFiles = function(ok, data, args, request_id) {
    if (!ok || !data.files) {
      var err_str = data && data.error ? data.error : "unknown_error";
      if (!data) {
        data = {
          ok: false,
          error: err_str
        };
      }
      data.query = data.query || args.query;
      data.files = data.files || {
        total: 0,
        paging: {
          count: TS.search.per_page,
          total: 0,
          page: 1,
          pages: 0
        },
        matches: []
      };
    }
    data.query = TS.emoji.maybeGetLocalizedEmojiString(data.query);
    args.query = TS.emoji.maybeGetLocalizedEmojiString(args.query);
    if (args.query !== TS.search.query_string) {
      if (!TS.search.results[args.query] || !TS.search.results[args.query].error) {
        return;
      }
    }
    if (TS.search.last_search_query !== args.query) {
      delete TS.search.results[TS.search.last_search_query];
    }
    TS.search.last_search_query = args.query;
    TS.search.last_files_request_id = request_id;
    if (TS.client) TS.search.upsertFiles(data);
    var existing = TS.search.results[args.query];
    if (args.page === 1) {
      if (!existing) {
        TS.search.results[args.query] = data;
        existing = data;
      } else {
        $.extend(existing, data);
      }
      existing.initial_files_total = data.files.total;
      existing._time_of_search = Date.now();
      TS.search.file_search_results_fetched_sig.dispatch(existing, args);
    } else {
      if (existing.files && existing.files.matches) {
        data.files.matches = existing.files.matches.concat(data.files.matches);
      }
      $.extend(existing, data);
      TS.search.file_search_results_fetched_sig.dispatch(existing, args);
    }
  };
  var _makeSearchCallbackTracker = function() {
    var msgs_fetched = false;
    var files_fetched = false;
    var after = function() {
      if (msgs_fetched && files_fetched) {
        TS.search.all_search_results_fetched_sig.dispatch();
      }
    };
    return {
      msgs: function() {
        msgs_fetched = true;
        _onSearchMessages.apply(this, arguments);
        after();
      },
      files: function() {
        files_fetched = true;
        _onSearchFiles.apply(this, arguments);
        after();
      }
    };
  };
  var _teamFileChanged = function(file) {
    TS.files.updateFileListItem(file, $("#search_results_items"));
  };
})();
(function() {
  "use strict";
  TS.registerModule("ms", {
    fast_reconnects_enabled: true,
    last_pong_time: 0,
    sent_map: {},
    connected_sig: new signals.Signal,
    disconnected_sig: new signals.Signal,
    trouble_sig: new signals.Signal,
    reconnecting_sig: new signals.Signal,
    pong_sig: new signals.Signal,
    on_msg_sig: new signals.Signal,
    reconnect_requested_sig: new signals.Signal,
    num_times_connected: 0,
    errors: {
      BAD_TOKEN: 1,
      CONNECTION_TROUBLE: 1006,
      RATE_LIMIT: -1,
      UNKNOWN: 0
    },
    onStart: function() {
      if (!window.WebSocket) {
        window.WebSocket = window.MozWebSocket;
        if (!window.WebSocket) {
          alert(TS.i18n.t("Your browser does not support WebSockets.", "ms")());
          return;
        }
      }
      _setPongTimeoutMs(TS.model.ui.is_window_focused || false);
      TS.ui.window_focus_changed_sig.add(_setPongTimeoutMs);
      setInterval(function() {
        if (!TS.model.ms_connected) return;
        if (TS.model.rtm_start_throttler < 1) return;
        TS.model.rtm_start_throttler -= 1;
      }, 1e3 * 60);
      var ping_pong_measurement_percentage = 10;
      _measure_ping_pong_latency = TS.boot_data.feature_tinyspeck || TS.utility.enableFeatureForUser(ping_pong_measurement_percentage);
      _time_since_last_ping_pong_metric = Date.now();
      if (!TS.boot_data.feature_tinyspeck) {
        _maybeClearImsgLog = _.noop;
        _maybeAddToImsgLog = _.noop;
        _maybePrintImsgLog = _.noop;
      }
      _should_record_queue_metrics = TS.boot_data.feature_queue_metrics && TS.client && TS.client.stats.isEnabled() && TS.utility.enableFeatureForUser(_QUEUE_METRICS_PERCENTAGE);
    },
    test: function() {
      return {
        _createNewSocket: _createNewSocket,
        _isValidSlackWebSocketUrl: _isValidSlackWebSocketUrl
      };
    },
    send: function(msg, handler, temp_ts) {
      _msg_id += 1;
      msg.id = _msg_id;
      var MAX_SEND_SIZE_BYTES = 32768;
      var data = JSON.stringify(msg);
      if (data.length > MAX_SEND_SIZE_BYTES) {
        var msg_description = msg.subtype ? msg.type + "." + msg.subtype : msg.type;
        var e = new Error("Unable to send " + msg_description + " message to MS because it exceeds " + MAX_SEND_SIZE_BYTES + " bytes");
        TS.console.logError(e, "too_big_to_send");
        var ok = false;
        handler(ok, {
          error: "too_big_to_send"
        });
        return;
      }
      TS.ms.sent_map[msg.id.toString()] = {
        msg: msg,
        handler: handler,
        ts: Date.now(),
        temp_ts: temp_ts
      };
      if (msg.type === "ping" || msg.type === "pong") {
        TS.log(2, "MS sending " + msg.type);
        TS.dir(2, msg);
      } else {
        TS.model.last_net_send = Date.now();
        TS.log(2, "sending " + msg.type);
        TS.dir(2, msg);
      }
      if (!_websocket) {
        var err = new Error("TS.ms.send called when we have no _websocket! This is a programming error.");
        TS.error(err);
        TS.info("Some context for debugging:");
        TS.info("TS.model.calling_rtm_start=" + TS.model.calling_rtm_start);
        TS.info("TS.model.ms_connected=" + TS.model.ms_connected);
        TS.info("TS.model.ms_connecting=" + TS.model.ms_connecting);
        TS.console.logStackTrace("TS.ms.sendMsg(...)");
        throw err;
      }
      if (TS.client && TS.client.stats.isEnabled() && msg.type === "message") {
        TS.metrics.mark("user_send_message_" + _msg_id);
        TS.metrics.mark("user_message_unprocessed_" + _msg_id);
      }
      _websocket.send(data);
      return msg.id;
    },
    sendTyping: function(c_id) {
      var msg_str = '{"type":"typing", "channel":"' + c_id + '"}';
      _websocket.send(msg_str);
    },
    sendTickle: function() {
      TS.model.last_net_send = Date.now();
      var msg_str = '{"type":"tickle"}';
      _websocket.send(msg_str);
    },
    handleMsg: function(imsg) {
      var is_reconnect_reply = imsg.reply_to && !("ok" in imsg) && imsg.type === "message";
      var sent;
      if (imsg.reply_to) {
        if (imsg.reply_to.toString() in TS.ms.sent_map) {
          sent = _processReplyMessage(imsg);
        } else if (!is_reconnect_reply) {
          TS.error('received msg "' + imsg.reply_to + '" with type "' + imsg.type + '" but we have no record of it in sent_map');
        }
      } else {
        if (imsg.event_ts && !imsg._from_evt_log) {
          TS.ms.storeLastEventTS(imsg.event_ts, "handleMsg");
        }
        if (TS.storage.isUsingMemberBotCache() && imsg.cache_ts) {
          TS.storage.rememberLastCacheTS(imsg.cache_ts);
        }
      }
      var onPong = function() {
        if (_log_next_pong) {
          _log_next_pong = false;
          TS.info("Got pong from MS");
        }
        TS.ms.last_pong_time = Date.now();
        TS.ms.pong_sig.dispatch();
        _check_last_pong_time = false;
        _maybeClearImsgLog();
      };
      if (imsg.type === "ping" || imsg.type === "pong") {
        if (sent && sent.ts) {
          TS.log(2, "MS msg " + imsg.type + " time: " + (Date.now() - sent.ts) + " ms");
        } else {
          TS.log(2, "MS msg " + imsg.type + " time: " + Date.now() + " ms (no sent.ts)");
        }
        if (_measure_ping_pong_latency) {
          if (Date.now() - _time_since_last_ping_pong_metric > _ping_pong_measurement_interval) {
            TS.metrics.measureAndClear("ms_ping_pong_latency", "ms_ping_sent");
            _time_since_last_ping_pong_metric = Date.now();
          } else {
            TS.metrics.clearMarks("ms_ping_sent");
          }
        }
        onPong();
        TS.dir(2, imsg);
      } else {
        var time_since_last_pong = Date.now() - TS.ms.last_pong_time;
        if (_check_last_pong_time && time_since_last_pong > _implicit_pong_interv_ms) {
          TS.log(2, "MS msg being used as an implicit pong due to excessive delay (" + time_since_last_pong + "ms)");
          onPong();
          if (_measure_ping_pong_latency) {
            TS.metrics.clearMarks("ms_ping_sent");
          }
        }
        _maybeAddToImsgLog(imsg);
        if (sent) {
          var type = imsg.type || imsg.SENT_MSG.type || "";
          TS.log(2, "msg " + (type ? '"' + type + '" ' : "") + "rsp time " + (Date.now() - sent.ts) + "ms");
        } else {
          TS.log(2, 'msg "' + imsg.type + '"');
        }
        TS.dir(2, imsg);
      }
      if (imsg.type === "error") {
        _onErrorMsg(imsg);
      } else if (imsg.type === "hello") {
        _onHello(imsg);
      } else if (!imsg.reply_to) {
        if (_should_record_queue_metrics) TS.metrics.mark("ms_queue_processing_start");
        TS.ms.on_msg_sig.dispatch(imsg);
        if (_should_record_queue_metrics) TS.metrics.measureAndClear("ms_queue_starvation_time", "ms_queue_processing_start");
      }
      if (sent) {
        if (!imsg.ok && imsg.type === "flannel") {
          imsg.ok = true;
        }
        if (!imsg.ok) {
          imsg.error = imsg.error || {
            code: TS.ms.errors.UNKNOWN,
            msg: "unknown error (not specified by MS)"
          };
        }
        if (is_reconnect_reply) {
          imsg.ok = true;
        }
        if (sent.handler) {
          sent.handler(imsg.ok, imsg);
        }
        if (TS.client && TS.client.stats.isEnabled() && imsg.SENT_MSG && imsg.SENT_MSG.type === "message") {
          TS.metrics.measureAndClear("message_server_reply_and_render", "user_message_unprocessed_" + imsg.reply_to);
        }
      }
    },
    storeLastEventTS: function(ts, whence) {
      if (!ts) return;
      var last_event_ts = _last_event_ts || TS.storage.fetchLastEventTS();
      if (last_event_ts && ts <= last_event_ts) return;
      if (!whence) whence = "???";
      _whence_last_event_ts = whence + " at " + Date.now() / 1e3;
      _last_event_ts = ts;
      TS.storage.storeLastEventTS(ts);
    },
    onFailure: function(reason_str) {
      TS.warn("TS.ms.onFailure reason_str:" + reason_str);
      if (reason_str) _reportDisconnect("You got disconnected, so here are some details:\n>>>" + reason_str);
      _check_last_pong_time = false;
      clearInterval(_check_ping_interv);
      clearInterval(_send_ping_interv);
      _have_sent_ping = false;
      TS.info("Deprecating current socket in onFailure with reason: " + reason_str);
      _deprecateCurrentSocket(4003, "Disconnecting due to failure. Reason: " + reason_str);
      if (_last_disconnect_was_requested_by_server) {
        TS.ms.logConnectionFlow("on_goodbye_failure");
        TS.model.ms_reconnect_ms = 0;
      } else if (TS.model.ms_connected) {
        TS.info("Disconnected from MS, TS.model.rtm_start_throttler:" + TS.model.rtm_start_throttler);
        TS.ms.logConnectionFlow("on_connected_failure");
        TS.model.ms_reconnect_ms = 100;
      } else {
        TS.ms.logConnectionFlow("on_notconnected_failure");
        TS.model.ms_reconnect_ms = (TS.model.ms_reconnect_ms + 1e3) * 2;
        var ms = TS.model.ms_reconnect_ms;
        if (TS.model.ms_reconnect_ms > 4e3) {
          TS.model.ms_reconnect_ms = _.random(ms, ms + ms / 2);
        }
        TS.model.ms_reconnect_ms = Math.min(TS.model.ms_reconnect_ms, 3e5);
      }
      if (!_isReconnectUrlValid()) {
        if (TS.model.rtm_start_throttler > 5) {
          var min_ms = 2e3 * TS.model.rtm_start_throttler;
          if (TS.model.ms_reconnect_ms < min_ms) {
            TS.info("because TS.model.rtm_start_throttler:" + TS.model.rtm_start_throttler + " we are increasing time until next login call");
            TS.model.ms_reconnect_ms = min_ms;
          }
        }
      }
      if (TS.model.ms_connected) {
        TS.model.ms_connected = false;
        TS.ms.disconnected_sig.dispatch();
      }
      if (TS.model.ms_asleep) {
        TS.warn("NOT doing startReconnection(), we are asleep");
        return;
      }
      if (TS.api.isPaused()) {
        TS.warn("NOT doing startReconnection() because TS.api.isPaused(), but will try after it unpauses");
        TS.api.unpaused_sig.add(function() {
          TS.info("MS: starting reconnection after socket failure, having waited for API to unpause");
          TS.ms.startReconnection();
        });
        return;
      }
      TS.info("MS: starting reconnection after socket failure");
      TS.ms.startReconnection();
    },
    startReconnection: function() {
      TS.model.ms_reconnect_time = Date.now() + TS.model.ms_reconnect_ms;
      if (TS.model.ms_reconnect_ms) {
        TS.console.logStackTrace("Attempting to reconnect in " + TS.model.ms_reconnect_ms + "ms");
        clearTimeout(_auto_reconnect_tim);
        _auto_reconnect_tim = setTimeout(function() {
          if (!TS.model.window_unloading) {
            TS.ms.startReconnectionImmediately();
          }
        }, TS.model.ms_reconnect_ms);
      } else {
        TS.console.logStackTrace("Attempting to reconnect immediately");
        TS.ms.startReconnectionImmediately();
      }
      clearInterval(_reconnect_interv);
      _reconnect_interv = setInterval(_onReconnectInterval, _reconnect_interv_ms);
      _onReconnectInterval();
    },
    startReconnectionImmediately: function() {
      TS.info("MS wants to reconnect because of a start call");
      clearTimeout(_auto_reconnect_tim);
      if (TS.model.attempting_fast_reconnect && _isReconnectUrlValid()) {
        TS.ms.fastReconnect();
      } else {
        if (TS.model.attempting_fast_reconnect) _clearReconnectUrl();
        TS.ms.reconnect_requested_sig.dispatch();
      }
    },
    manualReconnectNow: function() {
      TS.ms.logConnectionFlow("manual_reconnect");
      clearTimeout(_auto_reconnect_tim);
      clearInterval(_reconnect_interv);
      clearTimeout(_connect_timeout_tim);
      _connect_timeout_count = 0;
      if (!TS.model.window_unloading) {
        TS.info("MS wants to reconnect because of a user interaction");
        TS.ms.reconnect_requested_sig.dispatch();
        TS.ms.reconnecting_sig.dispatch(0);
      }
    },
    disconnect: function(was_requested_by_server, reason) {
      if (_websocket && _websocket.readyState != WebSocket.CLOSED) {
        _last_disconnect_was_requested_by_server = !!was_requested_by_server;
        TS.ms.logConnectionFlow("disconnect");
        if (TS.model.ms_connected) {
          TS.info("TS.ms.disconnect called; closing the socket");
        } else {
          TS.info("TS.ms.disconnect called while we have a WebSocket but are not connected; closing the socket");
        }
        var disconnect_msg = "Disconnecting because TS.ms.disconnect was called. was_requested_by_server = " + !!was_requested_by_server;
        if (_.isString(reason) && reason.length) {
          disconnect_msg = reason + " was_requested_by_server = " + !!was_requested_by_server;
          disconnect_msg = disconnect_msg.slice(0, 120);
        }
        _websocket.close(4005, disconnect_msg);
        TS.model.ms_connected = false;
        TS.ms.disconnected_sig.dispatch();
      } else {
        TS.warn("TS.ms.disconnect called, but _websocket=" + _websocket + " TS.model.ms_connected=" + TS.model.ms_connected);
      }
    },
    logConnectionFlow: function(name) {
      var ms_conn_log = TS.model.ms_conn_log;
      var time = Date.now();
      ms_conn_log.push({
        name: name,
        time: time,
        delta: ms_conn_log.length ? time - ms_conn_log[ms_conn_log.length - 1].time : 0
      });
      TS.log(2, "logConnectionFlow " + name + " " + ms_conn_log[ms_conn_log.length - 1].delta);
    },
    getConnectionFlowLog: function() {
      var ms_conn_log = TS.model.ms_conn_log;
      var args = [];
      for (var i = 0; i < ms_conn_log.length; i += 1) {
        args.push(encodeURIComponent(ms_conn_log[i].name + "-" + (ms_conn_log[i].delta ? Math.round(ms_conn_log[i].delta / 1e3) : 0) + "-" + Math.round(ms_conn_log[i].time / 1e3)));
      }
      TS.dir(2, TS.model.ms_conn_log);
      var log = "_x_connection_log=" + args.join(",");
      return log;
    },
    connectImmediately: function(url) {
      if (!url) url = TS.model.team.url;
      if (!url) {
        throw new Error("No WebSocket URL for us to connect to! 😱");
      }
      url = _addQueryParamsToLoginUrl(url);
      _connect(url);
      _initSocketHandlersImmediate();
    },
    connectProvisionally: function(url) {
      _connect(url);
      _initSocketHandlersProvisional();
    },
    connectProvisionallyAndFetchRtmStart: function(url) {
      if (!url) url = TS.model.team.url;
      url = _addQueryParamsToLoginUrl(url);
      _connect(url);
      return _initSocketHandlersProvisionalRtmStart();
    },
    hasProvisionalConnection: function() {
      return !!_did_make_provisional_connection;
    },
    hasOpenWebSocket: function() {
      return _.get(_websocket, "readyState") == WebSocket.OPEN;
    },
    promiseToHaveOpenWebSocket: function() {
      if (TS.ms.hasOpenWebSocket()) return Promise.resolve();
      if (!_open_websocket_p) {
        _open_websocket_p = new Promise(function(resolve) {
          _open_websocket_p_resolve = resolve;
        });
      }
      return _open_websocket_p;
    },
    finalizeProvisionalConnection: function() {
      return _finalizeProvisionalConnection();
    },
    fastReconnect: function() {
      TS.info("Trying fast reconnect");
      TS.model.calling_test_fast_reconnect = true;
      TS.api.callImmediately("rtm.checkFastReconnect").then(function(response) {
        var data = response.data;
        if (TS.reloadIfVersionsChanged(data)) return;
        TS.ms.connectImmediately(_reconnect_url);
      }, function(response) {
        var data = response.data;
        var error = data && data.error;
        if (error && error !== "_http_error") _clearReconnectUrl();
        TS.ms.onFailure("rtm.checkFastReconnect returned not-OK. error: " + error);
      }).finally(function() {
        TS.model.calling_test_fast_reconnect = false;
        _clearReconnectUrl();
      });
    },
    setReconnectUrl: function(url) {
      _reconnect_url = url;
      _reconnect_url_received_at = Date.now();
    },
    getReconnectUrl: function() {
      return _reconnect_url;
    },
    sleep: function() {
      if (TS.model.ms_asleep) return;
      if (!TS.model.ms_connected) return;
      TS.model.ms_asleep = true;
      var was_requested_by_server = false;
      TS.ms.disconnect(was_requested_by_server, "Disconnecting because client is going to sleep");
    },
    wake: function() {
      if (!TS.model.ms_asleep) return;
      if (_websocket) {
        _onDisconnect(null, "Forcing disconnect because we are trying to wake up");
        _deprecateCurrentSocket(4e3, "Forcing a disconnect of an old socket while waking up");
      }
      _disconnected_timestamp = undefined;
      _last_disconnect_was_requested_by_server = undefined;
      TS.model.ms_asleep = false;
      TS.info("MS: starting reconnection after waking");
      TS.ms.startReconnection();
    },
    showConnectionTroubleDialog: function() {
      TS.generic_dialog.start({
        title: TS.i18n.t("Connection trouble", "ms")(),
        body: TS.i18n.t("<p>Apologies, we’re having some trouble with your web socket connection.</p>				<p>We’ve seen this problem clear up with a restart of your browser, 				a solution which we suggest to you now only with great regret and self-loathing.</p>", "ms")(),
        show_cancel_button: false,
        go_button_text: TS.i18n.t("OK", "ms")(),
        esc_for_ok: true
      });
    }
  });
  var _disconnected_timestamp;
  var _last_disconnect_was_requested_by_server;
  var _did_deprecate_socket_sig = new signals.Signal;
  var _open_websocket_p;
  var _open_websocket_p_resolve;
  var _log_next_pong;
  var _have_sent_ping = false;
  var _measure_ping_pong_latency;
  var _time_since_last_ping_pong_metric;
  var _ping_pong_measurement_interval = 5 * 60 * 1e3;
  var _check_ping_interv = 0;
  var _check_ping_interv_ms = 3e3;
  var _send_ping_interv = 0;
  var _send_ping_interv_ms = 1e4;
  var _implicit_pong_interv_ms = 7e3;
  var _connect_timeout_tim = 0;
  var _connect_timeout_tim_ms = 0;
  var _connect_ws_timeout_tim_ms = 1e4;
  var _connect_flash_timeout_tim_ms = 2e4;
  var _hello_timeout_tim = 0;
  var _hello_timeout_tim_ms = 3e4;
  var _rtm_start_timeout_tim_ms = 9e4;
  var _disconnect_timeout_tim = 0;
  var _disconnect_timeout_tim_ms = 5e3;
  var _reconnect_interv = 0;
  var _reconnect_interv_ms = 1e3;
  var _auto_reconnect_tim = 0;
  var _websocket = null;
  var _msg_id = 0;
  var _check_last_pong_time = false;
  var _pong_timeout_ms = 0;
  var _away_limit_ms = 3e5;
  var _connect_timeout_count = 0;
  var _last_slack_broadcast_imsg = null;
  var _eventlog_per_page = 2e3;
  var _reconnect_url = null;
  var _reconnect_url_received_at = null;
  var _last_connect_was_fast = false;
  var _reconnect_url_limit_ms = 3e5;
  var _whence_last_event_ts;
  var _last_event_ts;
  var _QUEUE_METRICS_PERCENTAGE = 5;
  var _should_record_queue_metrics;
  var _setPongTimeoutMs = function(has_focus) {
    if (has_focus) {
      _pong_timeout_ms = 1e4;
    } else {
      _pong_timeout_ms = 6e4;
    }
    _pong_timeout_ms += _send_ping_interv_ms;
    TS.log(2, "MS _pong_timeout_ms set to:" + _pong_timeout_ms + " has_focus:" + has_focus);
  };
  var _onMsg = function(e) {
    var data = e.data;
    if (data.charCodeAt(data.length - 1) === 0) {
      var null_index = data.indexOf("\x00");
      if (null_index >= 0) {
        data = data.slice(0, null_index);
      }
    }
    if (TS._count_bytes_received) {
      TS._bytes_received += data.length;
    }
    var imsg = JSON.parse(data);
    TS.ms.handleMsg(imsg);
  };
  var _onConnect = function() {
    clearTimeout(_connect_timeout_tim);
    _connect_timeout_count = 0;
    _maybeSendDisconnectedMetric();
    if (TS.model.attempting_fast_reconnect) {
      _clearReconnectUrl();
      TS.metrics.measureAndClear("ms_fast_reconnect", "ms_websocket_create");
      _last_connect_was_fast = true;
    } else {
      TS.metrics.measureAndClear("ms_connect", "ms_websocket_create");
      _last_connect_was_fast = false;
    }
    if (_did_make_tokenless_connection) {
      TS.ms.send({
        type: "mp_command",
        subtype: "login",
        url: _addQueryParamsToLoginUrl(TS.model.team.url)
      });
    }
    _maybeResolveOpenWebSocketPromise();
    _websocket.onmessage = _onMsg;
    TS.model.ms_conn_log.length = 0;
    TS.info("MS WS connected!");
    TS.ms.logConnectionFlow("on_connect");
    clearTimeout(_hello_timeout_tim);
    _hello_timeout_tim = setTimeout(_onHelloTimeout, _hello_timeout_tim_ms);
  };
  var _finishedProcessingEventLog = function() {
    if (TS.client) TS.shared.maybeFetchHistoryAndThenCheckConsistency(TS.shared.getActiveModelOb());
  };
  var _onEventLogError = function(resp) {
    var args = resp.args;
    var data = resp.data;
    TS.error("_onEventLogError " + data);
    if (TS.client && data && data.error === "timestamp_too_old") {
      TS.storage.completelyEmptyAllStorageAndReset();
      var msg = "TS.reload() after a TS.storage.completelyEmptyAllStorageAndReset() because data.error: <code>timestamp_too_old</code>";
      if (data.reason) {
        msg += " data.reason: <code>" + data.reason + "</code>";
      }
      if (args) delete args.token;
      try {
        msg += " args: <pre>" + JSON.stringify(args, null, "	") + "</pre>";
      } catch (err) {}
      if (TS.boot_data && TS.boot_data.feature_tinyspeck) msg += "<p><b>Tell #dhtml about this, please!</b></p>";
      setTimeout(function() {
        TS.reload(null, msg);
      }, 1);
      return null;
    }
    _finishedProcessingEventLog();
    return null;
  };
  var _onEventLogOK = function(resp) {
    var data = resp.data;
    if (!data.events) {
      TS.error("_onEventLogOK missing events");
      _finishedProcessingEventLog();
      return null;
    }
    if (TS.client && data.has_more) {
      setTimeout(function() {
        TS.reload(null, "event log data.has_more: " + data.has_more + ")");
      }, 1);
      return null;
    }
    var last_eventlog_ts;
    var imsgs_to_handle = [];
    var uniques_handled = {};
    var unique_str;
    var _handleEvent = function(imsg) {
      imsg._from_evt_log = true;
      unique_str = null;
      last_eventlog_ts = last_eventlog_ts || imsg.event_ts;
      if (imsg.type === "file_change" && imsg.file && imsg.file.id) {
        unique_str = imsg.type + imsg.file.id;
      } else if (imsg.type === "user_change" && imsg.user && imsg.user.id) {
        unique_str = imsg.type + imsg.user.id;
      } else if (imsg.type === "emoji_changed") {
        unique_str = imsg.type;
      } else if (imsg.type === "channel_history_changed" && imsg.channel) {
        TS.info("eventlog: channel_history_changed for " + imsg.channel);
        unique_str = imsg.type + imsg.channel;
      } else if (imsg.type === "group_history_changed" && imsg.channel) {
        TS.info("eventlog: group_history_changed for " + imsg.channel);
        unique_str = imsg.type + imsg.channel;
      } else if (imsg.type === "im_history_changed" && imsg.channel) {
        TS.info("eventlog: im_history_changed for " + imsg.channel);
        unique_str = imsg.type + imsg.channel;
      }
      if (unique_str) {
        if (uniques_handled[unique_str]) return;
        uniques_handled[unique_str] = true;
        imsgs_to_handle.unshift(imsg);
      } else if (imsg.type === "slack_broadcast") {
        if (!imsg.reload) return;
        var last = _last_slack_broadcast_imsg;
        if (last) {
          if (!last.force_reload && imsg.force_reload) {
            _last_slack_broadcast_imsg = imsg;
          }
        } else {
          _last_slack_broadcast_imsg = imsg;
        }
      } else {
        imsgs_to_handle.unshift(imsg);
      }
    };
    _.forEachRight(data.events, _handleEvent);
    imsgs_to_handle.forEach(function(imsg) {
      try {
        TS.ms.handleMsg(imsg);
      } catch (e) {}
    });
    if (last_eventlog_ts) {
      TS.ms.storeLastEventTS(last_eventlog_ts, "eventlog");
    }
    if (_last_slack_broadcast_imsg) {
      try {
        TS.ms.handleMsg(_last_slack_broadcast_imsg);
      } catch (e) {}
      _last_slack_broadcast_imsg = null;
    }
    _finishedProcessingEventLog();
    return null;
  };
  var _checkPings = function() {
    if (!_check_last_pong_time) return;
    var since_last_pong_ms = Date.now() - TS.ms.last_pong_time;
    TS.log(2, "MS since_last_pong_ms:" + since_last_pong_ms + " pong_timeout_ms:" + _pong_timeout_ms);
    if (since_last_pong_ms < _pong_timeout_ms) return;
    if (TS.boot_data.feature_no_pong_timeout) return;
    TS.warn("since_last_pong_ms too long! " + since_last_pong_ms + " > " + _pong_timeout_ms);
    _maybePrintImsgLog();
    _maybeClearImsgLog();
    TS.warn("calling disconnect(), expect to get an onDisconnect() callback");
    TS.ms.logConnectionFlow("on_ping_timeout");
    TS.ms.trouble_sig.dispatch();
    _check_last_pong_time = false;
    _reportDisconnect("You are on team Tiny Speck, so here are some pong details:\n>>>since_last_pong_ms too long! " + since_last_pong_ms + " > " + _pong_timeout_ms + " ... calling disconnect(), expect to get an onDisconnect() callback");
    try {
      var was_requested_by_server = false;
      TS.ms.disconnect(was_requested_by_server, "Disconnecting because of pong timeout");
      clearTimeout(_disconnect_timeout_tim);
      _disconnect_timeout_tim = setTimeout(function() {
        TS.info("called disconnect, no onDisconnect callback happened in " + _disconnect_timeout_tim_ms + "ms, so calling _onDisconnect() manually now");
        _onDisconnect(null, "since_last_pong_ms too long! then called disconnect, but no onDisconnect callback happened in " + _disconnect_timeout_tim_ms + "ms, so calling _onDisconnect() manually now");
      }, _disconnect_timeout_tim_ms);
    } catch (err) {
      TS.info("since_last_pong_ms too long! then an error calling disconnect, going to assume it is because it is already closed, calling _onDisconnect() manually now");
      TS.warn(err);
      _onDisconnect(null, "error calling disconnect, going to assume it is because it is already closed, calling _onDisconnect() manually now");
    }
  };
  var _sendPing = function() {
    TS.ms.send({
      type: "ping"
    });
    if (_check_last_pong_time && _have_sent_ping) {
      TS.info("Sent another ping to MS; prior ping was never replied to");
      _log_next_pong = true;
    }
    if (_measure_ping_pong_latency) TS.metrics.mark("ms_ping_sent");
    _check_last_pong_time = true;
    _have_sent_ping = true;
  };
  var _onDisconnect = function(e, reason_str) {
    if (!TS.model.ms_asleep) {
      _disconnected_timestamp = _disconnected_timestamp || performance.now();
    }
    if (!reason_str && _last_disconnect_was_requested_by_server) {
      reason_str = "disconnected after a goodbye message";
    }
    reason_str = reason_str || "_onDisconnect called with event:" + e;
    TS.info("MS WS disconnected");
    TS.ms.logConnectionFlow("on_disconnect");
    clearTimeout(_disconnect_timeout_tim);
    clearTimeout(_hello_timeout_tim);
    clearTimeout(_connect_timeout_tim);
    _did_make_tokenless_connection = false;
    _did_make_provisional_connection = false;
    _cancelProvisionalConnectionTimeout();
    if (e) {
      TS.info("_onDisconnect event.code:" + e.code);
      if (e.code == TS.ms.errors.CONNECTION_TROUBLE) {
        TS.info("TS.ms: This was an unexpected WebSocket disconnection");
        if (TS.model.ms_reconnect_ms) {
          TS.info("TS.ms: resetting ms_reconnect delay");
          TS.model.ms_reconnect_ms = 0;
        }
        if (TS.model.rtm_start_throttler) {
          TS.info("TS.ms: resetting rtm.start throttler");
          TS.model.rtm_start_throttler = 0;
        }
      }
    } else {
      TS.info("no event");
    }
    if (_isReconnectUrlValid()) {
      TS.model.attempting_fast_reconnect = true;
    }
    TS.ms.onFailure(reason_str);
  };
  var _reportDisconnect = function(reason_str) {};
  var _deprecateCurrentSocket = function(error_code, reason) {
    TS.model.ms_connecting = false;
    if (_websocket) {
      _websocket.onclose = null;
      _websocket.onerror = null;
      _websocket.onmessage = null;
      _websocket.onopen = null;
      try {
        if (reason) {
          reason = reason.slice(0, 120);
        }
        _websocket.close(error_code, reason);
      } catch (err) {
        TS.info("Problem while deprecating current socket: " + err);
      }
      var _prev_websocket = _websocket;
      _websocket = undefined;
      _did_deprecate_socket_sig.dispatch(_prev_websocket);
    }
    _did_make_provisional_connection = false;
    _cancelProvisionalConnectionTimeout();
  };
  var _onReconnectInterval = function() {
    var ms = TS.model.ms_reconnect_time - Date.now();
    var secs = Math.round(ms / 1e3);
    if (secs >= 0) {
      TS.ms.reconnecting_sig.dispatch(secs);
    }
    if (TS.model.window_unloading) {
      clearInterval(_reconnect_interv);
    }
  };
  var _onHelloTimeout = function() {
    var desc = "socket received no hello msg " + _hello_timeout_tim_ms + "ms after connection";
    TS.warn(desc);
    TS.ms.logConnectionFlow("_onHelloTimeout");
    TS.ms.onFailure(desc);
  };
  var _onConnectTimeout = function() {
    _connect_timeout_count += 1;
    var desc = "socket not connected " + _connect_timeout_tim_ms + "ms after creation. _connect_timeout_count:" + _connect_timeout_count;
    TS.warn(desc);
    TS.ms.logConnectionFlow("_onConnectTimeout");
    if (_connect_timeout_count == 3) {
      if (TS.model.is_chrome_desktop) {
        TS.ms.showConnectionTroubleDialog();
      } else {
        var err_body;
        if (TS.model.is_our_app) {
          err_body = TS.i18n.t("We’ve seen this problem clear up with a restart of Slack, a solution which we suggest to you now only with great regret and self-loathing.", "ms")();
        } else {
          err_body = TS.i18n.t("We’ve seen this problem clear up with a restart of your browser, a solution which we suggest to you now only with great regret and self-loathing.", "ms")();
        }
        TS.generic_dialog.start({
          title: TS.i18n.t("Connection trouble", "ms")(),
          body: TS.i18n.t("<p>Apologies, we’re having some trouble with your web socket connection.</p>", "ms")() + "<p>" + err_body + "</p>",
          show_cancel_button: false,
          go_button_text: TS.i18n.t("OK", "ms")(),
          esc_for_ok: true
        });
      }
      return;
    } else if (_connect_timeout_count == 2) {
      if (window.WEB_SOCKET_USING_FLASH) {} else if (TS.model.is_chrome_desktop) {
        _connect_ws_timeout_tim_ms = 2e4;
        return;
      }
    }
    TS.ms.onFailure(desc);
  };
  var _onError = function(e) {
    var err_str = "";
    if (e) {
      if (e.name) err_str += " e.name=" + e.name;
      if (e.message) err_str += " e.message=" + e.message;
      if (e.data) err_str += " e.data=" + e.data;
    }
    TS.warn("_onError err_str: " + err_str);
    TS.dir(0, e);
  };
  var _onErrorMsg = function(imsg) {
    if (imsg.error) {
      if (imsg.error.code == TS.ms.errors.BAD_TOKEN) {
        TS.ms.logConnectionFlow("msg_error_code_1");
        _clearReconnectUrl();
      } else {
        if (imsg.error.code == TS.ms.errors.RATE_LIMIT) {
          TS.client.activateMsgRateLimit({
            notify_user: true
          });
          TS.ms.connected_sig.addOnce(TS.client.deactivateMsgRateLimit);
        }
        TS.info("_onErrorMsg imsg.error.msg: " + imsg.error.msg + ", imsg.error.code: " + imsg.error.code);
        TS.ms.onFailure("_onErrorMsg imsg.error: " + JSON.stringify(imsg.error));
      }
    } else {
      TS.info("_onErrorMsg imsg: " + (imsg ? JSON.stringify(imsg) : "no imsg?"));
    }
  };
  var _onHello = function(imsg) {
    clearTimeout(_hello_timeout_tim);
    var since_last_pong_ms = Date.now() - TS.ms.last_pong_time;
    TS.info("Hello msg recvd, since_last_pong_ms:" + since_last_pong_ms);
    if (imsg) {
      TS.info("host_id: " + _.get(imsg, "host_id") + ", server_version: " + _.get(imsg, "server_version"));
    }
    TS.ms.logConnectionFlow("on_hello");
    if (TS.client && since_last_pong_ms > _away_limit_ms && !_last_connect_was_fast) {
      TS.client.ui.maybePromptForSetActive();
    }
    TS.model.ms_reconnect_ms = 0;
    clearInterval(_reconnect_interv);
    _check_last_pong_time = true;
    TS.ms.last_pong_time = Date.now();
    clearInterval(_check_ping_interv);
    _check_ping_interv = setInterval(_checkPings, _check_ping_interv_ms);
    clearInterval(_send_ping_interv);
    _send_ping_interv = setInterval(_sendPing, _send_ping_interv_ms);
    TS.model.ms_connecting = false;
    TS.model.ms_connected = true;
    var last_event_ts = _last_event_ts || TS.storage.fetchLastEventTS();
    var should_consistency_check = !!TS.ms.num_times_connected;
    if (should_consistency_check) {
      if (last_event_ts && !_last_connect_was_fast) {
        TS.info("calling eventlog.history with start:" + last_event_ts + " (from TS.storage.fetchLastEventTS())");
        if (_whence_last_event_ts) TS.info("last_event_ts is from " + _whence_last_event_ts);
        TS.api.callImmediately("eventlog.history", {
          start: last_event_ts,
          count: _eventlog_per_page,
          no_payload_if_has_more: true,
          batch_deleted_files: true
        }).then(_onEventLogOK).catch(_onEventLogError).finally(_.noop);
      } else if (TS.client) {
        TS.shared.maybeFetchHistoryAndThenCheckConsistency(TS.shared.getActiveModelOb());
      }
    }
    TS.ms.connected_sig.dispatch(_last_connect_was_fast);
    TS.ms.num_times_connected += 1;
    _sendPing();
  };
  var _isReconnectUrlValid = function() {
    if (!TS.ms.fast_reconnects_enabled) return false;
    if (!_reconnect_url) return false;
    if (!_isValidSlackWebSocketUrl(_reconnect_url)) return false;
    var now = Date.now();
    var reconnect_url_age = now - _reconnect_url_received_at;
    if (reconnect_url_age < _reconnect_url_limit_ms) return true;
    _clearReconnectUrl();
    return false;
  };
  var _clearReconnectUrl = function() {
    TS.model.attempting_fast_reconnect = false;
    _reconnect_url = null;
    _reconnect_url_received_at = null;
  };
  var _onConnectProvisional;
  var _onDisconnectProvisional;
  var _onErrorProvisional;
  var _onMsgProvisional;
  var _did_make_provisional_connection;
  var _did_make_tokenless_connection;
  var _makeBufferHandler = function(fn) {
    var buf = [];
    var handler = function() {
      if (typeof fn === "function") {
        var should_buffer = fn.apply(this, arguments);
        if (should_buffer === false) return;
      }
      buf.push({
        this_arg: this,
        args: arguments
      });
    };
    handler.replay = function(handler) {
      buf.forEach(function(invocation) {
        handler.apply(invocation.this_arg, invocation.args);
      });
      buf.length = 0;
    };
    return handler;
  };
  var _startConnectTimeout = function() {
    _connect_timeout_tim_ms = window.WEB_SOCKET_USING_FLASH ? _connect_flash_timeout_tim_ms : _connect_ws_timeout_tim_ms;
    clearTimeout(_connect_timeout_tim);
    _connect_timeout_tim = setTimeout(_onConnectTimeout, _connect_timeout_tim_ms);
  };
  var _addQueryParamsToLoginUrl = function(url) {
    url = TS.utility.url.setUrlQueryStringValue(url, "version_uid", TS.boot_data.version_uid);
    url = TS.utility.appendLogToUrlWithLimit(url, TS.ms.getConnectionFlowLog());
    url = TS.utility.url.setUrlQueryStringValue(url, "batch_presence_aware", 1);
    return url;
  };
  var _pong_log = [];
  var _maybePrintImsgLog = function() {
    TS.info("Previous imsg events:\n========" + _pong_log.join("\n") + "========");
  };
  var _maybeClearImsgLog = function() {
    _pong_log.length = 0;
  };
  var _maybeAddToImsgLog = function(imsg) {
    imsg = imsg.SENT_MSG || imsg;
    var msg_desc = imsg.subtype ? imsg.type + "." + imsg.subtype : imsg.type;
    _pong_log.push(TS.makeLogDate() + msg_desc);
  };
  var _handleConnectAfterProvisionalConnection = function() {
    TS.info("Finalizing provisional MS connection");
    if (_websocket.readyState != WebSocket.OPEN) {
      _startConnectTimeout();
    }
    _onConnectProvisional.replay(_onConnect);
    _onDisconnectProvisional.replay(_onDisconnect);
    _onErrorProvisional.replay(_onError);
    _onMsgProvisional.replay(_onMsg);
    _websocket.onopen = _onConnect;
    _websocket.onclose = _onDisconnect;
    _websocket.onerror = _onError;
    _onConnectProvisional = undefined;
    _onDisconnectProvisional = undefined;
    _onErrorProvisional = undefined;
    _onMsgProvisional = undefined;
  };
  var _createNewSocket = function(url) {
    if (!_isValidSlackWebSocketUrl(url)) {
      TS.error("Tried to connect to a WebSocket URL that doesn’t look right; aborting");
      TS.ms.onFailure("Invalid WebSocket URL");
      return false;
    }
    if (TS.lazyLoadMembersAndBots()) {
      url = TS.utility.url.setUrlQueryStringValue(url, "flannel", 1);
      url = TS.utility.url.setUrlQueryStringValue(url, "token", TS.boot_data.api_token);
      url = TS.utility.url.setUrlQueryStringValue(url, "no_annotations", 1);
      if (TS.boot_data.version_ts === "dev" && TS.boot_data.should_use_flannel) {
        url = TS.utility.url.setUrlQueryStringValue(url, "api_url", TS.boot_data.flannel_api_url);
      }
      if (_shouldUseFlannelCanary()) {
        url = TS.utility.url.setUrlQueryStringValue(url, "canary", 1);
      }
      TS.log(1989, "Connecting to Flannel..." + url);
    }
    TS.ms.logConnectionFlow("connect");
    var log_url = url.replace(TS.boot_data.api_token, "REDACTED");
    TS.info("Connecting to: " + log_url);
    clearTimeout(_connect_timeout_tim);
    TS.ms.last_url = url;
    TS.ms.last_start_ms = Date.now();
    TS.metrics.mark("ms_websocket_create");
    try {
      _websocket = new WebSocket(url);
    } catch (error) {
      TS.warn("failed to create new WebSocket");
      TS.error(error);
      TS.ms.onFailure("failed to create new WebSocket");
      return false;
    }
    return true;
  };
  var _initSocketHandlersProvisional = function() {
    TS.info("Initializing provisional MS connection");
    _did_make_provisional_connection = true;
    _did_make_tokenless_connection = true;
    _startProvisionalConnectionTimeout();
    _onConnectProvisional = _makeBufferHandler();
    _onDisconnectProvisional = _makeBufferHandler();
    _onErrorProvisional = _makeBufferHandler();
    _onMsgProvisional = _makeBufferHandler();
    _websocket.onclose = _onDisconnectProvisional;
    _websocket.onerror = _onErrorProvisional;
    _websocket.onmessage = _onMsgProvisional;
    _websocket.onopen = _onConnectProvisional;
  };
  var _initSocketHandlersProvisionalRtmStart = function() {
    TS.info("Initializing provisional MS connection and fetching rtm.start over the socket");
    _did_make_provisional_connection = true;
    var current_websocket = _websocket;
    return new Promise(function(resolve, reject) {
      var _abortRtmStartAttempt = function(err) {
        TS.warn("Giving up on rtm.start-over-MS attempt");
        clearTimeout(rtm_start_timeout);
        rtm_start_timeout = undefined;
        reject(err);
        TS.ms.disconnected_sig.dispatch();
        _did_deprecate_socket_sig.remove(_socketWasDeprecated);
        if (_websocket && _websocket == current_websocket) {
          _deprecateCurrentSocket(4001, "Deprecating socket because we are aborting an rtm start attempt");
        }
      };
      var _socketWasDeprecated = function(recently_deprecated_websocket) {
        if (recently_deprecated_websocket !== current_websocket) {
          TS.warn("Received a call to abort RTM start attempt for a websocket that is not the current websocket, this should not be happening!");
          TS.info("current_websocket defined?", !!current_websocket, "recently_deprecated_socket defined?", !!recently_deprecated_websocket);
        }
        _abortRtmStartAttempt(new Error("Socket was deprecated"));
      };
      _did_deprecate_socket_sig.addOnce(_socketWasDeprecated);
      _startProvisionalConnectionTimeout();
      var rtm_start_timeout = setTimeout(function() {
        TS.warn("Provisional WebSocket timed out");
        _abortRtmStartAttempt(new Error("Waited " + _rtm_start_timeout_tim_ms + " ms for rtm.start response but didn’t get one"));
      }, _rtm_start_timeout_tim_ms);
      _onConnectProvisional = _makeBufferHandler(_maybeResolveOpenWebSocketPromise);
      _onDisconnectProvisional = _makeBufferHandler(function() {
        TS.warn("Provisional WebSocket got disconnected");
        _abortRtmStartAttempt(new Error("WebSocket got disconnected"));
      });
      _onErrorProvisional = _makeBufferHandler(function(e) {
        TS.warn("Provisional WebSocket encountered an error");
        var err = new Error("WebSocket got error");
        err.event = e;
        _abortRtmStartAttempt(err);
      });
      _onMsgProvisional = _makeBufferHandler(function(e) {
        var imsg = JSON.parse(e.data);
        if (imsg.type === "flannel" && imsg.subtype === "user_query_response") {
          if (!imsg.reply_to) {
            TS.error("Received a pre-connection Flannel query response without a reply_to field: " + e.data);
            return;
          } else if (!TS.ms.sent_map[imsg.reply_to.toString()]) {
            TS.error("Received a pre-connection Flannel query response for a query we did not send: " + e.data);
            return;
          }
          var original_sent_msg = _processReplyMessage(imsg);
          if (original_sent_msg && _.isFunction(original_sent_msg.handler)) {
            original_sent_msg.handler(imsg.ok, imsg);
          }
          return false;
        }
        TS.info("Provisional WebSocket received a message of type " + imsg.type);
        if (imsg.type === "hello") {
          clearTimeout(rtm_start_timeout);
          rtm_start_timeout = undefined;
          if (imsg.flannel && imsg.start) {
            var rtm_start_data = imsg.start;
            resolve(rtm_start_data);
            _did_deprecate_socket_sig.remove(_socketWasDeprecated);
          } else {
            _abortRtmStartAttempt(new Error("`hello` imsg did not include rtm.start data"));
          }
        } else if (imsg.type === "error") {
          var imsg_json = JSON.stringify(imsg);
          TS.info('Provisional WebSocket "error" message: ' + imsg_json);
          var err = new Error("WebSocket returned an error: " + imsg_json);
          err.data = {
            error: _.get(imsg, "error.msg")
          };
          _abortRtmStartAttempt(err);
        }
      });
      _websocket.onclose = _onDisconnectProvisional;
      _websocket.onerror = _onErrorProvisional;
      _websocket.onmessage = _onMsgProvisional;
      _websocket.onopen = _onConnectProvisional;
      setTimeout(function() {
        if (_websocket && _websocket.readyState == WebSocket.CLOSED) {
          _abortRtmStartAttempt(new Error("WebSocket already closed; maybe internet is offline?"));
        }
      }, 100);
    }).catch(function(err) {
      TS.logError(err, "rtm-start-over-MS error", "error on rtm start");
      throw err;
    });
  };
  var _initSocketHandlersImmediate = function() {
    _websocket.onopen = _onConnect;
    _websocket.onclose = _onDisconnect;
    _websocket.onerror = _onError;
    _startConnectTimeout();
  };
  var _processReplyMessage = function(imsg) {
    if (!imsg.reply_to) return;
    var sent = TS.ms.sent_map[imsg.reply_to];
    if (!sent) return;
    if (TS.client && TS.client.stats.isEnabled() && sent.msg && sent.msg.type === "message") {
      TS.metrics.measureAndClear("message_server_reply", "user_send_message_" + imsg.reply_to);
    }
    imsg.SENT_MSG = sent.msg;
    delete TS.ms.sent_map[imsg.reply_to];
    return sent;
  };
  var _shouldUseFlannelCanary = function() {
    var canary_pref = _.get(TS, "model.prefs.flannel_server_pool", TS.boot_data.flannel_server_pool);
    if (!TS.boot_data.feature_tinyspeck && !TS.boot_data.feature_flannel_use_canary_sometimes) {
      canary_pref = "production";
    }
    switch (canary_pref) {
      case "canary":
        return true;
      case "random":
        return _.random(0, 1) == 0;
      case "production":
      default:
        return false;
    }
  };
  var _finalizeProvisionalConnection = function() {
    _cancelProvisionalConnectionTimeout();
    if (_did_make_provisional_connection && !_websocket) {
      _did_make_provisional_connection = false;
      TS.warn("Tried to finalize provisional connection while _did_make_provisional_connection flag is true, but there is no _websocket. This is a programming error.");
      return false;
    }
    if (!_did_make_provisional_connection) {
      TS.warn("Tried to finalize provisional connection while _did_make_provisional_connection flag is false. This is a programming error.");
      return false;
    }
    _did_make_provisional_connection = false;
    _handleConnectAfterProvisionalConnection();
    return true;
  };
  var _connect = function(url) {
    if (_websocket && _websocket.readyState == WebSocket.OPEN) {
      TS.warn("TS.ms has an open WebSocket but we are trying to connect; TS.model.ms_connected = " + TS.model.ms_connected + "; TS.model.ms_connecting = " + TS.model.ms_connecting);
      throw new Error("TS.ms.connect called but we are already connected. This is a programming error.");
    }
    var did_create = _createNewSocket(url);
    if (!did_create) {
      throw new Error("Error creating WebSocket for URL " + url);
    }
    TS.model.ms_connecting = true;
  };
  var _maybeResolveOpenWebSocketPromise = function() {
    if (!_open_websocket_p_resolve) return;
    _open_websocket_p_resolve();
    _open_websocket_p = undefined;
    _open_websocket_p_resolve = undefined;
  };
  var _provisional_connection_timeout;
  var _startProvisionalConnectionTimeout = function() {
    _cancelProvisionalConnectionTimeout();
    _provisional_connection_timeout = setTimeout(function() {
      if (_did_make_provisional_connection) {
        TS.warn("Giving up on provisional connection because no one ever finalized it");
        _deprecateCurrentSocket(4002, "Deprecating socket because the provisional connection was never finalized");
      } else {
        TS.warn("Provisional connection timed out, but it does not look like we have a provisional connection");
      }
    }, 3e4);
  };
  var _cancelProvisionalConnectionTimeout = function() {
    if (_provisional_connection_timeout) {
      clearTimeout(_provisional_connection_timeout);
      _provisional_connection_timeout = undefined;
    }
  };
  var _isValidSlackWebSocketUrl = function(url) {
    var hostname = TS.utility.url.getHostName(url);
    return /\.slack-msgs.com$/.test(hostname);
  };
  var _maybeSendDisconnectedMetric = function() {
    if (_disconnected_timestamp) {
      var connected_timestamp = performance.now();
      var disconnected_duration = connected_timestamp - _disconnected_timestamp;
      var label = _last_disconnect_was_requested_by_server ? "ms_reconnect_after_goodbye_duration" : "ms_reconnect_other_duration";
      TS.metrics.store(label, disconnected_duration);
    }
    _disconnected_timestamp = undefined;
    _last_disconnect_was_requested_by_server = undefined;
  };
})();
(function() {
  "use strict";
  TS.registerModule("ms.msg_handlers", {
    onStart: function() {
      _profiling_enabled = window.performance && TS.boot_data && TS.boot_data.feature_ms_msg_handlers_profiling;
      if (TS.client && TS.client.stats) {
        TS.client.stats.start_collecting_sig.add(_profiling.enableStatsCollecting);
        TS.client.stats.stop_collecting_sig.add(_profiling.disableStatsCollecting);
      }
      TS.ms.on_msg_sig.add(TS.ms.msg_handlers.msgReceived);
      _should_record_queue_metrics = TS.boot_data.feature_queue_metrics && TS.client && TS.client.stats.isEnabled() && TS.utility.enableFeatureForUser(_QUEUE_METRICS_PERCENTAGE);
    },
    test: function() {
      var test_ob = {};
      Object.defineProperty(test_ob, "_is_batch_upserting_users", {
        get: function() {
          return _is_batch_upserting_users;
        },
        set: function(v) {
          _is_batch_upserting_users = v;
        }
      });
      return test_ob;
    },
    msgReceivedFromParentWindow: function(imsg) {
      TS.ms.msg_handlers.msgReceived(imsg);
    },
    msgReceived: function(imsg) {
      if (_profiling_enabled) {
        _profiling_total_imsgs_received += 1;
        if (!_profiling_start_time) _profiling_start_time = Date.now();
      }
      if (imsg.reply_to) return;
      if (!TS.ms.msg_handlers[imsg.type]) return;
      _addToQ(imsg);
    },
    message: function(imsg) {
      if (!TS.client) return;
      TS.log(2, "recved message type " + imsg.type);
      if (imsg.is_ephemeral && !imsg.ts) {
        imsg.ts = TS.utility.date.makeTsStamp();
      }
      var profiling_callback;
      var subtype_method_name = "subtype__" + imsg.subtype;
      if (subtype_method_name in TS.ms.msg_handlers) {
        if (TS.boot_data.feature_channel_eventlog_client) {
          if (imsg.subtype === "message_changed" || imsg.subtype === "message_deleted" || imsg.subtype === "channel_history_changed" || imsg.subtype === "group_history_changed" || imsg.subtype === "im_history_changed" || imsg.subtype === "mpim_history_changed" || imsg.subtype === "message_replied") {
            imsg.type = imsg.subtype;
            delete imsg.subtype;
            if (_profiling_enabled) profiling_callback = _profiling.start(imsg.type);
            TS.ms.msg_handlers[imsg.type](imsg);
            if (profiling_callback) profiling_callback();
            return;
          }
          if (imsg.hidden) {
            TS.console.error(2, "WE SHOULD NOT BE GETTING ANY HIDDEN MESSAGES ANYMORE");
            TS.console.dir(2, 0, imsg);
          }
        }
        if (_profiling_enabled) profiling_callback = _profiling.start(subtype_method_name);
        TS.ms.msg_handlers[subtype_method_name](imsg);
        if (profiling_callback) profiling_callback();
      }
      if (_profiling_enabled) profiling_callback = _profiling.start(imsg.type);
      var msg = TS.utility.msgs.processImsg(imsg, imsg.channel);
      if (TS.ims.getImById(imsg.channel)) {
        if (imsg.text === "start_profile_AAAAAA") {
          TS.model.profiling_keys = true;
        } else if (imsg.text === "end_profile_AAAAAA") {
          TS.model.profiling_keys = false;
          if (TS.model.profiling_key_times) {
            TS.files.upload({
              text: JSON.stringify(TS.model.profiling_key_times, null, "	"),
              title: "auto profile",
              filetype: "javascript",
              channels: [imsg.channel],
              initial_comment: ""
            });
            delete TS.model.profiling_key_times;
          }
        }
        TS.ims.addMsg(imsg.channel, msg);
      } else if (TS.mpims.getMpimById(imsg.channel)) {
        TS.mpims.addMsg(imsg.channel, msg);
      } else if (TS.groups.getGroupById(imsg.channel)) {
        TS.groups.addMsg(imsg.channel, msg);
      } else {
        TS.channels.addMsg(imsg.channel, msg);
      }
      var model_ob = TS.shared.getModelObById(imsg.channel);
      var member = TS.members.getMemberById(msg.user);
      if (TS.typing && member && model_ob) TS.typing.memberEnded(model_ob, member);
      if (profiling_callback) profiling_callback();
    },
    subtype__file_share: function(imsg) {
      if (!imsg.file) return;
      if (imsg.file.id == TS.files.polling_file_id) {
        TS.files.uploadProcessingOver(true, imsg.file.id);
      }
    },
    message_changed: function(imsg) {
      TS.log(2, "recved message type " + imsg.type);
      TS.ms.msg_handlers.message_changed_worker(imsg);
    },
    subtype__message_changed: function(imsg) {
      TS.log(2, "recved subtype " + imsg.subtype);
      if (TS.boot_data.feature_channel_eventlog_client) {
        TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + imsg.subtype);
      }
      TS.ms.msg_handlers.message_changed_worker(imsg);
    },
    message_changed_worker: function(imsg) {
      if (!imsg.message) {
        TS.error("no message?");
        return;
      }
      TS.mentions.replaceMsg(imsg.message);
      var model_ob = TS.shared.getModelObById(imsg.channel);
      if (!model_ob) {
        TS.error("unknown imsg.channel:" + imsg.channel);
        return;
      }
      if (TS.pins) {
        TS.pins.replaceMsg(imsg.message, model_ob);
      }
      if (imsg.message.imgs || TS.utility.msgs.hasImgs(imsg.message)) {
        TS.model.show_inline_img_size_pref_reminder = true;
      }
      var might_not_exist = true;
      TS.utility.msgs.replaceMsg(model_ob, imsg.message, might_not_exist);
    },
    message_deleted: function(imsg) {
      TS.log(2, "recved message type " + imsg.type);
      TS.ms.msg_handlers.message_deleted_worker(imsg);
    },
    subtype__message_deleted: function(imsg) {
      TS.log(2, "recved subtype " + imsg.subtype);
      if (TS.boot_data.feature_channel_eventlog_client) {
        TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + imsg.subtype);
      }
      TS.ms.msg_handlers.message_deleted_worker(imsg);
    },
    message_deleted_worker: function(imsg) {
      if (!imsg.deleted_ts) {
        TS.error("no deleted_ts?");
        return;
      }
      TS.mentions.removeMsg(imsg.deleted_ts);
      var channel = TS.channels.getChannelById(imsg.channel);
      var im;
      var group;
      var mpim;
      if (!channel) im = TS.ims.getImById(imsg.channel);
      if (!channel && !im) mpim = TS.mpims.getMpimById(imsg.channel);
      if (!channel && !im && !mpim) group = TS.groups.getGroupById(imsg.channel);
      if (!im && !channel && !mpim && !group) {
        TS.error("unknown imsg.channel:" + imsg.channel);
        return;
      }
      var model_ob = im || channel || mpim || group;
      if (model_ob) TS.utility.msgs.maybeRemoveFromMergeOnHistoryQueue(model_ob, imsg);
      if (TS.pins) {
        TS.pins.removeMsg(imsg.deleted_ts, model_ob);
      }
      var original_msg = TS.utility.msgs.getMsg(imsg.deleted_ts, model_ob.msgs);
      if (!original_msg && model_ob._archive_msgs) {
        original_msg = TS.utility.msgs.getMsg(imsg.deleted_ts, model_ob._archive_msgs);
      }
      if (!original_msg) {
        original_msg = TS.client.unread.getMessage(model_ob, imsg.deleted_ts);
      }
      if (!original_msg) {
        original_msg = TS.ui.replies.getActiveMessage(model_ob, imsg.deleted_ts);
      }
      if (!original_msg) {
        original_msg = TS.client.threads.getMessage(model_ob, imsg.deleted_ts);
      }
      if (!original_msg) {
        return;
      }
      if (im) {
        TS.ims.removeMsg(model_ob.id, original_msg);
      } else if (channel) {
        TS.channels.removeMsg(model_ob.id, original_msg);
      } else if (mpim) {
        TS.mpims.removeMsg(model_ob.id, original_msg);
      } else if (group) {
        TS.groups.removeMsg(model_ob.id, original_msg);
      }
    },
    subtype__sh_room_created: function(imsg) {
      if (!imsg.room) return;
      TS.dir(441, imsg);
    },
    subtype__sh_room_shared: function(imsg) {
      if (!imsg.room) return;
      TS.dir(441, imsg);
    },
    channel_left: function(imsg) {
      TS.info("You left channel " + imsg.channel);
      var channel = TS.channels.getChannelById(imsg.channel);
      if (!channel) {
        TS.error('unknown channel: "' + imsg.channel);
        return;
      }
      channel.is_member = false;
      if (TS.model.active_channel_id == imsg.channel && !channel.was_archived_this_session) {
        if (TS.client) TS.client.activeChannelDisplayGoneAway();
      }
      TS.channels.calcUnreadCnts(channel, true);
      TS.members.invalidateMembersUserCanSeeArrayCaches();
      TS.channels.left_sig.dispatch(channel);
    },
    member_left_channel: function(imsg) {
      var channel;
      var user_id = imsg.user;
      if (imsg.channel_type === "C") {
        channel = TS.channels.getChannelById(imsg.channel);
        if (channel) {
          if (!channel.is_member) {
            TS.info(user_id + " left channel " + imsg.channel + " but we are not a member; ignoring");
            return;
          }
          TS.info(user_id + " left channel " + imsg.channel);
          imsg.no_display = TS.utility.msgs.shouldHideChannelJoinOrLeaveMsg(imsg, channel);
          var should_display_join_message = !imsg.no_display;
          var is_member = false;
          var membership_did_change = TS.membership.setUserChannelMembership(user_id, channel, is_member);
          if (membership_did_change) TS.membership.notifyChannelMembershipChanged(user_id, channel, is_member, should_display_join_message);
        }
      } else if (imsg.channel_type === "G") {
        channel = TS.groups.getGroupById(imsg.channel);
        if (channel) {
          var member = TS.members.getMemberById(user_id);
          if (!member) {
            TS.error('unknown member: "' + user_id + '"');
            return;
          }
          TS.info(member.id + " left group " + imsg.channel);
          for (var i = 0; i < channel.members.length; i += 1) {
            if (channel.members[i] == member.id) {
              channel.members.splice(i, 1);
              TS.groups.calcActiveMembersForGroup(channel);
              break;
            }
          }
          TS.members.invalidateMembersUserCanSeeArrayCaches();
          TS.groups.member_left_sig.dispatch(channel, member);
        }
      }
    },
    channel_joined: function(imsg) {
      TS.info("You joined channel " + imsg.channel.id);
      var channel = TS.channels.upsertChannel(imsg.channel);
      TS.members.invalidateMembersUserCanSeeArrayCaches();
      TS.channels.joined_sig.dispatch(channel);
    },
    channel_created: function(imsg) {
      if (TS.model.user.is_restricted) return;
      TS.info("created channel " + imsg.channel.id);
      var channel = TS.channels.upsertChannel(imsg.channel);
      TS.channels.created_sig.dispatch(channel);
    },
    channel_converted_to_shared: function(imsg) {
      if (!imsg.channel || !imsg.channel.id) {
        TS.error("No channel info sent");
        return;
      }
      var channel = TS.channels.getChannelById(imsg.channel.id);
      if (!channel) {
        TS.error('unknown channel: "' + imsg.channel.id);
        return;
      }
      if (_.isUndefined(imsg.channel.is_member)) imsg.channel.is_member = false;
      imsg.channel.is_member = false;
      if (channel.is_member) imsg.channel.is_member = true;
      TS.channels.upsertChannel(imsg.channel);
      if (channel._name_lc !== _.toLower(imsg.channel.name)) TS.channels.channelRenamed(imsg.channel);
      if (TS.client) TS.client.channel_pane.rebuild("channels");
      var current_ob = TS.shared.getActiveModelOb();
      if (current_ob.id === channel.id) {
        TS.channels.converted_to_shared_sig.dispatch(channel);
      }
    },
    group_converted_to_shared: function(imsg) {
      if (!imsg.group || !imsg.group.id) {
        TS.error("No group info sent");
        return;
      }
      var group = TS.groups.getGroupById(imsg.group.id);
      if (!group) {
        TS.error('unknown group: "' + imsg.group.id);
        return;
      }
      if (group.is_member) imsg.group.is_member = true;
      TS.groups.upsertGroup(imsg.group);
      if (TS.client) TS.client.channel_pane.rebuild("channels");
      var current_ob = TS.shared.getActiveModelOb();
      if (current_ob.id === group.id) {
        TS.groups.converted_to_shared_sig.dispatch(group);
      }
    },
    teams_joined_shared_channel: function(imsg) {
      if (!TS.boot_data.page_needs_enterprise) {
        TS.error("shared channel event sent to non-enterprise team:" + imsg.channel);
        return;
      }
      var channel = TS.channels.getChannelById(imsg.channel);
      if (!channel) channel = TS.groups.getGroupById(imsg.channel);
      if (!channel) {
        TS.error('unknown channel or group: "' + imsg.channel);
        return;
      }
      if (!channel.is_shared) {
        TS.error("shared channel event sent for non-shared channel:" + imsg.channel);
        return;
      }
      if (imsg.is_global_shared) {
        channel.is_global_shared = imsg.is_global_shared;
        if (channel.is_group) {
          TS.groups.upsertGroup(channel);
        } else {
          TS.channels.upsertChannel(channel);
        }
      } else {
        TS.enterprise.addTeamsToSharedForChannel(channel, imsg.teams);
      }
      var current_ob = TS.shared.getActiveModelOb();
      if (!current_ob.id === channel.id) return;
      if (channel.is_group) {
        TS.groups.shared_teams_updated_sig.dispatch(channel);
      } else {
        TS.channels.shared_teams_updated_sig.dispatch(channel);
      }
    },
    teams_left_shared_channel: function(imsg) {
      if (!TS.boot_data.page_needs_enterprise) {
        TS.error("shared channel event sent to non-enterprise team:" + imsg.channel);
        return;
      }
      var channel = TS.channels.getChannelById(imsg.channel);
      if (!channel) channel = TS.groups.getGroupById(imsg.channel);
      if (!channel) {
        TS.error('unknown channel or group: "' + imsg.channel);
        return;
      }
      if (!channel.is_shared) {
        TS.error("shared channel event sent for non-shared channel:" + imsg.channel);
        return;
      }
      TS.enterprise.updateSharesForChannel(channel, imsg.teams);
      var current_ob = TS.shared.getActiveModelOb();
      if (!current_ob.id === channel.id) return;
      if (channel.is_group) {
        TS.groups.shared_teams_updated_sig.dispatch(channel);
      } else {
        TS.channels.shared_teams_updated_sig.dispatch(channel);
      }
    },
    enterprise_rename: function(imsg) {
      TS.model.enterprise.name = imsg.name;
      var $slack_menu = $(".team_menu.slack_menu");
      $slack_menu.find(".slack_menu_header .current_team_name").text(TS.model.enterprise.name);
      $slack_menu.find(".menu_list .enterprise_logout_url a strong").text(TS.model.enterprise.name);
      $(".enterprise-name").text(TS.model.enterprise.name);
    },
    enterprise_team_added: function(imsg) {
      if (!imsg.team || !TS.boot_data.page_needs_enterprise) return;
      TS.enterprise.upsertEnterpriseTeam(imsg.team);
    },
    channel_deleted: function(imsg) {
      var channel = TS.channels.getChannelById(imsg.channel);
      if (!channel) {
        TS.error('unknown channel: "' + imsg.channel);
        return;
      }
      TS.info("deleted channel " + imsg.channel);
      TS.channels.removeChannel(channel);
    },
    channel_archive: function(imsg) {
      var channel = TS.channels.getChannelById(imsg.channel);
      if (!channel) {
        TS.error('unknown channel: "' + imsg.channel);
        return;
      }
      if (channel.is_archived) {
        return;
      }
      TS.info("archived channel " + imsg.channel);
      channel.is_archived = true;
      if (imsg.is_moved) {
        channel.is_moved = imsg.is_moved === 1;
      }
      if (!TS.model.user.is_restricted) {
        if (channel.is_member) {
          channel.was_archived_this_session = true;
        }
      }
      TS.channels.archived_sig.dispatch(channel);
    },
    channel_unarchive: function(imsg) {
      var channel = TS.channels.getChannelById(imsg.channel);
      if (!channel) {
        TS.error('unknown channel: "' + imsg.channel);
        return;
      }
      if (!channel.is_archived) {
        return;
      }
      TS.info("unarchived channel " + imsg.channel);
      if (channel.was_archived_this_session) {
        var in_background = true;
        TS.channels.join(channel.name, null, {
          in_background: in_background
        });
      }
      if (imsg.is_moved) {
        channel.is_moved = imsg.is_moved === 1;
      }
      channel.is_archived = false;
      channel.was_archived_this_session = false;
      TS.channels.unarchived_sig.dispatch(channel);
    },
    channel_rename: function(imsg) {
      var channel = TS.channels.getChannelById(imsg.channel.id);
      if (!channel) {
        TS.error('unknown channel: "' + imsg.channel);
        return;
      }
      TS.info("renamed channel " + imsg.channel.id);
      TS.channels.channelRenamed(imsg.channel);
    },
    member_joined_channel: function(imsg) {
      var channel;
      var user_id = imsg.user;
      if (imsg.channel_type === "C") {
        channel = TS.channels.getChannelById(imsg.channel);
        if (channel) {
          if (!channel.is_member) {
            TS.info(user_id + " joined channel " + imsg.channel + " but we are not a member; ignoring");
            return;
          }
          TS.info(user_id + " joined channel " + imsg.channel);
          if (user_id == TS.model.user.id && imsg.inviter) {
            channel.needs_invited_message = true;
            channel.inviter = imsg.inviter;
          }
          imsg.no_display = TS.utility.msgs.shouldHideChannelJoinOrLeaveMsg(imsg, channel);
          var should_display_join_message = !imsg.no_display;
          var is_member = true;
          var membership_did_change = TS.membership.setUserChannelMembership(user_id, channel, is_member);
          if (membership_did_change) TS.membership.notifyChannelMembershipChanged(user_id, channel, is_member, should_display_join_message);
        }
      } else if (imsg.channel_type === "G") {
        channel = TS.groups.getGroupById(imsg.channel);
        if (channel) {
          var member = TS.members.getMemberById(user_id);
          if (!member) {
            TS.error('unknown member: "' + user_id + '"');
            return;
          }
          if (imsg.is_mpim) return;
          TS.info(member.id + " joined group " + imsg.channel);
          var existing_member_id;
          for (var i = 0; i < channel.members.length; i += 1) {
            if (channel.members[i] == member.id) {
              existing_member_id = channel.members[i];
              break;
            }
          }
          if (!existing_member_id && channel) {
            channel.members.push(member.id);
            TS.groups.calcActiveMembersForGroup(channel);
          }
          if (member.is_self && imsg.inviter) {
            channel.needs_invited_message = true;
            channel.inviter = imsg.inviter;
          }
          TS.members.invalidateMembersUserCanSeeArrayCaches();
          TS.groups.member_joined_sig.dispatch(channel, member);
        }
      }
    },
    channel_marked: function(imsg) {
      if (!TS.client) return;
      var channel = TS.channels.getChannelById(imsg.channel);
      if (!channel) {
        TS.error('unknown channel: "' + imsg.channel + '"');
        return;
      }
      channel.needs_invited_message = false;
      delete TS.model.last_reads_set_by_client[channel.id + "_" + imsg.ts];
      if (TS.pri && channel.last_read !== imsg.ts) TS.log(141, "channel_marked for " + channel.id + ", " + channel.last_read + " -> " + imsg.ts);
      TS.channels.setLastRead(channel, imsg.ts);
    },
    subtype__channel_topic: function(imsg) {
      var channel = TS.channels.getChannelById(imsg.channel);
      if (!channel) {
        TS.error('unknown channel: "' + imsg.channel + '"');
        return;
      }
      var user_id = imsg.user;
      var member = TS.members.getMemberById(user_id);
      if (!member) {
        TS.error('unknown member: "' + user_id + '"');
        return;
      }
      TS.info(member.id + " changed topic for channel " + imsg.channel);
      TS.channels.topicChanged(channel, member.id, imsg.ts, imsg.topic);
    },
    subtype__channel_purpose: function(imsg) {
      var channel = TS.channels.getChannelById(imsg.channel);
      if (!channel) {
        TS.error('unknown channel: "' + imsg.channel + '"');
        return;
      }
      var user_id = imsg.user;
      var member = TS.members.getMemberById(user_id);
      if (!member) {
        TS.error('unknown member: "' + user_id + '"');
        return;
      }
      TS.info(member.id + " changed purpose for channel " + imsg.channel);
      TS.channels.purposeChanged(channel, member.id, imsg.ts, imsg.purpose);
    },
    channel_history_changed: function(imsg) {
      TS.ms.msg_handlers.channel_history_changed_worker(imsg);
    },
    subtype__channel_history_changed: function(imsg) {
      if (TS.boot_data.feature_channel_eventlog_client) {
        TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + imsg.subtype);
      }
      TS.ms.msg_handlers.channel_history_changed_worker(imsg);
    },
    channel_history_changed_worker: function(imsg) {
      TS.info("channel_history_changed for " + imsg.channel);
      return _sharedHistoryChangedWorker(imsg, TS.channels);
    },
    mpim_joined: function(imsg) {
      var existing_mpim = TS.mpims.getMpimById(imsg.channel.id);
      if (existing_mpim) {
        return;
      }
      var mpim = TS.mpims.upsertMpim(imsg.channel);
      TS.members.invalidateMembersUserCanSeeArrayCaches();
      TS.mpims.joined_sig.dispatch(mpim);
      if (TS.client) TS.shared.checkInitialMsgHistory(mpim, TS.mpims);
    },
    subtype__mpim_join: function(imsg) {
      var user_id = imsg.user;
      var member = TS.members.getMemberById(user_id);
      if (!member) {
        TS.error('unknown member: "' + user_id + '"');
        return;
      }
      TS.info(member.id + " joined mpim " + imsg.channel);
    },
    mpim_open: function(imsg) {
      var mpim = TS.mpims.getMpimById(imsg.channel);
      if (!mpim) {
        TS.error("unknown mpim! " + imsg.channel);
        return;
      }
      mpim.is_open = true;
      if (TS.model.requested_mpim_opens[imsg.channel]) {
        TS.mpims.displayMpim({
          id: mpim.id,
          and_send_txt: TS.model.requested_mpim_opens[imsg.channel].and_send_txt
        });
        delete TS.model.requested_mpim_opens[imsg.channel];
      }
      mpim.opened_this_session = true;
      TS.mpims.opened_sig.dispatch(mpim);
      if (TS.client) TS.shared.checkInitialMsgHistory(mpim, TS.mpims);
    },
    mpim_close: function(imsg) {
      var mpim = TS.mpims.getMpimById(imsg.channel);
      if (!mpim) {
        TS.error('unknown mpim: "' + imsg.channel + '"');
        return;
      }
      mpim.is_open = false;
      var converted_to = imsg.converted_to;
      if (converted_to && TS.groups.getGroupById(converted_to)) {
        mpim.latest = null;
        TS.shared.moveLastMsgInput(mpim, TS.groups.getGroupById(converted_to));
      }
      if (TS.model.active_mpim_id == imsg.channel) {
        if (TS.client && converted_to && TS.groups.getGroupById(converted_to)) {
          TS.groups.displayGroup({
            id: converted_to
          });
        } else if (TS.client) {
          TS.client.activeChannelDisplayGoneAway();
        }
      }
      TS.mpims.closed_sig.dispatch(mpim);
    },
    mpim_marked: function(imsg) {
      if (!TS.client) return;
      var mpim = TS.mpims.getMpimById(imsg.channel);
      if (!mpim) {
        TS.error('unknown mpim: "' + imsg.channel + '"');
        return;
      }
      mpim.needs_invited_message = false;
      if (TS.pri && mpim.last_read !== imsg.ts) TS.log(141, "mpim_marked for " + mpim.id + ", " + mpim.last_read + " -> " + imsg.ts);
      delete TS.model.last_reads_set_by_client[mpim.id + "_" + imsg.ts];
      TS.mpims.setLastRead(mpim, imsg.ts);
    },
    mpim_history_changed: function(imsg) {
      TS.ms.msg_handlers.mpim_history_changed_worker(imsg);
    },
    subtype__mpim_history_changed: function(imsg) {
      if (TS.boot_data.feature_channel_eventlog_client) {
        TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + imsg.subtype);
      }
      TS.ms.msg_handlers.mpim_history_changed_worker(imsg);
    },
    mpim_history_changed_worker: function(imsg) {
      TS.info("mpim_history_changed for " + imsg.channel);
      return _sharedHistoryChangedWorker(imsg, TS.mpims);
    },
    group_left: function(imsg) {
      TS.info("You left group " + imsg.channel);
      var group = TS.groups.getGroupById(imsg.channel);
      if (!group) {
        TS.error('unknown group: "' + imsg.channel);
        return;
      }
      TS.groups.removeGroup(group);
      TS.members.invalidateMembersUserCanSeeArrayCaches();
      TS.groups.left_sig.dispatch(group);
    },
    group_joined: function(imsg) {
      TS.info("You joined group " + imsg.channel.id);
      if (imsg.channel.is_mpim) return;
      var existing_group = TS.groups.getGroupById(imsg.channel.name);
      if (existing_group) {
        TS.error("should not be getting a group_joined message if we already know about the group: " + imsg.channel.name + " " + imsg.channel.id);
        return;
      }
      var group = TS.groups.upsertGroup(imsg.channel);
      TS.members.invalidateMembersUserCanSeeArrayCaches();
      TS.groups.joined_sig.dispatch(group);
      if (TS.client) TS.shared.checkInitialMsgHistory(group, TS.groups);
    },
    group_deleted: function(imsg) {
      var group = TS.groups.getGroupById(imsg.channel);
      if (!group) {
        TS.error('unknown group: "' + imsg.channel);
        return;
      }
      TS.info("deleted group " + imsg.channel);
      TS.groups.removeGroup(group);
    },
    group_archive: function(imsg) {
      var group = TS.groups.getGroupById(imsg.channel);
      if (!group) {
        TS.error('unknown group: "' + imsg.channel);
        return;
      }
      if (group.is_archived) {
        return;
      }
      TS.info("archived group " + imsg.channel);
      group.is_archived = true;
      if (imsg.is_moved) {
        group.is_moved = imsg.is_moved === 1;
      }
      if (group.is_open) {
        group.was_archived_this_session = true;
      }
      TS.groups.archived_sig.dispatch(group);
    },
    group_unarchive: function(imsg) {
      var group = TS.groups.getGroupById(imsg.channel);
      if (!group) {
        TS.error('unknown group: "' + imsg.channel);
        return;
      }
      if (imsg.is_moved) {
        group.is_moved = imsg.is_moved === 1;
      }
      if (!group.is_archived) {
        return;
      }
      TS.info("unarchived group " + imsg.channel);
      group.is_archived = false;
      group.was_archived_this_session = false;
      TS.groups.unarchived_sig.dispatch(group);
    },
    group_rename: function(imsg) {
      var group = TS.groups.getGroupById(imsg.channel.id);
      if (!group) {
        TS.error('unknown group: "' + imsg.channel.id);
        return;
      }
      TS.info("renamed group " + imsg.channel.id);
      TS.groups.groupRenamed(imsg.channel);
    },
    group_open: function(imsg) {
      if (TS.mpims.getMpimById(imsg.channel)) {
        return TS.ms.msg_handlers.mpim_open(imsg);
      }
      var group = TS.groups.getGroupById(imsg.channel);
      if (!group) {
        TS.error("unknown group! " + imsg.channel);
        return;
      }
      group.is_open = true;
      if (TS.model.requested_group_opens[imsg.channel]) {
        TS.groups.displayGroup({
          id: group.id,
          and_send_txt: TS.model.requested_group_opens[imsg.channel].and_send_txt
        });
        delete TS.model.requested_group_opens[imsg.channel];
      }
      group.opened_this_session = true;
      TS.groups.opened_sig.dispatch(group);
      if (TS.client) TS.shared.checkInitialMsgHistory(group, TS.groups);
    },
    group_marked: function(imsg) {
      if (!TS.client) return;
      if (TS.mpims.getMpimById(imsg.channel)) {
        return TS.ms.msg_handlers.mpim_marked(imsg);
      }
      var group = TS.groups.getGroupById(imsg.channel);
      if (!group) {
        TS.error('unknown group: "' + imsg.channel + '"');
        return;
      }
      group.needs_invited_message = false;
      if (TS.pri && group.last_read !== imsg.ts) TS.log(141, "group_marked for " + group.id + ", " + group.last_read + " -> " + imsg.ts);
      delete TS.model.last_reads_set_by_client[group.id + "_" + imsg.ts];
      TS.groups.setLastRead(group, imsg.ts);
    },
    group_close: function(imsg) {
      if (TS.mpims.getMpimById(imsg.channel)) return;
      var group = TS.groups.getGroupById(imsg.channel);
      if (!group) {
        TS.error('unknown group: "' + imsg.channel + '"');
        return;
      }
      group.is_open = false;
      if (TS.model.active_group_id == imsg.channel) {
        if (TS.client) TS.client.activeChannelDisplayGoneAway();
      }
      TS.groups.closed_sig.dispatch(group);
    },
    subtype__group_topic: function(imsg) {
      var mpim = TS.mpims.getMpimById(imsg.channel);
      if (mpim) return;
      var group = TS.groups.getGroupById(imsg.channel);
      if (!group) {
        TS.error('unknown group: "' + imsg.channel + '"');
        return;
      }
      var user_id = imsg.user;
      var member = TS.members.getMemberById(user_id);
      if (!member) {
        TS.error('unknown member: "' + user_id + '"');
        return;
      }
      TS.info(member.id + " changed topic for group " + imsg.channel + " to " + imsg.topic);
      TS.groups.topicChanged(group, member.id, imsg.ts, imsg.topic);
    },
    subtype__group_purpose: function(imsg) {
      var mpim = TS.mpims.getMpimById(imsg.channel);
      if (mpim) return;
      var group = TS.groups.getGroupById(imsg.channel);
      if (!group) {
        TS.error('unknown group: "' + imsg.channel + '"');
        return;
      }
      var user_id = imsg.user;
      var member = TS.members.getMemberById(user_id);
      if (!member) {
        TS.error('unknown member: "' + user_id + '"');
        return;
      }
      TS.info(member.id + " changed purpose for group " + imsg.channel + " to " + imsg.purpose);
      TS.groups.purposeChanged(group, member.id, imsg.ts, imsg.purpose);
    },
    group_history_changed: function(imsg) {
      TS.ms.msg_handlers.group_history_changed_worker(imsg);
    },
    subtype__group_history_changed: function(imsg) {
      if (TS.boot_data.feature_channel_eventlog_client) {
        TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + imsg.subtype);
      }
      TS.ms.msg_handlers.group_history_changed_worker(imsg);
    },
    group_history_changed_worker: function(imsg) {
      if (imsg.is_mpim) return;
      TS.info("group_history_changed for " + imsg.channel);
      return _sharedHistoryChangedWorker(imsg, TS.groups);
    },
    im_created: function(imsg) {
      var im = TS.ims.getImById(imsg.channel.id);
      if (im) {
        TS.warn("we already have an im for this user: " + imsg.user);
        return;
      }
      TS.ims.upsertIm(imsg.channel);
      im = TS.ims.getImById(imsg.channel.id);
      if (!im) {
        TS.error("error why can we not find this im: " + imsg.channel.id);
        return;
      }
      var member = TS.members.getMemberById(imsg.user);
      if (!member) {
        TS.error('unknown member: "' + imsg.user + '"');
        return;
      }
      TS.members.invalidateMembersUserCanSeeArrayCaches();
      if (im.is_open) {
        if (TS.model.requested_im_opens[member.id]) {
          TS.ims.displayIm(im.id, false, TS.model.requested_im_opens[member.id].and_send_txt);
          delete TS.model.requested_im_opens[member.id];
        }
        TS.ims.opened_sig.dispatch(im);
      }
      im.opened_this_session = true;
    },
    im_open: function(imsg) {
      var im = TS.ims.getImById(imsg.channel);
      if (!im) {
        TS.error("unknown im! " + imsg.channel);
        return;
      }
      im.is_open = true;
      var member = TS.members.getMemberById(imsg.user);
      if (!member) {
        TS.error('unknown member: "' + imsg.user + '"');
        return;
      }
      if (TS.model.requested_im_opens[member.id]) {
        TS.ims.displayIm(im.id, false, TS.model.requested_im_opens[member.id].and_send_txt);
        delete TS.model.requested_im_opens[member.id];
      }
      im.opened_this_session = true;
      TS.ims.opened_sig.dispatch(im);
      if (TS.client) TS.shared.checkInitialMsgHistory(im, TS.ims);
    },
    im_marked: function(imsg) {
      if (!TS.client) return;
      var im = TS.ims.getImById(imsg.channel);
      if (!im) {
        TS.error('unknown im: "' + imsg.channel + '"');
        return;
      }
      if (TS.pri && im.last_read !== imsg.ts) TS.log(141, "im_marked for " + im.id + ", " + im.last_read + " -> " + imsg.ts);
      delete TS.model.last_reads_set_by_client[im.id + "_" + imsg.ts];
      TS.ims.setLastRead(im, imsg.ts);
    },
    im_close: function(imsg) {
      var im = TS.ims.getImById(imsg.channel);
      if (!im) {
        TS.error('unknown im: "' + imsg.channel + '"');
        return;
      }
      if (!im.is_open) return;
      im.is_open = false;
      if (TS.model.active_im_id == imsg.channel) {
        if (TS.client) TS.client.activeChannelDisplayGoneAway();
      }
      TS.ims.closed_sig.dispatch(im);
    },
    im_history_changed: function(imsg) {
      TS.ms.msg_handlers.im_history_changed_worker(imsg);
    },
    subtype__im_history_changed: function(imsg) {
      if (TS.boot_data.feature_channel_eventlog_client) {
        TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + imsg.subtype);
      }
      TS.ms.msg_handlers.im_history_changed_worker(imsg);
    },
    im_history_changed_worker: function(imsg) {
      TS.info("im_history_changed for " + imsg.channel);
      return _sharedHistoryChangedWorker(imsg, TS.ims);
    },
    manual_presence_change: function(imsg) {
      var user = TS.model.user;
      if (imsg.presence !== "away" && imsg.presence !== "active") {
        TS.error('unknown presence: "' + imsg.presence + '"');
        return;
      }
      user.manual_presence = imsg.presence;
      TS.members.presence_changed_sig.dispatch(user);
    },
    presence_change: function(imsg) {
      imsg.team = imsg.team || TS.model.team.id;
      if (imsg.hasOwnProperty("users") && _.isArray(imsg.users)) {
        imsg.users.forEach(function(member_id) {
          _setMemberPresence(member_id, imsg.presence);
        });
      } else {
        _setMemberPresence(imsg.user, imsg.presence);
      }
    },
    status_change: function(imsg) {
      var member = TS.members.getMemberById(imsg.user);
      if (!member) {
        TS.error('unknown member: "' + imsg.user + '"');
        return;
      }
      if (member.status == imsg.status) return;
      member.status = imsg.status;
      TS.members.status_changed_sig.dispatch(member);
    },
    user_can_manage_shared_channels: function(imsg) {
      TS.prefs.updateTeamPrefCanUserManageSharedChannels(imsg);
    },
    pref_change: function(imsg) {
      TS.prefs.onPrefChanged(imsg);
    },
    team_pref_change: function(imsg) {
      TS.prefs.onTeamPrefChanged(imsg);
    },
    user_read_only_channels: function(imsg) {
      TS.channels.read_only.updateList(imsg.channel_ids);
    },
    team_profile_change: function(imsg) {
      TS.team.upsertAndSignal({
        profile: imsg.profile
      });
    },
    team_profile_reorder: function(imsg) {
      TS.team.upsertAndSignal({
        profile: imsg.profile
      });
    },
    team_profile_delete: function(imsg) {
      TS.team.upsertAndSignal({
        profile: imsg.profile
      });
    },
    team_plan_change: function(imsg) {
      TS.team.team_plan_changed_sig.dispatch(imsg);
    },
    file_created: function(imsg) {
      var was_file = TS.files.getFileById(imsg.file.id);
      if (was_file) {
        TS.warn("we already know about this file, which probably means the files.upload response came in before this message (so np) " + imsg.file.id);
      } else {
        TS.files.upsertAndSignal(imsg.file);
      }
    },
    file_public: function(imsg) {
      TS.files.upsertAndSignal(imsg.file);
    },
    file_deleted: function(imsg) {
      var ids = imsg.file_ids || [imsg.file_id];
      ids.forEach(function(file_id) {
        TS.files.removeFile(file_id);
      });
    },
    file_private: function(imsg) {
      TS.files.fetchFileInfo(imsg.file_id);
    },
    file_change: function(imsg) {
      TS.files.upsertAndSignal(imsg.file);
      TS.files.fileWasMaybeRefreshed(imsg.file);
    },
    file_shared: function(imsg) {
      TS.files.upsertAndSignal(imsg.file);
      TS.files.team_file_shared_sig.dispatch(imsg.file);
    },
    file_unshared: function(imsg) {
      TS.files.upsertAndSignal(imsg.file);
    },
    file_comment_added: function(imsg) {
      var was_file = TS.files.getFileById(imsg.file.id);
      if (!was_file) {
        return;
      }
      if (!TS.files.editCommentOnFile(imsg.comment, was_file)) {
        TS.files.addCommentToFile(imsg.comment, was_file);
      }
      TS.files.upsertFile(imsg.file);
    },
    file_comment_edited: function(imsg) {
      var was_file = TS.files.getFileById(imsg.file.id);
      if (!was_file) {
        return;
      }
      TS.files.editCommentOnFile(imsg.comment, was_file);
      TS.files.upsertFile(imsg.file);
    },
    file_comment_deleted: function(imsg) {
      var was_file = TS.files.getFileById(imsg.file.id);
      if (!was_file) {
        return;
      }
      TS.files.deleteCommentOnFile(imsg.comment, was_file);
      TS.files.upsertFile(imsg.file);
    },
    hello: function() {},
    goodbye: function() {
      TS.info("goodbye handler: disconnecting from the MS next time it is convenient");

      function deferredGoodbyeHandler() {
        TS.ms.disconnected_sig.remove(deferredGoodbyeHandler);
        TS.ui.window_focus_changed_sig.remove(deferredGoodbyeHandler);
        if (TS.model.ms_connected) {
          TS.info("goodbye handler: disconnecting now");
          var was_requested_by_server = true;
          TS.ms.disconnect(was_requested_by_server);
        } else {
          TS.info("goodbye handler: got disconnected some other way before we handled the goodbye message");
        }
      }
      if (!TS.model.ui.is_window_focused) {
        deferredGoodbyeHandler();
        return;
      }
      TS.ms.disconnected_sig.addOnce(deferredGoodbyeHandler);
      TS.ui.window_focus_changed_sig.addOnce(deferredGoodbyeHandler);
    },
    team_join: function(imsg) {
      var member = imsg.user;
      TS.info(member.id + " joined the team");
      TS.members.upsertMember(member);
      member = TS.members.getMemberById(member.id);
      if (!member) {
        TS.error("team_join: wtf no member " + member.id + "?");
        return;
      }
      TS.members.joined_team_sig.dispatch(member);
      if (TS.client) TS.view.showProperTeamPaneFiller();
    },
    user_change: function(imsg) {
      var member = TS.members.getMemberById(imsg.user.id);
      var is_synthetic_event_from_flannel = imsg.from_flannel;
      if (!member) {
        if (!is_synthetic_event_from_flannel) {
          TS.log(1989, "Flannel: user_change for member not in model; ignoring");
          return;
        }
        TS.log(1989, "Flannel: user_change for member not in model; will upsert because this looks like a Flannel hint");
      }
      var may_bulk_upsert_this_event = !member && is_synthetic_event_from_flannel;
      if (may_bulk_upsert_this_event && !_is_batch_upserting_users && !TS.members.is_in_bulk_upsert_mode) {
        _is_batch_upserting_users = true;
        TS.members.startBatchUpsert();
      } else if (_is_batch_upserting_users && !may_bulk_upsert_this_event) {
        TS.members.finishBatchUpsert();
        _is_batch_upserting_users = false;
      }
      if (imsg.user && imsg.user.id === TS.model.user.id) {
        if (TS.model.team && TS.model.team.prefs && !TS.model.team.prefs.display_email_addresses && imsg.user.profile && !imsg.user.profile.email) {
          var local_email = member.profile && member.profile.email;
          if (local_email) {
            TS.info("user_change: email hidden via team pref. appending email from model for local user, so it is not lost in upsert.");
            imsg.user.profile.email = local_email;
          }
        }
      }
      if (TS.boot_data.feature_skip_member_upserts_if_not_updated && is_synthetic_event_from_flannel) {
        imsg.user._is_synthetic_event_from_flannel = true;
      }
      TS.members.upsertAndSignal(imsg.user);
    },
    star_added: function(imsg) {
      if (!imsg.item) {
        TS.error(imsg.type + " has no item");
        return;
      }
      var member = TS.members.getMemberById(imsg.user);
      if (!member) {
        TS.error('unknown member: "' + imsg.user + '"');
        return;
      }
      if (!member.is_self) return;
      TS.stars.userStarStatusHasChanged(true, imsg.item, imsg.type);
      TS.stars.maybeUpdateUserStarredList({
        delta: 1
      });
    },
    star_removed: function(imsg) {
      if (!imsg.item) {
        TS.error(imsg.type + " has no item");
        return;
      }
      var member = TS.members.getMemberById(imsg.user);
      if (!member) {
        TS.error('unknown member: "' + imsg.user + '"');
        return;
      }
      if (!member.is_self) return;
      TS.stars.userStarStatusHasChanged(false, imsg.item, imsg.type);
      TS.stars.maybeRemoveStarredListItem(imsg.item);
    },
    reaction_added: function(imsg) {
      if (!imsg.item) {
        TS.error(imsg.type + " has no item");
        return;
      }
      TS.rxns.changeRxnsFromIMsg(imsg);
    },
    reaction_removed: function(imsg) {
      if (!imsg.item) {
        TS.error(imsg.type + " has no item");
        return;
      }
      TS.rxns.changeRxnsFromIMsg(imsg);
    },
    email_domain_changed: function(imsg) {
      TS.team.upsertAndSignal({
        email_domain: imsg.email_domain
      });
      if (TS.client) TS.view.showProperTeamPaneFiller();
    },
    team_domain_change: function(imsg) {
      TS.team.upsertAndSignal({
        domain: imsg.domain
      });
      TS.model.last_team_domain = TS.model.team.domain;
      TSSSB.call("teamDomainChanged", imsg.url);
    },
    slack_broadcast: function(imsg) {
      var onGo = null;
      var title = imsg.title || TS.i18n.t("Broadcast message", "msg_handlers")();
      var body = imsg.body || "";
      var body_plus = "";
      var go_button_text = imsg.button || (imsg.reload ? "Reload" : "OK");
      var do_reload = false;
      if (imsg.reload) {
        if (imsg.force_reload) {
          TS.info("reloading because imsg.force_reload");
          do_reload = true;
        } else if (!TS.boot_data.version_ts) {
          TS.info("reloading because we dont have an version_ts");
          do_reload = true;
        } else if (imsg.version_ts === "dev") {
          TS.info("reloading because dev");
          do_reload = true;
        } else if (parseInt(TS.boot_data.version_ts, 10) < parseInt(imsg.version_ts, 10)) {
          TS.info("reloading because " + TS.boot_data.version_ts + " < " + imsg.version_ts);
          do_reload = true;
        }
        if (!do_reload) return;
        onGo = function() {
          if (TS.client) TS.reload();
        };
      }
      if (do_reload) {
        var secs = _.random(10, 20);
        var reload_msg = TS.i18n.t('(You will be auto reloaded in <span id="auto_secs">{secs}</span> seconds.)', "msg_handlers")({
          secs: secs
        });
        body_plus = '<p class="top_margin">' + reload_msg + "</p>";
        setTimeout(function() {
          if (TS.client) TS.reload();
        }, secs * 1e3);
        setInterval(function() {
          secs -= 1;
          if (secs < 1) return;
          $("#auto_secs").text(secs);
        }, 1e3);
      }
      TS.generic_dialog.start({
        title: TS.format.formatNoHighlightsNoSpecials(title),
        body: TS.format.formatNoHighlightsNoSpecials(body) + body_plus,
        go_button_text: go_button_text,
        show_cancel_button: false,
        esc_for_ok: true,
        onGo: onGo
      });
    },
    team_rename: function(imsg) {
      if (imsg.source_team && imsg.source_team !== TS.model.team.id) {
        TS.teams.updateTeamName(imsg);
      } else {
        $("#team_name").text(imsg.name);
        document.title = document.title.replace(TS.model.last_team_name, imsg.name);
        if (TS.ui.growls.original_document_title) {
          TS.ui.growls.original_document_title = TS.ui.growls.original_document_title.replace(TS.model.last_team_name, imsg.name);
        }
        TS.model.team.name = imsg.name;
        TS.model.last_team_name = TS.model.team.name;
        TS.team.team_name_changed_sig.dispatch(TS.model.team);
        TSSSB.call("teamNameChanged", imsg.name);
      }
    },
    team_icon_change: function(imsg) {
      if (!imsg.icon) return;
      if (imsg.source_team && imsg.source_team !== TS.model.team.id) {
        TS.teams.updateTeamIcon(imsg);
      } else {
        TS.model.team.icon = imsg.icon;
        TS.teams.changed_icon_sig.dispatch(TS.model.team);
        if (TS.client) TS.client.updateTeamIcon();
      }
    },
    bot_added: function(imsg) {
      var bot = imsg.bot;
      TS.info(bot.id + " was added");
      TS.bots.upsertBot(bot);
      bot = TS.bots.getBotById(bot.id);
      if (!bot) {
        TS.error("error no bot " + bot.id + "?");
        return;
      }
      TS.bots.added_sig.dispatch(bot);
    },
    bot_changed: function(imsg) {
      var bot = TS.bots.getBotById(imsg.bot.id);
      if (!bot) {
        TS.log(1989, "Flannel: bot_changed for member not in model; upserting");
      }
      TS.bots.upsertAndSignal(imsg.bot);
    },
    bot_removed: function(imsg) {
      var bot = TS.bots.getBotById(imsg.bot.id);
      if (!bot) {
        TS.log(1989, "Flannel: bot_removed for bot not in model; ignoring");
        return;
      }
      TS.bots.upsertAndSignal(imsg.bot);
    },
    error: function() {},
    user_typing: function(imsg) {
      if (!TS.typing) return;
      var member = TS.members.getMemberById(imsg.user);
      if (!member) {
        TS.error("unknown imsg.user:" + imsg.user);
        return;
      }
      var model_ob = TS.shared.getModelObById(imsg.channel);
      if (!model_ob) {
        TS.error("unknown imsg.channel:" + imsg.channel);
        return;
      }
      TS.typing.memberStarted(model_ob, member);
    },
    issue_change: function(imsg) {
      TS.help.onIssueChange(imsg.issue);
    },
    emoji_changed: function(imsg) {
      switch (imsg.subtype) {
        case "add":
          if (!imsg.hasOwnProperty("name") || !imsg.hasOwnProperty("value")) {
            TS.warn("Bad emoji_changed__add event; expected `name` and `value` to be present");
            return;
          }
          TS.emoji.addCustomEmoji(imsg.name, imsg.value, imsg.event_ts);
          break;
        case "remove":
          if (!_.isArray(imsg.names)) {
            TS.warn("Bad emoji_changed__remove event; expected `names` to be an array");
            return;
          }
          imsg.names.forEach(function(name) {
            TS.emoji.removeCustomEmoji(name, imsg.event_ts);
          });
          break;
        default:
          _handleGenericChangeEvent("emoji_changed", imsg.event_ts, function(event_ts) {
            if (event_ts) TS.model.emoji_cache_ts = event_ts;
            TS.emoji.resetUpEmoji();
          });
      }
    },
    commands_changed: function(imsg) {
      if (!imsg.commands_removed && !imsg.commands_updated) {
        _handleGenericChangeEvent("commands_changed", imsg.event_ts, function(event_ts) {
          if (event_ts) TS.model.commands_cache_ts = event_ts;
          TS.cmd_handlers.resetUpCmds();
        });
        return;
      }
      if (_.isArray(imsg.commands_removed)) {
        imsg.commands_removed.forEach(function(command) {
          TS.cmd_handlers.removeCommand(command.name, imsg.event_ts);
        });
      }
      if (_.isArray(imsg.commands_updated)) {
        imsg.commands_updated.forEach(function(command) {
          TS.cmd_handlers.updateCommand(command, imsg.event_ts);
        });
      }
    },
    accounts_changed: function() {
      setTimeout(TS.refreshTeams, 1e3);
    },
    pin_added: function(imsg) {
      var model_ob = TS.shared.getModelObById(imsg.channel_id);
      if (model_ob) {
        TS.pins.pinStatusHasChanged(true, imsg.item, imsg.item.type, model_ob);
        model_ob.has_pins = true;
      }
    },
    pin_removed: function(imsg) {
      var model_ob = TS.shared.getModelObById(imsg.channel_id);
      if (model_ob) {
        TS.pins.pinStatusHasChanged(false, imsg.item, imsg.item.type, model_ob);
        if (imsg.has_pins === false) model_ob.has_pins = false;
      }
    },
    sh_room_join: function(imsg) {
      TS.dir(441, imsg);
      TS.rooms.upsertAndSignal(imsg.room);
    },
    sh_room_leave: function(imsg) {
      TS.dir(441, imsg);
      TS.rooms.upsertAndSignal(imsg.room);
    },
    sh_room_update: function(imsg) {
      TS.dir(441, imsg);
      TS.rooms.upsertAndSignal(imsg.room);
    },
    subteam_updated: function(imsg) {
      TS.user_groups.upsertUserGroupAndSignal(imsg.subteam);
    },
    subteam_members_changed: function(imsg) {
      if (!TS.boot_data.feature_subteam_members_diff) return;
      TS.info("TS.ms.msg_handlers.subteam_members_changed", imsg);
      TS.user_groups.userGroupMembersChanged(imsg);
    },
    subteam_created: function(imsg) {
      TS.user_groups.upsertUserGroupAndSignal(imsg.subteam);
    },
    subteam_deleted: function(imsg) {
      TS.user_groups.removeUserGroupAndSignal(imsg.subteam);
    },
    subteam_self_added: function(imsg) {
      TS.user_groups.upsertSelfUserGroup(imsg.subteam_id);
    },
    subteam_self_removed: function(imsg) {
      TS.user_groups.removeSelfUserGroup(imsg.subteam_id);
    },
    apps_changed: function(imsg) {
      if (imsg.event_ts) TS.model.apps_cache_ts = imsg.event_ts;
      TS.apps.ingestApp(imsg.app);
    },
    dnd_override: function(imsg) {
      TS.dnd.dndOverride(imsg.channel, imsg.timestamp);
    },
    dnd_updated: function(imsg) {
      var member = TS.members.getMemberById(imsg.user);
      if (!member) {
        TS.error('unknown member: "' + imsg.user + '"');
        return;
      }
      TS.dnd.updateUserPropsAndSignal(member.id, imsg.dnd_status);
    },
    dnd_updated_user: function(imsg) {
      var member = TS.members.getMemberById(imsg.user);
      if (!member) {
        TS.error('unknown member: "' + imsg.user + '"');
        return;
      }
      TS.dnd.updateUserPropsAndSignal(member.id, imsg.dnd_status);
    },
    reconnect_url: function(imsg) {
      if (!TS.ms.fast_reconnects_enabled) return;
      var url = imsg.url;
      TS.ms.setReconnectUrl(url);
    },
    message_replied: function(imsg) {
      var message = imsg.message;
      var last_reply_ts;
      if (message && message.replies && message.replies.length) {
        last_reply_ts = _.maxBy(message.replies, "ts").ts;
      }
      var model_ob = TS.shared.getModelObById(imsg.channel);
      if (last_reply_ts && model_ob && model_ob.msgs) {
        var msg = TS.utility.msgs.findMsg(message.ts, model_ob.id);
        if (msg && msg.replies && msg.replies.length) {
          var prev_last_reply = _.maxBy(msg.replies, "ts").ts;
          if (last_reply_ts < prev_last_reply) {
            TS.log(2004, "Not processing older message_replied event, " + last_reply_ts + " < " + prev_last_reply + ", in " + imsg.channel);
            return;
          }
        }
      }
      TS.ms.msg_handlers.message_changed_worker(imsg);
    },
    subtype__message_replied: function(imsg) {
      TS.log(2, "recved subtype " + imsg.subtype);
      if (TS.boot_data.feature_channel_eventlog_client) {
        TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + imsg.subtype);
      }
      TS.ms.msg_handlers.message_changed_worker(imsg);
    },
    thread_subscribed: function(imsg) {
      var subscription = imsg.subscription;
      if (!subscription || subscription.type !== "thread") return;
      if (!subscription.channel || !subscription.thread_ts) return;
      TS.replies.threadSubscribed(subscription.channel, subscription.thread_ts, subscription);
    },
    thread_unsubscribed: function(imsg) {
      var subscription = imsg.subscription;
      if (!subscription || subscription.type !== "thread") return;
      if (!subscription.channel || !subscription.thread_ts) return;
      TS.replies.threadUnsubscribed(subscription.channel, subscription.thread_ts, subscription);
    },
    thread_marked: function(imsg) {
      var subscription = imsg.subscription;
      if (!subscription || subscription.type !== "thread") return;
      if (!subscription.channel || !subscription.thread_ts) return;
      TS.replies.threadMarked(subscription.channel, subscription.thread_ts, subscription.last_read, subscription.unread_count);
    },
    user_added_to_team: function(imsg) {
      TS.info("TS.ms.msg_handlers.user_added_to_team, team_id = " + imsg.team_id);
      if (TS.client) TS.client.user_added_to_team_sig.dispatch(imsg.team_id);
    },
    user_removed_from_team: function(imsg) {
      TS.info("TS.ms.msg_handlers.user_removed_from_team, team_id = " + imsg.team_id);
      if (TS.client) TS.client.user_removed_from_team_sig.dispatch(imsg.team_id);
    },
    update_thread_state: function(imsg) {
      if (!TS.client) return;
      TS.client.threads.updateThreadState(imsg.has_unreads, imsg.mention_count, imsg.timestamp);
    },
    shared_invite_code_created: function() {
      if (!TS.client) return;
      TS.ui.shared_invites_modal.updateCode();
    },
    shared_invite_code_disabled: function() {
      if (!TS.client) return;
      TS.ui.shared_invites_modal.updateCode();
    }
  });
  var _MAX_PROCESSING_TIME_MS = 10;
  var _QUEUE_METRICS_PERCENTAGE = 5;
  var _sync_processing;
  var _should_record_queue_metrics;
  var _msg_id = 0;
  var _is_batch_upserting_users = false;
  var _isFileMsgRelevant = function(imsg, file_id) {
    if (!file_id) return false;
    if (TS.web && TS.web.space && !TS.web.space.isFileRelevant(file_id)) return false;
    if (imsg.type === "file_created" && imsg.user_id == TS.model.user.id) return true;
    return !!TS.files.getFileById(file_id);
  };
  var _findFileObAndId = function(imsg) {
    var ignored_types_for_ensure_file = ["message", "file_deleted", "file_private"];
    if (_.includes(ignored_types_for_ensure_file, imsg.type)) return false;
    if (imsg._file_attached) return false;
    var ob_with_file = imsg;
    var file_id = imsg.file && imsg.file.id || imsg.file_id;
    if (!file_id && imsg.item) {
      file_id = imsg.item.file && imsg.item.file.id || imsg.item.file_id;
      if (file_id) ob_with_file = imsg.item;
    }
    if (!file_id) return false;
    return {
      ob_with_file: ob_with_file,
      file_id: file_id
    };
  };
  var _Q = [];
  var _q_grew_from_event_log = false;
  var _debouncedQueueMetrics = function() {
    var delay = 500;
    var options = {
      trailing: true
    };
    return _.debounce(function(metrics_label, q_length) {
      TS.log(2, "TS.metrics: " + metrics_label + ", Q length = " + q_length);
      TS.metrics.store(metrics_label, q_length, {
        is_count: true
      });
    }, delay, options);
  }();
  var _addToQ = function(imsg) {
    if (imsg._from_evt_log) _q_grew_from_event_log = true;
    imsg._enqueued_at = performance.now();
    _Q.push(imsg);
    if (_should_record_queue_metrics) {
      _msg_id += 1;
      imsg._id = _msg_id;
      TS.metrics.mark("ms_event_queue_add_" + _msg_id);
    }
    if (_Q.length == 1) {
      _nextFromQ();
    } else {
      TS.log(2, imsg.type + " is Qed and not being handled immediately _Q.length:" + _Q.length);
      if (!TS.client || !TS.client.stats.isEnabled()) return;
      if (_q_grew_from_event_log) {
        if (_Q.length > 100) _debouncedQueueMetrics("ms_event_from_log_q", _Q.length);
      } else if (_Q.length > 10) {
        _debouncedQueueMetrics("ms_event_q", _Q.length);
      }
    }
  };
  var _nextFromQ = function() {
    if (!_Q.length) return;
    if (TS.boot_data.feature_async_queue && !_sync_processing) _sync_processing = performance.now();
    if (_should_record_queue_metrics) TS.metrics.mark("ms_event_processing");
    var next_imsg = _Q[0];
    if (next_imsg._enqueued_at && TS.client && TS.client.stats.isEnabled()) {
      var time_to_handle = performance.now() - next_imsg._enqueued_at;
      TS.metrics.store("ms_time_in_queue", time_to_handle, {
        allow_zero: true
      });
      delete next_imsg._enqueued_at;
    }
    _ensureFileObjectsOnMsgAndProceed(next_imsg);
  };
  var _ensureFileObjectsOnMsgAndProceed = function(imsg) {
    var ob_with_file;
    var file_id;
    if (TS.boot_data.feature_dedupe_files_info_requests) {
      var file_ob_and_id = _findFileObAndId(imsg);
      if (!file_ob_and_id) return _ensureModelObsAndMembersAndProceed(imsg);
      ob_with_file = file_ob_and_id.ob_with_file;
      file_id = file_ob_and_id.file_id;
    } else {
      if (imsg.type === "message") return _ensureModelObsAndMembersAndProceed(imsg);
      ob_with_file = imsg;
      file_id = imsg.file && imsg.file.id || imsg.file_id;
      if (!file_id && imsg.item) {
        file_id = imsg.item.file && imsg.item.file.id || imsg.item.file_id;
        if (file_id) ob_with_file = imsg.item;
      }
      if (!file_id) return _ensureModelObsAndMembersAndProceed(imsg);
      if (imsg.type === "file_deleted") return _ensureModelObsAndMembersAndProceed(imsg);
      if (imsg.type === "file_private") return _ensureModelObsAndMembersAndProceed(imsg);
    }
    if (!_isFileMsgRelevant(imsg, file_id)) {
      TS.maybeWarn(552, imsg.type + " referenced an irrelevant file: " + file_id);
      return Promise.resolve().then(function() {
        return _afterMsgHandled();
      });
    }
    TS.dir(552, imsg, imsg.type + " -> _ensureFileObjectsOnMsgAndProceed()");
    if (!file_id) {
      TS.maybeWarn(552, imsg.type + " referenced a relevant file but there is no file_id");
      return _ensureModelObsAndMembersAndProceed(imsg);
    }
    TS.log(552, imsg.type + " referenced a relevant file and we have to look it up via the API: " + file_id);
    if (TS.boot_data.feature_dedupe_files_info_requests && _Q.length > 1) {
      _maybeFetchMultipleFileDefinitions(imsg, file_id, ob_with_file);
    } else {
      _fetchSingleFileDefinition(imsg, file_id, ob_with_file);
    }
  };
  var _fetchSingleFileDefinition = function(imsg, file_id, ob_with_file) {
    TS.files.fetchFileInfoRaw(file_id, function(id, file) {
      if (!file) {
        TS.maybeWarn(552, imsg.type + " file fetch failed (or the file has been deleted)");
        return Promise.resolve().then(function() {
          return _afterMsgHandled();
        });
      }
      ob_with_file.file = file;
      TS.log(552, imsg.type + " now has a file definition");
      if (TS.boot_data.feature_dedupe_files_info_requests) {
        imsg._file_attached = true;
        _.forEach(_Q, function(queued_imsg) {
          var queued_file_ob_and_id = _findFileObAndId(queued_imsg);
          if (queued_file_ob_and_id && queued_file_ob_and_id.file_id === file_id) {
            queued_file_ob_and_id.ob_with_file.file = file;
            queued_imsg._file_attached = true;
            TS.log(552, imsg.type + " now has a file definition (courtesy of a previously queued imsg for " + file_id + ")");
          }
        });
      }
      _ensureModelObsAndMembersAndProceed(imsg);
    });
  };
  var _maybeFetchMultipleFileDefinitions = function(imsg, file_id, ob_with_file) {
    var file_ids = [file_id];
    _.forEach(_Q, function(queued_imsg) {
      if (file_ids.length >= 20) return false;
      var maybe_file_info = _findFileObAndId(queued_imsg);
      if (maybe_file_info && !_.includes(file_ids, maybe_file_info.file_id) && _isFileMsgRelevant(queued_imsg, maybe_file_info.file_id)) {
        file_ids.push(maybe_file_info.file_id);
      }
    });
    if (file_ids.length > 1) {
      var no_upsert = true;
      TS.files.fetchMultipleFiles(file_ids, function(ok, data) {
        var files = data && data.files;
        if (!ok || !_.isArray(files)) {
          TS.maybeWarn(552, imsg.type + " multi-file fetch failed");
          return Promise.resolve().then(function() {
            return _afterMsgHandled();
          });
        }
        var file_map = {};
        _.forEach(files, function(file) {
          file_map[file.id] = file;
        });
        _.forEach(_Q, function(queued_imsg) {
          var queued_file_ob_and_id = _findFileObAndId(queued_imsg);
          if (!queued_file_ob_and_id) return;
          var file = file_map[queued_file_ob_and_id.file_id];
          if (!file) return;
          queued_file_ob_and_id.ob_with_file.file = file;
          queued_imsg._file_attached = true;
          TS.log(552, imsg.type + " now has a file definition (" + queued_file_ob_and_id.file_id + ")");
        });
        if (!file_map[file_id]) {
          _fetchSingleFileDefinition(imsg, file_id, ob_with_file);
        } else {
          _ensureModelObsAndMembersAndProceed(imsg);
        }
      }, no_upsert);
    } else {
      _fetchSingleFileDefinition(imsg, file_id, ob_with_file);
    }
  };
  var _ensureModelObsAndMembersAndProceed = function(imsg) {
    TS.log(2, imsg.type + " is now being handled");
    var ensure_profiling_callback;
    var is_async = true;
    var is_sync = true;
    if (_profiling_enabled) ensure_profiling_callback = _profiling.start(imsg.type);
    var ensureModelObs = function() {
      return TS.shared.ensureModelObsArePresent(missing_c_ids).then(function() {
        return ensureBotsAndMembers();
      }, function(err) {
        if (imsg.channel && typeof imsg.channel === "string" && !TS.shared.getModelObById(imsg.channel)) {
          TS.error(full_type + " could not be handled because imsg.channel could not be fetched. full err: " + err.message);
          TS.log(0, "imsg.ts:" + imsg.ts + ", imsg.channel:" + imsg.channel);
          if (ensure_profiling_callback) ensure_profiling_callback(is_async);
          return _afterMsgHandled();
        }
        TS.maybeWarn(794, full_type + " held some references to model_obs we could not fetch, but we have imsg.channel (or there was no imsg.channel) so we can still proceed");
        TS.log(794, "imsg.ts:" + imsg.ts + ", missing c ids:" + JSON.stringify(missing_c_ids));
        if (missing_m_ids.m_ids.length || missing_b_ids.length) {
          return ensureBotsAndMembers();
        }
        return proceedWithImsg();
      });
    };
    var ensureBotsAndMembers = function() {
      if (missing_b_ids.length) {
        return TS.bots.ensureBotsArePresent(missing_b_ids).then(ensureMembers);
      }
      return ensureMembers();
    };
    var ensureMembers = function() {
      return TS.members.ensureMembersArePresent(missing_m_ids.m_ids, missing_m_ids.c_ids, missing_m_ids.t_ids).then(function() {
        return proceedWithImsg();
      }, function(err) {
        if (imsg.user && typeof imsg.user === "string" && !TS.members.getMemberById(imsg.user) || imsg.channel && typeof imsg.channel === "object" && imsg.channel.user && typeof imsg.channel.user === "string" && !TS.members.getMemberById(imsg.channel.user)) {
          TS.error(full_type + " could not be handled because imsg.user or imsg.channel.user could not be fetched. full err: " + err.message);
          TS.log(0, "imsg.ts:" + imsg.ts + ", imsg.user:" + imsg.user + ", imsg.channel.user:" + imsg.channel && imsg.channel.user);
          if (ensure_profiling_callback) ensure_profiling_callback(is_async);
          return _afterMsgHandled();
        }
        TS.maybeWarn(794, full_type + " held some references to members we could not fetch, but we have imsg.user and imsg.channel.user (or they did not exist) so we can still proceed");
        TS.log(794, "imsg.ts:" + imsg.ts + ", missing_m_ids:" + JSON.stringify(missing_m_ids));
        return proceedWithImsg();
      });
    };
    var proceedWithImsg = function(synchronous) {
      try {
        _handleMsg(imsg);
      } catch (err) {
        TS.error(full_type + " errored out when being handled, with err: " + err.message, err);
        TS.console.logStackTrace();
      }
      if (TS.boot_data.feature_async_queue && !synchronous) _sync_processing = null;
      if (ensure_profiling_callback) ensure_profiling_callback(is_async);
      return _afterMsgHandled();
    };
    var no_fetch_missing_object_types;
    if (TS.boot_data.feature_tinyspeck || _.get(TS.model, "team.id") === "T02J3DPUE") {
      no_fetch_missing_object_types = ["channel_joined", "dnd_updated", "manual_presence_change", "member_left_channel", "presence_change", "status_change", "subteam_created", "user_removed_from_team", "user_change"];
    } else {
      no_fetch_missing_object_types = ["presence_change"];
    }
    if (no_fetch_missing_object_types.indexOf(imsg.type) >= 0) return proceedWithImsg(is_sync);
    var full_type = "type:" + imsg.type + (imsg.subtype ? " subtype:" + imsg.subtype : "");
    var c_ids = TS.utility.extractAllModelObIds(imsg, full_type);
    var m_ids = TS.utility.extractAllMemberIds(imsg, full_type);
    var b_ids = TS.utility.extractAllBotIds(imsg);
    var missing_c_ids = TS.shared.getModelObIdsNotPresent(c_ids);
    var missing_m_ids = TS.members.getMemberIdsNotPresent(m_ids.m_ids, m_ids.c_ids, m_ids.t_ids);
    var missing_b_ids = _.reject(b_ids, TS.bots.getBotById);
    if (missing_c_ids.length || missing_m_ids.m_ids.length || missing_b_ids.length) {
      if (imsg.type === "user_typing" && _canIgnoreUserTypingEvent(imsg.channel)) return _afterMsgHandled();
    }
    if (missing_c_ids.length) {
      ensureModelObs();
    } else if (missing_m_ids.m_ids.length || missing_b_ids.length) {
      ensureBotsAndMembers();
    } else {
      Promise.resolve().then(function() {
        return proceedWithImsg(is_sync);
      });
    }
  };
  var _canIgnoreUserTypingEvent = function(channel_id) {
    if (channel_id === TS.model.active_cid) return false;
    var model_ob = TS.shared.getModelObById(channel_id);
    if (!model_ob) return true;
    return !model_ob.is_im && !model_ob.is_mpim;
  };
  var _afterMsgHandled = function() {
    if (!_Q.length) return Promise.resolve();
    if (_should_record_queue_metrics) {
      var imsg = _Q.shift();
      TS.metrics.store("ms_event_q_length", _Q.length, {
        is_count: true
      });
      TS.metrics.measureAndClear("ms_event_duration", "ms_event_processing");
      TS.metrics.measureAndClear("ms_event_and_queue_duration", "ms_event_queue_add_" + imsg._id);
    } else {
      _Q.shift();
    }
    if (!_Q.length) _q_grew_from_event_log = false;
    if (_waitAFrame()) {
      return new Promise(function(resolve) {
        TS.utility.rAF(function() {
          TS.log(794, "dequeuing too much per frame; need to take a break");
          _sync_processing = null;
          _nextFromQ();
          return resolve();
        });
      });
    }
    _nextFromQ();
    return Promise.resolve();
  };
  var _waitAFrame = function() {
    if (!TS.boot_data.feature_async_queue) return false;
    return _sync_processing && _Q.length && performance.now() - _sync_processing > _MAX_PROCESSING_TIME_MS;
  };
  var _handleMsg = function(imsg) {
    if (_is_batch_upserting_users && imsg.type !== "user_change") {
      TS.members.finishBatchUpsert();
      _is_batch_upserting_users = false;
    }
    TS.ms.msg_handlers[imsg.type](imsg);
    if (TS.client && TS.model.is_our_app) {
      TS.dir(236, imsg, "calling TS.client.windows.distributeMsgToWins");
      TS.client.windows.distributeMsgToWins(imsg);
    }
  };
  var _sharedHistoryChangedWorker = function(imsg, controller) {
    var model_ob = TS.shared.getModelObById(imsg.channel);
    if (!model_ob) {
      TS.error('unknown model_ob: "' + imsg.channel + '"');
      return;
    }
    model_ob.history_changed = true;
    controller.fetchHistory(model_ob, {
      channel: model_ob.id,
      latest: imsg.latest,
      inclusive: true,
      count: _.clamp(model_ob.msgs.length, TS.model.initial_msgs_cnt, 1e3)
    }, function(ok, data, args) {
      if (!ok) {
        TS.error("could not retrieve history for " + model_ob.id);
      } else {
        TS.info("_history_changed: dumping old messages for " + model_ob.id);
        model_ob.is_limited = false;
        TS.utility.msgs.resetOldestMsgsTs(model_ob);
        TS.warn("imsg.latest: " + imsg.latest);
        for (var i = model_ob.msgs.length - 1; i > -1; i -= 1) {
          var msg = model_ob.msgs[i];
          if (msg.ts < imsg.latest) continue;
          data.messages.unshift(msg);
        }
        model_ob.msgs.length = 0;
      }
      controller.onHistory(ok, data, args);
      if (!model_ob.latest) {
        TS.info("history_changed: latest not set for " + model_ob.id, imsg, model_ob);
        var latest = TS.shared.getLatestMsgTs(model_ob);
        if (!latest) {
          TS.warn("history_changed: could not find latest via TS.shared.getLatestMsgTs(), using live msgs");
          latest = model_ob && model_ob.msgs.length ? model_ob.msgs[model_ob.msgs.length - 1] : null;
        }
        if (!latest) {
          TS.warn("history_changed: still no latest ts for " + model_ob.id + "?", latest);
        } else if (latest) {
          TS.info("history_changed: assigning latest of " + latest + " to model_ob", latest, model_ob);
          model_ob.latest = latest;
        }
      }
      delete model_ob.history_changed;
    });
  };
  var _setMemberPresence = function(member_id, presence) {
    if (presence !== "away" && presence !== "active") {
      TS.error('unknown presence: "' + presence + '"');
      return;
    }
    var member = TS.members.getMemberById(member_id);
    if (!member) {
      return;
    }
    if (member.presence == presence) return;
    if (_.get(member, "profile.always_active")) presence = "active";
    if (member.is_self) {
      member._presence_last_changed = new Date;
    }
    member.presence = presence;
    TS.members.presence_changed_sig.dispatch(member);
  };
  var _pending_events = {};
  var _handleGenericChangeEvent = function(event_name, cache_ts, callback) {
    _pending_events[event_name] = _pending_events[event_name] || {};
    var pending_event = _pending_events[event_name];
    if (cache_ts) pending_event.cache_ts = cache_ts;
    if (pending_event.timer) {
      return;
    }
    var delay = _.random(0, 5e3);
    TS.info("Waiting " + delay + " ms before handling " + event_name + " event");
    pending_event.timer = setTimeout(function() {
      delete _pending_events[event_name];
      callback(pending_event.cache_ts);
    }, delay);
  };
})();
var _profiling_enabled = false;
var _stats_collecting_enabled = false;
var _profiling_default_warn_threshold = 1e3;
var _profiling_report_timer = null;
var _profiling_report_interval = 6e4;
var _profiling_stats = {};
var _profiling_stats_meta = {};
var _profiling_total_imsgs_received = 0;
var _profiling_start_time = 0;
var _profiling = {
  start: function(label, warn_threshold) {
    if (!_stats_collecting_enabled) return;
    warn_threshold = warn_threshold && parseInt(warn_threshold, 10) || _profiling_default_warn_threshold;
    var data = {
      start: performance.now(),
      end: 0
    };
    var finish = function(async) {
      async = !!async;
      data.end = performance.now();
      var elapsed = data.end - data.start;
      if (elapsed > warn_threshold) {
        TS.warn("'" + label + "' msg_handler took " + _.round(elapsed, 2) + "ms" + (warn_threshold !== _profiling_default_warn_threshold ? " (threshold = " + warn_threshold + ")" : ""));
      }
      _profiling.count(label, elapsed, async);
    };
    return finish;
  },
  count: function(label, duration, async) {
    if (!_profiling_stats_meta.start_time) _profiling_stats_meta.start_time = performance.now();
    if (!_profiling_stats[label]) {
      _profiling_stats[label] = {
        call_count: 0,
        elapsed_time: 0,
        async: !!async
      };
    }
    if (async) _profiling_stats[label].async = async;
    _profiling_stats[label].call_count += 1;
    _profiling_stats[label].elapsed_time += duration;
    _profiling.maybeReport();
  },
  report: function() {
    _profiling.finish();
    if (_.size(_profiling_stats)) {
      var calls = _.sum(_.map(_profiling_stats, "call_count"));
      TS.log(808, "🏔️ MS message stats: " + calls + " handler calls in " + parseInt(_profiling_stats_meta.elapsed_time / 1e3, 10) + "s window, " + _profiling_total_imsgs_received + " imsgs since " + new Date(_profiling_start_time), _profiling_stats);
      _profiling.beacon();
    }
    _profiling.reset();
  },
  beacon: function() {
    var prefix = "ms_handler_";
    _.each(_profiling_stats, function(value, key) {
      if (value.async) {
        key = prefix + "async_" + key;
      } else {
        key = prefix + key;
      }
      TS.metrics.count(key + "_count", value.call_count);
      TS.metrics.store(key + "_time", value.elapsed_time);
    });
    TS.metrics.store(prefix + "imsgs_received_total", _profiling_total_imsgs_received, {
      is_count: true
    });
  },
  finish: function() {
    _profiling_stats_meta.end_time = performance.now();
    _profiling_stats_meta.elapsed_time = _profiling_stats_meta.end_time - _profiling_stats_meta.start_time;
  },
  reset: function() {
    _profiling_stats = {};
    _profiling_stats_meta = {};
    _profiling_report_timer = null;
  },
  maybeReport: function() {
    if (_profiling_report_timer) return;
    _profiling_report_timer = window.setTimeout(_profiling.report, _profiling_report_interval);
  },
  enableStatsCollecting: function() {
    TS.log(808, "🏔️ MS message handler stat collecting enabled");
    _stats_collecting_enabled = true;
  },
  disableStatsCollecting: function() {
    TS.log(808, "🏔️ MS message handler stat collecting disabled");
    _stats_collecting_enabled = false;
  }
};
(function() {
  "use strict";
  TS.registerModule("flannel", {
    onStart: function() {
      if (TS.lazyLoadMembersAndBots()) {
        TS.ms.connected_sig.addOnce(_prefetchFrequentlyUsedMembers);
        TS.ms.connected_sig.add(_updatePresenceOnSlowReconnect);
      }
    },
    test: function() {
      var test_ob = {
        _batchUpsertObjects: _batchUpsertObjects,
        _updatePresenceOnSlowReconnect: _updatePresenceOnSlowReconnect
      };
      Object.defineProperty(test_ob, "_batchUpsertObjects", {
        get: function() {
          return _batchUpsertObjects;
        },
        set: function(v) {
          _batchUpsertObjects = v;
        }
      });
      return test_ob;
    },
    fetchAndUpsertObjectsByIds: function(ids) {
      return _fetchAndProcessObjectsByIds(ids, _batchUpsertObjects);
    },
    fetchAndUpsertObjectsWithQuery: function(query, limit) {
      return _fetchAndProcessObjectsWithQuery(query, _batchUpsertObjects, limit);
    },
    fetchAndUpsertAllMembersForModelObDeprecated: function(model_ob) {
      if (_.isUndefined(model_ob.members)) {
        throw new Error("This function can only be used with model objects that have members");
      }
      if (_model_ob_member_fetch_promises[model_ob.id]) return _model_ob_member_fetch_promises[model_ob.id];
      var c_ids = [model_ob.id];
      var t_ids = TS.model.team.id;
      var m_ids = model_ob.members;
      _model_ob_member_fetch_promises[model_ob.id] = TS.members.ensureMembersArePresent(m_ids, c_ids, t_ids).then(function() {
        if (!TS.members.haveAllMembersForModelOb(model_ob)) {
          TS.log(1989, "Flannel: error fetching missing members for channel " + model_ob.id);
          throw new Error("Tried to fetch members for channel but failed to get some");
        }
      }).catch(function() {
        delete _model_ob_member_fetch_promises[model_ob.id];
      });
      return _model_ob_member_fetch_promises[model_ob.id];
    },
    fetchMemberCounts: function() {
      return TS.ms.flannel.call("user_counts_request").then(function(response) {
        return response.counts;
      });
    },
    connectAndFetchRtmStart: function(rtm_start_args) {
      TS.log(1996, "Opening a tokenless MS connection and fetching rtm.start over it");
      var flannel_url = _getFlannelConnectionUrl(rtm_start_args);
      var rtm_start_p = TS.ms.connectProvisionallyAndFetchRtmStart(flannel_url);
      if (!rtm_start_p) {
        throw new Error("TS.ms.connect did not return an rtm.start promise");
      }
      return rtm_start_p.then(function(start_data) {
        var data = start_data.rtm_start;
        delete data.users;
        delete data.updated_users;
        delete data.updated_bots;
        data.bots = [];
        var required_member_ids = _([data.mpims, data.ims]).flatten().map(function(ob) {
          return ob.members || [ob.user];
        }).flatten().concat(_.get(data, "self.id")).concat(_.get(TS.boot_data, "file.user")).uniq().compact().value();
        if (TS.model.ms_logged_in_once && !TS.isPartiallyBooted()) {
          var known_member_ids = _.map(TS.model.members, "id");
          required_member_ids = _.difference(required_member_ids, known_member_ids);
        }
        if (!required_member_ids.length) {
          TS.info("Got rtm.start data and don't need to fetch any members");
          data.users = [];
          return data;
        }
        TS.info("Got rtm.start data but need to fetch " + required_member_ids.length + " members");
        if (TS.shouldLog(1989) || TS.boot_data.feature_tinyspeck) {
          TS.info(required_member_ids.join(", "));
        }
        return _fetchRawObjectsByIds(required_member_ids).then(function(members) {
          TS.info("Got " + members.length + " members for rtm.start :tada:");
          if (required_member_ids.length !== members.length) {
            var missing_member_ids = _.difference(required_member_ids, _.map(members, "id"));
            return _fetchMembersFromAPI(missing_member_ids).then(function(members_from_api) {
              if (members_from_api.length == missing_member_ids.length) {
                TS.warn("TS.flannel.connectAndFetchRtmStart tried to fetch users from Flannel but had to fall back to the API for some users (everything worked out, though). Users: " + missing_member_ids.join(","));
                TS.metrics.count("rtm_start_from_flannel_fallback_to_api_success");
              } else {
                var still_missing_member_ids = _.difference(missing_member_ids, _.map(members_from_api, "id"));
                TS.error("TS.flannel.connectAndFetchRtmStart tried to fetch users from Flannel and from the API and still could not find them. Missing users: " + still_missing_member_ids.join(","));
                TS.metrics.count("rtm_start_from_flannel_fallback_to_api_failure");
              }
              data.users = members.concat(members_from_api);
              return data;
            });
          }
          data.users = members;
          return data;
        }).catch(function(err) {
          TS.error("Got error while trying to fetch " + required_member_ids.length + " members for rtm.start :(", err);
          throw err;
        });
      });
    },
    batchUpsertObjects: function(objects) {
      return _batchUpsertObjects(objects);
    },
    fetchAccessibleUserIdsForGuests: function() {
      if (!TS.model.user.is_restricted) throw new Error("This method is only intended for guests");
      return TS.api.call("channels.guestVisibleMembers").then(function(resp) {
        return resp.data.members;
      });
    },
    fetchChannelMembershipForUsers: function(channel_id, user_ids) {
      if (!_.isString(channel_id)) throw new Error("Expected channel_id to be a string");
      if (!_.isArray(user_ids) || !_.every(user_ids, _.isString)) throw new Error("Expected user_ids to be an array of strings");
      if (_.isEmpty(user_ids)) return Promise.resolve({});
      user_ids = _.uniq(user_ids);
      var membership_info = {};
      var chunks_p = _.chunk(user_ids, _MAX_IDS_PER_QUERY).map(function(chunk_ids) {
        var query = {
          channel: channel_id,
          users: chunk_ids
        };
        var p = TS.ms.flannel.call("membership_query", query).then(function(resp) {
          var member_user_ids = resp.members || [];
          var non_member_user_ids = resp.non_members || [];
          var all_user_ids_from_resp = member_user_ids.concat(non_member_user_ids);
          all_user_ids_from_resp.forEach(function(user_id) {
            membership_info[user_id] = member_user_ids.indexOf(user_id) >= 0;
          });
          return null;
        });
        return p.reflect();
      });
      return Promise.all(chunks_p).then(function() {
        if (Object.keys(membership_info).length !== user_ids.length) {
          var all_user_ids_from_response = Object.keys(membership_info);
          var missing_user_ids = _.difference(user_ids, all_user_ids_from_response);
          throw new Error("Flannel did not return membership status of " + channel_id + " for some users: " + missing_user_ids.join(", "));
        }
        return membership_info;
      });
    },
    fetchMembershipCountsForChannel: function(channel_id) {
      if (!_.isString(channel_id)) throw new Error("Expected channel_id to be a string");
      return TS.ms.flannel.call("user_counts_request", {
        channel: channel_id
      }).then(function(response) {
        return response.counts;
      });
    }
  });
  var _MAX_IDS_PER_QUERY = 100;
  var _MAX_SIMULTANEOUS_CHUNK_FETCHES = 2;
  var _model_ob_member_fetch_promises = {};
  var _fetchAndProcessObjects = function(query, objects, process_fn, limit) {
    return TS.ms.flannel.call("user_query_request", query).then(function(resp) {
      if (_.get(resp, "results.length")) {
        objects = objects.concat(process_fn(resp.results));
        if (limit && (objects.length >= limit || !resp.next_marker)) {
          return {
            objects: objects.slice(0, limit),
            next_marker: objects.length > limit ? objects[limit].id : resp.next_marker
          };
        }
      }
      if (!resp.next_marker || objects.length >= query.count && !limit) {
        TS.log(1989, "Flannel: finished fetching results for query", query);
        return {
          objects: objects.slice(0, query.count),
          next_marker: objects.length > query.count ? objects[query.count].id : resp.next_marker
        };
      }
      query.marker = resp.next_marker;
      TS.log(1989, "Flannel: fetching next page for query", query);
      return _fetchAndProcessObjects(query, objects, process_fn, limit);
    });
  };
  var _batchUpsertObjects = function(objects) {
    TS.log(1989, "Flannel: upserting batch of " + objects.length + " objects");
    var is_upserting_bots = _.some(objects, _isBot);
    if (is_upserting_bots) TS.bots.startBatchUpsert();
    var is_upserting_members = _.some(objects, TS.utility.members.isMember);
    if (is_upserting_members) TS.members.startBatchUpsert();
    var upserted_objects;
    try {
      upserted_objects = _(objects).map(_upsertObject).compact().value();
    } finally {
      if (is_upserting_bots) TS.bots.finishBatchUpsert();
      if (is_upserting_members) TS.members.finishBatchUpsert();
    }
    return upserted_objects;
  };
  var _upsertObject = function(ob) {
    if (_isBot(ob)) {
      TS.log(1989, "Flannel: upserting bot " + ob.id + " from query results");
      return TS.bots.upsertAndSignal(ob).bot;
    } else if (TS.utility.members.isMember(ob)) {
      TS.log(1989, "Flannel: upserting user " + ob.id + " from query results");
      return TS.members.upsertAndSignal(ob).member;
    }
  };
  var _isBot = function(ob) {
    var ob_type = _.get(ob, "id[0]");
    return ob_type === "B";
  };
  var _prefetchFrequentlyUsedMembers = function() {
    var MAX_FRECENCY_PREFETCH_MEMBERS = 100;
    var member_id_prefix = TS.boot_data.page_needs_enterprise ? "W" : "U";
    var known_ids = _.map(TS.model.members, "id");
    var ids = _(TS.ui.frecency.getMostCommonWithPrefix(member_id_prefix, MAX_FRECENCY_PREFETCH_MEMBERS)).map("id").difference(known_ids).value();
    if (!ids.length) return;
    TS.log(1989, "Flannel: pre-fetching " + ids.length + " most frequently accessed members...");
    TS.flannel.fetchAndUpsertObjectsByIds(ids).then(function(members) {
      TS.log(1989, "Flannel: pre-fetched " + members.length + " most frequently accessed members 👍");
    }).catch(_.noop);
  };
  var _fetchAndProcessObjectsByIds = function(ids, process_fn) {
    var chunked_ids = _.chunk(ids, _MAX_IDS_PER_QUERY);
    var object_chunks_p = Promise.map(chunked_ids, function(chunk_ids) {
      return _fetchAndProcessObjectsWithQuery({
        ids: chunk_ids
      }, process_fn).reflect();
    }, {
      concurrency: _MAX_SIMULTANEOUS_CHUNK_FETCHES
    });
    return object_chunks_p.then(function(results) {
      var rejection_reasons = results.filter(function(p) {
        return p.isRejected();
      }).map(function(p) {
        return p.reason();
      });
      if (rejection_reasons.length) {
        var e = new Error("Some Flannel fetches failed");
        e.rejection_reasons = rejection_reasons;
        return Promise.reject(e);
      }
      var members = _(results).map(function(p) {
        return p.value().objects;
      }).flatten().value();
      return Promise.resolve(members);
    });
  };
  var _fetchAndProcessObjectsWithQuery = function(query, process_fn, limit) {
    if (_.isString(query)) {
      query = {
        query: query
      };
    }
    var objects = [];
    return _fetchAndProcessObjects(query, objects, process_fn, limit);
  };
  var _getFlannelConnectionUrl = function(rtm_start_args) {
    return TS.utility.url.setUrlQueryStringValue(TS.boot_data.ms_connect_url, "start_args", TS.utility.url.queryStringEncode(rtm_start_args));
  };
  var _updatePresenceOnSlowReconnect = function(last_connect_was_fast) {
    if (!TS.lazyLoadMembersAndBots()) return;
    if (!!TS.ms.num_times_connected && !last_connect_was_fast) {
      var member_ids_needing_update = _.map(TS.model.members, "id");
      var bot_ids_needing_update = _.map(TS.model.bots, "id");
      TS.flannel.fetchAndUpsertObjectsByIds(member_ids_needing_update.concat(bot_ids_needing_update)).catch(function(err) {
        TS.err("Updating presence after slow reconnect failed for some users", err);
        throw err;
      });
    }
  };
  var _fetchRawObjectsByIds = function(ids) {
    return _fetchAndProcessObjectsByIds(ids, _.identity);
  };
  var _fetchMembersFromAPI = function(ids) {
    var USERS_INFO_MAX_USER_COUNT = 250;
    var all_fetches_p = _.chunk(ids, USERS_INFO_MAX_USER_COUNT).map(function(user_ids) {
      return TS.api.call("users.info", {
        users: user_ids.join(",")
      }).then(function(resp) {
        return resp.data.users;
      }).reflect();
    });
    return Promise.all(all_fetches_p).then(function(results) {
      return _(results).filter(function(p) {
        return p.isFulfilled();
      }).map(function(p) {
        return p.value();
      }).flatten().value();
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("ms.flannel", {
    isFlannelMessage: function(imsg) {
      return imsg.type === "flannel";
    },
    call: function(command_type, args, attempt_number) {
      if (_.isUndefined(attempt_number)) attempt_number = 1;
      if (!_.isNumber(attempt_number) || attempt_number < 1) throw new Error("Invalid value for attempt_number");
      var imsg = {
        type: "flannel",
        subtype: command_type
      };
      if (_.isObject(args)) {
        if (args.hasOwnProperty("type") || args.hasOwnProperty("subtype")) {
          throw new Error("Arguments must not include `type` or `subtype` fields");
        }
        _.merge(imsg, args);
      }
      if (!TS.useSocket()) {
        return Promise.reject(new Error("Flannel queries are not available on this page"));
      }
      if (!TS.ms.hasOpenWebSocket()) {
        TS.log(1989, "Flannel: received a " + command_type + " call while we are not connected; deferring");
        var flannel_args = arguments;
        var requirements = Promise.join(TS.ms.promiseToHaveOpenWebSocket(), TS.api.connection.waitForAPIConnection());
        return requirements.then(function() {
          TS.log(1989, "Flannel: connected! Continuing deferred " + command_type + " call");
          return TS.ms.flannel.call.apply(this, flannel_args);
        }.bind(this));
      }
      return new Promise(function(resolve, reject) {
        var lostConnectionReject = function() {
          if (attempt_number < MAX_RETRY_COUNT) {
            TS.log(1989, "Flannel: retrying " + command_type + " call; attempt #" + attempt_number + " of " + MAX_RETRY_COUNT);
            return TS.ms.flannel.call(command_type, args, attempt_number + 1).then(resolve).catch(reject);
          }
          TS.log(1989, "Flannel: giving up on " + command_type + " call");
          reject(new Error("Lost Flannel connection"));
        };
        TS.ms.disconnected_sig.addOnce(lostConnectionReject);
        TS.ms.send(imsg, function(ok, imsg) {
          TS.ms.disconnected_sig.remove(lostConnectionReject);
          if (ok) {
            Promise.delay(0).then(function() {
              resolve(imsg);
            });
          } else {
            var e = new Error("Flannel call failed");
            e.imsg = imsg;
            reject(e);
          }
        });
      });
    }
  });
  var MAX_RETRY_COUNT = 3;
})();
(function() {
  "use strict";
  TS.registerModule("ds", {
    last_pong_time: 0,
    sent_map: {},
    connected_sig: new signals.Signal,
    disconnected_sig: new signals.Signal,
    trouble_sig: new signals.Signal,
    reconnecting_sig: new signals.Signal,
    pong_sig: new signals.Signal,
    on_msg_sig: new signals.Signal,
    reconnect_requested_sig: new signals.Signal,
    onStart: function() {
      _setPongTimeoutMs(TS.model.ui.is_window_focused || false);
      TS.ui.window_focus_changed_sig.add(_setPongTimeoutMs);
      setInterval(function() {
        if (!TS.model.ds_connected) return;
        if (TS.model.rtd_start_throttler < 1) return;
        TS.model.rtd_start_throttler -= 1;
      }, 1e3 * 60);
    },
    send: function(msg, handler, temp_ts) {
      _msg_id += 1;
      msg.id = _msg_id;
      TS.ds.sent_map[msg.id.toString()] = {
        msg: msg,
        handler: handler,
        ts: Date.now(),
        temp_ts: temp_ts
      };
      if (msg.type === "ping" || msg.type === "pong") {
        TS.log(2, "DS TS.ds ping -->\n" + JSON.stringify(msg, null, "  "));
      } else {
        TS.model.last_net_send = Date.now();
        TS.log(2, "TS.ds -->\n" + JSON.stringify(msg, null, "  "));
      }
      if (_websocket && TS.model.ds_connected) {
        _websocket.send(JSON.stringify(msg));
      } else {
        TS.ds.Q.push(msg);
      }
      return msg.id;
    },
    Q: [],
    sendTyping: function(c_id) {
      var msg_str = '{"type":"typing", "channel":"' + c_id + '"}';
      _websocket.send(msg_str);
    },
    handleMsg: function(imsg) {
      var is_reconnect_reply = imsg.reply_to && !("ok" in imsg) && imsg.type === "message";
      var sent;
      if (imsg.reply_to) {
        if (imsg.reply_to.toString() in TS.ds.sent_map) {
          sent = TS.ds.sent_map[imsg.reply_to];
          imsg.SENT_MSG = sent.msg;
          delete TS.ds.sent_map[imsg.reply_to];
        } else if (!is_reconnect_reply) {
          TS.error('received msg "' + imsg.reply_to + '" with type "' + imsg.type + '" but we have no record of it in sent_map');
        }
      }
      if (imsg.type === "ping" || imsg.type === "pong") {
        TS.log(2, "DS msg " + imsg.type + " time: " + (Date.now() - sent.ts) + "ms");
        TS.log(2, "DS TS.ds ping <--\n" + JSON.stringify(imsg, null, "  "));
        TS.ds.last_pong_time = Date.now();
        TS.ds.pong_sig.dispatch();
        _check_last_pong_time = false;
      } else {
        if (sent) {
          var type = imsg.type || imsg.SENT_MSG.type || "";
          TS.log(2, "msg " + (type ? '"' + type + '" ' : "") + "rsp time " + (Date.now() - sent.ts) + "ms");
        }
        TS.log(2, "TS.ds <-- \n" + JSON.stringify(imsg, null, " "));
      }
      if (imsg.type === "error") {
        _onErrorMsg(imsg);
      } else if (!imsg.reply_to) {
        TS.ds.on_msg_sig.dispatch(imsg);
        if (imsg.type === "hello") {
          _onHello(imsg);
        }
      }
      if (sent) {
        if (!imsg.ok) {
          imsg.error = imsg.error || {
            code: 0,
            msg: "unknown error (not specified by MS)"
          };
        }
        if (is_reconnect_reply) {
          imsg.ok = true;
        }
        if (sent.handler) {
          sent.handler(imsg.ok, imsg);
        }
      }
    },
    onFailure: function(reason_str) {
      if (reason_str) _reportDisconnect("You got disconnected, so here are some details:\n>>>" + reason_str);
      _check_last_pong_time = false;
      _deprecateCurrentSocket();
      if (TS.model.ds_connected) {
        TS.info("Disconnected from DS, TS.model.rtd_start_throttler:" + TS.model.rtd_start_throttler);
        TS.ds.logConnectionFlow("on_connected_failure");
        TS.model.ds_reconnect_ms = 100;
        TS.ds.disconnect();
      } else {
        TS.ds.logConnectionFlow("on_notconnected_failure");
        TS.model.ds_reconnect_ms = (TS.model.ds_reconnect_ms + 1e3) * 1.3;
        var ms = TS.model.ds_reconnect_ms;
        if (TS.model.ds_reconnect_ms > 4e3) {
          TS.model.ds_reconnect_ms = _.random(ms, ms + ms / 3);
        }
        TS.model.ds_reconnect_ms = Math.min(TS.model.ds_reconnect_ms, 3e5);
      }
      if (TS.model.rtd_start_throttler > 5) {
        var min_ms = 2e3 * TS.model.rtd_start_throttler;
        if (TS.model.ds_reconnect_ms < min_ms) {
          TS.info("because TS.model.rtd_start_throttler:" + TS.model.rtd_start_throttler + " we are increasing time until next login call");
          TS.model.ds_reconnect_ms = min_ms;
        }
      }
      if (TS.model.ds_connected) {
        TS.model.ds_connected = false;
        TS.ds.disconnected_sig.dispatch();
      }
      TS.model.ds_connected = false;
      clearInterval(_send_ping_interv);
      clearInterval(_check_ping_interv);
      if (TS.model.ds_asleep) {
        TS.warn("NOT doing startReconnection(), we are asleep");
        return;
      }
      TS.ds.startReconnection();
    },
    startReconnection: function() {
      TS.model.ds_reconnect_time = Date.now() + TS.model.ds_reconnect_ms;
      TS.info("Attempting to reconnect in " + TS.model.ds_reconnect_ms + "ms");
      clearInterval(_reconnect_interv);
      _reconnect_interv = setInterval(_onReconnectInterval, _reconnect_interv_ms);
      _onReconnectInterval();
      clearTimeout(_auto_reconnect_tim);
      _auto_reconnect_tim = setTimeout(function() {
        if (!TS.model.window_unloading) {
          TS.ds.reconnect_requested_sig.dispatch();
        }
      }, TS.model.ds_reconnect_ms);
    },
    manualReconnectNow: function() {
      TS.ds.logConnectionFlow("manual_reconnect");
      clearTimeout(_auto_reconnect_tim);
      clearInterval(_reconnect_interv);
      clearTimeout(_connect_timeout_tim);
      _connect_timeout_count = 0;
      if (!TS.model.window_unloading) {
        TS.ds.reconnect_requested_sig.dispatch();
        TS.ds.reconnecting_sig.dispatch(0);
      }
    },
    disconnect: function() {
      if (_websocket && TS.model.ds_connected) {
        TS.ds.logConnectionFlow("disconnect");
        _websocket.close();
      } else {
        TS.warn("TS.ds.disconnect called, but _websocket=" + _websocket + " TS.model.ds_connected=" + TS.model.ds_connected);
      }
    },
    logConnectionFlow: function(name) {
      var ds_conn_log = TS.model.ds_conn_log;
      var time = Date.now();
      ds_conn_log.push({
        name: name,
        time: time,
        delta: ds_conn_log.length ? time - ds_conn_log[ds_conn_log.length - 1].time : 0
      });
      TS.log(2, "logConnectionFlow " + name + " " + ds_conn_log[ds_conn_log.length - 1].delta);
    },
    getConnectionFlowLog: function() {
      var ds_conn_log = TS.model.ds_conn_log;
      var args = [];
      for (var i = 0; i < ds_conn_log.length; i += 1) {
        args.push(encodeURIComponent(ds_conn_log[i].name + "-" + (ds_conn_log[i].delta ? Math.round(ds_conn_log[i].delta / 1e3) : 0) + "-" + Math.round(ds_conn_log[i].time / 1e3)));
      }
      TS.dir(2, TS.model.ds_conn_log);
      var log = "_x_connection_log=" + args.join(",");
      return log;
    },
    connect: function() {
      if (!window.WebSocket) {
        window.WebSocket = window.MozWebSocket;
      }
      if (window.WebSocket) {
        var url;
        try {
          TS.ds.logConnectionFlow("connect");
          url = TS.web.space.login_data.ws;
          var special_str = TS.qs_args.simulate_old_token == 1 ? "&TRIGGER_OLD_TOKEN=1" : "";
          url += "?version_uid=" + TS.boot_data.version_uid + special_str;
          url = TS.utility.appendLogToUrlWithLimit(url, TS.ds.getConnectionFlowLog());
          TS.info("Connecting to: " + url);
          if (TS.qs_args.simulate_first_connect_failure == 1 && !window.already_simulated_first_connect_failure) {
            url = url.replace("e", "w");
            TS.info("simulate_first_connect_failure url:" + url);
            window.already_simulated_first_connect_failure = true;
          }
          _connect_timeout_tim_ms = window.WEB_SOCKET_USING_FLASH ? _connect_flash_timeout_tim_ms : _connect_ws_timeout_tim_ms;
          clearTimeout(_connect_timeout_tim);
          _connect_timeout_tim = setTimeout(_onConnectTimeout, _connect_timeout_tim_ms);
          TS.ds.last_url = url;
          TS.ds.last_start_ms = Date.now();
          _deprecateCurrentSocket();
          _websocket = new WebSocket(url);
        } catch (error) {
          TS.warn("failed to create new WebSocket");
          TS.error(error);
          TS.ds.onFailure("failed to create new WebSocket");
          return;
        }
        TS.model.ds_connecting = true;
        if (TS.qs_args.simulate_first_connect_timeout == 1 && _connect_timeout_count < 1) {
          TS.info("simulate_first_connect_timeout url:" + url);
        } else {
          _websocket.onopen = _onConnect;
        }
        _websocket.onclose = _onDisconnect;
        _websocket.onerror = _onError;
      } else {
        alert(TS.i18n.t("Your browser does not support Web Sockets.", "ds")());
      }
    },
    sleep: function() {
      if (TS.model.ds_asleep) return;
      if (!TS.model.ds_connected) return;
      TS.model.ds_asleep = true;
      TS.ds.disconnect();
    },
    wake: function() {
      if (!TS.model.ds_asleep) return;
      TS.model.ds_asleep = false;
      TS.ds.startReconnection();
    }
  });
  var _check_ping_interv = 0;
  var _check_ping_interv_ms = 3e3;
  var _send_ping_interv = 0;
  var _send_ping_interv_ms = 1e4;
  var _connect_timeout_tim = 0;
  var _connect_timeout_tim_ms = 0;
  var _connect_ws_timeout_tim_ms = 1e4;
  var _connect_flash_timeout_tim_ms = 2e4;
  var _hello_timeout_tim = 0;
  var _hello_timeout_tim_ms = 3e4;
  var _disconnect_timeout_tim = 0;
  var _disconnect_timeout_tim_ms = 5e3;
  var _reconnect_interv = 0;
  var _reconnect_interv_ms = 1e3;
  var _auto_reconnect_tim = 0;
  var _websocket = null;
  var _msg_id = 0;
  var _check_last_pong_time = false;
  var _pong_timeout_ms = 0;
  var _connect_timeout_count = 0;
  var _setPongTimeoutMs = function(has_focus) {
    if (has_focus) {
      _pong_timeout_ms = 1e4;
    } else {
      _pong_timeout_ms = 6e4;
    }
    _pong_timeout_ms += _send_ping_interv_ms;
    TS.log(2, "DS _pong_timeout_ms set to:" + _pong_timeout_ms + " has_focus:" + has_focus);
  };
  var _onMsg = function(e) {
    var imsg = JSON.parse(e.data);
    TS.ds.handleMsg(imsg);
  };
  var _onConnect = function() {
    clearTimeout(_connect_timeout_tim);
    _connect_timeout_count = 0;
    if (TS.qs_args.simulate_hello_timeout == 1 && !window.already_simulated_hello_timeout) {
      TS.info("simulate_hello_timeout");
      window.already_simulated_hello_timeout = true;
    } else {
      _websocket.onmessage = _onMsg;
    }
    TS.model.ds_conn_log.length = 0;
    TS.info("DS WS connected!");
    TS.ds.logConnectionFlow("on_connect");
    clearTimeout(_hello_timeout_tim);
    _hello_timeout_tim = setTimeout(_onHelloTimeout, _hello_timeout_tim_ms);
  };
  var _checkPings = function() {
    if (!_check_last_pong_time) return;
    var since_last_pong_ms = Date.now() - TS.ds.last_pong_time;
    TS.log(2, "DS MS since_last_pong_ms:" + since_last_pong_ms + " pong_timeout_ms:" + _pong_timeout_ms);
    if (since_last_pong_ms < _pong_timeout_ms) return;
    TS.warn("since_last_pong_ms too long! " + since_last_pong_ms + " > " + _pong_timeout_ms);
    TS.warn("calling disconnect(), expect to get an onDisconnect() callback");
    TS.ds.logConnectionFlow("on_ping_timeout");
    TS.ds.trouble_sig.dispatch();
    _check_last_pong_time = false;
    _reportDisconnect("You are on team Tiny Speck, so here are some pong details:\n>>>since_last_pong_ms too long! " + since_last_pong_ms + " > " + _pong_timeout_ms + " ... calling disconnect(), expect to get an onDisconnect() callback");
    try {
      TS.ds.disconnect();
      clearTimeout(_disconnect_timeout_tim);
      _disconnect_timeout_tim = setTimeout(function() {
        TS.info("called disconnect, no onDisconnect callback happened in " + _disconnect_timeout_tim_ms + "ms, so calling _onDisconnect() manually now");
        _onDisconnect(null, "since_last_pong_ms too long! then called disconnect, but no onDisconnect callback happened in " + _disconnect_timeout_tim_ms + "ms, so calling _onDisconnect() manually now");
      }, _disconnect_timeout_tim_ms);
    } catch (err) {
      TS.info("since_last_pong_ms too long! then an error calling disconnect, going to assume it is because it is already closed, calling _onDisconnect() manually now");
      TS.warn(err);
      _onDisconnect(null, "error calling disconnect, going to assume it is because it is already closed, calling _onDisconnect() manually now");
    }
  };
  var _sendPing = function() {
    TS.ds.send({
      type: "ping"
    });
    _check_last_pong_time = true;
  };
  var _onDisconnect = function(e, reason_str) {
    reason_str = reason_str || "_onDisconnect called with event:" + e;
    TS.info("DS WS disconnected");
    TS.ds.logConnectionFlow("on_disconnect");
    clearTimeout(_disconnect_timeout_tim);
    clearTimeout(_hello_timeout_tim);
    clearTimeout(_connect_timeout_tim);
    if (e) {
      TS.info("_onDisconnect event.code:" + e.code);
    } else {
      TS.info("no event");
    }
    TS.ds.onFailure(reason_str);
  };
  var _reportDisconnect = function(reason_str) {
    TS.warn("_reportDisconnect reason_str:" + reason_str);
  };
  var _deprecateCurrentSocket = function() {
    if (!_websocket) return;
    _websocket.onmessage = null;
    _websocket.onopen = null;
    _websocket.onerror = null;
    _websocket.onclose = null;
    try {
      _websocket.close();
    } catch (err) {}
  };
  var _onReconnectInterval = function() {
    var ms = TS.model.ds_reconnect_time - Date.now();
    var secs = Math.round(ms / 1e3);
    if (secs >= 0) {
      TS.ds.reconnecting_sig.dispatch(secs);
    }
    if (TS.model.window_unloading) {
      clearInterval(_reconnect_interv);
    }
  };
  var _onHelloTimeout = function() {
    var desc = "socket received no hello msg " + _hello_timeout_tim_ms + "ms after connection";
    TS.warn(desc);
    TS.ds.logConnectionFlow("_onHelloTimeout");
    TS.ds.onFailure(desc);
  };
  var _onConnectTimeout = function() {
    _connect_timeout_count += 1;
    var desc = "socket not connected " + _connect_timeout_tim_ms + "ms after creation. _connect_timeout_count:" + _connect_timeout_count;
    TS.warn(desc);
    TS.ds.logConnectionFlow("_onConnectTimeout");
    if (_connect_timeout_count == 3) {
      if (TS.model.is_chrome_desktop) {
        TS.ms.showConnectionTroubleDialog();
      } else {
        var body_text;
        if (TS.model.is_our_app) {
          body_text = TS.i18n.t("We’ve seen this problem clear up with a restart of Slack, a solution which we suggest to you now only with great regret and self-loathing.", "ds")();
        } else {
          body_text = TS.i18n.t("We’ve seen this problem clear up with a restart of your browser, a solution which we suggest to you now only with great regret and self-loathing.", "ds")();
        }
        TS.generic_dialog.start({
          title: TS.i18n.t("Connection trouble", "ds")(),
          body: "<p>" + TS.i18n.t("Apologies, we’re having some trouble with your web socket connection.", "ds")() + "</p><p>" + body_text + "</p>",
          show_cancel_button: false,
          go_button_text: TS.i18n.t("OK", "ds")(),
          esc_for_ok: true
        });
      }
      return;
    } else if (_connect_timeout_count == 2) {
      if (window.WEB_SOCKET_USING_FLASH) {} else if (TS.model.is_chrome_desktop) {
        _connect_ws_timeout_tim_ms = 2e4;
        return;
      }
    }
    TS.ds.onFailure(desc);
  };
  var _onError = function(e) {
    var err_str = "";
    if (e) {
      if (e.name) err_str += " e.name=" + e.name;
      if (e.message) err_str += " e.message=" + e.message;
      if (e.data) err_str += " e.data=" + e.data;
    }
    TS.warn("_onError err_str: " + err_str);
    TS.dir(0, e);
  };
  var _onErrorMsg = function(imsg) {
    if (imsg.error) {
      if (imsg.error.code == 1) {
        TS.ds.logConnectionFlow("msg_error_code_1");
      } else {
        TS.info("_onErrorMsg websocket is connected but we got an error message: " + JSON.stringify(imsg));
        TS.ds.onFailure("_onErrorMsg imsg.error:" + imsg.error);
      }
    } else {
      TS.info("_onErrorMsg: " + (imsg ? JSON.stringify(imsg) : "no imsg?"));
    }
  };
  var _onHello = function() {
    clearTimeout(_hello_timeout_tim);
    var since_last_pong_ms = Date.now() - TS.ds.last_pong_time;
    TS.info("Hello msg recvd, since_last_pong_ms:" + since_last_pong_ms);
    TS.ds.logConnectionFlow("on_hello");
    clearInterval(_reconnect_interv);
    _check_last_pong_time = true;
    TS.ds.last_pong_time = Date.now();
    clearInterval(_check_ping_interv);
    _check_ping_interv = setInterval(_checkPings, _check_ping_interv_ms);
    clearInterval(_send_ping_interv);
    _send_ping_interv = setInterval(_sendPing, _send_ping_interv_ms);
    TS.model.ds_connecting = false;
    TS.model.ds_connected = true;
    var msg;
    for (var i = 0; i < TS.ds.Q.length; i += 1) {
      msg = TS.ds.Q.shift();
      TS.log(2, "TS.ds (Q) -->\n" + JSON.stringify(msg, null, "  "));
      _websocket.send(JSON.stringify(msg));
    }
    TS.ds.connected_sig.dispatch();
    _sendPing();
  };
})();
(function() {
  "use strict";
  TS.registerModule("templates", {
    onStart: function() {
      _load();
      if (TS.members) {
        TS.members.user_color_changed_sig.add(TS.templates.memberUserColorChanged, TS.templates);
      }
      if (TS.prefs) {
        TS.prefs.sidebar_behavior_changed_sig.add(TS.templates.sidebarBehaviorPrefChanged, TS.templates);
      }
      TS.environment.retina_changed_sig.add(_redrawRetinaAssets);
    },
    makeUnreadMessagesDomId: function(item) {
      return TS.utility.makeSafeForDomId("activity_unread_messages_" + item.id);
    },
    makeRxnKeyDomClass: function(rxn_key) {
      return TS.utility.makeSafeForDomId("rxns_key_" + rxn_key);
    },
    makeUnreadGroupMessagesDomId: function(item) {
      return TS.utility.makeSafeForDomId("activity_unread_group_messages_" + item.id);
    },
    makeUnreadDmsDomId: function(item) {
      return TS.utility.makeSafeForDomId("activity_unread_dms_" + item.id);
    },
    makeSentMessagesDomId: function(item) {
      return TS.utility.makeSafeForDomId("activity_sent_messages_" + item.id);
    },
    makeSentGroupMessagesDomId: function(item) {
      return TS.utility.makeSafeForDomId("activity_sent_group_messages_" + item.id);
    },
    makeIssueListDomId: function(id) {
      return "issue_list_" + id;
    },
    makeSentDmsDomId: function(item) {
      return TS.utility.makeSafeForDomId("activity_sent_dms_" + item.id);
    },
    makeMsgDomId: function(ts) {
      return TS.utility.makeSafeForDomId("msg_" + ts);
    },
    makeMsgLabelDomId: function(ts) {
      return TS.utility.makeSafeForDomId("msg_" + ts + "_label");
    },
    makeMsgAttachmentTextExpanderDomId: function(ts, index) {
      return TS.utility.makeSafeForDomId("msg_rest_text_expander_" + ts + "_" + index);
    },
    makeMSRDomId: function(match) {
      return TS.utility.makeSafeForDomId("MSR_" + match.channel.id + "_" + match.ts);
    },
    makeMSRDomIdWithModule: function(match, module) {
      return TS.utility.makeSafeForDomId("MSR_" + match.channel.id + "_" + match.ts + "_" + module);
    },
    makeSHRoomClass: function(room_id) {
      return TS.utility.makeSafeForDomId("screenhero_room_" + room_id);
    },
    makeChannelDomId: function(channel) {
      return "channel_" + channel.id;
    },
    makeChannelDragData: function(model_ob) {
      return JSON.stringify({
        id: model_ob.id,
        name: model_ob.name,
        is_channel: model_ob.is_channel || false,
        is_group: model_ob.is_group || false,
        is_im: model_ob.is_im || false,
        is_mpim: model_ob.is_mpim || false,
        is_self_im: model_ob.is_self_im || false,
        is_slackbot_im: model_ob.is_slackbot_im || false,
        purpose: model_ob.purpose ? model_ob.purpose.value : "",
        topic: model_ob.topic ? model_ob.topic.value : ""
      });
    },
    makeFileDragData: function(file) {
      return JSON.stringify({
        id: file.id,
        name: file.name,
        title: file.title,
        mimetype: file.mimetype,
        filetype: file.filetype,
        size: file.size
      });
    },
    makeDayDividerDomId: function(ts) {
      return TS.utility.makeSafeForDomId("day_divider_" + ts);
    },
    makeGroupDomId: function(group) {
      return "group_" + group.id;
    },
    makePriorityIconDomId: function(model_ob) {
      return "priority_" + model_ob.id;
    },
    makeStarredIconDomId: function(model_ob) {
      return "starred_" + model_ob.id;
    },
    makeMutedIconDomId: function(model_ob) {
      return "muted_" + model_ob.id;
    },
    makeMemberDomId: function(member) {
      if (!member) return;
      return TS.templates.makeMemberDomIdById(member.id);
    },
    makeMemberDomIdById: function(id) {
      if (!id) return;
      return "member_" + id;
    },
    makeMpimDomId: function(mpim) {
      return "mpim_" + mpim.id;
    },
    makeChannelListDomId: function(channel) {
      return "channel_" + channel.id + "_member_list";
    },
    makeFileDomId: function(file) {
      return "file_" + file.id;
    },
    makeFileCommentsDomId: function(file) {
      return "file_comments_" + file.id;
    },
    makeFileContentsDomId: function(file) {
      return "file_contents_" + file.id;
    },
    makeUnreadMsgsDomId: function(parent) {
      return "unread_msg_" + parent.id;
    },
    makeUnreadHighlightDomId: function(parent) {
      if (!parent) return;
      return "unread_highlight_" + parent.id;
    },
    makeMemberPresenceDomClass: function(member_id) {
      return "member_presence_" + member_id;
    },
    makeMemberPresenceStateClass: function(member) {
      var presence = member.presence;
      if (TS.dnd.isMemberInDnd(member)) presence += " dnd";
      return presence;
    },
    makeMemberPresenceStateAriaLabel: function(member) {
      var presence = member.presence;
      var aria_label = "";
      if (presence === "active") {
        aria_label += "active";
      } else if (presence === "away") {
        aria_label += "away";
      }
      if (TS.dnd.isMemberInDnd(member)) {
        aria_label += ", do not disturb";
      }
      return aria_label;
    },
    makeMemberPresenceIcon: function(member) {
      if (member.deleted) return "";
      var presence_class = TS.templates.makeMemberPresenceDomClass(member.id);
      var presence_icon_class = "ts_icon_presence";
      if (member.is_ultra_restricted) {
        presence_class += " ura";
        presence_icon_class = "ts_icon_presence_ura";
      } else if (member.is_restricted) {
        presence_class += " ra";
        presence_icon_class = "ts_icon_presence_ra";
      } else if (TS.utility.teams.isMemberExternal(member)) {
        presence_class += " external";
        presence_icon_class = "ts_icon_presence_external";
      } else if (member.is_slackbot) {
        presence_icon_class = "ts_icon_heart";
      }
      var presence_icon = '<i aria-hidden="true" class="ts_icon ' + presence_icon_class + ' presence_icon"></i>';
      var presence = TS.templates.makeMemberPresenceStateClass(member);
      var html = '<span data-member-presence="' + member.id + '" class="presence ' + presence + " " + presence_class + '" title="' + member.presence + '">' + presence_icon + "</span>";
      return html;
    },
    makeMemberStatusDomClass: function(member_id) {
      return "member_status_" + member_id;
    },
    memberUserColorChanged: function(member) {
      var cls = "color_" + member.id;
      if (member.color == member.member_color) {
        var style_id = "color_rule_" + cls;
        var $style = $("#" + style_id);
        $style.remove();
        return;
      }
      TS.templates.makeUserColorRule(member);
    },
    makeUserColorRule: function(member) {
      var cls = "color_" + member.id;
      var color = "#" + TS.utility.htmlEntities(member.member_color);
      var rule;
      if (TS.client) {
        rule = "				." + cls + ":not(.nuc), 				#col_channels ul li:not(.active):not(.away) > ." + cls + ":not(.nuc) {					color:" + color + ";				}			";
      } else {
        rule = "				." + cls + ":not(.nuc) {					color:" + color + ";				}			";
      }
      var style_id = "color_rule_" + cls;
      var $style = $("#" + style_id);
      if ($style.length) {
        $style.text(rule);
      } else {
        $('<style type="text/css" id="' + style_id + '">' + rule + "</style>").appendTo("body");
      }
    },
    sidebarBehaviorPrefChanged: function() {
      TS.templates.makeSidebarBehaviorRule();
    },
    makeSidebarBehaviorRule: function() {
      var rule;
      var style_id = "sidebar_behavior";
      var $style = $("#" + style_id);
      if (TS.model.prefs.sidebar_behavior === "hide_read_channels") {
        rule = "				.channels_list_holder ul li:not(.unread):not(.active):not(.show_in_list_even_though_no_unreads) {					display: none;			}";
      } else if (TS.model.prefs.sidebar_behavior === "hide_read_channels_unless_starred") {
        rule = "				.channels_list_holder div:not(#starred_div)>ul li:not(.unread):not(.active):not(.is_starred):not(.show_in_list_even_though_no_unreads) {					display: none;			}";
      }
      if (rule) {
        if ($style.length) {
          $style.text(rule);
        } else {
          $('<style type="text/css" id="' + style_id + '">' + rule + "</style>").appendTo("head");
        }
      } else {
        $("#" + style_id).remove();
      }
    },
    makeMsgDomIdInConversation: function(ts) {
      return TS.templates.makeMsgDomId(ts) + "_conversation";
    },
    makeMsgDomIdInSearch: function(ts, main_msg) {
      return TS.templates.makeMsgDomId(ts) + "_" + TS.templates.makeMSRDomId(main_msg);
    },
    makeMsgDomIdInSearchTopResults: function(ts, main_msg, module) {
      return TS.templates.makeMsgDomId(ts) + "_" + TS.templates.makeMSRDomId(main_msg) + "_" + module;
    },
    makeMsgDomIdInUnreadView: function(ts) {
      return TS.templates.makeMsgDomId(ts) + "_unread_view";
    },
    makeMsgDomIdInThreadsView: function(ts) {
      return TS.templates.makeMsgDomId(ts) + "_threads_view";
    },
    promiseToRenderAsync: function(template, maybe_args_p) {
      if (!template) return Promise.reject(new Error("No template to render"));
      return Promise.resolve(maybe_args_p).then(function(args) {
        return template(args);
      });
    }
  });
  var _redrawRetinaAssets = function() {
    var id;
    var size;
    var omit_link;
    var $el;
    $(".member_image").each(function() {
      $el = $(this);
      id = $el.data("member-id");
      size = $el.data("thumb-size");
      omit_link = !$el.is("a");
      if (id && size) $(this).replaceWith(TS.templates.builders.makeMemberPreviewLinkImage(id, size, false, omit_link));
    });
    $el = null;
  };
  var REGEX_I18N_NS = /{{\s*i18n_ns\s*('|")[a-zA-Z0-9]+('|")\s*}}/;
  var _load = function() {
    Object.keys(TS.raw_templates).forEach(function(template_name) {
      TS.templates[template_name] = _compile(template_name, TS.raw_templates[template_name]);
      Handlebars.registerPartial(template_name, TS.templates[template_name]);
    });
    delete TS.raw_templates;
  };
  var _compile = function(name, html) {
    if (!html) {
      TS.warn(name + " was passed no html");
      return null;
    }
    if (REGEX_I18N_NS.test(html)) html += " {{_i18n_ns_end}}";
    var template = Handlebars.compile(html);
    return function(context) {
      context = context || {};
      return template(context);
    };
  };
})();
(function() {
  "use strict";
  TS.registerModule("templates.builders", {
    debug_items: {},
    debug_items_index: 0,
    buildStarComponents: function(type, ob, parent_ob) {
      return _buildStarComponents(type, ob, parent_ob);
    },
    fileHTML: function(file, config) {
      config = config || {};
      var member = TS.utility.members.getEntityFromFile(file);
      var actions = TS.files.getFileActions(file);
      var html;
      var is_hosted_or_external = file.mode === "hosted" || file.mode === "external";
      var template_args = {
        member: member,
        file: file,
        for_search: config.for_search,
        is_enterprise: config.is_enterprise,
        for_files_list: !config.for_share_dialog,
        icon_class: TS.utility.getImageIconClass(file, "thumb_80"),
        is_email: file.mode === "email",
        is_space: file.mode === "space",
        is_post: file.mode === "post",
        is_snippet: file.mode === "snippet",
        is_hosted_or_external: is_hosted_or_external,
        has_image: is_hosted_or_external && file.thumb_80 && !file.has_rich_preview,
        can_share: !!actions.share
      };
      if (TS.client) {
        template_args.info_pane_visible = TS.model.ui_state.flex_name === "details";
      }
      template_args.supports_line_clamp = TS.environment.supports_line_clamp;
      if (file.mode === "external") template_args.external_filetype_html = TS.templates.builders.makeExternalFiletypeHTML(file);
      if (file.mode === "email") {
        template_args.to_more_count = file.to.length - 1;
        template_args.cc_more_count = file.cc.length - 1;
      }
      html = TS.templates.file_list_item(template_args);
      return html;
    },
    buildReplyBarHTML: function(msg, model_ob) {
      var template_args = {
        msg: msg,
        model_ob: model_ob,
        conversation_permalink: TS.utility.msgs.constructConversationPermalink(model_ob, msg.thread_ts)
      };
      var replies = msg.replies;
      if (replies && replies.length) {
        template_args.num_replies = replies.length;
        var unique_repliers = _.chain(replies).map(function(reply) {
          return TS.members.getMemberById(reply.user);
        }).compact().uniq().value();
        template_args.first_repliers = _.take(unique_repliers, 5);
        template_args.additional_reply_count = unique_repliers.length - template_args.first_repliers.length;
        var last_ts = _.last(replies).ts;
        var last_date = TS.utility.date.toDateObject(last_ts);
        if (TS.utility.date.sameDay(last_date, new Date)) {
          if (template_args.num_replies === 1) {
            template_args.last_reply_at = TS.i18n.t("Today at {time}", "threads")({
              time: TS.utility.date.toTime(last_ts, true)
            });
          } else {
            template_args.last_reply_at = TS.i18n.t("Last reply today at {time}", "threads")({
              time: TS.utility.date.toTime(last_ts, true)
            });
          }
        } else if (template_args.num_replies === 1) {
          template_args.last_reply_at = TS.utility.date.toTimeAgo(last_ts);
        } else {
          template_args.last_reply_at = TS.i18n.t("Last reply {time_ago}", "threads")({
            time_ago: TS.utility.date.toTimeAgo(last_ts)
          });
        }
      }
      return TS.templates.message_reply_bar(template_args);
    },
    formatSoundUrl: function(attachment, msg) {
      return "";
    },
    buildAttachmentActions: function(attachment, disable_actions) {
      var rendered_actions = attachment.actions.map(function(action) {
        switch (action.type) {
          case "button":
            return TS.templates.builders.buildAttachmentActionButtonHTML(action, disable_actions);
          case "select":
            return TS.templates.builders.buildAttachmentActionSelectHTML(action, disable_actions);
          default:
            break;
        }
        return undefined;
      });
      var actions_html = rendered_actions.join("");
      return actions_html;
    },
    buildAttachmentHTML: function(args) {
      var msg_dom_id = args.msg_dom_id || TS.templates.makeMsgDomId(args.msg.ts);
      var attachment = args.attachment;
      var model_ob = args.model_ob || TS.shared.getActiveModelOb();
      if (TS.templates.builders.shouldDoSimpleAttachment(attachment, args.msg)) {
        if (attachment.video_html) {
          return TS.templates.builders.buildInlineVideoTogglerAndDiv(attachment.from_url, msg_dom_id);
        } else if (attachment.image_url) {
          return TS.templates.builders.buildInlineImgTogglerAndDiv(attachment.from_url, msg_dom_id, args);
        } else if (attachment.audio_url) {
          return " " + TS.templates.builders.formatSoundUrl(attachment, args.msg);
        }
      }
      if (attachment.color) {
        if (typeof attachment.color === "number") attachment.color = attachment.color.toString();
        if (!attachment.color.indexOf) {
          TS.warn("msg " + args.msg.ts + " has an invalid (non string) color:" + attachment.color + " (removed in client)");
          delete attachment.color;
        } else {
          attachment.color = attachment.color.replace(/#/g, "");
        }
      }
      var short_fields = [];
      var long_fields = [];
      if (attachment.fields) {
        var f;
        var new_row;
        var last;
        for (var i = 0; i < attachment.fields.length; i += 1) {
          new_row = true;
          f = attachment.fields[i];
          if (last && f.short && last.short && last._new_row) {
            new_row = false;
          }
          f._new_row = new_row;
          last = f;
          if (f.short) {
            short_fields.push(f);
          } else {
            long_fields.push(f);
          }
        }
      }
      var should_expand = !attachment._always_expand && attachment._short_text && !TS.inline_attachments.shouldExpandText(TS.templates.makeMsgAttachmentTextExpanderDomId(args.msg.ts, attachment._index));
      var has_more = !!attachment.more;
      var ts_link = attachment.from_url || attachment.ts_link || attachment.title_link || attachment.author_link;
      var is_broadcast = _.get(args.msg, "subtype") === "reply_broadcast";
      var thumb_link = attachment.thumb_link || ts_link;
      var can_delete = false;
      if (!model_ob) {
        TS.warn("need to get model_ob passed in here somehow! for expanding messages in activity feed");
      } else if (args.can_delete !== false) {
        can_delete = (attachment.id || attachment.id === 0) && (attachment.from_url || args.msg.text) && (TS.model.user.is_admin && !model_ob.is_im || TS.model.user.id == args.msg.user) && (args.msg.subtype !== "pinned_item" && !is_broadcast);
      }
      var small_thumb = attachment.thumb_url && !attachment.image_url && !attachment.video_html && !attachment.audio_html;
      var small_thumb_url = small_thumb ? attachment.proxied_thumb_url || attachment.thumb_url : null;
      var is_pinned = false;
      var pin_html = "";
      if (attachment.is_msg_unfurl) {
        var attached_msg = TS.utility.msgs.getMsg(attachment.ts, model_ob.msgs);
        if (attached_msg && attached_msg.pinned_to && attached_msg.pinned_to.length > 0) {
          is_pinned = _.some(attached_msg.pinned_to, function(id) {
            return id === model_ob.id;
          });
          if (is_pinned && !is_broadcast) {
            pin_html = TS.templates.builders.buildPinInfoHtml(attached_msg);
          }
        }
      }
      var meta = false;
      if (is_broadcast) {
        var ampm = true;
        if (attachment.ts) {
          meta = TS.utility.date.toTime(attachment.ts, ampm);
        } else {
          meta = TS.utility.date.toTime(args.msg.ts, ampm);
        }
      }
      var clickable = attachment.from_url && args.has_container;
      if (is_broadcast) clickable = true;
      var attachment_args = {
        is_text_collapsed: should_expand,
        has_more: has_more,
        attachment: attachment,
        attachment_meta: meta,
        pin_html: pin_html,
        short_fields: short_fields,
        long_fields: long_fields,
        msg: args.msg,
        msg_dom_id: msg_dom_id,
        real_src: TS.utility.attachments.getMediaSource(attachment),
        is_standalone: !args.msg.text || args.msg.ignore_if_attachments_supported || !attachment.pretext,
        show_fields_table: TS.qs_args.show_fields_table != "0",
        can_delete: can_delete,
        thumb_link: thumb_link,
        small_thumb_url: small_thumb_url,
        show_fallback: TS.model.show_attachment_fallback,
        enable_slack_action_links: args.enable_slack_action_links === true
      };
      if (!args.from_post) {
        var disable_actions = TS.boot_data.app === "web" || args.enable_slack_action_links !== true;
        var disable_actions_reason;
        if (disable_actions) {
          if (TS.boot_data.app === "web") {
            disable_actions_reason = "ARCHIVES";
          } else if (TS.shared.getActiveModelOb().is_channel && !TS.shared.getActiveModelOb().is_member) {
            disable_actions_reason = "CHANNEL_PREVIEW";
          } else {
            disable_actions_reason = "OTHER";
          }
        }
        attachment_args = _.assign(attachment_args, {
          attachment: attachment,
          has_actions: !!(!_.isEmpty(attachment.actions) || !_.isEmpty(attachment.legacy_actions)),
          has_source: _.some(attachment._source),
          has_border: args.has_border,
          has_indent: attachment.indent,
          has_container: args.has_container,
          has_media: args.show_media_caret,
          has_text_content: !!(attachment.text || attachment.title),
          has_thumb: !!small_thumb,
          has_footer: !!(attachment.footer || attachment.footer_icon || attachment.ts || attachment._attribution) && !is_broadcast,
          disable_actions: disable_actions,
          disable_actions_reason: disable_actions_reason,
          border_color: attachment.color && "#" + attachment.color || null,
          break_border: args.break_border,
          caret_location: TS.utility.attachments.getMediaCaretLocation(attachment)
        });
        attachment_args.applied_classes = TS.utility.getAppliedClasses({
          inline_attachment: true,
          standalone: attachment_args.is_standalone,
          has_thumb: attachment_args.has_thumb,
          can_delete: attachment_args.can_delete,
          clickable: clickable,
          message_unfurl: attachment._unfurl_type_message,
          reply_broadcast: is_broadcast,
          is_pinned: is_pinned
        });
        return TS.templates.message_attachment(attachment_args);
      }
      var expand_it = true;
      var caret_html = "";
      if (args.show_initial_caret || args.show_media_caret) {
        var media_type = TS.utility.attachments.getMediaType(attachment);
        switch (media_type) {
          case "video":
            var inline_video = TS.model.inline_videos[attachment.from_url || attachment.thumb_url];
            if (inline_video) {
              var no_title_in_toggler = true;
              caret_html = TS.templates.builders.buildInlineVideoToggler(attachment.from_url || attachment.thumb_url, msg_dom_id, no_title_in_toggler);
              expand_it = TS.inline_videos.shouldExpand(msg_dom_id, inline_video);
            }
            break;
          case "audio":
            var inline_audio = TS.model.inline_audios[attachment.audio_html || attachment.audio_url];
            if (inline_audio) {
              caret_html = TS.templates.builders.buildInlineAudioToggler(attachment.audio_html || attachment.audio_url, msg_dom_id);
              expand_it = TS.inline_audios.shouldExpand(msg_dom_id, inline_audio);
            }
            break;
          case "other":
            var inline_other = TS.model.inline_others[attachment.other_html];
            if (inline_other) {
              caret_html = TS.templates.builders.buildInlineOtherToggler(attachment.other_html, msg_dom_id);
              expand_it = TS.inline_others.shouldExpand(msg_dom_id, inline_other);
            }
            break;
          case "image":
            var inline_img = TS.model.inline_imgs[attachment.from_url || attachment.image_url];
            if (inline_img) {
              var no_bytes_in_toggler = !args.show_media_caret;
              caret_html = TS.templates.builders.buildInlineImgToggler(attachment.from_url || attachment.image_url, msg_dom_id, no_bytes_in_toggler);
              expand_it = TS.inline_imgs.shouldExpand(msg_dom_id, inline_img);
            }
            break;
          default:
            var inline_attachment = TS.model.inline_attachments[attachment.from_url];
            if (inline_attachment) {
              caret_html = TS.templates.builders.buildInlineAttachmentToggler(attachment.from_url, msg_dom_id);
              expand_it = TS.inline_attachments.shouldExpand(msg_dom_id, inline_attachment);
            } else {
              TS.warn("no inline_attachment for " + attachment.from_url);
            }
            break;
        }
      }
      _.assign(attachment_args, {
        initial_caret_html: args.show_initial_caret ? new Handlebars.SafeString(caret_html) : "",
        media_caret_html: args.show_media_caret ? new Handlebars.SafeString(caret_html) : "",
        expand_media: args.show_media_caret ? expand_it : true,
        expand_it: args.show_initial_caret ? expand_it : true,
        bg_color: attachment.color || "e3e4e6",
        thumb_at_top: !window.attach_thumb_align_title,
        ts_link: ts_link,
        small_thumb: small_thumb,
        max_width_class: small_thumb ? "right_thumb_max_w" : "",
        show_action_links: args.enable_slack_action_links === true,
        has_content: args.has_content
      });
      return TS.templates.spaces_attachment(attachment_args);
    },
    buildAttachmentActionButtonHTML: function(action, disable_actions) {
      disable_actions = disable_actions === true;
      var button_defaults = {
        _disabled: disable_actions,
        _loading: false,
        id: "",
        name: "",
        style: "default",
        text: "",
        value: ""
      };
      var style_to_class = {
        "default": "",
        primary: "btn_primary",
        danger: "btn_danger"
      };
      var current_text = action.clicked && action.clicked_text ? action.clicked_text : action.text;
      var formatted_text = TS.emoji.graphicReplace(current_text);
      var button_model = _.merge({}, button_defaults, action, {
        btn_class: style_to_class[action.style],
        current_text: new Handlebars.SafeString(formatted_text)
      });
      return TS.templates.attachment_actions_button(button_model);
    },
    buildAttachmentActionSelectHTML: function(action, disable_actions) {
      var model = TS.attachment_actions.select.getActionModel(action, disable_actions);
      return TS.templates.attachment_actions_select(model);
    },
    shouldDoSimpleAttachment: function(attachment, msg) {
      var do_simple = false;
      if (msg.standalone_attachment) return false;
      if ((attachment.image_url || attachment.audio_url) && attachment.from_url) {
        if (msg && msg.text) {
          if (msg.text.indexOf(attachment.from_url) != -1) {
            do_simple = true;
          }
          if (TS.model.ampersands_are_inconsistent_in_from_urls) {
            if (msg.text.indexOf(attachment.from_url.replace(/&/g, "&amp;")) != -1) {
              do_simple = true;
            }
          }
        }
        if (attachment.service_name || attachment.title) do_simple = false;
      }
      return do_simple;
    },
    formatAttachments: function(msg, model_ob, enable_slack_action_links, msg_dom_id) {
      if (!msg.attachments) return "";
      var html = "";
      var i;
      var attachment_groups = [];
      var attachment;
      var attachments_to_be_shown = msg.attachments.length;
      var ATTACHMENTS_LIMIT = 20;
      if (msg.attachments.length >= ATTACHMENTS_LIMIT) {
        if (!msg._shown_attachments) {
          msg._shown_attachments = ATTACHMENTS_LIMIT;
        }
        attachments_to_be_shown = msg._shown_attachments;
      }
      for (i = 0; i < attachments_to_be_shown; i += 1) {
        attachment = msg.attachments[i];
        if (attachment.pretext || i === 0) {
          attachment_groups.push([]);
        }
        _.last(attachment_groups).push(attachment);
      }
      for (i = 0; i < attachment_groups.length; i += 1) {
        html += TS.templates.builders.formatAttachmentGroup(attachment_groups[i], msg, enable_slack_action_links, msg_dom_id, model_ob);
      }
      if (msg._shown_attachments < msg.attachments.length) {
        html += TS.templates.builders.getShowMoreAttachmentHTML(msg);
      }
      return html;
    },
    formatAttachmentGroup: function(attachments, msg, enable_slack_action_links, msg_dom_id, model_ob) {
      enable_slack_action_links = enable_slack_action_links === true;
      var html = "";
      var has_container = false;
      attachments = attachments.map(function(attachment) {
        return TS.utility.attachments.getDecoratedAttachment(attachment, msg);
      });
      var is_broadcast = msg && msg.subtype === "reply_broadcast";
      if (is_broadcast) has_container = true;
      var use_shrink_wrap = has_container && _.some(attachments, TS.utility.attachments.getMediaType);
      var has_border = has_container ? _.some(attachments, "color") : true;
      var has_link = _.some(attachments, "from_url");
      var has_indent = _.some(attachments, "indent");
      var preamble = false;
      if (is_broadcast) {
        var model_ob_id = msg.channel_id || _.get(attachments[1], "channel_id");
        var thread_ts = msg.broadcast_thread_ts;
        if ((!model_ob_id || !/\d+\.\d+/.test(thread_ts)) && attachments[1] && attachments[1].from_url) {
          var from_url = attachments[1].from_url;
          var query = TS.utility.url.urlQueryStringParse(from_url);
          if (query.cid) model_ob_id = query.cid;
          if (query.thread_ts) thread_ts = query.thread_ts;
        }
        model_ob = TS.shared.getModelObById(model_ob_id);
        if (model_ob && thread_ts) {
          if (thread_ts.indexOf(".") < 0) thread_ts = thread_ts.substr(0, 10) + "." + thread_ts.substr(10);
          var preamble_args = {
            thread_ts: thread_ts,
            model_ob_id: model_ob.id,
            convo_href: TS.utility.msgs.constructConversationPermalink(model_ob, thread_ts)
          };
          preamble = TS.templates.reply_broadcast_preamble(preamble_args);
          preamble = new Handlebars.SafeString(preamble);
        }
      }
      var attachment;
      for (var i = 0; i < attachments.length; i += 1) {
        attachment = attachments[i];
        if (!attachment) {
          TS.info("formatAttachments bad attach");
          TS.dir(0, msg);
          continue;
        }
        if (attachment.from_url && (TS.boot_data.feature_attachments_inline || TS.templates.builders.shouldDoSimpleAttachment(attachment, msg))) {
          html += "";
          continue;
        }
        if (attachment.ts) {
          attachment.ts_link = TS.utility.msgs.constructMsgPermalink(model_ob, attachment.ts.toString());
        }
        if (!TS.inline_attachments.shouldShow(attachment, msg)) {
          html += "";
          continue;
        }
        if (attachment.actions && attachment.actions.length) {
          var ACTION_TYPE_WHITELIST = ["button", "select"];
          var action;
          var legacy_actions = [];
          var new_actions = [];
          for (var j = 0; j < attachment.actions.length; j += 1) {
            action = attachment.actions[j];
            if (_.includes(ACTION_TYPE_WHITELIST, action.type)) {
              new_actions.push(action);
            } else {
              legacy_actions.push(action);
            }
          }
          if (legacy_actions.length) {
            attachment.legacy_actions = legacy_actions;
          }
          if (new_actions.length) {
            attachment.actions = new_actions;
          }
        }
        var has_content = TS.utility.attachments.hasContent(attachment, ["pretext"]);
        if (has_content) {
          var next_attachment = attachments[i + 1];
          html += TS.templates.builders.buildAttachmentHTML({
            model_ob: model_ob,
            attachment: attachment,
            has_border: has_border,
            has_indent: has_indent,
            has_container: has_container,
            break_border: has_border && next_attachment && attachment.color != next_attachment.color,
            url: null,
            msg: msg,
            msg_dom_id: msg_dom_id,
            show_initial_caret: TS.templates.builders.shouldDoSimpleAttachment(attachment, msg),
            show_media_caret: attachment.video_html || attachment.image_url || attachment.audio_html || attachment.audio_url || attachment.other_html,
            enable_slack_action_links: enable_slack_action_links,
            has_content: has_content
          });
        }
        if (is_broadcast && i === 0) {
          html += TS.templates.reply_broadcast_count(attachment);
        }
      }
      if (html || attachment.pretext) {
        return TS.templates.attachment_group({
          model_ob: model_ob,
          first_attachment: attachments[0],
          preamble: preamble,
          msg: msg,
          has_border: has_border,
          has_indent: has_indent,
          has_container: has_container,
          has_link: has_link,
          use_shrink_wrap: use_shrink_wrap,
          attachments_html: html && new Handlebars.SafeString(html),
          enable_slack_action_links: enable_slack_action_links
        });
      }
      return html;
    },
    getShowMoreAttachmentHTML: function(msg) {
      var difference = msg.attachments.length - msg._shown_attachments;
      var btn_text = "";
      var ts = msg.ts;
      var model_ob = TS.shared.getActiveModelOb();
      var clickable_show_more_link = false;
      if (TS.client && !(model_ob.is_channel && !model_ob.is_member)) {
        clickable_show_more_link = true;
        if (msg.attachments.length - msg._shown_attachments > 20) {
          btn_text = TS.i18n.t("Show next 20 items", "attachments")();
        } else {
          btn_text = TS.i18n.t("{count, plural, =1 {Show remaining # item} other {Show remaining # items}}", "attachments")({
            count: difference
          });
        }
      } else {
        btn_text = TS.i18n.t("{count, plural, =1 {# more attachment} other {# more attachments}}", "attachments")({
          count: difference
        });
      }
      return TS.templates.show_more_attachment({
        ts: ts,
        btn_text: btn_text,
        clickable_show_more_link: clickable_show_more_link
      });
    },
    formatMessageAsAttachment: function(msg, model_ob) {
      var author;
      var user_id;
      var bot_id;
      if (msg.user) {
        user_id = msg.user;
      } else if (msg.subtype === "file_comment" && msg.comment && msg.comment.user) {
        user_id = msg.comment.user;
      } else if (msg.bot_id) {
        bot_id = msg.bot_id;
      }
      if (!msg.text && msg.attachments && msg.attachments.length >= 1 && msg.attachments[0].is_share) {
        author = {
          author_name: msg.attachments[0].author_name,
          author_subname: msg.attachments[0].author_subname,
          author_icon: msg.attachments[0].author_icon,
          author_link: msg.attachments[0].author_link
        };
      } else if (user_id) {
        var member = TS.members.getMemberById(user_id);
        author = {
          author_name: TS.members.getMemberRealName(member),
          author_subname: TS.boot_data.feature_name_tagging_client ? TS.members.getMemberPreferredName(member) : member.name,
          author_icon: member.profile.image_24,
          author_link: TS.boot_data.feature_name_tagging_client ? "/team/" + user_id : "/team/" + TS.utility.htmlEntities(member.name)
        };
      } else if (bot_id) {
        var bot = TS.bots.getBotByMsg(msg);
        author = {
          author_subname: msg.username || bot.name,
          author_icon: bot && bot.icons.image_48,
          author_link: "/services/" + bot_id
        };
        if (msg.icons && msg.icons.emoji && msg.icons.image_64) author.author_icon = msg.icons.image_64;
      }
      if (!author) {
        TS.error("no author for msg " + msg.ts);
        return "";
      }
      var fake_attachment = _.extend({}, author, {
        is_msg_unfurl: true,
        id: 1,
        ts: msg.ts,
        from_url: TS.utility.msgs.constructAbsoluteMsgPermalink(model_ob, msg.ts),
        msg_subtype: msg.subtype
      });
      if (msg.text) {
        fake_attachment.text = msg.text;
        fake_attachment.mrkdwn_in_hash = {
          text: true
        };
      } else if (msg.attachments && msg.attachments.length >= 1) {
        var first_attachment = msg.attachments[0];
        fake_attachment.text = first_attachment.text || first_attachment.pretext;
      }
      TS.inline_attachments.massageAttachment(fake_attachment, 0);
      fake_attachment = TS.utility.attachments.getDecoratedAttachment(fake_attachment, msg);
      fake_attachment.from_url = null;
      var msg_html = TS.templates.builders.buildAttachmentHTML({
        attachment: fake_attachment,
        msg: msg,
        can_delete: false,
        has_content: true,
        has_border: true
      });
      msg_html = TS.templates.attachment_group({
        msg: msg,
        attachments_html: new Handlebars.SafeString(msg_html)
      });
      return msg_html;
    },
    buildSHRoomAttachment: function(room) {
      var participants = room.participants.map(function(participant_id) {
        return TS.members.getMemberById(participant_id);
      });
      var is_creator = room.created_by === TS.model.user.id;
      var dm_member = TS.model.active_im_id ? TS.members.getMemberById(TS.ims.getImById(TS.model.active_im_id).user) : null;
      var dm_member_name = dm_member ? TS.members.getMemberDisplayName(dm_member) : "";
      var duration = room.date_end ? room.date_end - room.date_start : 0;
      var title = TS.i18n.t("Shared a call", "calls")();
      if (room.channels && room.channels[0] === TS.model.active_cid) {
        title = TS.i18n.t("Started a call", "calls")();
      }
      var description = "";
      if (room.date_end) {
        if (room.is_dm_call && room.was_missed) {
          var name = is_creator ? dm_member_name : "You";
          if (room.was_rejected) {
            description = TS.i18n.t("{name} declined the call", "calls")({
              name: name
            });
          } else {
            description = TS.i18n.t("{name} missed the call", "calls")({
              name: name
            });
          }
        } else {
          description = TS.i18n.t("This call has ended", "calls")();
        }
      } else if (!room.is_dm_call) {
        description = room.participants.indexOf(TS.model.user.id) != -1 ? TS.i18n.t("You are on this call", "calls")() : TS.i18n.t("Join this call", "calls")();
      } else if (room.participants.length === 2) {
        description = TS.i18n.t("On a call with {name}", "calls")({
          name: dm_member_name
        });
      } else {
        description = (is_creator ? TS.i18n.t("Calling {name}", "calls") : TS.i18n.t("{name} is calling you", "calls"))({
          name: dm_member_name
        });
      }
      var room_name;
      if (room.name) {
        room_name = TS.i18n.t("{room_name} call", "calls")({
          room_name: room.name
        });
      } else {
        room_name = TS.i18n.t("Untitled", "calls")();
      }
      return TS.templates.message_screenhero_attachment({
        room: room,
        participants: participants,
        room_url: TS.utility.calls.getUrlForRoom(room),
        meta_room_name: TS.utility.htmlEntities(room_name),
        room_name: TS.utility.htmlEntities(room.name),
        title: title,
        description: description,
        show_description_ellipsis: room.participants.length === 2,
        show_room_link: !room.date_end,
        expand_it: TS.inline_room_previews.shouldExpand(room.id),
        duration: duration
      });
    },
    buildJoinLeaveRollUpStr: function(ob) {
      var str = "";
      if (ob.is_in) {
        if (ob.joined && ob.left) {
          str = TS.i18n.t("left and rejoined", "templates_builders")();
        } else {
          str = TS.i18n.t("joined", "templates_builders")();
        }
      } else if (ob.joined && ob.left) {
        str = TS.i18n.t("joined and left", "templates_builders")();
      } else {
        str = TS.i18n.t("left", "templates_builders")();
      }
      return str;
    },
    buildBotStr: function(msg) {
      var bot_name = TS.bots.getBotNameById(msg.bot_id);
      var bot_url = "<" + TS.boot_data.team_url + "services/" + msg.bot_id + "/|" + bot_name + ">";
      switch (msg.subtype) {
        case "bot_add":
          return TS.i18n.t("added an integration to this channel: {bot_url}", "templates_builders")({
            bot_url: bot_url
          });
        case "bot_enable":
          return TS.i18n.t("enabled an integration in this channel: {bot_url}", "templates_builders")({
            bot_url: bot_url
          });
        case "bot_disable":
          return TS.i18n.t("disabled an integration in this channel: {bot_url}", "templates_builders")({
            bot_url: bot_url
          });
        case "bot_remove":
          return TS.i18n.t("removed an integration from this channel: {bot_url}", "templates_builders")({
            bot_url: bot_url
          });
        default:
          return TS.i18n.t("updated an integration in this channel: {bot_url}", "templates_builders")({
            bot_url: bot_url
          });
      }
    },
    formatMessageByType: function(msg, do_inline_imgs, enable_slack_action_links, model_ob, starred_items_list) {
      var html = "";
      var txt;
      if (msg.ignore_if_attachments_supported) {
        return html;
      }
      do_inline_imgs = do_inline_imgs === true;
      enable_slack_action_links = enable_slack_action_links === true;
      var group;
      var inviter;
      var room;
      var channel_name;
      var inviter_name_formatted;
      var group_name;
      var formatted_topic;
      var formatted_purpose;
      var name_for_url;
      var enterprise_name;
      var mover;
      var mover_name;
      var msg_txt;
      if ((msg._jl_rollup_hash || msg._jl_rolled_up_in) && _jl_rollup_limit_reached && (!msg._jl_rolled_up_in || msg._jl_rolled_up_in !== msg.ts)) {
        return html;
      }
      _jl_rollup_limit_reached = false;
      if (msg._jl_rollup_hash && msg.user in msg._jl_rollup_hash.users) {
        inviter = TS.members.getMemberById(msg.inviter);
        var user_ob = msg._jl_rollup_hash.users[msg.user];
        var str = TS.templates.builders.buildJoinLeaveRollUpStr(user_ob);
        if (model_ob.is_group || model_ob.is_private) {
          channel_name = TS.model.group_prefix + model_ob.name;
        } else if (model_ob) {
          channel_name = "#" + model_ob.name;
        } else {
          channel_name = TS.i18n.t("the channel", "templates_builders")();
        }
        str += " " + channel_name;
        if (user_ob.is_in && inviter) {
          str = TS.i18n.t("{join_or_leave} {channel_name} by invitation from {inviter}", "templates_builders")({
            join_or_leave: TS.templates.builders.buildJoinLeaveRollUpStr(user_ob),
            channel_name: channel_name,
            inviter: "<@" + inviter.id + "|" + inviter.name + ">"
          });
        }
        var alsoA = [];
        var otherA = [];
        var also_str = TS.i18n.t("along with", "templates_builders")();
        var inviter_name;
        if (user_ob.is_in && inviter) {
          inviter_name = "<@" + inviter.id + "|" + inviter.name + ">";
        }
        var did_invite;
        var str_builder;
        var ob;
        var count = 0;
        for (var k in msg._jl_rollup_hash.users) {
          if (k == msg.user) continue;
          if (count == _JL_ROLLUP_LIMIT) {
            _jl_rollup_limit_reached = true;
            break;
          }
          ob = msg._jl_rollup_hash.users[k];
          if (ob.is_in === user_ob.is_in) {
            if (ob.is_in) {
              if (ob.inviter == msg.user) {
                also_str = TS.i18n.t("and invited", "templates_builders")();
                did_invite = true;
              }
              if (ob.inviter && (ob.inviter == user_ob.inviter || ob.inviter == msg.user)) {
                alsoA.push("<@" + k + ">");
              } else {
                otherA.push("<@" + k + "> " + TS.templates.builders.buildJoinLeaveRollUpStr(ob));
              }
            } else {
              alsoA.push("<@" + k + ">");
            }
          } else {
            otherA.push("<@" + k + "> " + TS.templates.builders.buildJoinLeaveRollUpStr(ob));
          }
          count += 1;
        }
        if (alsoA.length) {
          if (did_invite) {
            if (otherA.length) {
              if (_jl_rollup_limit_reached) {
                if (inviter_name) {
                  str_builder = TS.i18n.t('{joined_or_left} {channel_name} by invitation from {inviter}, and invited {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders");
                } else {
                  str_builder = TS.i18n.t('{joined_or_left} {channel_name}, and invited {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders");
                }
              } else if (inviter_name) {
                str_builder = TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}, and invited {users}. Also, {others}.", "templates_builders");
              } else {
                str_builder = TS.i18n.t("{joined_or_left} {channel_name}, and invited {users}. Also, {others}.", "templates_builders");
              }
            } else if (_jl_rollup_limit_reached) {
              if (inviter_name) {
                str_builder = TS.i18n.t('{joined_or_left} {channel_name} by invitation from {inviter}, and invited {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders");
              } else {
                str_builder = TS.i18n.t('{joined_or_left} {channel_name}, and invited {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders");
              }
            } else if (inviter_name) {
              str_builder = TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}, and invited {users}", "templates_builders");
            } else {
              str_builder = TS.i18n.t("{joined_or_left} {channel_name}, and invited {users}", "templates_builders");
            }
          } else if (otherA.length) {
            if (_jl_rollup_limit_reached) {
              if (inviter_name) {
                str_builder = TS.i18n.t('{joined_or_left} {channel_name} by invitation from {inviter}, along with {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders");
              } else {
                str_builder = TS.i18n.t('{joined_or_left} {channel_name}, along with {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders");
              }
            } else if (inviter_name) {
              str_builder = TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}, along with {users}. Also, {others}.", "templates_builders");
            } else {
              str_builder = TS.i18n.t("{joined_or_left} {channel_name}, along with {users}. Also, {others}.", "templates_builders");
            }
          } else if (_jl_rollup_limit_reached) {
            if (inviter_name) {
              str_builder = TS.i18n.t('{joined_or_left} {channel_name} by invitation from {inviter}, along with {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders");
            } else {
              str_builder = TS.i18n.t('{joined_or_left} {channel_name}, along with {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders");
            }
          } else if (inviter_name) {
            str_builder = TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}, along with {users}", "templates_builders");
          } else {
            str_builder = TS.i18n.t("{joined_or_left} {channel_name}, along with {users}", "templates_builders");
          }
          str += ", " + also_str + " " + alsoA.join(", ");
          html = TS.format.formatNoHighlightsNoSpecials(str);
          if (_jl_rollup_limit_reached) html += TS.i18n.t(' and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders")();
          if (otherA.length) {
            var other_str = TS.i18n.t(". Also, {others}", "templates_builders")({
              others: otherA.join(", ")
            });
            html += TS.format.formatNoHighlightsNoSpecials(other_str);
            if (_jl_rollup_limit_reached) html += TS.i18n.t(' along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>', "templates_builders")();
            html += ".";
          }
        } else if (otherA.length) {
          if (_jl_rollup_limit_reached) {
            if (inviter_name) {
              str_builder = TS.i18n.t('{joined_or_left} {channel_name} by invitation from {inviter}. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders");
            } else {
              str_builder = TS.i18n.t('{joined_or_left} {channel_name}. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders");
            }
          } else if (inviter_name) {
            str_builder = TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}. Also, {others}.", "templates_builders");
          } else {
            str_builder = TS.i18n.t("{joined_or_left} {channel_name}. Also, {others}.", "templates_builders");
          }
          str += TS.i18n.t(". Also, {others}", "templates_builders")({
            others: otherA.join(", ")
          });
          html = TS.format.formatNoHighlightsNoSpecials(str);
          if (_jl_rollup_limit_reached) html += TS.i18n.t(' along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>', "templates_builders")();
          html += ".";
        } else {
          html = TS.format.formatNoHighlightsNoSpecials(str);
          if (inviter_name) {
            str_builder = TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}", "templates_builders");
          } else {
            str_builder = TS.i18n.t("{joined_or_left} {channel_name}", "templates_builders");
          }
        }
        if (TS.boot_data.feature_tinyspeck) {
          var new_html = str_builder({
            joined_or_left: TS.templates.builders.buildJoinLeaveRollUpStr(user_ob),
            channel_name: channel_name,
            inviter: inviter ? TS.format.formatNoHighlightsNoSpecials("<@" + inviter.id + "|" + inviter.name + ">") : "",
            users: TS.format.formatNoHighlightsNoSpecials(alsoA.join(", ")),
            others: TS.format.formatNoHighlightsNoSpecials(otherA.join(", "))
          });
          if (html !== new_html) {
            TS.info("- - -");
            TS.info("TS only: issue with user leave/join message. Please message @steveb with the following info:");
            TS.info("old html:", html);
            TS.info("new html:", new_html);
            TS.info("- - -");
          }
          html = new_html;
        }
      } else if (msg.subtype === "channel_join") {
        inviter = TS.members.getMemberById(msg.inviter);
        if (model_ob.is_private) {
          channel_name = TS.model.group_prefix + model_ob.name;
        } else if (model_ob) {
          channel_name = "#" + model_ob.name;
        } else {
          channel_name = TS.i18n.t("the channel", "templates_builders")();
        }
        if (inviter) {
          inviter_name_formatted = "<@" + inviter.id + "|" + inviter.name + ">";
          txt = TS.i18n.t("joined {channel_name} from an invitation by {inviter}", "templates_builders")({
            channel_name: channel_name,
            inviter: inviter_name_formatted
          });
          html = TS.format.formatNoHighlightsNoSpecials(txt, msg);
        } else {
          html = TS.i18n.t("joined {channel_name}", "templates_builders")({
            channel_name: channel_name
          });
        }
      } else if (msg.subtype === "channel_leave") {
        if (model_ob.is_private) {
          channel_name = TS.model.group_prefix + model_ob.name;
        } else if (model_ob) {
          channel_name = "#" + model_ob.name;
        } else {
          channel_name = TS.i18n.t("the channel", "templates_builders")();
        }
        html = TS.i18n.t("left {channel_name}", "templates_builders")({
          channel_name: channel_name
        });
      } else if (msg.subtype === "channel_name") {
        html = TS.i18n.t('renamed the channel from "{old_name}" to "{new_name}"', "templates_builders")({
          old_name: msg.old_name,
          new_name: msg.name
        });
      } else if (msg.subtype === "channel_topic") {
        if (!msg.topic) {
          html = TS.i18n.t("cleared the channel topic", "templates_builders")();
        } else {
          formatted_topic = TS.format.formatWithOptions(msg.topic, msg, {
            no_highlights: true
          });
          html = TS.i18n.t('set the channel topic: <span class="topic no_jumbomoji">{topic}</span>', "templates_builders")({
            topic: formatted_topic
          });
        }
      } else if (msg.subtype === "channel_purpose") {
        if (!msg.purpose) {
          html = TS.i18n.t("cleared the channel purpose", "templates_builders")();
        } else {
          formatted_purpose = TS.format.formatWithOptions(msg.purpose, msg, {
            no_highlights: true
          });
          html = TS.i18n.t('set the channel purpose: <span class="purpose no_jumbomoji">{purpose}</span>', "templates_builders")({
            purpose: formatted_purpose
          });
        }
      } else if (msg.subtype === "group_join") {
        group = model_ob;
        group_name = group ? TS.model.group_prefix + group.name : TS.i18n.t("the private channel", "templates_builders")();
        inviter = TS.members.getMemberById(msg.inviter);
        if (inviter) {
          inviter_name_formatted = "<@" + inviter.id + "|" + inviter.name + ">";
          txt = TS.i18n.t("joined {group_name} from an invitation by {inviter}", "templates_builders")({
            group_name: group_name,
            inviter: inviter_name_formatted
          });
          html = TS.format.formatNoHighlightsNoSpecials(txt, msg);
        } else {
          html = TS.i18n.t("joined {group_name}", "templates_builders")({
            group_name: group_name
          });
        }
      } else if (msg.subtype === "group_leave") {
        group = model_ob;
        group_name = group ? TS.model.group_prefix + group.name : TS.i18n.t("the private channel", "templates_builders")();
        html = TS.i18n.t("left {group_name}", "templates_builders")({
          group_name: group_name
        });
      } else if (msg.subtype === "group_name") {
        html = TS.i18n.t('renamed the private channel from "{old_name}" to "{new_name}"', "templates_builders")({
          old_name: msg.old_name,
          new_name: msg.name
        });
      } else if (msg.subtype === "group_topic") {
        if (!msg.topic) {
          html = TS.i18n.t("cleared the channel topic", "templates_builders")();
        } else {
          formatted_topic = TS.format.formatWithOptions(msg.topic, msg, {
            no_highlights: true
          });
          html = TS.i18n.t('set the channel topic: <span class="no_jumbomoji">{topic}</span>', "templates_builders")({
            topic: formatted_topic
          });
        }
      } else if (msg.subtype === "group_purpose") {
        if (!msg.purpose) {
          html = TS.i18n.t("cleared the channel purpose", "templates_builders")();
        } else {
          formatted_purpose = TS.format.formatWithOptions(msg.purpose, msg, {
            no_highlights: true
          });
          html = TS.i18n.t('set the channel purpose: <span class="no_jumbomoji">{purpose}</span>', "templates_builders")({
            purpose: formatted_purpose
          });
        }
      } else if (msg.subtype === "group_archive") {
        group = model_ob;
        group_name = group ? TS.model.group_prefix + group.name : TS.i18n.t("the private channel", "templates_builders")();
        enterprise_name = _.get(TS.model.enterprise, "name", "");
        mover_name = TS.i18n.t("your team admin", "templates_builders")();
        if (msg.user) {
          mover = TS.members.getMemberById(msg.user);
          mover_name = TS.format.formatNoHighlightsNoSpecials("<@" + mover.id + "|" + mover.name + ">");
        }
        name_for_url = TS.boot_data.feature_intl_channel_names ? group.id : group.name;
        if (TS.client && group && group.is_archived) {
          if (TS.model.archive_view_is_showing) {
            if (group.is_moved == 1) {
              html = TS.i18n.t('moved {group_name} to another {enterprise_name} team. The contents up until this point are still available in search and browsable in the <a target="_blank" href="/archives/{name_for_url}?force-browser=1">archives</a>. 							If you need access to this channel going forward, please contact {mover_name}.', "templates_builders")({
                group_name: group_name,
                enterprise_name: enterprise_name,
                mover_name: mover_name,
                name_for_url: name_for_url
              });
            } else {
              html = TS.i18n.t('archived {group_name}. The contents will still be available in search and browsable in the <a target="_blank" href="/archives/{name_for_url}?force-browser=1">archives</a>.', "templates_builders")({
                group_name: group_name,
                name_for_url: name_for_url
              });
            }
          } else {
            var method = "TS.shared.closeArchivedChannel";
            var group_id_quoted = "'" + group.id + "'";
            if (group.is_moved == 1) {
              html = TS.i18n.t('moved {group_name} to another {enterprise_name} team. The contents up until this point are still available in search and browsable in the <a target="_blank" href="/archives/{name_for_url}?force-browser=1">archives</a>. 							If you need access to this channel going forward, please contact {mover_name}.', "templates_builders")({
                group_name: group_name,
                enterprise_name: enterprise_name,
                mover_name: mover_name,
                name_for_url: name_for_url
              });
            } else {
              html = TS.i18n.t('archived {group_name}. The contents will still be available in search and browsable in the <a target="_blank" href="/archives/{name_for_url}?force-browser=1">archives</a>. 							It can also be un-archived at any time. To close it now, <a onclick="{method}({group_id})">click here</a>.', "templates_builders")({
                group_name: group_name,
                name_for_url: name_for_url,
                method: method,
                group_id: group_id_quoted
              });
            }
          }
        } else if (group.is_moved == 1) {
          html = TS.i18n.t("moved {group_name} to another {enterprise_name} team", "templates_builders")({
            group_name: group_name,
            enterprise_name: enterprise_name
          });
        } else if (group.is_moved == 0) {
          html = TS.i18n.t("archived {group_name}", "templates_builders")({
            group_name: group_name
          });
        }
      } else if (msg.subtype === "group_unarchive") {
        group = model_ob;
        group_name = group ? TS.model.group_prefix + group.name : TS.i18n.t("the private channel", "templates_builders")();
        html = TS.i18n.t("un-archived {group_name}", "templates_builders")({
          group_name: group_name
        });
      } else if (msg.subtype === "channel_archive") {
        var channel_id_quoted = "'" + model_ob.id + "'";
        if (model_ob.is_private) {
          channel_name = TS.model.group_prefix + model_ob.name;
        } else if (model_ob) {
          channel_name = "#" + model_ob.name;
        } else {
          channel_name = TS.i18n.t("the channel", "templates_builders")();
        }
        name_for_url = TS.boot_data.feature_intl_channel_names ? model_ob.id : model_ob.name;
        enterprise_name = _.get(TS.model.enterprise, "name", "");
        if (TS.client && model_ob.is_moved == 1) {
          if (msg.user) {
            mover = TS.members.getMemberById(msg.user);
            mover_name = TS.format.formatNoHighlightsNoSpecials("<@" + mover.id + "|" + mover.name + ">");
          }
          if (TS.model.archive_view_is_showing) {
            html = TS.i18n.t('moved {channel_name} to another {enterprise_name} team. The contents up until this point are still available in search and browsable in the <a target="_blank" href="/archives/{name_for_url}?force-browser=1">archives</a>. 						If you need access to this channel going forward, please contact {mover_name}.', "templates_builders")({
              channel_name: channel_name,
              enterprise_name: enterprise_name,
              mover_name: mover_name,
              name_for_url: name_for_url
            });
          } else {
            html = TS.i18n.t('moved {channel_name} to another {enterprise_name} team. The contents up until this point are still available in search and browsable in the <a target="_blank" href="/archives/{name_for_url}?force-browser=1">archives</a>. 						If you need access to this channel going forward, please contact {mover_name}. To close it now, <a onclick="TS.channels.closeArchivedChannel({channel_id})">click here</a>.', "templates_builders")({
              channel_name: channel_name,
              enterprise_name: enterprise_name,
              mover_name: mover_name,
              name_for_url: name_for_url,
              channel_id: channel_id_quoted
            });
          }
        } else if (TS.client && model_ob) {
          if (TS.model.archive_view_is_showing) {
            html = TS.i18n.t('archived {channel_name}. The contents will still be available in search and browsable in the <a target="_blank" href="/archives/{name_for_url}?force-browser=1">archives</a>.', "templates_builders")({
              channel_name: channel_name,
              name_for_url: name_for_url
            });
          } else {
            html = TS.i18n.t('archived {channel_name}. The contents will still be available in search and browsable in the <a target="_blank" href="/archives/{name_for_url}?force-browser=1">archives</a>. 						It can also be un-archived at any time. To close it now, <a onclick="TS.channels.closeArchivedChannel({channel_id})">click here</a>.', "templates_builders")({
              channel_name: channel_name,
              name_for_url: name_for_url,
              channel_id: channel_id_quoted
            });
          }
        } else if (model_ob && model_ob.is_moved == 1) {
          html = TS.i18n.t("moved {channel_name} to another {enterprise_name} team", "templates_builders")({
            channel_name: channel_name,
            enterprise_name: enterprise_name
          });
        }
      } else if (msg.subtype === "channel_unarchive") {
        if (model_ob.is_private) {
          channel_name = TS.model.group_prefix + model_ob.name;
        } else if (model_ob) {
          channel_name = "#" + model_ob.name;
        } else {
          channel_name = TS.i18n.t("the channel", "templates_builders")();
        }
        html = TS.i18n.t("un-archived {channel_name}", "templates_builders")({
          channel_name: channel_name
        });
      } else if (msg.subtype === "me_message") {
        html = "<i>" + TS.format.formatWithOptions(msg.text, msg, {
          do_inline_imgs: do_inline_imgs
        }) + "</i>";
      } else if (msg.subtype === "play_sound") {
        html = TS.i18n.t('played "{msg_sound}"', "templates_builders")({
          msg_sound: msg.sound
        });
      } else if (msg.subtype === "sh_room_shared" || msg.subtype === "sh_room_created") {
        if (msg.subtype === "sh_room_shared") {} else {}
        if (!starred_items_list && msg._room_id) {
          room = TS.rooms.getRoomById(msg._room_id);
        }
        if (starred_items_list) {
          html += "<span>" + TS.i18n.t("Shared a call", "templates_builders")() + "</span>";
        } else if (room) {
          html += TS.templates.builders.buildSHRoomAttachment(room);
        } else {}
      } else if (msg.subtype === "bot_add" || msg.subtype === "bot_enable" || msg.subtype === "bot_updated" || msg.subtype === "bot_disable" || msg.subtype === "bot_remove") {
        msg_txt = TS.templates.builders.buildBotStr(msg);
        html = TS.format.formatWithOptions(msg_txt, msg, {
          do_inline_imgs: do_inline_imgs,
          enable_slack_action_links: enable_slack_action_links,
          no_highlights: true
        });
      } else if (msg.subtype === "reminder_add" || msg.subtype === "reminder_delete") {
        html = TS.format.formatWithOptions(msg.text, msg, {
          do_inline_imgs: do_inline_imgs,
          enable_slack_action_links: enable_slack_action_links,
          no_highlights: true
        });
      } else {
        html = TS.format.formatWithOptions(msg.text, msg, {
          do_inline_imgs: do_inline_imgs,
          enable_slack_action_links: enable_slack_action_links
        });
      }
      if (!html && html !== "") {
        TS.warn("no html msg.subtype:" + msg.subtype);
        return "";
      }
      html = TS.utility.msgs.handleSearchHighlights(html);
      return html;
    },
    msgHtmlForSearch: function(msg, model_ob, result_type, main_msg, prev_msg) {
      if (msg.subtype !== "bot_message") {
        msg.subtype = null;
      }
      var html = "";
      if (result_type === "extract") {
        html += '<div class="search_result_with_extract">';
        html += '<div class="extract_expand_text">' + TS.i18n.t("Expand", "template_builders")() + "</div>";
        html += '<div class="extract_expand_icons blue"><i class="ts_icon ts_icon_chevron_up up_arrow"></i><i class="ts_icon ts_icon_chevron_down down_arrow"></i></div>';
      } else if (result_type === "context") {
        html += '<div class="search_result_for_context">';
      } else {
        html += '<div class="search_result_for_extra_context">';
      }
      html += TS.templates.builders.msgs.buildHTML({
        msg: msg,
        msg_dom_id: TS.templates.makeMsgDomIdInSearch(msg.ts, main_msg),
        model_ob: model_ob,
        container_id: "search_message_results",
        standalone: true,
        for_search_display: true,
        search_result_type: result_type,
        prev_msg: prev_msg
      });
      html += "</div>";
      return html;
    },
    msgHtmlForSearchTopResults: function(msg) {
      if (msg.subtype !== "bot_message") {
        msg.subtype = null;
      }
      var show_attachments = (!msg.extracts || msg.extracts.length == 0) && msg.attachments;
      var html = TS.templates.builders.msgs.buildHTML({
        msg: msg,
        msg_dom_id: TS.templates.makeMsgDomIdInSearchTopResults(msg.ts, msg, "sort_top_results"),
        model_ob: msg.channel,
        container_id: "search_message_results",
        standalone: true,
        for_top_results_search_display: true,
        no_attachments: !show_attachments
      });
      return html;
    },
    buildMsgHTMLForSearchTopResults: function(main_msg) {
      return TS.templates.builders.msgHtmlForSearchTopResults(main_msg);
    },
    buildMsgHTMLForSearch: function(main_msg) {
      var model_ob = main_msg.channel;
      var html = "";
      var messages = [];
      if (main_msg.previous_2) messages.push(main_msg.previous_2);
      if (main_msg.previous) messages.push(main_msg.previous);
      messages.push(main_msg);
      if (main_msg.next) messages.push(main_msg.next);
      if (main_msg.next_2) messages.push(main_msg.next_2);
      if (messages.length > 1 && !TS.search.view.resultHasExtracts(main_msg)) {
        main_msg.force_extract_type = "extract";
        if (main_msg.previous) main_msg.previous.force_extract_type = "context";
        if (main_msg.next) main_msg.next.force_extract_type = "context";
      }
      var prev_msg;
      messages.forEach(function(msg, inx) {
        var result_type;
        if (msg.force_extract_type) {
          result_type = msg.force_extract_type;
        } else {
          result_type = TS.search.view.determineMessageResultType(messages, inx);
        }
        if (!msg.permalink && main_msg.permalink && result_type !== "extract") {
          msg.permalink = main_msg.permalink;
        }
        if (!msg.team && main_msg.team && result_type !== "extract") {
          msg.team = main_msg.team;
        }
        html += TS.templates.builders.msgHtmlForSearch(msg, model_ob, result_type, main_msg, prev_msg);
        prev_msg = msg;
      });
      return html;
    },
    search_ellipsis: '<span class="extract_ellipsis">&hellip;</span>',
    buildStar: function(type, ob, parent_ob) {
      var star_components = _buildStarComponents(type, ob, parent_ob);
      if (!_.isObject(star_components)) {
        return {};
      }
      return TS.templates.star(star_components);
    },
    buildStarWithTip: function(type, ob, parent_ob) {
      var star_components = _buildStarComponents(type, ob, parent_ob);
      if (!_.isObject(star_components)) {
        return {};
      }
      return TS.templates.star_with_tip(star_components);
    },
    buildMentionHTML: function(mention) {
      var msg = mention.message;
      var html = "";
      if (!msg) return html;
      if (msg.subtype === "file_share" || msg.subtype === "file_mention" || msg.subtype === "file_comment" || msg.subtype === "file_reaction") {
        if (!msg.file) return html;
      }
      var model_ob = TS.shared.getModelObById(mention.channel);
      if (!model_ob) return html;
      var rxns;
      var max_rxns_to_display = 4;
      var rxns_to_display = [];
      var rxn_members = "";
      var jump_link = "";
      var msg_html = "";
      var for_mention_rxn_display = mention.type === "reaction";
      jump_link = TS.templates.builders.strBuilder('<button type="button" class="btn_link msg_right_link msg_jump" data-cid="${cid}">' + TS.i18n.t("Jump", "templates_builders")() + "</button>", {
        cid: model_ob.id
      });
      msg_html = TS.templates.builders.msgs.buildHTML({
        msg: msg,
        model_ob: model_ob,
        standalone: true,
        jump_link: jump_link,
        no_attachments: !!msg.text,
        for_mention_display: true,
        for_mention_rxn_display: for_mention_rxn_display
      });
      html = msg_html;
      if (for_mention_rxn_display) {
        var rxn_key = TS.rxns.getRxnKeyByMsgType(msg);
        rxns = TS.rxns.getExistingRxnsByKey(rxn_key);
        if (!rxns) return "";
        var newest_rxn = rxns[rxns.length - 1];
        var newest_rxn_member_id = newest_rxn.users[newest_rxn.users.length - 1];
        if (!TS.rxns.getRxnFromRxns(rxns, newest_rxn.name)) return "";
        var newest_member = TS.members.getMemberById(newest_rxn_member_id);
        var all_rxners_but_newest = TS.rxns.getAllUniqueRxners(rxns, newest_rxn_member_id);
        var total_count = all_rxners_but_newest.length + 1;
        if (total_count == 2) {
          var other_member = TS.members.getMemberById(all_rxners_but_newest[0]);
          rxn_members = TS.i18n.t("{user} & {another_user}", "rxn")({
            user: TS.templates.builders.makeMemberPreviewLink(newest_member, true),
            another_user: TS.templates.builders.makeMemberPreviewLink(other_member)
          });
        } else if (total_count > 2) {
          var should_escape = true;
          var include_at_sign = true;
          var tooltip_names = all_rxners_but_newest.map(function(member_id) {
            return TS.members.getMemberDisplayNameById(member_id, should_escape, include_at_sign);
          });
          var final_count = total_count - 1;
          rxn_members = TS.i18n.t('{user} & <span class="ts_tip ts_tip_multiline ts_tip_lazy ts_tip_top" title="{names}">{count, plural, =1 {# other} other {# others}}</span>', "rxn")({
            user: TS.templates.builders.makeMemberPreviewLink(newest_member, true),
            names: TS.i18n.listify(tooltip_names).join(""),
            count: final_count
          });
        } else {
          rxn_members = TS.templates.builders.makeMemberPreviewLink(newest_member, true);
        }
        rxns_to_display = rxns.filter(function(rxn) {
          return TS.emoji.isValidName(rxn.name);
        }).slice(0, max_rxns_to_display).map(function(rxn) {
          return new Handlebars.SafeString(TS.emoji.graphicReplace(":" + rxn.name + ":"));
        });
        var template_args = {
          ts: msg.ts,
          rxns_to_display: rxns_to_display,
          msg_html: new Handlebars.SafeString(msg_html),
          rxn_members: new Handlebars.SafeString(rxn_members),
          jump_link_html: new Handlebars.SafeString(jump_link),
          is_file_reaction: msg.subtype === "file_reaction"
        };
        if (msg.thread_ts) template_args.thread_ts = msg.thread_ts;
        html = TS.templates.mentions_rxn(template_args);
      }
      return html;
    },
    buildMentions: function() {
      TS.mentions.weaveInRxnRecords();
      var html = "";
      var prev_mention = null;
      var member = TS.model.user;
      if (!member.mentions || !member.mentions.length) return html;
      var mentions = [];
      mentions = member.mentions;
      $.each(mentions, function(i, mention) {
        var h;
        try {
          h = TS.templates.builders.buildMentionHTML(mention);
        } catch (e) {
          TS.error("Problem building mention html for " + mention.message.ts + " in " + mention.channel);
          TS.error(e);
        }
        if (!h) return;
        var before_html = "";
        var model_ob = TS.shared.getModelObById(mention.channel);
        var msg = mention.message;
        var showing_day_divider = !prev_mention;
        if (prev_mention && !TS.utility.date.sameDay(TS.utility.date.toDateObject(prev_mention.rxn_ts || prev_mention.message.ts), TS.utility.date.toDateObject(mention.rxn_ts || msg.ts))) {
          showing_day_divider = true;
        }
        if (showing_day_divider) {
          if (prev_mention) {
            before_html = "</div>";
          }
          before_html += '<div class="mention_day_container_div">' + TS.templates.messages_day_divider({
            ts: mention.rxn_ts || msg.ts
          });
        }
        var prev_cid = prev_mention && prev_mention.channel;
        if (model_ob && (model_ob.is_channel || model_ob.is_mpim || model_ob.is_group)) {
          if (prev_cid != model_ob.id || showing_day_divider) {
            before_html += TS.templates.mentions_item({
              model_ob: model_ob
            });
          }
        }
        html += before_html + h;
        prev_mention = mention;
      });
      if (html) {
        html += "</div>";
      }
      return html;
    },
    buildStarredItemHTML: function(star) {
      var html = "<div class='star_item'>";
      var template_args = {
        star: star,
        current_user_id: TS.model.user.id
      };
      var model_ob;
      if (star.type === "message") {
        var msg = star.message;
        var im_with_disabled_user = false;
        model_ob = TS.shared.getModelObById(star.channel);
        if (!model_ob) {
          TS.warn("channel " + star.channel + " for this starred message was probably deleted");
          return "";
        }
        if (model_ob.is_im) {
          var recipient = TS.members.getMemberById(model_ob.user);
          star.message.recipient = recipient;
          if (TS.ims.isImWithDeletedMember(model_ob)) {
            im_with_disabled_user = true;
          }
        }
        var jump_link = "";
        if (!im_with_disabled_user) {
          jump_link = TS.templates.builders.strBuilder('<button type="button" class="btn_unstyle star_jump msg_right_link btn btn_outline" data-cid="${cid}">' + TS.i18n.t("Jump", "templates_builders")() + "</button>", {
            cid: model_ob.id
          });
        }
        html += TS.templates.builders.msgs.buildHTML({
          msg: msg,
          model_ob: model_ob,
          standalone: true,
          starred_items_list: true,
          starred_items_actions: true,
          jump_link: jump_link,
          no_attachments: !!msg.text,
          full_date: true
        });
      } else if (star.type === "file") {
        html += TS.templates.builders.fileHTML(star.file);
      } else if (star.type === "channel" || star.type === "group") {
        model_ob = TS.shared.getModelObById(star.channel);
        if (!model_ob) {
          TS.warn("channel or group " + star.channel + " was probably deleted");
          return "";
        }
        template_args.model_ob = model_ob;
        html += TS.templates.star_item(template_args);
      } else {
        template_args.from_starred_item = true;
        html += TS.templates.star_item(template_args);
      }
      html += "</div>";
      return html;
    },
    buildPinInfoHtml: function(msg) {
      var template_args = {};
      var pin_data = TS.pins.getPinData(msg);
      if (pin_data && pin_data.created_by && pin_data.created) {
        var user = TS.members.getMemberById(pin_data.created_by);
        template_args.user = user;
        template_args.ts = pin_data.created;
        template_args.complete_data = template_args.user && template_args.ts;
      } else {
        template_args.complete_data = false;
      }
      var html = TS.templates.pinned_message_info(template_args);
      return new Handlebars.SafeString(html);
    },
    buildHighlightsInfoHtml: function(msg) {
      var html = TS.templates.highlights_message_info(msg);
      return new Handlebars.SafeString(html);
    },
    buildInlineImgTogglerAndDiv: function(key, container_id, args) {
      var inline_img = TS.model.inline_imgs[key];
      if (!inline_img) return "";
      return TS.templates.builders.buildInlineImgToggler(key, container_id) + " " + TS.templates.builders.buildInlineImgDiv(key, container_id, args);
    },
    buildInlineImgToggler: function(key, container_id, no_bytes, args) {
      var inline_img = TS.model.inline_imgs[key];
      if (!inline_img) {
        TS.console.warn(8675309, "buildInlineImgToggler did not find anything in TS.model.inline_imgs for key:" + key);
        return "";
      }
      var expand_it = TS.inline_imgs.shouldExpand(container_id, inline_img, args);
      var link_url = inline_img.link_url || key;
      var too_many_b = inline_img.bytes && inline_img.bytes > TS.model.inline_img_byte_limit;
      var too_many_px = inline_img.width && inline_img.height && inline_img.width * inline_img.height > TS.model.inline_img_pixel_limit;
      var show_expander = !too_many_px;
      var too_large_explain = "";
      var too_large_explain_str = "";
      if (!expand_it && (!TS.model.prefs.obey_inline_img_limit || too_many_b) || too_many_px) {
        var would_expand = !inline_img.internal_file_id && TS.model.prefs.expand_inline_imgs && TS.model.expandable_state["img_" + container_id + inline_img.src] !== false;
        if (would_expand && too_many_px) {
          show_expander = false;
          too_large_explain_str = TS.i18n.t("(Not automatically expanded because {img_width}x{img_height} is too large to display inline.)", "templates_builders")({
            img_width: inline_img.width,
            img_height: inline_img.height
          });
          too_large_explain = '<span class="too_large_for_auto_expand"> ' + too_large_explain_str + "</span>";
        } else if (would_expand && too_many_b) {
          if (TS.model.show_inline_img_size_pref_reminder && !TS.model.shown_inline_img_size_pref_reminder_once) {
            too_large_explain_str = TS.i18n.t('(Not automatically expanded because {file_size} is too large. 						You can <a class="cursor_pointer too_large_but_expand_anyway" data-real-src="{real_src}">expand it anyway</a> or <a {referer_safe_link} target="_blank" title="Open original in new tab">open it in a new window</a>. 						You can also <a class="cursor_pointer" onclick="TS.ui.prefs_dialog.start(\'messages_media\', \'#prefs_inline_media\')">change your preferences</a> to allow images of any file size to auto expand.)', "templates_builders")({
              file_size: TS.utility.convertFilesize(inline_img.bytes),
              real_src: TS.utility.htmlEntities(inline_img.src),
              referer_safe_link: TS.utility.makeRefererSafeLink(link_url)
            });
            TS.model.shown_inline_img_size_pref_reminder_once = true;
          } else {
            too_large_explain_str = TS.i18n.t('(Not automatically expanded because {file_size} is too large. 						You can <a class="cursor_pointer too_large_but_expand_anyway" data-real-src="{real_src}">expand it anyway</a> or <a {referer_safe_link} target="_blank" title="Open original in new tab">open it in a new window</a>.)', "templates_builders")({
              file_size: TS.utility.convertFilesize(inline_img.bytes),
              real_src: TS.utility.htmlEntities(inline_img.src),
              referer_safe_link: TS.utility.makeRefererSafeLink(link_url)
            });
          }
          too_large_explain = '<span class="too_large_for_auto_expand"> ' + too_large_explain_str + "</span>";
        }
      }
      var bytes = inline_img.bytes && no_bytes !== true ? '<span class="inline_img_bytes ' + (too_large_explain ? "hidden" : "") + '"> (' + TS.utility.convertFilesize(inline_img.bytes) + ")</span>" : "";
      var template_args = {
        collapser_class: "msg_inline_img_collapser",
        expander_class: "msg_inline_img_expander",
        real_src: inline_img.src,
        expand_it: expand_it
      };
      var toggler_html = TS.templates.inline_attachment_toggler({
        inline_attachment: template_args
      });
      return bytes + too_large_explain + (show_expander ? toggler_html : "");
    },
    buildInlineImgDiv: function(key, container_id, args) {
      args = args || {};
      var inline_img = TS.model.inline_imgs[key];
      if (!inline_img) return "";
      var expand_it = TS.inline_imgs.shouldExpand(container_id, inline_img, args);
      var link_url = inline_img.link_url || key;
      var preserve_aspect_ratio = !args.flush_with_attachment && inline_img.width > 0 && inline_img.height > 0;
      var file;
      if (inline_img.internal_file_id) file = TS.files.getFileById(inline_img.internal_file_id);
      var hide_by_default = !!TS.client;
      var html = "";
      var div_class = "clear_both msg_inline_img_holder msg_inline_holder";
      if (!expand_it) div_class += " hidden";
      var overflow_buttons_height = inline_img.height < 50;
      var overflow_buttons_width = inline_img.width < 200;
      var overflow_buttons = overflow_buttons_width || overflow_buttons_height;
      if (overflow_buttons) {
        div_class += " overflow_preview_actions";
        if (overflow_buttons_width) {
          div_class += " overflow_preview_actions_width";
        }
      }
      if (file) {
        div_class += " file_container";
      }
      div_class += " msg_inline_holder_rounded";
      if (!preserve_aspect_ratio) div_class += " file_container_fixed_dimensions";
      html += '<div data-real-src="' + TS.utility.htmlEntities(inline_img.src) + '" class="' + div_class + '" ';
      if (inline_img.internal_file_id) html += 'data-file-id="' + inline_img.internal_file_id + '" ';
      if (preserve_aspect_ratio) html += 'style="width:' + inline_img.width + 'px;" ';
      html += ">";
      var cmd_key = "ctrl";
      if (TS.model.is_mac) cmd_key = "cmd";
      var open_new_tab_str = TS.i18n.t("{cmd_key}+click to open original in new tab", "templates_builders")({
        cmd_key: cmd_key
      });
      var may_show_file_viewer = args && args.hasOwnProperty("maybe_show_file_viewer") ? args.maybe_show_file_viewer : true;
      var show_file_viewer_link;
      if (inline_img.internal_file_id) {
        if (file && file.mimetype.indexOf("image/") === 0) {
          show_file_viewer_link = may_show_file_viewer;
          if (file.external_type === "dropbox" || file.external_type === "gdrive" || file.external_type === "box" || file.external_type === "onedrive") {
            var file_to_show = file.thumb_720 ? file.thumb_720 : file.thumb_360;
            html += "<a " + TS.utility.makeRefererSafeLink(link_url) + ' target="_blank" title="' + open_new_tab_str + '" class="file_viewer_external_link" data-src="' + TS.utility.htmlEntities(file_to_show) + '"data-link-url="' + TS.utility.htmlEntities(link_url) + '">';
          } else if (show_file_viewer_link) {
            html += '<a href="' + link_url + '" target="_blank" class="file_viewer_channel_link file_viewer_link" data-file-id="' + inline_img.internal_file_id + '">';
          } else {
            html += '<a href="' + link_url + '" target="_blank" title="' + open_new_tab_str + '" class="file_preview_link thumbnail_link" data-file-id="' + inline_img.internal_file_id + '">';
          }
        } else {
          html += "<a " + TS.utility.makeRefererSafeLink(link_url) + ' target="_blank" class="' + file.filetype + '">';
        }
      } else {
        var img_class = "";
        var img_title = "";
        if (may_show_file_viewer) {
          img_class = "file_viewer_external_link";
        } else {
          img_title = TS.i18n.t("Click to open original in new tab", "templates_builders")();
        }
        html += "<a " + TS.utility.makeRefererSafeLink(link_url) + ' target="_blank" title="' + img_title + '" class="' + img_class + '" data-src="' + TS.utility.htmlEntities(inline_img.src) + '" data-link-url="' + TS.utility.htmlEntities(inline_img.link_url) + '"';
        if (inline_img.width) html += ' data-width="' + TS.utility.htmlEntities(inline_img.width) + '"';
        if (inline_img.height) html += ' data-height="' + TS.utility.htmlEntities(inline_img.height) + '"';
        if (inline_img.rotation) html += ' data-rotation="' + TS.utility.htmlEntities(inline_img.rotation) + '"';
        if (inline_img.content_type) html += ' data-content-type="' + TS.utility.htmlEntities(inline_img.content_type) + '"';
        html += ">";
      }
      if (preserve_aspect_ratio) html = html.replace("<a ", '<a style="width:' + inline_img.width + 'px;" ');
      html += '<div class="msg_inline_img_container">';
      html += '<div class="file_preview_preserve_aspect_ratio" ';
      if (preserve_aspect_ratio) {
        if (!file || !overflow_buttons) {
          var css_calc_string = "calc(" + inline_img.height + " / " + inline_img.width + " * 100% )";
          html += 'style="padding-top: -moz-' + css_calc_string + "; padding-top: -webkit-" + css_calc_string + "; padding-top: " + css_calc_string + ';" ';
        } else {
          html += 'style="padding-top: ' + inline_img.height + 'px;" ';
        }
      } else {
        var MAX_WIDTH = 574;
        var MAX_HEIGHT = 300;
        var MAX_RES = MAX_WIDTH / MAX_HEIGHT;
        var img_width = inline_img.display_w || inline_img.width;
        var img_height = inline_img.display_h || inline_img.height;
        var img_res = img_width / img_height;
        var reserved_width;
        var reserved_height;
        if (img_width <= MAX_WIDTH && img_height <= MAX_HEIGHT) {
          reserved_width = img_width;
          reserved_height = img_height;
        } else if (MAX_RES > img_res) {
          reserved_width = img_width * MAX_HEIGHT / img_height;
          reserved_height = MAX_HEIGHT;
        } else {
          reserved_width = MAX_WIDTH;
          reserved_height = img_height * MAX_WIDTH / img_width;
        }
        html += 'style="width: ' + Math.round(reserved_width) + "px; height: " + Math.round(reserved_height) + 'px;"';
      }
      html += ">";
      inline_img.proxied_src = TS.utility.getImgProxyURLWithOptions(inline_img.src, {});
      var src = TS.utility.htmlEntities(inline_img.proxied_src || inline_img.src);
      var figure_class = hide_by_default ? "msg_inline_img msg_inline_child hidden" : "msg_inline_img msg_inline_child";
      var figure_attr = hide_by_default ? 'data-real-background-image="' + src + '"' : 'style="background-image:url(' + src + ');"';
      var img_attr = hide_by_default ? 'data-real-src="' + src + '"' : 'src="' + src + '"';
      html += '<figure class="' + figure_class + '" ' + figure_attr + ">";
      html += "<img " + img_attr + " />";
      html += "</figure>";
      html += "</div>";
      html += "</div>";
      html += "</a>";
      if (file) {
        html += TS.templates.message_file_preview_actions({
          file: file,
          download: file.mode === "hosted",
          new_window: true
        });
      }
      html += "</div>";
      return html;
    },
    buildInlineEmailDiv: function(file_id, container_id) {
      var file = TS.files.getFileById(file_id);
      if (!file) return "";
      var template_args = {
        file: file,
        is_message: true,
        to_more_count: file.to.length - 1,
        cc_more_count: file.cc.length - 1,
        msg_dom_id: container_id
      };
      return TS.templates.file_email(template_args);
    },
    buildInlineAttachmentToggler: function(key, container_id) {
      var inline_attachment = TS.model.inline_attachments[key];
      if (!inline_attachment) return "";
      var expand_it = TS.inline_attachments.shouldExpand(container_id, inline_attachment);
      var template_args = {
        real_src: inline_attachment.from_url,
        expand_it: expand_it
      };
      var html = TS.templates.inline_attachment_toggler({
        inline_attachment: template_args
      });
      return html;
    },
    buildInlineRoomPreviewToggler: function(room_id) {
      var expand_it = TS.inline_room_previews.shouldExpand(room_id);
      var template_args = {
        collapser_class: "msg_inline_room_preview_collapser",
        expander_class: "msg_inline_room_preview_expander",
        expand_it: expand_it
      };
      var toggler_html = TS.templates.inline_attachment_toggler({
        inline_attachment: template_args
      });
      return " " + toggler_html;
    },
    buildInlineAudioToggler: function(key, container_id) {
      var inline_audio = TS.model.inline_audios[key];
      if (!inline_audio) return "";
      return TS.templates.attachment_inline_media_toggler({
        is_expanded: TS.inline_audios.shouldExpand(container_id, inline_audio),
        src: inline_audio.src,
        media_type: "audio"
      });
    },
    buildInlineAudioDiv: function(key, container_id, content) {
      var inline_audio = TS.model.inline_audios[key];
      if (!inline_audio) return "";
      var expand_it = TS.inline_audios.shouldExpand(container_id, inline_audio);
      var template_args = {
        src: inline_audio.src,
        expand_it: expand_it,
        content: content
      };
      var html = TS.templates.attachment_inline_audio_div({
        inline_audio: template_args
      });
      return html;
    },
    buildInlineOtherToggler: function(key, container_id) {
      var inline_other = TS.model.inline_others[key];
      if (!inline_other) return "";
      return TS.templates.attachment_inline_media_toggler({
        is_expanded: TS.inline_others.shouldExpand(container_id, inline_other),
        src: inline_other.src,
        media_type: "other"
      });
    },
    buildInlineOtherDiv: function(key, container_id, content) {
      var inline_other = TS.model.inline_others[key];
      if (!inline_other) return "";
      var expand_it = TS.inline_others.shouldExpand(container_id, inline_other);
      return '<div data-real-src="' + TS.utility.htmlEntities(inline_other.src) + '" class="clear_both msg_inline_other_holder msg_inline_holder ' + (expand_it ? "" : "hidden") + '">' + content + "</div>";
    },
    buildInlineVideoTogglerAndDiv: function(key, container_id) {
      var inline_video = TS.model.inline_videos[key];
      if (!inline_video) return "";
      return TS.templates.builders.buildInlineVideoToggler(key, container_id) + " " + TS.templates.builders.buildInlineVideoDiv(key, container_id);
    },
    buildInlineVideoToggler: function(key, container_id, no_title) {
      var inline_video = TS.model.inline_videos[key];
      if (!inline_video) return "";
      return TS.templates.attachment_inline_media_toggler({
        is_expanded: TS.inline_videos.shouldExpand(container_id, inline_video),
        src: inline_video.src,
        title: no_title ? "" : inline_video.title,
        media_type: "video"
      });
    },
    buildInlineVideoDiv: function(key, container_id) {
      var inline_video = TS.model.inline_videos[key];
      if (!inline_video) return "";
      var expand_it = TS.inline_videos.shouldExpand(container_id, inline_video);
      var link_url = inline_video.link_url || key;
      var hide_by_default = !!TS.client;
      var show_play = true;
      if (!inline_video.html) {
        show_play = false;
      }
      var template_args = {
        real_src: inline_video.src,
        data_url: key,
        referrer_safe_url_attributes: TS.utility.makeRefererSafeLink(link_url),
        hide_by_default: hide_by_default,
        show_play: show_play,
        proxied_src_or_src: inline_video.proxied_src || inline_video.src,
        display_w: inline_video.display_w,
        display_h: inline_video.display_h,
        expand_it: expand_it
      };
      var html = TS.templates.message_inline_video({
        inline_video: template_args
      });
      return html;
    },
    buildComments: function(file) {
      var member;
      var comments = file.comments;
      var html = "";
      for (var i = 0; i < comments.length; i += 1) {
        member = TS.members.getMemberById(comments[i].user);
        html += TS.templates.builders.buildCommentHTML({
          file: file,
          comment: comments[i],
          show_comment_actions: true,
          member: member
        });
      }
      return html;
    },
    buildCommentHTML: function(template_args) {
      return TS.templates.comment(template_args);
    },
    buildCommentStandalone: function(comment, file) {
      var entity = TS.utility.members.getEntityFromFile(file);
      var file_type;
      if (file.mode === "snippet") {
        file_type = TS.i18n.t("snippet", "comments")();
      } else if (file.mode === "post") {
        file_type = TS.i18n.t("post", "comments")();
      } else if (file.mode === "space") {
        file_type = TS.i18n.t("space", "comments")();
      } else if (file.mode === "hosted" || file.mode === "external") {
        file_type = TS.i18n.t("file", "comments")();
      }
      return TS.templates.comment_standalone({
        comment: comment,
        file: file,
        file_type: file_type,
        entity: entity,
        current_user_id: TS.model.user.id
      });
    },
    buildTeamListHTML: function(all_members, is_long_list_view, is_lazy) {
      var team_list_members = TS.members.allocateTeamListMembers(all_members);
      var members = team_list_members.members;
      var disabled_members = team_list_members.disabled_members;
      var deleted_bots = team_list_members.deleted_bots;
      var bots = team_list_members.bots;
      var restricted_members = team_list_members.restricted_members;
      var ultra_restricted_members = team_list_members.ultra_restricted_members;
      var show_bots = false;
      if (bots.length || deleted_bots.length) {
        show_bots = true;
      }
      var show_restricted_members = false;
      if (restricted_members.length || ultra_restricted_members.length || is_lazy) {
        show_restricted_members = true;
      }
      var show_disabled_members = false;
      if (disabled_members.length || is_lazy) {
        show_disabled_members = true;
      }
      var show_user_groups = false;
      var show_user_groups_help = false;
      var user_groups;
      show_user_groups = TS.model.team.plan !== "" && !TS.model.user.is_restricted;
      user_groups = TS.model.user_groups.filter(function(ug) {
        return !ug.date_delete;
      });
      show_user_groups_help = !user_groups.length;
      var $team_tabs = $("#team_tabs");
      var show_user_groups_edit = TS.permissions.members.canEditUserGroups();
      var show_user_groups_add = TS.permissions.members.canCreateAndDeleteUserGroups();
      $team_tabs.html(TS.templates.user_group_tabs({
        show_members: !!members.length,
        members: is_lazy ? [] : members,
        show_restricted_members: show_restricted_members,
        restricted_members: is_lazy ? [] : restricted_members.concat(ultra_restricted_members),
        show_disabled_members: show_disabled_members,
        disabled_members: is_lazy ? [] : disabled_members,
        show_user_groups: show_user_groups,
        user_groups: user_groups,
        show_user_groups_edit: show_user_groups_edit,
        show_user_groups_add: show_user_groups_add,
        is_enterprise: TS.boot_data.page_needs_enterprise
      }));
      var options = {
        full_profile_filter: true,
        is_long_list_view: is_long_list_view,
        include_bots: true,
        include_deleted: false
      };
      TS.members.view.bindTeamFilter("#team_filter", "#team_list_scroller", options);
      $("#team_filter input").bind("focus", function() {
        $("#team_filter .icon_search").addClass("indifferent_grey");
      }).bind("blur", function() {
        $("#team_filter .icon_search").removeClass("indifferent_grey");
      });
      if (show_user_groups) {
        var $team_tab_actions = $team_tabs.find(".tab_action:not(#search)");
        var $team_block = $("#team_block");
        $team_tabs.find("li a").on("click", function() {
          var action = $(this).data("action");
          var show_user_groups_edit = TS.permissions.members.canEditUserGroups();
          var show_user_groups_add = TS.permissions.members.canCreateAndDeleteUserGroups();
          $team_tab_actions.addClass("hidden");
          if (action === "user_group_edit") {
            if (!show_user_groups_edit && !show_user_groups_add) return;
            $team_tab_actions.removeClass("hidden");
            $team_block.addClass("hidden");
          } else {
            $team_block.removeClass("hidden");
          }
          $team_tabs.find("#" + action).removeClass("hidden");
        });
      }
      $("#team_tabs").find("li.tab").on("click", function(e) {
        var target_name = $(e.currentTarget).find("a").data("name");
        TS.model.ui_state.tab_name = target_name;
        TS.storage.storeUIState(TS.model.ui_state);
        var $search = $("#search");
        if (TS.client) TS.ui.utility.updateClosestMonkeyScroller($("#team_list_members"));
        if (TS.web && TS.web.members && TS.web.members.lazyload) {
          TS.web.members.lazyload.trigger("resize");
        }
        $("#team_list_members").trigger("resize");
        if (target_name === "user_groups") {
          TS.view.rebuildUserGroupList();
          $search.toggleClass("hidden", !TS.model.user_groups.length);
        } else {
          $search.removeClass("hidden");
        }
      });
      return TS.templates.team_list({
        members: members,
        bots: bots,
        show_bots: show_bots,
        show_restricted_members: show_restricted_members,
        restricted_members: restricted_members,
        ultra_restricted_members: ultra_restricted_members,
        show_disabled_members: show_disabled_members,
        disabled_members: disabled_members,
        deleted_bots: deleted_bots,
        show_user_groups: show_user_groups,
        user_groups: user_groups,
        show_user_groups_help: show_user_groups_help,
        is_long_list_view: is_long_list_view
      });
    },
    buildUserGroupHTML: function(user_group, is_flexpane) {
      return TS.templates.user_group_list_item({
        user_group: user_group,
        is_flexpane: is_flexpane
      });
    },
    buildUserGroupListHTML: function(all_user_groups, is_flexpane) {
      var user_group;
      var user_groups = [];
      var disabled_user_groups = [];
      var show_toggle = TS.permissions.members.canCreateAndDeleteUserGroups();
      for (var i = 0; i < all_user_groups.length; i += 1) {
        user_group = all_user_groups[i];
        if (user_group.date_delete) {
          user_group.can_delete = !user_group.auto_type && !user_group.is_external;
          disabled_user_groups.push(user_group);
        } else {
          user_groups.push(user_group);
        }
      }
      var show_user_groups_help = !is_flexpane && !user_groups.length && !disabled_user_groups.length || is_flexpane && !user_groups.length;
      return TS.templates.user_group_list({
        user_groups: user_groups,
        disabled_user_groups: disabled_user_groups,
        show_toggle: show_toggle,
        is_flexpane: is_flexpane,
        show_user_groups_help: show_user_groups_help
      });
    },
    makeChannelPrefix: function(channel) {
      if (!channel) return "";
      if (channel.is_group || channel.is_private) {
        return '<ts-icon class="ts_icon_lock"></ts-icon>';
      } else if (channel.is_channel) {
        return "#";
      }
      return "";
    },
    makeChannelLink: function(channel, omit_prefix, show_tooltip, tooltip_position) {
      if (!channel) return "ERROR: MISSING CHANNEL";
      var shared_icon = "";
      if (channel.is_shared) {
        shared_icon = _.trim(TS.templates.shared_channel_icon({
          tooltip: show_tooltip,
          tooltip_position: tooltip_position
        }));
      }
      var name_for_url = TS.utility.getChannelName(channel);
      var target = TS.utility.shouldLinksHaveTargets() ? 'target="/archives/' + name_for_url + '"' : "";
      var prefix = TS.templates.builders.makeChannelPrefix(channel);
      return '<a href="/archives/' + name_for_url + '" ' + target + ' class="channel_link" data-channel-id="' + channel.id + '">' + (omit_prefix ? "" : prefix) + channel.name + shared_icon + "</a>";
    },
    makeChannelLinkEnterpriseSearchResult: function(result) {
      var href = result.permalink;
      var target = 'target="' + TS.templates.builders.newWindowName() + '"';
      return '<a href="' + href + '"' + target + ' data-channel-id="' + result.channel.id + '">#' + result.channel.name + "</a>";
    },
    makeChannelPath: function(channel) {
      return "/messages/" + TS.utility.getChannelName(channel);
    },
    makeChannelLinkAriaLabelSafe: function(channel) {
      if (!channel) TS.warn("No valid channel to make channel link aria label");
      var name = TS.utility.htmlEntities(channel.name);
      var active_or_regular_channel = TS.model.active_channel_id === channel.id ? TS.i18n.t("active channel", "templates_builders")() : TS.i18n.t("channel", "templates_builders")();
      var unread_message = _getUnreadMessageLabelText(channel);
      var draft_message = null;
      if (TS.templates.builders.showDraftIcon(channel)) {
        draft_message = TS.i18n.t("draft", "messages")();
      }
      var aria_label = name + ", " + active_or_regular_channel + (unread_message ? ", " + unread_message : "") + (draft_message ? ", " + draft_message : "");
      return new Handlebars.SafeString(aria_label);
    },
    makeGroupLink: function(group, omit_prefix, show_tooltip, tooltip_position) {
      if (!group) return "ERROR: MISSING GROUP";
      var shared_icon = "";
      var name_for_url = TS.boot_data.feature_intl_channel_names ? group.id : group.name;
      if (group.is_shared) {
        shared_icon = TS.templates.shared_channel_icon({
          tooltip: show_tooltip,
          tooltip_position: tooltip_position
        });
      }
      var target = TS.utility.shouldLinksHaveTargets() ? 'target="/archives/' + name_for_url + '"' : "";
      return '<a href="/archives/' + name_for_url + '" ' + target + ' class="group_link" data-group-id="' + group.id + '">' + (omit_prefix ? "" : TS.model.group_prefix) + group.name + shared_icon + "</a>";
    },
    makeGroupLinkAriaLabelSafe: function(group) {
      if (!group) TS.warn("No valid group to make private channel link aria label");
      var name = TS.utility.htmlEntities(group.name);
      var active_or_regular_channel = TS.model.active_group_id === group.id ? TS.i18n.t("active channel", "templates_builders")() : TS.i18n.t("channel", "templates_builders")();
      var unread_message = _getUnreadMessageLabelText(group);
      var draft_message = null;
      if (TS.templates.builders.showDraftIcon(group)) {
        draft_message = TS.i18n.t("draft", "messages")();
      }
      var aria_label = name + ", " + active_or_regular_channel + (unread_message ? ", " + unread_message : "") + (draft_message ? ", " + draft_message : "");
      return new Handlebars.SafeString(aria_label);
    },
    makeTeamsThatHaveComplianceExportsBlurb: function(model_ob) {
      if (!model_ob || !model_ob.is_shared) return "";
      var exports_teams;
      if (model_ob.is_global_shared) {
        exports_teams = _.filter(TS.model.enterprise_teams, "has_compliance_export");
      } else {
        exports_teams = _(model_ob.shared_team_ids).map(function(id) {
          return TS.enterprise.getTeamById(id);
        }).filter("has_compliance_export").value();
      }
      var teams = TS.i18n.listify(_.map(exports_teams, "name")).join("");
      var blurb = TS.i18n.t('{team_or_teams} {teams_count, plural, =1 {has} other {have}} <a href="https://get.slack.help/hc/en-us/articles/204897248-Understanding-Slack-data-exports" target="_blank">Compliance Exports</a> enabled which allows their Team Owners to export communication history.', "templates_builders")({
        team_or_teams: teams,
        teams_count: teams.length
      });
      return new Handlebars.SafeString(blurb);
    },
    makeMpimLink: function(mpim, with_title) {
      if (!mpim) return "ERROR: MISSING MPIM";
      var target;
      var title;
      var href = TS.mpims.getMpimArchivesPath(mpim);
      if (TS.utility.shouldLinksHaveTargets()) target = TS.mpims.getMpimArchivesPath(mpim);
      if (with_title) title = TS.mpims.getTooltipText(mpim);
      return TS.templates.mpim_link({
        target: target,
        href: href,
        title: title,
        mpim: mpim
      });
    },
    makeMemberPreviewLink: function(member, show_you_for_current_user) {
      if (!member) return "";
      if (show_you_for_current_user !== true) show_you_for_current_user = false;
      var safe_name = TS.utility.htmlEntities(member.name);
      var class_extras = TS.templates.builders.makeMemberColorClass(member);
      var html;
      var target;
      if (member.is_service) {
        target = TS.utility.shouldLinksHaveTargets() ? 'target="/services/' + member.id + '"' : "";
        class_extras += " app_preview_link";
        html = '<a href="/services/' + member.id + '" ' + target + ' class="message_sender service_link ' + class_extras + '">';
      } else {
        target = TS.utility.shouldLinksHaveTargets() ? 'target="/team/' + safe_name + '"' : "";
        class_extras += member.is_bot ? " app_preview_link" : " member member_preview_link";
        class_extras += " " + TS.templates.builders.makeMemberTypeBadgeClass(member);
        html = '<a href="/team/' + safe_name + '" ' + target + ' class="message_sender ' + class_extras + '" data-member-id="' + member.id + '">';
      }
      if (show_you_for_current_user && member.id == TS.model.user.id) {
        html += TS.i18n.t("You", "templates_builders")();
      } else {
        html += TS.members.getMemberDisplayName(member, true);
      }
      html += TS.templates.builders.makeMemberTypeBadgeCompact(member, false);
      html += "</a>";
      if (member.is_bot || member.is_service) {
        html += '<span class="bot_label">' + TS.i18n.t("APP", "templates_builders")() + "</span>";
      }
      return html;
    },
    showDraftIcon: function(model_ob) {
      if (!_.isObject(model_ob)) return false;
      var last_msg_input;
      var model_id = model_ob.id;
      last_msg_input = model_ob.last_msg_input;
      if (!last_msg_input && model_ob.presence) {
        var im = TS.ims.getImByMemberId(model_ob.id);
        last_msg_input = im && im.last_msg_input;
        model_id = im && im.id;
      }
      var active_model_ob = TS.shared.getActiveModelOb();
      if (active_model_ob) {
        var active_id = active_model_ob.id;
        if (active_id && active_id == model_id && !TS.client.activeChannelIsHidden()) {
          last_msg_input = null;
        }
      }
      if (model_ob.is_channel) {
        if (model_ob.is_archived || !model_ob.is_member) last_msg_input = null;
      }
      if (model_ob.is_group && !model_ob.is_mpim) {
        if (model_ob.is_archived) last_msg_input = null;
      }
      if (!TS.permissions.members.canPostInChannel(model_ob)) {
        last_msg_input = null;
      }
      if (_.trim(last_msg_input)) {
        return true;
      }
      return false;
    },
    makeProfileImage: function(entity, options) {
      if (_.isString(entity)) {
        var member = TS.members.getMemberById(entity);
        if (member) {
          entity = member;
        } else {
          entity = TS.bots.getBotById(entity);
        }
      }
      if (!entity) return false;
      var is_lazy = options.hash.is_lazy || false;
      var image_set = entity.profile || entity.icons || {};
      var title = options.hash.title || false;
      var default_size;
      if (image_set.emoji) {
        default_size = "64";
      } else {
        default_size = "48";
      }
      var desired_size = options.hash.size || default_size;
      var size = Object.keys(TS.constants.avatar_size_map).reduce(function(carry_size, current_size) {
        if (current_size === desired_size && _getImage(image_set, current_size)) {
          return current_size;
        }
        return carry_size;
      }, default_size);
      var template_data = {
        entity: entity,
        size: desired_size,
        css_classes: _getClasses(entity, desired_size),
        image: _formatImageURI(entity, _getImage(image_set, size)),
        is_lazy: is_lazy,
        is_targettable: TS.utility.shouldLinksHaveTargets(),
        title: title
      };

      function _formatImageURI(entity, image) {
        var image_uri = [];
        image_uri.push("url('" + image + "')");
        return image_uri.join(",");
      }

      function _getImage(imageset, size) {
        var key = "image_" + size;
        if (imageset.hasOwnProperty(key)) {
          if (TS.environment.is_retina) {
            return imageset[TS.constants.avatar_size_map[size].retina] || imageset[TS.constants.avatar_size_map[size].standard];
          }
          return imageset[TS.constants.avatar_size_map[size].standard];
        }
        return false;
      }

      function _getClasses(entity, size) {
        var classes = [];
        classes.push("thumb_" + size);
        if (entity.is_bot) {
          classes.push("is_bot");
          classes.push("app_preview_link");
        } else {
          classes.push("member_preview_link");
        }
        return classes.join(" ");
      }
      return new Handlebars.SafeString(TS.templates.member_profile_image(template_data));
    },
    makeMemberPreviewLinkImage: function(id_or_member_ob, size, lazy, omit_link, omit_badge, omit_restricted_overlay, slackbot_feels) {
      var member;
      if (typeof id_or_member_ob === "object") {
        member = id_or_member_ob;
      } else {
        member = TS.members.getMemberById(id_or_member_ob);
      }
      if (!member || !member.profile) return "";
      lazy = lazy === true;
      omit_link = omit_link === true;
      omit_badge = omit_badge === true;
      omit_restricted_overlay = omit_restricted_overlay === true;
      slackbot_feels = typeof slackbot_feels === "string" ? slackbot_feels : false;
      if (id_or_member_ob === "USLACKBOT" && slackbot_feels) {
        member = TS.utility.slackbot.getWithFeels(slackbot_feels);
      }
      var img_src;
      var bg_img_style;
      var bg_img_urls;
      bg_img_style = "background-image: ";
      bg_img_urls = [];
      switch (size) {
        case 20:
          if (TS.environment.is_retina) {
            img_src = member.profile.image_48;
          } else {
            img_src = member.profile.image_24;
          }
          break;
        case 24:
          if (TS.environment.is_retina) {
            img_src = member.profile.image_48;
          } else {
            img_src = member.profile.image_24;
          }
          break;
        case 32:
          if (TS.environment.is_retina) {
            img_src = member.profile.image_72;
          } else {
            img_src = member.profile.image_32;
          }
          break;
        case 36:
          if (TS.environment.is_retina) {
            img_src = member.profile.image_72;
          } else {
            img_src = member.profile.image_48;
          }
          break;
        case 48:
          if (TS.environment.is_retina) {
            img_src = member.profile.image_72;
          } else {
            img_src = member.profile.image_48;
          }
          break;
        case 72:
          if (TS.environment.is_retina) {
            img_src = member.profile.image_192;
          } else {
            img_src = member.profile.image_72;
          }
          break;
        case 192:
          if (TS.environment.is_retina) {
            img_src = member.profile.image_512 || member.profile.image_192;
          } else {
            img_src = member.profile.image_192;
          }
          break;
        case 512:
          if (TS.environment.is_retina) {
            img_src = member.profile.image_1024 || member.profile.image_512 || member.profile.image_192;
          } else {
            img_src = member.profile.image_512 || member.profile.image_192;
          }
          break;
        default:
          if (TS.environment.is_retina) {
            img_src = member.profile.image_72;
          } else {
            img_src = member.profile.image_48;
          }
          break;
      }
      bg_img_urls.push("url('" + img_src + "')");
      if (size === 512) {
        var pre_bg_img_src = TS.environment.is_retina ? member.profile.image_72 : member.profile.image_48;
        bg_img_urls.push("url('" + pre_bg_img_src + "')");
      }
      if (lazy) {
        bg_img_style = bg_img_urls.length ? bg_img_urls.join(", ") : "";
      } else {
        bg_img_style = bg_img_urls.length ? bg_img_style + bg_img_urls.join(", ") : "";
      }
      var template_data = {
        omit_link: omit_link,
        omit_badge: omit_badge,
        lazy: lazy,
        member: member,
        size: size,
        include_restricted_overlay: !omit_restricted_overlay || true,
        bg_img_style: bg_img_style
      };
      return TS.templates.member_preview_link_image(template_data);
    },
    makeMemberPreviewCardLinkImage: function(id) {
      var member = TS.members.getMemberById(id);
      if (!member || !member.profile) return "";
      var bg_img = TS.templates.builders.makeMemberPreviewCardLinkImageBackground(id);
      var target = TS.utility.shouldLinksHaveTargets() ? 'target="/team/' + member.name + '"' : "";
      return ['<a href="/team/', member.name, '" ', target, ' class="member_preview_link member_image thumb_512" data-member-id="', member.id, '" data-thumb-size="512" style="background-image: ', bg_img, '" aria-hidden="true"></a>'].join("");
    },
    makeMemberPreviewCardLinkImageBackground: function(id) {
      var member = TS.members.getMemberById(id);
      if (!member || !member.profile) return "";
      var img_src;
      if (TS.environment.is_retina) {
        img_src = member.profile.image_1024 || member.profile.image_512 || member.profile.image_192;
      } else {
        img_src = member.profile.image_512 || member.profile.image_192;
      }
      var pre_bg_img_src = TS.environment.is_retina ? member.profile.image_72 : member.profile.image_48;
      var gradient_prefix = TS.model.mac_version && (TS.utility.compareSemanticVersions(TS.model.mac_version, "10.7") === 0 || TS.utility.compareSemanticVersions(TS.model.mac_version, "10.8") === 0) ? "-webkit-" : "";
      var bg_img_components = [gradient_prefix + "linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0) 34%, rgba(0,0,0,0.2) 66%, rgba(0,0,0,0.2) 83%, rgba(0,0,0,0.6))", "url('" + img_src + "')", "url('" + pre_bg_img_src + "')"];
      return bg_img_components.join(", ");
    },
    makeMemberLinkAriaLabelSafe: function(direct_message) {
      if (!direct_message) TS.warn("No valid direct message object to make member link aria label");
      var member = direct_message.member;
      var im = direct_message.model_ob;
      var aria_label = "";
      if (member && im) {
        var name = TS.utility.htmlEntities(TS.ims.getDisplayNameOfUserForIm(im));
        var active_or_regular_direct_message = TS.model.active_im_id === member.id ? TS.i18n.t("active direct message", "templates_builders")() : TS.i18n.t("direct message", "templates_builders")();
        var presence_state = TS.templates.makeMemberPresenceStateAriaLabel(member);
        var unread_message = _getUnreadMessageLabelText(im);
        var draft_message = null;
        if (TS.templates.builders.showDraftIcon(im)) {
          draft_message = TS.i18n.t("draft", "messages")();
        }
        aria_label = name + ", " + active_or_regular_direct_message + ", " + presence_state + (unread_message ? ", " + unread_message : "") + (draft_message ? ", " + draft_message : "");
      }
      return new Handlebars.SafeString(aria_label);
    },
    makePendingUserImage: function(user, size) {
      if (!user || !size) return "";
      var img_classes = [];
      var bg_img_urls = [];
      var img_size;
      switch (size) {
        case 24:
          img_size = 48;
          break;
        case 36:
          img_size = 72;
          break;
        default:
          img_size = 48;
      }
      var img_src = "/img/new_channel_modal/airplane_" + img_size.toString() + ".png";
      bg_img_urls.push("url('" + vvv(img_src) + "')");
      var bg_img_url_str = bg_img_urls.join(",");
      var template_data = {
        restricted: user.invite_prefs && user.invite_prefs.type === "restricted",
        img_classes: img_classes.join(" "),
        bg_img_urls: bg_img_url_str,
        size: size
      };
      return TS.templates.pending_user_image(template_data);
    },
    newWindowName: function() {
      if (TS.boot_data.app === "web" || TS.boot_data.app === "calls") {
        return "_self";
      }
      return "new_" + _session_ms.toString();
    },
    getBotIdentifier: function(msg) {
      if (!msg.bot_id && !msg.username) return null;
      var bot = TS.bots.getBotByMsg(msg);
      var name = !msg.username && bot && bot.name ? bot.name : msg.username;
      var id = bot ? bot.id : "NOBOTID";
      return id + "_" + name;
    },
    getBotName: function(msg) {
      var username = msg.username;
      if (!username) {
        var bot = TS.bots.getBotByMsg(msg);
        if (bot && bot.name) {
          username = bot.name;
        }
      }
      return username;
    },
    getBotNameWithLink: function(msg) {
      var username = msg.username;
      var bot = TS.bots.getBotByMsg(msg);
      var bot_link = TS.templates.builders.makeBotLink(bot, msg.username);
      if (!username) {
        if (bot && bot.name) {
          username = bot.name;
        }
      }
      return new Handlebars.SafeString(bot_link.start_a + TS.utility.htmlEntities(username) + bot_link.end_a);
    },
    makeBotLink: function(bot) {
      var start_a = "";
      var end_a = "";
      if (bot && !bot.deleted) {
        start_a = '<a class="app_preview_link" target="/services/' + bot.id + '" href="/services/' + bot.id + '">';
        end_a = "</a>";
      } else {
        start_a = '<a class="app_preview_link">';
        end_a = "</a>";
      }
      return {
        start_a: start_a,
        end_a: end_a
      };
    },
    makeFiletypeHTML: function(file) {
      if (file.external_type) return TS.templates.builders.makeExternalFiletypeHTML(file);
      var html = "";
      html += '<a href="' + file.url_private_download + '" ';
      html += 'target="' + file.url_private_download + '" ';
      html += 'title="' + TS.i18n.t("Download this file", "templates_builders")() + '" ';
      html += 'data-file-id="' + file.id + '" ';
      html += 'class="subtle_silver file_ssb_download_link">';
      html += TS.utility.convertFilesize(file.size) + " ";
      html += "<span>" + file.pretty_type + "</span>";
      if (file.mode === "snippet") html += " " + TS.i18n.t("snippet", "templates_builders")();
      html += "</a>";
      return html;
    },
    makeExternalFiletypeHTML: function(file) {
      if (!file.is_external) return;
      var external_filetype_html = "";
      switch (file.external_type) {
        case "gdrive":
          switch (file.filetype) {
            case "gsheet":
              external_filetype_html = TS.i18n.t("Spreadsheet from Google Drive", "templates_builders")();
              break;
            case "gdoc":
              external_filetype_html = TS.i18n.t("Document from Google Drive", "templates_builders")();
              break;
            case "gpres":
              external_filetype_html = TS.i18n.t("Presentation from Google Drive", "templates_builders")();
              break;
            case "gdraw":
              external_filetype_html = TS.i18n.t("Drawing from Google Drive", "templates_builders")();
              break;
            default:
              external_filetype_html = TS.i18n.t("<span>{file_type}</span> from Google Drive", "templates_builders")({
                file_type: file.pretty_type
              });
          }
          break;
        case "dropbox":
          external_filetype_html = TS.i18n.t("<span>{file_type}</span> from Dropbox", "templates_builders")({
            file_type: file.pretty_type
          });
          break;
        case "box":
          external_filetype_html = TS.i18n.t("<span>{file_type}</span> from Box", "templates_builders")({
            file_type: file.pretty_type
          });
          break;
        case "onedrive":
          external_filetype_html = TS.i18n.t("<span>{file_type}</span> from OneDrive", "templates_builders")({
            file_type: file.pretty_type
          });
          break;
        default:
          external_filetype_html = TS.i18n.t("File", "templates_builders")();
      }
      return external_filetype_html;
    },
    makeUnshareLink: function(channel_or_group, file) {
      var channel_formatted = (channel_or_group.is_channel ? "#" : "") + channel_or_group.name;
      var title = TS.i18n.t("Unshare from {channel}", "templates_builders")({
        channel: channel_formatted
      });
      return '<a class="unshare_link ts_tip ts_tip_top ts_tip_float ts_tip_unshare_link" onclick="TS.files.promptForFileUnshare(\'' + file.id + "', '" + channel_or_group.id + '\')"><span class="ts_tip_tip">' + title + '</span><i class="ts_icon ts_icon_minus_circle_small"></i></a>';
    },
    updateFileShareLabels: function(file) {
      var labels = $('.file_share_label[data-file-id="' + file.id + '"]');
      labels.each(function() {
        $(this).replaceWith(TS.templates.builders.makeFileShareLabel(file));
      });
      if (file.is_shared) {
        $('.file_share_shared_label[data-file-id="' + file.id + '"]').removeClass("hidden");
        $('.file_share_unshared_label[data-file-id="' + file.id + '"]').addClass("hidden");
      } else {
        $('.file_share_shared_label[data-file-id="' + file.id + '"]').addClass("hidden");
        $('.file_share_unshared_label[data-file-id="' + file.id + '"]').removeClass("hidden");
      }
      if (file.is_public) {
        $('.file_share_private_label[data-file-id="' + file.id + '"]').addClass("hidden");
        $('.file_share_public_label[data-file-id="' + file.id + '"]').removeClass("hidden");
      } else {
        $('.file_share_private_label[data-file-id="' + file.id + '"]').removeClass("hidden");
        $('.file_share_public_label[data-file-id="' + file.id + '"]').addClass("hidden");
      }
    },
    makeFileShareLabel: function(file) {
      var html = '<span class="file_share_label" data-file-id="' + file.id + '">';
      var share_list = TS.templates.builders.makeFileGroupChannelList(file);
      if (!share_list.length) {
        if (!file.is_public && file.user !== TS.model.user.id) {
          html += TS.i18n.t("shared with you", "templates_builders")();
        }
      } else {
        html += TS.i18n.t("in {share_list}", "templates_builders")({
          share_list: share_list
        });
      }
      html += "</span>";
      return html;
    },
    makeFileGroupChannelList: function(file) {
      var linksA = [];
      var html;
      var channel;
      var i;
      for (i = 0; i < file.channels.length; i += 1) {
        channel = TS.channels.getChannelById(file.channels[i]);
        if (!channel) continue;
        html = '<span class="no_wrap">';
        html += TS.templates.builders.makeChannelLink(channel, file);
        html += "&nbsp;" + TS.templates.builders.makeUnshareLink(channel, file);
        html += "</span>";
        linksA.push(html);
      }
      var group;
      for (i = 0; i < file.groups.length; i += 1) {
        group = TS.groups.getGroupById(file.groups[i]);
        if (!group) continue;
        html = '<span class="no_wrap">';
        html += TS.templates.builders.makeGroupLink(group, file);
        html += "&nbsp;" + TS.templates.builders.makeUnshareLink(group, file);
        html += "</span>";
        linksA.push(html);
      }
      if (!linksA.length) return "";
      return linksA.join(", ");
    },
    makeFileCommentHelpHTML: function(file) {
      if (file && file.is_public && file.channels.length) {
        return TS.i18n.t("Commenting in {channel_names}", "templates_builders")({
          channel_names: TS.templates.builders.makeLinksFromChannelOrGroupIds(file.channels)
        });
      }
      return "";
    },
    makeLinksFromChannelOrGroupIds: function(channel_or_group_ids, options) {
      options = options || {};
      channel_or_group_ids = TS.utility.parseJSONOrElse(channel_or_group_ids, channel_or_group_ids);
      channel_or_group_ids = _.isArray(channel_or_group_ids) ? channel_or_group_ids : [channel_or_group_ids];
      var private_channel_or_group_count = 0;
      var additional_class_names = options.new_lines ? " block" : "";
      var channel_or_group_nodes = channel_or_group_ids.map(function(channel_or_group_id) {
        return TS.channels.getChannelById(channel_or_group_id) || TS.groups.getGroupById(channel_or_group_id);
      }).filter(function(channel_or_group) {
        if (!channel_or_group) private_channel_or_group_count += 1;
        return !!channel_or_group;
      }).map(function(channel_or_group) {
        var html = '<span class="no_wrap' + additional_class_names + '">';
        html += channel_or_group.is_channel ? TS.templates.builders.makeChannelLink(channel_or_group) : TS.templates.builders.makeGroupLink(channel_or_group);
        html += "</span>";
        return html;
      });
      if (private_channel_or_group_count) {
        var private_channel_or_group_message = TS.i18n.t("{private_channel_or_group_count, plural, =1{# private channel}other{# private channels}}", "templates_builders")({
          private_channel_or_group_count: private_channel_or_group_count
        });
        channel_or_group_nodes.push('<span class="no_wrap' + additional_class_names + '">' + private_channel_or_group_message + "</span>");
      }
      if (options.new_lines) return channel_or_group_nodes.join("");
      return TS.i18n.listify(channel_or_group_nodes, {
        no_escape: true
      }).join("");
    },
    makeMessageShareLabelSafe: function(model_ob) {
      var html = '<span class="message_share_label">';
      var channel_or_group = "";
      if (model_ob.is_channel) {
        channel_or_group = TS.templates.builders.makeChannelLink(model_ob);
      } else if (model_ob.is_group) {
        channel_or_group = TS.templates.builders.makeGroupLink(model_ob);
      }
      html += TS.i18n.t("in {channel}", "templates_builders")({
        channel: channel_or_group
      });
      html += "</span>";
      return new Handlebars.SafeString(html);
    },
    makeMessageLinkLabelSafe: function(url) {
      var html = TS.i18n.t("From URL:", "templates_builders")() + " " + "<a " + TS.utility.makeRefererSafeLink(url) + ' class="external_link"' + 'title="' + TS.utility.htmlEntities(url) + '"' + 'target="_blank">' + TS.utility.htmlEntities(url) + "</a>";
      return new Handlebars.SafeString(html);
    },
    makeSHRoomParticipantList: function(room) {
      var participants = room.date_end ? room.participant_history : room.participants;
      return _.compact(participants.map(function(participant) {
        var member = TS.members.getMemberById(participant);
        if (member) {
          return TS.members.getMemberDisplayName(member);
        }
        return undefined;
      })).join(", ");
    },
    makeSHRoomSharedList: function(room) {
      if (!room.channels || !room.channels.length) return "";
      var linksA = [];
      var html;
      var member;
      var model_ob;
      for (var i = 0; i < room.channels.length; i += 1) {
        model_ob = TS.shared.getModelObById(room.channels[i]);
        if (!model_ob) continue;
        if (model_ob.is_channel) {
          html = TS.templates.builders.makeChannelLink(model_ob);
        } else if (model_ob.is_group) {
          html = TS.templates.builders.makeGroupLink(model_ob);
        } else if (model_ob.is_im) {
          member = TS.members.getMemberById(model_ob.user);
          if (!member) continue;
          html = TS.templates.builders.makeMemberPreviewLink(member);
        } else {
          continue;
        }
        linksA.push(html);
      }
      if (!linksA.length) return "";
      return linksA.join(", ");
    },
    buildFileSharingControls: function(file, hide_checkbox, comment, has_title, selection) {
      var share_context;
      var model_ob;
      if (TS.client) {
        if (!TS.client.activeChannelIsHidden()) model_ob = TS.shared.getActiveModelOb();
      } else if (TS.web && TS.web.space) {
        model_ob = TS.shared.getModelObById(TS.web.space.getOriginChannel());
      }
      if (!model_ob) {
        share_context = "channel";
      } else if (model_ob.is_im) {
        share_context = "im";
      } else if (model_ob.is_mpim) {
        share_context = "mpim";
      } else if (model_ob.is_group || model_ob.is_private) {
        share_context = "group";
      } else if (model_ob.is_channel) {
        share_context = "channel";
      }
      if (model_ob && TS.channels.isChannelRequired(model_ob) && !TS.permissions.members.canPostInChannel(model_ob)) {
        model_ob = {};
      }
      var channels = [];
      var groups = [];
      var members = [];
      if (share_context === "group" && (groups && !groups.length)) share_context = "channel";
      comment = comment || "";
      $("#file_sharing_div").remove();
      var is_owner = false;
      if (!file) {
        is_owner = true;
      } else if (file.user === TS.model.user.id) {
        is_owner = true;
      }
      var file_sharing_notice = TS.i18n.t("Files are private until they are shared in a public channel.", "templates_builders")();
      if (file) {
        if (file.is_public) {
          file_sharing_notice = TS.i18n.t("Files you share into a channel are visible to all team members.", "templates_builders")();
        }
        if (file.type && file.type.indexOf("application/vnd.google-apps") != -1) {
          if (TS.model.team.name) {
            file_sharing_notice = TS.i18n.t("Anyone at {team_name} with the link will be able to edit this Google {file_type}", "templates_builders")({
              team_name: TS.model.team.name,
              file_type: _.capitalize(file.type.replace("application/vnd.google-apps", ""))
            });
          } else {
            file_sharing_notice = TS.i18n.t("Anyone with the link will be able to edit this Google {file_type}", "templates_builders")({
              file_type: _.capitalize(file.type.replace("application/vnd.google-apps", ""))
            });
          }
        }
      }
      var enable_collab_editing = TS.web && TS.web.space && is_owner && !TS.model.team.prefs.disable_file_editing && !file.channels.concat(file.groups).concat(file.ims).length;
      return TS.templates.file_sharing({
        share_context: share_context,
        channels: channels,
        groups: groups,
        members: members,
        model_ob: model_ob,
        file: file,
        file_sharing_notice: file_sharing_notice,
        is_owner: is_owner,
        has_title: has_title,
        hide_checkbox: hide_checkbox,
        comment: comment,
        selection: selection,
        show_channel_join_note: model_ob && model_ob.is_channel && !model_ob.is_member && !model_ob.is_archived,
        enable_collab_editing: enable_collab_editing
      });
    },
    buildNonDefaultNotificationBlock: function(classes) {
      classes = classes || "";
      var html = "";
      var i;
      var ob = TS.notifs.getCorGsNotUsingGlobalNotificationSetting();
      if (ob.everything.length) {
        html += '<div class="' + classes + '">' + TS.i18n.t("Set to notify for <strong>all activity</strong>:", "templates_builders")();
        for (i = 0; i < ob.everything.length; i += 1) html += " " + (ob.everything[i].id.charAt(0) === "C" ? "#" : "") + ob.everything[i].name + (i != ob.everything.length - 1 ? "," : "");
        html += "</div>";
      }
      if (ob.mentions.length) {
        html += '<div class="' + classes + '">' + TS.i18n.t("Set to notify only for <strong>Highlight Words</strong>:", "templates_builders")();
        for (i = 0; i < ob.mentions.length; i += 1) html += " " + (ob.mentions[i].id.charAt(0) === "C" ? "#" : "") + ob.mentions[i].name + (i != ob.mentions.length - 1 ? "," : "");
        html += "</div>";
      }
      if (ob.nothing.length) {
        html += '<div class="' + classes + '">' + TS.i18n.t("Set to <strong>never notify</strong>:", "templates_builders")();
        for (i = 0; i < ob.nothing.length; i += 1) html += " " + (ob.nothing[i].id.charAt(0) === "C" ? "#" : "") + ob.nothing[i].name + (i != ob.nothing.length - 1 ? "," : "");
        html += "</div>";
      }
      return html;
    },
    strBuilder: function(str, args) {
      return str.replace(/\${([a-z_]+)}/g, function(m, $1) {
        if ($1.indexOf("_html") > -1) return args[$1];
        return TS.utility.htmlEntities(args[$1]);
      });
    },
    buildRxnTitle: function(args, force) {
      if (TS.boot_data.feature_unknown_members && !force) return;
      var handy_title = TS.rxns.getHandyRxnsTitleForEmojiByRxnKey(args.name, args.rxn_key);
      var emoji_formatted;
      var display_name = ":" + args.name + ":";
      if (TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE) {
        display_name = TSFEmoji.translateEmojiStringToLocal(display_name, TS.i18n.locale());
      }
      if (args.is_handy || args.is_poll && !args.count) {
        if (args.is_poll) return "Vote for “" + TS.utility.htmlEntities(handy_title || args.name) + "”";
        if (handy_title) return "Say “" + TS.utility.htmlEntities(handy_title) + "”";
        emoji_formatted = TS.utility.htmlEntities(display_name || args.name);
        return TS.i18n.t("Add reaction {emoji}", "rxn")({
          emoji: emoji_formatted
        });
      }
      var should_escape = false;
      var include_at_sign = true;
      var subtitle;
      if (args.is_poll) {
        subtitle = "voted for “" + TS.utility.htmlEntities(handy_title || args.name) + "”";
      } else if (handy_title) {
        subtitle = "said “" + TS.utility.htmlEntities(handy_title) + "”";
      } else {
        emoji_formatted = TS.utility.htmlEntities(display_name || args.name);
        subtitle = TS.i18n.t("reacted with {emoji}", "rxn")({
          emoji: emoji_formatted
        });
      }
      if (!TS.emoji.isValidName(args.name)) subtitle += " " + TS.i18n.t("(emoji has been removed)", "rxn")();
      subtitle = ' <span class="subtle_silver">' + subtitle + "</span>";
      if (args.count == 1) {
        if (args.user_reacted) {
          if (TS.boot_data.feature_thanks) return TS.i18n.t("You", "rxn")() + subtitle;
          return TS.i18n.t("You (click to remove)", "rxn")() + subtitle;
        }
        return TS.utility.htmlEntities(TS.members.getMemberDisplayNameById(args.member_ids[0], should_escape, include_at_sign)) + subtitle;
      }
      var was_already_truncated = args.member_ids.length != args.count;
      var names = args.member_ids.map(function(id, index) {
        var name;
        if (TS.model.user.id === id) {
          name = index === 0 ? TS.i18n.t("You", "rxn")() : TS.i18n.t("you", "rxn")();
        } else {
          name = TS.members.getMemberDisplayNameById(id, should_escape, include_at_sign);
        }
        return name;
      });
      if (was_already_truncated) names.push(TS.i18n.t("others", "rxn")());
      return TS.utility.htmlEntities(TS.i18n.listify(names, {
        no_escape: true
      }).join("")) + subtitle;
    },
    buildRxnHtml: function(args) {
      var emoji_html;
      if (TS.emoji.isValidName(args.name)) {
        var suffix = args.is_handy && TS.emoji.isNameSkinToneModifiable(args.name) ? TS.emoji.getChosenSkinToneModifier() : "";
        emoji_html = TS.emoji.graphicReplace(":" + args.name + ":" + suffix, {
          no_skin_tone_squares: args.is_handy
        });
      } else {
        emoji_html = '<span class="emoji-outer emoji-sizer emoji-missing" style="background-image: url(' + cdn_url + "/ecf3e/img/emoji_missing.png" + ');"></span>';
      }
      var title = TS.templates.builders.buildRxnTitle(args);
      var css_classes = [];
      if (args.user_reacted) css_classes.push("user_reacted");
      if (args.is_handy) css_classes.push("is_handy");
      if (args.is_hidden) css_classes.push("hidden");
      return TS.templates.rxns_rxn({
        name: args.name,
        css_classes: css_classes.join(" "),
        emoji_html: new Handlebars.SafeString(emoji_html),
        title: title,
        count: args.count,
        is_handy: !!args.is_handy
      });
    },
    updateRxnHtml: function($rxn_panel, args) {
      var $rxn = $rxn_panel.children('.rxn[data-emoji="' + args.name + '"]');
      if ($rxn.length) {
        $rxn.find(".emoji_rxn_count").attr("aria-label", args.count);
        $rxn.toggleClass("user_reacted", args.user_reacted);
        var title = TS.templates.builders.buildRxnTitle(args);
        var existing_title;
        var $tip_el = $rxn.find(".ts_tip_tip_inner");
        if (!$tip_el.length) $tip_el = $rxn.find(".ts_tip_multiline_inner");
        if ($tip_el.length) {
          existing_title = $tip_el.html();
          if (existing_title != title) {
            TS.tips.updateTipTitle($rxn, title);
          }
        } else {
          existing_title = $rxn.prop("title");
          if (existing_title != title) {
            TS.tips.updateTipTitle($rxn, title);
          }
        }
        if (args.animate_it_dramatically) {
          setTimeout(args.animate_callback, 0);
        } else if (args.animate_it) {
          setTimeout(args.animate_callback, 0);
        }
      } else {
        $rxn_panel.children(".rxn_hover_container").before($(TS.templates.builders.buildRxnHtml(args)));
        $rxn = $rxn_panel.children('.rxn[data-emoji="' + args.name + '"]');
        if (args.animate_it_dramatically) {
          $rxn.css("opacity", 0).transition({
            opacity: 1
          }, 300, args.animate_callback);
        } else if (args.animate_it) {
          $rxn.css("opacity", 0).transition({
            opacity: 1
          }, 300, args.animate_callback);
        }
      }
    },
    updateRxnPanels: function(rxn_key, changed_rxn_name, actor_id) {
      var rxns = TS.rxns.getExistingRxnsByKey(rxn_key);
      var $rxn_panels = $("." + TS.templates.makeRxnKeyDomClass(rxn_key));
      var handy_rxns_dd = TS.boot_data.feature_thanks ? TS.rxns.getHandyRxnsDisplayDataByRxnKey(rxn_key) : {};
      var updatePoll = function($rxn_panel) {
        _.each(_.keys(handy_rxns_dd.items), function(k) {
          var rxn = TS.rxns.getRxnFromRxns(rxns, k);
          TS.templates.builders.updateRxnHtml($rxn_panel, {
            name: k,
            count: rxn && rxn.count || 0,
            user_reacted: TS.rxns.doesRxnsHaveRxnFromUser(rxns, k),
            member_ids: rxn && rxn.users || [],
            rxn_key: rxn_key,
            is_poll: true
          });
        });
      };
      var updateNormal = function($rxn_panel) {
        var animate_it;
        var animate_it_dramatically;
        if (rxns) {
          rxns.forEach(function(rxn) {
            animate_it = rxn.name == changed_rxn_name;
            animate_it_dramatically = animate_it && actor_id == TS.model.user.id;
            TS.templates.builders.updateRxnHtml($rxn_panel, {
              animate_it: animate_it,
              animate_it_dramatically: animate_it_dramatically,
              name: rxn.name,
              count: rxn.count,
              user_reacted: TS.rxns.doesRxnsHaveRxnFromUser(rxns, rxn.name),
              member_ids: rxn.users,
              rxn_key: rxn_key
            });
          });
        }
        var $actuals = $rxn_panel.children(".rxn");
        $actuals.each(function(i, el) {
          var $rxn = $(el);
          var name = String($rxn.data("emoji"));
          if (!TS.rxns.doesRxnsHaveRxn(rxns, name)) {
            $rxn.addClass("going_away");
            $rxn.transition({
              opacity: 0
            }, 300, function() {
              $rxn.remove();
            });
          }
        });
        TS.ui.messages.maybeUpdateMessageHoverContainer($rxn_panel.closest("ts-message"));
        var $handys = $rxn_panel.children(".rxn_hover_container").find(".rxn.is_handy");
        $handys.each(function(i, el) {
          var $rxn = $(el);
          var name = String($rxn.data("emoji"));
          $rxn.toggleClass("hidden", TS.rxns.doesRxnsHaveSkinlessRxn(rxns, name));
        });
      };
      $rxn_panels.each(function(i, el) {
        var $div = $(el);
        if (!rxns && !handy_rxns_dd.is_poll) {
          $div.empty();
          TS.ui.messages.maybeUpdateMessageHoverContainer($div.closest("ts-message"));
          return;
        }
        if (!$div.children().length) {
          $div = $(TS.templates.builders.rxnPanel(rxn_key)).replaceAll($div);
        }
        if (handy_rxns_dd.is_poll) {
          updatePoll($div);
        } else {
          updateNormal($div);
        }
      });
    },
    rxnPanel: function(rxn_key) {
      if (!rxn_key) return;
      var classesA = [];
      var handy_rxns_dd = TS.boot_data.feature_thanks ? TS.rxns.getHandyRxnsDisplayDataByRxnKey(rxn_key) : {};
      var handy_rxns_html = "";
      var rxns = TS.rxns.getExistingRxnsByKey(rxn_key);
      var rxns_html = "";
      var buildPoll = function() {
        classesA.push("handy_rxns_poll");
        rxns_html = '<span class="handy_rxns_poll_label">' + TS.i18n.t("Poll:", "rxn")() + "</span> ";
        _.each(_.keys(handy_rxns_dd.items), function(k) {
          var rxn = TS.rxns.getRxnFromRxns(rxns, k);
          rxns_html += TS.templates.builders.buildRxnHtml({
            name: k,
            count: rxn && rxn.count || 0,
            user_reacted: TS.rxns.doesRxnsHaveRxnFromUser(rxns, k),
            member_ids: rxn && rxn.users || [],
            rxn_key: rxn_key,
            is_poll: true
          });
        });
      };
      var buildNormal = function() {
        if (rxns) {
          rxns = _.sortBy(rxns, function(rxn) {
            return TS.emoji.isValidName(rxn.name) ? 0 : 1;
          });
          rxns.forEach(function(rxn) {
            rxns_html += TS.templates.builders.buildRxnHtml({
              name: rxn.name,
              count: rxn.count,
              user_reacted: TS.rxns.doesRxnsHaveRxnFromUser(rxns, rxn.name),
              member_ids: rxn.users,
              rxn_key: rxn_key
            });
          });
        }
        _.each(_.keys(handy_rxns_dd.items), function(k) {
          handy_rxns_html += TS.templates.builders.buildRxnHtml({
            name: k,
            is_handy: true,
            is_hidden: TS.rxns.doesRxnsHaveSkinlessRxn(rxns, k),
            rxn_key: rxn_key
          });
        });
      };
      if (handy_rxns_dd.is_poll) {
        buildPoll();
      } else {
        buildNormal();
      }
      return TS.templates.rxns_panel({
        css_classes: classesA.join(" "),
        rxn_key: rxn_key,
        rxns_html: new Handlebars.SafeString(rxns_html),
        handy_rxns_html: new Handlebars.SafeString(handy_rxns_html),
        show_adder: !handy_rxns_dd.restrict,
        id_class: TS.templates.makeRxnKeyDomClass(rxn_key),
        has_hovers: !handy_rxns_dd.is_poll
      });
    },
    updateRxnPanelsAndHandyRxns: function(rxn_key) {
      if (!rxn_key) return;
      if (!TS.boot_data.feature_thanks) return;
      var $rxn_panels = $("." + TS.templates.makeRxnKeyDomClass(rxn_key));
      if (!$rxn_panels.length) return;
      TS.templates.builders.updateRxnPanels(rxn_key);
      var rxns = TS.rxns.getExistingRxnsByKey(rxn_key);
      var handy_rxns_dd = TS.rxns.getHandyRxnsDisplayDataByRxnKey(rxn_key);
      var handy_rxns_html = "";
      _.each(_.keys(handy_rxns_dd.items), function(k) {
        handy_rxns_html += TS.templates.builders.buildRxnHtml({
          name: k,
          is_handy: true,
          is_hidden: TS.rxns.doesRxnsHaveSkinlessRxn(rxns, k),
          rxn_key: rxn_key
        });
      });
      $rxn_panels.each(function(i, el) {
        var $rxn_hover_container = $(el).find(".rxn_hover_container");
        var $menu_rxn = $rxn_hover_container.find(".menu_rxn");
        $menu_rxn.toggleClass("hidden", handy_rxns_dd.restrict);
        $rxn_hover_container.html(handy_rxns_html).prepend($menu_rxn);
      });
    },
    buildHistoryNavBtnHtml: function() {
      var hide_quick_switcher_btn = TS.model.prefs.no_omnibox_in_channels;
      var hide_prev_next_btn = TS.model.prefs.prev_next_btn;
      var num_col = 0;
      if (!hide_prev_next_btn) {
        num_col += 2;
      }
      if (!hide_quick_switcher_btn) {
        num_col += 1;
      }
      var left_btn_html = TS.templates.footer_nav_btn({
        id: "left_arrow_btn",
        col: num_col,
        type: "ts_icon_arrow_large_left",
        name: "Previous",
        mac_or_pc: TS.model.is_mac ? "⌘" : "Alt",
        prev_or_next: "ts_icon_arrow_left_medium"
      });
      var right_btn_html = TS.templates.footer_nav_btn({
        id: "right_arrow_btn",
        col: num_col,
        type: "ts_icon_arrow_large_right",
        name: "Next",
        mac_or_pc: TS.model.is_mac ? "⌘" : "Alt",
        prev_or_next: "ts_icon_arrow_right_medium"
      });
      var quick_switcher_btn_html = TS.templates.footer_nav_btn({
        id: "quickswitcher_btn",
        col: num_col,
        type: "ts_icon_filter",
        name: "Quick Switcher",
        mac_or_pc: TS.model.is_mac ? "⌘ K" : "Alt K"
      });
      var html = "";
      if (!hide_prev_next_btn) {
        html += left_btn_html + right_btn_html;
      }
      if (!hide_quick_switcher_btn) {
        html += quick_switcher_btn_html;
      }
      return html;
    },
    filePreviewBackIcon: function() {
      return '<i class="ts_icon ts_icon_chevron_medium_left back_icon"></i>';
    },
    buildQuickSwitcherBtnHtml: function(is_in_invites_sidebar_exp) {
      var html;
      if (is_in_invites_sidebar_exp) {
        html = ['<i class="ts_icon ts_icon_filter"><span class="ts_tip_tip">Quick Switcher <span class="subtle_silver">', TS.model.is_mac ? "&#8984K" : "Ctrl+K", "</span></span></i>"].join("");
      } else {
        var label = TS.i18n.t("Quick Switcher", "templates_builders")();
        html = !TS.model.is_mac && (TS.model.is_our_app || TS.model.prefs.k_key_omnibox) ? '<i class="ts_icon ts_icon_filter"></i><span id="quick_switcher_label" class="quick_switcher_label_windows_alignment">' + label + "</span>" : '<i class="ts_icon ts_icon_filter"></i><span id="quick_switcher_label">' + label + "</span>";
        if (TS.model.is_our_app || TS.model.prefs.k_key_omnibox) {
          return [html, '<span id="quick_switcher_shortcut">', TS.model.is_mac ? "&#8984K" : "Ctrl+K", "</span>"].join("");
        }
      }
      return html;
    },
    atLabel: function(type) {
      var at_label = type;
      switch (type) {
        case "channel":
          at_label = "@channel";
          break;
        case "everyone":
          at_label = "@everyone";
          break;
        case "here":
        case "conversation":
          at_label = "@here";
          break;
        default:
          break;
      }
      return at_label;
    },
    makeMemberTypeBadge: function(member, size, is_standalone, with_tooltip) {
      if (!TS.boot_data.page_needs_enterprise) return "";
      size = parseInt(size, 10);
      if (isNaN(size)) size = 16;
      if (typeof is_standalone !== "boolean") is_standalone = false;
      if (typeof with_tooltip !== "boolean") with_tooltip = false;
      var args = {
        size: "member_type_badge_" + size,
        big: size >= 20,
        is_standalone: is_standalone,
        with_tooltip: with_tooltip
      };
      if (member.is_external) return "";
      if (member.is_ultra_restricted) return TS.templates.member_type_guest_badge(args);
      if (member.is_restricted) return TS.templates.member_type_restricted_badge(args);
      return "";
    },
    makeMemberTypeBadgeClass: function(member) {
      if (!TS.boot_data.page_needs_enterprise) return "";
      if (!member.is_restricted) return "";
      return "has_member_type_badge";
    },
    makeMemberColorClass: function(member) {
      var color_class = "color_";
      if (member) {
        color_class += member.id + " color_" + member.color;
      } else {
        color_class += "unknown";
      }
      return color_class;
    },
    makeMemberTypeBadgeCompact: function(member, with_tooltip) {
      if (!TS.boot_data.page_needs_enterprise) return "";
      if (typeof with_tooltip !== "boolean") with_tooltip = false;
      var args = {
        icon_class: "",
        with_tooltip: with_tooltip,
        tooltip: {
          member_type: "",
          type_description: ""
        }
      };
      var directory_name = TS.boot_data.page_needs_enterprise ? TS.i18n.t("organization directory", "templates_builders")() : TS.i18n.t("team directory", "templates_builders")();
      if (member.is_external) {
        return "";
      } else if (member.is_ultra_restricted) {
        args.icon_class = "ts_icon_single_channel_guest";
        args.tooltip.member_type = TS.i18n.t("Single-Channel Guests", "templates_builders")();
        args.tooltip.type_description = TS.i18n.t("see a partial {directory_name} and can only access messages and files from the channel they belong to.", "templates_builders")({
          directory_name: directory_name
        });
        return TS.templates.member_type_icon(args);
      } else if (member.is_restricted) {
        args.icon_class = "ts_icon_restricted_user";
        args.tooltip.member_type = TS.i18n.t("Multi-Channel Guests", "templates_builders")();
        args.tooltip.type_description = TS.i18n.t("see only a partial {directory_name} and can only access messages and files from selected channels.", "templates_builders")({
          directory_name: directory_name
        });
        return TS.templates.member_type_icon(args);
      }
      return "";
    },
    getMemberTypeClass: function(member) {
      if (member.is_restricted) return " ra";
      return "";
    },
    makeTeamlabel: function(team_id) {
      if (!team_id) return "ERROR: MISSING TEAM ID";
      var html = "";
      var matching_team_data;
      var teams_info = TS.model.enterprise_teams;
      if (teams_info) {
        matching_team_data = _.find(teams_info, function(team_info) {
          return team_info.id === team_id;
        });
      } else {
        return "ERROR: UNABLE TO GET TEAMS INFO";
      }
      html = '<span class="org_team_tag_name">' + TS.utility.htmlEntities(matching_team_data.name) + "</span>";
      return html;
    },
    loadingHTML: function() {
      var url_2x = cdn_url + "/9c217/img/loading_hash_animation_@2x.gif";
      var url_1x = cdn_url + "/9c217/img/loading_hash_animation.gif";
      var loading_str = TS.i18n.t("loading&hellip;", "templates_builders")();
      return '<div class="loading_hash_animation"><img src="' + url_2x + '" alt="' + loading_str + '" srcset="' + url_1x + " 1x, " + url_2x + ' 2x" /><br />' + loading_str + "</div>";
    },
    buildThreadMsgHTML: function(msg, model_ob, thread, options) {
      var inline = !!_.get(options, "inline");
      var msg_dom_id = inline ? TS.templates.makeMsgDomId(msg.ts) : TS.templates.makeMsgDomIdInThreadsView(msg.ts);
      return TS.templates.builders.msgs.buildHTML({
        msg_dom_id: msg_dom_id,
        model_ob: model_ob,
        msg: msg,
        is_threads_view: true,
        is_new_reply: TS.utility.msgs.isMsgReply(msg) && thread && msg.ts > thread.initial_last_read,
        relative_ts: true,
        enable_slack_action_links: true
      });
    },
    buildThreadParticipantListHTML: function(root_msg) {
      var user_ids = _.map(root_msg.replies, "user");
      var bot_ids = _.map(root_msg.replies, "bot_id");
      user_ids = user_ids.concat(bot_ids);
      user_ids = _.without(user_ids, "U00", undefined);
      if (root_msg.subtype !== "tombstone" && root_msg.user) user_ids.unshift(root_msg.user);
      user_ids = _.uniq(user_ids);
      if (_.includes(user_ids, TS.model.user.id)) {
        user_ids = _.without(user_ids, TS.model.user.id);
        user_ids.push(TS.model.user.id);
      }
      var participant_names = _.map(user_ids, function(id) {
        var participant_name;
        if (id.charAt(0) === "B") {
          participant_name = TS.bots.getBotNameById(id);
        } else if (id === TS.model.user.id) {
          participant_name = TS.i18n.t("you", "threads")();
        } else {
          participant_name = TS.members.getMemberDisplayNameById(id);
        }
        return participant_name;
      });
      if (user_ids.length === 1) {
        if (user_ids[0] === TS.model.user.id) {
          return TS.i18n.t("Just you", "threads")();
        }
        return TS.utility.htmlEntities(participant_names[0]);
      } else if (user_ids.length === 2) {
        if (user_ids[1] === TS.model.user.id) {
          return TS.i18n.t("{user_name} and you", "threads")({
            user_name: TS.utility.htmlEntities(participant_names[0])
          });
        }
        return TS.i18n.t("{user_name1} and {user_name2}", "threads")({
          user_name1: TS.utility.htmlEntities(participant_names[0]),
          user_name2: TS.utility.htmlEntities(participant_names[1])
        });
      } else if (user_ids.length === 3) {
        if (user_ids[2] === TS.model.user.id) {
          return TS.i18n.t("{user_name1}, {user_name2}, and you", "threads")({
            user_name1: TS.utility.htmlEntities(participant_names[0]),
            user_name2: TS.utility.htmlEntities(participant_names[1])
          });
        }
        return TS.i18n.t("{user_name1}, {user_name2}, and {user_name3}", "threads")({
          user_name1: TS.utility.htmlEntities(participant_names[0]),
          user_name2: TS.utility.htmlEntities(participant_names[1]),
          user_name3: TS.utility.htmlEntities(participant_names[2])
        });
      } else if (user_ids.length > 3) {
        var num_others = user_ids.length - 2;
        var leftover_names = _.drop(participant_names, 2);
        var limit = 25;
        if (leftover_names.length > limit) {
          leftover_names = _.take(leftover_names, limit);
          leftover_names.push(TS.i18n.t("others", "threads")());
        }
        var other_names = TS.i18n.listify(leftover_names, {
          no_escape: true
        }).join("");
        return TS.templates.thread_participants_with_overflow({
          num_others: num_others,
          user_name1: participant_names[0],
          user_name2: participant_names[1],
          other_names: other_names
        });
      }
    },
    buildBroadcastRepliersSummaryHTML: function(broadcast_root) {
      var reply_count = broadcast_root.reply_count;
      var replies = broadcast_root.replies;
      if (!replies || !replies.length) return "";
      var replier_ids = _.map(replies, "user");
      replier_ids = _.uniq(replier_ids);
      var reply_users_count = replier_ids.length;
      var entities = _.map(replier_ids, function(id) {
        if (id === "U00") return null;
        var first_letter = id.charAt(0);
        var entity;
        if (first_letter === "B") {
          entity = TS.bots.getBotById(id);
        } else {
          entity = TS.members.getMemberById(id);
        }
        return entity;
      });
      entities = _.compact(entities);
      if (!reply_count || !entities.length) return "";
      if (reply_count === 1) {
        return TS.i18n.t("1 reply", "threads")();
      }
      var includes_self = !!_.find(entities, {
        is_self: true
      });
      if (includes_self) {
        entities = _.reject(entities, {
          is_self: true
        });
        entities.push(TS.model.user);
      }
      var names = _.map(entities, function(entity) {
        if (entity.is_bot) {
          return entity.name;
        } else if (entity.is_self) {
          return TS.i18n.t("you", "threads")();
        }
        return TS.members.getMemberDisplayName(entity);
      });
      if (entities.length === 1) {
        if (includes_self) {
          return TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from you", "threads")({
            reply_count: reply_count
          });
        }
        return TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from {user_name}", "threads")({
          reply_count: reply_count,
          user_name: TS.utility.htmlEntities(names[0])
        });
      } else if (entities.length === 2) {
        if (includes_self) {
          return TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from {user_name} and you", "threads")({
            reply_count: reply_count,
            user_name: TS.utility.htmlEntities(names[0])
          });
        }
        return TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from {user_name1} and {user_name2}", "threads")({
          reply_count: reply_count,
          user_name1: TS.utility.htmlEntities(names[0]),
          user_name2: TS.utility.htmlEntities(names[1])
        });
      } else if (entities.length === 3) {
        if (includes_self) {
          return TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from {user_name1}, {user_name2}, and you", "threads")({
            reply_count: reply_count,
            user_name1: TS.utility.htmlEntities(names[0]),
            user_name2: TS.utility.htmlEntities(names[1])
          });
        }
        return TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from {user_name1}, {user_name2}, and {user_name3}", "threads")({
          reply_count: reply_count,
          user_name1: TS.utility.htmlEntities(names[0]),
          user_name2: TS.utility.htmlEntities(names[1]),
          user_name3: TS.utility.htmlEntities(names[2])
        });
      } else if (entities.length > 3) {
        var leftover_names = _.drop(names, 2);
        if (leftover_names.length < reply_users_count - 2) {
          leftover_names.push(TS.i18n.t("others", "threads")());
        }
        var other_names = TS.i18n.listify(leftover_names, {
          no_escape: true
        }).join("");
        return TS.templates.thread_broadcast_repliers_with_overflow({
          reply_count: reply_count,
          num_others: reply_users_count - 2,
          user_name1: names[0],
          user_name2: names[1],
          other_names: other_names
        });
      }
      return "";
    },
    test: function() {
      var test_ob = {};
      Object.defineProperty(test_ob, "_buildStarComponents", {
        get: function() {
          return _buildStarComponents;
        },
        set: function(v) {
          _buildStarComponents = v;
        }
      });
      return test_ob;
    }
  });
  var _JL_ROLLUP_LIMIT = 8;
  var _jl_rollup_limit_reached = false;

  function _getUnreadMessageLabelText(channel) {
    var unread_message = "";
    var unread_highlight_cnt = channel.unread_highlight_cnt;
    var unread_cnt = channel.unread_cnt;
    if (unread_highlight_cnt && !channel.is_im) {
      unread_message += unread_highlight_cnt + " " + TS.i18n.t("unread highlight", "templates_builders")() + " ";
    } else if (unread_cnt) {
      unread_message += unread_cnt + " " + TS.i18n.t("unread", "templates_builders")() + " ";
    }
    if (unread_cnt) {
      unread_message += TS.i18n.t("{count, plural, =1 {message} other {messages}}", "templates_builders")({
        count: unread_cnt
      });
    }
    return unread_message;
  }

  function _buildStarComponents(type, ob, parent_ob) {
    if (!type) {
      return {};
    }
    if (ob && typeof ob === "string" && (type === "channel" || type === "group" || type === "mpim" || type === "im")) {
      ob = TS.shared.getModelObById(ob);
    }
    if (!ob) {
      return {};
    }
    if (type === "message" && parent_ob && typeof parent_ob === "string") {
      var c_id = parent_ob;
      parent_ob = TS.channels.getChannelById(c_id);
      if (!parent_ob) parent_ob = TS.ims.getImById(c_id);
      if (!parent_ob) parent_ob = TS.groups.getGroupById(c_id);
    }
    var html_attrs = {};
    var attributes = [];
    var class_names = [];
    class_names = ["star", "ts_icon", "ts_icon_star_o", "ts_icon_inherit"];
    var position_class_name = "ts_tip_top";
    var id = ob.id || ob.ts;
    var parent_id = parent_ob ? parent_ob.id : null;
    if (type === "message") {
      if (!parent_id) {
        return {};
      }
      html_attrs["data-msg-id"] = id;
      html_attrs["data-c-id"] = parent_id;
      if (TS.utility.msgs.isTempMsg(ob)) {
        class_names.push("invisible");
      }
    } else if (type === "file") {
      html_attrs["data-file-id"] = id;
    } else if (type === "file_comment") {
      html_attrs["data-comment-id"] = id;
      html_attrs["data-file-id"] = parent_id;
      class_names.push("star_comment");
    } else if (type === "channel") {
      position_class_name = "ts_tip_bottom";
      html_attrs["data-channel-id"] = id;
    } else if (type === "group") {
      position_class_name = "ts_tip_bottom";
      html_attrs["data-group-id"] = id;
    } else if (type === "im") {
      position_class_name = "ts_tip_bottom";
      html_attrs["data-im-id"] = id;
    } else if (type === "mpim") {
      position_class_name = "ts_tip_bottom";
      html_attrs["data-mpim-id"] = id;
    } else {
      TS.error("buildStar needs to handle star item type:" + type);
      return {};
    }
    class_names = _.concat(class_names, position_class_name);
    if (ob.is_starred) {
      class_names.push("starred", "ts_icon_star");
      class_names.splice(class_names.indexOf("ts_icon_star_o"), 1);
    }
    class_names.push("star_" + type);
    $.each(html_attrs, function(key, value) {
      attributes.push(key + '="' + value + '"');
    });
    var readable_types = {
      message: TS.i18n.t("message", "templates_builders")(),
      file: TS.i18n.t("file", "templates_builders")(),
      file_comment: TS.i18n.t("file comment", "templates_builders")(),
      channel: TS.i18n.t("channel", "templates_builders")(),
      group: TS.i18n.t("channel", "templates_builders")(),
      im: TS.i18n.t("direct message", "templates_builders")(),
      mpim: TS.i18n.t("direct message", "templates_builders")()
    };
    return {
      attributes: attributes,
      class_names: class_names,
      html_attrs: html_attrs,
      readable_type: readable_types[type],
      is_starred: ob.is_starred
    };
  }
  var _session_ms = Date.now();
})();
(function() {
  "use strict";
  TS.registerModule("templates.builders.msgs", {
    buildHTML: function(args, log) {
      if (log) TS.dir(0, args);
      try {
        var msg = args.msg;
        var model_ob = args.model_ob;
        var prev_msg = args.prev_msg;
        var highlight = !!args.highlight;
        var no_attachments = !!args.no_attachments;
        var standalone = !!args.standalone;
        var hide_actions = args.show_actions_in_standalone ? false : !!(standalone || args.hide_actions);
        var full_date = !!args.full_date;
        if (TS.model.prefs.fuller_timestamps && !full_date) full_date = !TS.utility.date.sameDay(TS.utility.date.toDateObject(msg.ts), new Date);
        var relative_ts = !!args.relative_ts;
        var jump_link = args.jump_link ? new Handlebars.SafeString(args.jump_link) : "";
        var starred_items_list = !!args.starred_items_list;
        var starred_items_actions = args.starred_items_actions;
        var container_id_with_hash = args.container_id ? "#" + args.container_id : "";
        var enable_slack_action_links = !!args.enable_slack_action_links;
        var highlight_as_new = !!(args && args.highlight_as_new);
        var html = "";
        var member = TS.utility.members.getEntityFromMessage(msg);
        var show_user = true;
        var msg_date = TS.utility.date.toDateObject(msg.ts);
        var new_day = false;
        var last_time_divider = false;
        var unprocessed = !!msg.rsp_id;
        var current_speaker = msg.user;
        var prev_speaker;
        var is_ephemeral = msg.is_ephemeral;
        var msg_dom_id = TS.templates.makeMsgDomId(msg.ts);
        var actions = TS.utility.msgs.getMsgActions(msg, model_ob);
        if (!current_speaker) current_speaker = TS.templates.builders.getBotIdentifier(msg);
        var is_bot = TS.utility.msgs.shouldHaveBotLabel(msg, member);
        var app_id;
        var bot_id;
        var is_app_data_enabled;
        msg_dom_id = args.msg_dom_id || msg_dom_id;
        var is_in_conversation = !!args.is_in_conversation;
        var is_threads_view = !!args.is_threads_view;
        if (false && msg.text) {
          msg = _.cloneDeep(msg);
          msg.text += " <slack-action://BSLACKBOT/help/files/D026MK7NF|testing>";
        }
        if (is_bot) {
          var bot_info = TS.bots.getBotInfoByMsg(msg);
          if (bot_info) {
            app_id = bot_info.app_id;
            bot_id = bot_info.bot_id;
          }
          is_app_data_enabled = true;
        }
        if (prev_msg) {
          prev_speaker = prev_msg.subtype === "file_comment" && prev_msg.comment ? prev_msg.comment.user : prev_msg.user;
          if (!prev_speaker) {
            prev_speaker = TS.templates.builders.getBotIdentifier(prev_msg);
          }
        }
        if (!msg.no_display && !standalone) {
          if (prev_msg) {
            var last_rendered_msg_date = TS.utility.date.toDateObject(prev_msg.ts);
            if (msg.subtype && msg.subtype === "file_comment" && msg.comment) {
              current_speaker = msg.comment.user;
            }
            if (TS.utility.msgs.automated_subtypes.indexOf(msg.subtype) != -1 || msg.subtype === "thread_broadcast") {
              show_user = true;
            } else if (prev_speaker == current_speaker && TS.utility.msgs.automated_subtypes.indexOf(prev_msg.subtype) === -1) {
              if (!msg.subtype && prev_msg.subtype && prev_msg.subtype === "file_comment") {
                show_user = true;
              } else {
                if (!prev_msg.subtype || TS.templates.builders.getBotIdentifier(prev_msg)) {
                  var prev_thread_ts = prev_msg.thread_ts || prev_msg.ts;
                  var is_part_of_same_convo = msg.thread_ts == prev_thread_ts;
                  var neither_are_part_of_convo = !msg.thread_ts && !prev_msg.thread_ts;
                  if (is_part_of_same_convo || neither_are_part_of_convo) {
                    show_user = false;
                  }
                }
                if (TS.utility.msgs.isTempMsg(msg) && (msg.type === "bot_message" || msg.user === "USLACKBOT")) {
                  show_user = true;
                }
              }
            }
            if (!unprocessed && !TS.utility.date.sameDay(msg_date, last_rendered_msg_date) && !is_in_conversation) {
              new_day = true;
              var $dividers = $(container_id_with_hash + " div.day_divider");
              if ($dividers.length > 0) {
                var new_messages_day_divider_html;
                var $last_divider = $($dividers[$dividers.length - 1]);
                if ($last_divider.length) {
                  new_messages_day_divider_html = "";
                  try {
                    new_messages_day_divider_html = TS.templates.messages_day_divider({
                      ts: $last_divider.data("ts")
                    });
                  } catch (err) {
                    if (!err.message) err.message = "";
                    err.message += " $last_divider.data('ts'):" + $last_divider.data("ts");
                    TS.info("Problem with TS.templates.messages_day_divider 2.1: " + JSON.stringify(err));
                  }
                  $last_divider.replaceWith(new_messages_day_divider_html);
                }
                if ($dividers.length > 1) {
                  var $second_last_divider = $($dividers[$dividers.length - 2]);
                  if ($second_last_divider.length) {
                    new_messages_day_divider_html = "";
                    try {
                      new_messages_day_divider_html = TS.templates.messages_day_divider({
                        ts: $second_last_divider.data("ts")
                      });
                    } catch (err) {
                      if (!err.message) err.message = "";
                      err.message += " $second_last_divider.data('ts'):" + $second_last_divider.data("ts");
                      TS.info("Problem with TS.templates.messages_day_divider 3.1: " + JSON.stringify(err));
                    }
                    $second_last_divider.replaceWith(new_messages_day_divider_html);
                  }
                }
              }
            }
            if (!unprocessed && TS.utility.date.distanceInMinutes(msg_date, last_rendered_msg_date) > TS.model.msg_activity_interval) {
              last_time_divider = true;
              model_ob.last_time_divider = msg_date;
            }
          } else if (!is_in_conversation) {
            last_time_divider = true;
            model_ob.last_time_divider = msg_date;
          }
        }
        if (last_time_divider) {
          show_user = true;
        }
        if (msg.type !== "message") show_user = true;
        if (msg.subtype === "me_message" || prev_msg && prev_msg.subtype === "me_message") {
          show_user = true;
        }
        var do_inline_imgs = true;
        if (standalone) do_inline_imgs = false;
        var has_rxns = false;
        var rxns = TS.rxns.getExistingRxnsByKey(msg._rxn_key);
        if (rxns) has_rxns = true;
        if (args.for_mention_rxn_display) show_user = false;
        var in_main_message_container = container_id_with_hash === "#msgs_div";
        var show_channel_highlight = in_main_message_container && TS.recaps_signal && TS.recaps_signal.msgShouldBeHighlighted(msg);
        var is_highlighted_unfurl = in_main_message_container && TS.recaps_signal && TS.recaps_signal.isMessageHighlightedUnfurl(msg);
        var template_args = {
          msg: msg,
          model_ob: model_ob,
          member: member,
          actions: actions,
          show_user: show_user,
          unprocessed: unprocessed,
          highlight: highlight,
          do_inline_imgs: do_inline_imgs,
          msg_dom_id: msg_dom_id,
          standalone: standalone,
          hide_actions: hide_actions,
          full_date: full_date,
          relative_ts: relative_ts,
          jump_link: jump_link,
          show_resend_controls: msg.ts in TS.model.display_unsent_msgs,
          starred_items_list: starred_items_list,
          starred_items_actions: starred_items_actions,
          no_attachments: no_attachments,
          is_ephemeral: is_ephemeral,
          enable_slack_action_links: enable_slack_action_links,
          is_bot: is_bot,
          bot_id: bot_id,
          app_id: app_id,
          is_app_data_enabled: is_app_data_enabled,
          highlight_as_new: highlight_as_new,
          show_star: !starred_items_list && !is_ephemeral,
          has_rxns: has_rxns,
          for_mention_display: args.for_mention_display,
          for_mention_rxn_display: args.for_mention_rxn_display,
          for_search_display: args.for_search_display,
          for_top_results_search_display: args.for_top_results_search_display,
          ts_tip_delay_class: "ts_tip_delay_600",
          is_root_msg: args.is_root_msg,
          is_in_conversation: is_in_conversation,
          is_threads_view: is_threads_view,
          file_title_only: msg.subtype === "file_reaction",
          is_slackbot_response: msg.subtype === "slackbot_response",
          show_channel_highlight: show_channel_highlight,
          is_highlighted_unfurl: is_highlighted_unfurl,
          show_briefing_feedback: args.briefing
        };
        if (actions.add_rxn || actions.add_file_rxn || actions.add_file_comment_rxn) {
          template_args.show_rxn_action = true;
        }
        template_args.star_components = TS.templates.builders.buildStarComponents("message", msg, model_ob);
        var selectable = true;
        if (standalone) selectable = false;
        if (TS.utility.msgs.isFileMsg(msg)) selectable = false;
        template_args.selectable = selectable;
        if (is_in_conversation) {
          template_args.msg_dom_id = TS.templates.makeMsgDomIdInConversation(msg.ts);
        }
        if (TS.utility.msgs.isMsgReply(msg)) {
          template_args.show_reply_action = false;
        } else {
          var ignore_membership = true;
          template_args.show_reply_action = TS.replies.canReplyToMsg(model_ob, msg, ignore_membership) && !args.is_root_msg;
          if (!template_args.show_reply_action && TS.utility.msgs.isFileMsg(msg) && msg.file) template_args.show_comment_action = true;
        }
        var is_root_msg = msg.ts == msg.thread_ts;
        if ((is_root_msg || !msg.thread_ts) && is_in_conversation && TS.client) {
          template_args.format_for_thread_root = true;
          if (model_ob.is_im || model_ob.is_mpim) {
            template_args.model_ob_name = TS.i18n.t("Direct message", "messages")();
          } else {
            template_args.model_ob_name = TS.i18n.t("in {channel_display_name}", "messages")({
              channel_display_name: TS.shared.getDisplayNameForModelOb(model_ob)
            });
          }
        }
        if (is_root_msg && msg.reply_count && !is_in_conversation && !standalone && !args.for_search_display && !args.for_top_results_search_display && !args.is_threads_view) {
          template_args.show_reply_bar = true;
        }
        template_args.is_tombstone = msg.subtype === "tombstone";
        template_args.is_new_reply = !!args.is_new_reply;
        if (TS.boot_data.feature_new_broadcast && TS.utility.msgs.isMsgReply(msg) && msg.subtype === "thread_broadcast" && !is_in_conversation && !standalone && !args.is_threads_view) {
          template_args.is_broadcast = true;
          template_args.show_reply_action = true;
        }
        if (template_args.is_broadcast && msg.root) {
          template_args.root_repliers_summary = new Handlebars.SafeString(TS.templates.builders.buildBroadcastRepliersSummaryHTML(msg.root));
          if (msg.root.subtype !== "tombstone") {
            var root_msg_text = msg.root.text;
            var attachment = _.first(msg.root.attachments);
            if (_.get(attachment, "is_msg_unfurl")) {
              var is_simple_msg_unfurl = attachment.from_url && msg.root.text === "<" + attachment.from_url + ">";
              if (!root_msg_text || is_simple_msg_unfurl) {
                root_msg_text = attachment.text;
              }
            }
            if (root_msg_text) {
              var root_excerpt = TS.format.formatBroadcastExcerpt(root_msg_text, msg.root);
              if (root_excerpt.length > 150) root_excerpt = TS.utility.truncateHTML(root_excerpt, 150);
              template_args.root_excerpt = new Handlebars.SafeString(root_excerpt);
            }
          }
        }
        var item;
        if (msg.subtype === "file_share" || msg.subtype === "file_mention") {
          item = msg.file;
        } else if (msg.subtype === "file_comment") {
          item = msg.comment;
        } else {
          item = msg;
        }
        if (item && item.pinned_to && item.pinned_to.length > 0) {
          template_args.is_pinned = _.some(item.pinned_to, function(id) {
            return id === model_ob.id;
          });
        } else {
          template_args.is_pinned = false;
        }
        if (template_args.is_pinned) {
          template_args.pin_html = TS.templates.builders.buildPinInfoHtml(msg);
        } else {
          template_args.pin_html = "";
        }
        if (TS.boot_data.feature_sli_recaps && TS.recaps_signal) {
          template_args.is_recap = msg.recap && TS.recaps_signal && TS.recaps_signal.isMessageHighlight(msg);
          if (TS.boot_data.feature_sli_recaps_interface) {
            template_args.highlights_html = TS.templates.builders.buildHighlightsInfoHtml(msg);
          }
          var is_in_debug_group = TS.recaps_signal.sli_recaps_debug_group === "sli_debug_info";
          template_args.show_recap_debug = msg.recap && is_in_debug_group;
        }
        if (TS.boot_data.feature_sli_highlight_unreads && _.get(TS, "client.ui.sli_highlight_all_unreads")) {
          if (args.from_all_unreads && _.get(TS.recaps_signal, "sli_recaps_debug_group") === "sli_debug_info") {
            template_args.show_recap_debug = true;
          }
        }
        if (TS.boot_data.feature_sli_briefing && TS.highlights_briefing && args.briefing) {
          template_args.show_recap_debug = TS.highlights_briefing.sli_recaps_debug_group === "sli_debug_info";
        }
        if (!msg.subtype && (args.for_search_display || args.for_top_results_search_display) && msg.file) {
          if (msg.comment) {
            template_args.star_components = TS.templates.builders.buildStarComponents("file_comment", msg.comment, msg.file);
          } else {
            template_args.star_components = TS.templates.builders.buildStarComponents("file", msg.file, null);
          }
        }
        if (!TS.utility.msgs.isTempMsg(msg) && !msg.is_ephemeral) {
          if (args.for_search_display && TS.boot_data.page_needs_enterprise && msg.team && TS.model.team_id != msg.team && msg.channel && !msg.channel.is_shared && msg.permalink) {
            template_args.permalink = msg.permalink;
          } else {
            template_args.permalink = TS.utility.msgs.constructMsgPermalink(model_ob, msg.ts, msg.thread_ts);
          }
          template_args.abs_permalink = TS.utility.msgs.constructAbsoluteMsgPermalink(model_ob, msg.ts, msg.thread_ts);
        }
        if (args.for_top_results_search_display && TS.boot_data.page_needs_enterprise) {
          if (msg.team && TS.model.team.id != msg.team && !msg.channel.is_shared) {
            template_args.abs_permalink = msg.permalink;
            template_args.archive_link = msg.permalink;
            template_args.permalink = msg.permalink;
          }
        }
        if (msg.subtype === "file_share" || msg.subtype === "file_mention" || msg.subtype === "file_reaction") {
          if (msg.file) {
            var get_file_share_html;
            var is_not_welcome_post = true;
            var file_display_name;
            template_args.file = msg.file;
            template_args.edit = TS.files.getFileActions(msg.file).edit;
            template_args.download = !(msg.file.mode === "snippet" || (msg.file.mode === "post" || msg.file.mode === "space") || msg.file.is_external);
            template_args.new_window = !template_args.edit && !template_args.download;
            template_args.abs_permalink = msg.file.permalink;
            if (!starred_items_list) {
              template_args.star_components = TS.templates.builders.buildStarComponents("file", msg.file, null);
            }
            template_args.lightbox = false;
            if (msg.file.thumb_360_w == 360 || msg.file.thumb_360_h == 360) {
              template_args.lightbox = true;
            }
            $.extend(template_args, TS.files.getFileTemplateArguments(msg.file, 360));
            template_args.is_message = true;
            template_args.image_lazyload = !!TS.client;
            template_args.lightbox = true;
            if (msg.subtype === "file_share" && msg.upload) {
              if (msg.file.mode === "email") template_args.is_added = true;
              template_args.icon_class = TS.utility.getImageIconClass(msg.file, "thumb_80");
            } else if (msg.file.user != msg.user) {
              template_args.uploader = TS.utility.members.getEntityFromFile(msg.file);
              is_not_welcome_post = !_isWelcomePostToTeamOwner(msg);
            }
            if (_SNIPPET_REGEX.test(msg.file.mode)) {
              file_display_name = TS.i18n.t("{file_pretty_name} snippet", "message")({
                file_pretty_name: msg.file.pretty_type
              });
            } else if (/(email)/.test(msg.file.mode)) {
              file_display_name = TS.i18n.t("email", "message")();
            } else if (/(post|space)/.test(msg.file.mode)) {
              file_display_name = TS.i18n.t("post", "message")();
            } else if ((msg.file.thumb_360 || msg.file.thumb_360_gif) && msg.file.mimetype.indexOf("image/") !== -1) {
              file_display_name = TS.i18n.t("image", "message")();
            } else {
              file_display_name = TS.i18n.t("file", "message")();
            }
            if (template_args.uploader && is_not_welcome_post) {
              if (msg.subtype === "file_share" && msg.upload) {
                if (msg.file.initial_comment) {
                  template_args.show_initial_comment = true;
                  if (_SNIPPET_REGEX.test(msg.file.mode)) {
                    get_file_share_html = TS.i18n.t("added and commented on {uploader_name_possessive_html} {file_display_name}", "message");
                  } else {
                    get_file_share_html = TS.i18n.t("uploaded and commented on {uploader_name_possessive_html} {file_display_name}", "message");
                  }
                } else if (_SNIPPET_REGEX.test(msg.file.mode)) {
                  get_file_share_html = TS.i18n.t("added {uploader_name_possessive_html} {file_display_name}", "message");
                } else {
                  get_file_share_html = TS.i18n.t("uploaded {uploader_name_possessive_html} {file_display_name}", "message");
                }
              } else if (msg.subtype === "file_mention") {
                get_file_share_html = TS.i18n.t("mentioned {uploader_name_possessive_html} {file_display_name}", "message");
              } else {
                get_file_share_html = TS.i18n.t("shared {uploader_name_possessive_html} {file_display_name}", "message");
              }
              var uploader_name = TS.templates.builders.makeMemberPreviewLink(template_args.uploader, false);
              var uploader_name_possessive = TS.i18n.possessive(TS.members.getMemberDisplayName(template_args.uploader));
              var target_attribute = TS.boot_data.app === "client" ? 'target="' + msg.file.permalink + '" ' : "";
              var permalink_anchor_tag = '<a href="' + msg.file.permalink + '" ' + target_attribute + 'data-file-id="' + msg.file.id + '">';
              var possessive_icu = TS.i18n.t("{uploader_name}{uploader_name_affix}", "message")({
                uploader_name: uploader_name,
                uploader_name_affix: uploader_name_possessive
              });
              var uploader_name_possessive_html = "</a> " + possessive_icu + permalink_anchor_tag;
              template_args.file_share_html = get_file_share_html({
                file_display_name: file_display_name,
                uploader_name_possessive_html: uploader_name_possessive_html
              });
            } else {
              if (msg.subtype === "file_share" && msg.upload) {
                if (msg.file.initial_comment) {
                  template_args.show_initial_comment = true;
                  if (_SNIPPET_REGEX.test(msg.file.mode)) {
                    get_file_share_html = TS.i18n.t("added and commented on this {file_display_name}", "message");
                  } else {
                    get_file_share_html = TS.i18n.t("uploaded and commented on this {file_display_name}", "message");
                  }
                } else if (_SNIPPET_REGEX.test(msg.file.mode)) {
                  get_file_share_html = TS.i18n.t("added this {file_display_name}", "message");
                } else {
                  get_file_share_html = TS.i18n.t("uploaded this {file_display_name}", "message");
                }
              } else if (msg.subtype === "file_mention") {
                get_file_share_html = TS.i18n.t("mentioned this {file_display_name}", "message");
              } else {
                get_file_share_html = TS.i18n.t("shared this {file_display_name}", "message");
              }
              template_args.file_share_html = get_file_share_html({
                file_display_name: file_display_name
              });
            }
          }
          template_args.file_share_html = new Handlebars.SafeString(template_args.file_share_html);
        } else if (msg.subtype === "file_comment") {
          if (prev_msg && !prev_msg.no_display && prev_msg.file && msg.file && msg.file.id == prev_msg.file.id) {
            if (!new_day) template_args.is_file_convo_continuation = true;
          }
          template_args.show_comment_quote_icon = true;
          if (prev_msg && !prev_msg.no_display && prev_msg.file && msg.file && msg.file.id == prev_msg.file.id) {
            if (prev_msg.subtype === "file_share" && prev_msg.upload && prev_msg.file.initial_comment) {
              if (!new_day) template_args.show_comment_quote_icon = false;
            }
            if (prev_msg.subtype === "file_comment") {
              if (!new_day) template_args.show_comment_quote_icon = false;
            }
          }
          template_args.file = msg.file;
          template_args.icon_class = TS.utility.getImageIconClass(msg.file, "thumb_40");
          template_args.comment = msg.comment;
          template_args.member = TS.utility.members.getEntityFromMessage(msg);
          if (msg.file && msg.file.user != msg.comment.user) {
            template_args.uploader = TS.utility.members.getEntityFromFile(msg.file);
          }
          if (!starred_items_list) {
            template_args.star_components = TS.templates.builders.buildStarComponents("file_comment", msg.comment, msg.file);
          }
        }
        var msg_classes = _assignMsgClasses(msg, template_args);
        template_args.msg_classes = msg_classes.join(" ");
        html += TS.templates.message(template_args);
        html = TS.format.replaceHighlightMarkers(html);
        return html;
      } catch (err) {
        var extra = "";
        if (msg) {
          extra = "msg.ts:" + msg.ts;
          delete args.model_ob;
          try {
            args.msg = _.cloneDeep(msg);
            args.msg.text = "REDACTED";
            extra += " " + JSON.stringify(args, null, "  ");
          } catch (err_again) {}
        }
        if (!err.message) err.message = "";
        err.message += " " + extra;
        TS.warn("Problem in TS.templates.builders.msgs.buildHTML with args: " + JSON.stringify(err.message));
        TS.console.logStackTrace();
        if (TS.boot_data.feature_tinyspeck) {
          return TS.templates.message_failed({
            subtype: msg && msg.subtype ? msg.subtype : "",
            msg_ts: msg ? msg.ts : "",
            model_ob_id: model_ob ? model_ob.id : ""
          });
        }
        return "";
      }
    }
  });

  function _assignMsgClasses(msg, template_args) {
    var msg_classes = ["message"];
    if (msg.subtype) {
      if (msg.subtype === "channel_join" || msg.subtype === "group_join") {
        msg_classes.push("joined", "automated");
      } else if (msg.subtype === "channel_leave" || msg.subtype === "group_leave") {
        msg_classes.push("left", "automated");
      } else if (msg.subtype === "channel_topic" || msg.subtype === "group_topic") {
        msg_classes.push("topic", "automated");
      } else if (msg.subtype === "channel_name" || msg.subtype === "group_name") {
        msg_classes.push("rename", "automated");
      } else if (msg.subtype === "channel_purpose" || msg.subtype === "group_purpose") {
        msg_classes.push("purpose", "automated");
      } else if (msg.subtype === "channel_archive" || msg.subtype === "group_archive") {
        msg_classes.push("archived", "automated");
      } else if (msg.subtype === "channel_unarchive" || msg.subtype === "group_unarchive") {
        msg_classes.push("unarchived", "automated");
      } else if (msg.subtype === "bot_message") {
        msg_classes.push("bot_message");
      } else if (msg.subtype === "sh_room_shared") {
        msg_classes.push("sh_shared", "automated");
      } else if (msg.subtype === "sh_room_created") {
        msg_classes.push("sh_created", "automated");
      } else if (msg.subtype === "bot_add" || msg.subtype === "bot_remove" || msg.subtype === "bot_enable" || msg.subtype === "bot_disable") {
        msg_classes.push("bot_change", "automated");
      } else if (msg.subtype === "reminder_add" || msg.subtype === "reminder_delete") {
        msg_classes.push("reminder_change", "automated");
      }
    }
    if (TS.boot_data.feature_fix_files) msg_classes.push("feature_fix_files");
    if (msg.no_display) msg_classes.push("hidden");
    if (template_args.for_search_display) msg_classes.push("for_search_display");
    if (template_args.for_top_results_search_display) msg_classes.push("for_top_results_search_display");
    if (template_args.starred_items_list) msg_classes.push("for_star_display");
    if (template_args.for_mention_display) msg_classes.push("for_mention_display");
    if (template_args.for_mention_rxn_display) msg_classes.push("for_mention_rxn_display");
    if (template_args.is_ephemeral) msg_classes.push("ephemeral");
    if (template_args.unprocessed) msg_classes.push("unprocessed");
    if (template_args.highlight) msg_classes.push("highlight");
    if (template_args.highlight_as_new) msg_classes.push("new");
    if (template_args.app_id) msg_classes.push("is_app");
    if (template_args.is_pinned) msg_classes.push("is_pinned");
    if (template_args.show_channel_highlight && TS.boot_data.feature_sli_recaps_interface) msg_classes.push("show_recap");
    if (template_args.is_highlighted_unfurl && TS.boot_data.feature_sli_recaps_interface) msg_classes.push("is_recap_unfurl");
    if (template_args.standalone) {
      msg_classes.push("standalone");
    } else {
      msg_classes.push("dirty_hover_container");
    }
    if (template_args.show_user) {
      msg_classes.push("first");
    } else {
      if (template_args.file) msg_classes.push("first");
      if (template_args.is_in_conversation) msg_classes.push("first");
    }
    if (template_args.file) {
      msg_classes.push("file_reference");
      if (template_args.is_mention) {
        msg_classes.push("file_mention");
      } else {
        msg_classes.push("file_share");
      }
    }
    if (template_args.comment) {
      if (template_args.is_file_convo_continuation) {
        msg_classes.push("comment_continuation");
      } else {
        msg_classes.push("first");
      }
    }
    if (template_args.is_root_msg) msg_classes.push("selected");
    if (template_args.is_new_reply) msg_classes.push("new_reply");
    if (template_args.is_tombstone) msg_classes.push("deleted");
    if (TS.boot_data.feature_sli_recaps) {
      if (template_args.is_recap) {
        msg_classes.push("is_recap");
        if (TS.boot_data.feature_sli_recaps_interface) msg_classes.push("show_recap_highlight");
      }
      if (template_args.show_recap_debug) msg_classes.push("show_recap_debug");
    }
    if (TS.boot_data.feature_new_broadcast) {
      if (template_args.is_broadcast) msg_classes.push("thread_broadcast");
    }
    return msg_classes;
  }

  function _isWelcomePostToTeamOwner(msg) {
    return msg.file.name === TS.utility.welcome_post.WELCOME_POST_NAME && msg.user === "USLACKBOT" && msg.file.user === TS.model.user.id;
  }
  var _SNIPPET_REGEX = /(snippet)/;
})();
(function() {
  "use strict";
  TS.registerModule("templates.helpers", {
    onStart: function() {
      TS.templates.helpers.register();
    },
    register: function() {
      Handlebars.registerHelper("i18n_ns", function(namespace) {
        if (!_.isObject(this)) {
          TS.warn('Cannot set i18n namespace "' + namespace + '". Chances are you‘ve inadvertently changed the context in a Handlebars partial to something that‘s not an object.');
          return;
        }
        if (this._i18n_ns) {
          if (this._i18n_ns_history) {
            this._i18n_ns_history.push(this._i18n_ns);
          } else {
            this._i18n_ns_history = [this._i18n_ns];
          }
        }
        this._i18n_ns = namespace;
      });
      Handlebars.registerHelper("_i18n_ns_end", function() {
        if (this._i18n_ns_history && this._i18n_ns_history.length) {
          this._i18n_ns = this._i18n_ns_history.pop();
        }
      });
      Handlebars.registerHelper("i18n_img", function(options) {
        var url = options.fn(this);
        var locales = options && options.hash && options.hash.locales ? options.hash.locales : null;
        if (locales) {
          locales = locales.replace(/\s/g, "");
          if (locales.split(",").indexOf(TS.i18n.locale()) > -1) {
            url = url.replace(/(\..+$)/, "." + TS.i18n.locale() + "$1");
          }
        }
        return url;
      });
      Handlebars.registerHelper("t", function(options) {
        var str;
        if (typeof options === "string") {
          str = options;
          options = arguments[1];
        } else {
          str = options.fn();
        }
        var ns;
        if (options.hash.ns !== undefined) {
          ns = options.hash.ns;
        } else if (this._i18n_ns !== undefined) {
          ns = this._i18n_ns;
        } else {
          ns = options.data.root && options.data.root._i18n_ns ? options.data.root._i18n_ns : "";
        }
        var data = this;
        if (!_.isObject(data)) {
          data = {
            "this": data
          };
        }
        var modified_items = {};
        var item;
        _.forOwn(options.hash, function(val, item) {
          modified_items[item] = data[item];
          data[item] = Handlebars.Utils.escapeExpression(val);
        });
        var tokens = str.match(/{[^\s}]+}/g);
        if (tokens && tokens.length) {
          var getValue = function(namespace) {
            var parts = namespace.split(".");
            if (parts.length > 1) {
              var i = 0;
              var l = parts.length;
              var obj = data;
              for (i; i < l; i += 1) {
                obj = obj[parts[i]];
                if (obj === undefined) return;
              }
              return obj;
            }
            return data[namespace];
          };
          var value;
          var i = 0;
          var l = tokens.length;
          for (i; i < l; i += 1) {
            item = tokens[i].substr(1, tokens[i].length - 2);
            if (options.hash[item] === undefined) {
              value = getValue(item);
              if (value !== undefined) {
                modified_items[item] = data[item];
                data[item] = Handlebars.Utils.escapeExpression(value);
              }
            }
          }
        }
        if (options.hash.debug) {
          TS.info("debug handlerbars t helper");
          TS.info(this);
        }
        str = TS.i18n.t(str, ns)(data);
        _.forOwn(modified_items, function(val, item) {
          data[item] = val;
        });
        return str;
      });
      Handlebars.registerHelper("zdLocale", function() {
        return TS.i18n.zdLocale();
      });
      Handlebars.registerHelper("convertTimestampToMilliseconds", function(ts) {
        return ts * 1e3;
      });
      Handlebars.registerHelper("i18n_number", function(num) {
        return TS.i18n.number(num);
      });
      Handlebars.registerHelper("listify", function(array, options) {
        if (options.hash.map) array = _.map(array, options.hash.map);
        var conjunction = _.get(options.hash, "conjunction");
        var strong = _.get(options.hash, "strong");
        var no_escape = _.get(options.hash, "no_escape");
        var item_prefix = _.get(options.hash, "item_prefix");
        var list = TS.i18n.listify(array, {
          conj: conjunction,
          strong: strong,
          no_escape: no_escape,
          item_prefix: item_prefix
        });
        return new Handlebars.SafeString(list.join(""));
      });
      Handlebars.registerHelper("ifInArray", function(item, array, options) {
        if (array.indexOf(item) > -1) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("getDisplayNames", function(arr) {
        var names = arr.map(function(member_or_id) {
          var member_id = _.isString(member_or_id) ? member_or_id : member_or_id.id;
          return TS.members.getMemberDisplayNameById(member_id, true, false);
        });
        return names;
      });
      Handlebars.registerHelper("isClient", function(options) {
        if (TS.boot_data.app === "client") {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("isChrome", function(options) {
        if (TS.model.is_chrome_desktop || TS.model.is_chrome_mobile) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("isFF", function(options) {
        if (TS.model.is_FF) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("isSafariDesktop", function(options) {
        if (TS.model.is_safari_desktop) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("isWeb", function(options) {
        if (TS.boot_data.app === "web" || TS.boot_data.app === "space" || TS.boot_data.app === "calls") {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("isMac", function(options) {
        if (TS.model.is_mac) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("isWin", function(options) {
        if (TS.model.is_win) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("isLin", function(options) {
        if (TS.model.is_lin) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("isOurApp", function(options) {
        if (TS.model.is_our_app) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("unlessOurApp", function(options) {
        return Handlebars.helpers.isOurApp.call(this, {
          fn: options.inverse,
          inverse: options.fn,
          hash: options.hash
        });
      });
      Handlebars.registerHelper("feature", function(options) {
        var flag = options.hash.flag;
        if (TS.qs_args[flag] == 1 || TS.boot_data[flag] == 1) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("pageNeedsEnterprise", function(options) {
        if (TS.boot_data.page_needs_enterprise) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("sharedChannelsEnabled", function(options) {
        if (TS.boot_data.page_needs_enterprise || TS.boot_data.feature_shared_channels_client) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("isChannelRequired", function(channel, options) {
        return TS.channels.isChannelRequired(channel) ? options.fn(this) : options.inverse(this);
      });
      Handlebars.registerHelper("experiment", function(options) {
        var name = options.hash.name;
        var group = options.hash.group || "treatment";
        if (TS.experiment.getGroup(name) === group) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("enterprisePOEmail", function() {
        if (TS.boot_data.page_needs_enterprise) {
          return TS.model.enterprise.primary_owner.email;
        }
        return "";
      });
      Handlebars.registerHelper("versioned_x_icon", function() {
        return cdn_url + "/52b9/img/enterprise/icon_times_in_circle.svg";
      });
      Handlebars.registerHelper("pageNeedsEnterpriseOrIsLazyLoadMembersAndBots", function(options) {
        if (TS.boot_data.page_needs_enterprise || TS.lazyLoadMembersAndBots()) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("comments", function(file) {
        return new Handlebars.SafeString(TS.templates.builders.buildComments(file));
      });
      Handlebars.registerHelper("comment_standalone", TS.templates.builders.buildCommentStandalone);
      Handlebars.registerHelper("star", function(type, ob, parent_ob) {
        return new Handlebars.SafeString(TS.templates.builders.buildStar(type, ob, parent_ob));
      });
      Handlebars.registerHelper("starWithTip", function(type, ob, parent_ob) {
        return new Handlebars.SafeString(TS.templates.builders.buildStarWithTip(type, ob, parent_ob));
      });
      Handlebars.registerHelper("inlineRoomPreviewToggler", TS.templates.builders.buildInlineRoomPreviewToggler);
      Handlebars.registerHelper("isInlineFilePreviewExpanded", function(options) {
        var container_id = options.hash.container_id;
        var file_id = options.hash.file_id;
        var max_image_size = 360;
        var should_expand = false;
        var src = _inlineImgSrcForFile(file_id, max_image_size);
        if (src) {
          should_expand = TS.inline_imgs.shouldExpand(container_id, TS.model.inline_imgs[src]);
        } else {
          should_expand = TS.inline_file_previews.shouldExpand(container_id, file_id);
        }
        if (should_expand) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("shouldTruncateInlineFilePreview", function(file, options) {
        if (typeof file === "string") file = TS.files.getFileById(file);
        if (file && TS.inline_file_previews.shouldTruncate(file)) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("shouldNotTruncateInlineFilePreview", function(file, options) {
        return Handlebars.helpers.shouldTruncateInlineFilePreview.call(this, file, {
          fn: options.inverse,
          inverse: options.fn,
          hash: options.hash
        });
      });
      Handlebars.registerHelper("isInlineFilePreviewTruncated", function(container_id, file, options) {
        if (typeof file === "string") file = TS.files.getFileById(file);
        if (file && TS.inline_file_previews.isTruncated(container_id, file)) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("isInlineFilePreviewNotTruncated", function(container_id, file, options) {
        return Handlebars.helpers.isInlineFilePreviewTruncated.call(this, container_id, file, {
          fn: options.inverse,
          inverse: options.fn,
          hash: options.hash
        });
      });
      Handlebars.registerHelper("formatActionLink", function(action, msg, enable_slack_action_links) {
        if (!action) return "";
        var text = "<" + action.url + "|" + action.title + ">";
        var html = TS.format.formatWithOptions(text, msg, {
          no_highlights: true,
          no_specials: true,
          enable_slack_action_links: enable_slack_action_links === true
        });
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("ellipsize", function(str, len) {
        TS.info("len" + len);
        return TS.utility.ellipsize(str, len);
      });
      Handlebars.registerHelper("stripWhitespace", function(str) {
        return str.replace(/\s+/g, "");
      });
      Handlebars.registerHelper("cash", function(options) {
        var out;
        if (TS.boot_data.feature_i18n_currencies) {
          var include_all_digits = options.hash.all_digits || false;
          var currency_code = options.hash.currency_code || "USD";
          var amount = parseInt(options.hash.value, 10);
          out = TS.utility.money.formatMoney(amount, currency_code, {
            all_digits: include_all_digits
          });
          return out;
        }
        var all_digits = options.hash.all_digits || false;
        var neg = false;
        var val = parseInt(options.hash.value, 10);
        if (val < 0) {
          neg = true;
          val = 0 - val;
        }
        var dollars = (val / 100).toString();
        out = (neg ? "-" : "") + "$" + dollars;
        if (!all_digits && out.substring(-3) === ".00") {
          out = out.substring(0, -3);
        } else if (_REGEX_CASH_DECIMAL_FORMATTING.test(dollars)) {
          out += "0";
        }
        return out;
      });
      Handlebars.registerHelper("possessive", function(str) {
        return TS.i18n.possessive(str);
      });
      Handlebars.registerHelper("fullPossessiveString", function(str) {
        return TS.i18n.fullPossessiveString(str);
      });
      Handlebars.registerHelper("possessiveForMemberById", function(id) {
        var member = TS.members.getMemberById(id);
        if (!member) return "";
        return Handlebars.helpers.possessiveForMember(member);
      });
      Handlebars.registerHelper("possessiveForMember", function(member) {
        var str = TS.members.getMemberDisplayName(member);
        return TS.i18n.possessive(str);
      });
      Handlebars.registerHelper("concatStr", function() {
        return Array.prototype.slice.call(arguments, 0, arguments.length - 1).join("");
      });
      Handlebars.registerHelper("initialsSafe", function(team_name) {
        if (typeof team_name !== "string") return "";
        var words = team_name.split(" ").slice(0, 2);
        var initials = "";
        for (var i = 0; i < words.length; i += 1) {
          initials += words[i][0];
        }
        return new Handlebars.SafeString(initials);
      });
      Handlebars.registerHelper("json", function(obj) {
        if (typeof obj === "object" && obj !== null && obj.name === "json") {
          return JSON.stringify(this);
        }
        return JSON.stringify(obj);
      });
      Handlebars.registerHelper("prettyJson", function(obj) {
        if (typeof obj === "object" && obj !== null && obj.name === "json") {
          return JSON.stringify(this, null, 2);
        }
        return JSON.stringify(obj, null, 2);
      });
      Handlebars.registerHelper("currentTeamName", function() {
        return TS.model.team.name || "";
      });
      Handlebars.registerHelper("currentTeamHostSafe", function() {
        return new Handlebars.SafeString(window.location.hostname);
      });
      Handlebars.registerHelper("canUserCreateGroups", function(options) {
        return TS.permissions.members.canCreateGroups() ? options.fn(this) : options.inverse(this);
      });
      Handlebars.registerHelper("canCreateMpims", function(options) {
        return TS.permissions.members.canCreateMpims() ? options.fn(this) : options.inverse(this);
      });
      Handlebars.registerHelper("canKickFromChannels", function(options) {
        return TS.permissions.members.canKickFromChannels() ? options.fn(this) : options.inverse(this);
      });
      Handlebars.registerHelper("canKickFromGroups", function(options) {
        return TS.permissions.members.canKickFromGroups() ? options.fn(this) : options.inverse(this);
      });
      Handlebars.registerHelper("numberWithMax", function(number, max) {
        if (number >= max) {
          return max - 1 + "+";
        }
        return number;
      });
      Handlebars.registerHelper("convertFilesize", function(size) {
        return TS.utility.convertFilesize(size);
      });
      Handlebars.registerHelper("roundToThree", function(num) {
        return TS.utility.roundToThree(num);
      });
      Handlebars.registerHelper("toDate", function(ts) {
        return TS.utility.date.toDate(ts);
      });
      Handlebars.registerHelper("toCalendarDate", function(ts) {
        return TS.utility.date.toCalendarDate(ts);
      });
      Handlebars.registerHelper("toCalendarDateWords", function(ts) {
        return TS.utility.date.toCalendarDateWords(ts);
      });
      Handlebars.registerHelper("toCalendarDateShort", function(ts) {
        return TS.utility.date.toCalendarDate(ts, true);
      });
      Handlebars.registerHelper("toCalendarDateOrNamedDay", function(ts) {
        return TS.utility.date.toCalendarDateOrNamedDay(ts);
      });
      Handlebars.registerHelper("toCalendarDateOrNamedDayWords", function(ts) {
        return TS.utility.date.toCalendarDateOrNamedDayWords(ts);
      });
      Handlebars.registerHelper("toCalendarDateIfYesterdayOrToday", function(ts) {
        return TS.utility.date.toCalendarDateIfYesterdayOrToday(ts);
      });
      Handlebars.registerHelper("toCalendarDateOrNamedDayShort", function(ts) {
        return TS.utility.date.toCalendarDateOrNamedDayShort(ts);
      });
      Handlebars.registerHelper("toTime", function(ts, ampm, seconds) {
        return TS.utility.date.toTime(ts, ampm !== false, seconds === true);
      });
      Handlebars.registerHelper("toTimeWords", function(ts, ampm, seconds) {
        return TS.utility.date.toTimeWords(ts, ampm !== false, seconds === true);
      });
      Handlebars.registerHelper("toTimeAgo", function(ts) {
        return TS.utility.date.toTimeAgo(ts);
      });
      Handlebars.registerHelper("toTimeAgoShort", function(ts, really_short) {
        really_short = _.isBoolean(really_short) ? really_short : false;
        var time = TS.utility.date.toTimeAgoShort(ts, really_short);
        var html = '<span class="relative_ts" data-ts="' + TS.utility.htmlEntities(ts) + '" data-really-short="' + !!really_short + '">' + TS.utility.htmlEntities(time) + "</span>";
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("toTimeDuration", function(ts) {
        return TS.utility.date.toTimeDuration(ts);
      });
      Handlebars.registerHelper("msgTsTitle", function(msg, msg_dom_id, is_archive_link) {
        var title;
        var action_text;
        var ephemeral_or_temp = msg.is_ephemeral || TS.utility.msgs.isTempMsg(msg);
        var is_unread_view = TS.model.unread_view_is_showing && _.isString(msg_dom_id) && msg_dom_id === TS.templates.makeMsgDomIdInUnreadView(msg.ts);
        var is_threads_view = TS.model.threads_view_is_showing && _.isString(msg_dom_id) && msg_dom_id === TS.templates.makeMsgDomIdInThreadsView(msg.ts);
        var is_convo = TS.client && TS.ui.replies.activeConvoThreadTs() === msg.thread_ts && _.isString(msg_dom_id) && TS.templates.makeMsgDomIdInConversation(msg.ts) === msg_dom_id;
        if (is_unread_view) {
          action_text = TS.i18n.t("Jump to conversation", "templates_helpers")();
        } else if (is_threads_view) {
          if (msg.ts === msg.thread_ts) {
            action_text = TS.i18n.t("Open in channel", "templates_helpers")();
          } else {
            action_text = TS.i18n.t("Open in sidebar", "templates_helpers")();
          }
        } else if (is_convo) {
          if (msg.ts === msg.thread_ts) action_text = TS.i18n.t("Open in channel", "templates_helpers")();
        } else if (TS.client && !ephemeral_or_temp && is_archive_link) {
          action_text = TS.i18n.t("Open in archives", "templates_helpers")();
        }
        var date_at_time = TS.i18n.t("{date} at {time}", "templates_helpers")({
          date: TS.utility.date.toCalendarDateOrNamedDayShort(msg.ts),
          time: TS.utility.date.toTime(msg.ts, true, true)
        }).replace(/\s/g, "&nbsp;");
        if (action_text) {
          title = action_text + '<br><span class="subtle_silver no_wrap">' + date_at_time + "</span>";
        } else {
          title = date_at_time;
        }
        return new Handlebars.SafeString(title);
      });
      Handlebars.registerHelper("toHour", function(ts) {
        return TS.utility.date.toHour(ts);
      });
      Handlebars.registerHelper("memberLocalTime", function(member) {
        return new Handlebars.SafeString(TS.utility.date.memberLocalTime(member));
      });
      Handlebars.registerHelper("memberUTCOffset", function(member) {
        return TS.utility.date.memberUTCOffset(member);
      });
      Handlebars.registerHelper("isInDifferentTimeZone", function(member, options) {
        if (member.tz_offset !== TS.model.user.tz_offset) return options.fn(this);
        return options.inverse(this);
      });
      Handlebars.registerHelper("isToday", function(member, options) {
        if (TS.utility.date.isToday(TS.utility.date.toDateObject(member))) return options.fn(this);
        return options.inverse(this);
      });
      Handlebars.registerHelper("toMonthYearFormat", function(ts) {
        return TS.utility.date.toMonthYearFormat(ts);
      });
      Handlebars.registerHelper("if_equal", function(context, options) {
        options = _optionsFnInverseBooleanHelper(options);
        if (context == options.hash.compare) return options.fn(this);
        return options.inverse(this);
      });
      Handlebars.registerHelper("if_not_equal", function(context, options) {
        options = _optionsFnInverseBooleanHelper(options);
        if (context != options.hash.compare) return options.fn(this);
        return options.inverse(this);
      });
      Handlebars.registerHelper("if_gt", function(context, options) {
        if (context > options.hash.compare) return options.fn(this);
        return options.inverse(this);
      });
      Handlebars.registerHelper("if_lt", function(context, options) {
        if (context < options.hash.compare) return options.fn(this);
        return options.inverse(this);
      });
      Handlebars.registerHelper("or", function(a, b, options) {
        options = _optionsFnInverseBooleanHelper(options);
        if (a || b) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("and", function(a, b, options) {
        options = _optionsFnInverseBooleanHelper(options);
        if (a && b) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("foreach", function(arr, options) {
        if (options.inverse && !arr.length) return options.inverse(this);
        return arr.map(function(item, index) {
          var obj = {
            index: index,
            value: item,
            length: arr.length
          };
          obj.first = index === 0;
          obj.last = index === arr.length - 1;
          return options.fn(obj);
        }).join("");
      });
      Handlebars.registerHelper("repeat", function(n, block) {
        var accum = "";
        for (var i = 0; i < n; i += 1) {
          accum += block.fn(i);
        }
        return accum;
      });
      Handlebars.registerHelper("makeDayDividerDomId", function(ts) {
        return TS.templates.makeDayDividerDomId(ts);
      });
      Handlebars.registerHelper("formatFileTitle", function(file) {
        if (!file || !file.title) return "";
        var file_title = file.title;
        file_title = TS.utility.unHtmlEntities(file_title);
        file_title = TS.utility.htmlEntities(file_title);
        return new Handlebars.SafeString(TS.format.formatWithOptions(file_title, null, {
          no_specials: true
        }));
      });
      Handlebars.registerHelper("formatMessageByType", function(msg, do_inline_imgs, enable_slack_action_links, model_ob, starred_items_list) {
        return new Handlebars.SafeString(TS.templates.builders.formatMessageByType(msg, do_inline_imgs, enable_slack_action_links, model_ob, starred_items_list));
      });
      Handlebars.registerHelper("formatAttachments", function(msg, model_ob, enable_slack_action_links, msg_dom_id) {
        return new Handlebars.SafeString(TS.templates.builders.formatAttachments(msg, model_ob, enable_slack_action_links, msg_dom_id));
      });
      Handlebars.registerHelper("formatMessage", function(text, msg) {
        return new Handlebars.SafeString(TS.format.formatDefault(text, msg));
      });
      Handlebars.registerHelper("formatNoHighlightsNoSpecials", function(text, msg) {
        return TS.format.formatNoHighlightsNoSpecials(text, msg);
      });
      Handlebars.registerHelper("formatMessageAttachmentPartEscaped", TS.utility.attachments.formatMessageAttachmentPart);
      Handlebars.registerHelper("formatMessageAttachmentPart", function(text, msg, do_highlighting, do_specials, enable_slack_action_links) {
        return new Handlebars.SafeString(TS.utility.attachments.formatMessageAttachmentPart(text, msg, do_highlighting, do_specials, enable_slack_action_links));
      });
      Handlebars.registerHelper("formatMessageAttachmentSlackFooter", function(text) {
        var html = TS.format.formatJustText(TS.format.cleanMsg(text));
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("formatTopicOrPurpose", function(text) {
        return new Handlebars.SafeString(TS.utility.formatTopicOrPurpose(text));
      });
      Handlebars.registerHelper("unFormatMessage", function(text, msg) {
        return TS.format.unFormatMsg(text, msg);
      });
      Handlebars.registerHelper("formatMessageResult", function(text) {
        text = TS.format.formatJustText(text);
        text = TS.utility.msgs.handleSearchHighlights(text);
        return text;
      });
      Handlebars.registerHelper("formatCurrentStatus", function(text) {
        return new Handlebars.SafeString(TS.format.formatCurrentStatus(text));
      });
      Handlebars.registerHelper("formatCurrentStatusWithoutAnimations", function(text, options) {
        options = options || {};
        options = options.hash || options;
        return new Handlebars.SafeString(TS.format.formatCurrentStatus(text, undefined, _.assign({
          stop_animations: true
        }, options)));
      });
      Handlebars.registerHelper("rxnPanel", function(rxn_key) {
        var panel_html = TS.templates.builders.rxnPanel(rxn_key);
        if (!panel_html) {
          return "";
        }
        return new Handlebars.SafeString(panel_html);
      });
      Handlebars.registerHelper("makeRefererSafeLink", function(options) {
        if (typeof options.hash.url !== "string") return "";
        return new Handlebars.SafeString(TS.utility.makeRefererSafeLink(options.hash.url));
      });
      Handlebars.registerHelper("makeSafeForDomId", TS.utility.makeSafeForDomId);
      Handlebars.registerHelper("makeMsgAttachmentTextExpanderDomId", TS.templates.makeMsgAttachmentTextExpanderDomId);
      Handlebars.registerHelper("makeMsgDomId", TS.templates.makeMsgDomId);
      Handlebars.registerHelper("makeMsgLabelDomId", TS.templates.makeMsgLabelDomId);
      Handlebars.registerHelper("makeMSRDomId", TS.templates.makeMSRDomId);
      Handlebars.registerHelper("makeMSRDomIdWithModule", TS.templates.makeMSRDomIdWithModule);
      Handlebars.registerHelper("makeSHRoomClass", TS.templates.makeSHRoomClass);
      Handlebars.registerHelper("makeMemberColorClass", function() {
        return TS.templates.builders.makeMemberColorClass.apply(this, arguments);
      });
      Handlebars.registerHelper("buildMsgHTMLForSearch", function() {
        var html = TS.templates.builders.buildMsgHTMLForSearch.apply(this, arguments);
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("buildMsgHTMLForSearchTopResults", function() {
        var html = TS.templates.builders.buildMsgHTMLForSearchTopResults.apply(this, arguments);
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("ifExtracts", function(msg, options) {
        if (msg.previous || msg.previous_2 || msg.next || msg.next_2) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("willForceExtracts", function(msg, options) {
        if (!msg.previous && !msg.next || TS.search.view.resultHasExtracts(msg)) return options.inverse(this);
        var query = TS.search.query_string;
        var words = query.split(" ");
        var i;
        var word;
        var has_search_term = false;
        for (i = 0; i < words.length; i += 1) {
          word = _.trim(words[i]);
          if (word.length > 0 && !TS.search.keyword_modifier_pair_regex.test(word)) {
            has_search_term = true;
            break;
          }
        }
        if (!has_search_term) return options.fn(this);
        return options.inverse(this);
      });
      Handlebars.registerHelper("formatAttachmentExtracts", function(attachment, message) {
        var bg_color = attachment.color || "e3e4e6";
        return TS.templates.search_attachment_extracts({
          attachment: attachment,
          message: message,
          bg_color: bg_color
        });
      });
      Handlebars.registerHelper("getAttachmentAuthorMemberId", function(attachment) {
        var decorated = TS.utility.attachments.getDecoratedAttachment(attachment);
        if (!decorated) return "";
        return decorated._slack_author_id || "";
      });
      Handlebars.registerHelper("concatMsgExtracts", function(message) {
        if (!message.extracts || message.extracts.length === 0) return "";
        var ellipsis = TS.templates.builders.search_ellipsis;
        var extract_texts = message.extracts.map(function(extract) {
          if (extract.text) extract.text = extract.text.replace(/&&gt;t;>&gt;/g, "&gt;&gt;&gt;");
          var cleaned_extract = TS.format.replaceHighlightMarkers(extract.text);
          if (TSF.jumbomoji_rx.match(cleaned_extract)) {
            return TS.format.formatDefault(cleaned_extract, message);
          }
          var formatted_msg = TS.format.formatWithOptions(extract.text, message, {
            custom_linebreak: ellipsis
          });
          formatted_msg = TS.utility.msgs.handleSearchHighlights(formatted_msg);
          return formatted_msg;
        });
        var html = extract_texts.join(ellipsis);
        if (message.extracts[0].truncated_head) html = ellipsis + html;
        if (message.extracts[message.extracts.length - 1].truncated_tail) html += ellipsis;
        return html;
      });
      Handlebars.registerHelper("concatAttachmentExtracts", function(attachment, message) {
        var extract_texts = [];
        var extracts = attachment.extracts;
        var last_extract;
        var ellipsis = TS.templates.builders.search_ellipsis;
        if (!extracts || extracts.length === 0) return "";
        ["title", "text"].forEach(function(key) {
          if (extracts[key]) {
            extracts[key].forEach(function(extract) {
              var formatted_msg = TS.format.formatWithOptions(extract.text, message, {
                custom_linebreak: ellipsis
              });
              formatted_msg = TS.utility.msgs.handleSearchHighlights(formatted_msg);
              if (extract_texts.length === 0 && extract.truncated_head) formatted_msg = ellipsis + formatted_msg;
              last_extract = extract;
              extract_texts.push(formatted_msg);
            });
          }
        });
        var concatenated = extract_texts.join(ellipsis);
        if (concatenated && last_extract && last_extract.truncated_tail) concatenated += ellipsis;
        if (!concatenated && extracts.fields && !extracts.fallback) {
          extracts.fields.forEach(function(field) {
            var value = TS.utility.htmlEntities(field.value.text);
            value = TS.utility.msgs.handleSearchHighlights(value);
            if (field.value.truncated_head) value = ellipsis + value;
            if (field.value.truncated_tail) value += ellipsis;
            concatenated += "<strong>" + TS.utility.htmlEntities(field.title) + "</strong> &bull; " + value + "<br>";
          });
        }
        if (!concatenated && attachment.fallback) {
          var fallback_text = attachment.fallback;
          if (extracts.fallback && extracts.fallback.length > 0) fallback_text = extracts.fallback[0].text;
          var fallback = TS.format.formatWithOptions(fallback_text, message, {
            custom_linebreak: ellipsis
          });
          fallback = TS.utility.msgs.handleSearchHighlights(fallback);
          return fallback;
        }
        return concatenated;
      });
      Handlebars.registerHelper("newWindowName", TS.templates.builders.newWindowName);
      Handlebars.registerHelper("nl2br", function(text) {
        if (!text) return text;
        text = TS.utility.htmlEntities(text);
        return text.replace(/\n/g, "<br />").replace(/&amp;#95;/g, "_");
      });
      Handlebars.registerHelper("smartnl2br", function(text) {
        if (!text) return text;
        text = TS.utility.htmlEntities(text);
        text = text.replace(/\n\r\n\r/g, '<span class="para_break"><br /></span>');
        text = text.replace(/\n\r\n/g, '<span class="para_break"><br /></span>');
        text = text.replace(/\n\n/g, '<span class="para_break"><br /></span>');
        text = text.replace(/\n/g, "<br />");
        return new Handlebars.SafeString(text.replace(/&amp;#95;/g, "_"));
      });
      Handlebars.registerHelper("truncate", function(text, length) {
        var truncated_text = truncate(text, length);
        return truncated_text.replace(/&#64;/g, "@");
      });
      Handlebars.registerHelper("truncateToNearestWordBoundary", TS.utility.truncateToNearestWordBoundary);
      Handlebars.registerHelper("proxyImgUrls", function(html) {
        var $html = $("<div>" + html + "</div>");
        $html.find("img").each(function() {
          var original_src = $(this).attr("src");
          var original_w = $(this).attr("width");
          var original_h = $(this).attr("height");
          var proxied_url;
          if (original_w && original_h) {
            proxied_url = TS.utility.getImgProxyURL(original_src, original_w, original_h);
          } else {
            proxied_url = TS.utility.getImgProxyURL(original_src);
          }
          $(this).attr("src", proxied_url);
        });
        return $html.html();
      });
      Handlebars.registerHelper("stripImageTags", function(html) {
        var $html = $("<div>" + html + "</div>");
        var new_html = $html.find("img").remove().end().html();
        return new Handlebars.SafeString(new_html);
      });
      Handlebars.registerHelper("generalName", function() {
        var chan = TS.channels.getGeneralChannel();
        return chan ? chan.name : "";
      });
      Handlebars.registerHelper("makeChannelDomId", function(channel) {
        return TS.templates.makeChannelDomId(channel);
      });
      Handlebars.registerHelper("makeLinksFromChannelOrGroupIds", function(channel_or_group_ids) {
        return new Handlebars.SafeString(TS.templates.builders.makeLinksFromChannelOrGroupIds(channel_or_group_ids, {
          new_lines: true
        }));
      });
      Handlebars.registerHelper("makeChannelDragData", function(channel) {
        return TS.templates.makeChannelDragData(channel);
      });
      Handlebars.registerHelper("makeFileDragData", function(file) {
        return TS.templates.makeFileDragData(file);
      });
      Handlebars.registerHelper("firstListedChannel", function() {
        var channel = TS.channels.getChannelsForUser()[0];
        if (channel) return "#" + channel.name;
      });
      Handlebars.registerHelper("ChannelNameMaxLength", function() {
        return TS.model.channel_name_max_length;
      });
      Handlebars.registerHelper("ChannelPurposeMaxLength", function() {
        return TS.model.channel_purpose_max_length;
      });
      Handlebars.registerHelper("ChannelTopicMaxLength", function() {
        return TS.model.channel_topic_max_length;
      });
      Handlebars.registerHelper("makeUnreadMsgsDomId", function(channel) {
        return TS.templates.makeUnreadMsgsDomId(channel);
      });
      Handlebars.registerHelper("getCorGNameWithPrefixById", function(id, hide_unknown_groups) {
        var channel = TS.shared.getModelObById(id);
        if (!channel) {
          var msg = "getCorGNameWithPrefixById: Could not find model ob for ID " + id;
          if (id.charAt(0) === "G") {
            TS.console.maybeWarn(528, msg);
          } else {
            TS.warn(msg);
          }
          if (hide_unknown_groups) return;
          return id;
        }
        if (channel.is_group) {
          return TS.model.group_prefix + channel.name;
        } else if (channel.is_channel) {
          return TS.templates.builders.makeChannelPrefix(channel) + channel.name;
        }
        if (hide_unknown_groups) {
          return;
        }
        return id;
      });
      Handlebars.registerHelper("makeChannelPrefix", function(channel) {
        return new Handlebars.SafeString(TS.templates.builders.makeChannelPrefix(channel));
      });
      Handlebars.registerHelper("makeChannelLink", function(channel) {
        return new Handlebars.SafeString(TS.templates.builders.makeChannelLink(channel));
      });
      Handlebars.registerHelper("makeChannelPath", TS.templates.builders.makeChannelPath);
      Handlebars.registerHelper("makeChannelLinkEnterpriseSearchResult", function(result) {
        return new Handlebars.SafeString(TS.templates.builders.makeChannelLinkEnterpriseSearchResult(result));
      });
      Handlebars.registerHelper("makeChannelLinkById", function(id) {
        var channel = TS.channels.getChannelById(id);
        if (channel) return TS.templates.builders.makeChannelLink(channel);
      });
      Handlebars.registerHelper("makeChannelLinkAriaLabelSafe", TS.templates.builders.makeChannelLinkAriaLabelSafe);
      Handlebars.registerHelper("makeUnreadHighlightDomId", function(channel) {
        return TS.templates.makeUnreadHighlightDomId(channel);
      });
      Handlebars.registerHelper("makeChannelDomClass", function(channel) {
        var dom_class = "";
        if (TS.model.active_channel_id == channel.id && !TS.client.activeChannelIsHidden()) dom_class += "active ";
        if (channel.unread_cnt > 0) dom_class += "unread ";
        if (channel.unread_highlight_cnt > 0) dom_class += "mention ";
        if (channel.is_starred) dom_class += "is_starred ";
        if (TS.notifs.isCorGMuted(channel.id)) dom_class += "muted_channel ";
        if (channel._show_in_list_even_though_no_unreads || _.trim(channel.last_msg_input)) dom_class += "show_in_list_even_though_no_unreads ";
        return dom_class;
      });
      Handlebars.registerHelper("makeChannelOrGroupLinkById", function(id, omit_prefix) {
        var ob = TS.shared.getModelObById(id);
        var html = "";
        if (ob.is_mpim) {
          html = TS.templates.builders.makeMpimLink(ob, false);
        } else if (ob.is_group) {
          html = TS.templates.builders.makeGroupLink(ob, omit_prefix);
        } else if (ob.is_channel) {
          html = TS.templates.builders.makeChannelLink(ob, omit_prefix);
        }
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("makeChannelOrGroupSSBLinkById", function(id) {
        var ob = TS.shared.getModelObById(id);
        if (!ob) return;
        var text;
        var url = "slack://channel?team=" + TS.model.team.id + "&id=" + id;
        if (ob.is_group || ob.is_private) {
          text = TS.model.group_prefix + ob.name;
          return "<a href=" + url + ">" + text + "</a>";
        } else if (ob.is_channel) {
          var channel = TS.channels.getChannelById(id);
          text = "#" + channel.name;
          return "<a href=" + url + ">" + text + "</a>";
        }
      });
      Handlebars.registerHelper("isThereComplianceExportsTeam", function(channel, options) {
        if (!TS.boot_data.page_needs_enterprise) return options.inverse(this);
        var does_a_team = false;
        if (channel.is_shared) {
          var teams;
          if (channel.is_global_shared) {
            teams = TS.model.enterprise_teams;
          } else {
            teams = _.map(channel.shared_team_ids, function(id) {
              return TS.enterprise.getTeamById(id);
            });
          }
          does_a_team = teams.some(function(team) {
            return team.has_compliance_export;
          });
        }
        return does_a_team ? options.fn(this) : options.inverse(this);
      });
      Handlebars.registerHelper("makeTeamsThatHaveComplianceExportsBlurb", TS.templates.builders.makeTeamsThatHaveComplianceExportsBlurb);
      Handlebars.registerHelper("isEnterpriseTeam", function(options) {
        return TS.boot_data.page_needs_enterprise ? options.fn(this) : options.inverse(this);
      });
      Handlebars.registerHelper("isLocalTeam", function(team_id, options) {
        options = _optionsFnInverseBooleanHelper(options);
        if (!TS.boot_data.page_needs_enterprise) return options.inverse(this);
        if (team_id == TS.model.team.id) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("currentEnterpriseName", function() {
        if (!TS.boot_data.page_needs_enterprise) return "";
        return TS.model.enterprise.name || "";
      });
      Handlebars.registerHelper("isOnEnterpriseTeam", function(options) {
        if (!TS.boot_data.page_needs_enterprise) return options.inverse(this);
        return TS.model.user.enterprise_user.teams.indexOf(options.hash.team_id) > -1 ? options.fn(this) : options.inverse(this);
      });
      Handlebars.registerHelper("makeTeamlabel", function(team_id, teams_info) {
        var html = TS.templates.builders.makeTeamlabel(team_id, teams_info);
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("makeGroupDomId", function(group) {
        return TS.templates.makeGroupDomId(group);
      });
      Handlebars.registerHelper("groupPrefix", function() {
        return new Handlebars.SafeString(TS.model.group_prefix);
      });
      Handlebars.registerHelper("makeGroupLink", function() {
        var group_link = TS.templates.builders.makeGroupLink.apply(this, arguments);
        return new Handlebars.SafeString(group_link);
      });
      Handlebars.registerHelper("makeGroupLinkById", function(id) {
        var group = TS.groups.getGroupById(id);
        if (group) return TS.templates.builders.makeGroupLink(group);
      });
      Handlebars.registerHelper("makeGroupLinkAriaLabelSafe", TS.templates.builders.makeGroupLinkAriaLabelSafe);
      Handlebars.registerHelper("makeGroupDomClass", function(group) {
        var dom_class = "";
        if (TS.model.active_group_id == group.id && !TS.client.activeChannelIsHidden()) dom_class += "active ";
        if (group.unread_cnt > 0) dom_class += "unread ";
        if (group.unread_highlight_cnt > 0) dom_class += "mention ";
        if (group.is_starred) dom_class += "is_starred ";
        if (TS.notifs.isCorGMuted(group.id)) dom_class += "muted_channel ";
        if (group._show_in_list_even_though_no_unreads || _.trim(group.last_msg_input)) dom_class += "show_in_list_even_though_no_unreads ";
        return dom_class;
      });
      Handlebars.registerHelper("mpimMemberCount", function(mpim) {
        return TS.mpims.getMemberCount(mpim);
      });
      Handlebars.registerHelper("mpimDisplayName", function(mpim, for_header, show_last_initial, truncate_at, for_dm_badge) {
        for_header = for_header === true;
        for_dm_badge = for_dm_badge === true;
        var name = TS.mpims.getDisplayName(mpim, for_header, show_last_initial === true, truncate_at, for_dm_badge);
        if (for_header || for_dm_badge) {
          return new Handlebars.SafeString(name);
        }
        return name;
      });
      Handlebars.registerHelper("makeMpimDomClass", function(mpim) {
        var dom_class = "";
        if (!mpim) return dom_class;
        if (mpim.id === TS.model.active_mpim_id && !TS.client.activeChannelIsHidden()) dom_class += "active ";
        if (mpim.unread_cnt > 0 || mpim.unread_highlight_cnt > 0) dom_class += "unread mention ";
        if (TS.notifs.isCorGMuted(mpim.id)) dom_class += "muted_channel ";
        if (mpim.is_starred) dom_class += "is_starred ";
        if (_.trim(mpim.last_msg_input)) dom_class += "show_in_list_even_though_no_unreads ";
        return dom_class;
      });
      Handlebars.registerHelper("makeMpimDomId", function(mpim) {
        return TS.templates.makeMpimDomId(mpim);
      });
      Handlebars.registerHelper("makeMpimLink", function(mpim, with_title) {
        var mpim_link = TS.templates.builders.makeMpimLink(mpim, with_title);
        return new Handlebars.SafeString(mpim_link);
      });
      Handlebars.registerHelper("mpimArchivesPath", function(mpim) {
        return TS.mpims.getMpimArchivesPath(mpim);
      });
      Handlebars.registerHelper("isCorGMuted", function(id, options) {
        if (TS.notifs.isCorGMuted(id)) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("currentUserId", function() {
        return TS.model.user.id;
      });
      Handlebars.registerHelper("makeMemberDomId", function(member) {
        return TS.templates.makeMemberDomId(member);
      });
      Handlebars.registerHelper("makeChannelListDomId", function(channel) {
        return TS.templates.makeChannelListDomId(channel);
      });
      Handlebars.registerHelper("makeMemberPresenceDomClass", function(member) {
        return TS.templates.makeMemberPresenceDomClass(member.id);
      });
      Handlebars.registerHelper("makeMemberPresenceIcon", function(member) {
        if (!TS.client) {
          TS.warn("Presence icons should not be used outside of the client application, because they rely on a WS connection to keep presence up to date. Rendering anyway, but be careful out there!");
        }
        return new Handlebars.SafeString(TS.templates.makeMemberPresenceIcon(member));
      });
      Handlebars.registerHelper("makeMemberTypeBadge", function() {
        var html = TS.templates.builders.makeMemberTypeBadge.apply(this, arguments);
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("makeMemberTypeBadgeCompact", function() {
        var html = TS.templates.builders.makeMemberTypeBadgeCompact.apply(this, arguments);
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("makeMemberStatusDomClass", function(member) {
        return TS.templates.makeMemberStatusDomClass(member.id);
      });
      Handlebars.registerHelper("makeMemberDomClass", function(member) {
        var dom_class = "";
        if (!member) return dom_class;
        if (!member.is_self && member.presence === "away") dom_class += "away ";
        if (TS.model.active_im_id) {
          var active_im = TS.ims.getImById(TS.model.active_im_id);
          if (active_im.user == member.id && !TS.client.activeChannelIsHidden()) dom_class += "active ";
        }
        var im = TS.ims.getImByMemberId(member.id);
        if (im) {
          if (im.unread_cnt > 0 || im.unread_highlight_cnt > 0) dom_class += "unread mention ";
          if (im.is_starred) dom_class += "is_starred ";
          if (_.trim(im.last_msg_input)) dom_class += "show_in_list_even_though_no_unreads ";
        }
        return dom_class;
      });
      Handlebars.registerHelper("showDraftIcon", function(model_ob, options) {
        if (TS.templates.builders.showDraftIcon(model_ob)) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("makeMemberListDomClass", function(member) {
        var dom_class = "member ";
        if (member.presence === "away") dom_class += "away ";
        return dom_class;
      });
      Handlebars.registerHelper("makeMemberPreviewLink", function() {
        var html = TS.templates.builders.makeMemberPreviewLink.apply(this, arguments);
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("makeMemberPreviewLinkById", function(id, show_you_for_current_user) {
        if (show_you_for_current_user !== true) show_you_for_current_user = false;
        var member = TS.members.getMemberById(id) || TS.bots.getBotById(id);
        if (!member) return new Handlebars.SafeString(id);
        return new Handlebars.SafeString(TS.templates.builders.makeMemberPreviewLink(member, show_you_for_current_user));
      });
      Handlebars.registerHelper("makeMemberPreviewLinkImage", function() {
        return new Handlebars.SafeString(TS.templates.builders.makeMemberPreviewLinkImage.apply(this, arguments));
      });
      Handlebars.registerHelper("makeMemberPreviewCardLinkImage", function() {
        return new Handlebars.SafeString(TS.templates.builders.makeMemberPreviewCardLinkImage.apply(this, arguments));
      });
      Handlebars.registerHelper("makeProfileImage", TS.templates.builders.makeProfileImage);
      Handlebars.registerHelper("makePendingUserImage", function() {
        return new Handlebars.SafeString(TS.templates.builders.makePendingUserImage.apply(this, arguments));
      });
      Handlebars.registerHelper("emojiGraphicReplace", function(emoji, force_style) {
        var options = {};
        if (force_style && typeof force_style === "string") {
          options.force_style = force_style;
        } else {
          options.obey_emoji_mode_pref = true;
        }
        return new Handlebars.SafeString(TS.emoji.graphicReplace(emoji, options));
      });
      Handlebars.registerHelper("emojiGraphicReplaceByName", function(name) {
        return TS.emoji.graphicReplace(":" + name + ":");
      });
      Handlebars.registerHelper("emojiModePref", function() {
        return TS.model.prefs.emoji_mode;
      });
      Handlebars.registerHelper("makeUsernameImage", function(msg, size) {
        var img_src;
        var size_class;
        var emoji_str;
        var default_img_src;
        var bot_icons;
        var bot = TS.bots.getBotByMsg(msg);
        if (msg.icons) {
          bot_icons = msg.icons;
        } else if (bot && bot.icons) {
          bot_icons = bot.icons;
        }
        if (bot_icons) {
          if (bot_icons.image_36 && !TS.environment.is_retina) {
            img_src = bot_icons.image_36;
          } else if (bot_icons.image_72 && TS.environment.is_retina) {
            img_src = bot_icons.image_72;
          } else if (bot_icons.image_48) {
            img_src = bot_icons.image_48;
          } else if (bot_icons.emoji && bot_icons.emoji.substr(0, 1) === ":" && bot_icons.emoji.substr(bot_icons.emoji.length - 1, 1) === ":") {
            emoji_str = bot_icons.emoji;
          }
        }
        var bot_link = TS.templates.builders.makeBotLink(bot, msg.username);
        var member_for_default = msg && msg.is_ephemeral && msg.username === "slackbot" ? TS.members.getMemberById("USLACKBOT") : null;
        switch (size) {
          case 24:
            size_class = "thumb_24";
            default_img_src = cdn_url + "/66f9/img/avatars/ava_0002-24.png";
            if (member_for_default) {
              default_img_src = member_for_default.profile.image_24;
            }
            break;
          case 32:
            size_class = "thumb_32";
            default_img_src = cdn_url + "/0180/img/avatars/ava_0002-32.png";
            if (member_for_default) {
              default_img_src = member_for_default.profile.image_32;
            }
            break;
          case 36:
            size_class = "thumb_36";
            default_img_src = cdn_url + "/66f9/img/avatars/ava_0002-48.png";
            if (member_for_default) {
              default_img_src = member_for_default.profile.image_48;
            }
            break;
          case 72:
            size_class = "thumb_72";
            default_img_src = cdn_url + "/66f9/img/avatars/ava_0002-72.png";
            if (member_for_default) {
              default_img_src = member_for_default.profile.image_72;
            }
            break;
          case 192:
            size_class = "thumb_192";
            default_img_src = cdn_url + "/7fa9/img/avatars/ava_0002-192.png";
            if (member_for_default) {
              default_img_src = member_for_default.profile.image_192;
            }
            break;
          default:
            size_class = "thumb_48";
            default_img_src = cdn_url + "/7fa9/img/avatars/ava_0002-192.png";
            if (member_for_default) {
              default_img_src = member_for_default.profile.image_48;
            }
            break;
        }
        var html;
        if (img_src) {
          html = bot_link.start_a + '<img style="border: 0" src="' + img_src + '" class="member_image ' + size_class + '" />' + bot_link.end_a;
        } else if (emoji_str) {
          html = bot_link.start_a + '<div style="border: 0" class="member_image ' + size_class + '">' + TS.emoji.graphicReplace(TS.utility.htmlEntities(emoji_str)) + "</div>" + bot_link.end_a;
        } else if (member_for_default) {
          html = bot_link.start_a + '<img src="' + default_img_src + '" class="member_image ' + size_class + '" />' + bot_link.end_a;
        } else {
          html = bot_link.start_a + '<img src="' + default_img_src + '" class="member_image bot_icon_default ' + size_class + '" />' + bot_link.end_a;
        }
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("getMemberPreviewLinkImageArgs", function(id_or_member_ob, size, lazy, omit_link, omit_badge, omit_restricted_overlay, slackbot_feels) {
        var member;
        if (typeof id_or_member_ob === "object") {
          member = id_or_member_ob;
        } else {
          member = TS.members.getMemberById(id_or_member_ob);
        }
        if (!member || !member.profile) return "";
        lazy = lazy === true;
        omit_link = omit_link === true;
        omit_badge = omit_badge === true;
        omit_restricted_overlay = omit_restricted_overlay === true;
        slackbot_feels = typeof slackbot_feels === "string" ? slackbot_feels : false;
        if (id_or_member_ob === "USLACKBOT" && slackbot_feels) {
          member = TS.utility.slackbot.getWithFeels(slackbot_feels);
        }
        var img_src;
        var bg_img_style;
        var bg_img_urls;
        bg_img_style = "background-image: ";
        bg_img_urls = [];
        switch (size) {
          case 20:
            if (TS.environment.is_retina) {
              img_src = member.profile.image_48;
            } else {
              img_src = member.profile.image_24;
            }
            break;
          case 24:
            if (TS.environment.is_retina) {
              img_src = member.profile.image_48;
            } else {
              img_src = member.profile.image_24;
            }
            break;
          case 32:
            if (TS.environment.is_retina) {
              img_src = member.profile.image_72;
            } else {
              img_src = member.profile.image_32;
            }
            break;
          case 36:
            if (TS.environment.is_retina) {
              img_src = member.profile.image_72;
            } else {
              img_src = member.profile.image_48;
            }
            break;
          case 48:
            if (TS.environment.is_retina) {
              img_src = member.profile.image_72;
            } else {
              img_src = member.profile.image_48;
            }
            break;
          case 56:
            if (TS.environment.is_retina) {
              img_src = member.profile.image_192;
            } else {
              img_src = member.profile.image_72;
            }
            break;
          case 72:
            if (TS.environment.is_retina) {
              img_src = member.profile.image_192;
            } else {
              img_src = member.profile.image_72;
            }
            break;
          case 192:
            if (TS.environment.is_retina) {
              img_src = member.profile.image_512 || member.profile.image_192;
            } else {
              img_src = member.profile.image_192;
            }
            break;
          case 512:
            if (TS.environment.is_retina) {
              img_src = member.profile.image_1024 || member.profile.image_512 || member.profile.image_192;
            } else {
              img_src = member.profile.image_512 || member.profile.image_192;
            }
            break;
          default:
            if (TS.environment.is_retina) {
              img_src = member.profile.image_72;
            } else {
              img_src = member.profile.image_48;
            }
            break;
        }
        bg_img_urls.push("url('" + img_src + "')");
        if (size === 512) {
          var pre_bg_img_src = TS.environment.is_retina ? member.profile.image_72 : member.profile.image_48;
          bg_img_urls.push("url('" + pre_bg_img_src + "')");
        }
        if (lazy) {
          bg_img_style = bg_img_urls.length ? bg_img_urls.join(", ") : "";
        } else {
          bg_img_style = bg_img_urls.length ? bg_img_style + bg_img_urls.join(", ") : "";
        }
        var template_data = {
          omit_link: omit_link,
          omit_badge: omit_badge,
          lazy: lazy,
          member: member,
          size: size,
          include_restricted_overlay: !omit_restricted_overlay || true,
          bg_img_style: bg_img_style
        };
        return template_data;
      });
      Handlebars.registerHelper("getGuestBadgeSize", function(size) {
        var badge_size;
        switch (size) {
          case 24:
            badge_size = 10;
            break;
          case 32:
          case 36:
          case 48:
            badge_size = 16;
            break;
          case 72:
            badge_size = 24;
            break;
          case 192:
            badge_size = 48;
            break;
          case 512:
            badge_size = 96;
            break;
          default:
            badge_size = 16;
        }
        return badge_size;
      });
      Handlebars.registerHelper("getTeamBadgeSize", function(size) {
        var badge_size;
        switch (size) {
          case 32:
          case 36:
          case 48:
            badge_size = 16;
            break;
          case 72:
            badge_size = 22;
            break;
          case 192:
          case 512:
            break;
          default:
            badge_size = 16;
        }
        return badge_size;
      });
      Handlebars.registerHelper("getMemberNameById", function(id) {
        var member = TS.members.getMemberById(id);
        return member ? member.name : id;
      });
      Handlebars.registerHelper("getMemberDisplayNameById", function(id) {
        return TS.members.getMemberDisplayNameById(id);
      });
      Handlebars.registerHelper("getMemberDisplayName", function(member, should_escape, include_at_sign) {
        return TS.members.getMemberDisplayName(member, should_escape === true, include_at_sign === true);
      });
      Handlebars.registerHelper("shouldShowMemberRestrictionBanner", function(member, options) {
        options = _optionsFnInverseBooleanHelper(options);
        if (_.isString(member)) member = TS.members.getMemberById(member);
        if (!member) return options.inverse(this);
        var member_restriction_flag_enabled = TS.boot_data.feature_shared_channels_client || TS.experiment.getGroup("guest_profiles_and_expiration") === "treatment";
        var member_restriction_supported_member = member.is_external || member.is_restricted;
        if (member_restriction_flag_enabled && member_restriction_supported_member) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("shouldUseUnifiedMemberDisplay", function(options) {
        options = _optionsFnInverseBooleanHelper(options);
        if (TS.boot_data.feature_shared_chan_unify_user) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("unlessUseUnifiedMemberDisplay", function(options) {
        return Handlebars.helpers.shouldUseUnifiedMemberDisplay.call(this, {
          fn: options.inverse,
          inverse: options.fn,
          hash: options.hash
        });
      });
      Handlebars.registerHelper("getTeamNameByMember", function(member) {
        return TS.teams.getTeamNameByMember(member);
      });
      Handlebars.registerHelper("getTeamById", function(id) {
        return TS.teams.getTeamById(id);
      });
      Handlebars.registerHelper("getTeamNameById", function(id) {
        return TS.teams.getTeamNameById(id);
      });
      Handlebars.registerHelper("getSharedTeamsList", function(model_ob) {
        var shared_teams = model_ob.shared_team_ids.map(function(id) {
          var name = TS.teams.getTeamNameById(id);
          return name;
        });
        shared_teams.push(TS.model.team.name);
        return TS.i18n.listify(shared_teams).join("");
      });
      Handlebars.registerHelper("getMemberPreviewLinkTarget", function(member) {
        if (TS.utility.shouldLinksHaveTargets()) return new Handlebars.SafeString('target="/team/' + member.name + '"');
        return "";
      });
      if (TS.boot_data.feature_name_tagging_client || TS.boot_data.feature_shared_chan_unify_user) {
        Handlebars.registerHelper("getMemberPreferredName", function(member_or_id) {
          return TS.members.getMemberPreferredName(member_or_id);
        });
        Handlebars.registerHelper("getMemberFullName", function(member_or_id) {
          return TS.members.getMemberFullName(member_or_id);
        });
        Handlebars.registerHelper("getMemberSecondaryName", function(member) {
          return TS.members.getMemberSecondaryName(member);
        });
        Handlebars.registerHelper("memberHasSecondaryName", function(member, options) {
          var has_secondary_name = false;
          if (member) {
            has_secondary_name = !!TS.members.getMemberSecondaryName(member);
          }
          if (has_secondary_name) {
            return options.fn(this);
          }
          return options.inverse(this);
        });
        Handlebars.registerHelper("unlessMemberHasSecondaryName", function(member, options) {
          return Handlebars.helpers.memberHasSecondaryName.call(this, member, {
            fn: options.inverse,
            inverse: options.fn,
            hash: options.hash
          });
        });
      }
      Handlebars.registerHelper("getMemberRealName", function(member) {
        return TS.members.getMemberRealName(member);
      });
      Handlebars.registerHelper("getMemberUsernameAndRealNameInCorrectOrder", function(member) {
        var class_names_in_order = ["member_username", "member_real_name"];
        var name_data = TS.members.getMemberUsernameAndRealNameInCorrectOrder(member);
        if (!name_data.is_username_first) class_names_in_order.reverse();
        var names_in_correct_order_html = name_data.names_in_order.map(function(name, index) {
          var class_name = _.get(class_names_in_order, index, "");
          return '<span class="' + class_name + '">' + TS.utility.htmlEntities(name) + "</span>";
        }).join("");
        return new Handlebars.SafeString(names_in_correct_order_html);
      });
      Handlebars.registerHelper("getMemberPreferredNameandRealNameInCorrectOrder", function(member) {
        var primary_name = TS.utility.htmlEntities(TS.members.getMemberDisplayName(member));
        var secondary_name;
        if (member.is_self) {
          secondary_name = TS.i18n.t("(you)", "templates_helpers")();
        } else {
          secondary_name = TS.utility.htmlEntities(TS.members.getMemberSecondaryName(member));
        }
        var primary_html = '<span class="member_real_name">' + primary_name + "</span>";
        var secondary_html = '<span class="member_preferred_name">' + secondary_name + "</span>";
        return new Handlebars.SafeString(primary_html + secondary_html);
      });
      Handlebars.registerHelper("getMemberCurrentStatusEmoji", function(member, options) {
        options = options || {};
        options = options.hash || options;
        return Handlebars.helpers.formatCurrentStatusWithoutAnimations(TS.members.getMemberCurrentStatus(member).emoji, _.assign({
          transform_missing_emoji: true,
          show_icon_for_emoji_in_as_text_mode: true
        }, options));
      });
      Handlebars.registerHelper("getMemberCurrentStatusText", function(member) {
        return Handlebars.helpers.formatCurrentStatusWithoutAnimations(TS.members.getMemberCurrentStatus(member).text, {
          prevent_copy_paste: false
        });
      });
      Handlebars.registerHelper("getMemberCurrentStatusForDisplay", function(member) {
        return new Handlebars.SafeString(TS.members.getMemberCurrentStatusForDisplay(member));
      });
      Handlebars.registerHelper("getMemberCurrentStatusForDisplayWithoutAnimations", function(member) {
        return new Handlebars.SafeString(TS.members.getMemberCurrentStatusForDisplay(member, {
          stop_animations: true
        }));
      });
      Handlebars.registerHelper("seesCurrentStatusInProfileView", function(member, options) {
        options = _optionsFnInverseBooleanHelper(options);
        if (member.profile.status_text || member.profile.status_emoji || TS.boot_data.app === "client" && member.is_self) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("getTeamCustomStatusPresets", function() {
        return TS.team.getTeamCustomStatusPresets();
      });
      Handlebars.registerHelper("getDisplayNameOfUserForIm", function(im) {
        if (!im) return "MISSING_IM";
        return TS.ims.getDisplayNameOfUserForIm(im);
      });
      Handlebars.registerHelper("getIMIdByMemberId", function(member_id) {
        var im = TS.ims.getImByMemberId(member_id);
        return im ? im.id : "";
      });
      Handlebars.registerHelper("memberHasIm", function(options) {
        var member = options.hash.member;
        var has_im = false;
        if (member) {
          if (TS.ims.getImByMemberId(member.id)) has_im = true;
        }
        if (has_im) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("memberHasImUnreadCount", function(options) {
        var member = options.hash.member;
        var has_unreads = false;
        if (member) {
          var im = TS.ims.getImByMemberId(member.id);
          if (im && im.unread_cnt) has_unreads = true;
        }
        if (has_unreads) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("getUnreadCountForIMByMemberId", function(id) {
        var im = TS.ims.getImByMemberId(id);
        if (im) {
          return im.unread_cnt;
        }
        return "";
      });
      Handlebars.registerHelper("makeMemberLinksWithDisplayNames", function(member_ids_string) {
        if (!member_ids_string) return "";
        return member_ids_string.split(/\s*,\s*/).map(function(id) {
          return TS.templates.builders.makeMemberPreviewLink(TS.members.getMemberById(id));
        }).join(", ");
      });

      function makeIMLink(im) {
        var member = TS.members.getMemberById(im.user);
        var template_args = {
          im_exists: !TS.ims.isImWithDeletedMember(im),
          im_member_id: member.id,
          im_name: im.name,
          im_id: im.id,
          member_color: "color_" + (member ? member.id + " color_" + member.color : "unknown")
        };
        if (TS.utility.shouldLinksHaveTargets()) {
          var target = TS.ims.isImWithDeletedMember(im) ? TS.templates.builders.newWindowName() : "/messages/@" + im.name;
          template_args.target = target;
        }
        return TS.templates.search_im_link(template_args);
      }
      Handlebars.registerHelper("makeIMLink", function(im) {
        return new Handlebars.SafeString(makeIMLink(im));
      });
      Handlebars.registerHelper("makeIMLinkById", function(id) {
        var im = TS.ims.getImById(id);
        if (im) return new Handlebars.SafeString(makeIMLink(im));
      });

      function getBotNameAndIcon(msg) {
        var username = TS.utility.htmlEntities(msg.username);
        var bot_icons;
        var bot = TS.bots.getBotByMsg(msg);
        if (msg.icons) {
          bot_icons = msg.icons;
        } else if (bot && bot.icons) {
          bot_icons = bot.icons;
        } else {}
        if (!username && bot && bot.name) {
          username = TS.utility.htmlEntities(bot.name);
        }
        var bot_link = TS.templates.builders.makeBotLink(bot, msg.username);
        if (!bot_icons) {
          return bot_link.start_a + username + bot_link.end_a;
        }
        var html;
        if (bot_icons.emoji && bot_icons.emoji.substr(0, 1) === ":" && bot_icons.emoji.substr(bot_icons.emoji.length - 1, 1) === ":") {
          html = bot_link.start_a + TS.emoji.graphicReplace(TS.utility.htmlEntities(bot_icons.emoji)) + bot_link.end_a + " " + bot_link.start_a + username + bot_link.end_a;
        } else if (bot_icons.image_36 && !TS.environment.is_retina) {
          html = bot_link.start_a + '<img src="' + bot_icons.image_36 + '" class="inline_bot_icon">' + bot_link.end_a + " " + bot_link.start_a + username + bot_link.end_a;
        } else if (bot_icons.image_72 && TS.environment.is_retina) {
          html = bot_link.start_a + '<img src="' + bot_icons.image_72 + '" class="inline_bot_icon">' + bot_link.end_a + " " + bot_link.start_a + username + bot_link.end_a;
        } else if (bot_icons.image_48) {
          html = bot_link.start_a + '<img src="' + bot_icons.image_48 + '" class="inline_bot_icon">' + bot_link.end_a + " " + bot_link.start_a + username + bot_link.end_a;
        } else {
          html = bot_link.start_a + username + bot_link.end_a;
        }
        return html;
      }
      Handlebars.registerHelper("getBotNameAndIcon", getBotNameAndIcon);
      Handlebars.registerHelper("getBotName", TS.templates.builders.getBotName);
      Handlebars.registerHelper("getBotNameWithLink", TS.templates.builders.getBotNameWithLink);

      function getBotColorClassByUserName(username) {
        if (!username) return "color_unknown";
        return "color_bot_" + TS.utility.makeSafeForDomClass(username);
      }
      Handlebars.registerHelper("getBotColorClassByUserName", getBotColorClassByUserName);

      function getMemberColorClassById(id) {
        var member = TS.members.getMemberById(id);
        if (!member) return "color_unknown";
        return "color_" + member.id + " color_" + member.color;
      }
      Handlebars.registerHelper("getMemberColorClassById", getMemberColorClassById);
      Handlebars.registerHelper("getMemberColorClassByImId", function(im_id) {
        var im = TS.ims.getImById(im_id);
        if (!im) return "color_unknown";
        return getMemberColorClassById(im.user);
      });
      Handlebars.registerHelper("makeMemberLinkAriaLabelSafe", TS.templates.builders.makeMemberLinkAriaLabelSafe);
      Handlebars.registerHelper("msgIsFromSelf", function(options) {
        var msg = options.hash.msg;
        var id = msg.user;
        if (!id && msg.subtype === "file_comment" && msg.comment) id = msg.comment.user;
        var member = TS.members.getMemberById(id);
        if (!member) return options.inverse(this);
        if (member.is_self) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("memberIsSelf", function(options) {
        var member = TS.members.getMemberById(options.hash.id);
        if (!member) return options.inverse(this);
        if (member.is_self) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("memberIsAdmin", function(options) {
        var member = TS.members.getMemberById(options.hash.id);
        if (!member) return options.inverse(this);
        if (member.is_admin) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("currentUserIsAdmin", function(options) {
        if (TS.model.user.is_admin) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("currentUserIsOwner", function(options) {
        if (TS.model.user.is_owner) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("currentUserIsRA", function(options) {
        if (TS.model.user.is_restricted) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("currentUserIsURA", function(options) {
        if (TS.model.user.is_ultra_restricted) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("tinyspeck", function(options) {
        if (TS.boot_data.feature_tinyspeck) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("makeUnshareLinkById", function(id) {
        var file = TS.files.getFileById(TS.web.file.file_id);
        var ob = TS.shared.getModelObById(id);
        if (ob) return TS.templates.builders.makeUnshareLink(ob, file);
      });
      Handlebars.registerHelper("makeUnshareLink", function(ob) {
        var file = TS.files.getFileById(TS.web.file.file_id);
        return TS.templates.builders.makeUnshareLink(ob, file);
      });
      Handlebars.registerHelper("makeFileDomId", function(file) {
        return TS.templates.makeFileDomId(file);
      });
      Handlebars.registerHelper("makeFileCommentsDomId", function(file) {
        return TS.templates.makeFileCommentsDomId(file);
      });
      Handlebars.registerHelper("makeFileContentsDomId", function(file) {
        return TS.templates.makeFileContentsDomId(file);
      });
      Handlebars.registerHelper("makeFileCommentHelpHTML", function(file) {
        return new Handlebars.SafeString(TS.templates.builders.makeFileCommentHelpHTML(file));
      });
      Handlebars.registerHelper("makeFileHeader", function(file, member) {
        var args = TS.files.getFileActions(file);
        args.file = file;
        args.is_post = file.mode === "space" || file.mode === "post";
        args.download = file.mode === "hosted";
        args.member = member;
        return TS.templates.file_header(args);
      });
      Handlebars.registerHelper("makeFilePreviewHeader", function(file, member) {
        var args = TS.files.getFileActions(file);
        args.file = file;
        args.member = member;
        args.download = file.mode === "hosted";
        args.edit_link = file.mode === "post" ? file.edit_link : file.permalink;
        args.is_post = file.mode === "space" || file.mode === "post";
        args.is_snippet = file.mode === "snippet";
        args.preview = true;
        return new Handlebars.SafeString(TS.templates.file_header(args));
      });
      Handlebars.registerHelper("makeFileSize", function(file) {
        return TS.utility.convertFilesize(file.size) + " " + file.pretty_type;
      });
      Handlebars.registerHelper("formatSpaceHtml", function(html) {
        function replace_emoji(root_node) {
          if (root_node.childNodes) {
            for (var i = 0; i < root_node.childNodes.length; i += 1) {
              replace_emoji(root_node.childNodes[i]);
            }
          }
          if (root_node.nodeType == Node.TEXT_NODE) {
            var safe_text_content = TS.utility.htmlEntities(root_node.textContent);
            var emojified_html = TS.emoji.graphicReplace(TS.emoji.replaceEmoticons(safe_text_content), {
              include_title: true,
              include_text: false
            });
            if (emojified_html !== safe_text_content) {
              var emojified_node = $("<span>").html(emojified_html)[0];
              [].slice.apply(emojified_node.childNodes).forEach(function(new_node) {
                root_node.parentNode.insertBefore(new_node, root_node);
              });
              root_node.parentNode.removeChild(root_node);
            }
          }
        }
        var $container = $("<div>").html(html);
        replace_emoji($container[0]);
        if (TS.client && TS.client.ui) {
          TS.client.ui.unfurlPlaceholders($container);
        }
        return new Handlebars.SafeString($container.html());
      });
      Handlebars.registerHelper("fileIsImage", function(options) {
        var file = TS.files.getFileById(options.hash.id);
        if (!file) return options.inverse(this);
        if (file.mimetype && file.mimetype.indexOf("image/") === 0) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("mimeTypeIsImage", function(options) {
        if (options.hash.type && options.hash.type.indexOf("image/") === 0) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("fileDefaultIsNewWindow", function(options) {
        options = _optionsFnInverseBooleanHelper(options);
        var file = TS.files.getFileById(options.hash.id);
        if (!file) return options.inverse(this);
        var new_window_for_mimetype = file.mimetype && file.mimetype.indexOf("image/") === 0 && file.mimetype.indexOf("svg") === -1;
        var new_window_for_filetype = file.filetype === "pdf";
        if (new_window_for_mimetype || new_window_for_filetype) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("fileIconTypeDownload", function() {
        var args = Array.prototype.slice.call(arguments);
        var options = _optionsFnInverseBooleanHelper(args.pop());
        var file = args[0];
        if (typeof file === "string") file = TS.files.getFileById(file);
        if (!file) return options.inverse(this);
        var new_window_for_mode = file.mode === "external";
        var new_window_for_mimetype = file.mimetype && file.mimetype.indexOf("image/") === 0 && file.mimetype.indexOf("svg") === -1;
        var new_window_for_filetype = file.filetype === "pdf";
        if (new_window_for_mode || new_window_for_mimetype || new_window_for_filetype) {
          return options.inverse(this);
        }
        return options.fn(this);
      });
      Handlebars.registerHelper("nonImageCanUseFSFV", function(file, options) {
        if (!file) return options.inverse(this);
        if (TS.model.pdf_viewer_enabled && file.mode === "hosted" && TS.files.fileIsPDF(file) && file.size <= 5e7) return options.fn(this);
        return options.inverse(this);
      });
      Handlebars.registerHelper("makeFilePrivacyLabel", function(file) {
        var label = "";
        if (file.is_public) {
          label = TS.i18n.t("Shared", "templates_helpers")();
        } else if (file.groups.length > 0 || file.ims.length > 0) {
          label = TS.i18n.t("Private", "templates_helpers")();
        } else {
          label = TS.i18n.t("Draft", "templates_helpers")();
        }
        return label;
      });
      Handlebars.registerHelper("makeExternalFiletypeHTML", function(file) {
        return new Handlebars.SafeString(TS.templates.builders.makeExternalFiletypeHTML(file));
      });
      Handlebars.registerHelper("makeFileShareLabel", function(file) {
        return new Handlebars.SafeString(TS.templates.builders.makeFileShareLabel(file));
      });
      Handlebars.registerHelper("makeFileGroupChannelList", function(file) {
        return TS.templates.builders.makeFileGroupChannelList(file);
      });
      Handlebars.registerHelper("nl2brAndHighlightSearchMatches", function(text) {
        if (!text) return;
        text = TS.utility.htmlEntities(text);
        text = text.replace(/\n/g, "<br />");
        return new Handlebars.SafeString(TS.utility.msgs.handleSearchHighlights(text));
      });
      Handlebars.registerHelper("maybeGetIconForTeamProfileField", function(label) {
        var icons = ["slack", "apple", "android", "twitter", "github", "google", "windows", "youtube", "skype", "facebook", "asana", "linkedin", "tumblr", "instagram", "soundcloud", "flickr", "pinterest", "tripit", "hangouts", "viber", "line"];
        label = label.toLowerCase();
        if (icons.indexOf(label) > -1) return '<i class="ts_icon ts_icon_' + label + '"></i>';
      });
      Handlebars.registerHelper("getVisibleTeamProfileFieldsForMember", function(member, options) {
        var fields = TS.team.getVisibleTeamProfileFieldsForMember(member);
        return new Handlebars.SafeString(TS.templates.team_profile_fields({
          fields: fields,
          lazy_load_profile_fields: options && options.hash.lazy_load_profile_fields
        }));
      });
      Handlebars.registerHelper("isSkypeTeamProfileField", function(field, options) {
        if (field.type === "text" && field.label.toLocaleLowerCase() === "skype") {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("getSafeSkypeURLComponent", function(name) {
        var match = name.match(/^[a-zA-Z][a-zA-Z0-9.,\-_]{5,31}/);
        return match ? match[0] : "";
      });
      Handlebars.registerHelper("highlightSearchMatches", function(text) {
        if (!text) return;
        text = TS.utility.htmlEntities(text);
        return TS.utility.msgs.handleSearchHighlights(text);
      });
      Handlebars.registerHelper("highlightSearchMatchesInSpacesHtml", function(html) {
        if (!html) return;
        var formatted_html = Handlebars.helpers.formatSpaceHtml(html);
        return new Handlebars.SafeString(TS.utility.msgs.handleSearchHighlights(formatted_html));
      });
      Handlebars.registerHelper("highlightSearchMatchesInFileTitle", function(text) {
        if (!text) return;
        text = TS.utility.unHtmlEntities(text);
        text = TS.utility.htmlEntities(text);
        text = TS.emoji.graphicReplace(text);
        return new Handlebars.SafeString(TS.utility.msgs.handleSearchHighlights(text));
      });
      Handlebars.registerHelper("searchFilter", function() {
        if (!TS.search.filter) return;
        return TS.search.filter;
      });
      Handlebars.registerHelper("searchSort", function() {
        if (!TS.search.sort) return;
        return TS.search.sort;
      });
      Handlebars.registerHelper("makeUnreadMessagesDomId", function(item) {
        return TS.templates.makeUnreadMessagesDomId(item);
      });
      Handlebars.registerHelper("makeUnreadGroupMessagesDomId", function(item) {
        return TS.templates.makeUnreadGroupMessagesDomId(item);
      });
      Handlebars.registerHelper("makeUnreadDmsDomId", function(item) {
        return TS.templates.makeUnreadDmsDomId(item);
      });
      Handlebars.registerHelper("makeSentMessagesDomId", function(item) {
        return TS.templates.makeSentMessagesDomId(item);
      });
      Handlebars.registerHelper("makeSentGroupMessagesDomId", function(item) {
        return TS.templates.makeSentGroupMessagesDomId(item);
      });
      Handlebars.registerHelper("makeSentDmsDomId", function(item) {
        return TS.templates.makeSentDmsDomId(item);
      });
      Handlebars.registerHelper("makeIssueListDomId", function(date_str) {
        return TS.templates.makeIssueListDomId(date_str);
      });
      Handlebars.registerHelper("math", function(lvalue, operator, rvalue) {
        if (arguments.length < 4) {
          rvalue = operator;
          operator = "+";
        }
        lvalue = parseFloat(lvalue);
        rvalue = parseFloat(rvalue);
        return {
          "+": lvalue + rvalue,
          "-": lvalue - rvalue,
          "*": lvalue * rvalue,
          "/": lvalue / rvalue,
          "%": lvalue % rvalue
        }[operator];
      });
      Handlebars.registerHelper("loadingHTML", function() {
        return new Handlebars.SafeString(TS.templates.builders.loadingHTML());
      });
      Handlebars.registerHelper("versioned_loading_animation", function() {
        return cdn_url + "/9c217/img/loading.gif";
      });
      Handlebars.registerHelper("versioned_loading_hash_animation", function() {
        return cdn_url + "/9c217/img/loading_hash_animation_@2x.gif";
      });
      Handlebars.registerHelper("versioned_mac_dock_badge", function() {
        return cdn_url + "/9135/img/prefs_mac_dock_badge@2x.png";
      });
      Handlebars.registerHelper("versioned_prefs_messages_clean", function() {
        return cdn_url + "/e5d8/img/prefs_messages_clean@2x.png";
      });
      Handlebars.registerHelper("versioned_prefs_messages_compact", function() {
        return cdn_url + "/e5d8/img/prefs_messages_compact@2x.png";
      });
      Handlebars.registerHelper("versioned_services_box_32", function() {
        return cdn_url + "/2fac/plugins/box/assets/service_32.png";
      });
      Handlebars.registerHelper("versioned_services_gdrive_16", function() {
        return cdn_url + "/66f9/img/services/gdrive_16.png";
      });
      Handlebars.registerHelper("versioned_services_onedrive_32", function() {
        return cdn_url + "/a82d/plugins/onedrive/assets/service_32.png";
      });
      Handlebars.registerHelper("versioned_slackbot_48", function() {
        return cdn_url + "/2fac/plugins/slackbot/assets/service_48.png";
      });
      Handlebars.registerHelper("versioned_slackbot_72", function() {
        return cdn_url + "/0180/img/slackbot_72.png";
      });
      Handlebars.registerHelper("versioned_theme_thumb_brinjal", function() {
        return cdn_url + "/52841/img/themes/brinjal@2x.png";
      });
      Handlebars.registerHelper("versioned_theme_thumb_chocolate", function() {
        return cdn_url + "/52841/img/themes/chocolate@2x.png";
      });
      Handlebars.registerHelper("versioned_theme_thumb_default", function() {
        return cdn_url + "/52841/img/themes/aubergine@2x.png";
      });
      Handlebars.registerHelper("versioned_theme_thumb_hoth", function() {
        return cdn_url + "/52841/img/themes/hoth@2x.png";
      });
      Handlebars.registerHelper("versioned_theme_thumb_monument", function() {
        return cdn_url + "/52841/img/themes/monument@2x.png";
      });
      Handlebars.registerHelper("versioned_theme_thumb_ocean", function() {
        return cdn_url + "/52841/img/themes/ochin@2x.png";
      });
      Handlebars.registerHelper("versioned_theme_thumb_solanum", function() {
        return cdn_url + "/52841/img/themes/solanum@2x.png";
      });
      Handlebars.registerHelper("versioned_theme_thumb_workhard", function() {
        return cdn_url + "/52841/img/themes/workhard@2x.png";
      });
      Handlebars.registerHelper("versioned_twitter_64", function() {
        return cdn_url + "/66f9/img/services/twitter_64.png";
      });
      Handlebars.registerHelper("versioned_upload_file_icon", function(res) {
        if (res === "1x") {
          return cdn_url + "/a079/img/upload_file_icon.png";
        } else if (res === "2x") {
          return cdn_url + "/a079/img/upload_file_icon@2x.png";
        }
      });
      Handlebars.registerHelper("versioned_default_application_icon", function() {
        return cdn_url + "/bfaba/img/apps/default_new_app_icon.png";
      });
      Handlebars.registerHelper("versioned_join_shared_channel", function(res) {
        if (res === "1x") {
          return cdn_url + "/742c/img/join-channel/join_shared_channel.png";
        } else if (res === "2x") {
          return cdn_url + "/742c/img/join-channel/join_shared_channel@2x.png";
        }
      });
      Handlebars.registerHelper("versioned_join_team_channel", function(res) {
        if (res === "1x") {
          return cdn_url + "/742c/img/join-channel/join_team_channel.png";
        } else if (res === "2x") {
          return cdn_url + "/742c/img/join-channel/join_team_channel@2x.png";
        }
      });
      Handlebars.registerHelper("versioned_signin_no_teams", function(res) {
        if (res === "1x") {
          return cdn_url + "/7c9e4/img/enterprise/signin-no-teams.png";
        } else if (res === "2x") {
          return cdn_url + "/7c9e4/img/enterprise/signin-no-teams@2x.png";
        }
      });
      Handlebars.registerHelper("versioned_basic_analytics_coming_soon", function(res) {
        if (res === "1x") {
          return cdn_url + "/7573/img/enterprise/ent_basic_analytics_coming_soon.png";
        } else if (res === "2x") {
          return cdn_url + "/7573/img/enterprise/ent_basic_analytics_coming_soon@2x.png";
        }
      });
      Handlebars.registerHelper("versioned_slack_logo_240", function() {
        return cdn_url + "/66f9/img/slack_logo_240.png";
      });
      Handlebars.registerHelper("versioned_file_drop_blue", function() {
        return cdn_url + "/c3881/img/file-drop-blue@2x.png";
      });
      Handlebars.registerHelper("versioned_focus_rocks", function() {
        return cdn_url + "/883cf/img/focus-rocks-0.png";
      });
      Handlebars.registerHelper("pinToLabel", function(model_ob) {
        var text = "";
        if (model_ob.is_channel) text += "#";
        if (model_ob.is_im || model_ob.is_mpim) {
          text += TS.i18n.t("this conversation", "pins")();
        } else {
          text += TS.utility.htmlEntities(model_ob.name);
        }
        return new Handlebars.SafeString(text);
      });
      Handlebars.registerHelper("preventWidow", function(str) {
        var words = str.split(" ");
        if (words.length > 1) {
          words[words.length - 2] += "&nbsp;" + words[words.length - 1];
          words.pop();
          str = words.join(" ");
        }
        return new Handlebars.SafeString(str);
      });
      Handlebars.registerHelper("numberWithCommas", function(num) {
        return TS.utility.numberWithCommas(num);
      });
      Handlebars.registerHelper("buildReplyBarHTML", function(msg, model_ob) {
        return new Handlebars.SafeString(TS.templates.builders.buildReplyBarHTML(msg, model_ob));
      });
      Handlebars.registerHelper("makeSHRoomParticipantList", TS.templates.builders.makeSHRoomParticipantList);
      Handlebars.registerHelper("makeSHRoomSharedList", TS.templates.builders.makeSHRoomSharedList);
      Handlebars.registerHelper("atLabel", function(type) {
        return TS.templates.builders.atLabel(type);
      });
      Handlebars.registerHelper("renderAttachmentActions", function(attachment, disable_buttons) {
        return new Handlebars.SafeString(TS.templates.builders.buildAttachmentActions(attachment, disable_buttons));
      });
      Handlebars.registerHelper("renderAttachmentActionSelectOption", function(context, options) {
        var option = _.merge({}, context, {
          is_group_item: options.hash.is_group_item
        });
        var html = TS.templates.attachment_actions_select_option(option);
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("renderAttachmentMedia", function(attachment, msg_dom_id) {
        var html;
        var media_type = TS.utility.attachments.getMediaType(attachment);
        var url;
        switch (media_type) {
          case "other":
            if (attachment.other_html) {
              html = TS.templates.builders.buildInlineOtherDiv(attachment.other_html, msg_dom_id, attachment.safe_other_html);
            }
            break;
          case "video":
            if (attachment.video_html && attachment.thumb_url) {
              url = attachment.from_url || attachment.thumb_url;
              html = TS.templates.builders.buildInlineVideoDiv(url, msg_dom_id);
            }
            break;
          case "image":
            if (attachment.image_url) {
              url = attachment.from_url || attachment.image_url;
              var args = {};
              args.flush_with_attachment = true;
              args.is_giphy_shuffle = attachment.fallback && attachment.fallback.indexOf("giphy") >= 0 && attachment.actions && attachment.actions[1] && attachment.actions[1].name === "shuffle";
              html = TS.templates.builders.buildInlineImgDiv(url, msg_dom_id, args);
            }
            break;
          case "audio":
            if (attachment.audio_html) {
              html = TS.templates.builders.buildInlineAudioDiv(attachment.audio_html, msg_dom_id, attachment.safe_audio_html);
            } else if (attachment.audio_url) {
              html = TS.templates.builders.formatSoundUrl(attachment);
            }
            break;
          default:
            break;
        }
        if (html) return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("getMemberTypeClass", TS.templates.builders.getMemberTypeClass);
      Handlebars.registerHelper("inlineSaver", function(args) {
        var html = TS.templates.inline_saver({
          hide_text: args.hash.hide_text,
          target: args.hash.target
        });
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("dangerouslyRenderHTML", function(html) {
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("attachmentMediaCaret", function(attachment, msg_dom_id) {
        var caret_html = "";
        var media_type = TS.utility.attachments.getMediaType(attachment);
        var src;
        switch (media_type) {
          case "video":
            src = attachment.from_url || attachment.thumb_url;
            caret_html = TS.templates.builders.buildInlineVideoToggler(src, msg_dom_id, true);
            break;
          case "audio":
            src = attachment.audio_html || attachment.audio_url;
            caret_html = TS.templates.builders.buildInlineAudioToggler(src, msg_dom_id);
            break;
          case "other":
            caret_html = TS.templates.builders.buildInlineOtherToggler(attachment.other_html, msg_dom_id);
            break;
          case "image":
            src = attachment.from_url || attachment.image_url;
            var args = {};
            args.is_giphy_shuffle = attachment.fallback && attachment.fallback.indexOf("giphy") >= 0 && attachment.actions && attachment.actions[1] && attachment.actions[1].name === "shuffle";
            caret_html = TS.templates.builders.buildInlineImgToggler(src, msg_dom_id, false, args);
            break;
          default:
            caret_html = TS.templates.builders.buildInlineAttachmentToggler(attachment.from_url, msg_dom_id);
            break;
        }
        if (caret_html) {
          caret_html = '<span class="media_caret">' + caret_html + "</span>";
        }
        return new Handlebars.SafeString(caret_html);
      });
      Handlebars.registerHelper("isMsgReply", function(options) {
        var msg = options.hash.msg;
        var is_reply = TS.utility.msgs.isMsgReply(msg);
        if (is_reply) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("buildMsgHTMLForThreadsView", function(msg, model_ob, thread, options) {
        var html = TS.templates.builders.buildThreadMsgHTML(msg, model_ob, thread, options);
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("buildThreadParticipantListHTML", function(root_msg) {
        return new Handlebars.SafeString(TS.templates.builders.buildThreadParticipantListHTML(root_msg));
      });
      Handlebars.registerHelper("supportsTextyTakesOver", function(options) {
        if (TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty()) {
          return options.fn(this);
        }
        return options.inverse(this);
      });
      Handlebars.registerHelper("getTeamIconOfSize", function(team, size) {
        if (team && team.icon) {
          return team.icon["image_" + size];
        }
        return null;
      });
      Handlebars.registerHelper("listItemCount", function(list) {
        return list.split(",").length;
      });
      Handlebars.registerHelper("getIconSizeToFit", function(size) {
        var possible_sizes = [230, 132, 102, 88, 68, 44, 34];
        if (size >= _.first(possible_sizes)) return _.first(possible_sizes);
        if (size <= _.last(possible_sizes)) return _.last(possible_sizes);
        var selected_size = _.first(possible_sizes);
        for (var i = 0; i < possible_sizes.length; i += 1) {
          if (possible_sizes[i] >= size) {
            selected_size = possible_sizes[i];
          }
        }
        return selected_size;
      });
      Handlebars.registerHelper("prefsNotificationExampleAll", function() {
        var name;
        if (TS.model.is_mac) {
          name = TS.i18n.t("Jeff", "prefs")();
        } else {
          name = TS.i18n.t("from Jeff", "prefs")();
        }
        var html = TS.templates.prefs_notification_example({
          name: name,
          text: TS.i18n.t("Good morning everyone!", "prefs")()
        });
        return new Handlebars.SafeString(html);
      });
      Handlebars.registerHelper("prefsNotificationExampleMentions", function() {
        var name;
        if (TS.model.is_mac) {
          name = TS.i18n.t("Linda", "prefs")();
        } else {
          name = TS.i18n.t("from Linda", "prefs")();
        }
        var html = TS.templates.prefs_notification_example({
          name: name,
          text: new Handlebars.SafeString(TS.i18n.t("Hi <strong>@{username}</strong>", "prefs")({
            username: TS.utility.htmlEntities(TS.model.user.name)
          }))
        });
        return new Handlebars.SafeString(html);
      });
    },
    test: function() {
      return {
        _optionsFnInverseBooleanHelper: _optionsFnInverseBooleanHelper,
        _inlineImgSrcForFile: _inlineImgSrcForFile
      };
    }
  });
  var _REGEX_CASH_DECIMAL_FORMATTING = /\.\d{1}$/;
  var _optionsFnInverseBooleanHelper = function(options) {
    if (typeof options.fn !== "function") {
      options.fn = function() {
        return true;
      };
    }
    if (typeof options.inverse !== "function") {
      options.inverse = function() {
        return false;
      };
    }
    return options;
  };
  var _inlineImgSrcForFile = function(file, max_image_size) {
    if (typeof file === "string") file = TS.files.getFileById(file);
    if (!file) return false;
    if (!TS.files.fileIsImage(file)) return false;
    if (!max_image_size) max_image_size = 480;
    return TS.files.getThumbSrcForFile(file, {
      max_size: max_image_size
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.date", {
    month_names: [TS.i18n.t("January", "date_utilities")(), TS.i18n.t("February", "date_utilities")(), TS.i18n.t("March", "date_utilities")(), TS.i18n.t("April", "date_utilities")(), TS.i18n.t("May", "date_utilities")(), TS.i18n.t("June", "date_utilities")(), TS.i18n.t("July", "date_utilities")(), TS.i18n.t("August", "date_utilities")(), TS.i18n.t("September", "date_utilities")(), TS.i18n.t("October", "date_utilities")(), TS.i18n.t("November", "date_utilities")(), TS.i18n.t("December", "date_utilities")()],
    short_month_names: [TS.i18n.t("Jan", "date_utilities")(), TS.i18n.t("Feb", "date_utilities")(), TS.i18n.t("March", "date_utilities")(), TS.i18n.t("April", "date_utilities")(), TS.i18n.t("May", "date_utilities")(), TS.i18n.t("June", "date_utilities")(), TS.i18n.t("July", "date_utilities")(), TS.i18n.t("Aug", "date_utilities")(), TS.i18n.t("Sept", "date_utilities")(), TS.i18n.t("Oct", "date_utilities")(), TS.i18n.t("Nov", "date_utilities")(), TS.i18n.t("Dec", "date_utilities")()],
    really_short_month_names: [TS.i18n.t("Jan", "date_utilities")(), TS.i18n.t("Feb", "date_utilities")(), TS.i18n.t("Mar", "date_utilities")(), TS.i18n.t("Apr", "date_utilities")(), TS.i18n.t("May", "date_utilities")(), TS.i18n.t("Jun", "date_utilities")(), TS.i18n.t("Jul", "date_utilities")(), TS.i18n.t("Aug", "date_utilities")(), TS.i18n.t("Sep", "date_utilities")(), TS.i18n.t("Oct", "date_utilities")(), TS.i18n.t("Nov", "date_utilities")(), TS.i18n.t("Dec", "date_utilities")()],
    day_names: [TS.i18n.t("Sunday", "date_utilities")(), TS.i18n.t("Monday", "date_utilities")(), TS.i18n.t("Tuesday", "date_utilities")(), TS.i18n.t("Wednesday", "date_utilities")(), TS.i18n.t("Thursday", "date_utilities")(), TS.i18n.t("Friday", "date_utilities")(), TS.i18n.t("Saturday", "date_utilities")()],
    short_day_names: [TS.i18n.t("Sun", "date_utilities")(), TS.i18n.t("Mon", "date_utilities")(), TS.i18n.t("Tue", "date_utilities")(), TS.i18n.t("Wed", "date_utilities")(), TS.i18n.t("Thu", "date_utilities")(), TS.i18n.t("Fri", "date_utilities")(), TS.i18n.t("Sat", "date_utilities")()],
    really_short_day_names: [TS.i18n.t("Su", "date_utilities")(), TS.i18n.t("Mo", "date_utilities")(), TS.i18n.t("Tu", "date_utilities")(), TS.i18n.t("We", "date_utilities")(), TS.i18n.t("Th", "date_utilities")(), TS.i18n.t("Fr", "date_utilities")(), TS.i18n.t("Sa", "date_utilities")()],
    ones_digit_names: [TS.i18n.t("zero", "date_utilities")(), TS.i18n.t("one", "date_utilities")(), TS.i18n.t("two", "date_utilities")(), TS.i18n.t("three", "date_utilities")(), TS.i18n.t("four", "date_utilities")(), TS.i18n.t("five", "date_utilities")(), TS.i18n.t("six", "date_utilities")(), TS.i18n.t("seven", "date_utilities")(), TS.i18n.t("eight", "date_utilities")(), TS.i18n.t("nine", "date_utilities")(), TS.i18n.t("ten", "date_utilities")(), TS.i18n.t("eleven", "date_utilities")(), TS.i18n.t("twelve", "date_utilities")(), TS.i18n.t("thirteen", "date_utilities")(), TS.i18n.t("fourteen", "date_utilities")(), TS.i18n.t("fifteen", "date_utilities")(), TS.i18n.t("sixteen", "date_utilities")(), TS.i18n.t("seventeen", "date_utilities")(), TS.i18n.t("eighteen", "date_utilities")(), TS.i18n.t("nineteen", "date_utilities")()],
    tens_digit_names: [TS.i18n.t("twenty", "date_utilities")(), TS.i18n.t("thirty", "date_utilities")(), TS.i18n.t("forty", "date_utilities")(), TS.i18n.t("fifty", "date_utilities")(), TS.i18n.t("sixty", "date_utilities")(), TS.i18n.t("seventy", "date_utilities")(), TS.i18n.t("eighty", "date_utilities")(), TS.i18n.t("ninety", "date_utilities")()],
    ones_digit_ordinal_names: [TS.i18n.t("zeroth", "date_utilities")(), TS.i18n.t("first", "date_utilities")(), TS.i18n.t("second", "date_utilities")(), TS.i18n.t("third", "date_utilities")(), TS.i18n.t("fourth", "date_utilities")(), TS.i18n.t("fifth", "date_utilities")(), TS.i18n.t("sixth", "date_utilities")(), TS.i18n.t("seventh", "date_utilities")(), TS.i18n.t("eighth", "date_utilities")(), TS.i18n.t("ninth", "date_utilities")(), TS.i18n.t("tenth", "date_utilities")(), TS.i18n.t("eleventh", "date_utilities")(), TS.i18n.t("twelfth", "date_utilities")(), TS.i18n.t("thirteenth", "date_utilities")(), TS.i18n.t("fourteenth", "date_utilities")(), TS.i18n.t("fifteenth", "date_utilities")(), TS.i18n.t("sixteenth", "date_utilities")(), TS.i18n.t("seventeenth", "date_utilities")(), TS.i18n.t("eighteenth", "date_utilities")(), TS.i18n.t("nineteenth", "date_utilities")()],
    tens_digit_ordinal_names: [TS.i18n.t("twentieth", "date_utilities")(), TS.i18n.t("thirtieth", "date_utilities")(), TS.i18n.t("fortieth", "date_utilities")(), TS.i18n.t("fiftieth", "date_utilities")(), TS.i18n.t("sixtieth", "date_utilities")(), TS.i18n.t("seventieth", "date_utilities")(), TS.i18n.t("eightieth", "date_utilities")(), TS.i18n.t("ninetieth", "date_utilities")()],
    fake_ts_unique_padder: "x",
    toDateObject: function(ts) {
      var date;
      if (ts && typeof ts === "string" && ts.indexOf("-") > -1) {
        var A = ts.split("-");
        if (A.length >= 3) {
          date = new Date(A[0], A[1] - 1, A[2]);
        } else {
          TS.warn("toDateObject() requires a date string in the format of YYYY-MM-DD");
          date = new Date(0);
        }
      } else {
        var ts_string = (ts || "0").toString();
        if (ts_string.indexOf(".") !== -1) {
          date = new Date(ts_string.split(".")[0] * 1e3);
        } else {
          date = new Date(ts * 1e3);
        }
      }
      return date;
    },
    toTime: function(ts, add_ampm, add_seconds) {
      var date = TS.utility.date.toDateObject(ts);
      var hours = date.getHours();
      var minutes = date.getMinutes();
      var seconds = date.getSeconds();
      var is_pm = false;
      var seconds_string = "";
      var str_builder = TS.i18n.t("{hours}:{minutes}{add_seconds, select, true{:{seconds}}other{}}{add_ampm, select, true{{is_pm, select, true{ PM}other{ AM}}}other{}}", "date_utilities");
      var formatted_time;
      add_ampm = add_ampm && !TS.utility.date.do24hrTime();
      if (TS.utility.date.do24hrTime()) {
        if (hours < 10) {
          hours = "0" + hours;
        }
      } else if (hours >= 12) {
        if (hours > 12) {
          hours -= 12;
        }
        is_pm = true;
      } else if (hours === 0) {
        hours = 12;
      }
      if (minutes < 10) {
        minutes = "0" + minutes;
      }
      if (add_seconds) {
        if (seconds < 10) {
          seconds_string = "0" + seconds;
        } else {
          seconds_string = seconds;
        }
      }
      formatted_time = str_builder({
        hours: hours,
        minutes: minutes,
        seconds: seconds_string,
        add_seconds: add_seconds,
        add_ampm: add_ampm,
        is_pm: is_pm
      });
      return formatted_time;
    },
    toTimeDuration: function(seconds) {
      var time = TS.utility.date.toTimeAmount(Math.floor(seconds / 60));
      var time_segments = [];
      time.s = seconds % 60;
      if (time.w) {
        time_segments.push(TS.i18n.t("{weeks, plural, =1{# week}other{# weeks}}", "date_utilities")({
          weeks: time.w
        }));
      }
      if (time.d) {
        time_segments.push(TS.i18n.t("{days, plural, =1{# day}other{# days}}", "date_utilities")({
          days: time.d
        }));
      }
      if (time.h) {
        time_segments.push(TS.i18n.t("{hours, plural, =1{# hour}other{# hours}}", "date_utilities")({
          hours: time.h
        }));
      }
      if (time.mi) {
        time_segments.push(TS.i18n.t("{minutes, plural, other{# min}}", "date_utilities")({
          minutes: time.mi
        }));
      }
      if (time.s || !time_segments.length) {
        time_segments.push(TS.i18n.t("{seconds, plural, other{# sec}}", "date_utilities")({
          seconds: time.s
        }));
      }
      return time_segments.join(" ").trim();
    },
    toTimeAmount: function(minutes) {
      return {
        w: TS.utility.date.toWeekAmount(minutes),
        d: TS.utility.date.toDayAmount(minutes) - TS.utility.date.toWeekAmount(minutes) * 7,
        h: TS.utility.date.toHourAmount(minutes) - TS.utility.date.toDayAmount(minutes) * 24,
        mi: minutes % 60
      };
    },
    toWeekAmount: function(minutes) {
      return Math.floor(minutes / 10080);
    },
    toDayAmount: function(minutes) {
      return Math.floor(minutes / 1440);
    },
    toHourAmount: function(minutes) {
      return Math.floor(minutes / 60);
    },
    toDate: function(ts, exclude_time) {
      var date = TS.utility.date.toDateObject(ts);
      var year = date.getFullYear();
      var month = date.getMonth();
      var day = date.getDate();
      var hours = date.getHours();
      var minutes = date.getMinutes();
      var date_str_builder = TS.i18n.t("{year}-{month}-{day}{exclude_time, select, true{}other{, {hours}:{minutes}{add_ampm, select, true{{is_pm, select, true{ PM}other{ AM}}}other{}}}}", "date_utilities");
      var is_pm = false;
      if (TS.utility.date.do24hrTime()) {
        if (hours < 10) {
          hours = "0" + hours;
        }
      } else if (hours >= 12) {
        if (hours > 12) {
          hours -= 12;
        }
        is_pm = true;
      } else if (hours === 0) {
        hours = 12;
      }
      if (day < 10) {
        day = "0" + day;
      }
      if (minutes < 10) {
        minutes = "0" + minutes;
      }
      month = ("0" + (month + 1)).slice(-2);
      if (exclude_time) {
        return date_str_builder({
          year: year,
          month: month,
          day: day,
          exclude_time: true
        });
      }
      return date_str_builder({
        year: year,
        month: month,
        day: day,
        exclude_time: false,
        hours: hours,
        minutes: minutes,
        add_ampm: !TS.utility.date.do24hrTime(),
        is_pm: is_pm
      });
    },
    toHumanReadableDateAndTime: function(ts, options) {
      var relative_day = TS.utility.date.maybeGetRelativeDay(ts, options);
      if (relative_day) {
        var include_ampm = true;
        var time = TS.utility.date.toTime(ts, include_ampm, false);
        var str_builder = TS.i18n.t("{relative_day} at {time}", "date_utilities");
        return str_builder({
          relative_day: relative_day,
          time: time
        });
      }
      return TS.utility.date.toCalendarDateOrNamedDayShort(ts);
    },
    convertISOtoUTCReadableDate: function(iso_date_string) {
      var utc_string_builder = TS.i18n.t("{month} {day}{add_year, select, true{, {year}}other{}}", "date_utilities");
      var utc_string;
      var ms = Date.parse(iso_date_string);
      if (!isNaN(ms)) {
        var date = new Date(ms);
        var month = TS.utility.date.month_names[date.getUTCMonth()];
        var day = date.getUTCDate();
        utc_string = utc_string_builder({
          month: month,
          day: TS.utility.ordinalNumber(day),
          add_year: !!date.getUTCFullYear(),
          year: date.getUTCFullYear() ? date.getUTCFullYear() : ""
        });
      }
      return utc_string;
    },
    toMonthYearFormat: function(ts) {
      var month_year_string_builder = TS.i18n.t("{month} {year}", "date_utilities");
      var month_year_string;
      if (!isNaN(ts)) {
        var date = TS.utility.date.toDateObject(ts);
        var month = TS.utility.date.month_names[date.getUTCMonth()];
        var year = date.getUTCFullYear();
        month_year_string = month_year_string_builder({
          month: month,
          year: year
        });
      }
      return month_year_string;
    },
    shouldExcludeYear: function(ts) {
      var date = TS.utility.date.toDateObject(ts);
      var now = new Date;
      var a_month = 31 * 24 * 60 * 60 * 1e3;
      return date.getFullYear() === now.getFullYear() || now - date <= a_month;
    },
    toCalendarDateOrNamedDayShort: function(ts) {
      var exclude_year = TS.utility.date.shouldExcludeYear(ts);
      return TS.utility.date.toCalendarDateOrNamedDay(ts, true, exclude_year);
    },
    do24hrTime: function() {
      return TS.model.user && TS.model.prefs && TS.model.prefs.time24;
    },
    toFilenameFriendlyDate: function(ts) {
      var date = TS.utility.date.toDateObject(ts);
      var year = date.getFullYear();
      var month = date.getMonth();
      var day = date.getDate();
      var hours = date.getHours();
      var minutes = date.getMinutes();
      var date_str_builder = TS.i18n.t("{year}_{month}_{day} {hours}_{minutes}{add_ampm, select, true{{is_pm, select, true{ PM}other{ AM}}}other{}}", "date_utilities");
      var is_pm = false;
      if (!TS.utility.date.do24hrTime()) {
        if (hours >= 12) {
          if (hours > 12) {
            hours -= 12;
          }
          is_pm = true;
        } else if (hours === 0) {
          hours = 12;
        }
      }
      if (day < 10) {
        day = "0" + day;
      }
      if (hours < 10) {
        hours = "0" + hours;
      }
      if (minutes < 10) {
        minutes = "0" + minutes;
      }
      month = ("0" + (month + 1)).slice(-2);
      return date_str_builder({
        year: year,
        month: month,
        day: day,
        hours: hours,
        minutes: minutes,
        add_ampm: !TS.utility.date.do24hrTime(),
        is_pm: is_pm
      });
    },
    toCalendarDate: function(ts, shorten_month, exclude_year, date_short, exclude_day) {
      var date = TS.utility.date.toDateObject(ts);
      var year = date.getFullYear();
      var month = date.getMonth();
      var day = date.getDate();
      var date_str;
      var date_str_so_far;
      if (date_short) {
        if (exclude_day) {
          date_str = TS.utility.date.really_short_month_names[month];
        } else {
          date_str = TS.i18n.t("{month} {day}", "date_utilities")({
            month: TS.utility.date.really_short_month_names[month],
            day: day
          });
        }
      } else if (shorten_month) {
        if (exclude_day) {
          date_str = TS.utility.date.short_month_names[month];
        } else {
          date_str = TS.i18n.t("{month} {day}", "date_utilities")({
            month: TS.utility.date.short_month_names[month],
            day: TS.utility.ordinalNumber(day)
          });
        }
      } else if (exclude_day) {
        date_str = TS.utility.date.month_names[month];
      } else {
        date_str = TS.i18n.t("{month} {day}", "date_utilities")({
          month: TS.utility.date.month_names[month],
          day: TS.utility.ordinalNumber(day)
        });
      }
      if (!exclude_year && !exclude_day) {
        date_str_so_far = date_str;
        date_str = TS.i18n.t("{date}, {year}", "date_utilities")({
          date: date_str_so_far,
          year: year
        });
      }
      if (!exclude_year && exclude_day) {
        date_str_so_far = date_str;
        date_str = TS.i18n.t("{date} {year}", "date_utilities")({
          date: date_str_so_far,
          year: year
        });
      }
      return date_str;
    },
    maybeGetRelativeDay: function(ts, options) {
      var date = TS.utility.date.toDateObject(ts);
      var today_str = TS.i18n.t("Today", "date_utilities")();
      var yesterday_str = TS.i18n.t("Yesterday", "date_utilities")();
      var today = new Date;
      var yesterday = new Date;
      yesterday.setDate(today.getDate() - 1);
      if (TS.utility.date.sameDay(date, today)) {
        return options && options.uncapitalized ? today_str.toLocaleLowerCase() : today_str;
      } else if (TS.utility.date.sameDay(date, yesterday)) {
        return options && options.uncapitalized ? yesterday_str.toLocaleLowerCase() : yesterday_str;
      }
    },
    toCalendarDateOrNamedDay: function(ts, shorten_month, exclude_year) {
      var relative_day = TS.utility.date.maybeGetRelativeDay(ts, {});
      exclude_year = exclude_year || TS.utility.date.shouldExcludeYear(ts);
      if (relative_day) {
        return relative_day;
      }
      return TS.utility.date.toCalendarDate(ts, shorten_month, exclude_year, false, false);
    },
    toCalendarDateIfYesterdayOrToday: function(ts, shorten_month) {
      var date = TS.utility.date.toDateObject(ts);
      var today = new Date;
      var yesterday = new Date;
      yesterday.setDate(today.getDate() - 1);
      if (TS.utility.date.sameDay(date, today) || TS.utility.date.sameDay(date, yesterday)) {
        return TS.utility.date.toCalendarDate(ts, shorten_month, false, false, false);
      }
      return "";
    },
    toHour: function(ts) {
      var date = TS.utility.date.toDateObject(ts);
      var hours = date.getHours();
      var is_pm = false;
      var str_builder = TS.i18n.t("{hours}{use_am_pm, select, true{{is_pm, select, true{ PM}other{ AM}}}other{}}", "date_utilities");
      var is_24_time = TS.utility.date.do24hrTime();
      if (is_24_time) {
        if (hours < 10) {
          hours = "0" + hours;
        }
      } else if (hours >= 12) {
        if (hours > 12) {
          hours -= 12;
        }
        is_pm = true;
      } else if (hours === 0) {
        hours = 12;
      }
      return str_builder({
        hours: hours,
        use_am_pm: !is_24_time,
        is_pm: is_pm
      });
    },
    toDayOfTheWeek: function(ts) {
      var date = TS.utility.date.toDateObject(ts);
      return TS.utility.date.day_names[date.getDay()];
    },
    toTimeAgo: function(ts) {
      var date = TS.utility.date.toDateObject(ts);
      var today = new Date;
      var raw_seconds = TS.utility.date.distanceInSeconds(today, date);
      var is_future = raw_seconds < 0;
      var seconds = Math.abs(raw_seconds);
      var minutes = seconds / 60;
      var hours = minutes / 60;
      var days = hours / 24;
      var months = days / (365 / 12);
      var years = days / 365;
      if (seconds < 45) {
        if (is_future) {
          return TS.i18n.t("in less than a minute", "date_utilities")();
        }
        return TS.i18n.t("less than a minute ago", "date_utilities")();
      } else if (seconds < 90) {
        if (is_future) {
          return TS.i18n.t("in about a minute", "date_utilities")();
        }
        return TS.i18n.t("about a minute ago", "date_utilities")();
      } else if (minutes < 45) {
        if (is_future) {
          return TS.i18n.t("in {number_of_minutes, number} minutes", "date_utilities")({
            number_of_minutes: Math.round(minutes)
          });
        }
        return TS.i18n.t("{number_of_minutes, number} minutes ago", "date_utilities")({
          number_of_minutes: Math.round(minutes)
        });
      } else if (minutes < 90) {
        if (is_future) {
          return TS.i18n.t("in about an hour", "date_utilities")();
        }
        return TS.i18n.t("about an hour ago", "date_utilities")();
      } else if (hours < 24) {
        if (is_future) {
          return TS.i18n.t("in about {number_of_hours, number} hours", "date_utilities")({
            number_of_hours: Math.round(hours)
          });
        }
        return TS.i18n.t("about {number_of_hours, number} hours ago", "date_utilities")({
          number_of_hours: Math.round(hours)
        });
      } else if (hours < 42) {
        if (is_future) {
          return TS.i18n.t("in a day", "date_utilities")();
        }
        return TS.i18n.t("a day ago", "date_utilities")();
      } else if (days < 30) {
        if (is_future) {
          return TS.i18n.t("in {number_of_days, number} days", "date_utilities")({
            number_of_days: Math.round(days)
          });
        }
        return TS.i18n.t("{number_of_days, number} days ago", "date_utilities")({
          number_of_days: Math.round(days)
        });
      } else if (days < 45) {
        if (is_future) {
          return TS.i18n.t("in about a month", "date_utilities")();
        }
        return TS.i18n.t("about a month ago", "date_utilities")();
      } else if (days < 365) {
        if (is_future) {
          return TS.i18n.t("in {number_of_months, number} months", "date_utilities")({
            number_of_months: Math.round(months)
          });
        }
        return TS.i18n.t("{number_of_months, number} months ago", "date_utilities")({
          number_of_months: Math.round(months)
        });
      } else if (years < 1.5) {
        if (is_future) {
          return TS.i18n.t("in about a year", "date_utilities")();
        }
        return TS.i18n.t("about a year ago", "date_utilities")();
      }
      if (is_future) {
        return TS.i18n.t("in {number_of_years, number} years", "date_utilities")({
          number_of_years: Math.round(years)
        });
      }
      return TS.i18n.t("{number_of_years, number} years ago", "date_utilities")({
        number_of_years: Math.round(years)
      });
    },
    toTimeAgoShort: function(ts, really_short) {
      var date = TS.utility.date.toDateObject(ts);
      var today = new Date;
      var raw_seconds = TS.utility.date.distanceInSeconds(today, date);
      var seconds = Math.abs(raw_seconds);
      var minutes = seconds / 60;
      var hours = minutes / 60;
      var days = hours / 24;
      var years = days / 365;
      if (really_short) {
        if (seconds < 45) {
          return TS.i18n.t("<1m", "date_utilities")();
        } else if (seconds < 90) {
          return TS.i18n.t("1m", "date_utilities")();
        } else if (minutes < 45) {
          return TS.i18n.t("{number_of_minutes, number}m", "date_utilities")({
            number_of_minutes: Math.round(minutes)
          });
        } else if (minutes < 90) {
          return TS.i18n.t("1h", "date_utilities")();
        } else if (hours < 24) {
          return TS.i18n.t("{number_of_hours, number}h", "date_utilities")({
            number_of_hours: Math.round(hours)
          });
        } else if (days < 7) {
          return TS.i18n.t("{number_of_days, number}d", "date_utilities")({
            number_of_days: Math.round(days)
          });
        } else if (days < 365) {
          return TS.utility.date.toCalendarDate(ts, true, true, true, false);
        } else if (years < 1.5) {
          return TS.i18n.t("1y", "date_utilities")();
        }
        return TS.i18n.t("{number_of_years, number}y", "date_utilities")({
          number_of_years: Math.round(years)
        });
      }
      if (seconds < 45) {
        return TS.i18n.t("< 1 minute ago", "date_utilities")();
      } else if (seconds < 90) {
        return TS.i18n.t("1 minute ago", "date_utilities")();
      } else if (minutes < 45) {
        return TS.i18n.t("{number_of_minutes, number} minutes ago", "date_utilities")({
          number_of_minutes: Math.round(minutes)
        });
      } else if (minutes < 90) {
        return TS.i18n.t("1 hour ago", "date_utilities")();
      } else if (hours < 24) {
        return TS.i18n.t("{number_of_hours, number} hours ago", "date_utilities")({
          number_of_hours: Math.round(hours)
        });
      } else if (days < 7) {
        return TS.i18n.t("{number_of_days, plural, =1{# day ago}other{# days ago}}", "date_utilities")({
          number_of_days: Math.round(days)
        });
      } else if (days < 365) {
        return TS.utility.date.toCalendarDate(ts, true, true, true, false);
      } else if (years < 1.5) {
        return TS.i18n.t("1 year ago", "date_utilities")();
      }
      return TS.i18n.t("{number_of_years, number} years ago", "date_utilities")({
        number_of_years: Math.round(years)
      });
    },
    memberLocalTime: function(member, as_text, use_cache) {
      var date = new Date;
      if (use_cache === undefined) {
        use_cache = true;
      }
      var local_time;
      var tz_offset;
      if (_has_Intl) {
        var now = Date.now();
        if (!_cache_date[member.id]) {
          _cache_date[member.id] = {
            local_time: null,
            milliseconds: null
          };
        }
        try {
          if (_cache_date[member.id].millseconds && _cache_date[member.id].millseconds >= now - 3e4 && _cache_date[member.id].local_time && use_cache) {
            local_time = _cache_date[member.id].local_time;
          } else {
            var tz = member && member.tz ? member.tz : "America/Los_Angeles";
            var date_options = {
              timeZone: tz,
              hour: "numeric",
              minute: "numeric",
              hour12: !TS.utility.date.do24hrTime()
            };
            local_time = Intl.DateTimeFormat.call(null, TS.i18n.locale(), date_options).format(date);
            _cache_date[member.id].local_time = local_time;
            _cache_date[member.id].milliseconds = now;
          }
        } catch (e) {
          tz_offset = _memberTzOffset(member);
          local_time = _calculateLocalTime(date, tz_offset);
        }
      } else {
        if (_dst_offsets) {
          tz_offset = member && member.tz && _.isObject(_dst_offsets[member.tz]) ? _dst_offsets[member.tz].tz_offset : _dst_offsets["America/Los_Angeles"].tz_offset;
          tz_offset = parseInt(tz_offset, 10);
        } else {
          tz_offset = _memberTzOffset(member);
        }
        local_time = _calculateLocalTime(date, tz_offset);
      }
      if (as_text) {
        return local_time;
      }
      return TS.i18n.t('<span class="timezone_value">{local_time}</span> local time', "date_utilities")({
        local_time: local_time
      });
    },
    memberUTCOffset: function(member) {
      var tz_offset = _memberTzOffset(member);
      var hours_offset_from_utc = tz_offset / 60 / 60;
      if (hours_offset_from_utc < 0) {
        return "(UTC" + hours_offset_from_utc + ")";
      } else if (hours_offset_from_utc > 0) {
        return "(UTC+" + hours_offset_from_utc + ")";
      }
      return "(UTC)";
    },
    makeTsStamp: function(date, padder, unique_num) {
      var unix_time;
      var unique_str;
      date = date || Date.now();
      padder = padder || TS.utility.date.fake_ts_unique_padder;
      unique_num = unique_num === undefined || unique_num === null ? _getNewFakeTsUniquePart() : unique_num;
      unix_time = Math.floor(date / 1e3).toString();
      unique_str = _.padStart(unique_num, 6, padder);
      return unix_time + "." + unique_str;
    },
    sameDay: function(date_a, date_b) {
      return date_a.getFullYear() === date_b.getFullYear() && date_a.getMonth() === date_b.getMonth() && date_a.getDate() === date_b.getDate();
    },
    sameHour: function(date_a, date_b) {
      return date_a.getFullYear() === date_b.getFullYear() && date_a.getMonth() === date_b.getMonth() && date_a.getDate() === date_b.getDate() && date_a.getHours() === date_b.getHours();
    },
    distanceInSeconds: function(date_a, date_b) {
      return Math.round(date_a.getTime() / 1e3) - Math.round(date_b.getTime() / 1e3);
    },
    distanceInMinutes: function(date_a, date_b) {
      return TS.utility.date.distanceInSeconds(date_a, date_b) / 60;
    },
    distanceInDays: function(date_a, date_b) {
      return Math.round(TS.utility.date.distanceInSeconds(date_a, date_b) / (60 * 60 * 24));
    },
    isToday: function(date_a) {
      var today = new Date;
      return TS.utility.date.sameDay(date_a, today);
    },
    isYesterday: function(date_a) {
      var today = new Date;
      var yesterday = new Date;
      yesterday.setDate(today.getDate() - 1);
      return TS.utility.date.sameDay(date_a, yesterday);
    },
    getNextActivityDayStamp: function(day_stamp) {
      var date = TS.utility.date.toDateObject(day_stamp);
      var next_date = new Date(date.getTime() + 864e5);
      return next_date.getFullYear() + "-" + _.padStart(next_date.getMonth() + 1, 2, "0") + "-" + _.padStart(next_date.getDate(), 2, "0");
    },
    getPrevActivityDayStamp: function(day_stamp) {
      var date = TS.utility.date.toDateObject(day_stamp);
      var next_date = new Date(date.getTime() - 864e5);
      return next_date.getFullYear() + "-" + _.padStart(next_date.getMonth() + 1, 2, "0") + "-" + _.padStart(next_date.getDate(), 2, "0");
    },
    toTimeWords: function(ts, include_ampm, include_seconds) {
      var date = TS.utility.date.toDateObject(ts);
      var hours = date.getHours();
      var minutes = date.getMinutes();
      var secs = date.getSeconds();
      var is_pm = false;
      var is_24_time = TS.utility.date.do24hrTime();
      var use_oclock = minutes === 0;
      var use_seconds = include_seconds && secs !== 0;
      var use_ampm = include_ampm && !is_24_time;
      var no_hour_str = is_24_time && hours === 0;
      var hours_str_builder;
      var built_hours_str;
      var minutes_str_builder;
      var built_minutes_str;
      var seconds_str_builder;
      var built_seconds_str;
      var ampm_str_builder;
      var built_ampm_str;
      var hours_words;
      var minutes_words;
      var seconds_words;
      if (use_oclock && !use_seconds) {
        if (hours === 0) {
          return TS.i18n.t("midnight", "date_utilities")();
        }
        if (hours === 12) {
          return TS.i18n.t("noon", "date_utilities")();
        }
      }
      if (!is_24_time) {
        if (hours >= 12) {
          if (hours > 12) {
            hours -= 12;
          }
          is_pm = true;
        } else if (hours === 0) {
          hours = 12;
        }
      }
      if (!use_oclock) {
        minutes_str_builder = TS.i18n.t("{use_minutes_prefix, select, true{ oh-{minutes_words}}other{ {minutes_words}}}", "date_utilities");
        minutes_words = TS.utility.date.numberToWords(minutes);
        built_minutes_str = minutes_str_builder({
          use_minutes_prefix: minutes < 10,
          minutes_words: minutes_words
        });
      } else {
        built_minutes_str = "";
      }
      if (use_seconds) {
        seconds_str_builder = TS.i18n.t("{seconds, plural, =1{ and {seconds_words} second}other{ and {seconds_words} seconds}}", "date_utilities");
        seconds_words = TS.utility.date.numberToWords(secs);
        built_seconds_str = seconds_str_builder({
          seconds_words: seconds_words,
          seconds: secs
        });
      } else {
        built_seconds_str = "";
      }
      if (use_ampm) {
        ampm_str_builder = TS.i18n.t("{is_pm, select, true{ PM}other{ AM}}", "date_utilities");
        built_ampm_str = ampm_str_builder({
          is_pm: is_pm
        });
      } else {
        built_ampm_str = "";
      }
      if (no_hour_str) {
        minutes_str_builder = TS.i18n.t("{minutes, plural, =1{{minutes_words} minute past midnight}other{{minutes_words} minutes past midnight}}", "date_utilities");
        built_minutes_str = minutes_str_builder({
          minutes_words: minutes_words,
          minutes: minutes
        });
        built_hours_str = "";
      } else {
        hours_words = TS.utility.date.numberToWords(hours);
        if (use_oclock) {
          hours_str_builder = TS.i18n.t("{hours_words} {use_24_time, select, true{hundred}other{o’clock}}", "date_utilities");
          built_hours_str = hours_str_builder({
            hours_words: hours_words,
            use_24_time: is_24_time && hours > 12
          });
        } else {
          built_hours_str = hours_words;
        }
      }
      return built_hours_str + built_minutes_str + built_seconds_str + built_ampm_str;
    },
    toCalendarDateWords: function(ts, exclude_year) {
      var date = TS.utility.date.toDateObject(ts);
      var year = date.getFullYear();
      var month = date.getMonth();
      var day = date.getDate();
      var day_words = TS.utility.date.numberToWords(day, true);
      var month_words = TS.utility.date.month_names[month];
      if (!exclude_year) {
        if (year % 1e3 === 0) {
          return TS.i18n.t("{month_words} {day_words}, {year_words}-thousand", "date_utilities")({
            day_words: day_words,
            month_words: month_words,
            year_words: TS.utility.date.numberToWords(year / 1e3)
          });
        } else if (year % 100 === 0) {
          return TS.i18n.t("{month_words} {day_words}, {year_words} hundred", "date_utilities")({
            day_words: day_words,
            month_words: month_words,
            year_words: TS.utility.date.numberToWords(year / 100)
          });
        } else if (year % 1e3 < 10) {
          return TS.i18n.t("{month_words} {day_words}, {year_words}-thousand and {modulus_year_word}", "date_utilities")({
            day_words: day_words,
            month_words: month_words,
            year_words: TS.utility.date.numberToWords((year - year % 1e3) / 1e3),
            modulus_year_word: TS.utility.date.numberToWords(year % 1e3)
          });
        }
        return TS.i18n.t("{month_words} {day_words}, {year_words} {use_year_prefix, select, true{oh-{modulus_year_word}}other{{modulus_year_word}}}", "date_utilities")({
          day_words: day_words,
          month_words: month_words,
          year_words: TS.utility.date.numberToWords((year - year % 100) / 100),
          modulus_year_word: TS.utility.date.numberToWords(year % 100),
          use_year_prefix: year % 100 < 10
        });
      }
      return TS.i18n.t("{month_words} {day_words}", "date_utilities")({
        month_words: month_words,
        day_words: day_words
      });
    },
    toCalendarDateOrNamedDayWords: function(ts, exclude_year) {
      var date = TS.utility.date.toDateObject(ts);
      var today = new Date;
      var yesterday = new Date;
      yesterday.setDate(today.getDate() - 1);
      if (TS.utility.date.sameDay(date, today)) {
        return TS.i18n.t("Today", "date_utilities")();
      } else if (TS.utility.date.sameDay(date, yesterday)) {
        return TS.i18n.t("Yesterday", "date_utilities")();
      }
      return TS.utility.date.toCalendarDateWords(ts, exclude_year);
    },
    numberToWords: function(num, ordinal) {
      var tens = Math.floor(num / 10);
      var ones = num % 10;
      var tens_number = tens - 2;
      if (ordinal) {
        if (num < TS.utility.date.ones_digit_ordinal_names.length) {
          return TS.utility.date.ones_digit_ordinal_names[num];
        }
        if (tens <= 9) {
          if (ones > 0) {
            return TS.utility.date.tens_digit_names[tens_number] + "-" + TS.utility.date.ones_digit_ordinal_names[ones];
          }
          return TS.utility.date.tens_digit_ordinal_names[tens_number];
        }
      }
      if (num < TS.utility.date.ones_digit_names.length) {
        return TS.utility.date.ones_digit_names[num];
      }
      if (tens <= 9) {
        if (ones > 0) {
          return TS.utility.date.tens_digit_names[tens_number] + "-" + TS.utility.date.ones_digit_names[ones];
        }
        return TS.utility.date.tens_digit_names[tens_number];
      }
    },
    formatDate: function(token_string, unix_time, fallback_string) {
      var date_obj = new Date(unix_time * 1e3);
      var today = new Date;
      var ts = TS.utility.date.makeTsStamp(date_obj);
      var distance_in_minutes = TS.utility.date.distanceInMinutes(date_obj, today);
      var minute_distance_max = 182 * 24 * 60;
      var exclude_year = distance_in_minutes > -minute_distance_max && distance_in_minutes < minute_distance_max;
      var capitalize = false;
      var invalid_token_found = false;
      if (!fallback_string) {
        fallback_string = token_string;
      }
      if (isNaN(date_obj.getTime())) {
        return fallback_string;
      }
      token_string = token_string.replace(/{(.*?)}/g, function(match, token, offset) {
        var date_string;
        switch (token) {
          case "date_num":
            return TS.utility.date.toDate(ts, true);
          case "date_long":
            switch (TS.i18n.locale()) {
              default: return TS.utility.date.toDayOfTheWeek(ts) + ", " + TS.utility.date.toCalendarDate(ts, false, exclude_year);
            }
          case "date_long_pretty":
            capitalize = !capitalize && token_string.indexOf("{date_long_pretty}") === 0 && offset === 0;
            switch (TS.i18n.locale()) {
              default: date_string = TS.utility.date.toDayOfTheWeek(ts) + ", " + TS.utility.date.toCalendarDate(ts, false, exclude_year);
              return TS.utility.date.prettifyDateString(ts, date_string, capitalize);
            }
          case "date":
            return TS.utility.date.toCalendarDate(ts, false, exclude_year);
          case "date_pretty":
            capitalize = !capitalize && token_string.indexOf("{date_pretty}") === 0 && offset === 0;
            date_string = TS.utility.date.toCalendarDate(ts, false, exclude_year);
            return TS.utility.date.prettifyDateString(ts, date_string, capitalize);
          case "date_short":
            return TS.utility.date.toCalendarDate(ts, true, exclude_year, true);
          case "date_short_pretty":
            capitalize = !capitalize && token_string.indexOf("{date_short_pretty}") === 0 && offset === 0;
            date_string = TS.utility.date.toCalendarDate(ts, true, exclude_year, true);
            return TS.utility.date.prettifyDateString(ts, date_string, capitalize);
          case "time":
            return TS.utility.date.toTime(ts, true, false);
          case "time_secs":
            return TS.utility.date.toTime(ts, true, true);
          case "ago":
            capitalize = !capitalize && token_string.indexOf("{ago}") === 0 && offset === 0;
            date_string = TS.utility.date.toTimeAgo(ts);
            if (capitalize) {
              return date_string.charAt(0).toLocaleUpperCase() + date_string.slice(1);
            }
            return date_string;
          default:
            invalid_token_found = true;
            return "";
        }
      });
      if (invalid_token_found) {
        return fallback_string;
      }
      return token_string;
    },
    prettifyDateString: function(ts, fallback_date_string, capitalize) {
      var date = TS.utility.date.toDateObject(ts);
      var today = new Date;
      var day_of_time = 1e3 * 60 * 60 * 24;
      var yesterday = new Date((new Date).valueOf() - day_of_time);
      var tomorrow = new Date((new Date).valueOf() + day_of_time);
      var today_str = TS.i18n.t("Today", "date_utilities")();
      var yesterday_str = TS.i18n.t("Yesterday", "date_utilities")();
      var tomorrow_str = TS.i18n.t("Tomorrow", "date_utilities")();
      if (TS.utility.date.sameDay(date, today)) {
        return capitalize ? today_str : today_str.toLocaleLowerCase();
      }
      if (TS.utility.date.sameDay(date, yesterday)) {
        return capitalize ? yesterday_str : yesterday_str.toLocaleLowerCase();
      }
      if (TS.utility.date.sameDay(date, tomorrow)) {
        return capitalize ? tomorrow_str : tomorrow_str.toLocaleLowerCase();
      }
      return fallback_date_string;
    },
    millisecondsToPrettifiedTime: function(milliseconds) {
      var time_in_seconds = Math.floor(milliseconds / 1e3);
      var hours = Math.floor(time_in_seconds / 3600);
      var minutes = Math.floor((time_in_seconds - hours * 3600) / 60);
      var seconds = time_in_seconds - hours * 3600 - minutes * 60;
      var separator;
      minutes = minutes < 10 ? "0" + minutes : minutes.toString();
      seconds = seconds < 10 ? "0" + seconds : seconds.toString();
      switch (TS.i18n.locale()) {
        default: separator = ":";
      }
      if (hours !== 0) {
        return hours + separator + minutes + separator + seconds;
      }
      return minutes + separator + seconds;
    },
    daysToYearsPretty: function(d) {
      var days = parseInt(d, 10);
      var years = 0;
      var str_builder;
      if (days % 365 === 0) {
        years = days / 365;
        days = 0;
      } else {
        years = Math.floor(days / 365);
        days %= 365;
      }
      if (years > 0) {
        if (days > 0) {
          str_builder = TS.i18n.t("{years, plural, =1{# year}other{# years}}, {days, plural, =1{# day}other{# days}}", "date_utilities");
        } else {
          str_builder = TS.i18n.t("{years, plural, =1{# year}other{# years}}", "date_utilities");
        }
      } else {
        str_builder = TS.i18n.t("{days, plural, =1{# day}other{# days}}", "date_utilities");
      }
      return str_builder({
        years: years,
        days: days
      });
    },
    test: function() {
      return {
        _has_Intl: _has_Intl
      };
    }
  });
  var _fake_ts_unique_incrementer = 1;
  var _cache_date = {};
  var _has_Intl = Intl && typeof Intl === "object" && typeof Intl.DateTimeFormat === "function" && typeof Intl.DateTimeFormat() === "object" && typeof Intl.DateTimeFormat().resolvedOptions === "function" && typeof Intl.DateTimeFormat().resolvedOptions() === "object" && typeof Intl.DateTimeFormat().resolvedOptions().timeZone !== "undefined" && Intl.DateTimeFormat().resolvedOptions().timeZone.length > 0;
  var _dst_offsets = TS.boot_data.dst_offsets || null;
  var _memberTzOffset = function(member) {
    var tz_offset = -28800;
    if (member && (member.tz_offset && typeof member.tz_offset !== "undefined") || member.tz_offset === 0) {
      tz_offset = member.tz_offset;
    }
    return tz_offset;
  };
  var _getNewFakeTsUniquePart = function() {
    _fake_ts_unique_incrementer += 1;
    if (_fake_ts_unique_incrementer >= 1e5) {
      _fake_ts_unique_incrementer = 1;
    }
    return _fake_ts_unique_incrementer;
  };
  var _calculateLocalTime = function(date, tz_offset) {
    var utc = date.getTime() + date.getTimezoneOffset() * 6e4;
    var member_date = new Date(utc + 36e5 * (tz_offset / 3600));
    var member_date_str = (member_date / 1e3).toString();
    return TS.utility.date.toTime(member_date_str, !TS.utility.date.do24hrTime(), false);
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.msgs", {
    automated_subtypes: ["channel_join", "channel_leave", "channel_topic", "channel_purpose", "channel_archive", "channel_unarchive", "group_join", "group_leave", "group_topic", "group_purpose", "group_archive", "group_unarchive", "group_name", "channel_name", "play_sound", "pinned_item", "unpinned_item", "sh_room_shared", "sh_room_created", "bot_enable", "bot_disable", "bot_add", "bot_remove", "reminder_add", "reminder_delete", "reply_broadcast"],
    file_subtypes: ["file_comment", "file_mention", "file_share", "file_upload"],
    allowed_embed_attributes: ["class", "name", "id", "src", "width", "oldwidth", "height", "oldheight", "frameborder", "title", "scrolling", "allowtransparency", "allowfullscreen", "oallowfullscreen", "msallowfullscreen", "webkitallowfullscreen", "mozallowfullscreen", "controls", "autoplay", "loop", "muted", "poster", "preload", "webkit-playsinline", "type"],
    ephemeral_msgs_map: {},
    onStart: function() {},
    messageIncludesMember: function(member, msg) {
      if (!member) {
        TS.warn("messageIncludesMember: WTF no member?");
        return;
      }
      if (!msg) {
        TS.warn("messageIncludesMember: WTF no msg?");
        return;
      }
      if (TS.utility.msgs.memberSentMessage(member, msg)) return true;
      var txt = msg.text;
      var opts = TS.format.calculateOptions(msg, {});
      var tokens = TSF.getTokensArray($.trim(txt), opts.tsf_mode, {
        jumbomoji: !opts.no_jumbomoji
      });
      var item;
      for (var i = 0, j = tokens.length; i < j; i += 1) {
        item = tokens[i];
        if (item.indexOf("<") === 0 && item.indexOf("<@") === 0) {
          var guts = item.replace(/<|>/g, "");
          var id = TS.utility.msgs.getMemberIdFromMemberMarkup(guts);
          if (id && id == member.id) return true;
        }
      }
      return false;
    },
    memberSentMessage: function(member, msg) {
      if (!member) {
        TS.warn("messageIncludesMember: WTF no member?");
        return;
      }
      if (!msg) {
        TS.warn("messageIncludesMember: WTF no msg?");
        return;
      }
      return !!(msg.user && msg.user == member.id) || !!(msg.comment && msg.comment.user == member.id);
    },
    allUnknownUsersInMessage: function(msg) {
      var rtn = [];
      var txt = msg.text;
      var opts = TS.format.calculateOptions(msg, {});
      var A = TSF.getTokensArray($.trim(txt), opts.tsf_mode, {
        jumbomoji: !opts.no_jumbomoji
      });
      for (var i = 0; i < A.length; i += 1) {
        var item = A[i];
        if (item.indexOf("<") === 0 && item.indexOf("<@") === 0) {
          var guts = item.replace(/<|>/g, "");
          var id = TS.utility.msgs.getMemberIdFromMemberMarkup(guts);
          var m = TS.members.getMemberById(id);
          if (!m) m = TS.members.getMemberByName(id);
          if (!m) {
            if (rtn.indexOf(id) < 0) rtn.push(id);
          }
        }
      }
      return rtn;
    },
    appendMsg: function(msgs, msg) {
      msgs.unshift(TS.utility.msgs.makeSureMsgObIsValid(msg));
    },
    setMsgs: function(model_ob, msgs) {
      for (var i = 0; i < msgs.length; i += 1) {
        msgs[i] = TS.utility.msgs.makeSureMsgObIsValid(msgs[i]);
      }
      TS.utility.msgs.sortMsgs(msgs);
      model_ob.msgs = msgs;
      return model_ob.msgs;
    },
    spliceMsg: function(msgs, msg) {
      var i = msgs.indexOf(msg);
      if (i > -1) {
        msgs.splice(i, 1);
      }
    },
    getNonTempMsgFromUserMatchingText: function(text, user_id, msgs) {
      if (!text && text !== 0) return null;
      var msg;
      for (var i = 0; i < msgs.length; i += 1) {
        msg = msgs[i];
        if (msg.user != user_id) continue;
        if (TS.utility.msgs.isTempMsg(msg)) continue;
        if (msg.text == text) return msg;
      }
      return null;
    },
    getMsgByProp: function(name, value, msgs) {
      if (!value && value !== 0) return null;
      var msg;
      for (var i = 0; i < msgs.length; i += 1) {
        msg = msgs[i];
        if (msg[name] == value) return msg;
      }
      return null;
    },
    getEditableMsgByProp: function(name, value, msgs) {
      if (!value && value !== 0 || !msgs) return null;
      var msg;
      for (var i = 0; i < msgs.length; i += 1) {
        msg = msgs[i];
        if (msg.subtype && msg.subtype !== "me_message" && msg.subtype !== "thread_broadcast") continue;
        if (msg[name] == value) return msg;
      }
      return null;
    },
    getEditableReplyByProp: function(name, value, model_ob, thread_ts) {
      if (!value && value !== 0 || !model_ob || !thread_ts) return null;
      var msgs;
      if (TS.ui.replies.activeConvoModelId() === model_ob.id && TS.ui.replies.activeConvoThreadTs() === thread_ts) {
        msgs = TS.ui.replies.getActiveMessages();
      } else if (TS.model.threads_view_is_showing) {
        var thread = TS.client.threads.getThread(model_ob, thread_ts);
        msgs = thread && thread.replies ? thread.replies : [];
      }
      var msg = _.findLast(msgs, function(msg) {
        var is_regular_msg = !(msg.subtype && msg.subtype !== "me_message");
        var has_matching_prop = msg[name] === value;
        return is_regular_msg && has_matching_prop;
      });
      return msg;
    },
    sortMsgs: function(msgs) {
      function compare(a, b) {
        if (a.ts < b.ts) return 1;
        if (a.ts > b.ts) return -1;
        return 0;
      }
      msgs.sort(compare);
    },
    isMsgRolledUp: function(msg) {
      if (!msg._jl_rolled_up_in) return false;
      return msg._jl_rolled_up_in !== msg.ts;
    },
    isMsgHidden: function(msg) {
      if (msg.no_display) return true;
      if (msg._hidden_reply) return true;
      return false;
    },
    getPrevDisplayedMsg: function(ts, msgs) {
      var msg;
      var return_next_displayable_msg = false;
      for (var i = 0; i < msgs.length; i += 1) {
        msg = msgs[i];
        if (return_next_displayable_msg) {
          if (!TS.utility.msgs.isMsgHidden(msg) && !TS.utility.msgs.isMsgRolledUp(msg)) {
            return msg;
          }
        } else if (msg.ts == ts) {
          return_next_displayable_msg = true;
        }
      }
      return null;
    },
    getDisplayedMsgs: function(msgs) {
      var A = [];
      var msg;
      for (var i = 0; i < msgs.length; i += 1) {
        msg = msgs[i];
        if (!TS.utility.msgs.isMsgHidden(msg) && !TS.utility.msgs.isMsgRolledUp(msg)) {
          A.push(msg);
        }
      }
      return A;
    },
    getDisplayedMsgAfterTS: function(ts, msgs) {
      var msg;
      for (var i = msgs.length - 1; i > -1; i -= 1) {
        msg = msgs[i];
        if (msg.ts > ts) {
          if (!TS.utility.msgs.isMsgHidden(msg) && !TS.utility.msgs.isMsgRolledUp(msg)) {
            return msg;
          }
        }
      }
      return null;
    },
    getDisplayedMsgBeforeTS: function(ts, msgs) {
      var msg;
      for (var i = 0; i < msgs.length; i += 1) {
        msg = msgs[i];
        if (msg.ts < ts) {
          if (!TS.utility.msgs.isMsgHidden(msg) && !TS.utility.msgs.isMsgRolledUp(msg)) {
            return msg;
          }
        }
      }
      return null;
    },
    getUnreadCountableMsgAfterTS: function(ts, msgs) {
      var msg;
      for (var i = msgs.length - 1; i > -1; i -= 1) {
        msg = msgs[i];
        if (msg.ts > ts) {
          if (TS.utility.msgs.msgCanCountAsUnread(msg)) {
            return msg;
          }
        }
      }
      return null;
    },
    getMarkMsgTSForUnreadPoint: function(id, msgs, model_ob) {
      var mark_msg_ts;
      var prev_msg;
      if (model_ob.oldest_msg_ts && id == model_ob.oldest_msg_ts) {
        mark_msg_ts = "0000000000.000000";
      } else {
        prev_msg = TS.utility.msgs.getPrevDisplayedMsg(id, msgs) || TS.utility.msgs.getMsg(id, msgs);
        if (prev_msg) mark_msg_ts = prev_msg.ts;
      }
      if (!mark_msg_ts) return null;
      while (mark_msg_ts && !TS.utility.msgs.getUnreadCountableMsgAfterTS(mark_msg_ts, msgs)) {
        prev_msg = TS.utility.msgs.getPrevDisplayedMsg(mark_msg_ts, msgs);
        if (prev_msg) {
          mark_msg_ts = prev_msg.ts;
        } else {
          mark_msg_ts = null;
        }
      }
      if (!mark_msg_ts) return null;
      return mark_msg_ts;
    },
    getMsg: function(id, msgs) {
      if (!msgs) return null;
      return TS.utility.msgs.getMsgByProp("ts", id, msgs);
    },
    getMsgByRspId: function(rsp_id, msgs) {
      if (!msgs) return null;
      return TS.utility.msgs.getMsgByProp("rsp_id", rsp_id, msgs);
    },
    canEditMsg: function(msg, model_ob) {
      if (msg.user !== TS.model.user.id) return false;
      if (TS.utility.msgs.isAutomatedMsg(msg)) return false;
      if (TS.utility.msgs.isFileMsg(msg)) return false;
      if (msg && msg.subtype === "reply_broadcast") return false;
      if (msg && msg.subtype === "tombstone") return false;
      if (model_ob && model_ob.is_self_im) return true;
      if (TS.model.team.prefs.msg_edit_window_mins > -1 && (Date.now() - TS.utility.date.toDateObject(msg.ts)) / 6e4 > TS.model.team.prefs.msg_edit_window_mins) {
        return false;
      }
      return true;
    },
    isAutomatedMsg: function(msg) {
      if (!msg) return false;
      return TS.utility.msgs.automated_subtypes.indexOf(msg.subtype) >= 0;
    },
    isFileMsg: function(msg) {
      return msg && TS.utility.msgs.file_subtypes.indexOf(msg.subtype) >= 0;
    },
    getMsgActions: function(msg, model_ob) {
      if (!msg) return;
      model_ob = model_ob || TS.shared.getActiveModelOb();
      var actions = {
        edit_msg: TS.utility.msgs.canEditMsg(msg, model_ob),
        delete_msg: true
      };
      var msg_belongs_to_user = false;
      if (msg.user == TS.model.user.id) msg_belongs_to_user = true;
      var msg_from_other_team = TS.utility.teams.isMsgFromOtherTeam(msg);
      if (msg.file && msg.file.mode === "email") {
        actions.open_original = true;
      }
      if (!TS.model.team.prefs.allow_message_deletion) {
        if (msg_from_other_team) {
          actions.delete_msg = false;
        } else if (!TS.model.user.is_admin) {
          actions.delete_msg = false;
        } else if (TS.model.active_im_id) {
          if (!msg_belongs_to_user && msg.user !== "USLACKBOT" && msg.subtype !== "bot_message") {
            actions.delete_msg = false;
          }
        }
      } else if (msg.subtype === "tombstone") {
        actions.delete_msg = false;
      } else if (msg.subtype === "retention") {
        actions.delete_msg = false;
      } else if (msg_from_other_team) {
        if (TS.boot_data.page_needs_enterprise && msg_belongs_to_user) {
          actions.delete_msg = true;
        } else {
          actions.delete_msg = false;
        }
      } else if (TS.model.active_im_id) {
        if (!msg_belongs_to_user && msg.user !== "USLACKBOT" && msg.subtype !== "bot_message") {
          actions.delete_msg = false;
        }
      } else if (!msg_belongs_to_user) {
        if (!TS.model.user.is_admin) {
          actions.delete_msg = false;
        }
      } else if (TS.utility.msgs.isAutomatedMsg(msg)) {
        var deletion_exceptions = ["pinned_item", "sh_room_created", "sh_room_shared", "reply_broadcast"];
        if (!TS.model.user.is_admin && !_.includes(deletion_exceptions, msg.subtype)) {
          actions.delete_msg = false;
        }
      }
      if (TS.boot_data.feature_new_broadcast) {
        if (msg.subtype === "thread_broadcast") {
          actions.remove_broadcast = actions.delete_msg;
        }
      }
      if (msg.is_ephemeral) {
        actions.delete_msg = true;
      } else {
        if (TS.client && msg.subtype !== "pinned_item" && msg.subtype !== "unpinned_item" && msg.subtype !== "sh_room_created" && msg.subtype !== "sh_room_shared") {
          if (TS.pins.canUserPinHere(model_ob)) {
            if (TS.pins.isMessagePinned(msg, model_ob)) {
              actions.unpin_msg = true;
            } else {
              actions.pin_msg = true;
            }
          }
          if (msg.subtype === "tombstone") {
            actions.unpin_msg = false;
            actions.pin_msg = false;
          }
        }
        if (msg.subtype === "file_comment") {
          actions.add_file_comment_rxn = true;
        } else if (TS.utility.msgs.isFileMsg(msg)) {
          actions.add_file_rxn = true;
        } else if (msg.subtype === "tombstone") {
          actions.add_rxn = false;
        } else {
          var handy_rxns_dd = TS.rxns.getHandyRxnsDisplayDataByRxnKey(msg._rxn_key);
          actions.add_rxn = !handy_rxns_dd.restrict;
        }
        if (TS.clipboard.canWriteText()) {
          actions.copy_link = true;
          if (msg.subtype === "tombstone") {
            actions.copy_link = false;
          }
        }
      }
      if (TS.client) actions.mark_unread = true;
      var is_root = !msg.thread_ts || msg.thread_ts == msg.ts;
      actions.jump_to_original = true;
      if (TS.replies.canReplyToMsg(model_ob, msg)) {
        actions.reply = true;
      }
      actions.jump_to_original = is_root;
      if (actions.mark_unread && !is_root) actions.mark_unread = false;
      var allowed_subtypes = ["bot_message", "file_share", "file_mention", "file_comment", "me_message", "reply_broadcast", "thread_broadcast"];
      if (!msg.is_ephemeral && (!msg.subtype || allowed_subtypes.indexOf(msg.subtype) !== -1)) {
        actions.remind_me = true;
      }
      if (actions.jump_to_original || actions.copy_link || actions.mark_unread || actions.remind_me) {
        actions.has_private_actions = true;
      }
      if (actions.copy_link || actions.add_rxn || actions.add_file_rxn || actions.add_file_comment_rxn || actions.pin_msg || actions.unpin_msg) {
        actions.has_public_actions = true;
      }
      if (!msg.is_ephemeral && !TS.utility.msgs.isTempMsg(msg)) {
        if (msg.subtype === "file_share" || msg.subtype === "file_mention") {
          actions.share_file = true;
        } else if (msg.subtype === "tombstone") {
          actions.share_message = false;
        } else {
          actions.share_message = !TS.ims.isImWithDeletedMember(model_ob) && (!model_ob.is_archived || model_ob.is_channel);
        }
      }
      return actions;
    },
    validateMsg: function(id, msg, msgs) {
      if (!msg.ts) {
        TS.error("msg lacks a ts (" + id + ")");
        TS.dir(0, msg);
        return false;
      }
      if (TS.utility.msgs.getMsg(msg.ts, msgs)) {
        TS.warn("msg " + msg.ts + " already exists! (" + id + ")");
        TS.dir(0, msg);
        return false;
      }
      return true;
    },
    findMsg: function(ts, c_id) {
      var model_ob = TS.shared.getModelObById(c_id);
      if (model_ob) {
        var msg = model_ob.msgs && TS.utility.msgs.getMsg(ts, model_ob.msgs);
        if (msg) return msg;
        msg = model_ob._archive_msgs && TS.utility.msgs.getMsg(ts, model_ob._archive_msgs);
        if (msg) return msg;
        if (TS.ui.replies) {
          msg = TS.ui.replies.getActiveMessage(model_ob, ts);
          if (msg) return msg;
        }
        if (TS.client) {
          msg = TS.client.threads.getMessage(model_ob, ts);
          if (msg) return msg;
        }
        if (!msg && TS.model.unread_view_is_showing && TS.client) {
          msg = TS.client.unread.getMessage(model_ob, ts);
          if (msg) return msg;
        }
      }
      var mention = TS.mentions.getMentionByMsgId(ts);
      if (mention) return mention.message;
      return null;
    },
    replaceMsg: function(model_ob, new_msg, might_not_exist, force_update) {
      var original_msg = TS.utility.msgs.getMsg(new_msg.ts, model_ob.msgs);
      if (!original_msg && model_ob._archive_msgs) {
        original_msg = TS.utility.msgs.getMsg(new_msg.ts, model_ob._archive_msgs);
      }
      if (!original_msg && TS.ui.replies) {
        original_msg = TS.ui.replies.getActiveMessage(model_ob, new_msg.ts);
      }
      if (!original_msg && TS.client) {
        original_msg = TS.client.threads.getMessage(model_ob, new_msg.ts);
      }
      if (!original_msg && TS.client) {
        original_msg = TS.client.unread.getMessage(model_ob, new_msg.ts);
      }
      if (!original_msg) {
        if (!might_not_exist) TS.error("unknown msg:" + new_msg.ts + " in " + model_ob.id);
        return;
      }
      new_msg._rxn_key = original_msg._rxn_key;
      if (!new_msg.pinned_to) {
        new_msg.pinned_to = original_msg.pinned_to;
      }
      if (!("is_starred" in new_msg)) {
        new_msg.is_starred = original_msg.is_starred;
      }
      if (TS.boot_data.feature_sli_recaps && !new_msg.recap && original_msg.recap) {
        new_msg.recap = original_msg.recap;
      }
      var comment = null;
      if (new_msg.comment && new_msg.file) {
        var file = TS.files.getFileById(new_msg.file.id);
        if (file) {
          TS.files.editCommentOnFile(new_msg.comment, file);
          comment = TS.files.getFileCommentById(file, new_msg.comment.id);
        }
      }
      new_msg = TS.utility.msgs.processImsg(new_msg, model_ob.id);
      if (comment) new_msg.comment = comment;
      var changed_keys = _.union(Object.keys(new_msg), Object.keys(original_msg)).filter(function(key) {
        return new_msg[key] != original_msg[key];
      });
      if (!changed_keys.length && !force_update) {
        TS.info("Not signalling message change because it doesn't look like anything has changed for " + new_msg.ts + " in " + model_ob.id);
        return;
      }
      if (new_msg._handy_rxns_poll_data) {
        TS.rxns.clearHandyRxnsDisplayDataCache();
      }
      _.each(_.keys(original_msg), function(k) {
        delete original_msg[k];
      });
      _.forOwn(new_msg, function(val, k) {
        original_msg[k] = val;
      });
      if (model_ob.is_channel) {
        TS.channels.message_changed_sig.dispatch(model_ob, original_msg, changed_keys);
      } else if (model_ob.is_im) {
        TS.ims.message_changed_sig.dispatch(model_ob, original_msg, changed_keys);
      } else if (model_ob.is_group && model_ob.is_mpim) {
        TS.mpims.message_changed_sig.dispatch(model_ob, original_msg, changed_keys);
      } else if (model_ob.is_group && !model_ob.is_mpim) {
        TS.groups.message_changed_sig.dispatch(model_ob, original_msg, changed_keys);
      }
      if (TS.boot_data.feature_new_broadcast && _.includes(changed_keys, "_hidden_reply")) {
        var and_mark = !TS.utility.msgs.isTempMsg(original_msg);
        if (model_ob.is_channel) {
          TS.channels.calcUnreadCnts(model_ob, and_mark);
        } else if (model_ob.is_im) {
          TS.ims.calcUnreadCnts(model_ob, and_mark);
        } else if (model_ob.is_group && model_ob.is_mpim) {
          TS.mpims.calcUnreadCnts(model_ob, and_mark);
        } else if (model_ob.is_group && !model_ob.is_mpim) {
          TS.groups.calcUnreadCnts(model_ob, and_mark);
        }
      }
      if (TS.boot_data.feature_new_broadcast && TS.utility.msgs.msgHasReplies(original_msg)) {
        TS.replies.updateThreadBroadcastRoots(model_ob, original_msg);
      }
    },
    removeEphemeralMsg: function(c_id, ephemeral_msg_ts) {
      var model_ob = TS.groups.getGroupById(c_id) || TS.channels.getChannelById(c_id);
      if (!model_ob) return;
      if (model_ob.is_channel) {
        TS.channels.removeMsg(c_id, TS.utility.msgs.getMsg(ephemeral_msg_ts, model_ob.msgs));
      } else if (model_ob.is_mpim) {
        TS.mpims.removeMsg(c_id, TS.utility.msgs.getMsg(ephemeral_msg_ts, model_ob.msgs));
      } else if (model_ob.is_group) {
        TS.groups.removeMsg(c_id, TS.utility.msgs.getMsg(ephemeral_msg_ts, model_ob.msgs));
      }
    },
    getMemberFromMemberMarkup: function(match) {
      var id = TS.utility.msgs.getMemberIdFromMemberMarkup(match);
      var m = TS.members.getMemberById(id);
      if (!m) m = TS.members.getMemberByName(id);
      return m;
    },
    getMemberIdFromMemberMarkup: function(match) {
      var id = match.substr(1);
      if (id) id = id.split("|")[0];
      return id;
    },
    makeSureMsgObIsValid: function(ob) {
      return ob;
    },
    api_url_prefix: "api::",
    doApiUrl: function(url) {
      if (!TS.client) {
        alert(TS.i18n.t("This link will not work in the archives.", "msgs")());
        return;
      }
      url = url.replace(TS.utility.msgs.api_url_prefix, "");
      var A = url.split("?");
      var method = A[0];
      var args = {};
      if (A.length > 1) {
        var pairs = A[1].split("&");
        for (var i = 0; i < pairs.length; i += 1) {
          var p = pairs[i].indexOf("=");
          if (p != -1) {
            var name = pairs[i].substring(0, p);
            var value = pairs[i].substring(p + 1);
            args[name] = unescape(value);
          }
        }
      }
      TS.api.call(method, args);
    },
    new_api_url_prefix: "slack-action://",
    doNewApiUrl: function(url) {
      if (!TS.client) {
        alert(TS.i18n.t("This link will not work in the archives.", "msgs")());
        return;
      }
      var parts = url.replace(TS.utility.msgs.new_api_url_prefix, "").split("/");
      var bot = parts.shift();
      var payload = parts.join("/");
      TS.api.call("chat.action", {
        bot: bot,
        payload: decodeURIComponent(payload)
      });
    },
    getHighlightWordsRegex: function() {
      if (!TS.model.highlight_words_regex) {
        TS.utility.msgs.makeHighlightWordsRegex();
      }
      return TS.model.highlight_words_regex;
    },
    makeHighlightWordsRegex: function() {
      var word;
      var words = [];
      for (var i = 0; i < TS.model.highlight_words.length; i += 1) {
        word = TS.format.swapOutAts(TS.model.highlight_words[i]);
        word = TS.utility.regexpEscape(word);
        if (word === "don") word += "(?!['’]t)";
        words.push(word);
      }
      TS.model.highlight_words_regex = new RegExp("(\\b|_|\\s|^)(" + words.join("|") + ")(\\b|_|\\s|$)", "i");
    },
    msgContainsMention: function(msg, ignore_at_here_mentions, ignore_highlight_words) {
      var highlight_rx = TS.utility.msgs.getHighlightWordsRegex();
      var dont_check_highlight_words = msg.subtype === "bot_message";
      var is_reply = TS.utility.msgs.isMsgReply(msg);

      function check(txt) {
        if (!txt) return false;
        if (TS.model.you_regex.test(txt)) return true;
        if (TS.model.here_regex.test(txt) && !ignore_at_here_mentions) return true;
        if (TS.model.everyone_regex.test(txt) && !is_reply) return true;
        if (TS.model.channel_regex.test(txt) && !is_reply) return true;
        if (TS.model.group_regex.test(txt) && !is_reply) return true;
        for (var k in TS.model.your_user_group_regex) {
          if (TS.model.your_user_group_regex[k].test(txt)) {
            return true;
          }
        }
        if (dont_check_highlight_words) return false;
        txt = txt.replace(/<!subteam\^(\w+\d+)\|@(.+)>/g, "");
        txt = TS.format.swapOutAts(txt);
        if (highlight_rx.test(txt) && !ignore_highlight_words) return true;
        return false;
      }
      if (msg.subtype === "pinned_item") return false;
      if (!msg.ignore_if_attachments_supported && check(msg.text)) return true;
      var attachment;
      var field;
      if (msg.attachments) {
        for (var i = 0; i < msg.attachments.length; i += 1) {
          attachment = msg.attachments[i];
          if (attachment.from_url) continue;
          if (check(attachment.title)) return true;
          if (check(attachment.pretext)) return true;
          if (check(attachment.text)) return true;
          if (check(attachment.footer)) return true;
          if (!attachment.fields || !attachment.fields.length) continue;
          for (var m = 0; m < attachment.fields.length; m += 1) {
            field = attachment.fields[m];
            if (check(field.value)) return true;
          }
        }
      }
      return false;
    },
    getMsgMentionData: function(msg, ignore_highlight_words) {
      var ret = {
        mentions: false,
        non_channel_mentions: false
      };
      var highlight_rx = TS.utility.msgs.getHighlightWordsRegex();
      var dont_check_highlight_words = msg.subtype === "bot_message";
      var is_reply = TS.utility.msgs.isMsgReply(msg);

      function check(txt) {
        if (checkNonChannelMentions(txt)) {
          ret.non_channel_mentions = true;
          ret.mentions = true;
          return true;
        }
        if (checkChannelMentions(txt)) {
          ret.mentions = true;
        }
        return false;
      }

      function checkNonChannelMentions(txt) {
        if (!txt) return false;
        if (TS.model.you_regex.test(txt)) return true;
        if (dont_check_highlight_words) return false;
        txt = TS.format.swapOutAts(txt);
        if (highlight_rx.test(txt) && !ignore_highlight_words) return true;
        return false;
      }

      function checkChannelMentions(txt) {
        if (!txt) return false;
        if (TS.model.everyone_regex.test(txt) && !is_reply) return true;
        if (TS.model.channel_regex.test(txt) && !is_reply) return true;
        if (TS.model.group_regex.test(txt) && !is_reply) return true;
        return false;
      }
      if (!msg.ignore_if_attachments_supported && check(msg.text)) return ret;
      var attachment;
      var field;
      if (msg.attachments) {
        for (var i = 0; i < msg.attachments.length; i += 1) {
          attachment = msg.attachments[i];
          if (attachment.from_url) continue;
          if (check(attachment.title)) return ret;
          if (check(attachment.pretext)) return ret;
          if (check(attachment.text)) return ret;
          if (check(attachment.footer)) return ret;
          if (!attachment.fields || !attachment.fields.length) continue;
          for (var m = 0; m < attachment.fields.length; m += 1) {
            field = attachment.fields[m];
            if (check(field.value)) return ret;
          }
        }
      }
      return ret;
    },
    msgCanCountAsUnread: function(msg) {
      if (TS.utility.msgs.isMsgHidden(msg)) return false;
      if (msg.subtype === "channel_join" && msg.inviter && msg.user == TS.model.user.id) return true;
      if (msg.subtype === "group_join" && msg.inviter && msg.user == TS.model.user.id) return true;
      if (msg.user == TS.model.user.id) return false;
      if (msg.subtype === "channel_join") return false;
      if (msg.subtype === "channel_leave") return false;
      if (msg.subtype === "group_join") return false;
      if (msg.subtype === "group_leave") return false;
      if (msg.subtype === "mpim_notify_disabled") return false;
      if (msg.comment && msg.comment.user == TS.model.user.id) return false;
      if (msg.dnd_suppressed) return false;
      return true;
    },
    countAllUnreads: function() {
      if (_is_in_bulk_unread_calc_mode) return;
      TS.model.all_unread_highlights_cnt = 0;
      TS.model.all_unread_cnt = 0;
      TS.model.all_unread_cnt_to_exclude = 0;
      TS.model.all_unread_highlights_cnt_to_exclude = 0;
      var unread;
      var highlight;
      var channels = TS.channels.getChannelsForUser();
      channels.forEach(function(channel) {
        if (channel.is_archived && !channel.was_archived_this_session || TS.notifs.isCorGMuted(channel.id)) return;
        unread = parseInt(channel.unread_cnt, 10) || 0;
        highlight = parseInt(channel.unread_highlight_cnt, 10) || 0;
        TS.model.all_unread_cnt += unread;
        TS.model.all_unread_highlights_cnt += highlight;
        TS.utility.msgs.maybeExcludeUnreads(channel, unread, highlight);
      });
      TS.model.groups.forEach(function(group) {
        if (group.is_archived && !group.was_archived_this_session || TS.notifs.isCorGMuted(group.id)) return;
        unread = parseInt(group.unread_cnt, 10) || 0;
        highlight = parseInt(group.unread_highlight_cnt, 10) || 0;
        TS.model.all_unread_cnt += unread;
        TS.model.all_unread_highlights_cnt += highlight;
        TS.utility.msgs.maybeExcludeUnreads(group, unread, highlight);
      });
      TS.model.ims.forEach(function(im) {
        unread = parseInt(im.unread_cnt, 10) || 0;
        highlight = parseInt(im.unread_cnt, 10) || 0;
        TS.model.all_unread_cnt += unread;
        TS.model.all_unread_highlights_cnt += highlight;
        TS.utility.msgs.maybeExcludeUnreads(im, unread, highlight);
      });
      TS.model.mpims.forEach(function(mpim) {
        unread = parseInt(mpim.unread_cnt, 10) || 0;
        highlight = parseInt(mpim.unread_cnt, 10) || 0;
        TS.model.all_unread_cnt += unread;
        TS.model.all_unread_highlights_cnt += highlight;
        TS.utility.msgs.maybeExcludeUnreads(mpim, unread, highlight);
      });
      if (TS.model.threads_has_unreads) TS.model.all_unread_cnt += 1;
      if (TS.model.threads_mention_count) TS.model.all_unread_highlights_cnt += TS.model.threads_mention_count;
    },
    maybeExcludeUnreads: function(model_ob, unread_cnt, highlight_cnt) {
      if (!model_ob) return;
      if (!unread_cnt && !highlight_cnt) return;
      if (!TS.shared.isModelObOrgShared(model_ob)) return;
      if (!TS.shared.isRelevantTeamForSharedModelOb(model_ob)) {
        if (TS.pri) TS.log(67, "Excluding unread of " + unread_cnt + " and highlight of " + highlight_cnt + " for shared channel " + model_ob.id + " because this is NOT the relevant team.");
        TS.model.all_unread_cnt_to_exclude += unread_cnt;
        TS.model.all_unread_highlights_cnt_to_exclude += highlight_cnt;
      } else if (TS.pri) {
        TS.log(67, "Using unread of " + unread_cnt + " and highlight of " + highlight_cnt + " for shared channel " + model_ob.id + " because this IS the relevant team.");
      }
    },
    doesMsgHaveRxnFromUser: function(msg, name) {
      return TS.rxns.doesRxnsHaveRxnFromUser(TS.rxns.getExistingRxnsByKey(msg._rxn_key), name);
    },
    doesMsgHaveRxn: function(msg, name) {
      return TS.rxns.doesRxnsHaveRxn(TS.rxns.getExistingRxnsByKey(msg._rxn_key), name);
    },
    recordEmojiInHash: function(str, hash) {
      if (!str) return false;
      if (!hash) return false;
      var unique = true;
      var A = TS.utility.findAllTeamEmojiInStr(str, unique);
      if (!A.length) return false;
      var added = false;
      var name;
      for (var i = 0; i < A.length; i += 1) {
        name = TS.emoji.isValidName(A[i]);
        if (!name) {
          TS.error(A[i] + " invalid");
          continue;
        }
        if (!parseInt(hash[name], 10)) {
          hash[name] = 0;
        }
        hash[name] += 1;
        added = true;
      }
      return added;
    },
    reCalcAndCountSomeUnreads: function(c_ids) {
      if (!c_ids || !c_ids.length) return;
      var i;
      var controller;
      var model_ob;
      for (i = 0; i < c_ids.length; i += 1) {
        model_ob = TS.shared.getModelObById(c_ids[i]);
        if (!model_ob) {
          TS.warn("reCalcAndCountSomeUnreads: WTF no model_ob for id " + c_ids[i]);
          continue;
        }
        controller = TS.shared.getControllerForModelOb(model_ob);
        if (!controller) {
          TS.warn("reCalcAndCountSomeUnreads: WTF no controller for model_ob.id " + model_ob.id);
          continue;
        }
        if (!controller.calcUnreadCnts) {
          TS.warn("reCalcAndCountSomeUnreads: WTF no calcUnreadCnts on controller for model_ob.id " + model_ob.id);
          continue;
        }
        controller.calcUnreadCnts(model_ob);
      }
    },
    reCalcAndCountAllUnreads: function() {
      var channels = TS.channels.getChannelsForUser();
      var defer_api_check = true;
      TS.utility.msgs.startBatchUnreadCalc();
      channels.forEach(function(channel) {
        if (channel.is_archived && !channel.was_archived_this_session) return;
        if (defer_api_check && channel._did_defer_initial_msg_history) delete channel._did_defer_initial_msg_history;
        TS.channels.calcUnreadCnts(channel);
      });
      TS.model.groups.forEach(function(group) {
        if (group.is_archived && !group.was_archived_this_session) return;
        if (defer_api_check && group._did_defer_initial_msg_history) delete group._did_defer_initial_msg_history;
        TS.groups.calcUnreadCnts(group);
      });
      TS.model.ims.forEach(function(im) {
        if (defer_api_check && im._did_defer_initial_msg_history) delete im._did_defer_initial_msg_history;
        TS.ims.calcUnreadCnts(im);
      });
      TS.model.mpims.forEach(function(mpim) {
        if (defer_api_check && mpim._did_defer_initial_msg_history) delete mpim._did_defer_initial_msg_history;
        TS.mpims.calcUnreadCnts(mpim);
      });
      TS.utility.msgs.finishBatchUnreadCalc();
    },
    startBatchUnreadCalc: function() {
      if (TS.qs_args.unread_batch == "0") return;
      _is_in_bulk_unread_calc_mode = true;
    },
    finishBatchUnreadCalc: function() {
      _is_in_bulk_unread_calc_mode = false;
      TS.utility.msgs.countAllUnreads();
    },
    whatisunread: function() {
      var A = [];
      TS.channels.getChannelsFilteredBy("unread_cnt").forEach(function(channel) {
        A.push("C:" + channel.name + " " + channel.unread_cnt);
      });
      TS.groups.getGroupsFilteredBy("unread_cnt").forEach(function(group) {
        A.push("G:" + group.name + " " + group.unread_cnt);
      });
      TS.ims.getImsFilteredBy("unread_cnt").forEach(function(im) {
        A.push("D:" + im.name + " " + im.unread_cnt);
      });
      TS.mpims.getMpimsFilteredBy("unread_cnt").forEach(function(mpim) {
        A.push("G:" + mpim.name + " " + mpim.unread_cnt);
      });
      TS.info("unreads: " + A.join(","));
    },
    maybeSetOldestMsgsTsAfterMsgAdded: function(model_ob) {
      if (model_ob.oldest_msg_ts) return;
      if (model_ob.latest) return;
      TS.utility.msgs.setOldestMsgsTs(model_ob);
    },
    setOldestMsgsTs: function(model_ob) {
      var oldest_valid_ts = TS.utility.msgs.getOldestValidTs(model_ob);
      if (oldest_valid_ts) {
        if (TS.pri) TS.console.log(58, "setOldestMsgsTs (" + model_ob.id + '): setting oldest_msg_ts from "' + model_ob.oldest_msg_ts + '" -> ' + oldest_valid_ts);
        model_ob.oldest_msg_ts = oldest_valid_ts;
        TS.storage.storeOldestTs(model_ob.id, model_ob.oldest_msg_ts);
        if (model_ob._latest_via_users_counts) delete model_ob._latest_via_users_counts;
      }
    },
    resetOldestMsgsTs: function(model_ob) {
      if (TS.pri) TS.console.log(58, "resetOldestMsgsTs (" + model_ob.id + '): setting oldest_msg_ts from "' + model_ob.oldest_msg_ts + '" -> null');
      model_ob.oldest_msg_ts = null;
      TS.storage.storeOldestTs(model_ob.id, null);
    },
    getOlderMsgsStatus: function(model_ob) {
      var msgs = model_ob.msgs;
      var oldest_msg_ts = model_ob.oldest_msg_ts;
      var latest_msg_ts = TS.shared.getLatestMsgTs(model_ob) || null;
      var have_oldest_msg = false;
      var text = "ERROR";
      var can_fetch_more = false;
      var code = 0;
      if (oldest_msg_ts && TS.utility.msgs.getMsg(oldest_msg_ts, msgs)) {
        have_oldest_msg = true;
      }
      if (!latest_msg_ts) {
        if (msgs.length) {
          can_fetch_more = false;
          code = 1;
          text = "There are NOT older messages than these.";
        } else {
          can_fetch_more = false;
          code = 2;
          text = "THIS IS A BRAND NEW CHANNEL SAY SOMETHING";
        }
      } else if (have_oldest_msg || model_ob.is_limited) {
        can_fetch_more = false;
        code = 3;
        text = "We have the oldest msg: " + oldest_msg_ts + ". is_limited:" + model_ob.is_limited;
      } else {
        can_fetch_more = true;
        code = 4;
        if (oldest_msg_ts) {
          text = "There are older messages than these. oldest_msg_ts: " + oldest_msg_ts;
        } else {
          text = "There are older messages than these. oldest_msg_ts: unknown";
        }
      }
      return {
        text: text,
        more: can_fetch_more,
        code: code,
        is_limited: model_ob.is_limited
      };
    },
    getMostRecentValidTs: function(model_ob) {
      if (!model_ob) return null;
      var msg;
      var msgs = model_ob.msgs || [];
      for (var i = 0; i < msgs.length; i += 1) {
        msg = msgs[i];
        if (!TS.utility.msgs.isTempMsg(msg)) {
          if (TS.pri && i > 0) TS.console.log(58, "getMostRecentValidTs (" + model_ob.id + "): " + msg.ts + " at msgs[" + i + "] of " + msgs.length);
          return msg.ts;
        }
      }
      var result = TS.shared.getLatestMsgTs(model_ob) || null;
      if (TS.pri) TS.console.log(58, "getMostRecentValidTs (" + model_ob.id + "): did not find most recent valid ts. getLatestMsgTs() returned " + result);
      return result;
    },
    getOldestValidTs: function(model_ob) {
      var msg;
      if (!model_ob || !model_ob.msgs) return null;
      var count = model_ob.msgs.length - 1;
      for (var i = count; i > -1; i -= 1) {
        msg = model_ob.msgs[i];
        if (!TS.utility.msgs.isTempMsg(msg)) {
          if (TS.pri && i !== count) TS.console.log(58, "getOldestValidTs(" + model_ob.id + "): " + msg.ts + " at msgs[" + i + "] of " + count);
          return msg.ts;
        }
      }
      if (TS.pri) TS.console.warn(58, "getOldestValidTs(" + model_ob.id + "): none found. msgs.length = " + count);
      return null;
    },
    getHistoryFetchJobKey: function(latest, oldest) {
      var key = latest;
      if (oldest) {
        key += "_" + oldest;
      }
      return key;
    },
    processImsg: function(imsg, c_id) {
      TS.utility.msgs._slurpExtraData(imsg, c_id);
      return TS.utility.msgs._makeInternalMsgObject(imsg, c_id);
    },
    processImsgFromHistory: function(imsg, c_id) {
      var msg = TS.utility.msgs.processImsg(imsg, c_id);
      imsg.channel = c_id;
      if (imsg.subtype === "message_deleted") {
        TS.ms.msg_handlers.subtype__message_deleted(imsg);
      } else if (imsg.subtype === "message_changed") {
        TS.ms.msg_handlers.subtype__message_changed(imsg);
      }
      return msg;
    },
    _makeInternalMsgObject: function(imsg, c_id) {
      var new_msg = {
        type: "message",
        ts: imsg.ts
      };
      if (imsg.source_team) {
        new_msg.source_team_id = imsg.source_team;
      }
      if (imsg.user === "USLACKBOT" && imsg.slackbot_feels) {
        new_msg.slackbot_feels = imsg.slackbot_feels;
      }
      if (imsg.thread_ts) {
        new_msg.thread_ts = imsg.thread_ts;
        if (imsg.parent_ts) new_msg.parent_ts = imsg.parent_ts;
        if (imsg.parent_user_id) new_msg.parent_user_id = imsg.parent_user_id;
        if (imsg.hasOwnProperty("reply_count")) {
          new_msg.reply_count = parseInt(imsg.reply_count, 10);
        }
        if (TS.boot_data.feature_new_broadcast) {
          if (imsg.thread_ts !== imsg.ts && imsg.subtype !== "thread_broadcast") {
            new_msg._hidden_reply = true;
          }
          if (imsg.subtype === "thread_broadcast" && imsg.root) new_msg.root = imsg.root;
        } else if (imsg.thread_ts !== imsg.ts) {
          new_msg._hidden_reply = true;
        }
      }
      if (imsg.subtype === "reply_broadcast") {
        if (imsg.broadcast_thread_ts) new_msg.broadcast_thread_ts = imsg.broadcast_thread_ts;
        if (imsg.channel) new_msg.channel_id = imsg.channel;
        if (TS.boot_data.feature_new_broadcast) {
          if (imsg.new_broadcast) new_msg.no_display = true;
        }
      }
      if (imsg.replies) new_msg.replies = imsg.replies;
      if (imsg.hasOwnProperty("subscribed")) new_msg._subscribed = imsg.subscribed;
      if (imsg.hasOwnProperty("unread_count")) new_msg._unread_count = imsg.unread_count;
      if (imsg.last_read) new_msg._last_read = imsg.last_read;
      if (imsg.subtype === "tombstone" && imsg.hidden && imsg.replies && imsg.replies.length > 0) delete imsg.hidden;
      if (imsg.type === "channel_topic" || imsg.type === "channel_purpose" || imsg.type === "channel_join" || imsg.type === "channel_leave") {
        imsg.subtype = imsg.type;
      }
      if (TS.utility.msgs.shouldHideChannelJoinOrLeaveMsg(imsg, c_id)) {
        new_msg.no_display = true;
      }
      if (imsg.subtype === "group_join" || imsg.subtype === "group_purpose" || imsg.subtype === "group_topic") {
        var model_ob = TS.shared.getModelObById(c_id);
        if (model_ob && model_ob.is_mpim) {
          new_msg.no_display = true;
        }
      }
      if (imsg.inviter) {
        new_msg.inviter = imsg.inviter;
      }
      if (imsg.hidden) {
        new_msg.hidden = imsg.hidden;
      }
      if (imsg.no_notifications) {
        new_msg.no_notifications = imsg.no_notifications;
      }
      if (imsg.ignore_if_attachments_supported) {
        new_msg.ignore_if_attachments_supported = imsg.ignore_if_attachments_supported;
      }
      if (imsg.hidden || imsg.no_display) {
        new_msg.no_display = true;
      }
      if (imsg.ignore_if_attachments_supported && (!imsg.attachments || !imsg.attachments.length)) {
        new_msg.no_display = true;
      }
      if (imsg.edited) {
        new_msg.edited = imsg.edited;
      }
      if (imsg.user) {
        new_msg.user = imsg.user;
      }
      if (imsg.attachments) {
        new_msg.attachments = imsg.attachments;
      }
      if (imsg.img_vids) {
        new_msg.img_vids = imsg.img_vids;
      }
      if (imsg.bot_profile) {
        new_msg.bot_profile = imsg.bot_profile;
      }
      var url;
      if (imsg.imgs) {
        new_msg.img_vids = new_msg.img_vids || {};
        var img;
        for (url in imsg.imgs) {
          if (new_msg.img_vids[url]) continue;
          img = imsg.imgs[url];
          img.img_vid_type = "img";
          new_msg.img_vids[url] = img;
        }
      }
      if (imsg.videos) {
        new_msg.img_vids = new_msg.img_vids || {};
        var video;
        for (url in imsg.videos) {
          if (new_msg.img_vids[url]) continue;
          video = imsg.videos[url];
          video.img_vid_type = "video";
          new_msg.img_vids[url] = video;
        }
      }
      if (imsg.icons) {
        new_msg.icons = imsg.icons;
      }
      if (imsg.bot_id) {
        new_msg.bot_id = imsg.bot_id;
      }
      if (imsg.is_ephemeral) {
        new_msg.is_ephemeral = imsg.is_ephemeral;
      }
      if (imsg._alert_even_though_temp) {
        new_msg._alert_even_though_temp = imsg._alert_even_though_temp;
      }
      if (imsg.is_starred) {
        new_msg.is_starred = imsg.is_starred;
      }
      if (imsg.reactions) {
        delete imsg.reactions;
      }
      if (imsg._rxn_key) {
        new_msg._rxn_key = imsg._rxn_key;
      }
      if (imsg.pinned_to) {
        new_msg.pinned_to = imsg.pinned_to;
      }
      if (imsg.topic) {
        new_msg.topic = imsg.topic;
      }
      if (imsg.name) {
        new_msg.name = imsg.name;
      }
      if (imsg.old_name) {
        new_msg.old_name = imsg.old_name;
      }
      if (imsg.purpose) {
        new_msg.purpose = imsg.purpose;
      }
      if (imsg.text) {
        if (_.isString(imsg.text)) {
          new_msg.text = imsg.text;
        } else {
          TS.error("ERROR: invalid imsg.text type: " + typeof imsg.text + " " + TS.utility.stringifyJSONOrElse(imsg.text, null, 2, "(and it is not JSON.stringifiable)"));
        }
      }
      if (imsg.sound) {
        new_msg.sound = imsg.sound;
      }
      if ("mrkdwn" in imsg) {
        new_msg.mrkdwn = !!imsg.mrkdwn;
      }
      if ("hex_swatches" in imsg) {
        new_msg.hex_swatches = !!imsg.hex_swatches;
      }
      if (imsg.dnd_suppressed) {
        new_msg.dnd_suppressed = imsg.dnd_suppressed;
      }
      if (imsg.recap) {
        new_msg.recap = imsg.recap;
      }
      TS.ui.handy_rxns.decorateMsg(new_msg, imsg.text);
      if (imsg.subtype) {
        new_msg.subtype = imsg.subtype;
        if (new_msg.subtype === "bot_message") {
          if (imsg.username) {
            new_msg.username = imsg.username;
          }
        }
        if (imsg.subtype === "sh_room_created" || imsg.subtype === "sh_room_shared") {
          if (imsg._room_id) {
            new_msg._room_id = imsg._room_id;
          } else if (imsg.room) {
            var room = TS.rooms.getRoomById(imsg.room.id);
            if (room) {
              new_msg._room_id = room.id;
            } else {
              TS.error("no room, no_display = true " + new_msg.ts);
              new_msg.no_display = true;
            }
          } else {
            new_msg.no_display = true;
          }
        }
        if (imsg.subtype === "file_share" || imsg.subtype === "file_mention" || imsg.subtype === "file_comment") {
          if (imsg.upload) {
            new_msg.upload = true;
          }
          if (imsg.file) {
            var file = TS.files.getFileById(imsg.file.id);
            if (file) {
              new_msg.file = file;
            } else {
              TS.error("no file, no_display = true " + new_msg.ts);
              new_msg.no_display = true;
            }
          } else {
            new_msg.no_display = true;
          }
          if (imsg.subtype === "file_comment") {
            if (imsg.comment) {
              if (new_msg.file) {
                new_msg.comment = TS.files.addCommentToFile(imsg.comment, new_msg.file);
              } else {
                new_msg.comment = imsg.comment;
              }
            } else {
              new_msg.no_display = true;
            }
          }
        }
        if (imsg.subtype === "pinned_item") {
          if (imsg.item_type) new_msg.item_type = imsg.item_type;
          if (imsg.item_type === "F") {
            if (imsg.item) {
              var file_item = TS.files.getFileById(imsg.item.id);
              new_msg.item = file_item;
            }
          } else if (imsg.item_type === "Fc" || imsg.item_type === "C" || imsg.item_type === "G" || imsg.item_type === "D") {
            new_msg.item = imsg.item;
          }
          new_msg.no_display = true;
        }
      }
      return new_msg;
    },
    maybeFetchUserDataFromLS: function(model_ob) {
      if (!model_ob) {
        TS.warn("maybeFetchUserDataFromLS: WTF no model_ob?");
        return;
      }
      if (model_ob._fetched_user_data_from_ls) return;
      if (!model_ob.last_msg_input) {
        model_ob.last_msg_input = TS.storage.fetchLastMsgInput(model_ob.id);
        if (model_ob.last_msg_input && TS.pri) TS.log(667, 'Got last_msg_input for "' + model_ob.id + '": length = ' + (model_ob.last_msg_input.length || "unknown"));
      }
      model_ob._fetched_user_data_from_ls = true;
    },
    processAttachments: function(attachments) {
      if (!attachments) return;
      var attachment;
      for (var i = 0; i < attachments.length; i += 1) {
        attachment = attachments[i];
        if (!attachment) {
          TS.warn("attachment is null!");
          continue;
        }
        if (attachment.slack_file_id && !attachment._slack_file_is_deleted) {
          var file = TS.files.getFileById(attachment.slack_file_id);
          if (file) {
            attachment._slack_file = file;
          } else if (attachment._slack_file) {
            attachment._slack_file = TS.files.upsertFile(attachment._slack_file).file;
          }
        }
        if (attachment.mrkdwn_in && _.isArray(attachment.mrkdwn_in) && attachment.mrkdwn_in.length) {
          attachment.mrkdwn_in_hash = {};
          for (var k = 0; k < attachment.mrkdwn_in.length; k += 1) {
            attachment.mrkdwn_in_hash[attachment.mrkdwn_in[k]] = true;
          }
        }
        if (!attachment.mrkdwn_in_hash) attachment.mrkdwn_in_hash = {};
        delete attachment.mrkdwn_in;
        attachment.hex_swatches = !!attachment.hex_swatches;
        if (attachment.audio_html || attachment.audio_url) {
          TS.inline_audios.makeInternalInlineAudio(attachment.audio_html || attachment.audio_url, attachment);
        }
        if (attachment.other_html) {
          TS.inline_others.makeInternalInlineOther(attachment);
        } else if (attachment.video_html) {
          var thumb_w = attachment.video_html_width && parseInt(attachment.video_html_width, 10) > parseInt(attachment.thumb_width, 10) ? attachment.video_html_width : attachment.thumb_width;
          var thumb_h = attachment.video_html_height && parseInt(attachment.video_html_height, 10) > parseInt(attachment.thumb_height, 10) ? attachment.video_html_height : attachment.thumb_height;
          TS.inline_videos.makeInternalInlineVideo(attachment.from_url || attachment.thumb_url, {
            title: attachment.title,
            html: TS.utility.msgs.filterHTMLForEmbeds(attachment.video_html),
            thumbnail: {
              url: attachment.thumb_url,
              width: thumb_w,
              height: thumb_h,
              link_url: attachment.from_url || attachment.title_url
            }
          });
        } else if (attachment.image_url) {
          TS.inline_imgs.makeInternalInlineImg(attachment.from_url || attachment.image_url, {
            src: attachment.image_url,
            width: attachment.image_width,
            height: attachment.image_height,
            link_url: attachment.from_url || attachment.title_url || attachment.image_url,
            bytes: attachment.image_bytes,
            rotation: attachment.rotation,
            content_type: attachment.content_type
          });
        }
        TS.inline_attachments.massageAttachment(attachment, i);
      }
    },
    _slurpExtraData: function(imsg, c_id) {
      TS.utility.msgs.processAttachments(imsg.attachments);
      imsg._rxn_key = TS.rxns.getRxnKey("message", imsg.ts, c_id);
      if (imsg.reactions) {
        TS.rxns.upsertRxnsFromDataAndUpdateUI(imsg._rxn_key, imsg.reactions);
        delete imsg.reactions;
      }
      if (imsg.img_vids) {
        _.forOwn(imsg.img_vids, function(img_vid, url) {
          if (img_vid.img_vid_type === "img") {
            TS.inline_imgs.makeInternalInlineImg(url, img_vid);
          } else if (img_vid.img_vid_type === "video") {
            TS.inline_videos.makeInternalInlineVideo(url, img_vid);
          }
        });
      }
      if (imsg.imgs) {
        _.forOwn(imsg.imgs, function(img, url) {
          imsg.imgs[url].from_url = url;
          TS.inline_imgs.makeInternalInlineImg(url, img);
        });
      }
      if (imsg.videos) {
        _.forOwn(imsg.videos, function(video, url) {
          imsg.videos[url].from_url = url;
          TS.inline_videos.makeInternalInlineVideo(url, video);
        });
      }
      if (imsg.subtype === "file_share" || imsg.subtype === "file_mention" || imsg.subtype === "file_comment") {
        if (imsg.file && !imsg.file.id) {
          TS.error("WTF no file id on file in imsg.subtype:" + imsg.subtype + " " + imsg.ts);
        } else if (imsg.file) {
          TS.files.upsertAndSignal(imsg.file);
          if (imsg.subtype === "file_share" || imsg.subtype === "file_mention") {}
          if (imsg.subtype === "file_comment") {
            if (imsg.comment) {
              var file = TS.files.getFileById(imsg.file.id);
              if (file) {
                TS.files.addCommentToFile(imsg.comment, file);
              } else {
                TS.warn("WTF no file? id:" + imsg.file.id);
              }
            } else {
              TS.error("WTF no comment in imsg.subtype:" + imsg.subtype + " " + imsg.ts);
            }
          }
        } else {}
      }
      if (imsg.subtype === "sh_room_created" || imsg.subtype === "sh_room_shared") {
        if (imsg.room && !imsg.room.id) {
          TS.error("WTF no room id on room in imsg.subtype:" + imsg.subtype + " " + imsg.ts);
        } else if (imsg.room) {
          TS.rooms.upsertAndSignal(imsg.room);
        } else {
          TS.error("WTF no room on imsg.subtype:" + imsg.subtype + " " + imsg.ts);
        }
      }
      if (imsg.subtype === "pinned_item") {
        if (imsg.item_type === "F" && imsg.item && imsg.item.id && !imsg.item.is_deleted) TS.files.upsertAndSignal(imsg.item);
      }
    },
    constructMsgPermalink: function(model_ob, ts, thread_ts) {
      if (!model_ob) return "";
      var permalink;
      if (model_ob.is_im || model_ob.is_mpim) {
        permalink = "/archives/" + model_ob.id + "/p" + ts.replace(".", "");
      } else if (TS.boot_data.feature_intl_channel_names && (model_ob.is_channel || model_ob.is_group)) {
        permalink = "/archives/" + model_ob.id + "/p" + ts.replace(".", "");
      } else {
        permalink = "/archives/" + model_ob.name + "/p" + ts.replace(".", "");
      }
      if (thread_ts && thread_ts !== ts) {
        permalink += "?thread_ts=" + thread_ts + "&cid=" + model_ob.id;
      }
      return permalink;
    },
    constructAbsoluteMsgPermalink: function(model_ob, ts, thread_ts) {
      var abs_permalink = TS.boot_data.team_url.slice(0, -1) + TS.utility.msgs.constructMsgPermalink(model_ob, ts, thread_ts);
      return abs_permalink;
    },
    constructConversationPermalink: function(model_ob, thread_ts) {
      if (model_ob.is_im || model_ob.is_mpim || TS.boot_data.feature_intl_channel_names) {
        return "/conversation/" + model_ob.id + "/p" + thread_ts.replace(".", "");
      }
      return "/conversation/" + model_ob.name + "/p" + thread_ts.replace(".", "");
    },
    isTempMsg: function(msg) {
      return !msg.ts || msg.ts.indexOf(TS.utility.date.fake_ts_unique_padder) > -1;
    },
    shouldMarkUnreadsOnMessageFetch: function(model_ob) {
      if (TS.qs_args.no_unread_marking_on_msgs_fetch == "1") return false;
      var active_model_ob;
      if (model_ob) {
        active_model_ob = TS.shared.getActiveModelOb();
        if (!active_model_ob || active_model_ob.id !== model_ob.id) return false;
      }
      if (TS.pri && active_model_ob) TS.console.log(58, "shouldMarkUnreadsOnMessageFetch: returning TRUE for active model_ob of " + active_model_ob.id);
      return true;
    },
    ipsum: function() {
      var ipsum = ["Build Something People Want", "We know that we have built something which is genuinely useful: almost any team which adopts Slack as their central application for communication would be significantly better off than they were before.", "That means we have something people want.", "However, almost all of them have no idea that they want Slack.", "How could they?", "They’ve never heard of it.", "And only a vanishingly small number will have imagined it on their own.", "They think they want something different (if they think they want anything at all).", "They definitely are not looking for Slack.", "(But then no-one was looking for Post-it notes or GUIs either.)", "Just as much as our job is to build something genuinely useful, something which really does make people’s working lives simpler, more pleasant and more productive, our job is also to understand what people think they want and then translate the value of Slack into their terms.", "A good part of that is “just marketing,” but even the best slogans, ads, landing pages, PR campaigns, etc., will fall down if they are not supported by the experience people have when they hit our site, when they sign up for an account, when they first begin using the product and when they start using it day in, day out.", "Therefore, “understanding what people think they want and then translating the value of Slack into their terms” is something we all work on.", "It is the sum of the exercise of all our crafts.", "We do it with copy accompanying signup forms, with fast-loading pages, with good welcome emails, with comprehensive and accurate search, with purposeful loading screens, and with thoughtfully implemented and well-functioning features of all kinds.", "Marketing from Both Ends", "Much has been written about “product-market fit” in the last few years, probably as a result of the popularity of the lean startup movement (though the idea has been around much longer).", "The term refers to the degree to which a product could be successful, given sufficient promotion, appropriate pricing, adequate customer support and so on (before you find that fit, all the pushing in the world won’t get you up the hill).", "In this classic post on Marc Andreessen’s old blog, he calls getting to product-market fit the “only thing that matters” for startups and offers a way of thinking about the life of the startup that divides it into two distinct phases: before product-market fit and after.", "Once the product fits the market, a company is able to step on the gas, spending to promote a product that will actually sell.", "The things you need to do before are very different from the things you need to do after (generally test & iterate vs scale & optimize).", "We are right in the middle of that first phase.", "It seems we are doing well and there are many encouraging signs, but we’re definitely still in the first phase and it is very, very hard to tell how far we have to go to cross over into the promised land (the last 10% is 90% of the work, etc.)", "So, we should be working carefully from both the product end and the market end:", "Doing a better and better job of providing what people want (whether they know it or not)", "Communicating the above more and more effectively (so that they know they want it)", "In the best case, there is a dialectic at play here: the product itself and the way people use it should suggest new ways of articulating the value — and refinements to how we communicate the value should lead to principles which clarify decision-making around product features and design.", "Our position is different than the one many new companies find themselves in: we are not battling it out in a large, well-defined market with clear incumbents (which is why we can’t get away with “Other group chat products are poisonous. Slack is toasted.”).", "Despite the fact that there are a handful of direct competitors and a muddled history of superficially similar tools, we are setting out to define a new market.", "And that means we can’t limit ourselves to tweaking the product; we need to tweak the market too.", "Sell the innovation, not the product", "The best — maybe the only? — real, direct measure of “innovation” is change in human behaviour.", "In fact, it is useful to take this way of thinking as definitional: innovation is the sum of change across the whole system, not a thing which causes a change in how people behave.", "No small innovation ever caused a large shift in how people spend their time and no large one has ever failed to do so.", "By that measure, Slack is a real and large innovation.", "It is not as eye-catching as self-driving cars or implantable chips — it is not basic research-y kind of stuff.", "But, for organizations that adopt it, there will be a dramatic shift in how time is spent, how communication happens, and how the team’s archives are utilized.", "There will be changes in how team members relate to one another and, hopefully, significant changes in productivity.", "We are unlikely to be able to sell “a group chat system” very well: there are just not enough people shopping for group chat system (and, as pointed out elsewhere, our current fax machine works fine).", "That’s why what we’re selling is organizational transformation.", "What we are selling is not the software product — the set of all the features, in their specific implementation — because there are just not many buyers for this software product.", "(People buy “software” to address a need they already know they have or perform some specific task they need to perform, whether that is tracking sales contacts or editing video.)", "However, if we are selling “a reduction in the cost of communication” or “zero effort knowledge management” or “making better decisions, faster” or “all your team communication, instantly searchable, available wherever you go” or “75% less email” or some other valuable result of adopting Slack, we will find many more buyers.", "That’s why what we’re selling is organizational transformation.", "The software just happens to be the part we’re able to build & ship (and the means for us to get our cut).", "We’re selling a reduction in information overload, relief from stress, and a new ability to extract the enormous value of hitherto useless corporate archives.", "We’re selling better organizations, better teams.", "That’s a good thing for people to buy and it is a much better thing for us to sell in the long run.", "We will be successful to the extent that we create better teams.", "To see why, consider the hypothetical Acme Saddle Company.", "They could just sell saddles, and if so, they’d probably be selling on the basis of things like the quality of the leather they use or the fancy adornments their saddles include; they could be selling on the range of styles and sizes available, or on durability, or on price.", "Or, they could sell horseback riding.", "Being successful at selling horseback riding means they grow the market for their product while giving the perfect context for talking about their saddles.", "It lets them position themselves as the leader and affords them different kinds of marketing and promotion opportunities (e.g., sponsoring school programs to promote riding to kids, working on land conservation or trail maps).", "It lets them think big and potentially be big.", "Because the best possible way to find product-market fit is to define your own market.", "This isn’t a new idea.", "There are many brands whose marketing activities or positioning has them selling something other than (and usually larger than) their product: Harley Davidson sells motorcycle riding, but it especially sells freedom and independence.", "Most luxury brands sell something that comes down to “being better than you are” (richer, better looking, more attractive to those you find desirable, etc.)", "My favorite recent example is Lululemon: when they started, there was not a large market for yoga-specific athletic wear and accessories.", "They sold yoga like crazy: helping people find yoga studios near their homes, hosting free classes, sponsorships and scholarships, local ambassadors and training, etc.", "And as a result, they sold just under $1.4 billion worth of yoga-specific athletic wear and accessories in their most recent fiscal year.", "But going back to the Acme Saddle Company, the better analogy to what we are doing now is to imagine them selling horseback riding … about 4,000 years ago.", "It is almost inevitable that centralized internal communication systems will gradually replace email for most organizations over the next 10-20 years and we should do what we can to accelerate the trend and “own it”.", "We are at the beginning of a transition.", "We have an opportunity to both define the category and push hard for the whole market’s growth.", "We’d be crazy not to take it, because the best possible way to find product-market fit is to define your own market."];
      return ipsum;
    },
    removeFileSharesAndMentions: function(model_ob, file) {
      if (!TS.client) return;
      var msgs = model_ob.msgs;
      var m;
      for (var i = msgs.length - 1; i > -1; i -= 1) {
        m = msgs[i];
        if ((m.subtype === "file_share" || m.subtype === "file_mention") && m.file && m.file.id == file.id) {
          if (model_ob.is_channel) {
            TS.channels.removeMsg(model_ob.id, m);
          } else if (model_ob.is_mpim) {
            TS.mpims.removeMsg(model_ob.id, m);
          } else if (model_ob.is_group) {
            TS.groups.removeMsg(model_ob.id, m);
          } else {
            TS.ims.removeMsg(model_ob.id, m);
          }
        }
      }
    },
    removeFileComments: function(model_ob, file) {
      if (!TS.client) return;
      var msgs = model_ob.msgs;
      var m;
      for (var i = msgs.length - 1; i > -1; i -= 1) {
        m = msgs[i];
        if (m.subtype === "file_comment" && m.file && m.file.id == file.id) {
          if (model_ob.is_channel) {
            TS.channels.removeMsg(model_ob.id, m);
          } else if (model_ob.is_mpim) {
            TS.mpims.removeMsg(model_ob.id, m);
          } else if (model_ob.is_group) {
            TS.groups.removeMsg(model_ob.id, m);
          } else {
            TS.ims.removeMsg(model_ob.id, m);
          }
        }
      }
    },
    removeFileReferences: function(model_ob, file_id) {
      if (!TS.client) return;
      var msgs = model_ob.msgs;
      var m;
      for (var i = msgs.length - 1; i > -1; i -= 1) {
        m = msgs[i];
        if (m.attachments) {
          var attach = TS.inline_attachments.getAttachmentBySlackFileId(m.attachments, file_id);
          if (attach && !attach._slack_file_is_deleted) {
            attach._slack_file_is_deleted = true;
            delete attach._slack_file;
            if (model_ob.id == TS.model.active_im_id) {
              TS.ims.message_changed_sig.dispatch(model_ob, m);
            } else if (model_ob.id == TS.model.active_channel_id) {
              TS.channels.message_changed_sig.dispatch(model_ob, m);
            } else if (model_ob.id == TS.model.active_group_id) {
              TS.groups.message_changed_sig.dispatch(model_ob, m);
            } else if (model_ob.id == TS.model.active_mpim_id) {
              TS.mpims.message_changed_sig.dispatch(model_ob, m);
            }
          }
        }
      }
    },
    updateFileMsgs: function(model_ob, file) {
      var msgs = model_ob.msgs;
      var is_using_archives = !(msgs && msgs.length) || TS.model.archive_view_is_showing && model_ob.is_channel && model_ob.is_member === false;
      msgs = is_using_archives ? model_ob._archive_msgs : msgs;
      if (!msgs || !msgs.length) return;
      var m;
      var msgHasFileReferenceAttachMent = function(m) {
        if (!m) return false;
        if (!m.attachments) return false;
        if (!m.attachments.length) return false;
        if (TS.inline_attachments.getAttachmentBySlackFileId(m.attachments, file.id)) return true;
        return false;
      };
      for (var i = msgs.length - 1; i > -1; i -= 1) {
        m = msgs[i];
        if (!file.is_deleted && (m.subtype === "file_share" || m.subtype === "file_mention" || m.subtype === "file_comment") && m.file && m.file.id == file.id) {} else if (msgHasFileReferenceAttachMent(m)) {} else {
          continue;
        }
        if (!file.is_tombstoned) {
          if (file.mode === "hosted" || file.mode === "external" || file.mode === "snippet") {
            if (file.comments.length || !file.is_tombstoned) {
              if (model_ob.id == TS.model.active_im_id) {
                TS.ims.message_changed_sig.dispatch(model_ob, m);
              } else if (model_ob.id == TS.model.active_channel_id) {
                TS.channels.message_changed_sig.dispatch(model_ob, m);
              } else if (model_ob.id == TS.model.active_group_id) {
                TS.groups.message_changed_sig.dispatch(model_ob, m);
              } else if (model_ob.id == TS.model.active_mpim_id) {
                TS.mpims.message_changed_sig.dispatch(model_ob, m);
              }
            } else {
              continue;
            }
          }
          if (TS.client) {
            TS.view.rebuildMsgFile(m, file, is_using_archives);
          } else if (TS.web) {
            TS.web.channel.rebuildMsgFile(m, file);
          }
        } else if (model_ob.id == TS.model.active_im_id) {
          TS.ims.message_changed_sig.dispatch(model_ob, m);
        } else if (model_ob.id == TS.model.active_channel_id) {
          TS.channels.message_changed_sig.dispatch(model_ob, m);
        } else if (model_ob.id == TS.model.active_group_id) {
          TS.groups.message_changed_sig.dispatch(model_ob, m);
        } else if (model_ob.id == TS.model.active_mpim_id) {
          TS.mpims.message_changed_sig.dispatch(model_ob, m);
        }
      }
    },
    updateCommentReferences: function(file) {
      if (!file) return;
      var all_model_obs = TS.shared.getAllModelObsForUser();
      _.forEach(all_model_obs, function(model_ob) {
        _.forEach(model_ob.msgs, function(msg) {
          if (!msg.file || msg.file.id !== file.id) return;
          if (!msg.comment) return;
          var canonical_comment = _.find(file.comments, {
            id: msg.comment.id
          });
          if (canonical_comment) msg.comment = canonical_comment;
        });
      });
    },
    tryToEditLastMsgFromShortcut: function(ob) {
      var model_ob = TS.shared.getActiveModelOb();
      if (!model_ob) {
        return;
      }
      var msg = TS.utility.msgs.getEditableMsgByProp("user", TS.model.user.id, model_ob.msgs);
      if (!msg) {
        TS.sounds.play("beep");
        alert(TS.i18n.t("Found no recent messages from you to edit :(", "msgs")());
        return;
      }
      var text = TS.format.unFormatMsg(msg.text, msg);
      var new_text = TS.utility.msgs.wordReplace(text, ob);
      if (text == new_text) {
        TS.sounds.play("beep");
        return;
      }
      TS.msg_edit.commitEdit(msg, TS.shared.getActiveModelOb(), new_text);
    },
    getEditLastShortcutCmd: function(txt) {
      var parts = txt.split("/");
      if (parts.length != 5 && parts.length != 4) return;
      if (parts[1] !== "s") return;
      var str = parts[2];
      var rpl = parts[3];
      var g = parts.length == 5 && (parts[4] === "g" || parts[4] === "gi" || parts[4] === "ig");
      var i = parts.length == 5 && (parts[4] === "i" || parts[4] === "gi" || parts[4] === "ig");
      if (!str) {
        return;
      }
      return {
        str: str,
        rpl: rpl,
        g: g,
        i: i
      };
    },
    wordReplace: function(text, replace_object) {
      if (!replace_object) {
        return text;
      }
      var rx_opts = (replace_object.g ? "g" : "") + (replace_object.i ? "i" : "");
      var word_delimiter = "[\\s\\n\\r\\t.,'\"+!?\\-_|]";
      var escaped_word = TS.utility.regexpEscape(replace_object.str);
      var rx = new RegExp("(^|" + word_delimiter + "+)(?:" + escaped_word + ")(?=" + word_delimiter + "+|$)", rx_opts);
      return text.replace(rx, "$1" + replace_object.rpl);
    },
    maybeTruncateMsgs: function(model_ob) {
      if (!model_ob) return;
      if (!model_ob.msgs) return;
      if (!model_ob.msgs.length) return;
      if (!TS.model.active_cid || !TS.shared.getActiveModelOb()) return;
      var msg_limit = TS.model.initial_msgs_cnt + 1;
      var max_msg_limit = Math.min(TS.model.hard_msg_limit, msg_limit * 2);
      var scroll_top_limit = 1e3;
      var ms_since_last_activated_limit = 0;
      var ms_last_scrollback_history_load_limit = 1e3 * 20;
      var msgs = model_ob.msgs;
      var displayed_msgs = TS.utility.msgs.getDisplayedMsgs(msgs);
      var now = Date.now();
      var ms_since_last_scrollback_history_load = model_ob.has_fetched_history_after_scrollback ? now - model_ob.fetched_history_after_scrollback_time : now;
      if (displayed_msgs.length > max_msg_limit && (model_ob.id != TS.shared.getActiveModelOb().id || model_ob.scroll_top < scroll_top_limit && ms_since_last_scrollback_history_load > ms_last_scrollback_history_load_limit)) {
        msg_limit = max_msg_limit;
      } else {
        if (displayed_msgs.length - 50 <= msg_limit) {
          return;
        }
        if (model_ob.last_made_active) {
          var ms_since_last_activated = now - model_ob.last_made_active;
          if (ms_since_last_activated < ms_since_last_activated_limit) {
            return;
          }
        }
        if (model_ob.scroll_top != -1) {
          return;
        }
      }
      if (model_ob.history_is_being_fetched) {
        return;
      }
      var msgs_to_remove_from_view = [];
      while (TS.utility.msgs.getDisplayedMsgs(msgs).length > msg_limit) {
        msgs_to_remove_from_view.push(msgs.pop());
      }
      if (model_ob.is_limited) {
        TS.info("Truncated " + model_ob.id + " and reset is_limited");
        model_ob.is_limited = false;
      }
      if (model_ob.id == TS.shared.getActiveModelOb().id) {
        TS.view.removeMsgsAfterTruncation(msgs_to_remove_from_view);
      }
    },
    checkForMsgsToTruncate: function() {
      if (!TS.model) return;
      if (!TS.model.channels) return;
      var channels = TS.model.channels;
      var channel;
      var i;
      for (i = 0; i < channels.length; i += 1) {
        channel = channels[i];
        if (channel.id == TS.model.active_channel_id) continue;
        if (!channel.is_member) continue;
        if (channel.is_archived) continue;
        TS.utility.msgs.maybeTruncateMsgs(channel);
      }
      var ims = TS.model.ims;
      var im;
      for (i = 0; i < ims.length; i += 1) {
        im = ims[i];
        if (im.id == TS.model.active_im_id) continue;
        TS.utility.msgs.maybeTruncateMsgs(im);
      }
      var groups = TS.model.groups;
      var group;
      for (i = 0; i < groups.length; i += 1) {
        group = groups[i];
        if (group.id == TS.model.active_group_id) continue;
        if (group.is_archived) continue;
        TS.utility.msgs.maybeTruncateMsgs(group);
      }
      var mpims = TS.model.mpims;
      var mpim;
      for (i = 0; i < mpims.length; i += 1) {
        mpim = mpims[i];
        if (mpim.id == TS.model.active_mpim_id) continue;
        TS.utility.msgs.maybeTruncateMsgs(mpim);
      }
    },
    getEphemeralMsgsByCidAndType: function(c_id, ephemeral_type) {
      var msg;
      var A = [];
      var model_ob = TS.shared.getModelObById(c_id);
      if (!model_ob) return A;
      _.forOwn(TS.utility.msgs.ephemeral_msgs_map, function(ob, ts) {
        if (ob.ephemeral_type == ephemeral_type && ob.c_id == c_id) {
          msg = TS.utility.msgs.getMsg(ts, model_ob.msgs);
          if (!msg) return;
          A.push(msg);
        }
      });
      return A;
    },
    removeAllEphemeralMsgsByType: function(ephemeral_type, c_id, thread_ts) {
      var model_ob;
      var msg;
      _.forOwn(TS.utility.msgs.ephemeral_msgs_map, function(ob, ts) {
        if (ob.ephemeral_type == ephemeral_type) {
          if (c_id && c_id != ob.c_id) return;
          if (thread_ts && thread_ts != ob.thread_ts) return;
          model_ob = TS.shared.getModelObById(ob.c_id);
          if (!model_ob) return;
          msg = TS.utility.msgs.getMsg(ts, model_ob.msgs);
          if (!msg) return;
          if (model_ob.is_im) {
            TS.ims.removeMsg(model_ob.id, msg);
          } else if (model_ob.is_channel) {
            TS.channels.removeMsg(model_ob.id, msg);
          } else if (model_ob.is_mpim) {
            TS.mpims.removeMsg(model_ob.id, msg);
          } else if (model_ob.is_group) {
            TS.groups.removeMsg(model_ob.id, msg);
          }
          delete TS.utility.msgs.ephemeral_msgs_map[ts];
        }
      });
    },
    hasImgs: function(msg) {
      if (!msg) return false;
      if (msg.img_vids) {
        _.forOwn(msg.img_vids, function(img_vid) {
          if (img_vid.img_vid_type === "img") {
            return true;
          }
        });
      } else if (msg.attachments) {
        for (var i = 0; i < msg.attachments.length; i += 1) {
          if (msg.attachments[i].image_url) {
            return true;
          }
        }
      }
      return false;
    },
    ingestMessagesFromBootData: function(model_ob) {
      if (!TS.boot_data.msgs) return;
      var msgs = TS.boot_data.msgs[model_ob.id];
      var A = [];
      if (msgs) {
        var imsg;
        for (var i = 0; i < msgs.length; i += 1) {
          imsg = msgs[i];
          if (!imsg.ts) continue;
          A.push(TS.utility.msgs.processImsg(imsg, model_ob.id));
        }
      }
      TS.utility.msgs.setMsgs(model_ob, A);
    },
    handleSearchHighlights: function(html) {
      return TS.format.replaceHighlightMarkers(html, '<span class="match">', "</span>");
    },
    findAllMsgsBySubtype: function(subtype) {
      var i;
      var m;
      var model_ob;
      var model_obs = TS.shared.getAllModelObsForUser();
      var results = {};
      for (i = 0; i < model_obs.length; i += 1) {
        model_ob = model_obs[i];
        if (!model_ob.msgs) continue;
        for (m = 0; m < model_ob.msgs.length; m += 1) {
          if (subtype != model_ob.msgs[m].subtype) continue;
          results[model_ob.name] = results[model_ob.name] || {
            id: model_ob.id
          };
          results[model_ob.name]["msg_index_" + m] = model_ob.msgs[m];
        }
      }
      TS.info(JSON.stringify(results, null, "	"));
    },
    handleFailedMsgSend: function(msg_id, model_ob, resend) {
      var temp_msg = TS.utility.msgs.getMsg(msg_id, model_ob.msgs);
      if (temp_msg) {
        var in_reply_to_msg;
        var should_broadcast_reply;
        if (resend && temp_msg.thread_ts) {
          in_reply_to_msg = TS.utility.msgs.findMsg(temp_msg.thread_ts, model_ob.id);
          should_broadcast_reply = temp_msg._was_reply_broadcast;
        }
        if (model_ob.is_channel) {
          TS.channels.removeMsg(model_ob.id, temp_msg);
          if (resend) TS.channels.sendMsg(model_ob.id, TS.format.unFormatMsg(temp_msg.text, temp_msg), in_reply_to_msg, should_broadcast_reply);
        } else if (model_ob.is_mpim) {
          TS.mpims.removeMsg(model_ob.id, temp_msg);
          if (resend) TS.mpims.sendMsg(model_ob.id, TS.format.unFormatMsg(temp_msg.text, temp_msg), in_reply_to_msg, should_broadcast_reply);
        } else if (model_ob.is_group) {
          TS.groups.removeMsg(model_ob.id, temp_msg);
          if (resend) TS.groups.sendMsg(model_ob.id, TS.format.unFormatMsg(temp_msg.text, temp_msg), in_reply_to_msg, should_broadcast_reply);
        } else {
          TS.ims.removeMsg(model_ob.id, temp_msg);
          if (resend) TS.ims.sendMsg(model_ob.id, TS.format.unFormatMsg(temp_msg.text, temp_msg), in_reply_to_msg, should_broadcast_reply);
        }
        delete TS.model.unsent_msgs[temp_msg.ts];
        delete TS.model.display_unsent_msgs[temp_msg.ts];
      } else {
        TS.error("no msg?: " + msg_id);
      }
    },
    msgMightBeRolledUp: function(msg) {
      return msg.subtype && TS.model.join_leave_subtypes.indexOf(msg.subtype) != -1;
    },
    msgRollUpWorker: function(i, msg, msgs, jl_rolled_up_msgs) {
      delete msg._jl_rollup_hash;
      delete msg._jl_rolled_up_in;
      if (!TS.utility.msgs.msgMightBeRolledUp(msg)) return;
      jl_rolled_up_msgs.push(msg);
      if (i !== 0 && TS.utility.msgs.msgMightBeRolledUp(msgs[i - 1])) {
        return "continue";
      }
      jl_rolled_up_msgs[0]._jl_rollup_hash = {
        msg_ids: [],
        users: {}
      };
      var hash = jl_rolled_up_msgs[0]._jl_rollup_hash;
      var jl_msg;
      for (var m = 0; m < jl_rolled_up_msgs.length; m += 1) {
        jl_msg = jl_rolled_up_msgs[m];
        hash.users[jl_msg.user] = hash.users[jl_msg.user] || {};
        var ob = hash.users[jl_msg.user];
        hash.msg_ids.push(jl_msg.ts);
        jl_msg._jl_rolled_up_in = jl_rolled_up_msgs[0].ts;
        if (jl_msg.subtype === "channel_join" || jl_msg.subtype === "group_join") {
          ob.inviter = jl_msg.inviter;
          ob.joined = true;
          ob.is_in = true;
        } else if (jl_msg.subtype === "channel_leave" || jl_msg.subtype === "group_leave") {
          ob.left = true;
          ob.is_in = false;
        }
      }
      return "swap";
    },
    shouldHaveBotLabel: function(msg, member) {
      var is_bot_msg = msg.subtype && msg.subtype === "bot_message" && msg.user !== "USLACKBOT";
      var is_bot_member = member && member.is_bot && !member.is_slackbot;
      return is_bot_msg || is_bot_member;
    },
    checkConsistencyViaApi: function(c_id) {
      if (!TS.boot_data.feature_msg_consistency) return;
      if (!TS.model.ms_connected) return;
      var model_ob = TS.shared.getModelObById(c_id);
      if (!model_ob || !model_ob.msgs || !model_ob.msgs.length) return;
      if (model_ob.is_archived) return;
      if (model_ob.history_is_being_fetched) return;
      if (model_ob._consistency_has_been_checked) return;
      if (model_ob._consistency_is_being_checked) return;
      var oldest_ts_we_have = TS.utility.msgs.getOldestValidTs(model_ob);
      if (!oldest_ts_we_have) return;
      var newest_ts_we_have = TS.utility.msgs.getMostRecentValidTs(model_ob);
      var log_prefix = "checkConsistencyViaApi for: " + c_id;
      model_ob._consistency_is_being_checked = true;
      var options = {
        channel: model_ob.id,
        oldest: oldest_ts_we_have,
        count: 1e3,
        inclusive: true,
        ignore_replies: true
      };
      if (newest_ts_we_have) options.latest = newest_ts_we_have;
      TS.log(773, log_prefix + ", range = " + options.oldest + " -> " + (options.latest || "now"));
      TS.api.call(TS.shared.getHistoryApiMethodForModelOb(model_ob), options).then(function(res) {
        var was_inconsistent = TS.utility.msgs.checkConsistency(c_id, res.data.messages);
        if (was_inconsistent) {
          _inconsistent_history_cnt += 1;
          TS.metrics.store("inconsistent_history_cnt", _inconsistent_history_cnt, {
            is_count: true
          });
          TS.error(log_prefix + " NOT GOOD!");
        } else {
          if (TS.useRedux()) {
            model_ob = TS.redux.channels.getUpdatedReferenceToEntity(model_ob);
          }
          model_ob._consistency_has_been_checked = true;
          TS.log(773, log_prefix + " all good!");
        }
      }).catch(function(err) {
        TS.error(log_prefix + " err:" + err);
      }).finally(function() {
        if (TS.useRedux()) {
          model_ob = TS.redux.channels.getUpdatedReferenceToEntity(model_ob);
        }
        delete model_ob._consistency_is_being_checked;
      });
    },
    checkConsistency: function(c_id, from_msgs) {
      var model_ob = TS.shared.getModelObById(c_id);
      if (!model_ob || !model_ob.msgs || !model_ob.msgs.length) return;
      var missing_msgs = [];
      var log_prefix = "checkConsistency for: " + c_id;
      TS.log(773, log_prefix + " from_msgs.length:" + from_msgs.length + " model_ob.msgs.length:" + model_ob.msgs.length);
      from_msgs.forEach(function(msg, i) {
        if (!TS.utility.msgs.getMsg(msg.ts, model_ob.msgs)) {
          msg = TS.utility.msgs.processImsg(msg, c_id);
          missing_msgs.push(msg);
          TS.error(log_prefix + " found and fixed an inconsistency at i:" + i + ", ts=" + msg.ts);
        }
      });
      if (!missing_msgs.length) return false;
      if (missing_msgs.length == 1) {
        if (model_ob.is_channel) {
          TS.channels.addMsg(c_id, missing_msgs[0]);
        } else if (model_ob.is_mpim) {
          TS.mpims.addMsg(c_id, missing_msgs[0]);
        } else if (model_ob.is_group) {
          TS.groups.addMsg(c_id, missing_msgs[0]);
        } else if (model_ob.is_im) {
          TS.ims.addMsg(c_id, missing_msgs[0]);
        }
      } else {
        TS.shared.addMsgs(model_ob, missing_msgs);
      }
      return true;
    },
    filterHTMLForEmbeds: function(html) {
      if (!html) return html;
      var $good_tags;
      var parser = new DOMParser;
      var parsed = parser.parseFromString(html, "text/html") || parser.parseFromString(html, "text/xml");
      var result = "";
      var $doc;
      if (parsed) $doc = $(parsed.body);
      if (!$doc) return html;
      if ($doc) {
        $good_tags = $doc.find(_allowed_tags_selector);
        if ($good_tags.length) {
          result = TS.utility.sanitizeHTML($good_tags.first()[0].outerHTML, _allowed_tags, TS.utility.msgs.allowed_embed_attributes);
        } else {}
      } else {}
      parser = null;
      parsed = null;
      $doc = null;
      $good_tags = null;
      return result;
    },
    areMsgsSameDay: function(msg_a, msg_b) {
      var date_a = TS.utility.date.toDateObject(msg_a.ts);
      var date_b = TS.utility.date.toDateObject(msg_b.ts);
      return TS.utility.date.sameDay(date_a, date_b);
    },
    maybeCalcUnreadCnts: function(model_ob) {
      if (!TS.client || !TS.client._should_defer_initial_msg_history) return;
      if (!model_ob) {
        TS.warn("maybeCalcUnreadCnts: WTF no model_ob?");
        return;
      }
      if (model_ob._needs_unread_recalc && model_ob.unread_cnt == 1) {
        var controller = TS.shared.getControllerForModelOb(model_ob);
        if (!controller) {
          TS.warn("maybeCalcUnreadCnts: WTF no controller for id " + model_ob.id + "?");
          return;
        }
        var and_mark = false;
        controller.calcUnreadCnts(model_ob, and_mark);
        model_ob._needs_unread_recalc = false;
      }
    },
    maybeSetPrevLastRead: function(model_ob, ts) {
      if (!model_ob) return;
      var most_valid_recent_ts = TS.utility.msgs.getMostRecentValidTs(model_ob);
      if (ts != most_valid_recent_ts) {
        TS.utility.msgs.setPrevLastRead(model_ob, ts);
      } else {
        TS.utility.msgs.setPrevLastRead(model_ob, model_ob.last_read);
      }
    },
    setPrevLastRead: function(model_ob, ts) {
      if (!model_ob) return;
      if (!model_ob._prev_last_read && model_ob.unread_cnt && !TS.notifs.isCorGMuted(model_ob.id)) {
        model_ob._prev_last_read = ts;
      } else {
        var mos_recent_ts = TS.utility.msgs.getMostRecentValidTs(model_ob);
        var most_recent_msg = TS.utility.msgs.getMsg(mos_recent_ts, model_ob.msgs);
        if (most_recent_msg && most_recent_msg.subtype === "pinned_item") model_ob._prev_last_read = ts;
      }
    },
    maybeClearPrevLastRead: function(model_ob) {
      model_ob = model_ob || TS.shared.getActiveModelOb();
      if (model_ob && model_ob._prev_last_read) delete model_ob._prev_last_read;
    },
    maybeClearUsersCountsInfo: function(model_ob) {
      if (!model_ob) return;
      if (!model_ob._users_counts_info) return;
      if (TS.pri) TS.log(888, "Deleting _users_counts_info on " + model_ob.id);
      delete model_ob._users_counts_info;
    },
    isMsgReply: function(msg) {
      if (!msg) return false;
      return msg.thread_ts && msg.thread_ts != msg.ts;
    },
    msgHasReplies: function(msg) {
      if (!msg) return false;
      return msg.ts === msg.thread_ts && !!msg.reply_count;
    },
    userRepliedToMsg: function(msg) {
      if (!msg || !msg.replies) return false;
      var has_replied_to_msg = _.find(msg.replies, function(reply) {
        return reply.user === TS.model.user.id;
      });
      return !!has_replied_to_msg;
    },
    startUpdatingRelativeTimestamps: function(root_selector) {
      _relative_timestamp_updater.start(root_selector);
    },
    stopUpdatingRelativeTimestamps: function(root_selector) {
      _relative_timestamp_updater.stop(root_selector);
    },
    shouldHideChannelJoinOrLeaveMsg: function(imsg, channel_or_channel_id) {
      if (!TS.boot_data.feature_hide_join_leave) return false;
      var user = TS.members.getMemberById(imsg.user);
      var is_bot_user = _.get(user, "is_bot", false);
      if (imsg.subtype === "channel_join" || imsg.type === "member_joined_channel") {
        var channel = _.isObject(channel_or_channel_id) ? channel_or_channel_id : TS.channels.getChannelById(channel_or_channel_id);
        if (!channel) return false;
        var is_default_channel = _.includes(TS.model.team.prefs.default_channels, channel.id);
        var was_invited = !!imsg.inviter;
        var num_members;
        if (TS.membership && TS.membership.lazyLoadChannelMembership()) {
          num_members = channel.num_members;
          if (_.isUndefined(channel.num_members)) {
            var membership_counts = TS.membership && TS.membership.getMembershipCounts(channel);
            if (membership_counts.counts) {
              num_members = _.get(membership_counts, "counts.member_count");
            }
          }
        } else {
          num_members = _.get(channel, "members.length");
        }
        var has_enough_members = _.isUndefined(num_members) ? false : num_members > 20;
        if (!is_bot_user && !is_default_channel && !was_invited && has_enough_members) {
          return true;
        }
      } else if (imsg.subtype === "channel_leave" || imsg.type === "member_left_channel") {
        if (!is_bot_user) {
          return true;
        }
      }
      return false;
    },
    maybeRemoveFromMergeOnHistoryQueue: function(model_ob, imsg) {
      if (!TS.boot_data.feature_tinyspeck) return;
      if (!model_ob || !imsg) return;
      if (!imsg || !imsg.deleted_ts) return;
      if (!model_ob._msgs_to_merge_on_history || !model_ob._msgs_to_merge_on_history.length) return;
      model_ob._msgs_to_merge_on_history = _.filter(model_ob._msgs_to_merge_on_history, function(msg) {
        if (msg.ts === imsg.deleted_ts) TS.warn("imsg with deleted_ts = " + imsg.deleted_ts + " matched message in merge_on_history queue for " + model_ob.id + " - removing from queue.");
        return msg.ts !== imsg.deleted_ts;
      });
    },
    extractLinkType: function($link, $target, url) {
      if ($target.data("member-id") || $link.data("member-id")) {
        return "user";
      }
      if ($target.data("channel-id") || $link.data("channel-id")) {
        return "channel";
      }
      if ($target.data("file-id") || $link.data("file-id")) {
        return "file";
      }
      if (url && url.match(/\.slack\.com\/archives\//)) {
        return "message";
      }
      var is_external_url = url && !TS.utility.url.getHostName(url).match(/\.slack\.com/);
      if (is_external_url) {
        return "external";
      }
      return "internal";
    },
    extractLinkItemId: function($link, $target, type) {
      if (type === "user") {
        return $target.data("member-id") || $link.data("member-id");
      }
      if (type === "channel") {
        return $target.data("channel-id") || $link.data("channel-id");
      }
      if (type === "file") {
        return $target.data("file-id") || $link.data("file-id");
      }
      return null;
    },
    extractLinkAction: function($link, $target) {
      if ($target.hasClass("file_preview_action")) {
        if ($target.hasClass("file_ssb_download_link")) {
          return "file_ssb_download_link";
        } else if ($target.hasClass("file_new_window_link")) {
          return "file_new_window_link";
        } else if ($target.hasClass("file_comment_link")) {
          return "file_comment_link";
        }
        return "file_preview_action";
      }
      if ($link.hasClass("file_viewer_external_link")) {
        return "file_viewer_external_link";
      }
      if ($link.hasClass("file_viewer_link")) {
        return "file_viewer_link";
      }
      if ($target.hasClass("file_preview_link")) {
        return "file_preview_link";
      }
      if ($target.hasClass("file_header")) {
        return "file_header";
      }
      if ($target.parent() && $target.parent().hasClass("rest_text_expander")) {
        return "rest_text_expander";
      }
      return null;
    },
    extractLinkAttachmentField: function($link) {
      var $parent = $link.parent();
      if ($parent.hasClass("attachment_source_icon")) {
        return "attachment_source_icon";
      }
      if ($parent.hasClass("attachment_source_name")) {
        return "attachment_source_name";
      }
      if ($parent.hasClass("attachment_author_name")) {
        return "attachment_author_name";
      }
      if ($parent.hasClass("attachment_title")) {
        return "attachment_title";
      }
      return null;
    },
    isRawLink: function($target, url) {
      if (!$target || !url) return false;
      if (!$target.is("a")) return false;
      var url_no_protocol = url.replace(/(^\w+:|^)\/\//, "");
      return $target.text() === url || $target.text() === url_no_protocol;
    }
  });
  var _is_in_bulk_unread_calc_mode = false;
  var _allowed_tags = ["video", "iframe", "source"];
  var _allowed_tags_selector = _allowed_tags.join(",");
  var _inconsistent_history_cnt = 0;
  var _relative_timestamp_updater = function() {
    var interval = null;
    var root_selectors = [];

    function start(selector) {
      if (_.includes(root_selectors, selector)) return;
      root_selectors.push(selector);
      if (interval === null) {
        interval = setInterval(update, 6e4);
      }
    }

    function stop(selector) {
      _.pull(root_selectors, selector);
      if (!root_selectors.length) {
        clearInterval(interval);
        interval = null;
      }
    }

    function update() {
      _.forEach(root_selectors, function(selector) {
        $(selector).find(".relative_ts").each(function() {
          var ts = $(this).attr("data-ts");
          var really_short = $(this).data("really-short");
          var relative_ts = TS.utility.date.toTimeAgoShort(ts, really_short);
          if (relative_ts !== $(this).text()) {
            $(this).text(relative_ts);
          }
        });
      });
    }
    return {
      start: start,
      stop: stop
    };
  }();
})();
(function() {
  "use strict";
  TS.registerModule("utility.members", {
    checkMemberMatch: function(member, regex, names_only) {
      if (TS.boot_data.feature_name_tagging_client) {
        return !names_only && member.profile && member.profile.email && member.profile.email.match(regex) || member.profile && member.profile.real_name_normalized && member.profile.real_name_normalized.match(regex) || member.profile && member.profile.real_name && member.profile.real_name.match(regex) || member.profile && member.profile.display_name_normalized && member.profile.display_name_normalized.match(regex) || member.profile && member.profile.display_name && member.profile.display_name.match(regex);
      }
      return member.name && member.name.match(regex) || !names_only && member.profile && member.profile.email && member.profile.email.match(regex) || member.profile && member.profile.real_name_normalized && member.profile.real_name_normalized.match(regex) || member.profile && member.profile.real_name && member.profile.real_name.match(regex);
    },
    filterMembersByQuery: function(members, query) {
      query = _.toString(query).trim().toLowerCase().replace(/^@/, "");
      if (!query) return members;
      var query_regexp = new RegExp(TS.utility.regexpEscape(query), "i");
      return members.filter(function(member) {
        return TS.utility.members.checkMemberMatch(member, query_regexp);
      });
    },
    getBroadcastKeywordsForUser: function() {
      var model_ob = TS.shared.getActiveModelOb();
      if (!model_ob) return [];
      var everyone_keywords = [];
      var channel_keywords = [];
      var is_enterprise_required_channel = TS.boot_data.page_needs_enterprise && TS.channels.isChannelRequired(model_ob) && model_ob.is_shared;
      if (model_ob.is_general && TS.permissions.members.canAtMentionEveryone() && !is_enterprise_required_channel) {
        everyone_keywords = _.filter(TS.model.BROADCAST_KEYWORDS, function(bk) {
          return bk.id === "BKeveryone" || bk.id === "BKall";
        });
      }
      if (TS.permissions.members.canAtChannelOrGroup() && (model_ob.is_channel || model_ob.is_group) && (!model_ob.is_general || TS.permissions.members.canAtMentionEveryone()) && !is_enterprise_required_channel) {
        channel_keywords = _.filter(TS.model.BROADCAST_KEYWORDS, function(bk) {
          return bk.id === "BKchannel" || bk.id === "BKgroup" || bk.id === "BKhere";
        });
      }
      return everyone_keywords.concat(channel_keywords);
    },
    isMember: function(ob) {
      var ob_type = _.get(ob, "id[0]");
      return ob_type === "U" || ob_type === "W";
    },
    isMemberRelevantToModel: function(member, model_ob) {
      if (!_.isObject(member)) member = TS.members.getMemberById(member);
      if (!member) {
        return false;
      }
      if (member.is_slackbot) {
        return true;
      }
      if (member.deleted) {
        return false;
      }
      if (!_.isObject(model_ob)) {
        model_ob = TS.shared.getModelObById(model_ob) || TS.shared.getActiveModelOb();
      }
      if (TS.boot_data.page_needs_enterprise && model_ob && !model_ob.is_shared) {
        return member._is_local;
      }
      return true;
    },
    isMemberElement: function(el) {
      if (el.hasAttribute("data-member-id")) return true;
      if (el.hasAttribute("data-member-name")) return true;
      if (el.classList.contains("internal_member_link")) return true;
      return false;
    },
    isMemberNonBotNonDeletedNonSelf: function(member) {
      var is_human = member && !member.deleted && !member.is_bot && !member.is_slackbot;
      return is_human && !member.is_self;
    },
    getEntityFromMessage: function(message) {
      if (!message) return false;
      var member;
      if (message.user === "USLACKBOT" && message.file && message.file.bot_id) {
        member = TS.utility.members.getEntityFromFile(message.file);
      } else {
        member = message.comment ? TS.members.getMemberById(message.comment.user) : TS.members.getMemberById(message.user);
      }
      return member;
    },
    getUsernamesMentionedInString: function(str) {
      var matches = _.toLower(str).match(/\B@\w+/g);
      if (!matches) return [];
      return _(matches).map(function(mention) {
        return mention.replace(/^@/, "");
      }).uniq().compact().value();
    },
    getEntityFromFile: function(file) {
      if (!file) return false;
      var member;
      if (file.user === "USLACKBOT" && file.bot_id) {
        member = TS.bots.getBotById(file.bot_id);
        if (!member) member = {};
        member.is_bot = true;
        member.is_service = true;
      } else {
        member = TS.members.getMemberById(file.user);
      }
      return member;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("utility", {
    onStart: function() {
      TS.utility.makeRefererSafeLink = _.memoize(TS.utility.makeRefererSafeLink);
      if (TS.ms) TS.ms.connected_sig.add(TS.utility.resetRefererSafeLinkCache);
      if (TS.prefs && TS.prefs.team_hide_referers_changed_sig) TS.prefs.team_hide_referers_changed_sig.add(TS.utility.resetRefererSafeLinkCache);
      _me_en = TS.i18n.t("me", "utility")();
      _you_en = TS.i18n.t("you", "utility")();
    },
    keymap: {
      alt: 18,
      ctrl: 17,
      cmd_ff: 224,
      cmd_other: 91,
      cmd_right: 93,
      esc: 27,
      shift: 16,
      tab: 9,
      del: 8,
      "delete": 46,
      enter: 13,
      left: 37,
      up: 38,
      right: 39,
      down: 40,
      pageup: 33,
      pagedown: 34,
      end: 35,
      home: 36,
      space: 32,
      semicolon: 59,
      equals_sign: 187,
      minus_sign: 189,
      comma: 188,
      period: 190,
      left_square_bracket: 219,
      right_square_bracket: 221,
      V: 86,
      a: 65,
      e: 69,
      b: 66,
      k: 75,
      i: 73,
      z: 90,
      y: 89,
      insert: 45
    },
    email_regex: new RegExp("^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$", "i"),
    regexpEscape: function(text, len_limit) {
      text = text || "";
      len_limit = len_limit || 5e5;
      len_limit = Math.min(len_limit, 5e5);
      if (text.length > len_limit) {
        text = text.substr(0, len_limit);
      }
      return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    },
    ensureInArray: function(A, val) {
      if (A.indexOf(val) > -1) return false;
      A.push(val);
      return true;
    },
    compareVersions: function(version_a, version_b) {
      if (!version_a.major) version_a.major = 0;
      if (!version_a.minor) version_a.minor = 0;
      if (!version_b.major) version_b.major = 0;
      if (!version_b.minor) version_b.minor = 0;
      if (version_a.major === version_b.major) {
        if (version_a.minor == version_b.minor) return 0;
        return version_a.minor > version_b.minor ? 1 : -1;
      }
      return version_a.major > version_b.major ? 1 : -1;
    },
    makeComparableVersion: function(ver) {
      var noBeta = ver.split("-")[0];
      return _.reduce(noBeta.split("."), function(acc, x) {
        return acc * 1e3 + parseInt(x, 10);
      }, 0);
    },
    compareSemanticVersions: function(version_a, version_b) {
      var lhs = TS.utility.makeComparableVersion(version_a);
      var rhs = TS.utility.makeComparableVersion(version_b);
      if (lhs === rhs) return 0;
      return lhs > rhs ? 1 : -1;
    },
    doRectsOverlap: function(r1, r2) {
      return !(r2.left > r1.right || r2.right < r1.left || r2.top > r1.bottom || r2.bottom < r1.top);
    },
    doesRectContainRect: function(r1, r2, tolerance, vertical_only) {
      tolerance = tolerance || 0;
      if (r2.top < r1.top - tolerance) return false;
      if (r2.bottom > r1.bottom + tolerance) return false;
      if (vertical_only) return true;
      if (r2.left < r1.left - tolerance) return false;
      if (r2.right > r1.right + tolerance) return false;
      return true;
    },
    shouldLinksHaveTargets: function() {
      return !!(TS.client || TS.web && TS.web.space);
    },
    parseJSONOrElse: function(json_str, fallback) {
      if (json_str === "") return fallback;
      try {
        return JSON.parse(json_str);
      } catch (err) {
        return fallback;
      }
    },
    stringifyJSONOrElse: function(json_ob, replacer, space, fallback) {
      try {
        return JSON.stringify(json_ob, replacer, space);
      } catch (err) {
        if (typeof fallback === "function") {
          return fallback(err);
        }
        return fallback;
      }
    },
    ordinalNumber: function(number) {
      return TS.i18n.t("{number_str, selectordinal, one{#st}two{#nd}few{#rd}other{#th}}", "utilities")({
        number_str: number.toString()
      });
    },
    getChannelName: function(model_ob) {
      var id = model_ob.id;
      var name = model_ob.name;
      var is_im = model_ob.is_im;
      if (TS.boot_data.feature_name_tagging_client && (is_im || model_ob.is_mpim)) {
        return id;
      }
      if (TS.boot_data.feature_intl_channel_names && (model_ob.is_channel || model_ob.is_group)) {
        return id;
      }
      if (is_im) {
        return "@" + name;
      }
      return name;
    },
    getChannelNameFromUrl: function(url) {
      var path = TS.utility.getPathFromSlackUrl(url);
      if (!path) {
        return "";
      }
      var is_message = path[0] == "messages" || path[0] == "archives";
      if (!is_message) {
        return "";
      }
      return decodeURIComponent(path[1]);
    },
    getMessageTimestampFromUrl: function(url) {
      var path = TS.utility.getPathFromSlackUrl(url);
      if (!path) {
        return "";
      }
      var is_message = path[0] == "messages" || path[0] == "archives";
      if (!is_message) {
        return "";
      }
      var ts = path[2];
      if (!ts || ts[0] != "p" || ts.length != 17) return "";
      ts = ts.substr(1, 10) + "." + ts.substr(11);
      return decodeURIComponent(ts);
    },
    getFlexNameFromUrl: function(url) {
      var path = TS.utility.getPathFromSlackUrl(url);
      if (!path) {
        return "";
      }
      var is_message = {
        messages: true,
        archives: true
      }[path[0]];
      var index = is_message ? 2 : 1;
      var flex = path[index];
      if (!flex) {
        return "";
      }
      return decodeURIComponent(flex);
    },
    getFlexExtraFromUrl: function(url) {
      var path = TS.utility.getPathFromSlackUrl(url);
      if (!path) {
        return "";
      }
      var is_message = {
        messages: true,
        archives: true
      }[path[0]];
      var index = is_message ? 3 : 2;
      var flex_extra = path[index];
      if (!flex_extra) {
        return "";
      }
      return decodeURIComponent(flex_extra).replace(/%2F/g, "/");
    },
    isUnreadViewPath: function(path) {
      return path.indexOf("/unreads") === 0;
    },
    isThreadsViewPath: function(path) {
      return path.indexOf("/threads") === 0;
    },
    isAppIndexViewPath: function(path) {
      return path.indexOf("/app-index") === 0;
    },
    getPathFromSlackUrl: function(url) {
      var matches = url.match(_slack_url_re);
      var splitter = matches && matches[1];
      if (!splitter) {
        return;
      }
      var parts = url.split(splitter);
      var path = parts[1].split("?")[0];
      return (splitter + path).split("/");
    },
    refashionUrl: function(url, view_path, flex_name, flex_extra) {
      var url_parts = url.split(/\.com\/+(messages|unreads|threads|app-index)/);
      var base = url_parts[0] + ".com";
      var params = url_parts[2].split("?");
      var qs = params[1] ? "?" + params[1] : "";
      var path = [view_path, flex_name, flex_extra].filter(function(val) {
        return val;
      }).join("/") + "/";
      return base + path + qs;
    },
    dataURItoBlob: function(dataURI) {
      return TS.utility.base64StrtoBlob(TS.utility.base64StrFromDataURI(dataURI));
    },
    base64StrFromDataURI: function(dataURI) {
      return dataURI.split(",")[1];
    },
    base64StrtoBlob: function(str) {
      var byteString = atob(str);
      var arrayBuffer = new ArrayBuffer(byteString.length);
      var _ia = new Uint8Array(arrayBuffer);
      for (var i = 0; i < byteString.length; i += 1) {
        _ia[i] = byteString.charCodeAt(i);
      }
      var dataView = new DataView(arrayBuffer);
      var blob = new Blob([dataView]);
      return blob;
    },
    ellipsize: function(str, len) {
      if (!str) return str;
      if (!len || !parseInt(len, 10)) len = 50;
      if (str.length > len) {
        var prefix = str.substr(0, len / 2);
        var suffix = str.substr(-(len / 2), str.length);
        str = prefix + "..." + suffix;
      }
      return str;
    },
    makeSafeForDomId: function(str) {
      return String(str).replace(/\./g, "_");
    },
    makeSafeForDomClass: function(str) {
      return str.replace(/\s/g, "_");
    },
    getImageIconClass: function(image, defaultClass) {
      var icon_class = defaultClass;
      var max_width = 80;
      var max_height = 80;
      if (image && (image.thumb_360_w < max_width || image.thumb_360_h < max_height)) {
        if (image.thumb_360_w > image.thumb_360_h) {
          icon_class = "landscape";
        } else if (image.thumb_360_w < image.thumb_360_h) {
          icon_class = "portrait";
        } else {
          icon_class = "square";
        }
      }
      return icon_class;
    },
    getAppliedClasses: function(class_map) {
      return _.reduce(class_map, function(result, value, key) {
        if (value) result.push(key);
        return result;
      }, []).join(" ");
    },
    convertFilesize: function(bytes, decimalPlaces, iec) {
      if (bytes === 0) return iec ? "0 bits" : "0 bytes";
      var threshold = iec ? 1024 : 1e3;
      if (Math.abs(bytes) < threshold) {
        return bytes + "B";
      }
      var units = iec ? ["KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"] : ["kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];
      var power = -1;
      do {
        bytes /= threshold;
        power += 1;
      } while (Math.abs(bytes) >= threshold && power < units.length - 1);
      return decimalPlaces ? bytes.toFixed(decimalPlaces) + units[power] : Math.round(bytes) + units[power];
    },
    numberWithCommas: function(x) {
      if (x === undefined || x === null) return "";
      var parts = x.toString().split(".");
      parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
      return parts.join(".");
    },
    numberWithK: function(x) {
      if (x > 999) {
        x = Math.round(x / 1e3 * 10) / 10;
        return TS.utility.numberWithCommas(x) + "K";
      }
      return TS.utility.numberWithCommas(x);
    },
    cleanChannelName: function(name) {
      var replace_regx = XRegExp("[^\\pL\\pM\\pN_-]+", "g");
      var zalgo_regx = XRegExp("[\\pM\\pM\\pM]", "g");
      var leftovers_regx = /^[-_]+?$/;
      name = name.toLowerCase();
      name = name.replace(/^#+/g, "");
      name = name.replace(/ /g, "-");
      name = name.replace(replace_regx, "_");
      name = name.replace(/-+/g, "-");
      name = name.replace(/_+/g, "_");
      if (leftovers_regx.test(name) || zalgo_regx.test(name)) {
        return null;
      }
      return name;
    },
    openInNewTab: function(url, target) {
      url = TS.utility.htmlEntities(url);
      if (url.indexOf("/") === 0 && TS.boot_data.team_url) {
        var team_url = TS.boot_data.team_url;
        team_url = team_url.substr(0, team_url.length - 1);
        url = team_url + url;
      }
      var action = url;
      var fields = "";
      if (TS.utility.urlNeedsRefererHiding(url)) {
        fields = '<input type="hidden" name="url" value="' + TS.utility.htmlEntities(url) + '">';
        action = "https://" + TS.boot_data.redir_domain + "/link";
      } else {
        var queryIndex = action.indexOf("?");
        if (queryIndex !== -1) {
          var query = action.substring(queryIndex + 1, action.length);
          action = action.substring(0, queryIndex);
          if (query.length) {
            var params = query.split("&amp;");
            for (var i = 0; i < params.length; i += 1) {
              var pair = params[i].split("=");
              fields += '<input type="hidden" name="' + TS.utility.htmlEntities(pair[0]) + '" value="' + (pair.length > 1 ? TS.utility.htmlEntities(pair[1]) : "") + '">';
            }
          }
        }
      }
      $("<form>" + fields + "</form>").attr({
        method: "GET",
        action: action,
        target: target
      }).appendTo("body").submit().remove();
    },
    isScalar: function(mixed_var) {
      return /boolean|number|string/.test(typeof mixed_var);
    },
    sanitizeHTML: function(html, valid_tags, valid_attrs, return_node_only) {
      var _sanitizeNode = function(node) {
        var tag_name = node.tagName.toLowerCase();
        if (valid_tags.indexOf(tag_name) < 0) {
          return null;
        }
        Array.prototype.slice.apply(node.attributes).forEach(function(attr) {
          if (valid_attrs.indexOf(attr.name) < 0) {
            node.attributes.removeNamedItem(attr.name);
          }
        });
        Array.prototype.slice.apply(node.children).forEach(function(childNode) {
          var sanitized_child = _sanitizeNode(childNode);
          if (!sanitized_child) {
            node.removeChild(childNode);
          }
        });
        return node;
      };
      _parser = _parser || new DOMParser;
      var doc = _parser.parseFromString(html, "text/html") || _parser.parseFromString(html, "text/xml");
      var body = doc.body;
      if (body.children.length != 1) {
        return "";
      }
      var sanitized = _sanitizeNode(body.children[0]);
      body = null;
      doc = null;
      if (sanitized) {
        return return_node_only ? sanitized : sanitized.outerHTML;
      }
      return "";
    },
    getChildTextNodes: function(el) {
      var nodes = [];
      if (!el) return nodes;
      if (el instanceof Text) {
        nodes.push(el);
        return nodes;
      }
      var walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false);
      var node = walker.nextNode();
      while (node) {
        nodes.push(node);
        node = walker.nextNode();
      }
      return nodes;
    },
    getAttributesFromHTMLString: function(html) {
      _parser = _parser || new DOMParser;
      var doc = _parser.parseFromString(html, "text/html") || _parser.parseFromString(html, "text/xml");
      var body = doc.body;
      if (body.children.length != 1) {
        return {};
      }
      var attrs = {};
      [].slice.apply(body.children[0].attributes).forEach(function(attr) {
        attrs[attr.name] = attr.value;
      });
      body = null;
      doc = null;
      return attrs;
    },
    findUrls: function(string) {
      return string.match(URL_REGEXP) || [];
    },
    linkify: function(string, target, recognize_www, internal) {
      if (!string) return string;
      string = string.replace(URL_REGEXP, function(match) {
        var uri;
        if (match.toLowerCase().indexOf("www.") === 0) {
          if (!recognize_www) {
            return match;
          }
          uri = "http://" + match;
        } else {
          uri = match;
        }
        if (internal) {
          return "<" + uri + "|" + match + ">";
        }
        return "<a " + TS.utility.makeRefererSafeLink(uri) + ' target="' + (target || "") + '">' + match + "</a>";
      });
      return string;
    },
    linkifyInternal: function(string, recognize_www) {
      return TS.utility.linkify(string, "", recognize_www, true);
    },
    getCursorPosition: function(selector) {
      if (TS.utility.contenteditable.supportsTexty()) {
        if (_.isString(selector)) selector = $(selector);
        return TS.utility.contenteditable.cursorPosition(selector);
      }
      var el;
      var pos;
      var sel;
      if (selector instanceof HTMLElement) {
        el = selector;
      } else {
        el = $(selector).get(0);
      }
      pos = {
        start: 0,
        end: 0,
        length: 0
      };
      if ("selectionStart" in el) {
        pos.start = el.selectionStart;
        pos.end = el.selectionEnd;
        pos.length = Math.abs(el.selectionEnd - el.selectionStart);
      } else if ("selection" in document) {
        el.focus();
        sel = document.selection.createRange();
        pos.length = document.selection.createRange().text.length;
        sel.moveStart("character", -el.value.length);
        pos.start = sel.text.length - pos.length;
        pos.end = pos.start + pos.length;
      }
      return pos;
    },
    setCursorPosition: function(selector, pos, length) {
      if (TS.utility.contenteditable.supportsTexty()) {
        if (_.isString(selector)) selector = $(selector);
        return TS.utility.contenteditable.cursorPosition(selector, pos, length);
      }
      var el;
      var range;
      el = $(selector).get(0);
      if (el) {
        if (el.setSelectionRange) {
          el.focus();
          if (length) {
            el.setSelectionRange(pos, pos + length);
          } else {
            el.setSelectionRange(pos, pos);
          }
        } else if (el.createTextRange) {
          range = el.createTextRange();
          if (length) {
            range.moveStart("character", pos);
            range.moveEnd("character", length - pos);
          } else {
            range.move("character", pos);
          }
          range.select();
        }
      }
    },
    htmlEntities: function(str) {
      if (!str && str !== 0) return "";
      return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
    },
    unHtmlEntities: function(str) {
      if (!str && str !== 0) return "";
      return String(str).replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&").replace(/&quot;/g, '"');
    },
    preg_quote: function(str) {
      return (str + "").replace(/([\\.+*?[^\]$(){}=!<>|:])/g, "\\$1");
    },
    getActiveElementProp: function(name) {
      if (!document.activeElement) return "";
      if (name === "NODENAME") {
        if (!document.activeElement.nodeName) return "";
        return document.activeElement.nodeName.toUpperCase();
      }
      return document.activeElement[name];
    },
    isTabCompleteShowing: function() {
      if (!TS.utility.isFocusOnInput()) return false;
      var $input = $(document.activeElement);
      if (!$input.tab_complete_ui) return false;
      if (!$input.tab_complete_ui("instance")) return false;
      if ($input.tab_complete_ui("isShowing") || $input.tab_complete_ui("wasJustHidden")) {
        return true;
      }
      return false;
    },
    isFocusOnInput: function() {
      var NODENAME = TS.utility.getActiveElementProp("NODENAME");
      if (NODENAME == "") return false;
      if (NODENAME === "INPUT") return true;
      if (NODENAME === "TEXTAREA") return true;
      if (NODENAME === "SELECT") return true;
      if (TS.utility.contenteditable.isContenteditable(document.activeElement)) return true;
      return false;
    },
    formatTopicOrPurpose: function(txt, no_preformatted) {
      txt = TS.format.unFormatMsg(txt);
      txt = TS.format.cleanMsg(txt);
      txt = TS.utility.linkifyInternal(txt, true);
      txt = TS.format.formatWithOptions(txt, {}, {
        no_preformatted: !!no_preformatted
      });
      txt = txt.replace(/(<br[^>]*>)/, '<span class="hidden br_ellipsis">…</span>$1');
      return txt;
    },
    populateInput: function(input, txt, cursor_pos) {
      if (!txt) txt = "";
      var $input = $(input);
      var should_use_html = TS.boot_data.feature_name_tagging_client_extras && TS.utility.contenteditable.supportsTexty() && $input.is(TS.client.ui.$msg_input);
      if (should_use_html) {
        var new_html = txt;
        if (TS.boot_data.feature_name_tagging_client_extras) {
          var formatted = TS.format.formatSlugs(new_html, cursor_pos);
          new_html = formatted.html;
          cursor_pos = formatted.cursor.start;
        }
        $input.html(new_html);
        $input.data("textchange_lastvalue", $input.html());
        TS.utility.queueRAF(function populateInputRAF() {
          $input.trigger("textchange");
        });
        TS.utility.contenteditable.cursorPosition($input, cursor_pos);
      } else {
        TS.utility.contenteditable.value($input, txt);
        if (_.isNumber(cursor_pos)) {
          TS.utility.contenteditable.cursorPosition($input, cursor_pos);
        }
        $input.data("textchange_lastvalue", txt);
        TS.utility.queueRAF(function populateInputRAF() {
          $input.trigger("autosize").trigger("autosize-resize");
          $input.trigger("textchange");
        });
      }
    },
    populateThreadInputs: function(input_txt, c_id, thread_ts) {
      if (TS.ui.replies.activeConvoModelId() === c_id && TS.ui.replies.activeConvoThreadTs() === thread_ts) {
        TS.ui.replies.populateReplyInput(input_txt);
      }
      if (TS.model.threads_view_is_showing) {
        TS.ui.thread.findAndPopulateInput(input_txt, c_id, thread_ts);
      }
    },
    urlNeedsRefererHiding: function(url) {
      if (!url) return false;
      url = url.toLowerCase();
      if (url.indexOf("https://") !== 0 && url.indexOf("http://") !== 0 && url.indexOf("ftp://") !== 0 && url.indexOf("sftp://") !== 0) return false;
      url = url.replace(/^https:\/\//, "").replace(/^http:\/\//, "");
      var wl = getRefererHidingWhiteList();
      for (var i = 0; i < wl.length; i += 1) {
        if (url == wl[i] || url.indexOf(wl[i] + "/") === 0) return false;
      }
      return true;
    },
    referer_safe_url_map: {},
    makeRefererSafeLink: function(url) {
      if (typeof url !== "string") {
        TS.error("Expected url to be a string, got: " + typeof url);
        return;
      }
      url = TS.format.replaceHighlightMarkers(url);
      var html_url = url.replace(/&amp;/g, "&");
      if (html_url.match(/javascript:/gi)) {
        html_url = "#";
      }
      var get_raw_node = true;
      var sanitized_node = TS.utility.sanitizeHTML('<a href="' + html_url + '"></a>', ["a"], ["href"], get_raw_node) || null;
      if (sanitized_node) {
        html_url = sanitized_node.href;
      }
      html_url = TS.utility.htmlEntities(html_url);
      html_url = html_url.replace(/&amp;/g, "&");
      if (url && url.lastIndexOf("/") !== url.length - 1) {
        if (html_url && html_url.lastIndexOf("/") === html_url.length - 1) {
          html_url = html_url.slice(0, -1);
        }
      }
      html_url = html_url || "#";
      var html = 'href="' + html_url + '"';
      var on_method = "onclick";
      var referer_policy = _getRefererPolicy();
      if (!TS.model || !TS.model.is_our_app) {
        if (referer_policy && referer_policy.rewrite_on_right_click) {
          on_method = "onmousedown";
        }
      }
      if (!TS.utility.urlNeedsRefererHiding(url)) return html;
      if (TS.utility.externalURLsNeedRedirecting()) {
        var encoded_url = encodeURIComponent(html_url);
        var proxy_url = "https://" + TS.boot_data.redir_domain + "/link?url=" + encoded_url + (referer_policy && referer_policy.redirect_type ? "&v=" + referer_policy.redirect_type : "");
        var map_key = TS.utility.htmlEntities(encoded_url);
        TS.utility.referer_safe_url_map[map_key] = html_url;
        html += ' data-referer-safe="1" ' + on_method + '="this.href=&quot;' + proxy_url + '&quot;" onmouseover="this.href=TS.utility.referer_safe_url_map[&quot;' + map_key + '&quot;]" data-referer-original-href="' + html_url + '" rel="noreferrer"';
      } else {
        html += ' rel="noreferrer"';
      }
      return html;
    },
    resetRefererSafeLinkCache: function() {
      if (TS.utility.makeRefererSafeLink && TS.utility.makeRefererSafeLink.cache) TS.utility.makeRefererSafeLink.cache.clear();
    },
    makeSureAllExternalLinksAreRefererSafe: function($el) {
      var start = Date.now();
      var bads = [];
      if (TS.utility.externalURLsNeedRedirecting()) {
        $el.find("a[href]:not([data-referer-safe])").each(function() {
          var a = $(this);
          var href = a.attr("href");
          if (!TS.utility.urlNeedsRefererHiding(href)) return;
          bads.push(this.outerHTML);
          a.removeAttr("href");
          var new_html = this.outerHTML.replace("<a", function() {
            return "<a " + TS.utility.makeRefererSafeLink(href) + " ";
          });
          a.replaceWith(new_html);
          bads[bads.length - 1] += "\n->\n" + new_html;
        });
        if (TS.model && TS.model.team && TS.boot_data.feature_tinyspeck) {
          if (bads.length) {
            TS.log(365, "#" + $el.attr("id") + " had " + bads.length + " LINKS WITH EXT HREFS BUT NOT data-referer-safe! to fix it took " + (Date.now() - start) + "ms");
            TS.dir(365, bads);
          } else {
            TS.log(365, "#" + $el.attr("id") + " had " + bads.length + " LINKS WITH EXT HREFS BUT NOT data-referer-safe! to check it took " + (Date.now() - start) + "ms");
          }
        }
      } else {
        $el.find("a[href]:not([rel])").each(function() {
          var a = $(this);
          var href = a.attr("href");
          if (href.indexOf("mailto") === 0 || href.indexOf("skype") === 0) return;
          if (href && href !== "#") {
            if (TS.utility.urlNeedsRefererHiding(href)) {
              bads.push(this.outerHTML);
              a.attr("rel", "noreferrer");
              bads[bads.length - 1] += "\n->\n" + this.outerHTML;
            }
          } else {
            a.removeAttr("href");
          }
        });
        if (TS.model && TS.model.team && TS.boot_data.feature_tinyspeck) {
          if (bads.length) {
            TS.log(365, "#" + $el.attr("id") + " had " + bads.length + ' LINKS WITH EXT HREFS BUT WITHOUT rel="noreferrer"! to add rel it took ' + (Date.now() - start) + "ms");
            TS.dir(365, bads);
          } else {
            TS.log(365, "#" + $el.attr("id") + " had " + bads.length + ' LINKS WITH EXT HREFS BUT WITHOUT rel="noreferrer"! to check it took ' + (Date.now() - start) + "ms");
          }
        }
      }
    },
    makeSureAllLinksHaveTargets: function($el) {
      var start = Date.now();
      var bads = [];
      $el.find("a[href]:not([target])").each(function() {
        var a = $(this);
        var href = a.attr("href");
        if (href.indexOf("mailto") === 0 || href.indexOf("skype") === 0) return;
        if (href && href !== "#") {
          bads.push(this.outerHTML);
          a.attr("target", href);
          bads[bads.length - 1] += "\n->\n" + this.outerHTML;
        } else {
          a.removeAttr("href");
        }
      });
      if (TS.model && TS.model.team && TS.boot_data.feature_tinyspeck) {
        if (bads.length) {
          TS.log(365, "#" + $el.attr("id") + " had " + bads.length + " LINKS WITH HREFS BUT WITHOUT TARGETS! to add targets it took " + (Date.now() - start) + "ms");
          TS.dir(365, bads);
        } else {
          TS.log(365, "#" + $el.attr("id") + " had " + bads.length + " LINKS WITH HREFS BUT WITHOUT TARGETS! to check it took " + (Date.now() - start) + "ms");
        }
      }
      TS.utility.makeSureAllExternalLinksAreRefererSafe($el);
    },
    sortTable: function($table, td_index, order, subsort_index, subsort_order) {
      order = order === "desc" ? "desc" : "asc";
      subsort_order = subsort_order === "desc" ? "desc" : "asc";

      function sortFunc(index) {
        return function(td1, td2) {
          var a = getCellValue(td1, index);
          var b = getCellValue(td2, index);
          if ($.isNumeric(a) && $.isNumeric(b)) {
            if (a == b && subsort_index) {
              a = getCellValue(td1, subsort_index);
              b = getCellValue(td2, subsort_index);
              if ($.isNumeric(a) && $.isNumeric(b)) {
                if (subsort_order != order) {
                  return b - a;
                }
                return a - b;
              }
              if (subsort_order != order) {
                return TS.i18n.sorter(b, a);
              }
              return TS.i18n.sorter(a, b);
            }
            return a - b;
          }
          return TS.i18n.sorter(a, b);
        };
      }

      function getCellValue(tr, index) {
        return $(tr).children("td").eq(index).attr("data-sort-val");
      }
      var rows = $table.find("tr:gt(0)").toArray().sort(sortFunc(td_index));
      if (order === "desc") rows = rows.reverse();
      for (var i = 0; i < rows.length; i += 1) {
        $table.append(rows[i]);
      }
    },
    getPercSmartly: function(x, y) {
      if (!x || !y) return "0%";
      var perc = x / y * 100;
      if (perc != 100 && Math.round(perc) == 100) return "99%";
      if (perc < .7) return "<1%";
      return Math.round(perc) + "%";
    },
    isCursorWithinTBTs: function(input) {
      var p = TS.utility.contenteditable.cursorPosition(input);
      var val = TS.utility.contenteditable.value(input);
      var text_before = val.substr(0, p.end);
      var tbt_before = text_before.match(/```/g);
      if (!tbt_before) return false;
      var tbt_before_cnt = tbt_before.length;
      if (tbt_before_cnt % 2) return true;
      return false;
    },
    hex2rgb: function(hex) {
      var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
      return result ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16)
      } : undefined;
    },
    rgb2hex: function(rgb) {
      if (/^#[0-9A-F]{6}$/i.test(rgb)) return rgb;
      var rgb_match = rgb.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
      if (!rgb_match) {
        rgb_match = rgb.match(/^rgba\((\d+),\s*(\d+),\s*(\d+),\s*(\d*\.?\d+)\)$/);
      }
      if (!rgb_match) {
        return;
      }

      function hex(x) {
        return ("0" + parseInt(x, 10).toString(16)).slice(-2);
      }
      return "#" + hex(rgb_match[1]) + hex(rgb_match[2]) + hex(rgb_match[3]);
    },
    setImmediate: function(fn) {
      _set_immediate_fn(fn);
    },
    immediateDebounce: function(fn) {
      var scheduled = false;
      return function() {
        if (scheduled) {
          return;
        }
        var self = this;
        var args = arguments;
        scheduled = true;
        _set_immediate_fn(function() {
          scheduled = false;
          fn.apply(self, args);
        });
      };
    },
    debounce: function(fn, delay) {
      var timer;
      return function() {
        var self = this;
        var args = arguments;
        clearTimeout(timer);
        timer = setTimeout(function() {
          fn.apply(self, args);
        }, delay);
      };
    },
    debounceWithPromise: function(fn, delay) {
      var promise;
      return function() {
        var self = this;
        var args = arguments;
        if (promise) promise.cancel();
        promise = new Promise(function(resolve) {
          setTimeout(resolve, delay);
        }).then(function() {
          return fn.apply(self, args);
        });
        return promise;
      };
    },
    throttleFunc: function(func, ms, always_wait) {
      var data = {};
      var funcReplacement = function funcReplacement() {
        var args = Array.prototype.slice.apply(arguments);
        var has_complex_args = _.some(args, _.isObject);
        if (has_complex_args) {
          TS.error("You're passing non-scalar arguments to a function throttled with TS.utility.throttleFunc; it will likely not work as you want");
        }
        var key = "f-" + args.join("-");
        if (data[key] && data[key].context !== this) {
          throw new Error("Cannot use this function with different `this` contexts across different calls " + this + " " + data[key].context);
        }
        data[key] = data[key] || {
          requested: Date.now(),
          timeout: 0,
          context: this
        };
        if (data[key].timeout || funcReplacement.always_wait) {
          data[key].requested = Date.now();
        } else {
          func.apply(data[key].context, args);
        }
        if (data[key].timeout) return;
        data[key].timeout = setTimeout(function timerFunc() {
          var elapsed = Date.now() - data[key].requested;
          if (elapsed >= ms) {
            func.apply(data[key].context, args);
            delete data[key];
          } else {
            data[key].timeout = setTimeout(timerFunc, ms - elapsed);
          }
        }, ms);
      };
      funcReplacement.always_wait = !!always_wait;
      return funcReplacement;
    },
    cmdKey: function(e) {
      if (!e) return false;
      if (TS.model.is_mac) {
        return !!e.metaKey;
      }
      return !!e.ctrlKey;
    },
    looksLikeKeyboardShortcut: function(e) {
      var has_modifier = e.ctrlKey || e.altKey || e.metaKey;
      if (!has_modifier) return false;
      if (e.keyCode === TS.utility.keymap.alt || e.keyCode === TS.utility.keymap.ctrl || e.keyCode === TS.utility.keymap.cmd_ff || e.keyCode === TS.utility.keymap.cmd_other || e.keyCode === TS.utility.keymap.cmd_right) {
        return false;
      }
      var char = String.fromCharCode(e.keyCode);
      if (/^(\w|[$-\/:-?{-~!"^_`[\]])$/i.test(char)) return true;
      return true;
    },
    isForwardDeleteKey: function(e) {
      if (e.keyCode === TS.utility.keymap.delete) return true;
      if (TS.model.is_mac && e.ctrlKey && e.key === "d") return true;
      return false;
    },
    isBoldKey: function(e) {
      if (!e) return false;
      return e.keyCode === TS.utility.keymap.b && TS.utility.cmdKey(e);
    },
    isItalicKey: function(e) {
      if (!e) return false;
      return e.keyCode === TS.utility.keymap.i && TS.utility.cmdKey(e);
    },
    throttle: function() {
      var defaults;
      var data;
      defaults = {
        delay: 200,
        timer_group: "generic"
      };
      data = {
        timers: {},
        queues: {}
      };

      function processQueue(timer_group) {
        var i;
        var j;
        if (data.timers[timer_group]) {
          if (data.queues[timer_group]) {
            for (i = 0, j = data.queues[timer_group].length; i < j; i += 1) {
              if (data.queues[timer_group][i]) {
                data.queues[timer_group][i]();
              }
            }
          }
          data.queues[timer_group] = null;
          data.timers[timer_group] = null;
        }
      }

      function method(func, timer_group, delay) {
        if (!func) {
          return false;
        }
        timer_group = timer_group || defaults.timer_group;
        if (!data.timers[timer_group]) {
          delay = delay || defaults.delay;
          data.timers[timer_group] = window.setTimeout(function() {
            processQueue(timer_group);
          }, delay);
        }
        if (!data.queues[timer_group]) {
          data.queues[timer_group] = [];
        }
        if (data.queues[timer_group].indexOf) {
          if (data.queues[timer_group].indexOf(func) === -1) {
            data.queues[timer_group].push(func);
          }
        } else {
          data.queues[timer_group].push(func);
        }
      }
      return {
        method: method
      };
    }(),
    getImgProxyURL: function(url, width, height) {
      return TS.utility.getImgProxyURLWithOptions(url, {
        width: width,
        height: height
      });
    },
    getImgProxyURLWithOptions: function(url, opts) {
      if (!url) return url;
      if (!TS.boot_data.image_proxy_url) return url;
      var image_proxy_url = TS.boot_data.image_proxy_url;
      if (url.indexOf(image_proxy_url) === 0) return url;
      var i;
      var j;
      var whitelist = getRefererHidingWhiteList();
      var test_url;
      if (!opts.emoji && url.indexOf("https://") === 0) {
        test_url = url.replace(/^https:\/\//, "");
        for (i = 0, j = whitelist.length; i < j; i += 1) {
          if (test_url.indexOf(whitelist[i] + "/") === 0) {
            if (opts.stop_animations && whitelist[i] === "slack-imgs.com") {
              var o1 = TS.utility.url.urlQueryStringParse(test_url).o1;
              var value;
              if (opts.stop_animations || TS.model.prefs.a11y_animations === false) {
                value = o1 ? o1 + ".gu" : "gu";
              } else {
                value = o1 && o1.replace(/\.gu|gu/, "");
              }
              return TS.utility.url.setUrlQueryStringValue(url, "o1", value);
            }
            return url;
          }
        }
      }
      if (url.indexOf("/img/") === 0) {
        return url;
      }
      image_proxy_url = TS.utility.url.setUrlQueryStringValue(image_proxy_url, "c", "1");
      var optparts = [];
      var w = parseInt(opts.width, 10);
      var h = parseInt(opts.height, 10);
      if (w && h) {
        optparts.push("wi" + w);
        optparts.push("he" + h);
        if (opts.resize && TS.boot_data.feature_use_imgproxy_resizing) {
          optparts.push("si");
        }
      }
      if (opts.rotate) {
        optparts.push("ro");
      }
      if (opts.render_svg) {
        optparts.push("sv2");
      }
      if (opts.convert_ico) {
        optparts.push("ip");
      }
      if (opts.stop_animations || TS.model.prefs.a11y_animations == false) {
        optparts.push("gu");
      }
      if (optparts.length > 0) {
        image_proxy_url = TS.utility.url.setUrlQueryStringValue(image_proxy_url, "o1", optparts.join("."));
      }
      return TS.utility.url.setUrlQueryStringValue(image_proxy_url, "url", url);
    },
    rAF: function() {
      var vendors = ["ms", "moz", "webkit", "o"];
      var requestAnimationFrame = window.requestAnimationFrame;
      var x;
      for (x = 0; x < vendors.length && !requestAnimationFrame; x += 1) {
        requestAnimationFrame = window[vendors[x] + "RequestAnimationFrame"];
      }
      if (!requestAnimationFrame) {
        var last_time = 0;
        return function(callback) {
          var curr_time = Date.now();
          var time_to_call = Math.max(0, 16 - (curr_time - last_time));
          var id = window.setTimeout(function() {
            callback(curr_time + time_to_call);
          }, time_to_call);
          last_time = curr_time + time_to_call;
          return id;
        };
      }
      return function(fn) {
        return requestAnimationFrame.call(window, fn);
      };
    }(),
    cancelRAF: function() {
      var vendors = ["ms", "moz", "webkit", "o"];
      var cancelAnimationFrame = window.cancelAnimationFrame;
      var x;
      for (x = 0; x < vendors.length && !cancelAnimationFrame; x += 1) {
        cancelAnimationFrame = window[vendors[x] + "CancelAnimationFrame"] || window[vendors[x] + "CancelRequestAnimationFrame"];
      }
      if (!cancelAnimationFrame) {
        return function(id) {
          clearTimeout(id);
        };
      }
      return function(id) {
        cancelAnimationFrame.call(window, id);
      };
    }(),
    queueRAF: function(rafCallback) {
      if (TS.boot_data && TS.boot_data.feature_js_raf_queue) {
        _rafQueue.add(rafCallback);
      } else {
        rafCallback();
      }
    },
    startAnimation: function(callback) {
      return _animationManager.subscribe(callback);
    },
    getLocationHashString: function(doc) {
      doc = doc || document;
      var hash = doc.location.hash;
      if (hash && hash.length) return hash.substr(1);
      return hash;
    },
    loadUrlInWindowIfOnline: function(url, doc) {
      doc = doc || document;
      TS.api.call("api.test", {}, function(ok) {
        if (ok) {
          $("body").addClass("hidden");
          doc.location = url;
        } else {
          TS.generic_dialog.alert(TS.i18n.t("You can’t perform that action because you are not online :(", "utility")());
        }
      });
    },
    externalURLsNeedRedirecting: function() {
      if (TS.model.team && TS.model.team.prefs && TS.model.team.prefs.hide_referers && !TS.model.is_our_app) return true;
      return false;
    },
    swapInRedirUrlForIframe: function(html, referer_policy) {
      referer_policy = referer_policy || _getRefererPolicy();
      if (!referer_policy) return html;
      if (!referer_policy.iframe_redirect_type) return html;
      var $html = $(html);
      var src = $html.attr("src");
      if (!src) return html;
      if (TS.qs_args.test_iframe_referers == "1") {
        src = "https://" + document.location.host + "/referertester.html?" + Date.now();
      }
      src = "https://" + TS.boot_data.redir_domain + "/link?v=" + referer_policy.iframe_redirect_type + "&url=" + encodeURIComponent(src);
      $html.attr("src", src);
      html = $html[0].outerHTML;
      if (TS.qs_args.test_iframe_referers == "1") {
        TS.info("html with redir:" + html);
      }
      return html;
    },
    getPlaceholderHTMLFromIframe: function(html) {
      html = html.replace(/<iframe/, "<div").replace(/<\/iframe/, "</div");
      var $html = $(html);
      $html.css("height", $html.attr("height") + "px").css("width", $html.attr("width") + "px").attr("data-real-src", $html.attr("src")).attr("src", "").addClass("iframe_placeholder");
      html = $html[0].outerHTML;
      return html;
    },
    getIframeHTMLFromPlaceholder: function(html) {
      html = html.replace(/<div/, "<iframe").replace(/<\/div/, "</iframe");
      var $html = $(html);
      $html.attr("src", $html.data("real-src")).removeClass("iframe_placeholder");
      html = $html[0].outerHTML;
      return html;
    },
    isArrowKey: function(which) {
      var keymap = TS.utility.keymap;
      if (which == keymap.down) return true;
      if (which == keymap.up) return true;
      if (which == keymap.right) return true;
      if (which == keymap.left) return true;
      return false;
    },
    isPageKey: function(which) {
      var keymap = TS.utility.keymap;
      if (which == keymap.pageup) return true;
      if (which == keymap.pagedown) return true;
      if (which == keymap.home) return true;
      if (which == keymap.end) return true;
      return false;
    },
    isNumericKey: function(which) {
      if (which >= 48 && which <= 57) return true;
      return false;
    },
    getFileIDFromURL: function(url) {
      if (!url) return null;
      url = TS.utility.normalizeDevHost(String(url));
      var files_url_parser = document.createElement("a");
      files_url_parser.href = TS.model.files_url;
      var files_url_hostname = files_url_parser.host;
      var input_url_parser = document.createElement("a");
      input_url_parser.href = url;
      var pathname = input_url_parser.pathname;
      while (pathname.indexOf("/") === 0) {
        pathname = pathname.substr(1);
      }
      var valid_hostnames = [files_url_hostname, "files.dev.slack.com", "files.staging.slack.com", "files.slack.com"];
      if (TS.model.enterprise && TS.model.enterprise.domain) {
        if (!TS.boot_data || TS.boot_data.version_ts !== "dev") {
          valid_hostnames.push(TS.model.enterprise.domain + ".enterprise.slack.com");
        } else {
          valid_hostnames.push(TS.model.enterprise.domain + ".enterprise.dev.slack.com");
        }
      }
      if (valid_hostnames.indexOf(input_url_parser.host) === -1) {
        return null;
      }
      var file_id;
      var pathname_parts;
      if (pathname.indexOf("files/") === 0) {
        pathname_parts = pathname.split("/");
        if (pathname_parts.length < 3) return null;
        var member_name = pathname_parts[1];
        if (!member_name) return null;
        if (!(TS.members.getMemberByName(member_name) || TS.members.getMemberById(member_name))) return null;
        file_id = pathname_parts[2];
      } else if (pathname.indexOf("files-pri/") === 0) {
        pathname_parts = pathname.split("/");
        if (pathname_parts.length < 3) return null;
        var file_desc = pathname_parts[1];
        if (file_desc.indexOf("-") < 0) return null;
        var file_desc_elems = file_desc.split("-");
        if (file_desc_elems.length !== 2) return null;
        file_id = file_desc_elems[1];
      } else {
        return null;
      }
      if (!file_id) return null;
      if (file_id.substr(0, 1) !== "F") return null;
      if (file_id.length < 2) return null;
      if (file_id.length > 15) return null;
      return file_id;
    },
    getBotIDFromURL: function(url) {
      if (!url) return null;
      url = TS.utility.normalizeDevHost(String(url));
      url = url.replace("https://", "").replace("http://", "");
      var bots_url = TS.model.bots_url.replace("https://", "").replace("http://", "");
      if (url.indexOf(bots_url) === 0) {
        url = url.replace(bots_url, "services");
      }
      while (url.indexOf("/") === 0) {
        url = url.substr(1);
      }
      if (url.indexOf("services/") !== 0) return null;
      var A = url.split("/");
      if (A.length < 2) return null;
      var bot_id = A[1];
      if (!bot_id) return null;
      if (bot_id.substr(0, 1) !== "B") return null;
      if (bot_id.length < 2) return null;
      if (bot_id.length > 15) return null;
      return bot_id;
    },
    getMemberIdFromURL: function(url) {
      if (!url) return null;
      url = TS.utility.normalizeDevHost(String(url));
      url = url.replace("https://", "").replace("http://", "");
      var team_url = TS.model.team_url.replace("https://", "").replace("http://", "");
      if (url.indexOf(team_url) === 0) {
        url = url.replace(team_url, "team");
      }
      while (url.indexOf("/") === 0) {
        url = url.substr(1);
      }
      if (url.indexOf("team/") !== 0) return null;
      var A = url.split("/");
      if (A.length < 2) return null;
      var member_name = A[1];
      if (!member_name) return null;
      var member = TS.members.getMemberById(member_name) || TS.members.getMemberByName(member_name);
      if (member) return member.id;
      return null;
    },
    normalizeDevHost: function(url) {
      return url.replace(/\.dev[0-9]*.slack.com/i, ".dev.slack.com").replace(/\.staging.slack.com/i, ".slack.com");
    },
    platformSupportsHtmlNotifications: function() {
      if (TS.model.win_ssb_version && window.winssb) {
        if (window.winssb.app.canShowHtmlNotifications) {
          return window.winssb.app.canShowHtmlNotifications();
        }
        return window.winssb.app.willUseHwAcceleration !== false;
      }
      return false;
    },
    platformSupportsImgEmojiInHtmlNotifications: function() {
      return TS.model.win_ssb_version && (TS.model.win_ssb_version > .9 || TS.model.win_ssb_version == .9 && TS.model.win_ssb_version_minor >= 5);
    },
    findAllTeamEmojiInStr: function(str, unique) {
      str = $.trim(str);
      var A = [];
      if (!str) return A;
      A = str.match(TS.emoji.getColonsRx()) || A;
      var extras = [];
      A = A.filter(function(colon_name) {
        if (TS.emoji.isValidName(colon_name)) {
          return true;
        }
        colon_name.split("::").forEach(function(partial_colon_name) {
          var name = TS.emoji.isValidName(partial_colon_name);
          if (!name) return;
          extras.push(":" + name + ":");
        });
        return false;
      });
      A = A.concat(extras);
      if (unique) A = _.uniq(A);
      TS.dir(248, A);
      return A;
    },
    areSimpleObjectsEqual: function recurse(x, y) {
      if (x === y) return true;
      if (x === undefined && y) return false;
      if (y === undefined && x) return false;
      if (typeof x !== typeof y) return false;
      if (x === null && y) return false;
      if (y === null && x) return false;
      if (x.length !== y.length) return false;
      var p;
      for (p in y) {
        if (typeof x[p] === "undefined" && typeof y[p] !== "undefined") return false;
        if (y[p]) {
          switch (typeof y[p]) {
            case "object":
              if (!recurse(x[p], y[p])) return false;
              break;
            case "function":
              if (String(y[p]) != String(x[p])) return false;
              break;
            default:
              if (y[p] !== x[p]) return false;
          }
        } else if (x[p]) {
          return false;
        }
      }
      for (p in x) {
        if (typeof y[p] === "undefined" && typeof x[p] !== "undefined") return false;
      }
      return true;
    },
    deepDiffObjects: function(base, comparison) {
      if (_.isEmpty(base)) {
        return {};
      } else if (_.isEmpty(comparison)) {
        return base;
      }
      var result = {};
      _.each(base, function(base_value, key) {
        var comparison_value = comparison[key];
        if (comparison_value === base_value) return;
        if (typeof base_value !== typeof comparison_value) {
          result[key] = base_value;
        } else if (_.isArray(base_value)) {
          result[key] = _.difference(base_value, comparison_value);
        } else if (_.isPlainObject(base_value)) {
          var diff = TS.utility.deepDiffObjects(base_value, comparison_value);
          if (!_.isEmpty(diff)) {
            result[key] = diff;
          }
        } else {
          result[key] = base_value;
        }
      });
      return result;
    },
    appendLogToUrlWithLimit: function(url, log) {
      if (!url) return url;
      url += url.indexOf("?") == -1 ? "?" : "&";
      if (!log) return url;
      var log_limit = 2e3 - url.length;
      return url + log.substr(0, log_limit);
    },
    makeWebWorker: function(worker_func_str, onmessage) {
      var url = URL.createObjectURL(new Blob(["(", worker_func_str, ")()"], {
        type: "application/javascript"
      }));
      var worker = new Worker(url);
      URL.revokeObjectURL(url);
      worker.onmessage = onmessage;
      return worker;
    },
    extractAllModelObIds: function(ob, source) {
      source = source && String(source) || "";
      var is_search = source.substr(0, 7) === "search.";
      var c_ids = [];
      var seens = [];
      var isPropertyAChannelIdThatNeedsChecking = function(name, parent_name) {
        if (name === "channel") return true;
        if (name === "id" && is_search && parent_name === "channel") return true;
        return false;
      };
      var worker = function(ob, parent_name) {
        if (typeof ob !== "object") return;
        seens.push(ob);
        _.forOwn(ob, function(val, k) {
          if (typeof val === "string") {
            if (isPropertyAChannelIdThatNeedsChecking(k, parent_name)) {
              if (TS.utility.strLooksLikeAChannelId(val)) {
                TS.utility.ensureInArray(c_ids, val);
              }
            } else {
              TS.format.extractIds(val).c_ids.forEach(function(id) {
                TS.utility.ensureInArray(c_ids, id);
              });
            }
          }
        });
        _.forOwn(ob, function(val, k) {
          if (typeof val === "object") {
            if (seens.indexOf(val) != -1) return;
            if (Array.isArray(val) && (k === "channels" || k === "ims" || k === "groups")) {
              val.forEach(function(c_id) {
                if (typeof c_id === "string") {
                  TS.utility.ensureInArray(c_ids, c_id);
                }
              });
            } else {
              worker(val, k);
            }
          }
        });
      };
      worker(ob, "_DATA");
      if (source === "search.messages" && TS.boot_data.page_needs_enterprise) {
        _excludeNonLocalModelObs(ob, c_ids);
      }
      if (TS.shouldLog("794")) {
        _doubleCheckIdExtraction(ob, source, c_ids, _double_check_ids_channel_rx);
      }
      return c_ids;
    },
    extractAllTeamIds: function(ob) {
      var t_ids = [];
      _.toPairs(ob).forEach(function(pair) {
        var key = pair[0];
        var val = pair[1];
        if (_.isArray(val)) {
          if (key === "messages" || key === "teams" || key === "users") {
            _.forEach(val, function(message) {
              var new_team_ids = TS.utility.extractAllTeamIds(message);
              t_ids.push(new_team_ids);
            });
          }
        } else if (_.isObject(val)) {
          var new_team_ids = TS.utility.extractAllTeamIds(val);
          t_ids.push(new_team_ids);
        } else if (_.isString(val)) {
          if (key === "team" || key === "source_team" || key === "user_team" || key === "team_id") {
            if (TS.utility.strLooksLikeATeamId(val)) {
              t_ids.push(val);
            }
          }
        }
      });
      return _(t_ids).flatten().uniq().value();
    },
    extractAllMemberIds: function(ob, source, channel_id) {
      source = source && String(source) || "";
      var m_ids = [];
      var c_ids = [];
      var t_ids = [];
      var seens = [];
      var isPropertyAMemberIdThatNeedsChecking = function(name) {
        if (name === "user") return true;
        if (name === "inviter") return true;
        if (name === "accepted_user") return true;
        if (name === "created_by") return true;
        return false;
      };
      var worker = function(obj) {
        if (!_.isObject(obj)) return;
        seens.push(obj);
        var val;
        Object.keys(obj).forEach(function(k) {
          val = obj[k];
          if (typeof val === "string") {
            if (isPropertyAMemberIdThatNeedsChecking(k)) {
              if (TS.utility.strLooksLikeAMemberId(val)) {
                if (TS.utility.ensureInArray(m_ids, val)) {
                  c_ids.push(typeof obj.channel === "string" && obj.channel || typeof obj.channel === "object" && obj.channel && obj.channel.id || channel_id || undefined);
                  t_ids.push(typeof obj.team === "string" && obj.team || typeof obj.team === "object" && obj.team && obj.team.id || undefined);
                }
              }
            } else {
              TS.format.extractIds(val).m_ids.forEach(function(id) {
                if (TS.utility.ensureInArray(m_ids, id)) {
                  c_ids.push(undefined);
                  t_ids.push(undefined);
                }
              });
            }
          }
        });
        Object.keys(obj).forEach(function(k) {
          val = obj[k];
          if (typeof val === "object") {
            if (seens.indexOf(val) != -1) return;
            if (Array.isArray(val) && (k === "members" || k === "users")) {
              val.forEach(function(m_id) {
                if (TS.utility.strLooksLikeAMemberId(m_id)) {
                  if (TS.utility.ensureInArray(m_ids, m_id)) {
                    c_ids.push(typeof obj.id === "string" && obj.channel || channel_id || undefined);
                    t_ids.push(typeof obj.team === "string" && obj.team || typeof obj.team === "object" && obj.team && obj.team.id || undefined);
                  }
                } else if (m_id && typeof m_id === "object" && m_id.id) {
                  if (TS.utility.strLooksLikeAMemberId(m_id.id)) {
                    m_ids.push(m_id.id);
                  }
                }
              });
            } else {
              worker(val);
            }
          }
        });
      };
      worker(ob);
      m_ids = _(m_ids).uniq().value();
      if (TS.shouldLog("794")) {
        _doubleCheckIdExtraction(ob, source, m_ids, _double_check_ids_member_rx);
      }
      return {
        c_ids: c_ids,
        t_ids: t_ids,
        m_ids: m_ids
      };
    },
    extractAllBotIds: function(ob) {
      var bot_ids = ob.bot_id ? [ob.bot_id] : [];
      var new_bot_ids;
      _.values(ob).forEach(function(val) {
        if (_.isObject(val)) {
          new_bot_ids = TS.utility.extractAllBotIds(val);
          bot_ids.push(new_bot_ids);
        } else if (_.isString(val)) {
          new_bot_ids = _(TS.utility.findUrls(val)).map(TS.utility.getBotIDFromURL).compact().value();
          bot_ids.push(new_bot_ids);
        }
      });
      return _(bot_ids).flatten().uniq().value();
    },
    strLooksLikeAChannelId: function(str) {
      if (typeof str !== "string" || str.length < 9) return false;
      if (str && TS.model.channel_id_prefixes.indexOf(str.charAt(0)) > -1) return true;
      return false;
    },
    strLooksLikeAMemberId: function(str) {
      if (typeof str !== "string" || str.length < 9) return false;
      if (str && (str.charAt(0) === "U" || str.charAt(0) === "W")) return true;
      return false;
    },
    strLooksLikeATeamId: function(str) {
      if (!_.isString(str) || str.length !== TS.model.model_ob_id_length) return false;
      if (str && str.charAt(0) === "T" && str.match(/^[A-Z0-9]+$/)) return true;
      return false;
    },
    truncateToNearestWordBoundary: function(str, len) {
      if (str.length <= len) return str;
      var ellipsis = "…";
      var truncated_str = str.substring(0, len);
      var last_space_idx = truncated_str.lastIndexOf(" ");
      if (last_space_idx > 0 && last_space_idx > len - 5) {
        return truncated_str.substring(0, last_space_idx) + ellipsis;
      }
      return truncated_str.substring(0, truncated_str.length - 1) + ellipsis;
    },
    truncateAndEscape: function(str, len) {
      if (str.length <= len) return TS.utility.htmlEntities(str);
      return TS.utility.htmlEntities(str.substring(0, len - 1)) + "&hellip;";
    },
    truncateHTML: function() {
      var parser;
      try {
        if (window.DOMParser) {
          parser = new DOMParser;
          if (!parser.parseFromString("", "text/html")) {
            parser = null;
          }
        }
      } catch (e) {
        parser = null;
      }

      function truncateTextNodes(sum, node, limit) {
        var contents = _.toArray(node.childNodes);
        _.forEach(contents, function(child_node) {
          if (sum >= limit) {
            node.removeChild(child_node);
            return;
          }
          if (child_node.nodeType === Node.TEXT_NODE) {
            var text = child_node.textContent;
            if (sum + text.length > limit) {
              child_node.textContent = text.substring(0, limit - sum);
              sum += limit - sum;
            } else {
              sum += child_node.textContent.length;
            }
          } else {
            sum = truncateTextNodes(sum, child_node, limit);
          }
        });
        return sum;
      }
      return function(html, limit) {
        try {
          var node;
          if (parser) {
            var doc = parser.parseFromString(html, "text/html");
            node = doc.body;
          } else {
            var nodes = jQuery.parseHTML("<div>" + html + "</div>");
            node = nodes[0];
          }
          var length = truncateTextNodes(0, node, limit);
          if (length >= limit) {
            var ellipsis = document.createTextNode("…");
            node.appendChild(ellipsis);
          }
          return node.innerHTML;
        } catch (e) {
          TS.error(e);
          return html;
        }
      };
    }(),
    isSpaceClickEventSafe: function(e, check_only) {
      if (e.target) {
        var $link = $(e.target).closest("[href]");
        if (!$link[0]) return true;
        if (!$link.closest(".post_body").length && !$link.closest("ts-rocket").length) return true;
        var protocol = $link[0].protocol;
        if (protocol && /^https?:$/.test(protocol) === false) {
          TS.warn("not following bad link from a post preview");
          e.preventDefault();
          return false;
        }
        if ($link.data("original-href")) {
          TS.warn("not following possibly spoofed link from a post preview");
          e.preventDefault();
          var url = $link.data("referer-original-href") || $link.attr("href");
          if (!check_only) _spaceUnsafeLinkDialog($link.data("original-href"), $link.attr("href"), url);
          return false;
        }
      }
      return true;
    },
    getCachedScript: function(url, options) {
      options = $.extend(options || {}, {
        dataType: "script",
        cache: true,
        url: url
      });
      return jQuery.ajax(options);
    },
    disableElement: function($el, disabled) {
      $el = $($el);
      $el.attr("disabled", disabled);
      $el.attr("aria-disabled", disabled);
    },
    strToApparentlyRndPerc: function(str) {
      return parseFloat("." + TS.utility.strToApparentlyRndNum(str));
    },
    strToApparentlyRndNum: function(str) {
      if (!str) return NaN;
      str = String(str);
      var middle = str.substr(Math.round(str.length / 2), 1);
      str = middle + str.split("middle").reverse().join();
      var digits = "";
      for (var i = str.length - 1; i > -1; i -= 1) {
        digits += (str.charCodeAt(i) * (i + 1)).toString().substr(-1, 1);
      }
      return parseInt(digits, 10);
    },
    enableFeatureForUser: function(percentage) {
      if (percentage < 0 || percentage > 100) {
        TS.warn("TS.utility.enableFeatureForUser() expects a number between 0 and 100");
        return false;
      }
      return _.random(0, 100) < percentage;
    },
    roundToThree: function(num) {
      return +(Math.round(num + "e+3") + "e-3");
    },
    convertBytesToMegabytes: function(bytes) {
      return bytes / 1024 / 1024;
    },
    convertKilobytesToMegabytes: function(kilobytes) {
      return kilobytes / 1024;
    },
    queryIsMaybeSelf: function(query) {
      query = _.toLower(query);
      if (query === "me" || query === "you" || query === _me_en || query === _you_en) {
        return true;
      }
      return false;
    },
    openAuthenticatedInBrowser: function(url_path) {
      var is_ssb = TS.model.desktop_app_version !== null;
      if (is_ssb && parseFloat(TS.model.desktop_app_version.major + "." + TS.model.desktop_app_version.minor) >= 2.6) {
        var url = TS.boot_data.team_url + "web/open" + url_path;
        TSSSB.call("openAuthenticatedInBrowser", url);
      } else {
        window.open(url_path);
      }
    },
    getFontDescriptorForElement: function(el) {
      var $el = el instanceof jQuery ? el : $(el);
      return [$el.css("font-style"), $el.css("font-weight"), $el.css("font-size"), $el.css("font-family")].join(" ");
    },
    measureTextWidth: function(text, font_descriptor) {
      if (!text) return 0;
      this._measure_text_width_canvas = this._measure_text_width_canvas || document.createElement("canvas");
      var context = this._measure_text_width_canvas.getContext("2d");
      context.font = font_descriptor;
      return context.measureText(text).width;
    },
    test: {
      clearAndGetRefererPolicy: function() {
        _referer_policy = undefined;
        return _getRefererPolicy();
      },
      getRefererPolicy: function() {
        return _getRefererPolicy();
      },
      rafQueue: function() {
        return _rafQueue;
      }
    }
  });
  var _parser;
  var _double_check_ids_channel_rx = /(?:"|<#)([CGD][0-9a-zA-Z]{8,10})(?:"|\||>)/g;
  var _double_check_ids_member_rx = /(?:"|<@)([WU][0-9a-zA-Z]{8,10})(?:"|\||>)/g;
  var _me_en;
  var _you_en;
  var _spaceUnsafeLinkDialog = function(originalUrl, actionUrl, safeUrl) {
    var title = "";
    var body = "";
    title += '<ts-icon class="ts_icon_warning yolk_orange small_right_margin"></ts-icon> ';
    title += TS.i18n.t("Caution: Tricky Link", "utility")();
    body += "<p>";
    body += '  <span class="inline_block">' + TS.i18n.t("The link you clicked (<strong>{url}</strong>) is tricky.", "utility")({
      url: TS.utility.htmlEntities(safeUrl)
    }) + "</span>";
    body += '  <span class="inline_block">' + TS.i18n.t("It has been formatted to look like another web address (<strong>{url}</strong>).", "utility")({
      url: TS.utility.htmlEntities(originalUrl)
    }) + "</span>";
    body += "</p>";
    body += "<p>" + TS.i18n.t("Are you sure you want to follow it?", "utility")() + "</p>";
    TS.generic_dialog.start({
      title: title,
      body: body,
      show_cancel_button: false,
      show_secondary_go_button: true,
      secondary_go_button_text: TS.i18n.t("Let’s risk it", "utility")(),
      secondary_go_button_class: "btn_outline",
      onSecondaryGo: function() {
        window.open(actionUrl);
      },
      go_button_text: TS.i18n.t("Take me back to safety", "utility")(),
      esc_for_ok: true,
      enter_always_gos: true
    });
  };
  var _doubleCheckIdExtraction = function(ob, source, ids, rx) {
    var trueMatches = function(str, rx) {
      var A = [];
      var match = rx.exec(str);
      while (match) {
        A.push(match[1]);
        match = rx.exec(str);
      }
      return A;
    };
    var json_str = JSON.stringify(ob);
    var A = _.uniq(trueMatches(json_str, rx));
    if (A.length != ids.length) {
      TS.warn(source + "   A: " + A.join(", "));
      TS.info(source + " ids: " + ids.join(", "));
      if (A.length > ids.length) {
        TS.info(source + " dif: " + _.difference(A, ids).join(", "));
      } else {
        TS.info(source + " dif: " + _.difference(ids, A).join(", "));
      }
    }
  };
  var _referer_policy;
  var _getRefererPolicy = function() {
    if (!_.isUndefined(_referer_policy)) return _referer_policy;
    var data = window.boot_data;
    if (!data) {
      TS.warn("window.boot_data not available");
      _referer_policy = null;
      return _referer_policy;
    }
    var def = {
      iframe_redirect_type: 4,
      redirect_type: 3,
      rewrite_on_right_click: true
    };
    var can_warn = TS.console && TS.console.warn;
    if (!window.bowser) {
      if (can_warn) TS.console.warn(8675309, "window.bowser undefined, defaulting to restrictive referrer policy");
      _referer_policy = def;
      return _referer_policy;
    }
    if (bowser.chrome && bowser.version >= 4.1 || bowser.opera && bowser.version >= 15) {
      _referer_policy = {
        iframe_redirect_type: 4,
        redirect_type: null,
        rewrite_on_right_click: false
      };
      return _referer_policy;
    }
    if (bowser.ie) {
      _referer_policy = {
        iframe_redirect_type: 4,
        redirect_type: 3,
        rewrite_on_right_click: true
      };
      return _referer_policy;
    }
    if (bowser.firefox) {
      _referer_policy = {
        iframe_redirect_type: bowser.version >= 36 ? 4 : 2,
        redirect_type: 3,
        rewrite_on_right_click: bowser.version < 36
      };
      return _referer_policy;
    }
    if (bowser.safari && bowser.version >= 5 || navigator.userAgent.match(/(Slack_SSB)/g)) {
      _referer_policy = {
        iframe_redirect_type: 2,
        redirect_type: null,
        rewrite_on_right_click: false
      };
      return _referer_policy;
    }
    if (navigator.userAgent && navigator.userAgent.match(/phantomjs/i)) can_warn = false;
    if (can_warn) TS.console.warn(8675309, "browser not recognized, defaulting to restrictive referrer policy");
    _referer_policy = def;
    return def;
  };
  var _referer_hiding_whitelist = null;
  window.getRefererHidingWhiteList = function() {
    if (_referer_hiding_whitelist) return _referer_hiding_whitelist;
    _referer_hiding_whitelist = [TS.model.team.domain + ".dev.slack.com", TS.model.team.domain + ".staging.slack.com", TS.model.team.domain + ".slack.com", "files.staging.slack.com", "files.dev.slack.com", "files.slack.com", "dev.slack-files.com", "staging.slack-files.com", "www.slack-files.com", "slack-files.com", "slack-imgs.com", "dev.slack.com", "slack.com", TS.boot_data.redir_domain, "my.slack.com", "www.slack.com"];
    for (var i = 0; i < 205; i += 1) {
      _referer_hiding_whitelist.push(TS.model.team.domain + ".dev" + i + ".slack.com");
      _referer_hiding_whitelist.push("files.dev" + i + ".slack.com");
      _referer_hiding_whitelist.push("dev" + i + ".slack-files.com");
      _referer_hiding_whitelist.push("dev" + i + ".slack.com");
    }
    return _referer_hiding_whitelist;
  };
  var URL_REGEXP = /((ftp|http|https):\/\/|\bw{3}\.)[a-z0-9\-.]+[a-z]+(:[a-z0-9]*)?\/?([@a-z0-9\-._?,'\/\\+&amp;%:!$#=~])*/gi;
  var _set_immediate_fn = window.setImmediate;
  if (!_set_immediate_fn) {
    if (window.MutationObserver) {
      var hiddenDiv = document.createElement("div");
      var callbacks = [];
      new MutationObserver(function() {
        var cbList = callbacks.slice();
        callbacks.length = 0;
        cbList.forEach(function(callback) {
          callback();
        });
      }).observe(hiddenDiv, {
        attributes: true
      });
      _set_immediate_fn = function(callback) {
        if (!callbacks.length) {
          hiddenDiv.setAttribute("yes", "no");
        }
        callbacks.push(callback);
      };
    } else {
      _set_immediate_fn = function(fn) {
        setTimeout(fn, 0);
      };
    }
  }
  var _rafQueue = function() {
    var items = [];
    var is_running = false;

    function processItems() {
      items.forEach(function(animation) {
        animation();
      });
      items = [];
      is_running = false;
    }

    function addItem(fn, allow_duplicate) {
      if (allow_duplicate || items.indexOf(fn) === -1) {
        items.push(fn);
      }
      if (!is_running && items.length) {
        is_running = true;
        TS.utility.rAF(processItems);
      }
    }
    return {
      add: addItem
    };
  }();
  var _animationManager = function() {
    var is_running = false;
    var subscribers = [];

    function redrawLoop() {
      if (!is_running) {
        return;
      }
      subscribers.forEach(function(animation) {
        animation();
      });
      TS.utility.rAF(redrawLoop);
    }

    function subscribe(fn) {
      var ret = {
        start: function() {
          subscribers.push(fn);
          if (!is_running) {
            is_running = true;
            TS.utility.rAF(redrawLoop);
          }
        },
        stop: function() {
          subscribers.splice(subscribers.indexOf(fn), 1);
          if (!subscribers.length) {
            is_running = false;
          }
        }
      };
      ret.start();
      return ret;
    }
    return {
      subscribe: subscribe,
      subscribers: subscribers,
      isRunning: function() {
        return is_running;
      }
    };
  }();
  var _slack_url_re = /\.slack\.com\/((?:messages|archives|unreads|threads)\/)/;

  function _excludeNonLocalModelObs(ob, c_ids) {
    var current_team_id = TS.model.team.id;
    _.remove(c_ids, function(c_id) {
      var match = _.find(ob.messages.matches, function(o) {
        return o.channel.id == c_id;
      }, this);
      var is_shared = _.get(match, "channel.is_shared") || _.get(match, "channel.is_org_shared");
      if (match && _.get(match, "team") != current_team_id && _.startsWith(c_id, "C") && !is_shared) {
        return c_id;
      }
    });
  }
})();
(function() {
  "use strict";
  TS.registerModule("utility.url", {
    getHostName: function(url) {
      if (!url) return "";
      var a = document.createElement("a");
      a.href = url;
      return a.hostname;
    },
    setUrlQueryStringValue: function(url, key, value) {
      var a = document.createElement("a");
      a.href = url;
      var qs = a.search ? a.search.slice(1) : "";
      a.search = TS.utility.url.setQueryStringValue(qs, key, value);
      return a.href;
    },
    removeUrlQueryStringValue: function(url, key) {
      var a = document.createElement("a");
      a.href = url;
      if (!a.search) {
        return url;
      }
      var qs = a.search.slice(1);
      a.search = TS.utility.url.removeQueryStringValue(qs, key);
      return a.href;
    },
    urlQueryStringParse: function(url) {
      var a = document.createElement("a");
      a.href = url;
      if (!a.search) return {};
      var qs = a.search ? a.search.slice(1) : "";
      return TS.utility.url.queryStringParse(qs);
    },
    queryStringParse: function(qs) {
      var args = {};
      var pairs;
      pairs = qs.split("&");
      for (var i = 0; i < pairs.length; i += 1) {
        var p = pairs[i].indexOf("=");
        if (p != -1) {
          var name = pairs[i].substring(0, p);
          var value = pairs[i].substring(p + 1);
          args[name] = unescape(value);
        }
      }
      return args;
    },
    setQueryStringValue: function(qs, key, value) {
      var args = TS.utility.url.queryStringParse(qs);
      args[key] = value;
      return TS.utility.url.queryStringEncode(args);
    },
    removeQueryStringValue: function(qs, key) {
      var args = TS.utility.url.queryStringParse(qs);
      if (!args.hasOwnProperty(key)) {
        return qs;
      }
      delete args[key];
      return TS.utility.url.queryStringEncode(args);
    },
    queryStringEncode: function(args) {
      if (!args) return "";
      if (Object.keys(args).length == 0) return "";
      var key_value_pairs = Object.keys(args).map(function(key) {
        return encodeURIComponent(key) + "=" + encodeURIComponent(args[key]);
      });
      return "?" + key_value_pairs.join("&");
    },
    simpleIsUrl: function(proposed_url) {
      var passed = false;
      var anchor;
      var tiny_re;
      if (proposed_url.indexOf(" ") !== -1) return passed;
      anchor = document.createElement("a");
      anchor.href = proposed_url;
      if (anchor.protocol && anchor.hostname && anchor.pathname && window.location.href.substr(0, window.location.href.lastIndexOf("/")) + "/" + proposed_url != anchor.href) {
        tiny_re = /[a-z0-9]+\.[a-z0-9]+/i;
        passed = tiny_re.test(anchor.hostname);
        if (anchor.hostname.indexOf(".") == -1 && anchor.hostname === "localhost") {
          passed = true;
        }
      }
      return passed;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("utility.process_nicely", {
    process: function(arr, fn, start_index, traverse_backwards) {
      if (_.isUndefined(start_index)) {
        start_index = traverse_backwards ? arr.length - 1 : 0;
      }
      var end_index = traverse_backwards ? -1 : arr.length;
      var step = traverse_backwards ? -1 : 1;
      return new Promise(function(resolve) {
        var t0 = performance.now();
        var max_processing_time_ms = 10;
        var i;
        for (i = start_index; i !== end_index; i += step) {
          var item = arr[i];
          fn(item);
          var more_work_to_do = i + step != end_index;
          var out_of_time = performance.now() - t0 > max_processing_time_ms;
          if (more_work_to_do && out_of_time) {
            return TS.utility.rAF(function() {
              return TS.utility.process_nicely.process(arr, fn, i + 1, traverse_backwards).then(resolve);
            });
          }
        }
        resolve();
      });
    },
    processRight: function(arr, fn, start_index) {
      var traverse_backwards = true;
      return TS.utility.process_nicely.process(arr, fn, start_index, traverse_backwards);
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("utility.invites", {
    onStart: function() {},
    hideFullMemberInviteOption: function() {
      var team_in_enterprise_org = TS.boot_data.page_needs_enterprise;
      var is_saml_team = TS.model.team.prefs.auth_mode === "saml";
      var saml_settings_prevent_full_member_invites = TS.model.team.prefs.sso_auth_restrictions === 0 || TS.model.team.prefs.sso_auth_restrictions === 1;
      if (team_in_enterprise_org) return false;
      return team_in_enterprise_org || is_saml_team && saml_settings_prevent_full_member_invites;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("format", {
    hex_rx: /(\W|^)(#[A-Fa-f0-9]{6})(\b)/g,
    replaceUnicodeDoppelgangers: function(txt) {
      if (!txt) return "";
      txt = txt.replace(/\u00A0/g, " ");
      txt = txt.replace(/\u000D/g, "\n");
      txt = txt.replace(/\u000A/g, "\n");
      return txt;
    },
    replaceHighlightMarkers: function(txt, start_replacement, end_replacement) {
      if (!txt) return "";
      start_replacement = start_replacement || "";
      end_replacement = end_replacement || "";
      return txt.replace(/\ue000/g, start_replacement).replace(/\ue001/g, end_replacement);
    },
    hasOnlyValidMemberIds: function(txt) {
      if (!_.isString(txt)) return true;
      return _.every(txt.match(_at_mention_rx), TS.members.getMemberById);
    },
    formatSlugs: function(txt, cursor_pos) {
      if (!_.isString(txt)) txt = "";
      if (!_.isInteger(cursor_pos)) cursor_pos = 0;
      var new_cursor_pos = cursor_pos;
      var txt_escaped = TS.utility.htmlEntities(txt);
      var new_html = txt_escaped.replace(_at_mention_rx, function(match, boundry, at_member_id, member_id, offset) {
        var extra = "";
        if (member_id.length > TS.model.model_ob_id_length) {
          extra = member_id.slice(TS.model.model_ob_id_length);
          member_id = member_id.slice(0, TS.model.model_ob_id_length);
          at_member_id = "@" + member_id;
        }
        var valid = _validateModelObByIdOrName(TS.members.getMemberById, member_id, TS.members.getMemberByName, at_member_id);
        var member = valid.model_ob;
        if (!member) return match;
        var slug = _getMemberSlug(member);
        var start = offset + boundry.length;
        if (start < cursor_pos) {
          new_cursor_pos -= at_member_id.length - slug.txt.length;
        }
        return boundry + slug.html + extra;
      });
      return {
        cursor: {
          end: new_cursor_pos,
          length: 0,
          start: new_cursor_pos
        },
        html: new_html
      };
    },
    cleanMsg: function(txt) {
      return _cleanMsgText(txt, {
        do_specials: true
      });
    },
    cleanInternalMsg: function(txt) {
      return _cleanMsgText(txt, {
        do_specials: false
      });
    },
    cleanCommandText: function(txt) {
      if (!TS.boot_data.feature_name_tagging_client) return txt;
      return _cleanMsgText(txt, {
        do_specials: true,
        human_readable: true
      });
    },
    doEmoticonConversion: function(str) {
      _emoticon_conversion_token_map.length = 0;
      str = str.replace(_special_pre_rx, _emoticonConversionTokenReplacer);
      str = str.replace(_special_code_rx, _emoticonConversionTokenReplacer);
      str = str.replace(_special_quote_rx, _emoticonConversionTokenReplacer);
      str = TS.emoji.replaceEmoticons(str);
      str = TS.format.deTokenizeStr(_emoticon_conversion_token_map, str);
      return str;
    },
    tokenizeStr: function(token_map, str, boundary) {
      if (!str) return "";
      boundary = boundary || "";
      var nl = str.indexOf("\n") === 0 ? "\n" : "";
      var token = _encodeSpecialFormattingCharsAndColon(nl + _token_base + (_token_cnt += 1) + Date.now());
      token = boundary + token + boundary;
      token_map.push({
        str: str,
        token: token
      });
      return token;
    },
    deTokenizeStr: function(token_map, str) {
      var item;
      var i = token_map.length - 1;
      for (i; i > -1; i -= 1) {
        item = token_map[i];
        str = str.replace(item.token, item.str.replace(/\$/g, "$$$$"));
      }
      return str;
    },
    unFormatMsg: function(txt, msg) {
      return TS.format.formatWithOptions(txt, msg, {
        for_edit: true
      });
    },
    formatJustText: function(txt) {
      return TS.format.formatWithOptions(txt);
    },
    formatDefault: function(txt, msg) {
      return TS.format.formatWithOptions(txt, msg);
    },
    formatNoHighlightsNoSpecials: function(txt, msg) {
      return TS.format.formatWithOptions(txt, msg, {
        no_highlights: true,
        no_specials: true
      });
    },
    formatNoHighlightsNoSpecialsNoInlineImgs: function(txt, msg) {
      return TS.format.formatWithOptions(txt, msg, {
        no_highlights: true,
        no_specials: true,
        do_inline_imgs: false
      });
    },
    formatNoHighlightsNoInlineImgs: function(txt, msg) {
      return TS.format.formatWithOptions(txt, msg, {
        do_inline_imgs: false,
        no_highlights: true
      });
    },
    formatNoSpecials: function(txt, msg) {
      return TS.format.formatWithOptions(txt, msg, {
        no_specials: true
      });
    },
    formatNotification: function(txt, msg) {
      return TS.format.formatWithOptions(txt, msg, {
        for_growl: true
      });
    },
    formatCurrentStatus: function(txt, msg, opts) {
      opts = opts || {};
      return TS.format.formatWithOptions(txt, msg, _.assign({
        no_jumbomoji: true,
        no_linking: true,
        no_specials: true,
        no_highlights: true,
        no_emoji_text: true,
        prevent_copy_paste: true
      }, opts));
    },
    formatBroadcastExcerpt: function(txt, msg) {
      var custom_linebreak = "&hellip;<br>";
      var multiline_block_open = custom_linebreak + '<span class="multiline_block">';
      var multiline_block_close = "</span>";
      var formatted_root = TS.format.formatWithOptions(txt, msg, {
        no_highlights: true,
        no_hex_colors: true,
        do_inline_imgs: false,
        enable_slack_action_links: false,
        do_theme_install_buttons: false,
        no_jumbomoji: true,
        no_linking: true,
        custom_linebreak: custom_linebreak,
        token_overrides: {
          "<PRE:START>": multiline_block_open,
          "<PRE:END>": multiline_block_close,
          "<QUOTE:START>": multiline_block_open,
          "<QUOTE:END>": multiline_block_close,
          "<CODE:START>": "<span>",
          "<CODE:END>": "</span>",
          "<PARA:BREAK>": custom_linebreak
        }
      });
      if (_.startsWith(formatted_root, custom_linebreak)) {
        formatted_root = formatted_root.substring(custom_linebreak.length);
      }
      return formatted_root;
    },
    extractIds: function(txt) {
      var c_ids = [];
      var m_ids = [];
      var matches = txt.match(/<[#@]+(.*?)>/g);
      if (matches) {
        matches.forEach(function(item) {
          var guts;
          var id;
          if (item.indexOf("<@") === 0) {
            guts = item.replace(/<|>/g, "");
            id = TS.utility.msgs.getMemberIdFromMemberMarkup(guts);
            if (TS.utility.strLooksLikeAMemberId(id)) {
              TS.utility.ensureInArray(m_ids, id);
            }
          } else {
            guts = item.replace(/<|>|#/g, "");
            id = guts.split("|")[0];
            if (TS.utility.strLooksLikeAChannelId(id)) {
              TS.utility.ensureInArray(c_ids, id);
            }
          }
        });
      }
      return {
        c_ids: c_ids,
        m_ids: m_ids
      };
    },
    calculateOptions: function(msg, opts) {
      return _calculateOptions(msg, opts);
    },
    formatWithOptions: function(txt, msg, opts) {
      if (!$.trim(txt)) return "";
      var format_options = _calculateOptions(msg, opts);
      var formatted = _format(txt, msg, format_options);
      return formatted;
    },
    applyStringifyTransformsToChildren: function(container, options) {
      if (!container) return false;
      if (!_.isObject(options)) options = {};
      if (!container.childElementCount) return false;
      var is_single_lonely_node = container.childNodes.length === 1 && container.firstChild.nodeType === 1 && container.firstChild.hasAttribute("data-stringify-requires-siblings");
      if (is_single_lonely_node) return;
      _.each(container.querySelectorAll("pre br"), function(br) {
        br.parentElement.replaceChild(document.createTextNode("\n"), br);
      });
      var transformed_children = _.filter(container.querySelectorAll("*"), function(el) {
        if (!_hasStringifyTransformations(el)) return false;
        if (_.isFunction(options.excludeFn) && options.excludeFn(el)) return false;
        var new_text;
        if (_.isFunction(options.customFn) && options.customFn(el)) {
          new_text = options.customFn(el);
        } else {
          new_text = TS.format.stringifyNode(el);
        }
        var was_changed = new_text !== el.textContent;
        if (was_changed) el.textContent = new_text;
        return was_changed;
      });
      return transformed_children.length > 0;
    },
    formatSelection: function(selection, options) {
      if (!selection || !selection.rangeCount) return;
      if (!_.isObject(options)) options = {};
      if (selection.rangeCount !== 1) {
        TS.info("TS.format.formatSelection: found " + selection.rangeCount + " ranges");
        return;
      }
      var range = selection.getRangeAt(0);
      var selection_text;
      if (_.isElement(range.commonAncestorContainer)) {
        if (TS.model.is_safari_desktop) {
          var messages = range.commonAncestorContainer.querySelectorAll("ts-message");
          if (messages.length > 1) return;
        }
        var container_clone = range.commonAncestorContainer.cloneNode();
        container_clone.appendChild(range.cloneContents());
        container_clone.classList.add("offscreen", "user_select_text");
        range.commonAncestorContainer.parentElement.appendChild(container_clone);
        var nbsp_placeholder = "\ufeff";
        container_clone.innerHTML = container_clone.innerHTML.replace(/&nbsp;/g, nbsp_placeholder);
        if (container_clone.lastChild && !container_clone.lastChild.textContent) {
          container_clone.removeChild(container_clone.lastChild);
        }
        TS.format.applyStringifyTransformsToChildren(container_clone, options);
        var restore = TS.selection.snapshot();
        selection = TS.selection.selectNodeContents(container_clone);
        selection_text = selection.toString();
        var nbsp_placeholder_regex = new RegExp(nbsp_placeholder, "g");
        selection_text = selection_text.replace(/ {2}/g, " ").replace(nbsp_placeholder_regex, " ");
        container_clone.parentElement.removeChild(container_clone);
        restore();
      } else {
        selection_text = selection.toString();
      }
      selection_text = TS.format.replaceUnicodeDoppelgangers(selection_text);
      selection_text = selection_text.replace(/^\n+/, "");
      selection_text = selection_text.replace(/\n+$/, "");
      return selection_text;
    },
    formatSelectionAsHTML: function(selection) {
      if (!selection || !selection.rangeCount) return "";
      if (selection.rangeCount !== 1) {
        TS.info("TS.format.formatSelection: found " + selection.rangeCount + " ranges");
      }
      var range = selection.getRangeAt(0);
      var placeholder = document.createElement("div");
      placeholder.appendChild(range.cloneContents());
      return placeholder.innerHTML;
    },
    stringifyNode: function(node) {
      if (!node) return "";
      if (!_hasStringifyTransformations(node)) return node.textContent;
      var str = node.textContent;
      _.each(_stringify_transform_attrs, function(transformFn, attr) {
        if (node.hasAttribute(attr)) str = transformFn(node, str);
      });
      return str;
    },
    swapInAts: function(txt) {
      if (!txt) return txt;
      return txt.replace(new RegExp(_at_symbol_token, "g"), "@").replace(new RegExp(_dash_symbol_token, "g"), "-").replace(new RegExp(_underscore_symbol_token, "g"), "_");
    },
    swapOutAts: function(txt) {
      if (!txt) return txt;
      return txt.replace(/@/g, _at_symbol_token).replace(/-/g, _dash_symbol_token).replace(/_/g, _underscore_symbol_token);
    },
    test: function() {
      var test_obj = {
        encodeSpecialFormattingChars: _encodeSpecialFormattingChars,
        encodeSpecialFormattingCharsAndColon: _encodeSpecialFormattingCharsAndColon,
        getTokenMap: _getTokenMap
      };
      Object.defineProperty(test_obj, "_hasStringifyTransformations", {
        get: function() {
          return _hasStringifyTransformations;
        },
        set: function(value) {
          _hasStringifyTransformations = value;
        }
      });
      return test_obj;
    }
  });
  var _at_commands = ["everyone", "channel", "group", "here"];
  var _theme_rx = /((?:#[A-Fa-f0-9]{6} {0,}, {0,}){7})(#[A-Fa-f0-9]{6})(\b)/g;
  var _at_mention_rx = /(^|\s|\{|\[|\(|&gt;|&lt;|\*|_|\/|"|“|‘|')(@([\w|.|-]+))/g;
  if (TS.boot_data.feature_shared_channels_client) {
    _at_mention_rx = /(^|\s|\{|\[|\(|&gt;|&lt;|\*|_|\/|"|“|‘|')(@([\w.\-+]+))/g;
  }
  var _channel_name_rx;
  if (TS.boot_data.feature_intl_channel_names) {
    _channel_name_rx = /(^|\s|\{|\[|\(|&gt;|&lt;|\*|_|\/|"|“|‘|')(#([^~`!@#$%^&*()+=[\]{}\\|;:'",.<>\/?\s]+))/g;
  } else {
    _channel_name_rx = /(^|\s|\{|\[|\(|&gt;|&lt;|\*|_|\/|"|“|‘|')(#([a-zA-Z0-9\-_]+))/g;
  }
  var _special_pre_rx = /(^|\s|[_*?.,\-!^;:{([%$#+=\u2000-\u206F\u2E00-\u2E7F"])```([\s\S]*?)?```(?=$|\s|[_*?.,\-!^;:})\]%$#+=\u2000-\u206F\u2E00-\u2E7F…"])/g;
  var _special_code_rx = /(^|\s|[?.,\-!^;:{([%$#+=\u2000-\u206F\u2E00-\u2E7F"])`([^`]*?\S *)?`/g;
  var _special_quote_rx = /(^|\n)&gt;(?![\W_](?:&lt;|&gt;|[|\/\\[\]{}()Dpb](?=\s|$)))(([^\n]*)(\n&gt;[^\n]*)*)/g;
  var _stringify_transform_attrs = {
    "data-stringify-text": function(node) {
      return node.getAttribute("data-stringify-text");
    },
    "data-stringify-prefix": function(node, str) {
      return node.getAttribute("data-stringify-prefix") + str;
    },
    "data-stringify-suffix": function(node, str) {
      return str + node.getAttribute("data-stringify-suffix");
    }
  };
  var _getTokenMap = function() {
    var map = {
      "<QUOTE:START>": '<div class="special_formatting_quote"><div class="quote_bar"><div class="shim"></div></div><div class="content dynamic_content_max_width">',
      "<QUOTE:PREFIX>": '<span class="copyonly">&gt;</span>',
      "<LONGQUOTE:PREFIX>": '<span class="copyonly">&gt;&gt;&gt;</span>',
      "<QUOTE:END>": "</div></div>",
      "<LINK:END>": "</a>",
      "<LINE:BREAK>": "<br>",
      "<PARA:BREAK>": '<span class="para_break"><i class="copy_only"><br></i></span>',
      "<SPACE:HARD>": "&nbsp;"
    };
    map["<B:START>"] = '<b data-stringify-prefix="*" data-stringify-suffix="*" data-stringify-requires-siblings>';
    map["<B:END>"] = "</b>";
    map["<STRIKE:START>"] = '<strike data-stringify-prefix="~" data-stringify-suffix="~" data-stringify-requires-siblings>';
    map["<STRIKE:END>"] = "</strike>";
    map["<CODE:START>"] = '<code class="special_formatting" data-stringify-prefix="`" data-stringify-suffix="`" data-stringify-requires-siblings>';
    map["<CODE:END>"] = "</code>";
    map["<I:START>"] = '<i data-stringify-prefix="_" data-stringify-suffix="_" data-stringify-requires-siblings>';
    map["<I:END>"] = "</i>";
    map["<PRE:START>"] = '<pre class="special_formatting" data-stringify-prefix="```" data-stringify-suffix="```" data-stringify-requires-siblings>';
    map["<PRE:END>"] = "</pre>";
    return map;
  };
  var _TSF_token_map = _getTokenMap();
  var _emoticon_conversion_token_map = [];
  var _token_cnt = 0;
  var _token_base = "^$-+—!?][{}^$-+—!?][{}^$-+—!?][{}^$-+—!?][{}^$-+—!?][{}^$-+—!?][{}^$-+—!?][{}".split("").sort(function() {
    return .5 - Math.random();
  }).join("");
  var _at_symbol_token = "thisreplacementtokenallowsustotreatatsymbolsasiftheywerewordcharactersinregex".split("").sort(function() {
    return .5 - Math.random();
  }).join("");
  var _dash_symbol_token = "thisreplacementtokenallowsustotreatdashesasiftheywerewordcharactersinregex".split("").sort(function() {
    return .5 - Math.random();
  }).join("");
  var _underscore_symbol_token = "thisreplacementtokenallowsustotreatdashesasiftheywerewordcharactersinregex".split("").sort(function() {
    return .5 - Math.random();
  }).join("");
  var _emoticonConversionTokenReplacer = function(m, boundary) {
    var match = m.slice(boundary.length);
    return boundary + TS.format.tokenizeStr(_emoticon_conversion_token_map, match);
  };
  var _doHighlighting = function(new_txt) {
    var rx;
    var A = TS.model.highlight_words.concat();
    A.sort(function compare(a, b) {
      return b.length - a.length;
    });
    var has_ats = false;
    if (new_txt.indexOf("@") != -1) {
      has_ats = true;
      new_txt = TS.format.swapOutAts(new_txt);
    }
    A.forEach(function(word) {
      if (has_ats) word = TS.format.swapOutAts(word);
      word = TS.utility.regexpEscape(word);
      if (word === "don") word += "(?!['’]t)";
      word = TS.utility.htmlEntities(word);
      if (has_ats) {
        rx = new RegExp("(\\b(?!.)|_|\\s|^)(" + word + ")\\b((?!.)|_|\\s|$)", "ig");
      } else {
        rx = new RegExp("(\\b|_|\\s|^)(" + word + ")(\\b|_|\\s|$)", "ig");
      }
      var last_good_pos = 0;
      new_txt = new_txt.replace(rx, function(m, $0, $1, $2, offset, str) {
        if (str.substr(offset - 1, 1) === "&" && str.substr(offset + m.length, 1) === ";") return m;
        if (str.substr(0, offset).match(/</)) {
          for (var i = offset; i >= last_good_pos; i -= 1) {
            if (str.charAt(i) === "<") {
              return $0 + $1 + $2;
            }
            if (str.charAt(i) === ">") {
              break;
            }
          }
        }
        last_good_pos = offset + m.length;
        return $0 + '<span class="mention">' + $1 + "</span>" + $2;
      });
    });
    if (has_ats) {
      return TS.format.swapInAts(new_txt);
    }
    return new_txt;
  };
  var _encodeSpecialFormattingChars = function(txt) {
    if (!txt) return "";
    return txt.replace(/\*/g, "&ast;").replace(/_/g, "&#95;").replace(/`/g, "&#96;");
  };
  var _encodeSpecialFormattingCharsAndColon = function(txt) {
    if (!txt) return "";
    return _encodeSpecialFormattingChars(txt).replace(/:/g, "&#58;");
  };
  var _calculateOptions = function(msg, opts) {
    opts = opts || {};
    var do_inline_imgs = !!opts.do_inline_imgs || undefined;
    var for_growl = !!opts.for_growl || undefined;
    var for_edit = !!opts.for_edit || undefined;
    var no_highlights = !!opts.no_highlights || undefined;
    var no_specials = !!opts.no_specials || undefined;
    var enable_slack_action_links = !!opts.enable_slack_action_links || undefined;
    var no_jumbomoji = !!opts.no_jumbomoji || undefined;
    var no_preformatted = !!opts.no_preformatted || undefined;
    var custom_linebreak = opts.custom_linebreak || undefined;
    var stop_animations = !!opts.stop_animations || undefined;
    var no_emoji_text = !!opts.no_emoji_text || undefined;
    var transform_missing_emoji = !!opts.transform_missing_emoji || undefined;
    var show_icon_for_emoji_in_as_text_mode = !!opts.show_icon_for_emoji_in_as_text_mode || undefined;
    var ignore_emoji_mode_pref = !!opts.ignore_emoji_mode_pref || undefined;
    var prevent_copy_paste = !!opts.prevent_copy_paste || undefined;
    var no_linking = TS.boot_data.feature_new_broadcast && !!opts.no_linking || undefined;
    var token_overrides = TS.boot_data.feature_new_broadcast && opts.token_overrides || undefined;
    if (no_jumbomoji !== true) {
      no_jumbomoji = !TS.model.prefs.jumbomoji;
    }
    no_highlights = msg && "no_highlights" in msg ? !!msg.no_highlights : !!no_highlights;
    if (!_.isBoolean(no_specials)) {
      if (msg && "mrkdwn" in msg) {
        no_specials = msg.mrkdwn === false;
      } else {
        no_specials = false;
      }
    }
    if (for_edit) no_specials = true;
    var no_emoji = msg && msg.no_emoji;
    var no_hex_colors = !(do_inline_imgs && (!msg || msg.subtype !== "bot_message"));
    if (no_hex_colors !== true) {
      no_hex_colors = !!TS.model.prefs.hide_hex_swatch;
    }
    var do_theme_install_buttons = !no_hex_colors && TS.client && TS.model.team;
    var tsf_mode = "NORMAL";
    if (no_specials) tsf_mode = "NOMRKDWN";
    if (for_growl) tsf_mode = "GROWL";
    if (for_edit) tsf_mode = "EDIT";
    return {
      tsf_mode: tsf_mode,
      no_highlights: no_highlights,
      no_emoji: no_emoji,
      no_hex_colors: no_hex_colors,
      do_inline_imgs: do_inline_imgs,
      enable_slack_action_links: enable_slack_action_links,
      do_theme_install_buttons: do_theme_install_buttons,
      no_jumbomoji: no_jumbomoji,
      no_preformatted: no_preformatted,
      custom_linebreak: custom_linebreak,
      stop_animations: stop_animations,
      no_emoji_text: no_emoji_text,
      transform_missing_emoji: transform_missing_emoji,
      show_icon_for_emoji_in_as_text_mode: show_icon_for_emoji_in_as_text_mode,
      ignore_emoji_mode_pref: ignore_emoji_mode_pref,
      prevent_copy_paste: prevent_copy_paste,
      no_linking: no_linking,
      token_overrides: token_overrides
    };
  };
  var _format = function(txt, msg, opts) {
    var tsf_mode = opts.tsf_mode;
    var no_highlights = opts.no_highlights;
    var no_emoji = opts.no_emoji;
    var no_hex_colors = opts.no_hex_colors;
    var do_inline_imgs = opts.do_inline_imgs;
    var enable_slack_action_links = opts.enable_slack_action_links;
    var do_theme_install_buttons = opts.do_theme_install_buttons;
    var no_jumbomoji = opts.no_jumbomoji;
    var no_preformatted = opts.no_preformatted;
    var custom_linebreak = opts.custom_linebreak;
    var stop_animations = opts.stop_animations;
    var no_emoji_text = opts.no_emoji_text;
    var transform_missing_emoji = opts.transform_missing_emoji;
    var show_icon_for_emoji_in_as_text_mode = opts.show_icon_for_emoji_in_as_text_mode;
    var ignore_emoji_mode_pref = opts.ignore_emoji_mode_pref;
    var prevent_copy_paste = opts.prevent_copy_paste;
    var no_linking = opts.no_linking;
    var token_overrides = opts.token_overrides;
    var map = _TSF_token_map;
    if (custom_linebreak || token_overrides) {
      var overrides = token_overrides || {};
      if (custom_linebreak) overrides["<LINE:BREAK>"] = custom_linebreak;
      map = _.extend({}, map, overrides);
    }
    var html_token_map = [];
    if (do_theme_install_buttons) {
      var total_themes_count = (txt.match(_theme_rx) || []).length;
      var theme_install_btns = [];
      var curr_theme_index = 0;
      txt = txt.replace(_theme_rx, function(m, $1, $2) {
        curr_theme_index += 1;
        var theme_install_btn = total_themes_count > 1 ? _getThemeInstallButtonHtml(m, curr_theme_index) : _getThemeInstallButtonHtml(m);
        theme_install_btns.push(theme_install_btn);
        var theme_count_text = total_themes_count > 1 ? " (" + curr_theme_index + ")	" : "";
        return $1 + TS.format.tokenizeStr(html_token_map, "<nobr>", ",") + $2 + theme_count_text + TS.format.tokenizeStr(html_token_map, "</nobr>");
      });
      txt += TS.format.tokenizeStr(html_token_map, _getThemeInstallButtonsHtml(theme_install_btns));
    }
    var A = TSF.getTokensArray($.trim(txt), tsf_mode, {
      jumbomoji: !no_jumbomoji
    });
    if (no_preformatted) A = A.map(_swapPreForCode);
    if (no_linking) {
      A = _.reject(A, _isLinkStartOrEnd);
    }
    var str = "";
    var c;
    var guts;
    var item;
    var i;
    var id;
    var m;
    var partsA;
    var target;
    var cmd;
    var cmd_label;
    var cmd_A;
    var cmd_args;
    var unix_time;
    var cmd_template;
    var cmd_url;
    var anchor_start;
    var anchor_end;
    var ug;
    var username;
    if (tsf_mode === "GROWL" || tsf_mode === "EDIT") {
      for (i = 0; i < A.length; i += 1) {
        item = A[i];
        if (item.indexOf("<") === 0) {
          if (map[item]) {
            TS.error('unexpected: mode == "GROWL" || "EDIT", and yet we got something in the formatting map? ' + item);
          } else if (item.indexOf("<!") === 0) {
            str += _parseCommandToken(tsf_mode, item);
          } else if (item.indexOf("<@") === 0) {
            username = _parseMemberToken(tsf_mode, item);
            if (username === "`...`") username = '<span class="temp_ellipsis">. . .</span>';
            str += username;
          } else if (item.indexOf("<#") === 0) {
            str += _parseChannelToken(tsf_mode, item);
          } else {
            TS.error('unexpected: mode == "GROWL" || "EDIT", and yet we got ' + item);
          }
        } else if (item.indexOf("<") == -1) {
          if (tsf_mode === "EDIT") {
            if (TS.boot_data.feature_i18n_emoji && TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE) {
              item = TSFEmoji.translateEmojiStringToLocal(item, TS.i18n.locale());
            }
            str += TS.utility.unHtmlEntities(item);
          } else if (TS.utility.platformSupportsHtmlNotifications()) {
            if (TS.utility.platformSupportsImgEmojiInHtmlNotifications()) {
              str += TS.emoji.graphicReplace(item, {
                force_img: true,
                stop_animations: stop_animations
              });
            }
          } else {
            var safe_str = TS.utility.unHtmlEntities(item);
            safe_str = TS.emoji.maybeUnifiedReplace(safe_str);
            if (TS.boot_data.feature_i18n_emoji && TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE) {
              item = TSFEmoji.translateEmojiStringToLocal(item, TS.i18n.locale());
            }
            str += safe_str;
          }
        } else {
          TS.error("token has a < in it but it is not the first character!\n" + item);
        }
      }
    } else {
      var attach_html = "";
      var js_url;
      var display_name;
      var last_item_was_bot_url;
      for (i = 0; i < A.length; i += 1) {
        item = A[i];
        if (item.indexOf("<") === 0) {
          if (map[item]) {
            str += map[item];
            if (item == TSF.LINK_END) {
              str += attach_html;
              attach_html = "";
            }
          } else if (item.indexOf("<!") === 0) {
            str += _parseCommandToken(tsf_mode, item, no_highlights, no_linking);
          } else if (item.indexOf("<@") === 0) {
            username = _parseMemberToken(tsf_mode, item, no_highlights, no_linking);
            if (username === "`...`") username = '<span class="temp_ellipsis">. . .</span>';
            str += username;
          } else if (item.indexOf("<#") === 0) {
            str += _parseChannelToken(tsf_mode, item, no_linking);
          } else if (item.indexOf(TSF.LINK_START.split(" ")[0]) === 0) {
            var url = function(item) {
              var temp = $.trim(item.replace(TSF.LINK_START.split(" ")[0], ""));
              return temp.substr(0, temp.length - 1);
            }(item);
            var bot_id = TS.utility.getBotIDFromURL(url);
            var app_id = "";
            var bot;
            if (bot_id) {
              bot = TS.bots.getBotById(bot_id);
            }
            if (bot_id && bot) {
              last_item_was_bot_url = true;
              target = TS.utility.shouldLinksHaveTargets() ? 'target="' + url + '" ' : "";
              display_name = no_highlights ? bot.name : _doHighlighting(bot.name);
              if (A[i + 1] && A[i + 1] == url) display_name = url;
              display_name = display_name.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
              if (bot.app_id) {
                app_id = bot.app_id;
              }
              str += '<a href="' + url + '" ' + target + 'data-bot-id="' + bot_id + '" data-app-id="' + app_id + '" class="internal_bot_link app_preview_link">' + display_name;
            } else if (url.indexOf(TS.utility.msgs.api_url_prefix + "chat.help") === 0) {
              if (enable_slack_action_links) {
                js_url = TS.utility.htmlEntities(JSON.stringify("" + url));
                str += '<a onclick="TS.utility.msgs.doApiUrl(' + js_url + ')" class="api_url">';
              } else {
                str += '<a class="api_url muted">(Disabled) ';
              }
            } else if (url.indexOf(TS.utility.msgs.new_api_url_prefix) === 0) {
              if (enable_slack_action_links) {
                js_url = TS.utility.htmlEntities(JSON.stringify("" + url));
                str += '<a onclick="TS.utility.msgs.doNewApiUrl(' + js_url + ')" class="api_url">';
              } else {
                str += '<a class="api_url muted">(Disabled) ';
              }
            } else if (url.indexOf("javascript:") === 0) {
              str += '<a onclick="TS.client.msg_pane.maybeClick(this)" data-maybe-click="' + url.replace("javascript:", "") + '">';
            } else if (TS.client && TS.client.core_url && url.indexOf(TS.client.core_url) === 0) {
              str += '<a target="_self" href="' + url + '">';
            } else {
              var file_id = TS.utility.getFileIDFromURL(url);
              var is_welcome_post = false;
              if (file_id && TS.model && TS.model.user && TS.model.user.is_primary_owner) {
                var file = TS.files ? TS.files.getFileById(file_id) : false;
                if (file && TS.utility.welcome_post && file.name == TS.utility.welcome_post.WELCOME_POST_NAME) {
                  is_welcome_post = true;
                }
              }
              var file_link_type = is_welcome_post ? "file_new_window_link welcome_post_slackbot_message" : "file_preview_link";
              var css_class = file_id ? ' class="no_jumbomoji ' + file_link_type + '"' : "";
              var data_file_id = file_id ? ' data-file-id="' + file_id + '"' : "";
              str += "<a " + TS.utility.makeRefererSafeLink(url) + ' target="_blank"' + css_class + data_file_id + ">";
              if (attach_html) {
                TS.error("WTF we should have no attach_html");
              }
              attach_html = "";
              var attachment;
              if (msg && msg.ts && do_inline_imgs) {
                attachment = TS.inline_attachments.getAttachmentByFromUrl(msg.attachments, url);
                if (attachment && (TS.boot_data.feature_attachments_inline || TS.templates.builders.shouldDoSimpleAttachment(attachment, msg))) {
                  attach_html = TS.templates.builders.buildAttachmentHTML({
                    attachment: attachment,
                    url: url,
                    msg: msg,
                    show_initial_caret: true
                  });
                }
              }
            }
          } else if (item.indexOf(TSF.JUMBOMOJI_COLONS.split(" ")[0]) === 0) {
            str += _parseEmojiToken(item, {
              tsf_mode: tsf_mode,
              no_emoji: no_emoji,
              do_jumbomoji: !no_jumbomoji,
              stop_animations: stop_animations,
              no_emoji_text: no_emoji_text,
              transform_missing_emoji: transform_missing_emoji,
              show_icon_for_emoji_in_as_text_mode: show_icon_for_emoji_in_as_text_mode,
              ignore_emoji_mode_pref: ignore_emoji_mode_pref
            });
          } else if (item.indexOf(TSF.EMOJI_COLONS.split(" ")[0]) === 0) {
            str += _parseEmojiToken(item, {
              tsf_mode: tsf_mode,
              no_emoji: no_emoji,
              do_jumbomoji: false,
              stop_animations: stop_animations,
              no_emoji_text: no_emoji_text,
              transform_missing_emoji: transform_missing_emoji,
              show_icon_for_emoji_in_as_text_mode: show_icon_for_emoji_in_as_text_mode,
              ignore_emoji_mode_pref: ignore_emoji_mode_pref
            });
          } else if (item.indexOf(TSF.HEX_BLOCK.split(" ")[0]) === 0) {
            str += _parseHexToken(tsf_mode, item, no_hex_colors);
          } else {
            TS.error("markup token not handled:" + item);
          }
        } else if (item.indexOf("<") === -1) {
          if (last_item_was_bot_url) {
            last_item_was_bot_url = false;
          } else {
            if (!no_highlights) {
              item = _doHighlighting(item);
            }
            if (prevent_copy_paste) {
              item = _.map($.parseHTML(item), function(node) {
                if (node.nodeType === Node.TEXT_NODE) {
                  return '<span class="prevent_copy_paste" aria-label="' + TS.utility.htmlEntities(node.textContent) + '"></span>';
                }
                return node.outerHTML;
              }).join("");
            }
            str += item;
          }
        } else {
          TS.error("token has a < in it but it is not the first character!\n" + item);
        }
      }
    }
    if (msg && (msg.subtype === "sh_room_created" || msg.subtype === "sh_room_shared")) {
      var from_name = TS.ui.growls.extractFromNameFromCorGMessage(msg);
      if (from_name) {
        if (tsf_mode !== "GROWL" || TS.utility.platformSupportsHtmlNotifications()) {
          from_name = TS.utility.htmlEntities(from_name);
        }
        from_name += ": ";
      }
      str = msg.subtype === "sh_room_created" ? TS.i18n.t("{from_name} Started a call", "string_format")({
        from_name: from_name
      }) : TS.i18n.t("{from_name} Shared a call", "string_format")({
        from_name: from_name
      });
    }
    str = TS.format.deTokenizeStr(html_token_map, str);
    return str;
  };
  var _parseChannelToken = function(tsf_mode, item, no_linking) {
    var guts = item.replace(/<|>|#/g, "");
    var partsA = guts.split("|");
    var id = partsA[0];
    var channel = TS.channels.getChannelById(id);
    if (channel) {
      var name_for_url = TS.boot_data.feature_intl_channel_names ? channel.id : channel.name;
      if (tsf_mode === "GROWL" || tsf_mode === "EDIT" || no_linking) {
        return "#" + channel.name;
      }
      var target = TS.utility.shouldLinksHaveTargets() ? 'target="/archives/' + name_for_url + '"' : "";
      return '<a href="/archives/' + name_for_url + '" ' + target + ' data-channel-name="' + channel.name + '" data-channel-id="' + channel.id + '" class="internal_channel_link">#' + channel.name + "</a>";
    }
    if (partsA.length > 1 && partsA[1]) {
      return "#" + partsA[1];
    } else if (TS.model.user.is_restricted) {
      return "#unknown-channel";
    }
    return "#deleted-channel";
  };
  var _parseEmojiToken = function(item, options) {
    options = options || {};
    var colons = item.split(" ")[1].replace(">", "");
    if (options.no_emoji) {
      return colons;
    }
    var replaced;
    if (options.transform_missing_emoji && !TS.emoji.isValidName(colons)) {
      replaced = TS.emoji.MISSING_EMOJI_HTML;
    } else if (options.show_icon_for_emoji_in_as_text_mode && TS.model.prefs.emoji_mode === "as_text") {
      replaced = TS.emoji.graphicReplace(colons, {
        show_icon_for_emoji_in_as_text_mode: true
      });
    } else {
      replaced = TS.emoji.graphicReplace(colons, {
        obey_emoji_mode_pref: !options.ignore_emoji_mode_pref,
        include_title: true,
        include_text: !options.no_emoji_text,
        jumbomoji: options.do_jumbomoji,
        stop_animations: options.stop_animations
      });
    }
    if (replaced && replaced.indexOf(">>") !== -1) {
      TS.warn("TS.emoji.graphicReplace may be malformed: " + replaced);
    }
    return replaced;
  };
  var _parseMemberToken = function(tsf_mode, item, no_highlights, no_linking) {
    var guts = item.replace(/<|>/g, "");
    var m = TS.utility.msgs.getMemberFromMemberMarkup(guts);
    if (!m) {
      if (tsf_mode === "GROWL") return item;
      var username_parts = guts.split("|");
      if (username_parts.length > 1 && username_parts[1]) {
        return "@" + username_parts[1];
      }
      return "`...`";
    }
    var classes = ["internal_member_link"];
    var data_tags_object = {
      "member-id": m.id,
      "member-name": m.name,
      "stringify-text": "@" + m.id
    };
    if (m.is_bot && m.profile) {
      var bot_id = _.get(m.profile, "bot_id");
      if (bot_id) {
        data_tags_object["bot-id"] = bot_id;
        var bot_info = TS.bots.getBotById(bot_id);
        if (_.get(bot_info, "app_id")) {
          data_tags_object["app-id"] = bot_info.app_id;
        }
      }
      classes = _.pull(classes, "internal_member_link");
      classes.push("app_preview_link");
    }
    var data_tags = "";
    _.forEach(data_tags_object, function(value, key) {
      data_tags += "data-" + key + '="' + value + '" ';
    });
    var display_name = "@" + m.name;
    var target;
    if (TS.boot_data.feature_texty_mentions) {
      if (tsf_mode === "EDIT") {
        return "@" + m.name;
      }
      if (TS.boot_data.feature_name_tagging_client) {
        display_name = TS.members.getMemberDisplayName(m, true, true);
      }
      if (tsf_mode === "GROWL" || !TS.permissions.members.canUserSeeMember(m)) {
        return display_name;
      }
      target = TS.utility.shouldLinksHaveTargets() ? 'target="/team/' + m.id + '" ' : "";
      if (m.id == TS.model.user.id) classes.push("mention");
      if (no_linking) {
        return display_name;
      }
      return '<a href="/team/' + m.id + '" ' + target + data_tags + 'class="' + classes.join(" ") + '">' + display_name + "</a>";
    }
    if (tsf_mode === "EDIT" || tsf_mode === "GROWL") {
      return "@" + m.name;
    }
    if (TS.permissions.members.canUserSeeMember(m) && !no_linking) {
      target = TS.utility.shouldLinksHaveTargets() ? 'target="/team/' + m.name + '" ' : "";
      if (!no_highlights) display_name = _doHighlighting(display_name);
      return '<a href="/team/' + m.name + '" ' + target + data_tags + 'class="' + classes.join(" ") + '">' + display_name + "</a>";
    }
    return display_name;
  };
  var _parseCommandToken = function(tsf_mode, item, no_highlights, no_linking) {
    if (TS.boot_data.page_needs_enterprise && TS.boot_data.feature_default_shared_channels) {
      var current_model_ob = TS.shared.getActiveModelOb() || {};
      if (current_model_ob.is_shared && TS.channels.isChannelOrgDefault(current_model_ob)) {
        no_highlights = true;
        no_linking = true;
      }
    }
    var guts = item.replace(/<|>/g, "");
    var cmd_A = guts.split("|");
    var cmd = cmd_A[0].substr(1);
    if (_.includes(_at_commands, cmd)) {
      if (tsf_mode === "GROWL" || tsf_mode === "EDIT" || no_linking) {
        return "@" + cmd;
      }
      return '<b class="mention">@' + cmd + "</b>";
    }
    var cmd_label = cmd_A[1] ? cmd_A[1] : cmd;
    if (cmd.indexOf("^") !== -1) {
      var cmd_args = cmd.split("^");
      cmd = cmd_args.shift();
      if (cmd === "date" && cmd_args.length >= 2) {
        var unix_time = cmd_args[0];
        var cmd_template = cmd_args[1];
        var formatted_date = TS.utility.date.formatDate(cmd_template, unix_time, cmd_label);
        var cmd_url = cmd_args.length > 2 ? cmd_args[2] : "";
        if (tsf_mode === "GROWL" || tsf_mode === "EDIT" || !cmd_url || no_linking) {
          return formatted_date;
        }
        return "<a " + TS.utility.makeRefererSafeLink(cmd_url) + ' target="_blank">' + formatted_date + "</a>";
      } else if (cmd === "subteam" && cmd_args.length === 1) {
        var ug = TS.user_groups.getUserGroupsById(cmd_args[0]);
        if (ug && ug.handle) {
          if (tsf_mode === "GROWL" || tsf_mode === "EDIT") {
            return "@" + ug.handle;
          }
          var target = TS.utility.shouldLinksHaveTargets() ? 'target="/usergroups/' + ug.id + '" ' : " ";
          var handle = TS.utility.htmlEntities(ug.handle);
          var display_name = no_highlights ? "@" + handle : _doHighlighting("@" + handle);
          var classes = ["internal_user_group_link"];
          if (no_linking) {
            return display_name;
          }
          if (TS.boot_data.feature_texty_mentions) {
            display_name = "@" + handle;
            if (!no_highlights && TS.model.highlight_words.indexOf("@" + handle) !== -1) classes.push("mention");
          }
          return '<a href="/usergroups/' + ug.id + '" ' + target + 'data-user-group-id="' + ug.id + '" class="' + classes.join(" ") + '">' + display_name + "</a>";
        }
        if (tsf_mode !== "GROWL" && tsf_mode !== "EDIT") {
          return cmd_label;
        }
      } else {
        if (tsf_mode === "GROWL" || tsf_mode === "EDIT") {
          return "<" + cmd_label + ">";
        }
        return "&lt;" + cmd_label + "&gt;";
      }
    } else {
      if (tsf_mode === "GROWL" || tsf_mode === "EDIT") {
        return "<" + cmd_label + ">";
      }
      return "&lt;" + cmd_label + "&gt;";
    }
    return "";
  };
  var _parseHexToken = function(tsf_mode, item, no_hex_colors) {
    var hex = item.split(" ")[1].replace(">", "");
    if (!no_hex_colors) {
      return ' <div class="inline_color_block" style="background:' + hex + ';"></div>';
    }
    return "";
  };
  var _getThemeInstallButtonHtml = function(theme, curr_theme_index) {
    var inner_html = "Switch sidebar theme";
    if (curr_theme_index) inner_html += " (" + curr_theme_index + ")";
    return '<a data-theme="' + TS.utility.htmlEntities(theme) + '" class="btn btn_small btn_outline very_small_top_margin very_small_bottom_margin tiny_right_margin theme_installer_btn">' + inner_html + "</a>";
  };
  var _getThemeInstallButtonsHtml = function(theme_install_btns) {
    if (theme_install_btns && theme_install_btns.length) {
      return '<br/><span class="theme_install_btns">' + theme_install_btns.join(" ") + "</span>";
    }
    return "";
  };

  function _isPartOfUrl(haystack, needle, offset) {
    var last_prior_space = haystack.lastIndexOf(" ", offset);
    var start_index = last_prior_space !== -1 ? last_prior_space + 1 : 0;
    var maybe_url = haystack.substring(start_index, offset + needle.length);
    var is_url = TS.utility.findUrls(maybe_url).length > 0;
    return is_url;
  }

  function _swapPreForCode(token) {
    switch (token) {
      case TSF.PRE_START:
        return TSF.CODE_START;
      case TSF.PRE_END:
        return TSF.CODE_END;
      default:
        break;
    }
    return token;
  }

  function _htmlToText(html) {
    var el = document.createElement("div");
    el.innerHTML = html;
    return el.textContent;
  }

  function _getMemberSlug(member) {
    var member_name = TS.members.getMemberDisplayName(member);
    var member_name_escaped = TS.utility.htmlEntities(member_name);
    var slug_html = TS.templates.member_slug({
      member_username: member.name,
      member_id: member.id,
      member_name: new Handlebars.SafeString(member_name_escaped)
    }).trim();
    return {
      html: slug_html,
      txt: _htmlToText(slug_html)
    };
  }

  function _cleanMsgText(txt, options) {
    if (!txt) return "";
    if (!options) options = {};
    if (TS.utility.contenteditable.supportsTexty()) {
      txt = TS.format.replaceUnicodeDoppelgangers(txt);
    }
    if (options.do_specials) {
      txt = TSF.getTokensString(txt, "CLEAN", {
        jumbomoji: TS.model.prefs.jumbomoji
      });
    }
    var replace_contents_map = [];
    if (TS.boot_data.feature_ignore_code_mentions) {
      txt = TSF.replaceFormatContents(replace_contents_map, txt, {
        replace_pre: true,
        replace_code: true
      });
    }
    txt = txt.replace(_at_mention_rx, function(match, boundry, at_member_id, member_id, offset) {
      if (boundry === "/" && _isPartOfUrl(txt, match, offset)) return match;
      var extra = "";
      var lc = at_member_id.toLowerCase();
      var cmd;
      if (/^@everyone[.|\-|_]*$/.test(lc)) {
        cmd = "<!everyone>";
        extra = lc.substr("!everyone".length);
      } else if (/^@here[.|\-|_]*$/.test(lc)) {
        cmd = "<!here|@here>";
        extra = lc.substr("!here".length);
      } else if (/^@channel[.|\-|_]*$/.test(lc)) {
        cmd = "<!channel>";
        extra = lc.substr("!channel".length);
      } else if (/^@group[.|\-|_]*$/.test(lc)) {
        cmd = "<!group>";
        extra = lc.substr("!group".length);
      }
      if (cmd) {
        return boundry + cmd + extra;
      }
      var lookupByName = TS.members.getMemberByName;
      if (TS.boot_data.feature_shared_channels_client) {
        lookupByName = function(member) {
          return TS.members.getMemberByNameAndTeamId(member, TS.model.team.id);
        };
      }
      var valid = _validateModelObByIdOrName(TS.members.getMemberById, member_id, lookupByName, at_member_id);
      if (valid.model_ob) {
        var member_identifier;
        if (options.human_readable) {
          member_identifier = "@" + valid.model_ob.name;
        } else {
          member_identifier = "<@" + valid.model_ob.id + ">";
        }
        return boundry + member_identifier + valid.extra;
      }
      valid = _validateModelObByIdOrName(TS.user_groups.getUserGroupsById, member_id, TS.user_groups.getUserGroupsByHandle, at_member_id);
      if (valid.model_ob) {
        var usergroup_identifier;
        if (options.human_readable) {
          usergroup_identifier = "@" + valid.model_ob.handle;
        } else {
          usergroup_identifier = "<!subteam^" + valid.model_ob.id + "|@" + valid.model_ob.handle + ">";
        }
        return boundry + usergroup_identifier + valid.extra;
      }
      return boundry + at_member_id;
    });
    txt = txt.replace(_channel_name_rx, function(match, boundry, hash_channel_id, channel_id, offset) {
      if (boundry === "/" && _isPartOfUrl(txt, match, offset)) return match;
      var valid = _validateModelObByIdOrName(TS.channels.getChannelById, hash_channel_id.substr(1), TS.channels.getChannelByName, hash_channel_id);
      if (valid.model_ob) {
        var channel_identifier;
        if (options.human_readable) {
          channel_identifier = "#" + valid.model_ob.name;
        } else {
          channel_identifier = "<#" + valid.model_ob.id + "|" + valid.model_ob.name + ">";
        }
        return boundry + channel_identifier + valid.extra;
      }
      return boundry + hash_channel_id;
    });
    if (TS.model.prefs.convert_emoticons && TS.model.prefs.emoji_mode !== "as_text") {
      txt = TS.format.doEmoticonConversion(txt);
    }
    if (TS.boot_data.feature_i18n_emoji && TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE) {
      txt = TSFEmoji.translateEmojiStringToCanonical(txt, TS.i18n.locale());
    }
    if (TS.boot_data.feature_ignore_code_mentions) {
      txt = TSF.swapOutPlaceholders(replace_contents_map, txt);
    }
    return txt;
  }

  function _sharedChannelsNonUniqueUsernames(str) {
    if (!TS.boot_data.feature_shared_channels_client) return false;
    var name_parts = str.split("+");
    if (name_parts.length !== 2) return false;
    var username = name_parts[0];
    var team_id = name_parts[1];
    if (!TS.utility.strLooksLikeATeamId(team_id)) {
      var team = TS.teams.getTeamByDomain(team_id);
      team_id = team ? team.id : false;
    }
    if (!team_id) return false;
    return TS.members.getMemberByNameAndTeamId(username, team_id);
  }

  function _validateModelObByIdOrName(lookupById, id, lookupByName, name) {
    var stripped;
    var extra = "";
    var model_ob;
    if ((TS.boot_data.feature_intl_channel_names || TS.boot_data.feature_name_tagging_client_extras) && _.isFunction(lookupById) && _.isString(id)) {
      stripped = id.substring(0, TS.model.model_ob_id_length);
      model_ob = lookupById(stripped);
      if (model_ob) extra = id.substring(TS.model.model_ob_id_length);
    }
    if (!model_ob) {
      model_ob = lookupByName(name);
    }
    if (!model_ob && _.isString(id)) {
      model_ob = _sharedChannelsNonUniqueUsernames(id);
    }
    var specials = [".", "..", "...", "....", "-", "--", "_", "…"];
    var i = 0;
    while (!model_ob && i < specials.length) {
      var special = specials[i];
      if (name && name.substr(name.length - special.length, special.length) == special) {
        stripped = name.substr(0, name.length - special.length);
        model_ob = lookupByName(stripped);
        if (!model_ob) model_ob = _sharedChannelsNonUniqueUsernames(stripped.replace(/^@/, ""));
        if (model_ob) extra = special;
      }
      i += 1;
    }
    return {
      model_ob: model_ob,
      extra: extra
    };
  }
  var _hasStringifyTransformations = function(node) {
    if (!node || node instanceof Text) return false;
    return _.some(_stringify_transform_attrs, function(transformFn, attr) {
      return node.hasAttribute(attr);
    });
  };
  var _isLinkStartOrEnd = function(token) {
    if (!_link_start_prefix) {
      _link_start_prefix = TSF.LINK_START.split(" ")[0];
    }
    if (_.startsWith(token, _link_start_prefix)) return true;
    if (token === TSF.LINK_END) return true;
    return false;
  };
  var _link_start_prefix;
})();
(function() {
  "use strict";
  TS.registerModule("selection", {
    isAnyTextSelected: function() {
      return window.getSelection().toString().trim() != "";
    },
    selectNode: function(node) {
      if (!node) return;
      if (!document.body.contains(node)) {
        TS.warn("TS.selection.selectNode: node is not in DOM");
        return;
      }
      var range = document.createRange();
      range.selectNode(node);
      var selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range);
      return selection;
    },
    selectNodeContents: function(node) {
      if (!node) return;
      if (!document.body.contains(node)) {
        TS.warn("TS.selection.selectNodeContents: node is not in DOM");
        return;
      }
      var range = document.createRange();
      range.selectNodeContents(node);
      var selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range);
      return selection;
    },
    selectCharacters: function(input, start, end) {
      if (!input) return;
      if (!document.body.contains(input)) {
        TS.warn("TS.selection.selectCharacters: node is not in DOM");
        return;
      }
      if (!_.isNumber(start)) start = 0;
      if (!_.isNumber(end)) end = start;
      if ("setSelectionRange" in input) {
        input.focus();
        input.setSelectionRange(start, end);
        return;
      }
      if (!input.childNodes.length) return;
      var index = 0;
      var start_node;
      var start_offset = 0;
      var end_node;
      var end_offset = 0;
      var text_children = TS.utility.getChildTextNodes(input);
      _.each(text_children, function(node) {
        var len = node.textContent.length;
        if (!start_node && index + len >= start) {
          start_node = node;
          start_offset = start - index;
        }
        if (!end_node && index + len >= end) {
          end_node = node;
          end_offset = end - index;
        }
        if (start_node && end_node) return false;
        index += len;
      });
      if (!start_node || !end_node) {
        TS.warn("TS.selection.selectCharacters: could not find start and end nodes");
        return;
      }
      var range = document.createRange();
      range.setStart(start_node, start_offset);
      range.setEnd(end_node, end_offset);
      var selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range);
    },
    snapshot: function() {
      var selection = window.getSelection();
      var range;
      if (selection.rangeCount) range = selection.getRangeAt(0).cloneRange();
      return function() {
        var current = window.getSelection();
        current.removeAllRanges();
        if (range) current.addRange(range);
      };
    },
    toCharacterRange: function(node) {
      var output = {
        start: 0,
        end: 0
      };
      if (!node) return output;
      if (!document.body.contains(node)) {
        TS.warn("TS.selection.toCharacterRange: node is not in DOM");
        return;
      }
      var selection = rangy.getSelection();
      if (!selection.rangeCount) return output;
      var range = selection.getRangeAt(0);
      output = range.toCharacterRange(node);
      return output;
    },
    insertAtCaret: function(str) {
      if (!_.isString(str)) str = "";
      var selection = window.getSelection();
      if (!selection.rangeCount) TS.warn("TS.selection.insertAtCaret: no range");
      var range = selection.getRangeAt(0);
      range.deleteContents();
      var text_node = document.createTextNode(str);
      range.insertNode(text_node);
      range.setStartAfter(text_node);
      selection.removeAllRanges();
      selection.addRange(range);
    },
    removeNextChars: function(num) {
      if (!_.isNumber(num) || !num) return;
      var selection = rangy.getSelection();
      var range = selection.getRangeAt(0);
      if (num > 0) {
        range.moveEnd("character", num);
      } else {
        range.moveStart("character", num);
      }
      range.deleteContents();
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("menu", {
    $menu: null,
    $submenu: null,
    $submenu_origin: null,
    $submenu_parent: null,
    $menu_header: null,
    $menu_items: null,
    $menu_list_container: null,
    $menu_list: null,
    $menu_footer: null,
    menu_lazy_load: null,
    user_group: null,
    end_tim: 0,
    $target_element: null,
    $secondary_target_element: null,
    members_html_cache: null,
    large_list_trigger: 1500,
    large_dom_trigger: 500,
    watching_members_model: false,
    menu_items_hidden: true,
    has_submenu: false,
    menu_closed_sig: new signals.Signal,
    onStart: function() {},
    buildIfNeeded: _.once(function() {
      TS.menu.$menu = $(TS.templates.menu());
      var $menu = TS.menu.$menu;
      if (TS.boot_data.app !== "mobile" && TS.qs_args.new_scroll != "0") {
        if (TS.client) {
          $menu.appendTo($("#client-ui"));
        } else {
          $menu.appendTo($("body"));
        }
        if (!TS.environment.supports_custom_scrollbar) {
          var debug = TS.qs_args.debug_scroll == "1";
          $menu.find("#menu_items_scroller").monkeyScroll({
            debug: debug
          });
        }
        $menu.detach();
      }
      TS.menu.$menu_header = $menu.find("#menu_header");
      TS.menu.$menu_body = $menu.find(".menu_body");
      TS.menu.$menu_list_container = $menu.find("#menu_list_container");
      TS.menu.$menu_list = $menu.find("#menu_list");
      TS.menu.$menu_items = $menu.find("#menu_items");
      TS.menu.$menu_footer = $menu.find("#menu_footer");
    }),
    handleTopicKeydown: function(e) {
      var keymap = TS.utility.keymap;
      if (e.which == keymap.enter && !e.shiftKey && !e.altKey) {
        var input = $(e.target);
        var model_ob = TS.shared.getActiveModelOb();
        var new_val = $.trim(input.val());
        if (model_ob.topic.value === new_val) {
          TS.menu.end();
          return;
        }
        if (model_ob.is_group) {
          TS.groups.setTopic(model_ob.id, new_val);
        } else if (model_ob.is_channel) {
          TS.channels.setTopic(model_ob.id, new_val);
        }
        TS.menu.end();
      }
    },
    startWithList: function(e, $list, options) {
      if (!$list || !$list.length) return;
      if (TS.menu.isRedundantClick(e)) return;
      options = options || {};
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html($list.html());
      TS.menu.$menu.addClass(options.menu_class);
      if (options.close_on_click || options.onClick) {
        TS.menu.$menu_items.on("click.menu", "li", function(e) {
          if (typeof options.onClick === "function") options.onClick(e);
          if (options.close_on_click) TS.menu.end();
        });
      }
      TS.menu.start(e, undefined, options);
      if (options.attach_to_target_at_full_width) {
        TS.menu.$menu.css({
          width: "100%",
          top: "calc(100% + 3px)",
          left: "0"
        });
      } else {
        var offsets = _getOffsets(options.align_right);
        TS.menu.positionAt(TS.menu.$target_element, offsets.left, offsets.top);
      }
    },
    startWithDatePicker: function(e) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(TS.templates.menu_date_picker_items());
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.onDatePickerItemClick);
      TS.menu.$menu.attr("data-qa", "date_picker_menu");
      var $date_picker_container = $("#date_picker_cal_container");
      TS.ui.date_picker.startJumpToDatePicker($date_picker_container);
      TS.menu.$menu.addClass("date_picker");
    },
    onDatePickerItemClick: function(e) {
      var id = $(this).attr("id");
      var model_ob = TS.shared.getActiveModelOb();
      if ($(this).hasClass("disabled")) {
        TS.menu.end();
        return;
      }
      if (id === "date_picker_back_item") {
        e.preventDefault();
        _no_reposition = true;
        if (model_ob.is_im) {
          TS.menu.member.startWithMember(e, model_ob.user, false, false, true);
        } else if (model_ob.is_mpim) {
          TS.menu.mpim.startWithMpim(e, model_ob.id);
        } else if (model_ob.is_group) {
          TS.menu.group.startWithGroup(e, model_ob.id);
        } else if (model_ob.is_channel) {
          TS.menu.channel.startWithChannel(e, model_ob.id);
        }
        TS.menu.$menu.removeClass("date_picker");
        return;
      }
      TS.warn("not sure what to do with clicked element id:" + id);
    },
    startWithMessageActions: function(e, msg_ts, msgs, model_ob) {
      if (TS.client && !TS.model.ms_connected) {
        TS.sounds.play("beep");
        return;
      }
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var msg = TS.utility.msgs.getMsg(msg_ts, msgs);
      model_ob = model_ob || TS.shared.getActiveModelOb();
      if (!msg) {
        msg = TS.ui.replies.getActiveMessage(model_ob, msg_ts);
      }
      if (!msg && TS.model.threads_view_is_showing) {
        msg = TS.client.threads.getMessage(model_ob, msg_ts);
      }
      if (!msg && TS.model.unread_view_is_showing) {
        msg = TS.client.unread.getMessage(model_ob, msg_ts);
      }
      var actions = TS.utility.msgs.getMsgActions(msg, model_ob);
      var is_unread_view = TS.model.unread_view_is_showing;
      var allow_mark_unread = actions.mark_unread && (TS.utility.msgs.getMarkMsgTSForUnreadPoint(msg_ts, msgs, model_ob) || is_unread_view) && !TS.model.archive_view_is_showing && !msg.is_ephemeral;
      actions.mark_unread = !!allow_mark_unread;
      var recap_highlight = false;
      var recappable_message = false;
      if (TS.boot_data.feature_sli_recaps && TS.recaps_signal) {
        var recap_group = TS.recaps_signal.sli_recaps_debug_group;
        if (recap_group === "sli_debug_info") {
          recap_highlight = true;
          if (!model_ob.is_mpim && !model_ob.is_im && msg.recap) {
            if (TS.recaps_signal && !TS.recaps_signal.isMessageHighlight(msg)) {
              recappable_message = true;
            }
          }
        }
      }
      var template_args = {
        msg: msg,
        actions: actions,
        model_ob: model_ob,
        is_all_unreads_showing: TS.model.unread_view_is_showing,
        sli_recap_preview: recap_highlight,
        recappable_message: recappable_message,
        is_channel_or_group: model_ob.is_channel || model_ob.is_group && !model_ob.is_mpim
      };
      var $el = $(e.target);
      template_args.abs_permalink = TS.utility.msgs.constructAbsoluteMsgPermalink(model_ob, msg.ts, msg.thread_ts);
      if (msg.subtype === "file_share" || msg.subtype === "file_mention") {
        if (msg.file) {
          template_args.abs_permalink = msg.file.permalink;
        }
      }
      if (TS.replies.canReplyToMsg(model_ob, msg)) {
        template_args.can_subscribe = true;
        template_args.subscription = TS.replies.getSubscriptionState(model_ob.id, msg.ts);
        template_args.context = TS.ui.thread.getContextForEl($el);
        if (!template_args.subscription) {
          TS.replies.promiseToGetSubscriptionState(model_ob.id, msg.ts).then(function(subscription) {
            _maybeUpdateSubscriptionMenuItem(model_ob.id, msg.ts, subscription);
          });
        }
        template_args.prefs_threads_everything = _.get(TS, "model.prefs.threads_everything");
      }
      template_args.is_in_conversation = $el.closest("ts-conversation").length > 0;
      var is_in_threads_view = $el.closest("#threads_msgs").length > 0;
      var is_in_thread = template_args.is_in_conversation || is_in_threads_view;
      actions.mark_unread = actions.mark_unread && !is_in_thread;
      if (is_in_thread && msg.subtype === "tombstone") {
        actions.has_private_actions = false;
      }
      if (TS.boot_data.feature_new_broadcast) {
        if (msg.subtype === "thread_broadcast") {
          if (!is_in_thread && actions.delete_msg) actions.delete_msg = false;
          if (is_in_thread && actions.remove_broadcast || model_ob.is_channel && !model_ob.is_member) actions.remove_broadcast = false;
        }
      }
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(TS.templates.menu_message_action_items(template_args));
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.onMessageActionClick);
      TS.log("enabled reminders msg action menu");
      TS.menu.has_submenu = true;
      var $remind_me = TS.menu.$menu_items.find("#remind_me");
      $remind_me.on("highlighted", function() {
        $remind_me.submenu({
          items_html: TS.templates.remind_me_items(),
          onclick: _.partial(TS.menu.onMessageRemindClick, model_ob, msg, is_in_thread)
        });
      }).on("unhighlighted", function() {
        if (TS.menu.$submenu && !TS.menu.$submenu.hasClass("kb_active")) $remind_me.submenu("destroy");
      });
      TS.menu.start(e);
      TS.menu.$target_element = $el.closest("[data-action]");
      TS.menu.$target_element.addClass("active");
      TS.menu.$secondary_target_element = $el.closest("ts-message");
      TS.menu.$secondary_target_element.addClass("active");
      var top_offset = 0;
      var left_offset = $el.width() + 10;
      if (TS.client && !TS.model.ui_state.flex_visible) left_offset = -(TS.menu.$menu.width() + 10);
      var $center_item = TS.menu.$menu.find("#edit_link");
      if ($center_item.length === 0) $center_item = TS.menu.$menu.find("#rxn_link");
      if ($center_item.length > 0) {
        var menu_top = TS.menu.$menu.offset().top;
        var center_item_top = $center_item.offset().top;
        top_offset = -(center_item_top - menu_top + $center_item.height() / 2 - 5);
      }
      TS.menu.positionAt($el, left_offset, top_offset);
      TS.menu.keepInBounds();
    },
    onMessageActionClick: function(e) {
      e.preventDefault();
      if (TS.isPartiallyBooted()) {
        TS.incremental_boot.userDidInteractWithUI();
        return;
      }
      var $target = $(this);
      var id = $target.attr("id");
      var msg_ts = $target.data("msg-ts");
      var model_ob_id = $target.data("model-ob-id");
      var rxn_key = $target.data("rxn-key");
      var model_ob = model_ob_id ? TS.shared.getModelObById(model_ob_id) : TS.shared.getActiveModelOb();
      var thread_ts;
      if (id === "edit_link") {
        var edit_state = $target.data("edit-state");
        TS.msg_edit.startEdit(msg_ts, model_ob, edit_state);
      } else if (id === "delete_link") {
        TS.msg_edit.startDelete(msg_ts, model_ob);
      } else if (id === "open_in_channel") {
        thread_ts = $target.attr("data-thread-ts");
        TS.client.ui.tryToJump(model_ob.id, thread_ts);
      } else if (id === "open_thread_in_flexpane") {
        var msg = TS.utility.msgs.findMsg(msg_ts, model_ob.id);
        if (msg && TS.replies && TS.replies.canReplyToMsg(model_ob, msg)) {
          thread_ts = msg.thread_ts || msg.ts;
          TS.ui.replies.openConversation(model_ob, thread_ts);
        }
      } else if (id === "toggle-subscription-status") {
        var is_subscribed = $target.data("subscribed");
        var last_read;
        var root_msg = TS.utility.msgs.findMsg(msg_ts, model_ob_id);
        if (root_msg && root_msg.replies && root_msg.replies.length) {
          last_read = _.last(root_msg.replies).ts;
        }
        $target.addClass("disabled");
        TS.replies.setSubscriptionState(model_ob_id, msg_ts, !is_subscribed, last_read);
        var clog_key = is_subscribed ? "THREADS_UNFOLLOW_CLICKED" : "THREADS_FOLLOW_CLICKED";
        var context = $target.data("context");
        var num_msg_in_thread = _.get(root_msg, ".reply_count", 0) + 1;
        TS.ui.thread.trackEvent(model_ob_id, msg_ts, context, clog_key, {
          num_msg_in_thread: num_msg_in_thread
        });
      } else if (id === "pin_link") {
        TS.pins.startPinMessage(msg_ts, model_ob);
      } else if (id === "unpin_link") {
        TS.pins.unPinMessage(msg_ts, model_ob);
      } else if (id === "rxn_link") {
        TS.ui.react_emoji_menu.start({
          e: e,
          rxn_key: rxn_key
        });
      } else if (id === "mark_unread") {
        if (TS.model.unread_view_is_showing) {
          TS.client.ui.unread.setUnreadPoint(msg_ts);
        } else {
          TS.info("setting unread point on " + model_ob.id + " due to message action click (" + msg_ts + ")");
          TS.client.msg_pane.setUnreadPoint(msg_ts);
        }
      } else if (id === "copy_link") {
        TS.clipboard.writeText($(this).data("permalink"));
        var $message = TS.menu.$secondary_target_element;
        var payload = {
          message_timestamp: msg_ts,
          channel_id: model_ob_id,
          channel_type: model_ob_id[0] || "",
          member_id: $message.data("member-id"),
          app_id: $message.data("app-id"),
          bot_id: $message.data("bot-id")
        };
        TS.clog.track("MSG_LINK_COPY", payload);
      } else if (id === "open_original_link") {} else if (id === "share_message_link") {
        TS.ui.share_message_dialog.start(msg_ts, model_ob);
      } else if (id === "remove_broadcast_link") {
        TS.msg_edit.startRemoveBroadcast(msg_ts, model_ob);
      }
      TS.menu.end();
    },
    onMessageRemindClick: function(model_ob, msg, from_thread, e) {
      var action = $(e.target).data("msg-action");
      if (action === "remind") {
        var api_args = {
          time: $(e.target).data("remind-length"),
          message_channel: model_ob.id,
          message_ts: msg.ts
        };
        if (msg.subtype === "thread_broadcast" && !from_thread) {
          api_args.respond_in_channel = true;
        }
        TS.api.call("reminders.addFromMessage", api_args, function() {});
      }
      TS.menu.end();
    },
    startWithCommentActions: function(e, file_id, comment_id) {
      if (TS.client && !TS.model.ms_connected) {
        TS.sounds.play("beep");
        return;
      }
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var file = TS.files.getFileById(file_id);
      if (!file) return;
      var comment = TS.files.getFileCommentById(file, comment_id);
      if (!comment) return;
      var model_ob = TS.shared.getActiveModelOb();
      var actions = TS.files.getFileCommentActions(comment, file);
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(TS.templates.menu_comment_action_items({
        model_ob: model_ob,
        file: file,
        comment: comment,
        actions: actions
      }));
      var $el = $(e.target);
      TS.menu.$menu_items.on("click.menu", "li", function(menu_item_event) {
        var $original_cog_clicked = $el.closest(".comment_actions");
        TS.menu.onCommentActionClick(menu_item_event, $original_cog_clicked);
      });
      TS.menu.start(e);
      var top_offset = 0;
      var left_offset = -(TS.menu.$menu.width() + 10);
      var $center_item = TS.menu.$menu.find("#edit_file_comment");
      if ($center_item.length === 0) $center_item = TS.menu.$menu.find("#rxn_file_comment");
      if ($center_item.length > 0) {
        var menu_top = TS.menu.$menu.offset().top;
        var center_item_top = $center_item.offset().top;
        top_offset = -(center_item_top - menu_top + $center_item.height() / 2 - 5);
      }
      TS.menu.positionAt($el, left_offset, top_offset);
      TS.menu.keepInBounds();
    },
    onCommentActionClick: function(e, $menu_target) {
      e.preventDefault();
      var $target = $(e.target).closest("[id]");
      var id = $target.attr("id");
      var rxn_key = $target.data("rxn-key");
      var model_ob = TS.shared.getActiveModelOb();
      if (id === "edit_file_comment") {
        TS.ui.comments.startEdit($target.data("file-id"), $target.data("comment-id"), $menu_target);
      } else if (id === "delete_file_comment") {
        TS.ui.comments.startDelete($target.data("file-id"), $target.data("comment-id"));
      } else if (id === "rxn_file_comment") {
        TS.ui.react_emoji_menu.start({
          e: e,
          rxn_key: rxn_key
        });
      } else if (id === "pin_comment" && model_ob) {
        TS.pins.startPinFileComment($target.data("comment-id"), $target.data("file-id"), model_ob);
      } else if (id === "unpin_comment" && model_ob) {
        TS.pins.unPinFileComment($target.data("comment-id"), $target.data("file-id"), model_ob);
      } else {
        TS.warn("not sure what to do with clicked element id:" + id);
        return;
      }
      TS.menu.end();
    },
    startWithSpaceWeb: function(e, file_id, user_id) {
      var SPACING_BETWEEN_TARGET_AND_MENU = 5;
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var file = TS.files.getFileById(file_id);
      if (!file) return;
      var actions = TS.files.getFileActions(file);
      var shared_in = file.channels.concat(file.groups).concat(file.ims);
      var can_enable_collab_editing = file.user == user_id && shared_in.length && file.state !== "uneditable";
      var template_args = {
        file: file,
        actions: actions,
        can_write_to_clipboard: TS.clipboard.canWriteText(),
        can_enable_collab_editing: can_enable_collab_editing,
        collab_enabled: file.state !== "locked" && file.state !== "uneditable"
      };
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(TS.templates.menu_space_action_items(template_args));
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.onSpaceClickWeb);
      TS.kb_nav.setSubmitItemHandler(TS.menu.onSpaceClickWeb);
      TS.menu.start(e);
      var $menu_target = $(".space_btn_more");
      $("#toggle_input").bind("change", function() {
        e.preventDefault();
        var $menu_item = $("#toggle_collab_editing");
        var $checkbox = $(this);
        $menu_item.addClass("disabled");
        $checkbox.prop("disabled", true);
        TS.web.space.lockEditingPrivilegesWithCallback($checkbox.prop("checked"), function(response) {
          var file = response && response.data;
          var check = file ? file.state !== "locked" : !$checkbox.prop("checked");
          $menu_item.removeClass("disabled");
          $checkbox.prop("disabled", false);
          $checkbox.prop("checked", check);
        });
      });
      var x_offset = -TS.menu.$menu.outerWidth() + $menu_target.outerWidth();
      var y_offset = $menu_target.outerHeight() + SPACING_BETWEEN_TARGET_AND_MENU;
      TS.menu.positionAt($menu_target, x_offset, y_offset);
    },
    onSpaceClickWeb: function(e) {
      var id = $(this).attr("id");
      var file = TS.files.getFileById($(this).data("file-id"));
      if (!file) return;
      if (id === "keyboard_shortcuts") {
        e.preventDefault();
        TS.ui.shortcuts_dialog.start(true);
      } else if (id === "learn_more") {} else if (id === "feedback") {
        e.preventDefault();
        TS.web.space.provideFeedback();
      } else if (id === "delete_space") {
        e.preventDefault();
        TS.web.file.deleteFile(file.id);
      } else if (id === "copy_space_link") {
        e.preventDefault();
        if (TS.clipboard.canWriteText()) {
          TS.clipboard.writeText(file.permalink);
        } else {
          TS.warn("User clicked copy link, but we can't write to the clipboard right now");
        }
      } else if (id === "create_public_space_link") {
        e.preventDefault();
        TS.files.createPublicURL(file);
      } else if (id === "view_public_space_link") {
        e.preventDefault();
        TS.web.space.showPublicUrlDialog();
      } else if (id === "print_space") {
        window.print();
        e.preventDefault();
      } else if (id === "toggle_collab_editing") {
        return;
      } else {
        e.preventDefault();
        TS.warn("not sure what to do with clicked element id:" + id);
        return;
      }
      TS.menu.end();
    },
    startWithTeamAndUser: function(e) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.startWithTeamAndUserRebuild(e);
      if (TS.boot_data.page_needs_enterprise) TS.menu.listenForRebuildWorthiness();
    },
    did_start_slack_menu_signal_listeners: false,
    listenForRebuildWorthiness: function() {
      TS.menu.did_start_slack_menu_signal_listeners = true;
      TS.client.user_added_to_team_sig.add(TS.menu.startWithTeamAndUserRebuild);
      TS.client.user_removed_from_team_sig.add(TS.menu.startWithTeamAndUserRebuild);
    },
    stopListeningForRebuildWorthiness: function() {
      TS.menu.did_start_slack_menu_signal_listeners = false;
      TS.client.user_added_to_team_sig.remove(TS.menu.startWithTeamAndUserRebuild);
      TS.client.user_removed_from_team_sig.remove(TS.menu.startWithTeamAndUserRebuild);
    },
    startWithTeamAndUserRebuild: function(e) {
      TS.menu.clean();
      TS.menu.submenu_template_args = {};
      var is_tinyspeck = TS.model && TS.model.team && TS.boot_data.feature_tinyspeck;
      var is_dev = TS.environment.is_dev;
      var show_version_info = is_tinyspeck || is_dev;
      var template_args = {
        user: TS.model.user,
        team: TS.model.team,
        team_name: TS.model.team.name,
        logout_url: TS.boot_data.logout_url,
        signin_url: TS.boot_data.signin_url,
        help_url: TS.boot_data.help_url,
        show_version_info: show_version_info,
        current_team_is_in_enterprise: false,
        current_team_gets_logout_url: true,
        show_customize_link: TS.model.user.is_admin || !TS.model.team.prefs.emoji_only_admins || !TS.model.team.prefs.slackbot_responses_only_admins || !TS.model.team.prefs.loading_only_admins,
        show_statistics_link: TS.model.user.is_admin || !TS.model.team.prefs.stats_only_admins,
        is_our_app: TS.model.is_our_app,
        show_team_subdivider: TS.model.user.is_admin,
        can_invite: TS.ui.admin_invites.canInvite(),
        can_view_shared_invites: TS.ui.shared_invites_modal.userCanViewSharedInvitesModal()
      };
      var other_accounts_length = Object.keys(TS.boot_data.other_accounts).length;
      if (other_accounts_length) template_args.other_accounts = TS.boot_data.other_accounts;
      if (TS.model.team.enterprise_id) template_args.current_team_is_in_enterprise = true;
      var signed_into_enterprise = false;
      var other_accounts_obj = _.merge({}, TS.boot_data.other_accounts);
      var other_accounts_without_enterprise_teams = {};
      for (var team in other_accounts_obj) {
        if (other_accounts_obj[team].enterprise_id) {
          if (!template_args.other_enterprise_accounts) {
            signed_into_enterprise = true;
            template_args.other_enterprise_accounts = _(other_accounts_obj).filter(function(item) {
              return item.enterprise_id;
            }).groupBy("enterprise_id").map(function(item) {
              var ob = {};
              ob.enterprise_id = item[0].enterprise_id;
              ob.enterprise_name = item[0].enterprise_name;
              if (TS.model.user.enterprise_user && ob.enterprise_id === TS.model.user.enterprise_user.enterprise_id) {
                var all_teams_in_enterprise = TS.model.enterprise_teams;
                var user_teams = [];
                TS.model.user.enterprise_user.teams.forEach(function(team_id) {
                  if (team_id === TS.model.team.id) return;
                  var team = all_teams_in_enterprise.filter(function(t) {
                    return t.id === team_id;
                  })[0];
                  if (!team) return;
                  user_teams.push({
                    team_id: team_id,
                    team_url: item[0].team_url.replace(/\/[a-z0-9]+\./i, "/" + team.domain + "."),
                    team_name: team.name
                  });
                });
                user_teams = user_teams.sort(function(a, b) {
                  if (a.team_name < b.team_name) return -1;
                  if (a.team_name > b.team_name) return 1;
                  return 0;
                });
                ob.enterprise_teams = user_teams;
              } else {
                ob.enterprise_teams = item;
              }
              ob.is_currently_logged_into = false;
              if (ob.enterprise_id === TS.model.team.enterprise_id) {
                ob.is_enterprise_currently_logged_into = true;
                if (template_args.current_team_is_in_enterprise) {
                  template_args.current_team_gets_logout_url = false;
                }
                template_args.enterprise_logout_url = TS.boot_data.enterprise_logout_url;
                template_args.enterprise_domain = TS.boot_data.enterprise_url + "/manage";
              } else {
                ob.needs_other_enterprise_logout = true;
                ob.logout_url = TS.enterprise.workspaces.createLogoutURL(ob.enterprise_id, TS.boot_data.logout_url);
              }
              return ob;
            }).value();
            if (TS.model.user.enterprise_user) {
              template_args.other_enterprise_accounts = template_args.other_enterprise_accounts.sort(function(a, b) {
                if (a.enterprise_id === TS.model.user.enterprise_user.enterprise_id) return -1;
                if (b.enterprise_id === TS.model.user.enterprise_user.enterprise_id) return 1;
                return 0;
              });
            }
          }
        } else {
          other_accounts_obj[team].logout_url = TS.enterprise.workspaces.createLogoutURL(other_accounts_obj[team].team_id, TS.boot_data.logout_url);
          other_accounts_without_enterprise_teams[other_accounts_obj[team].team_id] = other_accounts_obj[team];
        }
      }
      if (signed_into_enterprise) {
        if (Object.keys(other_accounts_without_enterprise_teams).length) {
          template_args.other_accounts = other_accounts_without_enterprise_teams;
        } else if (Object.keys(template_args.other_enterprise_accounts).length) {
          delete template_args.other_accounts;
        }
      }
      if (template_args.current_team_is_in_enterprise) {
        template_args.current_team_gets_logout_url = false;
        template_args.enterprise_logout_url = TS.boot_data.enterprise_logout_url;
        template_args.enterprise_domain = TS.boot_data.enterprise_url + "/manage";
      }
      if (TS.boot_data.page_needs_enterprise) {
        if ((signed_into_enterprise || template_args.current_team_is_in_enterprise) && (template_args.other_enterprise_accounts && Object.keys(template_args.other_enterprise_accounts).length || template_args.other_accounts && Object.keys(template_args.other_accounts).length)) template_args.show_switch_teams_submenu = true;
        template_args.can_show_leave_workspace = TS.permissions.enterprise.canUserLeaveTeam(TS.model.user, TS.model.team);
      }
      template_args.show_shared_channels = TS.boot_data.page_needs_enterprise && !TS.model.user.is_restricted;
      TS.menu.$menu.addClass("team_menu slack_menu");
      TS.menu.$menu.attr("data-qa", "team_menu");
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_body.html(TS.templates.menu_slack_menu(template_args));
      TS.menu.$menu_items.addClass("hidden");
      var $menu_content = TS.menu.$menu_body;
      $menu_content.on("click.menu", "li", TS.menu.onTeamAndUserItemClick);
      $menu_content.on("click.menu", ".member_preview_link", function(e) {
        e.preventDefault();
        TS.client.ui.previewMember(TS.model.user.id);
      });
      $menu_content.on("mouseenter.section_header", "> div.section_header", TS.kb_nav.clearHighlightedItem);
      TS.kb_nav.setSubmitItemHandler(TS.menu.onTeamAndUserItemClick);
      if (TS.boot_data.page_needs_enterprise) {
        TS.menu.has_submenu = true;
        $menu_content.on("mouseenter", "li:not(.divider)", TS.menu.onTeamAndUserItemMouseenter);
        TS.menu.submenu_template_args.administration = {};
        TS.menu.submenu_template_args.switch_teams = template_args;
      }
      var menu_offset_y = 55;
      if (TS.model.is_electron && TS.model.is_mac && TSSSB.call("isMainWindowFrameless")) {
        menu_offset_y += 7;
      }
      if (TS.boot_data.page_needs_enterprise && typeof e === "string") _no_reposition = true;
      TS.menu.start(e, undefined, {
        needs_to_remain_open: function() {
          return TS.ui.react_emoji_menu.is_showing;
        }
      });
      TS.menu.positionAt($("#team_menu"), 10, menu_offset_y);
      TS.view.members.updateUserDisplayName();
      TS.view.members.updateUserCurrentStatus();
      TS.menu.has_submenu = true;
      TS.menu.submenu_template_args.member_current_status_item = {
        member: TS.model.user
      };
      if (!TS.boot_data.page_needs_enterprise) {
        $menu_content.on("highlighted", "li:not(.divider)", TS.menu.onTeamAndUserItemMouseenter);
      }
      TS.view.setFlexMenuSize();
    },
    onTeamAndUserItemMouseenter: function(e) {
      if (!$(this).hasClass("has_submenu") || $(this).attr("id") === "member_current_status_item") {
        if (TS.menu._current_status_input && TS.menu._current_status_input.isEdited()) return;
      }
      if (TS.menu.$submenu && TS.menu.$submenu_parent) TS.menu.$submenu_parent.submenu("destroy");
      if ($(e.currentTarget).hasClass("has_submenu")) {
        var subroutine = $(this).attr("id") || $(this).data("action");
        var $menu_content = TS.menu.$menu_body;
        var template_args = {};
        if (TS.menu.submenu_template_args[subroutine]) template_args = TS.menu.submenu_template_args[subroutine];
        switch (subroutine) {
          case "administration":
            if (TS.model.user.enterprise_user && (TS.model.user.enterprise_user.is_admin || TS.model.user.enterprise_user.is_owner)) {
              template_args.show_org_settings = true;
              template_args.enterprise_domain = TS.boot_data.enterprise_url + "/manage";
            }
            TS.menu.$submenu_parent = $menu_content.find("#administration");
            TS.menu.$submenu_parent.submenu({
              items_html: TS.templates.administration_items(template_args),
              onclick: TS.menu.onTeamAndUserItemSubmenuClick
            });
            break;
          case "switch_teams":
            TS.menu.$submenu_parent = $menu_content.find("#switch_teams");
            TS.menu.$submenu_parent.submenu({
              items_html: TS.templates.switch_teams_items(template_args),
              onclick: TS.menu.onTeamAndUserItemSubmenuClick
            });
            break;
          case "member_current_status_item":
            TS.menu.$submenu_parent = $menu_content.find("#member_current_status_item");
            TS.menu.$submenu_parent.submenu({
              items_html: TS.templates.current_status_submenu(template_args),
              onclick: TS.menu.onTeamAndUserItemSubmenuClick,
              ondestroy: TS.menu._unregisterCurrentStatusInput
            });
            TS.menu._registerCurrentStatusInput();
            break;
          case "team_invitations":
            if (!TS.ui.shared_invites_modal.userCanViewSharedInvitesModal()) break;
            TS.menu.$submenu_parent = $menu_content.find("#team_invitations");
            TS.menu.$submenu_parent.submenu({
              items_html: TS.templates.shared_invites_modal()
            });
            TS.clog.track("INAPP_INVITES", {
              contexts: {
                ui_context: {
                  step: "share_link",
                  action: "impression",
                  ui_element: "share_invite_link_modal"
                },
                referring_ui_context: {
                  step: "invite_people",
                  ui_element: "invite_people_menu"
                }
              },
              referring_event_id: "INAPP_INVITES"
            });
            TS.ui.shared_invites_modal.start();
            break;
          default:
        }
      }
    },
    onTeamAndUserItemSubmenuClick: function(e) {
      var $closest_li = $(e.target).closest("li");
      var subroutine = $closest_li.attr("id") || $closest_li.data("action");
      switch (subroutine) {
        case "team_settings":
        case "manage_team":
        case "switch_team":
        case "logout":
        case "enterprise_logout":
        case "org_settings":
          break;
        default:
          e.preventDefault();
          return;
      }
      if (TS.menu.$submenu && TS.menu.$submenu_parent) TS.menu.$submenu_parent.submenu("destroy");
      TS.menu.end();
    },
    onTeamAndUserItemClick: function(e) {
      clearTimeout(TS.menu.end_time);
      var $this = $(this);
      if ($this.is("[disabled]") || $this.hasClass("disabled")) {
        e.preventDefault();
        return;
      }
      var subroutine = $this.attr("id");
      if (!subroutine && $this.hasClass("switch_team")) subroutine = "switch_team";
      switch (subroutine) {
        case "leave_workspace":
          e.preventDefault();
          TS.ui.leave_team_dialog.start(TS.model.team.id);
          break;
        case "workspaces":
          e.preventDefault();
          TS.ui.workspaces.start();
          break;
        case "shared_channels":
          e.preventDefault();
          TS.ui.shared_channels_invites.start();
          break;
        case "version_info":
          e.preventDefault();
          TS.ui.showVersionInfo();
          break;
        case "member_account_item":
          e.preventDefault();
          TS.client.ui.previewMember(TS.model.user.id);
          break;
        case "team_settings":
        case "manage_team":
        case "team_billing":
        case "team_services":
        case "team_customize":
        case "team_statistics":
          break;
        case "team_apps":
          TS.metrics.count("team_menu_download_apps");
          e.preventDefault();
          TS.magic_login.execute({
            fallback_to_browser: true,
            browser_uri: "/downloads",
            app_uri: "/ssb/open"
          });
          break;
        case "team_invitations":
          if (TS.ui.shared_invites_modal.userCanViewSharedInvitesModal()) return;
          e.preventDefault();
          TS.ui.admin_invites.start();
          var params = TS.clog.parseParams(this.getAttribute("data-clog-params"));
          TS.clog.track(this.getAttribute("data-clog-event"), params);
          break;
        case "member_prefs_item":
          e.preventDefault();
          TS.ui.prefs_dialog.start();
          break;
        case "team_help":
          e.preventDefault();
          _openHelp("team_menu");
          break;
        case "add_team":
          if (TSSSB.call("signInTeam")) e.preventDefault();
          break;
        case "member_presence":
          e.preventDefault();
          TS.members.toggleUserPresence();
          TS.menu.end_time = setTimeout(TS.menu.end, 1e3);
          return;
        case "logout":
          e.preventDefault();
          if (TS.client) TS.client.windows.closeAll();
          TS.utility.loadUrlInWindowIfOnline(TS.boot_data.logout_url);
          break;
        case "enterprise_login":
          if (TSSSB.call("signInTeam")) e.preventDefault();
          break;
        case "enterprise_logout":
          break;
        case "switch_team":
          var team_id = $(this).data("user-id");
          if (TSSSB.call("displayTeam", team_id)) {
            e.preventDefault();
          } else {
            var href = $(this).find("a").attr("href");
            if (href && href.indexOf("?") == -1) $(this).find("a").attr("href", [href, TS.getQsArgsForUrl()].join("?"));
          }
          break;
        default:
          e.preventDefault();
          return;
      }
      TS.menu.end();
    },
    startWithNotificationsMenu: function(e) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var status = TS.dnd.memberDndStatus();
      var model_ob = TS.shared.getActiveModelOb();
      var model_ob_name;
      if (model_ob.is_mpim) {
        model_ob_name = TS.mpims.getDisplayName(model_ob, false, false);
      } else if (model_ob.is_channel || model_ob.is_group) {
        model_ob_name = "#" + model_ob.name;
      } else {
        model_ob_name = model_ob.name;
      }
      var template_args = {
        user: TS.model.user,
        model_ob: model_ob,
        model_ob_name: model_ob_name,
        in_dnd: status.in_dnd,
        is_snoozing: status.snoozed,
        readable_end_time: status.readable_end_time,
        cmd_key: TS.model.is_mac ? "⌘" : "ctrl",
        meta_key: TS.model.is_mac ? "opt" : "alt"
      };
      TS.menu.has_submenu = true;
      TS.menu.$menu.addClass("notifications_menu");
      TS.menu.$menu_header.html(TS.templates.notifications_header(template_args));
      TS.menu.$menu_items.html(TS.templates.notifications_items(template_args));
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.onNotificationsMenuItemClick);
      var $adjust = TS.menu.$menu_items.find("#adjust_snooze_time");
      $adjust.on("highlighted", function() {
        $adjust.submenu({
          items_html: TS.templates.snooze_items(),
          onclick: TS.menu.onNotificationsMenuItemClick
        });
      }).on("unhighlighted", function() {
        if (TS.menu.$submenu && !TS.menu.$submenu.hasClass("kb_active")) $adjust.submenu("destroy");
      });
      TS.menu.start(e);
      TS.menu.positionAt($("#team_menu .notifications_menu_btn"), -10, 24);
    },
    onNotificationsMenuItemClick: function(e) {
      var $action = $(e.target).closest("[data-dnd-menu-action]");
      if (!$action.length) return;
      var action = $action.data("dnd-menu-action");
      var status = TS.dnd.memberDndStatus();
      if (action === "turn_off") {
        if (status.snoozed) {
          TS.dnd.endSnooze();
        } else if (status.in_dnd) {
          TS.dnd.endDnd();
        }
      } else if (action === "snooze") {
        var minutes = parseInt($action.data("snooze-length"), 10);
        if (minutes && !isNaN(minutes)) {
          TS.dnd.setSnooze(minutes);
        }
      } else if (action === "dnd_schedule") {
        TS.ui.prefs_dialog.start("notifications", null, "prefs_dnd");
      } else if (action === "enter_focus_mode") {
        if (!TS.boot_data.feature_focus_mode) return;
        TS.ui.focus_mode.start();
      } else if (action === "channel_settings") {
        var model_ob = TS.shared.getActiveModelOb();
        TS.ui.channel_prefs_dialog.start(model_ob.id);
      } else if (action === "notif_prefs") {
        TS.ui.prefs_dialog.start("notifications");
      }
      TS.menu.end();
    },
    startWithFlexMenu: function(e) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      TS.menu.$menu_header.addClass("hidden").empty();
      var directory_title;
      if (TS.boot_data.page_needs_enterprise) {
        directory_title = TS.i18n.t("Organization Directory", "menu")();
      } else {
        directory_title = TS.i18n.t("Team Directory", "menu")();
      }
      TS.menu.$menu_items.html(TS.templates.menu_flexpane_items({
        special_flex_panes: TS.boot_data.special_flex_panes,
        show_downloads: TS.model.supports_downloads,
        is_enterprise: TS.boot_data.page_needs_enterprise,
        show_user_groups: TS.lazyLoadMembersAndBots() && TS.model.team.plan !== "" && !TS.model.user.is_restricted,
        directory_title: directory_title
      }));
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.onFlexMenuItemClick);
      TS.menu.start(e);
      TS.menu.$menu.addClass("flex_menu");
      TS.menu.$menu.attr("data-qa", "flex_menu");
      TS.utility.queueRAF(function flexToggleRAF() {
        var $button = $("#flex_menu_toggle");
        var x = -(TS.menu.$menu.width() - $button.width());
        var y = 6 + $button.height();
        TS.menu.positionAt($button, x, y);
      });
      TS.help.updateIcon();
      TS.client.whats_new.updateIcon();
      $("#flex_menu_toggle").addClass("menu_open");
      $("#flex_menu_callout").bind("click", function() {
        TS.menu.end();
      });
      TS.view.setFlexMenuSize();
    },
    onFlexMenuItemClick: function(e) {
      var delay_ms = 200;
      var $tab = $(this);
      var tab_id = $(this).data("tab-id");
      if (tab_id) {
        var flex_name = tab_id;
        setTimeout(function() {
          if (flex_name === "files") {
            TS.client.ui.files.toggleFileList("all");
            TS.client.ui.files.filterFileList("all");
          } else if (flex_name === "team") {
            TS.client.ui.showTeamList();
          } else if (flex_name === "groups" && TS.lazyLoadMembersAndBots()) {
            TS.client.ui.showGroupsList();
          } else {
            if (flex_name === "whats_new") {
              var badged = !$tab.find("#whats_new_count").hasClass("hidden");
              if (badged) {
                TS.clog.track("WHATSNEW_ACTION", {
                  action: "open_pane_badged",
                  trigger: "flex_menu",
                  step: TS.client.whats_new.getNewestID()
                });
              } else {
                TS.clog.track("WHATSNEW_ACTION", {
                  action: "open_pane",
                  trigger: "flex_menu",
                  step: TS.client.whats_new.getNewestID()
                });
              }
            }
            TS.client.ui.flex.openFlexTab(flex_name);
          }
        }, delay_ms);
      } else if ($(this).data("filetype")) {
        var filetype = $(this).data("filetype");
        var $file_list = $("#file_list");
        if (!$file_list.length || !$file_list.children().length) {
          if (TS.view.files.last_files_html) {
            TS.view.files.last_files_html = "";
          }
        }
        setTimeout(function() {
          TS.client.ui.files.toggleFileList("all");
          TS.client.ui.files.filterFileList(filetype);
          TS.view.files.setButtonState(filetype);
        }, delay_ms);
      } else {
        var id = $(this).attr("id");
        if (id === "help") {
          e.preventDefault();
          setTimeout(function() {
            _openHelp("flex_menu");
          }, delay_ms);
        }
      }
      TS.menu.end();
    },
    startWithUserGroupMenu: function(e, user_group_id) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      TS.menu.user_group = TS.user_groups.getUserGroupsById(user_group_id);
      TS.menu.$menu.addClass("no_min_width");
      var show_user_groups_disable = TS.permissions.members.canCreateAndDeleteUserGroups() && !TS.menu.user_group.date_delete;
      var show_user_groups_enable = TS.permissions.members.canCreateAndDeleteUserGroups() && TS.menu.user_group.date_delete;
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(TS.templates.user_group_items({
        show_user_groups_edit: TS.permissions.members.canEditUserGroups(),
        show_user_groups_disable: show_user_groups_disable,
        show_user_groups_enable: show_user_groups_enable
      }));
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.onUserGroupMenuItemClick);
      TS.menu.start(e);
      TS.utility.queueRAF(function flexToggleRAF() {
        TS.menu.positionAt($("#user_group_menu_toggle"), -(TS.menu.$menu.width() - $("#user_group_menu_toggle").width()), 37);
      });
    },
    onUserGroupMenuItemClick: function() {
      var action = $(this).data("action");
      if (action === "edit_info") {
        TS.ui.admin_user_groups.editInfo(TS.menu.user_group);
      } else if (action === "edit_members") {
        TS.ui.admin_user_groups.editMembers(TS.menu.user_group);
      } else if (action === "disable") {
        TS.ui.admin_user_groups.disable(TS.menu.user_group);
      } else if (action === "enable") {
        TS.ui.admin_user_groups.enable(TS.menu.user_group);
      } else if (action === "delete") {
        TS.ui.admin_user_groups.remove(TS.menu.user_group);
      }
      TS.menu.end();
    },
    startWithSearchFilter: function(e) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      var template_args = {
        search_exclude_bots: TS.model.prefs.search_exclude_bots,
        search_only_my_channels: TS.model.prefs.search_only_my_channels,
        search_only_current_team: TS.model.prefs.search_only_current_team,
        result_type: TS.search.filter === "messages" ? "messages" : "files",
        is_enterprise: TS.boot_data.page_needs_enterprise
      };
      TS.menu.clean();
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu.addClass("search_filter_menu");
      TS.menu.$menu_items.html(TS.templates.menu_search_filter_items(template_args));
      TS.menu.start(e);
      _convertToPopoverMenu();
      var $menu_anchor = $("#search_filter_menu_label");
      TS.menu.positionAt($menu_anchor, -8, $menu_anchor.height() + 10);
      $("#search_only_my_channels_cb").bind("change", function() {
        TS.prefs.setPrefByAPI({
          name: "search_only_my_channels",
          value: !$(this).prop("checked")
        });
      });
      $("#search_exclude_bots_cb").bind("change", function() {
        TS.prefs.setPrefByAPI({
          name: "search_exclude_bots",
          value: !$(this).prop("checked")
        });
      });
      $("#search_only_current_team_cb").bind("change", function() {
        TS.prefs.setPrefByAPI({
          name: "search_only_current_team",
          value: !$(this).prop("checked")
        });
      });
      TS.menu.search_filter_is_showing = true;
      $("#search_filter_menu_label").addClass("active");
    },
    startWithMentionsFilter: function(e) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      var template_args = {
        exclude_at_channels: TS.model.prefs.mentions_exclude_at_channels,
        exclude_at_user_groups: TS.model.prefs.mentions_exclude_at_user_groups,
        show_user_group_filter: true
      };
      TS.menu.clean();
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu.addClass("search_filter_menu");
      TS.menu.$menu_items.html(TS.templates.menu_mentions_filter_items(template_args));
      TS.menu.start(e);
      _convertToPopoverMenu();
      var $menu_anchor = $("#mentions_filter_menu_label");
      TS.menu.positionAt($menu_anchor, -8, $menu_anchor.height() + 10);
      $("#exclude_at_channels_cb").bind("change", function() {
        TS.prefs.setPrefByAPI({
          name: "mentions_exclude_at_channels",
          value: !$(this).prop("checked")
        });
      });
      $("#exclude_at_user_groups_cb").bind("change", function() {
        TS.prefs.setPrefByAPI({
          name: "mentions_exclude_at_user_groups",
          value: !$(this).prop("checked")
        });
      });
      $("#mentions_filter_menu_label").addClass("active");
    },
    startWithEditTeamProfileListActions: function(e, onclick) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      var $el = $(e.target);
      var field = TS.team.getTeamProfileFieldById($el.data("id"));
      var template_args = {
        id: field.id,
        hidden: !!(field && field.is_hidden)
      };
      TS.menu.clean();
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(TS.templates.admin_menu_edit_team_profile_list_action_items(template_args));
      TS.menu.$menu_items.on("click.menu", "li", onclick);
      TS.menu.start(e);
      TS.menu.positionAt($el.find('[data-action="edit_team_profile_list_menu"]'), -(TS.menu.$menu.width() + 6), 0);
      TS.menu.keepInBounds();
    },
    startWithAllUnreadsSortOrderMenu: function(e) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var template_args = {
        sort_order: TS.client.unread.getSortOrder(),
        is_paid_team: TS.model.team.plan !== ""
      };
      TS.menu.has_submenu = true;
      TS.menu.$menu.addClass("all_unreads_sort_order_menu selectable");
      TS.menu.$menu_items.html(TS.templates.unread_sort_order_menu(template_args));
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.onAllUnreadsSortOrderMenuItemClick);
      TS.menu.addSubmenu(".priority", TS.templates.menu_help_submenu({
        icon: "ts_icon_emoji_objects",
        title: TS.i18n.t("Sorted by science", "all_unreads")(),
        message: TS.i18n.t("This sorts your unreads based on how you use Slack.", "all_unreads")()
      }), _.noop, true);
      TS.menu.start(e);
      TS.menu.positionAt($(".channel_header_info_count"), 105, 20);
    },
    onAllUnreadsSortOrderMenuItemClick: function(e) {
      var $action = $(e.target).closest("[data-sort-order]");
      if (!$action.length) return;
      var sort_order = $action.data("sortOrder");
      if (sort_order === TS.client.unread.getSortOrder()) {
        TS.menu.end();
        return;
      }
      TS.model.prefs.all_unreads_sort_order = sort_order;
      TS.prefs.setPrefByAPI({
        name: "all_unreads_sort_order",
        value: sort_order
      });
      TS.prefs.all_unreads_sort_order_changed_sig.dispatch(sort_order);
      TS.client.ui.unread.updateChannelHeader();
      TS.client.unread.reload();
      TS.menu.end();
    },
    startWithSearchableMemberListFilter: function(e, counts, selectCallback) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var template_args = {
        everyone_count: 0,
        admins_count: 0,
        guests_count: 0,
        extra_filter_options: TS.boot_data.page_needs_enterprise,
        is_flannel: TS.lazyLoadMembersAndBots()
      };
      if (TS.boot_data.page_needs_enterprise) {
        _.merge(template_args, {
          is_enterprise: true,
          org_name: TS.model.team.enterprise_name,
          team_name: TS.model.team.name,
          everyone_count: 0,
          org_members_count: 0,
          org_admins_count: 0,
          org_guests_count: 0
        });
      }
      _.each(counts, function(count, key) {
        template_args[key + "_count"] = count;
      });
      TS.menu.$menu.width($(e.target).outerWidth());
      TS.menu.$menu.addClass("searchable_member_list_filter_menu");
      TS.menu.$menu_items.html(TS.templates.searchable_member_list_filter_items(template_args));
      TS.menu.$menu_items.on("click.menu", "li", function(e) {
        TS.menu.end();
        selectCallback(e);
      });
      TS.menu.start(e);
      TS.menu.positionAt($(".searchable_member_list_filter"), 16, 56);
    },
    startWithSharedInvitesMenu: function(e) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.menu.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      var $el = $(e.target);
      TS.menu.clean();
      TS.menu.$menu_items.html(TS.templates.shared_invites_modal());
      TS.menu.start(e);
      if ($el.hasClass("channel_list_add_link_feat_link_in_sidebar")) {
        TS.menu.positionAt($el, 0, -TS.menu.$menu.height() - 16);
      }
      TS.menu.$menu_items.on("click", '[data-action="admin_invites_modal"]', function() {
        TS.menu.end();
      });
      TS.menu.keepInBounds();
    },
    startWithSoundsMenu: function(e, callback) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.menu.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      var sounds = TS.boot_data.notification_sounds;
      sounds = _.reject(sounds, {
        value: "none"
      });
      var template_args = {
        notification_sounds: sounds
      };
      TS.menu.clean();
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(TS.templates.menu_sound_items(template_args));
      TS.menu.start(e);
      TS.menu.$menu_items.on("click.menu", '[data-action="set_sound"]', function(e) {
        var sound = $(this).data("sound");
        if (!sound) return;
        e.preventDefault();
        callback(sound);
        TS.menu.end();
      }).on("click.menu", '[data-action="play_sound"]', function(e) {
        var sound = $(this).data("sound");
        if (!sound) return;
        e.preventDefault();
        TS.sounds.play(sound, {
          ignore_mute: true
        });
      });
      TS.menu.keepInBounds();
    },
    startWithGeneric: function(e, options, callback) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.menu.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      var html = "";
      _.each(options, function(option) {
        html += TS.templates.menu_generic_item({
          label: option.label,
          value: option.value
        });
      });
      TS.menu.clean();
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(html);
      TS.menu.start(e);
      TS.menu.$menu_items.on("click.menu", "a[data-value]", function() {
        e.preventDefault();
        callback($(this).data("value"));
        TS.menu.end();
      });
      TS.menu.keepInBounds();
    },
    positionAt: function($el, x_plus, y_plus) {
      x_plus = x_plus || 0;
      y_plus = y_plus || 0;
      var offset = $el.offset();
      var x = offset.left + x_plus;
      var y = offset.top + y_plus;
      TS.menu.$menu.css({
        top: y,
        left: x
      });
    },
    isRedundantClick: function(e) {
      if (TS.isPartiallyBooted()) {
        e.preventDefault();
        TS.incremental_boot.userDidInteractWithUI();
        return true;
      }
      if (e && TS.menu.last_e && (e.target == TS.menu.last_e.target || e.currentTarget == TS.menu.last_e.currentTarget)) return true;
      return false;
    },
    isLarge: function() {
      return TS.menu && TS.menu.$menu && TS.menu.$menu.find("li").length > TS.menu.large_dom_trigger;
    },
    start: function(e, position_by_click, options) {
      options = options || {};
      TS.menu.last_e = e;
      if (!_no_reposition) {
        var offset = $(e.target).offset();
        var x = offset.left + $(e.target).width() + 10;
        var y = offset.top;
        if (position_by_click) {
          x = e.pageX + 10;
          y = e.pageY + 10;
        }
      }
      if (_.isFunction(options.needs_to_remain_open)) {
        TS.menu.needs_to_remain_open = options.needs_to_remain_open;
      }
      $(".tooltip").hide();
      TS.tips.hideAll();
      $(e.currentTarget).addClass("active");
      TS.menu.$target_element = $(e.currentTarget);
      TS.model.menu_is_showing = true;
      var $menu = TS.menu.$menu;
      if (options.onClose) {
        $menu.one("closed", options.onClose);
      }
      if (options.menu_class) {
        $menu.addClass(options.menu_class);
      }
      var is_large_list = TS.menu.isLarge();
      if (!_no_reposition) {
        $menu.css({
          top: y,
          left: x
        });
      }
      var $menu_items_scroller = $menu.find("#menu_items_scroller");
      $menu_items_scroller.scrollTop(0);
      if (options.attach_to_target_at_full_width) {
        TS.menu.$target_element.after($menu);
      } else if (TS.client) {
        $menu.appendTo($("#client-ui"));
      } else {
        $menu.appendTo($("body"));
      }
      if (options.keep_menu_open_if_target_clicked_again) {
        TS.menu.$menu.addClass("keep_menu_open_if_target_clicked_again");
      }
      if (!is_large_list && !_no_reposition) {
        $menu.css("opacity", 0);
        $menu.stop().transition({
          opacity: 1
        }, 200);
      } else {
        $menu.css("opacity", 1);
      }
      $menu.find(".menu_close").on("click", TS.menu.end);
      if (!options.ignore_bounds) TS.menu.keepInBounds();
      TS.ui.utility.updateClosestMonkeyScroller($menu_items_scroller, true);
      if (TS.menu.menu_lazy_load && TS.menu.menu_lazy_load.detachEvents) {
        TS.menu.menu_lazy_load.detachEvents();
      }
      TS.menu.menu_lazy_load = TS.menu.$menu_items.find(".lazy").lazyload({
        container: $("#menu_items_scroller"),
        all_images_same_size: true,
        throttle: 250
      });
      if (!options.ignore_bounds) $(window).bind("resize", TS.menu.keepInBounds);
      $(window.document).bind("keydown", TS.menu.onKeyDown);
      $("html").bind("mousedown touchstart", TS.menu.onMouseDown);
      var $menu_list = $menu.find(".menu_list");
      if (TS.menu.has_submenu) {
        TS.kb_nav.start($menu.find("#menu_items"), "li:not(.divider)", $menu, {
          onLeftKeyDownIfSubmenuExists: TS.menu.onLeftKeyDownIfSubmenuExists,
          onRightKeyDownIfSubmenuExists: TS.menu.onRightKeyDownIfSubmenuExists
        });
      } else if ($menu_list.length) {
        TS.kb_nav.start($menu_list, "li");
      } else {
        TS.kb_nav.start($menu.find("#menu_items"), "li:not(.divider)");
      }
      var $first_menu_list_link = $menu_list.length ? $menu_list.first().find("a, button").first() : null;
      if (TS.ui && TS.ui.a11y) TS.ui.a11y.focusAndAddTabindex($first_menu_list_link);
      _no_reposition = false;
      _on_esc = options.on_esc;
    },
    clean: function() {
      TS.menu.$menu_footer.empty();
      TS.menu.$menu_header.removeClass("hidden");
      TS.menu.$menu.removeClass("no_min_width no_max_width profile_preview flex_menu search_filter_menu popover_menu no_icons team_menu file_menu notifications_menu all_unreads_sort_order_menu searchable_member_list_filter_menu selectable member_file_filter_menu app_card keep_menu_open_if_target_clicked_again member_file_filter_menu").css("max-height", "");
      TS.menu.$menu.removeAttr("data-qa");
      TS.menu.$menu.find("#menu_items_scroller").css("max-height", "");
      TS.menu.$menu.find(".arrow, .arrow_shadow").remove();
      TS.menu.$menu_items.off("mouseenter.section_header");
      TS.menu.$menu.removeClass("narrow_menu");
      TS.menu.$menu_body.off("mouseenter.section_header");
      TS.menu.needs_to_remain_open = undefined;
      TS.menu.$menu.removeClass("date_picker");
      if (TS.boot_data.page_needs_enterprise) {
        TS.menu.$menu_list_container.html('<div id="menu_list" role="menu"></div>').removeClass("populated");
        TS.menu.$menu_list = TS.menu.$menu.find("#menu_list");
        TS.menu.$menu.off("keydown", "#file_member_filter .member_filter");
      }
      TS.menu.$menu.removeAttr("data-model-ob-id");
      TS.menu.$menu.removeAttr("data-thread-ts");
      if (TS.SearchableMemberList && TS.SearchableMemberList.get("member_file_filter_menu")) {
        TS.menu.$menu.find(".searchable_member_list").remove();
        TS.SearchableMemberList.get("member_file_filter_menu").destroy();
      }
      if (TS.menu.$menu.find(".member_item")) {
        TS.menu.$menu.find(".member_item").remove();
        TS.menu.$menu.find(".list_items").css("height", 0);
      }
      _on_esc = null;
    },
    end: function() {
      if (_.isFunction(TS.menu.needs_to_remain_open) && TS.menu.needs_to_remain_open()) return;
      if (TS.menu.$submenu && TS.menu.$submenu_parent) TS.menu.$submenu_parent.submenu("destroy");
      TS.menu.$menu.width("");
      TS.model.menu_is_showing = false;
      TS.menu.menu_items_hidden = true;
      TS.menu.has_submenu = false;
      TS.menu.$submenu_parent = null;
      TS.menu.submenu_template_args = {};
      if (TS.menu.did_start_slack_menu_signal_listeners) TS.menu.stopListeningForRebuildWorthiness();
      var $menu = TS.menu.$menu;
      var menu_end = function() {
        if (TS.model.menu_is_showing) return;
        setTimeout(function() {
          if (!TS.model.menu_is_showing) TS.menu.last_e = null;
        }, 50);
        $menu.detach();
        TS.menu.$menu_header.empty();
        TS.menu.$menu_footer.empty();
        TS.menu.$menu_items.empty();
        TS.menu.$menu_items.removeClass("hidden");
        TS.menu.$menu_body.empty();
        TS.menu.clean();
      };
      if (!TS.menu.isLarge() && !_no_reposition) {
        $menu.stop().transition({
          opacity: 0
        }, 200, menu_end);
      } else {
        menu_end();
      }
      $menu.trigger("closed");
      if (TS.menu.$target_element) {
        TS.menu.$target_element.removeClass("active");
        TS.menu.$target_element = null;
      }
      if (TS.menu.$secondary_target_element) {
        TS.menu.$secondary_target_element.removeClass("active");
        TS.menu.$secondary_target_element = null;
      }
      TS.menu.user_group = null;
      TS.menu.$menu_header.unbind("click.menu");
      TS.menu.$menu_items.off("click.menu");
      TS.menu.$menu_body.off("click.menu");
      $(window).unbind("resize", TS.menu.keepInBounds);
      $(window.document).unbind("keydown", TS.menu.onKeyDown);
      $("html").unbind("mousedown touchstart", TS.menu.onMouseDown);
      TS.members.view.team_filter_changed_sig.remove(TS.kb_nav.clearHighlightedItem);
      $(".file_list_item.active").removeClass("active");
      TS.tips.unhideAll();
      TS.menu.search_filter_is_showing = false;
      $("#search_filter_menu_label").removeClass("active");
      $("#mentions_filter_menu_label").removeClass("active");
      $("#flex_menu_toggle").removeClass("menu_open");
      $("#channel_actions_toggle").removeClass("active");
      if (TS.boot_data.feature_texty_takes_over && $("#menu_member_dm_input").length) {
        TS.utility.contenteditable.unload($("#menu_member_dm_input"));
      }
      $menu.removeClass("narrow_menu");
      setTimeout(function() {
        TS.menu.file.file_list_menu_up = false;
        $(".inline_file_preview_container.file_menu_open, .file_container.file_menu_open").removeClass("file_menu_open");
      }, 100);
      if (TS.menu.menu_lazy_load && TS.menu.menu_lazy_load.detachEvents) {
        TS.menu.menu_lazy_load.detachEvents();
        TS.menu.menu_lazy_load = null;
      }
      TS.kb_nav.end();
      if (TS.client && TS.model.ui.active_tab_id !== "team" && TS.model.ui.active_tab_id !== "details") TS.client.flex_pane.stopLocalTimeInterval();
      TS.menu.menu_closed_sig.dispatch();
    },
    onKeyDown: function(e) {
      var keymap = TS.utility.keymap;
      var key = e.which;
      var modifier_pressed = e.metaKey || e.ctrlKey || e.altKey;
      if (key == keymap.esc) {
        if (TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.hasFocus($("#menu_member_dm_input"))) return;
        e.stopPropagation();
        e.preventDefault();
        TS.menu.end();
        if (_on_esc) _on_esc();
      } else if (!modifier_pressed && !TS.utility.isArrowKey(key) && key != keymap.tab && key != keymap.enter) {
        TS.kb_nav.clearHighlightedItem();
        TS.utility.contenteditable.focus($("#menu_member_dm_input"));
      }
    },
    onLeftKeyDownIfSubmenuExists: function() {
      var prevent_kb_default = false;
      if (TS.menu.$submenu && TS.menu.$submenu.hasClass("kb_active")) {
        TS.menu.$submenu.removeClass("kb_active");
        TS.kb_nav.end();
        TS.kb_nav.highlightItemWithKey(TS.menu.$submenu_origin);
        TS.kb_nav.start(TS.menu.$menu.find("#menu_items"), "li:not(.divider)", TS.menu.$menu, {
          onLeftKeyDownIfSubmenuExists: TS.menu.onLeftKeyDownIfSubmenuExists,
          onRightKeyDownIfSubmenuExists: TS.menu.onRightKeyDownIfSubmenuExists
        });
        TS.menu.$submenu_origin.submenu("destroy");
        prevent_kb_default = true;
      }
      return prevent_kb_default;
    },
    onRightKeyDownIfSubmenuExists: function() {
      var prevent_kb_default = false;
      if (TS.kb_nav.getHighlightedItem() && TS.kb_nav.getHighlightedItem().data("has-submenu")) {
        if (!TS.menu.$submenu) {
          TS.kb_nav.getHighlightedItem().submenu({
            items_html: TS.templates.snooze_items(),
            onclick: TS.menu.onNotificationsMenuItemClick
          });
        }
      }
      if (TS.menu.$submenu) {
        if (TS.menu.$submenu.hasClass("kb_active")) {
          TS.menu.$submenu.removeClass("kb_active");
          TS.menu.end();
        } else {
          TS.menu.$submenu.addClass("kb_active");
          TS.kb_nav.end();
          TS.kb_nav.highlightItemWithKey(TS.menu.$submenu.find("li").first());
          TS.kb_nav.start(TS.menu.$submenu.find("ul"), "li:not(.divider)", TS.menu.$submenu, {
            onLeftKeyDownIfSubmenuExists: TS.menu.onLeftKeyDownIfSubmenuExists,
            onRightKeyDownIfSubmenuExists: TS.menu.onRightKeyDownIfSubmenuExists
          });
        }
        prevent_kb_default = true;
      }
      return prevent_kb_default;
    },
    onMouseDown: function(e) {
      var $target = $(e.target);
      if (TS.menu.$menu && TS.menu.$menu.hasClass("keep_menu_open_if_target_clicked_again") && $target.is(TS.menu.$target_element)) return;
      if ($target.closest("#menu, .submenu, .trap_menu_clicks").length === 0 || $target.hasClass("popover_mask")) {
        TS.menu.end();
      }
    },
    keepInBounds: function() {
      if (window.requestAnimationFrame) {
        TS.utility.rAF(TS.menu.keepInBoundsThrottled);
      } else {
        TS.menu.keepInBoundsThrottled();
      }
    },
    keepInBoundsThrottled: function() {
      var $menu = TS.menu.$menu;
      var allowance = 10;
      var rect = $menu.dimensions_rect();
      var allow_rect = {
        top: 0 + allowance,
        right: $(window).width() - allowance,
        bottom: $(window).height() - (allowance + 14),
        left: 0 + allowance
      };
      if (TS.utility.doesRectContainRect(allow_rect, rect)) return;
      if (rect.left < allow_rect.left) {
        $menu.css("left", allow_rect.left);
      } else if (rect.right > allow_rect.right) {
        $menu.css("left", Math.max(allow_rect.left, allow_rect.right - rect.width));
      }
      if (rect.top < allow_rect.top) {
        $menu.css("top", allow_rect.top);
      } else if (rect.bottom > allow_rect.bottom) {
        $menu.css("top", Math.max(allow_rect.top, allow_rect.bottom - rect.height + $(window).scrollTop()));
      }
    },
    addSubmenu: function(submenu_selector, items_html, onclick, help) {
      var $submenu_element = TS.menu.$menu_items.find(submenu_selector);
      $submenu_element.on("highlighted", function() {
        $submenu_element.submenu({
          items_html: items_html,
          onclick: onclick,
          help: help
        });
      }).on("unhighlighted", function() {
        if (TS.menu.$submenu && !TS.menu.$submenu.hasClass("kb_active")) {
          $submenu_element.submenu("destroy");
        }
      });
    },
    _registerCurrentStatusInput: function() {
      TS.menu._unregisterCurrentStatusInput();
      TS.menu._current_status_input = new TS.client.ui.CurrentStatusInput({
        $parent: $("#slack_menu_current_status_submenu"),
        onEscape: TS.menu.end,
        onSave: TS.menu.end
      });
      TS.menu.$menu_body.find("#member_current_status_item").on("click.current_status_item", function() {
        if (TS.menu._current_status_input) TS.menu._current_status_input.focus();
      });
    },
    _unregisterCurrentStatusInput: function() {
      if (TS.menu._current_status_input) {
        TS.menu._current_status_input.destroy();
        TS.menu._current_status_input = null;
      }
      TS.menu.$menu_body.find("#member_current_status_item").off(".current_status_item");
    }
  });
  var _no_reposition = false;
  var _openHelp = function(trigger) {
    TS.help_modal.start();
    TS.clog.track("HELP_MODAL_ACTION", {
      action: "open_modal",
      trigger: trigger
    });
  };
  var _convertToPopoverMenu = function() {
    var $menu = TS.menu.$menu;
    $menu.addClass("popover_menu");
    $menu.prepend('<span class="arrow"></span><span class="arrow_shadow"></span>');
  };
  var _getOffsets = function(align_right) {
    var menu_gap = 3;
    var top_offset = TS.menu.$target_element.outerHeight() + menu_gap;
    var left_offset = 0;
    if (align_right) {
      left_offset = TS.menu.$target_element.outerWidth() - TS.menu.$menu.outerWidth();
    }
    return {
      left: left_offset,
      top: top_offset
    };
  };
  var _maybeUpdateSubscriptionMenuItem = function(model_ob_id, msg_ts, subscription) {
    if (!TS.model.menu_is_showing) return;
    var $subscription_menu_item = $("#toggle-subscription-status");
    if ($subscription_menu_item.attr("data-model-ob-id") !== model_ob_id || $subscription_menu_item.attr("data-msg-ts") !== msg_ts) return;
    $subscription_menu_item.attr("data-subscribed", subscription.subscribed);
    $subscription_menu_item.removeClass("disabled");
    TS.menu.keepInBounds();
  };
  $.widget("TS.submenu", {
    _create: function() {
      this.element.data("has-submenu", true);
      var html_label = TS.i18n.t("submenu", "menu_source")();
      var html = '<div class="menu submenu' + (this.options.help ? " submenu_help" : "") + '" data-origin-id="' + this.element.attr("id") + '" data-model-ob-id="' + this.element.data("modelObId") + '"><ul aria-hidden="true" aria-label="' + html_label + '">' + this.options.items_html + "</ul></div>";
      var X_OFFSET = 7;
      var Y_OFFSET = 11;
      var x = TS.menu.$menu.offset().left + TS.menu.$menu.width() + X_OFFSET;
      var y = this.element.offset().top - Y_OFFSET;
      this.$submenu = $(html);
      this.$submenu.appendTo("body");
      TS.menu.$submenu = this.$submenu;
      TS.menu.$submenu_origin = this.element;
      if (x + this.$submenu.width() > window.innerWidth) {
        var space_on_left = TS.menu.$menu.offset().left - X_OFFSET;
        var space_on_right = window.innerWidth - x;
        if (space_on_left > space_on_right) {
          x = TS.menu.$menu.offset().left - this.$submenu.width() - X_OFFSET;
        }
      }
      if (y + this.$submenu.height() > window.innerHeight) {
        var space_on_top = y;
        var space_on_bottom = window.innerHeight - y;
        if (space_on_top > space_on_bottom) {
          y = window.innerHeight - this.$submenu.height() - Y_OFFSET;
        }
      }
      this.$submenu.css({
        position: "absolute",
        left: x + "px",
        top: y + "px"
      });
      var onclick = this.options.onclick;
      if (onclick) {
        this.$submenu.on("click", function(e) {
          onclick.call(this, e);
        });
      }
    },
    _destroy: function() {
      TS.menu.$submenu = null;
      TS.menu.$submenu_origin = null;
      if (this.options.ondestroy) this.options.ondestroy();
      this.$submenu.remove();
    }
  });
})();
var _on_esc;
(function() {
  "use strict";
  TS.registerModule("menu.app", {
    onStart: function() {},
    active_app: null,
    active_app_bot_id: null,
    app_item_click_sig: new signals.Signal,
    startWithApp: function(e, bot_id, position_by_click, skip_menu) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      if (!skip_menu) {
        TS.menu.buildIfNeeded();
        TS.menu.clean();
      }
      TS.menu.app.active_app_bot_id = bot_id;
      TS.apps.promiseToGetFullAppProfile(bot_id).then(ensureChannelMembershipInfoKnownForBot).then(showAllAppInformation);

      function ensureChannelMembershipInfoKnownForBot(app) {
        var bot_user_id = _.get(app, "bot_user.id");
        var model_ob = TS.shared.getActiveModelOb();
        if (bot_user_id && (TS.model.active_channel_id || TS.model.active_group_id)) {
          return TS.membership.ensureChannelMembershipIsKnownForUsers(model_ob.id, [bot_user_id]).then(function() {
            return app;
          });
        }
        return app;
      }

      function showAllAppInformation(app) {
        TS.menu.app.active_app = app;
        if (skip_menu) {
          TS.client.ui.app_profile.openWithApp(TS.menu.app.active_app, TS.menu.app.active_app_bot_id);
        } else {
          _buildAppMenu(e, position_by_click);
        }
      }
    },
    onAppItemClick: function(e) {
      var $item = $(this);
      var action = $item.data("action");
      if (action === "view_details") {
        TS.client.ui.app_profile.openWithApp(TS.menu.app.active_app, TS.menu.app.active_app_bot_id);
      } else if (action === "files") {
        e.preventDefault();
        TS.view.files.clearFilter();
        TS.client.ui.files.filterFileList(TS.menu.app.active_app.bot_user.id);
      } else if (action === "remove_from_channel") {
        e.preventDefault();
        if (TS.model.active_channel_id) {
          TS.channels.kickMember(TS.model.active_channel_id, TS.menu.app.active_app.bot_user.id);
        } else if (TS.model.active_group_id) {
          TS.groups.kickMember(TS.model.active_group_id, TS.menu.app.active_app.bot_user.id);
        }
      } else if (action === "invite_to_channel") {
        e.preventDefault();
        TS.ui.invite.showInviteMemberToChannelDialog(TS.menu.app.active_app.bot_user.id);
      }
      TS.clog.track("USER_CARD_CLICK", {
        app_id: TS.menu.app.active_app.id,
        bot_id: TS.menu.app.active_app_bot_id
      });
      TS.menu.app.end();
    },
    end: function() {
      TS.menu.app.active_app = null;
      TS.menu.end();
    }
  });
  var _buildAppMenu = function(e, position_by_click) {
    var template_args = TS.apps.constructTemplateArgsForCardAndProfile(TS.menu.app.active_app, TS.menu.app.active_app_bot_id);
    var is_bot = _.get(TS.menu.app.active_app, "bot_user.id");
    TS.menu.$menu_header.html(TS.templates.menu_app_card_header(template_args));
    TS.menu.$menu_items.html(TS.templates.menu_app_card_items(template_args));
    TS.menu.$menu_footer.html(TS.templates.menu_app_card_footer(template_args));
    TS.menu.start(e, position_by_click, {
      menu_class: "app_card"
    });
    if (is_bot) {
      var keymap = TS.utility.keymap;
      var starting_im = false;
      $("[data-js=app_card_dm]").bind("keydown", function(e) {
        var input = $(this);
        if (e.which == keymap.enter && !e.shiftKey && !starting_im) {
          if ($.trim(input.val()) !== "") {
            e.preventDefault();
            TS.ims.startImByMemberId(TS.menu.app.active_app.bot_user.id, false, input.val());
            TS.menu.app.end();
            starting_im = true;
          }
        }
      });
    }
    if (!template_args.hide_link_to_app_profile) {
      TS.menu.$menu_header.on("click", function() {
        TS.client.ui.app_profile.openWithApp(TS.menu.app.active_app, TS.menu.app.active_app_bot_id);
        TS.menu.$menu_header.off();
        TS.clog.track("USER_CARD_CLICK", {
          app_id: TS.menu.app.active_app ? TS.menu.app.active_app.id : "",
          bot_id: TS.menu.app.active_app_bot_id
        });
        TS.menu.app.end();
      });
    } else {
      TS.menu.$menu_header.off();
    }
    TS.menu.$menu_items.on("click.menu", "li", TS.menu.app.onAppItemClick);
    TS.menu.$menu_items.on("click.menu", "[data-member-profile-link]", function(e) {
      e.preventDefault();
      TS.client.ui.previewMember($(this).data("member-profile-link"));
    });
    TS.menu.keepInBounds();
  };
})();
(function() {
  "use strict";
  TS.registerModule("menu.channel", {
    onStart: function() {},
    channel: null,
    startWithChannel: function(e, channel_id) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      if (!TS.model.menu_is_showing) _use_channel_name_toggle = undefined;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      TS.menu.channel.channel = TS.channels.getChannelById(channel_id);
      var channel = TS.menu.channel.channel;
      var show_email_item = TS.model.team.prefs.allow_email_ingestion;
      TS.menu.$menu_header.addClass("hidden").empty();
      var template_args = {
        channel: channel,
        user: TS.model.user,
        show_email_item: show_email_item,
        show_handy_rxns: TS.model.user.is_admin && TS.boot_data.feature_thanks
      };
      if (!TS.channels.isChannelRequired(channel) || TS.permissions.members.canPostInChannel(channel)) {
        if (channel.purpose.last_set === 0 && !TS.model.user.is_ultra_restricted && channel.is_member) template_args.show_purpose_item = true;
      }
      if (TS.notifs.isCorGMuted(channel.id)) template_args.channel_is_muted = true;
      if (channel.is_member && (!TS.channels.isChannelRequired(channel) || TS.permissions.members.canPostInChannel(channel))) template_args.show_advanced_item = true;
      if (TS.boot_data.page_needs_enterprise) {
        var can_manage_shared_channels = TS.permissions.members.canManageOrgSharedChannels();
        if (!TS.shared.isModelObOrgShared(channel) && can_manage_shared_channels && !TS.channels.isChannelRequired(channel)) template_args.show_convert_item = true;
        if (TS.shared.isModelObOrgShared(channel)) {
          if (template_args.show_advanced_item) {
            if (can_manage_shared_channels) {
              template_args.show_manage_teams = !channel.is_global_shared;
            } else {
              template_args.show_advanced_item = false;
            }
          }
        }
        template_args.is_not_allowed_integrations = true;
      }
      template_args.is_moved = channel.is_moved;
      TS.menu.$menu_items.html(TS.templates.menu_channel_items(template_args));
      TS.menu.$menu_header.bind("click.menu", TS.menu.channel.onChannelHeaderClick);
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.channel.onChannelItemClick);
      TS.kb_nav.setSubmitItemHandler(TS.menu.channel.onChannelItemClick);
      TS.menu.start(e);
      TS.menu.$menu.attr("data-qa", "channel_menu");
      TS.menu.$menu.addClass("narrow_menu");
      TS.ui.date_picker.getOldestMsgTs();
      if (!_use_channel_name_toggle) _use_channel_name_toggle = $(e.target).closest("#channel_name").length;
      var $toggle_button = _use_channel_name_toggle ? $("#channel_name") : $("#channel_actions_toggle");
      var toggle_button_height = $toggle_button.height();
      var y_plus = _use_channel_name_toggle ? toggle_button_height + 6 : toggle_button_height;
      var x_plus = _use_channel_name_toggle ? 18 : 6;
      TS.menu.positionAt($toggle_button, x_plus, y_plus);
    },
    onChannelHeaderClick: function(e) {
      e.preventDefault();
    },
    onChannelItemClick: function(e) {
      var id = $(this).attr("id");
      if ($(this).hasClass("disabled")) {
        TS.menu.channel.end();
        return;
      }
      if (id === "channel_join_item") {
        e.preventDefault();
        if (TS.model.archive_view_is_showing && TS.client.archives.current_model_ob.id == TS.menu.channel.channel.id) {
          TS.channels.join(TS.client.archives.getCurrentModelOb().name);
        } else {
          TS.channels.displayChannel({
            id: TS.menu.channel.channel.id
          });
        }
      } else if (id === "channel_details_item") {
        e.preventDefault();
        if (TS.model.ui_state.flex_visible && TS.model.ui_state.flex_name === "details") {
          $("#details_tab").highlight(null, "channel_page_details_highlighter");
        } else {
          TS.client.ui.flex.openFlexTab("details");
        }
      } else if (id === "channel_handy_rxns_item") {
        TS.ui.handy_rxns.startChannelDialog(TS.menu.channel.channel.id);
      } else if (id === "channel_display_item") {
        e.preventDefault();
        TS.channels.displayChannel({
          id: TS.menu.channel.channel.id
        });
      } else if (id === "channel_close_archived_item") {
        e.preventDefault();
        TS.channels.closeArchivedChannel(TS.menu.channel.channel.id);
      } else if (id === "channel_leave_item") {
        e.preventDefault();
        TS.channels.leave(TS.menu.channel.channel.id);
      } else if (id === "channel_star_item") {
        e.preventDefault();
        TS.stars.checkForStarClick(e);
      } else if (id === "channel_email_item") {} else if (id === "channel_manage_teams_item") {
        e.preventDefault();
        TS.ui.channel_manage_teams_dialog.start(TS.menu.channel.channel.id);
      } else if (id === "channel_advanced_item") {
        e.preventDefault();
        TS.ui.channel_options_dialog.start(TS.menu.channel.channel.id);
      } else if (id === "channel_convert_item") {
        e.preventDefault();
        TS.ui.channel_options_dialog.start(TS.menu.channel.channel.id, "convert_shared");
      } else if (id === "channel_unarchive_item") {
        e.preventDefault();
        TS.api.call("channels.unarchive", {
          channel: TS.menu.channel.channel.id
        }, function(ok, data) {
          if (ok) return;
          var err_str;
          if (data.error === "restricted_action") {
            err_str = TS.i18n.t("<p>You don’t have permission to un-archive channels.</p><p>Talk to your Team Owner.</p>", "channel_menu");
          } else {
            err_str = TS.i18n.t("Un-archiving failed with error", "channel_menu") + ' "' + data.error + '"';
          }
          setTimeout(TS.generic_dialog.alert, 100, err_str);
        });
      } else if (id === "channel_archives_item") {} else if (id === "channel_jump_item") {
        e.preventDefault();
        TS.menu.startWithDatePicker(e);
        return;
      } else if (id === "channel_mute_item") {
        e.preventDefault();
        TS.notifs.muteOrUnmuteCorG(TS.menu.channel.channel.id);
      } else if (id === "channel_files_item") {
        TS.client.ui.flex.openFlexTab("search");
        TS.search.setFilter("files");
        TS.view.resizeManually("TS.key_triggers");
        var txt = "in:" + TS.shared.getActiveModelOb().name + " ";
        TS.search.setInputVal(txt);
      } else if (id === "channel_purpose_item") {
        e.preventDefault();
        TS.ui.purpose_dialog.start(TS.menu.channel.channel.name, TS.menu.channel.channel);
      } else if (id === "channel_invite_item") {
        e.preventDefault();
        TS.ui.channel_invite_modal.startInviteToChannelModal(TS.menu.channel.channel.id);
      } else if (id === "channel_prefs") {
        e.preventDefault();
        TS.ui.channel_prefs_dialog.start(TS.menu.channel.channel.id);
      } else if (id === "channel_add_service_item") {} else {
        TS.warn("not sure what to do with clicked element id:" + id);
        return;
      }
      TS.menu.channel.end();
    },
    startWithChannelPickerForChange: function(e, user_id) {
      if (TS.menu.isRedundantClick(e)) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var member = TS.members.getMemberById(user_id);
      var channels_for_ura = [];
      var groups_for_ura = [];
      $.each(TS.channels.getUnarchivedChannelsForUser(), function(index, channel) {
        if (!member.channels.hasOwnProperty(channel.id)) {
          channels_for_ura.push(channel);
        }
      });
      $.each(TS.groups.getUnarchivedGroups(), function(index, group) {
        if (!member.groups.hasOwnProperty(group.id)) {
          groups_for_ura.push(group);
        }
      });
      var template_args = {
        user_id: user_id,
        channels: channels_for_ura,
        groups: groups_for_ura
      };
      TS.menu.$menu_header.html(TS.templates.menu_channel_picker_header(template_args));
      TS.menu.$menu_items.html(TS.templates.menu_channel_picker(template_args)).css("max-height", 274);
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.channel.onChannelPickerItemClickChangeChannel);
      TS.menu.start(e);
      var $el = $(e.target).closest(".pill");
      if (TS.boot_data.app === "mobile") {
        TS.menu.positionAt($el, -$el.offset().left + 16, 0);
      } else {
        TS.menu.positionAt($el, -TS.menu.$menu.width() + $el.outerWidth(), $el.height() + 4);
      }
      TS.menu.$menu.scrollintoview({
        duration: 500,
        offset: "bottom",
        px_offset: -25
      });
      _bindChannelFilterStart();
      TS.kb_nav.setAllowHighlightWithoutBlurringInput(true);
    },
    onChannelPickerItemClickChangeChannel: function() {
      var user_id = $(this).data("user-id");
      var channel_id = $(this).data("channel-id");
      var group_id = $(this).data("group-id");
      if (channel_id) {
        TS.api.call("users.admin.changeURAChannel", {
          user: user_id,
          channel: channel_id
        }, TS.web.admin.onMemberURAChanged);
      } else if (group_id) {
        TS.api.call("users.admin.changeURAChannel", {
          user: user_id,
          channel: group_id
        }, TS.web.admin.onMemberURAChanged);
      }
      TS.menu.channel.end();
    },
    startWithChannelPickerForInvite: function(e, user_id) {
      if (TS.menu.isRedundantClick(e)) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var member = TS.members.getMemberById(user_id);
      var channels_for_ra = [];
      var groups_for_ra = [];
      $.each(TS.channels.getUnarchivedChannelsForUser(), function(index, channel) {
        if (!member.channels.hasOwnProperty(channel.id)) {
          channels_for_ra.push(channel);
        }
      });
      $.each(TS.groups.getUnarchivedGroups(), function(index, group) {
        if (!member.groups.hasOwnProperty(group.id)) {
          groups_for_ra.push(group);
        }
      });
      var template_args = {
        user_id: user_id,
        channels: channels_for_ra,
        groups: groups_for_ra
      };
      TS.menu.$menu_header.html(TS.templates.menu_channel_picker_header(template_args));
      TS.menu.$menu_items.html(TS.templates.menu_channel_picker(template_args)).css("max-height", 274);
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.channel.onChannelPickerItemClickInviteChannel);
      TS.menu.start(e);
      var $el = $(e.target).closest(".pill");
      if (TS.boot_data.app === "mobile") {
        TS.menu.positionAt($el, -$el.offset().left + 16, 0);
      } else {
        TS.menu.positionAt($el, -$el.width() + 10, $el.height() + 4);
      }
      TS.menu.$menu.scrollintoview({
        duration: 500,
        offset: "bottom",
        px_offset: -25
      });
      _bindChannelFilterStart();
      TS.kb_nav.setAllowHighlightWithoutBlurringInput(true);
    },
    onChannelPickerItemClickInviteChannel: function() {
      var user_id = $(this).data("user-id");
      var channel_id = $(this).data("channel-id");
      var group_id = $(this).data("group-id");
      if (channel_id) {
        TS.api.call("channels.invite", {
          user: user_id,
          channel: channel_id
        }, TS.web.admin.onMemberInviteChannel);
      } else if (group_id) {
        TS.api.call("groups.invite", {
          user: user_id,
          channel: group_id
        }, TS.web.admin.onMemberInviteGroup);
      }
      TS.menu.channel.end();
    },
    startWithChannelPicker: function(e, model_obs, item_selected_callback) {
      if (TS.menu.isRedundantClick(e)) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var channels = [];
      var groups = [];
      var mpims = [];
      model_obs.forEach(function(model_ob) {
        if (model_ob.is_mpim) {
          mpims.push(model_ob);
        } else if (model_ob.is_group || model_ob.is_private) {
          groups.push(model_ob);
        } else if (model_ob.is_channel) {
          channels.push(model_ob);
        }
      });
      var template_args = {
        user_id: TS.model.user.id,
        channels: channels,
        groups: groups,
        mpims: mpims
      };
      TS.menu.$menu_header.html(TS.templates.menu_channel_picker_header(template_args));
      TS.menu.$menu_items.html(TS.templates.menu_channel_picker(template_args)).css("max-height", 274);
      TS.menu.$menu_items.on("click.menu", "li", item_selected_callback);
      TS.menu.start(e);
      _bindChannelFilterStart();
      TS.kb_nav.setAllowHighlightWithoutBlurringInput(true);
    },
    end: function() {
      TS.menu.channel.channel = null;
      TS.menu.end();
    }
  });
  var _use_channel_name_toggle;
  var _bindChannelFilterStart = function() {
    var $none_found = TS.menu.$menu.find(".no_results");
    var $close_icon = TS.menu.$menu.find(".icon_close");
    var $filter = TS.menu.$menu.find(".menu_filter");
    var prev_query = "";
    $close_icon.click(function() {
      $filter.val("").trigger("change");
      $filter.focus();
    });
    TS.menu.$menu_items.children("li").each(function() {
      var channel_id = $(this).data("channel-id");
      if (channel_id) {
        var channel = TS.channels.getChannelById(channel_id);
        if (channel.is_private) {
          $(this).data("name", channel.name);
        } else if (channel) {
          $(this).data("name", "#" + channel.name);
        }
        return;
      }
      var group_id = $(this).data("group-id");
      if (group_id) {
        var group = TS.groups.getGroupById(group_id);
        if (group) {
          $(this).data("name", group.name);
        }
      }
      var mpim_id = $(this).data("mpim-id");
      if (mpim_id) {
        var mpim = TS.mpims.getMpimById(mpim_id);
        if (mpim) $(this).data("mpim", mpim);
      }
    });
    $filter.on("keyup change paste", TS.utility.debounce(function() {
      var query = $(this).val();
      if (query) {
        if (prev_query !== query) {
          var any_found = false;
          var name_regex = new RegExp(TS.utility.regexpEscape(query), "i");
          var prefix_regexes = [];
          var queries = query.split(/[,| ]/).filter(function(i) {
            return !!i;
          });
          for (var i = 0; i < queries.length; i += 1) {
            prefix_regexes.push(new RegExp("^" + TS.utility.regexpEscape(queries[i]), "i"));
          }
          $close_icon.removeClass("hidden");
          TS.menu.$menu_items.children("li").removeClass("hidden").each(function() {
            var name = $(this).data("name");
            var mpim = $(this).data("mpim");
            if (name) {
              var match = name.match(name_regex);
              if (match) {
                any_found = true;
                return;
              }
            } else if (mpim) {
              if (TS.mpims.checkMpimMatch(mpim, prefix_regexes)) {
                any_found = true;
                return;
              }
            }
            $(this).addClass("hidden");
          });
          if (any_found) {
            $none_found.addClass("hidden");
          } else {
            $none_found.removeClass("hidden");
            $none_found.find(".query").text(query);
          }
          TS.kb_nav.clearHighlightedItem();
        }
      } else {
        TS.menu.$menu_items.children("li.hidden").removeClass("hidden");
        $none_found.addClass("hidden");
        $close_icon.addClass("hidden");
        if (prev_query !== query) {
          TS.kb_nav.clearHighlightedItem();
        }
      }
      prev_query = query;
      TS.ui.utility.updateClosestMonkeyScroller(TS.menu.$menu.find("#menu_items_scroller"), true);
    }, 250));
    $filter.focus();
  };
})();
(function() {
  "use strict";
  TS.registerModule("menu.enterprise_team_signin", {
    start: function(e, el, options) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      options = _.merge({}, options);
      _team_id = options.team_id;
      _list = options.list;
      TS.menu.buildIfNeeded();
      TS.menu.enterprise_team_signin.clean();
      TS.menu.$menu.addClass("enterprise_team_signin_menu");
      TS.menu.$menu_header.addClass("hidden").empty();
      var items_html = TS.templates.enterprise_team_signin_menu_items({
        should_show_leave_team: options.should_show_leave_team,
        team_site_url: options.team_site_url || ""
      });
      TS.menu.$menu_items.html(items_html);
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.enterprise_team_signin.onMenuItemClick);
      TS.kb_nav.setSubmitItemHandler(TS.menu.enterprise_team_signin.onMenuItemClick);
      TS.menu.start(e, false);
      TS.menu.$menu.attr("data-qa", "enterprise_team_signin_menu");
      TS.menu.positionAt(el, el.width() - TS.menu.$menu.width(), el.outerHeight() + 10);
    },
    onMenuItemClick: function(e) {
      var $clicked = $(this).closest("[data-which]");
      if (!$clicked.length) $clicked = $(e.target).closest("[data-which]");
      var which = $clicked.data("which");
      if (which === "visit_team_site") {} else if (which === "leave_team") {
        e.preventDefault();
        _leaveTeamConfirm();
      } else {
        e.preventDefault();
        TS.warn("not sure what to do with clicked element:" + which);
      }
      TS.menu.enterprise_team_signin.end();
    },
    clean: function() {
      TS.menu.clean();
    },
    end: function() {
      TS.menu.end();
    }
  });
  var _team_id;
  var _list;
  var _leaveTeamConfirm = function() {
    TS.ui.leave_team_dialog.start(_team_id, _list);
    var anchor_page;
    var from_where;
    if (_list === "teams_on") {
      anchor_page = "your_workspaces";
      from_where = "your_workspaces_list";
    } else {
      anchor_page = "find_workspaces";
      from_where = "workspaces_you_can_join_list";
    }
    TS.enterprise.workspaces.recordTeamLeave(_team_id, anchor_page, from_where);
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.leave_team_dialog", {
    team_id: null,
    ladda: null,
    list: null,
    start: function(team_id, list) {
      TS.ui.leave_team_dialog.team_id = team_id;
      TS.ui.leave_team_dialog.list = list;
      var team = TS.enterprise.getTeamById(TS.ui.leave_team_dialog.team_id);
      var template_args = {
        team: team
      };
      var settings = {
        title: TS.i18n.t("Leave Team", "enterprise_workspaces")(),
        body_template_html: TS.templates.leave_workspace_dialog(template_args),
        onShow: _onShowLeaveTeamConfirm,
        onCancel: _onCancelLeaveTeamConfirm,
        modal_class: "leave_team_modal"
      };
      TS.ui.fs_modal.start(settings);
    }
  });
  var _onShowLeaveTeamConfirm = function() {
    var $div = $(".leave_team_modal .leave_team_modal_contents");
    $div.find(".buttons").on("click", "button", function() {
      var option = $(this).data("qa");
      if (option === "cancel_leave_team") {
        TS.ui.fs_modal.close();
      } else if (option === "confirm_leave_team") {
        var ladda = Ladda.create(this);
        ladda.start();
        var calling_args = {
          team: TS.ui.leave_team_dialog.team_id
        };
        if (TS.model.enterprise_api_token) calling_args.enterprise_token = TS.model.enterprise_api_token;
        TS.api.call("enterprise.teams.leave", calling_args, function(ok, data, args) {
          var team = TS.enterprise.getTeamById(args.team);
          var success_message = emoji.replace_colons(":sparkles:");
          success_message += TS.i18n.t(" You’ve successfully left <strong>{team_name}</strong>", "enterprise_workspaces")({
            team_name: TS.utility.htmlEntities(team.name)
          });
          if (ok) {
            _updateTeamsList(args.team);
            _showToastMessage("success", success_message);
            TS.ui.fs_modal.close();
          } else {
            var error_message;
            if (data.error === "disable_denied_due_to_idpgroup_membership") {
              error_message = TS.i18n.t('You can’t leave this team.<br>Because you’re in an IdP group assigned to this team, you can’t leave it here. <a href="mailto:{primary_owner_email}" target="_blank">Contact an Org Admin</a> for help leaving the team.', "enterprise_workspaces")({
                primary_owner_email: TS.model.enterprise.primary_owner.email
              });
              _showToastMessage("error", error_message);
            } else if (data.error === "user_deleted_already") {
              _updateTeamsList(args.team);
              _showToastMessage("success", success_message);
              TS.ui.fs_modal.close();
            } else if (data.error === "failed_to_convert_org_user_to_team_user") {
              _updateTeamsList(args.team);
              _showToastMessage("success", success_message);
              TS.ui.fs_modal.close();
            } else {
              error_message = TS.i18n.t('Leaving team failed with error "{error}"', "enterprise_workspaces")({
                error: data.error
              });
              _showToastMessage("error", error_message);
            }
          }
        });
        var anchor_page;
        var from_where;
        if (TS.ui.leave_team_dialog.list === "teams_on") {
          anchor_page = "your_workspaces";
          from_where = "your_workspaces_list";
        } else {
          anchor_page = "find_workspaces";
          from_where = "workspaces_you_can_join_list";
        }
        TS.enterprise.workspaces.recordTeamLeaveConfirm(TS.ui.leave_team_dialog.team_id, anchor_page, from_where);
      }
    });
  };
  var _updateTeamsList = function(team_id) {
    var updated_member = _.merge({}, TS.model.user);
    updated_member.enterprise_user.teams = updated_member.enterprise_user.teams.filter(function(team) {
      return team !== team_id;
    });
    if (TS.boot_data.app === "web") {
      TS.model.user = updated_member;
    } else {
      TS.members.upsertMember(updated_member);
    }
    var team = TS.enterprise.getTeamById(team_id);
    var existing_card = $('[data-id="' + team_id + '"]');
    if (!team.is_unlisted) {
      existing_card.html(TS.enterprise.workspaces.getTeamCardHTML(team));
    } else {
      existing_card.remove();
    }
    var $workspace_info = $('.workspace_info[data-team-id="' + team_id + '"]');
    if ($workspace_info.length) {
      var list = $(".workspaces").attr("data-list");
      $workspace_info.html(TS.templates.team_info({
        list: list,
        team: team,
        user: TS.model.user
      }));
    }
  };
  var _showToastMessage = function(type, message) {
    TS.ui.toast.show({
      type: type,
      message: message
    });
  };
  var _onCancelLeaveTeamConfirm = function() {};
})();
(function() {
  "use strict";
  TS.registerModule("menu.file", {
    onStart: function() {},
    reported_no_file_reader: false,
    startWithNewFileOptions: function(e, el) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.file.clean();
      TS.menu.$menu.addClass("file_menu");
      TS.menu.$menu_header.addClass("hidden").empty();
      var should_show_upload_file = window.File && TS.model.team.prefs.disable_file_uploads !== "disable_all";
      var file_type;
      var upload_file_text;
      if (should_show_upload_file) {
        file_type = TS.model.team.prefs.disable_file_uploads === "disable_all_except_images" ? TS.i18n.t("an image", "menu_file")() : TS.i18n.t("a file", "menu_file")();
        upload_file_text = "Upload " + file_type;
      } else {
        if (!TS.menu.file.reported_no_file_reader) {
          TS.menu.file.reported_no_file_reader = true;
          TS.info("TS.menu: No File support?  navigator.userAgent: " + navigator.userAgent);
        }
        file_type = "";
        upload_file_text = "";
      }
      var should_show_email = TS.boot_data.feature_email_ingestion && TS.model.team.prefs.allow_email_ingestion;
      var should_show_thanks = TS.boot_data.feature_thanks;
      var should_show_box = TS.utility.box.isBrowserSupported() && TS.model.prefs.box_enabled;
      var should_show_arugula = TS.boot_data.feature_arugula;
      var should_show_dropbox = window.Dropbox && Dropbox.isBrowserSupported() && TS.model.prefs.dropbox_enabled;
      var should_show_gdrive = TS.model.team.prefs.gdrive_enabled_team;
      var cloud_service_count = 0;
      if (should_show_box) cloud_service_count += 1;
      if (should_show_dropbox) cloud_service_count += 1;
      if (should_show_gdrive) cloud_service_count += 1;
      var use_cloud_submenu = cloud_service_count > 1;
      var items_html = TS.templates.menu_file_new_file_items({
        should_show_upload_file: should_show_upload_file,
        should_show_email: should_show_email,
        should_show_thanks: should_show_thanks,
        should_show_box: should_show_box,
        should_show_dropbox: should_show_dropbox,
        should_show_gdrive: should_show_gdrive,
        should_show_arugula: should_show_arugula,
        file_type: file_type,
        upload_file_text: upload_file_text,
        use_cloud_submenu: use_cloud_submenu
      });
      TS.menu.$menu_items.html(items_html);
      TS.menu.addSubmenu("#gdrive_create_submenu", TS.templates.menu_file_gdrive_doc_type_items(), TS.menu.file.onGDriveDocumentTypeItemClick);
      if (use_cloud_submenu) {
        var cloud_html = TS.templates.menu_file_cloud_service_items({
          should_show_box: should_show_box,
          should_show_dropbox: should_show_dropbox,
          should_show_gdrive: should_show_gdrive
        });
        TS.menu.addSubmenu("#cloud_submenu", cloud_html, TS.menu.file.onNewFileOptionsItemClick);
      }
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onNewFileOptionsItemClick);
      TS.kb_nav.setSubmitItemHandler(TS.menu.file.onNewFileOptionsItemClick);
      var is_primary_file_button = el && el.attr("id") === "primary_file_button";
      var on_esc;
      if (TS.client && is_primary_file_button) {
        on_esc = function() {
          if (TS.utility.contenteditable.supportsTexty()) {
            TS.utility.contenteditable.focus(TS.client.msg_input.$input);
          } else {
            TS.client.ui.$msg_input.focus();
          }
        };
      }
      TS.menu.start(e, false, {
        on_esc: on_esc
      });
      TS.menu.$menu.attr("data-qa", "file_menu");
      if (is_primary_file_button) {
        TS.menu.positionAt(el, 1, -(TS.menu.$menu.height() + 6));
      } else {
        TS.menu.positionAt(el, el.width() - TS.menu.$menu.width(), el.outerHeight() + 10);
      }
    },
    onGDriveDocumentTypeItemClick: function(e) {
      var $anchor = $(e.target);
      var type = $anchor.data("doc-type");
      if (!type) return;
      var $loading_icon = TS.templates.loading_indicator();
      _$plus_icon_cached.remove();
      _$primary_file_button.append($loading_icon);
      TS.files.gdrive.createAndShare(type);
      TS.menu.file.end();
      _$primary_file_button.toggleClass("active", true);
    },
    onGDriveCreateComplete: function(success, response) {
      if (success && response) {
        if ($("#allow_popups_banner").is(":visible")) {
          TS.client.ui.addEphemeralBotMsg({
            text: TS.i18n.t("It looks like your browser is blocking popups so here’s a link to your <{url}|document>", "menu_file")({
              url: response.data.url
            }),
            ephemeral_type: "created_google_drive_document"
          });
        }
      }
      _$primary_file_button.find(".ts_icon").remove();
      _$primary_file_button.toggleClass("active", false).append(_$plus_icon_cached);
    },
    onNewFileOptionsItemClick: function(e) {
      var $clicked = $(this).closest("[data-which]");
      if (!$clicked.length) $clicked = $(e.target).closest("[data-which]");
      var which = $clicked.data("which");
      var open_in_browser;
      if (which === "choose") {
        e.preventDefault();
        TS.client.ui.files.$upload.trigger("click");
      } else if (which === "email") {} else if (which === "reaction_poll") {
        e.preventDefault();
        if (TS.boot_data.feature_thanks) TS.ui.handy_rxns.startPollDialog(TS.model.active_cid);
      } else if (which === "snippet") {
        e.preventDefault();
        TS.client.msg_input.startSnippet();
      } else if (which === "post") {} else if (which === "box") {
        e.preventDefault();
        TS.files.openBoxChooser();
      } else if (which === "dropbox") {
        e.preventDefault();
        TS.files.openDropboxChooser();
      } else if (which === "gdrive_import") {
        e.preventDefault();
        TS.files.gdrive.openPickerWindow();
      } else if (which === "gdrive_create_submenu") {
        e.preventDefault();
      } else if (which === "cloud_submenu") {
        e.preventDefault();
      } else if (which === "space") {
        e.preventDefault();
        open_in_browser = TS.utility.cmdKey(e);
        TS.files.createAndOpenNewSpace(null, open_in_browser);
      } else if (which === "arugula") {
        e.preventDefault();
        open_in_browser = TS.utility.cmdKey(e);
        TS.files.createAndOpenNewArugula(null, open_in_browser);
      } else {
        e.preventDefault();
        TS.warn("not sure what to do with clicked element:" + which);
      }
      TS.menu.file.end();
    },
    startWithFileFilter: function(e, search_filter) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.file.clean();
      var active_type = "all";
      if (TS.model.file_list_types) {
        active_type = TS.model.file_list_types[0];
      }
      var show_email_item = TS.boot_data.feature_email_ingestion && TS.model.team.prefs.allow_email_ingestion || TS.model.team.plan;
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(TS.templates.menu_file_filter_items({
        active_type: active_type,
        show_email_item: show_email_item
      }));
      if (search_filter) {
        TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onSearchFileFilterItemClick);
      } else {
        TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onFileFilterItemClick);
      }
      TS.menu.start(e);
      if (search_filter) {
        TS.menu.positionAt($("#search_results_container"), 8, 74);
      } else {
        TS.menu.positionAt($("#file_list_container"), 8, 44);
      }
    },
    onFileFilterItemClick: function(e) {
      e.preventDefault();
      TS.client.ui.files.filterFileList($(this).data("filetype"));
      TS.view.files.setButtonState($(this).data("filetype"));
      TS.menu.file.end();
    },
    onSearchFileFilterItemClick: function(e) {
      e.preventDefault();
      TS.search.setFiletypeFilter($(this).data("filetype"));
      TS.view.files.setButtonState($(this).data("filetype"));
      TS.menu.file.end();
    },
    startWithFileMemberPromiseFilter: function(e) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.file.clean();
      TS.menu.$menu.append(TS.templates.menu_file_member_filter());
      TS.menu.$menu.addClass("member_file_filter_menu");
      TS.menu.start(e);
      TS.menu.positionAt($("#file_list_toggle_user"), 0, 35);
      var searchable_member_list = new TS.SearchableMemberList({
        $container: $(".member_file_filter_menu .searchable_member_list"),
        id: "member_file_filter_menu",
        show_filter_bar: false,
        compact_results: true,
        prevent_member_click_handler: true,
        suppress_presence: true
      });
      searchable_member_list.showInitial();
      searchable_member_list.member_clicked_sig.add(function(e, member) {
        TS.client.ui.files.toggleFileList(member.id);
        TS.menu.file.end();
      });
    },
    startWithFileMemberFilter: function(e, search_filter) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.file.clean();
      TS.menu.$menu_header.html(TS.templates.menu_file_member_header());
      var members = _humansGreaterThanBots(TS.members.getMembersForUser());
      TS.menu.$menu_items.html(TS.templates.menu_file_member_filter_items({
        members: members
      }));
      if (search_filter) {
        TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onSearchFileMemberFilterItemClick);
      } else {
        TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onFileMemberFilterItemClick);
      }
      TS.menu.start(e);
      if (search_filter) {
        TS.menu.positionAt($("#search_results_container"), 102, 100);
      } else {
        var $btn = $("#file_list_toggle_user");
        TS.menu.positionAt($("#file_list_toggle_user"), 0, $btn.outerHeight());
      }
      TS.members.view.bindTeamFilter("#file_member_filter", "#menu_items_scroller");
      $("#file_member_filter").find(".member_filter").focus().keydown(function(e) {
        if (e.which == TS.utility.keymap.enter) {
          var visible_members = $("#menu_items .member_item.active");
          if (visible_members.length == 1) {
            visible_members.find("a").click();
          }
        }
      });
      TS.members.view.team_filter_changed_sig.add(TS.kb_nav.clearHighlightedItem, TS.kb_nav);
      TS.kb_nav.setAllowHighlightWithoutBlurringInput(true);
    },
    onFileMemberFilterItemClick: function(e) {
      e.preventDefault();
      var id = $(e.currentTarget).data("member-id");
      TS.client.ui.files.toggleFileList(id);
      TS.menu.file.end();
    },
    onSearchFileMemberFilterItemClick: function(e) {
      e.preventDefault();
      var id = $(e.currentTarget).data("member-id");
      TS.search.setMember(id);
      TS.menu.file.end();
    },
    file_list_menu_up: false,
    startWithFileActions: function(e, file_id) {
      if (TS.client && !TS.model.ms_connected) {
        TS.sounds.play("beep");
        return;
      }
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.file.clean();
      var file = TS.files.getFileById(file_id);
      if (!file) return;
      var actions = TS.files.getFileActions(file);
      var $el = $(e.target);
      var $actions = $el.closest(".file_actions");
      if (actions.comment && $actions.data("exclude-comment")) actions.comment = false;
      if (actions.download && $actions.data("exclude-download")) actions.download = false;
      if (actions.open_original && $actions.data("exclude-original")) actions.open_original = false;
      if (actions.rxn_file && $actions.data("exclude-rxn")) actions.rxn_file = false;
      if (actions.pin_file && ($actions.data("exclude-pin") || $actions.data("exclude-pin-file"))) actions.pin_file = false;
      if (actions.unpin_file && ($actions.data("exclude-pin") || $actions.data("exclude-unpin-file"))) actions.unpin_file = false;
      if (actions.edit && $actions.data("exclude-edit")) actions.edit = false;
      if (actions.edit_title && $actions.data("exclude-edit-title")) actions.edit_title = false;
      if (actions.print && $actions.data("exclude-print")) actions.print = false;
      if (actions.create_public_link && $actions.data("exclude-create-public-link")) actions.create_public_link = false;
      if (actions.revoke_public_link && $actions.data("exclude-revoke-public-link")) actions.revoke_public_link = false;
      if ($actions.data("include-open-flexpane")) actions.open_in_flexpane = true;
      if ($actions.data("include-open-file-page")) actions.open_file_page = true;
      if ($actions.data("include-view-public-link")) actions.view_public_link = true;
      var in_file_list = $el.closest(".file_list_item").length > 0;
      if (in_file_list) {
        if (TS.model.ui_state.flex_name !== "details") actions.share = false;
        TS.menu.file.file_list_menu_up = true;
      }
      var file_container = $el.closest(".inline_file_preview_container, .file_container");
      if (file_container.length > 0) {
        file_container.addClass("file_menu_open");
        actions.new_window = false;
      }
      TS.menu.$menu_header.addClass("hidden").empty();
      var show_workflow_divider = false;
      if (actions.edit || TS.client && actions.edit_title || actions.create_public_link || actions.revoke_public_link || actions.print || actions.save_to_dropbox || actions.refresh) {
        show_workflow_divider = true;
      }
      var template_args = {
        file: file,
        actions: actions,
        is_refreshing: TS.files.waiting_for_refresh[file.id],
        model_ob: TS.shared.getActiveModelOb(),
        show_workflow_divider: show_workflow_divider
      };
      if (TS.model.unread_view_is_showing) {
        template_args.source_model_ob_id = $el.closest(".unread_group").data("modelId");
      }
      if (TS.client) template_args.info_pane_visible = TS.model.ui_state.flex_name === "details";
      TS.menu.$menu_items.html(TS.templates.menu_file_action_items(template_args));
      if (TS.boot_data.feature_fix_files) {
        TS.menu.$menu.addClass("no_icons");
      }
      if (TS.web) {
        TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onFileActionClickWeb);
      } else if (TS.client) {
        TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onFileActionClickClient);
      }
      TS.menu.start(e);
      $el.closest(".file_list_item").addClass("active");
      TS.menu.positionAt($el, -(TS.menu.$menu.width() + 6), 0);
      TS.menu.keepInBounds();
    },
    onFileActionClickClient: function(e) {
      var id = $(this).attr("id");
      var rxn_key = $(this).data("rxn-key");
      var file = TS.files.getFileById($(this).data("file-id"));
      var model_ob = TS.shared.getActiveModelOb();
      var source_model_ob_id = $(this).data("sourceModelId");
      if (!file) {
        TS.error("no file id:" + $(this).data("file-id"));
        return;
      }
      if (id === "share_file") {
        e.preventDefault();
        TS.view.files.shareInCurrentChannelOrIM(file.id, source_model_ob_id);
      } else if (id === "edit_file_snippet") {
        if (!file.is_truncated) {
          e.preventDefault();
          TS.ui.snippet_dialog.startEdit(file.id);
        }
      } else if (id === "edit_file_post") {} else if (id === "edit_file_space" || id === "open_new_window") {
        if (TS.client.windows.openFileWindow(file.id)) e.preventDefault();
      } else if (id === "edit_file_arugula") {} else if (id === "edit_file_title") {
        e.preventDefault();
        TS.client.ui.files.previewFile(file.id, "file_list");
        TS.files.editFileTitle(file.id);
      } else if (id === "delete_file") {
        e.preventDefault();
        TS.view.files.delete(file.id);
      } else if (id === "create_public_link") {
        e.preventDefault();
        if (TS.model.team.prefs.disallow_public_file_urls) {
          var message;
          if (TS.boot_data.feature_external_files) {
            message = TS.i18n.t("An administator has disabled external file URL creation. You will not be able to create an external URL for this file.", "menu_file")();
          } else {
            message = TS.i18n.t("An administator has disabled public file URL creation. You will not be able to create a public URL for this file.", "menu_file")();
          }
          TS.generic_dialog.alert(message);
          return;
        }
        TS.files.createPublicURL(file, function(ok) {
          if (ok) {
            if (TS.model.previewed_file_id) $("#file_preview_scroller").find(".file_actions_link").scrollintoview({
              duration: 500,
              offset: "top",
              px_offset: -50
            });
            $(".file_public_link_" + file.id).highlightText();
            TS.ui.file_share.fileShowPublicUrlDialog(file);
          }
        });
      } else if (id === "revoke_public_link") {
        e.preventDefault();
        TS.ui.file_share.fileRevokePublicLink(file.id);
      } else if (id === "view_public_link") {
        e.preventDefault();
        TS.ui.file_share.fileShowPublicUrlDialog(file);
      } else if (id === "refresh_file") {
        e.preventDefault();
        TS.files.refreshFile(file.id);
        TS.menu.$menu.find("#refresh_file .item_label").text(TS.i18n.t("Refreshing...", "menu_file")()).end();
        return;
      } else if (id === "download_file") {
        var open_flexpane = !(TS.ui.fs_modal_file_viewer && TS.ui.fs_modal_file_viewer.is_showing);
        if (TS.client && TS.client.downloads.startDownload(file, open_flexpane)) {
          e.preventDefault();
        }
      } else if (id === "open_original_file") {} else if (id === "comment_file") {
        e.preventDefault();
        if (TS.model.previewed_file_id != file.id) {
          TS.client.ui.files.previewFile(file.id, "file_list", false, true);
        } else {
          TS.utility.contenteditable.focus($("#file_comment"));
        }
      } else if (id === "save_to_dropbox") {
        return TS.api.callImmediately("files.getTempURL", {
          file: file.id
        }, function(ok, data) {
          if (ok) {
            Dropbox.save(data.url, file.name);
          }
        });
      } else if (id === "rxn_file") {
        e.preventDefault();
        TS.ui.react_emoji_menu.start({
          e: e,
          rxn_key: rxn_key
        });
      } else if (id === "share_private_file") {
        e.preventDefault();
        TS.files.shareOrReshareFile(file.id);
      } else if (id === "pin_file" && model_ob) {
        e.preventDefault();
        TS.pins.startPinFile(file.id, model_ob);
      } else if (id === "unpin_file" && model_ob) {
        e.preventDefault();
        TS.pins.unPinFile(file.id, model_ob);
      } else if (id === "open_in_flexpane") {
        e.preventDefault();
        TS.client.ui.files.previewFile(file.id);
      } else if (id === "copy_file_link") {
        e.preventDefault();
        TS.clipboard.writeText(file.permalink);
        var user = TS.members.getMemberById(file.user);
        var payload = {};
        if (user && user.is_bot) {
          var bot_id = user.profile.bot_id;
          var bot = TS.bots.getBotById(bot_id);
          payload.app_id = bot ? bot.app_id : "";
          payload.bot_id = bot_id;
        }
        TS.clog.track("MSG_LINK_COPY", payload);
      } else if (id === "star_file") {
        e.preventDefault();
        TS.stars.checkForStarClick(e);
      } else {
        e.preventDefault();
        TS.warn("not sure what to do with clicked element id:" + id);
        return;
      }
      TS.menu.file.end();
    },
    onFileActionClickWeb: function(e) {
      var id = $(this).attr("id");
      var rxn_key = $(this).data("rxn-key");
      var file = TS.files.getFileById($(this).data("file-id"));
      var model_ob = TS.shared.getActiveModelOb();
      if (!file) {
        TS.error("no file id:" + $(this).data("file-id"));
        return;
      }
      if (id === "share_file") {
        e.preventDefault();
        TS.ui.share_dialog.start(file.id);
      } else if (id === "share_private_file") {
        e.preventDefault();
        TS.files.shareOrReshareFile(file.id);
      } else if (id === "edit_file_snippet") {} else if (id === "edit_file_post") {} else if (id === "edit_file_space" || id === "open_new_window") {} else if (id === "edit_file_title") {} else if (id === "delete_file") {
        e.preventDefault();
        TS.web.file.deleteFile(file.id);
      } else if (id === "create_public_link") {
        e.preventDefault();
        if (!TS.model.team.prefs.disallow_public_file_urls) {
          TS.api.callImmediately("files.sharedPublicURL", {
            file: file.id
          }, function(ok, data) {
            if (ok) {
              var $share_link = $(".file_public_link_shared");
              $share_link.slideToggle(100);
              TS.files.upsertAndSignal({
                id: file.id,
                public_url_shared: true
              });
              if ($share_link.length === 0) TS.ui.file_share.fileShowPublicUrlDialog(file);
            } else if (data.error && data.error === "not_allowed") {
              TS.model.team.prefs.disallow_public_file_urls = true;
              var message;
              if (TS.boot_data.feature_external_files) {
                message = TS.i18n.t("An administator has disabled external file URL creation. You will not be able to create an external URL for this file.", "menu_file")();
              } else {
                message = TS.i18n.t("An administator has disabled public file URL creation. You will not be able to create a public URL for this file.", "menu_file")();
              }
              TS.generic_dialog.alert(message);
            }
          });
        }
      } else if (id === "revoke_public_link") {
        e.preventDefault();
        if (TS.web.file) {
          TS.web.file.revokePublicURL(file);
        } else {
          TS.ui.file_share.fileRevokePublicLink(file.id);
        }
      } else if (id === "view_public_link") {
        e.preventDefault();
        TS.ui.file_share.fileShowPublicUrlDialog(file);
      } else if (id === "refresh_file") {
        e.preventDefault();
        TS.files.refreshFile(file.id);
        TS.menu.$menu.find("#refresh_file .item_label").text("Refreshing...").end();
        return;
      } else if (id === "download_file") {} else if (id === "print_file") {
        window.print();
        e.preventDefault();
      } else if (id === "open_original_file") {} else if (id === "comment_file") {
        e.preventDefault();
        TS.utility.contenteditable.focus($("#file_comment"));
      } else if (id === "save_to_dropbox") {
        return TS.api.callImmediately("files.getTempURL", {
          file: file.id
        }, function(ok, data) {
          if (ok) {
            Dropbox.save(data.url, file.name);
          }
        });
      } else if (id === "rxn_file") {
        e.preventDefault();
        TS.ui.react_emoji_menu.start({
          e: e,
          rxn_key: rxn_key
        });
      } else if (id === "pin_file" && model_ob) {
        e.preventDefault();
        TS.pins.startPinFile(file.id, model_ob);
      } else if (id === "unpin_file" && model_ob) {
        e.preventDefault();
        TS.pins.unPinFile(file.id, model_ob);
      } else if (id === "copy_file_link") {
        e.preventDefault();
        TS.clipboard.writeText(file.permalink);
      } else if (id === "open_file_page") {} else {
        e.preventDefault();
        TS.warn("not sure what to do with clicked element id:" + id);
        return;
      }
      TS.menu.file.end();
    },
    clean: function() {
      TS.menu.clean();
    },
    end: function() {
      TS.menu.end();
    }
  });
  var _$primary_file_button = $('[data-js="primary_file_button"]');
  var _$plus_icon_cached = _$primary_file_button.find(".ts_icon_plus_thick");
  var _humansGreaterThanBots = function(items) {
    var humans = [];
    var bots = [];
    for (var i = 0; i < items.length; i += 1) {
      var member = items[i];
      if (member.is_bot || member.is_slackbot) {
        bots.push(member);
      } else {
        humans.push(member);
      }
    }
    return humans.concat(bots);
  };
})();
(function() {
  "use strict";
  TS.registerModule("menu.group", {
    onStart: function() {},
    group: null,
    startWithGroup: function(e, group_id) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      if (!TS.model.menu_is_showing) _use_channel_name_toggle = undefined;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      TS.menu.group.group = TS.groups.getGroupById(group_id);
      var group = TS.menu.group.group;
      var show_email_item = TS.model.team.prefs.allow_email_ingestion;
      TS.menu.$menu_header.addClass("hidden").empty();
      var template_args = {
        group: group,
        user: TS.model.user,
        show_email_item: show_email_item,
        leave_action: TS.groups.getLeaveAction(group_id),
        show_handy_rxns: TS.model.user.is_admin && TS.boot_data.feature_thanks
      };
      if (group.purpose.last_set === 0 && !TS.model.user.is_ultra_restricted) template_args.show_purpose_item = true;
      if (TS.notifs.isCorGMuted(group.id)) template_args.group_is_muted = true;
      template_args.show_advanced_item = true;
      if (TS.boot_data.page_needs_enterprise) {
        var can_manage_shared_channels = TS.permissions.members.canManageOrgSharedChannels();
        if (!group.is_shared && can_manage_shared_channels) template_args.show_convert_item = true;
        if (group.is_shared) {
          if (group.creator !== TS.model.user.id) template_args.show_advanced_item = false;
          if (can_manage_shared_channels) {
            template_args.show_advanced_item = true;
            template_args.show_manage_teams = !group.is_global_shared;
          }
          template_args.is_not_allowed_integrations = true;
        }
      }
      TS.menu.$menu_items.html(TS.templates.menu_group_items(template_args));
      TS.menu.$menu_header.bind("click.menu", TS.menu.group.onGroupHeaderClick);
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.group.onGroupItemClick);
      TS.menu.start(e);
      TS.menu.$menu.attr("data-qa", "group_menu");
      TS.menu.$menu.addClass("narrow_menu");
      TS.ui.date_picker.getOldestMsgTs();
      $("#menu_group_topic_input").bind("keydown", TS.menu.handleTopicKeydown);
      if (!_use_channel_name_toggle) _use_channel_name_toggle = $(e.target).closest("#channel_name").length;
      var $toggle_button = _use_channel_name_toggle ? $("#channel_name") : $("#channel_actions_toggle");
      var toggle_button_height = $toggle_button.height();
      var y_plus = _use_channel_name_toggle ? toggle_button_height + 6 : toggle_button_height;
      var x_plus = _use_channel_name_toggle ? 18 : 6;
      TS.menu.positionAt($toggle_button, x_plus, y_plus);
    },
    onGroupHeaderClick: function(e) {
      e.preventDefault();
    },
    onGroupItemClick: function(e) {
      var id = $(this).attr("id");
      if ($(this).hasClass("disabled")) {
        TS.menu.end();
        return;
      }
      if (id === "group_display_item") {
        e.preventDefault();
        TS.groups.displayGroup({
          id: TS.menu.group.group.id
        });
      } else if (id === "group_details_item") {
        e.preventDefault();
        if (TS.model.ui_state.flex_visible && TS.model.ui_state.flex_name === "details") {
          $("#details_tab").highlight(null, "channel_page_details_highlighter");
        } else {
          TS.client.ui.flex.openFlexTab("details");
        }
      } else if (id === "group_handy_rxns_item") {
        TS.ui.handy_rxns.startChannelDialog(TS.menu.group.group.id);
      } else if (id === "group_star_item") {
        e.preventDefault();
        TS.stars.checkForStarClick(e);
      } else if (id === "group_mute_item") {
        e.preventDefault();
        TS.notifs.muteOrUnmuteCorG(TS.menu.group.group.id);
      } else if (id === "group_email_item") {} else if (id === "group_files_item") {
        TS.client.ui.flex.openFlexTab("search");
        TS.search.setFilter("files");
        TS.view.resizeManually("TS.key_triggers");
        var txt = "in:" + TS.shared.getActiveModelOb().name + " ";
        TS.search.setInputVal(txt);
      } else if (id === "group_leave_item") {
        e.preventDefault();
        TS.groups.leave(TS.menu.group.group.id);
      } else if (id === "group_unarchive_item") {
        e.preventDefault();
        TS.api.call("groups.unarchive", {
          channel: TS.menu.group.group.id
        });
      } else if (id === "group_archives_item") {} else if (id === "group_jump_item") {
        e.preventDefault();
        TS.menu.startWithDatePicker(e);
        return;
      } else if (id === "channel_manage_teams_item") {
        e.preventDefault();
        TS.ui.channel_manage_teams_dialog.start(TS.menu.group.group.id);
      } else if (id === "group_advanced_item") {
        e.preventDefault();
        TS.ui.channel_options_dialog.start(TS.menu.group.group.id);
      } else if (id === "group_convert_item") {
        e.preventDefault();
        TS.ui.channel_options_dialog.start(TS.menu.group.group.id, "convert_shared");
      } else if (id === "group_purpose_item") {
        e.preventDefault();
        TS.ui.purpose_dialog.start(TS.menu.group.group.name, TS.menu.group.group);
      } else if (id === "group_invite_item") {
        e.preventDefault();
        TS.ui.channel_invite_modal.startInviteToChannelModal(TS.menu.group.group.id);
      } else if (id === "group_prefs") {
        e.preventDefault();
        TS.ui.channel_prefs_dialog.start(TS.menu.group.group.id);
      } else if (id === "group_add_service_item") {} else {
        TS.warn("not sure what to do with clicked element id:" + id);
        return;
      }
      TS.menu.end();
    }
  });
  var _use_channel_name_toggle;
})();
(function() {
  "use strict";
  TS.registerModule("menu.member", {
    member: null,
    member_item_click_sig: new signals.Signal,
    onStart: function() {
      _member_presence_list = new TS.PresenceList;
    },
    startWithMember: function(e, member_id, position_by_click, is_header_menu, is_im_menu) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      if (!TS.model.menu_is_showing) _use_channel_name_toggle = undefined;
      TS.menu.buildIfNeeded();
      TS.menu.member.member = TS.members.getMemberById(member_id);
      var member = TS.menu.member.member;
      if (!member) return;
      if (!TS.permissions.members.canUserSeeMember(member)) return;
      if (member.is_bot && _.get(member.profile, "bot_id")) {
        return TS.menu.app.startWithApp(e, _.get(member.profile, "bot_id"));
      }
      TS.menu.clean();
      _member_presence_list.add(member_id);
      TS.menu.menu_closed_sig.addOnce(function() {
        _member_presence_list.clear();
      });
      var template_args = _getTemplateArguments(member, {
        is_header_menu: is_header_menu,
        is_im_menu: is_im_menu
      });
      if (template_args.channel_kick_name && template_args.channel_kick_hidden) {
        var model_ob = TS.shared.getActiveModelOb();
        TS.membership.ensureChannelMembershipIsKnownForUsers(model_ob.id, [member.id]).then(function() {
          if (!TS.model.menu_is_showing) return;
          if (TS.menu.last_e !== e) return;
          if (TS.membership.getUserChannelMembershipStatus(member.id, model_ob).is_member) {
            TS.menu.$menu_items.find("#member_kick_channel_item").removeClass("hidden");
          }
        });
      }
      if (is_im_menu) {
        TS.menu.$menu_header.addClass("hidden").empty();
      } else {
        TS.menu.$menu_header.html(TS.templates.menu_member_header(template_args));
        TS.client.flex_pane.startLocalTimeInterval();
      }
      if (!member.is_stranger) {
        TS.menu.$menu_items.html(TS.templates.menu_member_items(template_args));
      }
      if (!is_im_menu && !member.deleted) {
        TS.clog.track("USER_CARD_DISPLAY", {});
      }
      if (member_id == TS.model.user.id) {
        var menu_user_footer_html = "";
        if (!is_im_menu) {
          menu_user_footer_html += TS.templates.menu_member_footer({
            member: member
          });
        }
        TS.menu.$menu_footer.html(menu_user_footer_html);
      } else if (!is_im_menu) {
        TS.menu.$menu_footer.html(TS.templates.menu_member_footer({
          member: member
        }));
      }
      TS.menu.start(e, position_by_click);
      var starting_im = false;
      var input = $("#menu_member_dm_input");
      if (TS.boot_data.feature_texty_takes_over) {
        var member_name = TS.members.getMemberDisplayName(member);
        TS.utility.contenteditable.create(input, {
          modules: {
            tabcomplete: {
              searchOptions: {
                complete_member_specials: false
              },
              completers: [TS.tabcomplete.channels, TS.tabcomplete.emoji, TS.tabcomplete.members],
              positionMenu: function(menu) {
                menu.style.width = input.outerWidth() + "px";
                menu.style.minWidth = "0";
                TS.tabcomplete.positionUIRelativeToInput(menu, input);
              }
            }
          },
          singleLineInput: true,
          onEnter: function(args) {
            var value = _.trim(TS.utility.contenteditable.value(input));
            if (!_.keys(args).length && !starting_im && value.length) {
              TS.ims.startImByMemberId(member.id, false, value);
              TS.menu.member.end();
              starting_im = true;
              TS.clog.track("USER_CARD_DM", {});
            }
            return false;
          },
          onEscape: function() {
            TS.menu.end();
          },
          placeholder: TS.i18n.t("Message {name}", "menu")({
            name: TS.utility.htmlEntities(member_name)
          })
        });
        TS.utility.contenteditable.enable(input);
      } else {
        var keymap = TS.utility.keymap;
        $("#menu_member_dm_input").bind("keydown", function(e) {
          if (e.which == keymap.enter && !e.shiftKey && !starting_im) {
            if ($.trim(input.val()) !== "") {
              e.preventDefault();
              TS.ims.startImByMemberId(member.id, false, input.val());
              TS.menu.member.end();
              starting_im = true;
              TS.clog.track("USER_CARD_DM", {});
            }
          }
        });
      }
      if (member.is_self) {
        TS.menu.$menu_header.find(".member_timezone_value a").on("click.timezone", function(e) {
          e.preventDefault();
          TS.menu.member.end();
        });
      }
      TS.menu.$menu_header.bind("click.menu", _onMemberHeaderClick);
      TS.menu.$menu_items.on("click.menu", "li", _onMemberItemClick);
      TS.kb_nav.setSubmitItemHandler(_onMemberItemClick);
      if (is_im_menu) {
        if (!_use_channel_name_toggle) _use_channel_name_toggle = $(e.target).closest("#channel_name").length;
        var $toggle_button = _use_channel_name_toggle ? $("#channel_name") : $("#channel_actions_toggle");
        var toggle_button_height = $toggle_button.height();
        var y_plus = _use_channel_name_toggle ? toggle_button_height + 6 : toggle_button_height;
        var x_plus = _use_channel_name_toggle ? 18 : 6;
        TS.menu.positionAt($toggle_button, x_plus, y_plus);
        TS.menu.$menu.attr("data-qa", "member_menu");
        TS.menu.$menu.addClass("narrow_menu");
        TS.ui.date_picker.getOldestMsgTs();
      }
      if (is_im_menu) {
        TS.view.setFlexMenuSize();
      } else {
        TS.menu.keepInBounds();
      }
    },
    startWithMemberPreview: function(e, member_id, is_team_page, is_member_preview) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client && TS.client.ui.checkForEditing(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var $btn = $(e.target).closest(".member_preview_menu_target");
      if (!member_id) {
        member_id = $btn.closest("[data-member-id]").data("member-id");
      }
      TS.menu.member.member = TS.members.getMemberById(member_id);
      var member = TS.menu.member.member;
      var im = TS.ims.getImByMemberId(member_id);
      var template_args = {
        member: member,
        is_team_directory: true,
        im_id: im && im.id,
        hide_view_profile: is_member_preview
      };
      TS.menu.$menu_header.addClass("hidden").empty();
      if (!member.deleted && !member.is_slackbot && member_id != TS.model.user.id) {
        if (!TS.model.user.is_ultra_restricted && !member.is_ultra_restricted) {
          template_args.show_channel_invite = true;
        }
        if (TS.boot_data.page_needs_enterprise) {
          var team = TS.model.team;
          if (team && team.id !== member.team_id) template_args.show_call_action = false;
        }
      }
      if (is_team_page) {
        TS.menu.$menu_items.html(TS.templates.menu_member_items_short(template_args));
      } else {
        TS.menu.$menu_items.html(TS.templates.menu_member_items(template_args));
        TS.menu.$menu_items.on("click.menu", "li", {
          is_member_preview: is_member_preview
        }, _onMemberItemClick);
      }
      TS.menu.start(e);
      TS.kb_nav.setSubmitItemHandler(_onMemberItemClick);
      var left_offset = $btn.outerWidth() - TS.menu.$menu.width() - 1;
      TS.menu.positionAt($btn, left_offset, $btn.outerHeight() + 5);
      TS.menu.keepInBounds();
    },
    startWithEditMemberProfilePhotoActions: function(e, onclick) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      var is_custom_image = TS.model.user.profile.is_custom_image === true;
      var $el = $(e.target);
      var is_button = $el.is(".btn");
      var template_args = {
        show_delete: is_custom_image && !is_button,
        is_iOS: TS.model.is_iOS
      };
      TS.menu.clean();
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(TS.templates.menu_edit_member_profile_photo_action_items(template_args));
      TS.menu.$menu_items.on("click.menu", "li", onclick);
      TS.menu.start(e);
      if (is_button) {
        TS.menu.positionAt($el, 0, $el.outerHeight() + 5);
      } else {
        TS.menu.positionAt($el.closest('[data-action="edit_member_profile_photo_menu"]'), 36, 156);
      }
      TS.menu.keepInBounds();
    },
    startWithEnterpriseMemberHeader: function(e) {
      var SPACING_BETWEEN_TARGET_AND_MENU = 15;
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.model.menu_is_showing) return;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      var template_args = {
        enterprise_name: $("[data-enterprise-name]").val(),
        signout_url: TS.boot_data.signout_url
      };
      TS.menu.$menu_header.addClass("hidden").empty();
      TS.menu.$menu_items.html(TS.templates.menu_enterprise_member_header(template_args));
      TS.menu.$menu_items.on("click.menu", "li", _onEnterpriseMemberHeaderClick);
      TS.kb_nav.setSubmitItemHandler(_onEnterpriseMemberHeaderClick);
      TS.menu.start(e);
      var $menu_target = $("[data-header-menu-toggle]");
      var x_offset = -TS.menu.$menu.outerWidth() + $menu_target.outerWidth();
      var y_offset = $menu_target.outerHeight() + SPACING_BETWEEN_TARGET_AND_MENU;
      TS.menu.positionAt($menu_target, x_offset, y_offset);
      e.preventDefault();
    },
    end: function() {
      TS.menu.member.member = null;
      TS.menu.end();
    },
    test: function() {
      var test = {};
      Object.defineProperty(test, "_getTemplateArguments", {
        get: function() {
          return _getTemplateArguments;
        },
        set: function(v) {
          _getTemplateArguments = v;
        }
      });
      return test;
    }
  });
  var _member_presence_list;
  var _use_channel_name_toggle;
  var _getTemplateArguments = function(member, options) {
    options = options || {};
    var template_args = {
      member: member,
      show_dm_item: !options.is_im_menu,
      show_email_item: TS.model.team.prefs.allow_email_ingestion,
      is_im_menu: options.is_im_menu,
      show_admin_info: member.is_admin && member.team_id === TS.model.user.team_id
    };
    if (options.is_im_menu) {
      template_args.im = TS.ims.getImByMemberId(member.id);
    }
    if (options.is_header_menu && member.id === TS.model.user.id) {
      template_args.other_accounts = TS.boot_data.other_accounts;
      template_args.logout_url = TS.boot_data.logout_url;
      template_args.signin_url = TS.boot_data.signin_url;
    }
    if (!member.deleted && !member.is_slackbot && member.id !== TS.model.user.id) {
      if (!TS.model.user.is_ultra_restricted && !member.is_ultra_restricted) {
        template_args.show_channel_invite = true;
      }
    }
    var model_ob = TS.shared.getActiveModelOb();
    if (TS.model.active_channel_id || TS.model.active_group_id) {
      var member_could_be_removed_from_model_ob = (!TS.channels.isChannelRequired(model_ob) || member.is_restricted) && member.id !== TS.model.user.id;
      if (member_could_be_removed_from_model_ob) {
        var is_eligible_for_kicking;
        var membership_status = TS.membership.getUserChannelMembershipStatus(member.id, model_ob);
        if (membership_status.is_known) {
          is_eligible_for_kicking = membership_status.is_member;
        } else {
          is_eligible_for_kicking = true;
          template_args.channel_kick_hidden = true;
        }
        if (is_eligible_for_kicking) {
          if (!member.is_ultra_restricted) {
            if (model_ob.is_group && TS.permissions.members.canKickFromGroups() || model_ob.is_channel && TS.permissions.members.canKickFromChannels()) {
              template_args.channel_kick_name = (TS.model.active_channel_id ? "#" : "") + model_ob.name;
            }
          }
        }
      }
    }
    if (member.id === "USLACKBOT") {
      var show_slackbot_responses_item = false;
      if (TS.model.user.is_admin) {
        show_slackbot_responses_item = true;
      } else if (!TS.model.team.prefs.slackbot_responses_disabled && !TS.model.team.prefs.slackbot_responses_only_admins) {
        show_slackbot_responses_item = true;
      }
      template_args.show_slackbot_responses_item = show_slackbot_responses_item;
    }
    if (TS.utility.calls.isEnabled() && !member.is_bot && member.id !== "USLACKBOT") {
      template_args.show_call_action = true;
      if (TS.boot_data.page_needs_enterprise) {
        var team = TS.model.team;
        if (team && team.id !== member.team_id) template_args.show_call_action = false;
      }
    }
    return template_args;
  };
  var _onMemberHeaderClick = function(e) {
    e.preventDefault();
    TS.client.ui.previewMember(TS.menu.member.member.id, "menu_member_header");
    TS.clog.track("USER_CARD_CLICK");
    TS.menu.member.end();
  };
  var _onMemberItemClick = function(e) {
    var id = $(this).attr("id");
    clearTimeout(TS.menu.end_time);
    if (id === "member_photo_item") {} else if (id === "member_details_item") {
      e.preventDefault();
      if (TS.model.ui_state.flex_visible && TS.model.ui_state.flex_name === "details") {
        $("#details_tab").highlight(null, "channel_page_details_highlighter");
      } else {
        TS.client.ui.flex.openFlexTab("details");
      }
    } else if (id === "member_archives_item") {} else if (id === "member_jump_item") {
      e.preventDefault();
      TS.menu.startWithDatePicker(e);
      TS.menu.member.member_item_click_sig.dispatch(id);
      return;
    } else if (id === "member_star_item") {
      e.preventDefault();
      TS.stars.checkForStarClick(e);
    } else if (id === "member_email_item") {} else if (id === "member_skype_item") {} else if (id === "member_account_item") {} else if (id === "member_prefs_item") {
      e.preventDefault();
      TS.ui.prefs_dialog.start();
    } else if (id === "member_files_item") {
      e.preventDefault();
      TS.view.files.clearFilter();
      TS.client.ui.files.filterFileList(TS.menu.member.member.id);
    } else if (id === "member_im_files_item") {
      TS.client.ui.flex.openFlexTab("search");
      TS.search.setFilter("files");
      TS.view.resizeManually("TS.key_triggers");
      var txt = "in:" + TS.shared.getActiveModelOb().name + " ";
      TS.search.setInputVal(txt);
    } else if (id === "member_dm_item") {
      e.preventDefault();
      TS.ims.startImByMemberId(TS.menu.member.member.id);
    } else if (id === "member_invite_channel_item") {
      e.preventDefault();
      TS.ui.invite.showInviteMemberToChannelDialog(TS.menu.member.member.id);
    } else if (id === "member_create_group_item") {
      e.preventDefault();
      TS.ui.new_channel_modal.start("", false, [TS.menu.member.member.id]);
    } else if (id === "member_profile_item") {
      e.preventDefault();
      if (TS.menu.member.member.is_self) {
        TS.ui.edit_member_profile.start();
      } else {
        TS.client.ui.previewMember(TS.menu.member.member.id);
      }
    } else if (id === "member_presence") {
      e.preventDefault();
      TS.members.toggleUserPresence();
      TS.menu.end_time = setTimeout(function() {
        TS.menu.member.end();
        TS.menu.member.member_item_click_sig.dispatch(id);
      }, 1e3);
      return;
    } else if (id === "logout") {
      e.preventDefault();
      if (TS.client) TS.client.windows.closeAll();
      TS.utility.loadUrlInWindowIfOnline(TS.boot_data.logout_url);
    } else if ($(this).hasClass("switch_team")) {
      e.preventDefault();
      var team_id = $(this).data("team-id");
      if (TSSSB.call("displayTeam", team_id)) {
        e.preventDefault();
      } else {
        var href = $(this).find("a").attr("href");
        if (href && href.indexOf("?") == -1) {
          $(this).find("a").attr("href", href += "?" + TS.getQsArgsForUrl());
        }
      }
    } else if (id === "member_kick_channel_item") {
      e.preventDefault();
      if (TS.model.active_channel_id) {
        TS.channels.kickMember(TS.model.active_channel_id, TS.menu.member.member.id);
      } else if (TS.model.active_group_id) {
        TS.groups.kickMember(TS.model.active_group_id, TS.menu.member.member.id);
      }
    } else if (id === "member_slackbot_responses") {} else if (id === "member_open_profile_item") {} else if (id === "member_call_item") {
      TS.utility.calls.startCallInModelOb(TS.menu.member.member);
    } else {
      e.preventDefault();
      TS.warn("not sure what to do with clicked element id:" + id);
      return;
    }
    if (e.data && e.data.is_member_preview) {
      TS.clog.track("USER_PROFILE_CLICK");
    } else {
      TS.clog.track("USER_CARD_CLICK");
    }
    TS.menu.member.end();
    TS.menu.member.member_item_click_sig.dispatch(id);
  };
  var _onEnterpriseMemberHeaderClick = function(e) {
    var id = $(this).attr("id");
    if (id === "sign_out") {
      return;
    } else if (id === "view_account") {
      return;
    }
    e.preventDefault();
    TS.warn("not sure what to do with clicked element id:" + id);
  };
})();
(function() {
  "use strict";
  TS.registerModule("menu.mpim", {
    onStart: function() {},
    mpim: null,
    startWithMpim: function(e, mpim_id) {
      if (TS.menu.isRedundantClick(e)) return;
      if (TS.client.ui.checkForEditing(e)) return;
      if (!TS.model.menu_is_showing) _use_channel_name_toggle = undefined;
      TS.menu.buildIfNeeded();
      TS.menu.clean();
      TS.menu.mpim.mpim = TS.mpims.getMpimById(mpim_id);
      var mpim = TS.menu.mpim.mpim;
      var show_email_item = TS.model.team.prefs.allow_email_ingestion;
      TS.menu.$menu_header.addClass("hidden").empty();
      var template_args = {
        mpim: mpim,
        user: TS.model.user,
        show_email_item: show_email_item,
        show_mpim_create: TS.permissions.members.canCreateMpims(),
        show_mpim_convert: TS.permissions.members.canCreateGroups()
      };
      TS.menu.$menu_header.addClass("hidden").empty();
      if (TS.notifs.isCorGMuted(mpim.id)) template_args.mpim_is_muted = true;
      TS.menu.$menu_items.html(TS.templates.menu_mpim_items(template_args));
      TS.menu.$menu_header.bind("click.menu", TS.menu.mpim.onMpimHeaderClick);
      TS.menu.$menu_items.on("click.menu", "li", TS.menu.mpim.onMpimItemClick);
      TS.menu.start(e);
      TS.menu.$menu.attr("data-qa", "mpim_menu");
      TS.menu.$menu.addClass("narrow_menu");
      TS.ui.date_picker.getOldestMsgTs();
      if (!_use_channel_name_toggle) _use_channel_name_toggle = $(e.target).closest("#channel_name").length;
      var $toggle_button = _use_channel_name_toggle ? $("#channel_name") : $("#channel_actions_toggle");
      var toggle_button_height = $toggle_button.height();
      var y_plus = _use_channel_name_toggle ? toggle_button_height + 6 : toggle_button_height;
      var x_plus = _use_channel_name_toggle ? 18 : 6;
      TS.menu.positionAt($toggle_button, x_plus, y_plus);
    },
    onMpimHeaderClick: function(e) {
      e.preventDefault();
    },
    onMpimItemClick: function(e) {
      var id = $(this).attr("id");
      var mpim = TS.menu.mpim.mpim;
      if ($(this).hasClass("disabled")) {
        TS.menu.mpim.end();
        return;
      }
      if (id === "mpim_details_item") {
        e.preventDefault();
        if (TS.model.ui_state.flex_visible && TS.model.ui_state.flex_name === "details") {
          $("#details_tab").highlight(null, "channel_page_details_highlighter");
        } else {
          TS.client.ui.flex.openFlexTab("details");
        }
      } else if (id === "mpim_star_item") {
        e.preventDefault();
        TS.stars.checkForStarClick(e);
      } else if (id === "mpim_archives_item") {} else if (id === "mpim_jump_item") {
        e.preventDefault();
        TS.menu.startWithDatePicker(e);
        return;
      } else if (id === "mpim_mute_item") {
        e.preventDefault();
        TS.notifs.muteOrUnmuteCorG(TS.menu.mpim.mpim.id);
      } else if (id === "mpim_email_item") {} else if (id === "mpim_prefs") {
        e.preventDefault();
        TS.ui.channel_prefs_dialog.start(TS.menu.mpim.mpim.id);
      } else if (id === "mpim_files_item") {
        TS.client.ui.flex.openFlexTab("search");
        TS.search.setFilter("files");
        TS.view.resizeManually("TS.key_triggers");
        var txt = "in:" + TS.shared.getActiveModelOb().name + " ";
        TS.search.setInputVal(txt);
      } else if (id === "mpim_create_mpim_item") {
        e.preventDefault();
        setTimeout(function() {
          TS.ui.im_browser.startWithMpim(mpim);
        }, 1);
      } else if (id === "convert_to_private_channel") {
        e.preventDefault();
        var model_ob = TS.shared.getActiveModelOb();
        TS.ui.mpim_conversion_modal.startMpimConversionModal(model_ob);
      } else {
        TS.warn("not sure what to do with clicked element id:" + id);
        return;
      }
      TS.menu.mpim.end();
    },
    end: function() {
      TS.menu.mpim.mpim = null;
      TS.menu.end();
    }
  });
  var _use_channel_name_toggle;
})();
(function() {
  "use strict";
  TS.registerModule("debug_widget", {
    onStart: function() {
      if (!TS.client) return;
      if (!TS.client.ui) return;
      if (!TS.members) return;
      _$widget = $("#debug_widget");
      if (!_$widget.length) return;
      TS.client.ui.did_rebuild_all_sig.add(_didRebuildAll);
      TS.client.ui.did_rebuild_all_but_msgs_sig.add(_didRebuildAllButMessages);
      TS.client.msg_pane.did_rebuild_msgs_sig.add(_didRebuildMessages);
      TS.members.member_was_upserted_sig.add(_didUpsertMember);
      _$widget.click(function(e) {
        e.preventDefault();
        if (e.altKey) {
          _rebuild_all_count = 0;
          _rebuild_all_but_messages_count = 0;
          _rebuild_messages_count = 0;
          _member_upsert_count = 0;
          _last_member_upsert_ts = 0;
          _render();
        }
      });
      if (window.localStorage && window.localStorage.show_debug_widget) TS.debug_widget.toggle();
    },
    toggle: function() {
      if (!TS.client || !_$widget) return;
      _$widget.toggleClass("hidden");
      if (_$widget.hasClass("hidden")) {
        _is_visible = false;
        if (window.localStorage) delete window.localStorage.show_debug_widget;
        _$widget.empty();
      } else {
        _is_visible = true;
        if (window.localStorage) window.localStorage.show_debug_widget = 1;
        _render();
      }
    },
    isVisible: function() {
      return !!_is_visible;
    },
    setFrameRate: function(fps) {
      _average_frame_rate = fps;
    }
  });
  var _$widget;
  var _is_visible = false;
  var _last_member_upsert_ts = 0;
  var _rebuild_all_count = 0;
  var _rebuild_all_but_messages_count = 0;
  var _rebuild_messages_count = 0;
  var _member_upsert_count = 0;
  var _average_frame_rate = 0;
  var UPDATE_INTERVAL_MS = 500;
  var _pending_render_t;
  var template = Handlebars.compile('Rt={{rebuild_all_count}} Rb={{rebuild_all_but_messages_count}} Rm={{rebuild_messages_count}}<br>Um={{upsert_member_count}} <span class="{{color_class}}"><ts-icon class="ts_icon_add_user"></ts-icon> {{time_since_readable}}</span><br>Members={{total_member_count}} <ts-icon class="ts_icon_user"></ts-icon><br>FPS={{average_frame_rate}}');
  var _didUpsertMember = function() {
    _member_upsert_count += 1;
    _last_member_upsert_ts = Date.now();
    _maybeRender();
  };
  var _didRebuildAllButMessages = function() {
    _rebuild_all_but_messages_count += 1;
    _maybeRender();
  };
  var _didRebuildMessages = function() {
    _rebuild_messages_count += 1;
    _maybeRender();
  };
  var _didRebuildAll = function() {
    _rebuild_all_count += 1;
    _maybeRender();
  };
  var _getTemplateArgs = function() {
    var time_since_last_member_upsert = Date.now() - _last_member_upsert_ts;
    var color_class = "";
    if (time_since_last_member_upsert < 2e3) {
      color_class = "candy_red";
    } else if (time_since_last_member_upsert < 1e4) {
      color_class = "star_yellow";
    } else if (time_since_last_member_upsert < 2e4) {
      color_class = "ocean_teal";
    }
    var time_since_readable = "";
    if (time_since_last_member_upsert < 1e3) {
      time_since_readable = "<1s";
    } else if (time_since_last_member_upsert < 2e4) {
      time_since_readable = Math.floor(time_since_last_member_upsert / 1e3) + "s";
    }
    return {
      has_recent_member_upsert: !!color_class,
      color_class: color_class,
      rebuild_all_count: _rebuild_all_count,
      rebuild_all_but_messages_count: _rebuild_all_but_messages_count,
      rebuild_messages_count: _rebuild_messages_count,
      time_since_readable: time_since_readable,
      upsert_member_count: _member_upsert_count,
      total_member_count: _.get(TS, "model.members.length", 0),
      average_frame_rate: _average_frame_rate || "..."
    };
  };
  var _render = function() {
    clearTimeout(_pending_render_t);
    _pending_render_t = undefined;
    var args = _getTemplateArgs();
    var html = template(args);
    _$widget.html(html);
    if (args.has_recent_member_upsert) {
      _maybeRender();
    }
  };
  var _maybeRender = function() {
    if (!_$widget) return;
    if (!_is_visible) return;
    if (_pending_render_t) return;
    _pending_render_t = setTimeout(_render, UPDATE_INTERVAL_MS);
  };
})();
(function() {
  "use strict";
  TS.registerModule("cmd_handlers", {
    server_cmds: null,
    onStart: function() {
      var always_wait = true;
      _resetUpCmdsThrottled = TS.utility.throttleFunc(_resetUpCmdsThrottled, 3e3, always_wait);
      TS.prefs.team_allow_calls_changed_sig.add(_maybeUpdateCallsCommand);
      if (!_.get(window, "desktop.app.toggleDevTools")) {
        delete TS.cmd_handlers["/slackdevtools"];
      }
    },
    test: function() {
      return {
        _maybeInviteUserToModelOb: _maybeInviteUserToModelOb,
        _maybeInviteUserGroupToModelOb: _maybeInviteUserGroupToModelOb,
        _getUserIdentifier: _getUserIdentifier
      };
    },
    groupCmdsByType: function(cmds) {
      var groups = [_getCoreCmdsGroup(cmds), _getTeamCmdsGroup(cmds), _getAppCmdsGroups(cmds)];
      var groups_flattened = Array.prototype.concat.apply([], groups);
      var groups_with_cmds = groups_flattened.filter(function(group) {
        return group.cmds.length > 0;
      });
      return groups_with_cmds;
    },
    getAvailableUserCmds: function() {
      var cmds = {};
      var model_ob = TS.shared.getActiveModelOb();
      _.forOwn(TS.cmd_handlers, function(ob, name) {
        if (name.indexOf("/") !== 0) return;
        if (typeof ob.autocomplete === "function" && !ob.autocomplete() || ob.autocomplete === false || ob.alias_of) return;
        switch (name) {
          case "/archive":
          case "/unarchive":
            if (TS.channels.isChannelRequired(model_ob)) return;
            if (TS.model.active_group_id && TS.model.user.is_restricted) return;
            if (TS.model.active_channel_id && !TS.permissions.members.canArchiveChannels()) return;
            if (TS.model.active_im_id) return;
            if (TS.model.active_mpim_id) return;
            break;
          case "/kick":
          case "/remove":
            if (model_ob.is_archived) return;
            if (TS.model.active_group_id && !TS.permissions.members.canKickFromGroups()) return;
            if (TS.model.active_channel_id && !TS.permissions.members.canKickFromChannels()) return;
            if (TS.model.active_im_id) return;
            if (TS.model.active_mpim_id) return;
            break;
          case "/join":
            if (TS.model.user.is_restricted) return;
            break;
          case "/feed":
            if (TS.model.user.is_restricted) return;
            break;
          case "/invite":
            if (TS.model.user.is_ultra_restricted) return;
            break;
          case "/invite_people":
            if (!TS.ui.admin_invites.canInvite()) return;
            break;
          case "/topic":
          case "/purpose":
            if (TS.model.active_im_id) return;
            if (TS.model.active_mpim_id) return;
            if (TS.model.user.is_restricted) return;
            if (TS.channels.isChannelRequired(model_ob) && !TS.permissions.members.canPostInChannel(model_ob)) return;
            break;
          case "/leave":
            if (TS.model.active_group_id) return;
            break;
          default:
            break;
        }
        if (ob.type === "custom" || ob.type === "service") {
          if (TS.prefs.commands_only_regular && TS.model.user.is_restricted) return;
        }
        cmds[name] = ob;
      });
      return cmds;
    },
    parseArgs: function(txt) {
      var args = {
        cmd: "",
        rest: "",
        words: []
      };
      if (!_.isString(txt)) return args;
      var txt_trimmed = txt.trim();
      if (!txt_trimmed) return args;
      args.words = txt_trimmed.split(/\s+/);
      args.cmd = args.words[0].toLowerCase();
      args.disp = args.words[0];
      args.rest = txt_trimmed.substring(args.cmd.length).trim();
      return args;
    },
    setUpCmds: function() {
      if (!TS.boot_data.page_needs_custom_cmds) {
        _maybeUpdateCallsCommand();
        return Promise.resolve();
      }
      var ls_cmds = TS.storage.fetchCmds();
      if (ls_cmds && TS.model.commands_cache_ts == ls_cmds.cache_ts) {
        TS.model.did_we_load_with_cmd_cache = true;
        TS.cmd_handlers.mergeInServerCmds(ls_cmds.data);
        _maybeUpdateCallsCommand();
        return Promise.resolve();
      }
      var unused_deprecated_handler;
      var dont_set_active = true;
      return TS.api.call("commands.list", {}, unused_deprecated_handler, dont_set_active).then(function(resp) {
        if (!resp.data.commands) {
          return;
        }
        _setCommands(resp.data.commands, resp.data.cache_ts);
      }).catch(_.noop);
    },
    removeCommand: function(command_name, cache_ts) {
      delete TS.cmd_handlers.server_cmds[command_name];
      _setCommands(TS.cmd_handlers.server_cmds, cache_ts);
    },
    updateCommand: function(command_info, cache_ts) {
      TS.cmd_handlers.server_cmds[command_info.name] = command_info;
      _setCommands(TS.cmd_handlers.server_cmds, cache_ts);
    },
    resetUpCmds: function() {
      TS.storage.storeCmds("");
      _resetUpCmdsThrottled();
    },
    sortNames: function(names) {
      var sorted_names = names.sort(TS.i18n.sorter);

      function filterByTypes(names, types) {
        return names.filter(function(name) {
          return types.indexOf(TS.cmd_handlers[name].type) !== -1;
        });
      }
      var slack_commands = filterByTypes(sorted_names, ["client", "core"]);
      var team_commands = filterByTypes(sorted_names, ["custom"]);
      var app_commands = filterByTypes(sorted_names, ["app", "service"]);
      var app_commands_with_name = app_commands.filter(function(name) {
        var cmd = TS.cmd_handlers[name];
        return !!(cmd.app || cmd.service_name);
      });
      app_commands_with_name.sort(function(a, b) {
        var a_cmd = TS.cmd_handlers[a];
        var b_cmd = TS.cmd_handlers[b];
        var a_name = a_cmd.service_name || TS.model.apps[a_cmd.app].name;
        var b_name = b_cmd.service_name || TS.model.apps[b_cmd.app].name;
        return TS.i18n.sorter(a_name, b_name);
      });
      var app_commands_without_name = app_commands.filter(function(name) {
        var cmd = TS.cmd_handlers[name];
        return !(cmd.app || cmd.service_name);
      });
      app_commands_without_name.sort();
      var flattened = [].concat(slack_commands, team_commands, app_commands_with_name, app_commands_without_name);
      return flattened;
    },
    getAppNameForCmdName: function(cmd_name) {
      var cmd = TS.cmd_handlers[cmd_name];
      if (!cmd) return "";
      var app_name;
      if (cmd.app && TS.model.apps[cmd.app]) {
        app_name = TS.model.apps[cmd.app].name;
      } else if (cmd.service_name) {
        app_name = cmd.service_name;
      }
      return app_name;
    },
    mergeInServerCmds: function(cmds) {
      TS.cmd_handlers.server_cmds = cmds;
      var cmd_name;
      for (var k in TS.cmd_handlers) {
        if (k.indexOf("/") !== 0) continue;
        if (TS.cmd_handlers[k].type === "client") {
          delete TS.cmd_handlers[k].override;
        } else {
          TS.log(65, 'mergeInCmds is removing the server command "' + k + '" from cmd_handlers');
          delete TS.cmd_handlers[k];
        }
      }
      for (cmd_name in cmds) {
        if (cmd_name.indexOf("/") !== 0) continue;
        if (TS.cmd_handlers[cmd_name]) {
          if (TS.cmd_handlers[cmd_name].can_be_overridden_by_server_cmd) {
            TS.log(65, 'mergeInCmds is overriding client command "' + cmd_name + '" with a server command');
          } else {
            TS.cmd_handlers[cmd_name].override = true;
            TS.log(65, 'mergeInCmds is NOT overwriting a client command for "' + cmd_name + '"');
            continue;
          }
        }
        TS.cmd_handlers[cmd_name] = TS.cmd_handlers.makeInternalCmdObject(cmds[cmd_name]);
      }
      for (cmd_name in cmds) {
        if (cmd_name.indexOf("/") !== 0) continue;
        if (!TS.cmd_handlers[cmd_name].alias_of) continue;
        var aliased_to = TS.cmd_handlers[TS.cmd_handlers[cmd_name].alias_of];
        if (!aliased_to) {
          TS.log(65, 'mergeInCmds is NOT adding an alias of "' + cmd_name + '" to "' + TS.cmd_handlers[cmd_name].alias_of + '" because it was not found');
          continue;
        }
        if (aliased_to.type === "client") {
          TS.log(65, 'mergeInCmds is NOT adding an alias of "' + cmd_name + '" to "' + TS.cmd_handlers[cmd_name].alias_of + '" because it is not a server command');
          continue;
        }
        TS.log(65, 'mergeInCmds is adding on alias of "' + cmd_name + '" to "' + TS.cmd_handlers[cmd_name].alias_of + '"');
        if (!aliased_to.aliases) aliased_to.aliases = [];
        aliased_to.aliases.push(cmd_name);
      }
    },
    makeInternalCmdObject: function(cmd) {
      return {
        autocomplete: true,
        alias_of: cmd.alias_of ? cmd.alias_of : null,
        aliases: null,
        usage: cmd.usage || "",
        desc: cmd.desc || "",
        help_text: cmd.help_text || "",
        type: cmd.type || "",
        app: cmd.app || "",
        service_name: cmd.service_name || ""
      };
    },
    addTempEphemeralFeedback: function(text, input_txt, slackbot_feels, c_id, thread_ts) {
      if (input_txt) {
        if (TS.boot_data.feature_threads_slash_cmds && c_id && thread_ts) {
          TS.utility.populateThreadInputs(input_txt, c_id, thread_ts);
        } else if (TS.boot_data.feature_name_tagging_client_extras) {
          TS.utility.populateInput(TS.client.ui.$msg_input, input_txt);
        } else {
          TS.utility.contenteditable.value(TS.client.ui.$msg_input, input_txt);
        }
      }
      var ephemeral_msg = {
        text: text,
        ephemeral_type: "temp_slash_cmd_feedback"
      };
      if (slackbot_feels) {
        ephemeral_msg.slackbot_feels = slackbot_feels;
      }
      if (TS.boot_data.feature_threads_slash_cmds && c_id && thread_ts) {
        ephemeral_msg.channel = c_id;
        ephemeral_msg.thread_ts = thread_ts;
        ephemeral_msg.ephemeral_type = "threads_temp_slash_cmd_feedback";
      }
      TS.client.ui.addOrFlashEphemeralBotMsg(ephemeral_msg);
    },
    addEphemeralFeedback: function(text, input_txt, slackbot_feels, c_id, thread_ts) {
      if (input_txt) {
        if (TS.boot_data.feature_threads_slash_cmds && c_id && thread_ts) {
          TS.utility.populateThreadInputs(input_txt, c_id, thread_ts);
        } else if (TS.boot_data.feature_name_tagging_client_extras) {
          TS.utility.populateInput(TS.client.ui.$msg_input, input_txt);
        } else {
          TS.utility.contenteditable.value(TS.client.ui.$msg_input, input_txt);
        }
      }
      if (TS.boot_data.feature_threads_slash_cmds && c_id && thread_ts) {
        TS.utility.msgs.removeAllEphemeralMsgsByType("threads_temp_slash_cmd_feedback", c_id);
      } else {
        TS.utility.msgs.removeAllEphemeralMsgsByType("temp_slash_cmd_feedback", TS.model.active_cid);
      }
      var ephemeral_msg = {
        text: text
      };
      if (slackbot_feels) {
        ephemeral_msg.slackbot_feels = slackbot_feels;
      }
      if (TS.boot_data.feature_threads_slash_cmds && c_id && thread_ts) {
        ephemeral_msg.channel = c_id;
        ephemeral_msg.thread_ts = thread_ts;
      }
      TS.client.ui.addEphemeralBotMsg(ephemeral_msg);
    },
    runCommand: function(cmd, rest, words, in_reply_to_msg, model_ob) {
      if (!TS.cmd_handlers[cmd]) return;
      if (TS.boot_data.feature_threads_slash_cmds && in_reply_to_msg) {
        if (!TS.cmd_handlers.isCmdSupportedInThreads(cmd)) {
          TS.cmd_handlers.sendCmdNotSupportedInThreadsMsg(cmd, rest, in_reply_to_msg, model_ob);
          return;
        }
      }
      if (TS.model.last_active_cid) {
        TS.utility.msgs.removeAllEphemeralMsgsByType("temp_slash_cmd_feedback", TS.model.last_active_cid);
      }
      TS.cmd_handlers[cmd].func(cmd, rest, words, in_reply_to_msg, model_ob);
    },
    isCmdSupportedInThreads: function(cmd) {
      return cmd && _.includes(_SUPPORTED_THREAD_CMDS, cmd);
    },
    sendCmdNotSupportedInThreadsMsg: function(cmd, rest, in_reply_to_msg, model_ob) {
      var error_text;
      if (TS.cmd_handlers[cmd]) {
        error_text = TS.i18n.t("*{cmd}* is not supported in threads. Sorry!", "threads")({
          cmd: cmd
        });
      } else {
        error_text = TS.i18n.t("*{cmd}* is not a valid command.", "threads")({
          cmd: cmd
        });
      }
      var input_text = cmd + " " + rest;
      var slackbot_feels = "sad_surprise";
      TS.cmd_handlers.addTempEphemeralFeedback(error_text, input_text, slackbot_feels, model_ob.id, in_reply_to_msg.ts);
    },
    "/slackdevtools": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      func: function() {
        if (!_.get(window, "desktop.app.toggleDevTools")) return;
        var also_open_electron_dev_tools = false;
        desktop.app.toggleDevTools(also_open_electron_dev_tools);
      }
    },
    "/slackdebugwidget": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      func: function() {
        if (!TS.debug_widget) return;
        TS.debug_widget.toggle();
      }
    },
    "/away": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t('Toggle your "away" status', "cmd_handlers")(),
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        TS.members.toggleUserPresence().then(function(res) {
          var presence = res.args.presence || TS.model.user.presence;
          var feedback_text = ":white_check_mark: " + TS.i18n.t("You are now marked as *{presence}*.", "cmd_handlers")({
            presence: presence
          });
          if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
            TS.cmd_handlers.addEphemeralFeedback(feedback_text, null, null, model_ob.id, in_reply_to_msg.ts);
          } else {
            TS.cmd_handlers.addEphemeralFeedback(feedback_text);
          }
          return null;
        }).catch(_.noop);
        if (rest) TS.members.setUserStatus(rest);
      }
    },
    "/prefs": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Open the preferences dialog", "cmd_handlers")(),
      func: function() {
        TS.ui.prefs_dialog.start();
      }
    },
    "/shortcuts": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: ["/keys"],
      desc: TS.i18n.t("Open the keyboard shortcuts dialog", "cmd_handlers")(),
      func: function() {
        TS.ui.shortcuts_dialog.start();
      }
    },
    "/keys": {
      type: "client",
      autocomplete: true,
      alias_of: "/shortcuts",
      aliases: null,
      desc: "",
      func: function() {
        TS.cmd_handlers["/shortcuts"].func();
      }
    },
    "/open": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: ["/join"],
      desc: TS.i18n.t("Open a channel", "cmd_handlers")(),
      args: [{
        name: TS.i18n.t("channel", "cmd_handlers")(),
        optional: true
      }],
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        if (words.length == 1) {
          TS.ui.channel_browser.start();
        } else {
          var channel_name = TS.utility.cleanChannelName(rest);
          var channel = TS.channels.getChannelByName(channel_name);
          var group = TS.groups.getGroupByName(channel_name);
          if (channel) {
            if (channel.is_member) {
              TS.channels.displayChannel({
                id: channel.id
              });
            } else if (!TS.model.user.is_restricted) {
              TS.channels.join(channel.name);
            }
          } else if (group) {
            if (!group.is_archived || group.was_archived_this_session) {
              TS.groups.displayGroup({
                id: group.id
              });
            }
          } else if (TS.permissions.members.canCreateChannels()) {
            TS.ui.new_channel_modal.start(channel_name);
          } else {
            var feedback_text = TS.i18n.t('I couldn’t find a channel named "{channel_name}", sorry!', "cmd_handlers")({
              channel_name: channel_name
            });
            if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
              TS.cmd_handlers.addEphemeralFeedback(feedback_text, "", "sad_surprise", model_ob.id, in_reply_to_msg.ts);
            } else {
              TS.cmd_handlers.addEphemeralFeedback(feedback_text, "", "sad_surprise");
            }
          }
        }
      }
    },
    "/join": {
      type: "client",
      autocomplete: true,
      alias_of: "/open",
      aliases: null,
      desc: "",
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        TS.cmd_handlers["/open"].func(cmd, rest, words, in_reply_to_msg, model_ob);
      }
    },
    "/msg": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: ["/dm"],
      desc: TS.i18n.t("Send a DM message to another user", "cmd_handlers")(),
      args: [{
        name: "@user",
        optional: false
      }, {
        name: TS.i18n.t("your message", "cmd_handlers")(),
        optional: true
      }],
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        var name = words.length > 1 ? words[1] : "";
        var c_or_g;
        var feedback_text;
        var input_text = cmd + " " + rest;
        var m;
        if (TS.boot_data.feature_name_tagging_client_extras) {
          m = TS.members.getMemberById(name);
        } else {
          m = TS.members.getMemberByName(name);
        }
        if (!m) {
          if (name) {
            var c_name = name.replace("#", "");
            c_or_g = TS.channels.getChannelByName(c_name);
            if (!c_or_g) c_or_g = TS.groups.getGroupByName(c_name);
            if (!c_or_g) {
              feedback_text = TS.i18n.t("A valid team member name is required.", "cmd_handlers")();
              if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
                TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, "sad_surprise", model_ob.id, in_reply_to_msg.ts);
              } else {
                TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, "sad_surprise");
              }
              return;
            }
          } else {
            $("#direct_messages_header").trigger("click.open_dialog").scrollintoview({
              duration: 500
            });
          }
        }
        var text_to_send = rest.replace(name, "");
        if (m) {
          if (m.deleted) {
            feedback_text = TS.i18n.t("That user has been deactivated", "cmd_handlers")() + " :disappointed:";
            if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
              TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, "sad_surprise", model_ob.id, in_reply_to_msg.ts);
            } else {
              TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, "sad_surprise");
            }
            return;
          }
          TS.ims.startImByMemberId(m.id, false, text_to_send);
        } else if (c_or_g) {
          if (c_or_g.is_archived) {
            feedback_text = TS.i18n.t("That {channel} has been archived", "cmd_handlers")({
              channel: c_or_g.is_channel ? TS.i18n.t("channel", "cmd_handlers")() : TS.i18n.t("private channel", "cmd_handlers")()
            });
            if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
              TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, "sad_surprise", model_ob.id, in_reply_to_msg.ts);
            } else {
              TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, "sad_surprise");
            }
            return;
          }
          if (c_or_g.is_channel) {
            TS.channels.displayChannel({
              id: c_or_g.id,
              and_send_txt: text_to_send
            });
          } else {
            TS.groups.displayGroup({
              id: c_or_g.id,
              and_send_txt: text_to_send
            });
          }
        }
      }
    },
    "/invite": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Invite another member to a channel", "cmd_handlers")(),
      args: [{
        name: "@user",
        optional: false
      }, {
        name: TS.i18n.t("channel", "cmd_handlers")(),
        optional: true
      }],
      func: function(cmd, rest, words) {
        var name = words.length > 1 ? words[1] : "";
        var ug;
        var m;
        if (TS.boot_data.feature_name_tagging_client_extras) {
          m = TS.members.getMemberById(name);
        } else {
          m = TS.members.getMemberByName(name);
        }
        if (name) {
          ug = TS.user_groups.getUserGroupsByHandle(name);
        }
        if (!m && !ug && name) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("A valid team member name is required.", "cmd_handlers")(), cmd + " " + rest, "sad_surprise");
          return;
        }
        if (m && m.deleted) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("That user has been deactivated.", "cmd_handlers")(), cmd + " " + rest, "sad_surprise");
          return;
        }
        if (m && m.is_ultra_restricted) {
          if (TS.model.user.is_admin) {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("{user} is a Single-Channel Guest, and can’t be added to a second channel. To invite {user} to this channel, you’ll need to <{team_url}admin#restricted|upgrade their membership> to a Multi-Channel Guest. ​Note: This will add a billable seat to your team.", "cmd_handlers")({
              user: TS.utility.htmlEntities(name),
              team_url: TS.boot_data.team_url
            }), cmd + " " + rest, "sad_surprise");
          } else {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("{user} is a Single-Channel Guest, and can’t be added to a second channel. Your Team Admin can upgrade their membership to a Multi-Channel Guest.", "cmd_handlers")({
              user: TS.utility.htmlEntities(name)
            }), cmd + " " + rest, "sad_surprise");
          }
          return;
        }
        if (m && m.is_app_user) {
          var invite_chan = _getActiveChannel();
          _maybeInviteAppUserToChannel(m, invite_chan, cmd + " " + rest);
          return;
        }
        var channel_name = words.length > 2 ? words[2] : "";
        if (channel_name) {
          if (!m && !ug) {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("A valid channel name is required.", "cmd_handlers")(), cmd + " " + rest, "sad_surprise");
            return;
          }
          var c = TS.channels.getChannelByName(channel_name);
          var g = TS.groups.getGroupByName(channel_name);
          if (c) {
            if (m) {
              _maybeInviteUserToModelOb(m, c, cmd + " " + rest);
            } else if (ug) {
              _maybeInviteUserGroupToModelOb(ug, c, cmd + " " + rest);
            }
          } else if (g) {
            if (m) {
              _maybeInviteUserToModelOb(m, g, cmd + " " + rest);
            } else if (ug) {
              _maybeInviteUserGroupToModelOb(ug, g, cmd + " " + rest);
            }
          } else {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("A valid channel name is required.", "cmd_handlers")(), cmd + " " + rest, "sad_surprise");
          }
        } else if (TS.model.active_channel_id) {
          var channel = TS.channels.getChannelById(TS.model.active_channel_id);
          if (m) {
            _maybeInviteUserToModelOb(m, channel, cmd + " " + rest);
          } else if (ug) {
            _maybeInviteUserGroupToModelOb(ug, channel, cmd + " " + rest);
          } else {
            TS.ui.channel_invite_modal.startInviteToChannelModal(TS.model.active_channel_id);
          }
        } else if (TS.model.active_group_id) {
          var group = TS.groups.getGroupById(TS.model.active_group_id);
          if (m) {
            _maybeInviteUserToModelOb(m, group, cmd + " " + rest);
          } else if (ug) {
            _maybeInviteUserGroupToModelOb(ug, group, cmd + " " + rest);
          } else {
            TS.ui.channel_invite_modal.startInviteToChannelModal(TS.model.active_group_id);
          }
        } else if (TS.model.active_mpim_id) {
          var mpim = TS.mpims.getMpimById(TS.model.active_mpim_id);
          if (m && mpim) {
            _maybeInviteUserToModelOb(m, mpim, cmd + " " + rest);
          } else {
            TS.ui.im_browser.startWithMpim(mpim);
          }
        } else {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("A valid channel name is required.", "cmd_handlers")(), cmd + " " + rest, "sad_surprise");
        }
      }
    },
    "/invite_people": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Invite people to your Slack team", "cmd_handlers")(),
      args: [{
        name: "name@example.com, ...",
        optional: true
      }],
      func: function(cmd, rest) {
        if (TS.ui.admin_invites.canInvite()) {
          rest = rest && rest.trim();
          if (rest) {
            TS.ui.admin_invites.populateInvites(rest.split(/\s*,\s*|\s+/).map(function(word) {
              return {
                email: word
              };
            }));
          }
          TS.ui.admin_invites.start();
        } else {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("You don’t have permission to invite people.", "cmd_handlers")(), "", "sad_surprise");
        }
      }
    },
    "/dm": {
      type: "client",
      autocomplete: true,
      alias_of: "/msg",
      aliases: null,
      desc: "",
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        TS.cmd_handlers["/msg"].func(cmd, rest, words, in_reply_to_msg, model_ob);
      }
    },
    "/archive": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Archive the current channel", "cmd_handlers")(),
      func: function() {
        var model_ob = TS.shared.getActiveModelOb();
        if (model_ob.is_archived || TS.channels.isChannelRequired(model_ob)) return;
        if (TS.model.active_channel_id) {
          if (!TS.permissions.members.canArchiveChannels()) return;
          var channel = TS.channels.getChannelById(TS.model.active_channel_id);
          TS.channels.ui.showArchiveChannelDialog(channel);
        } else if (TS.model.active_group_id) {
          if (TS.model.user.is_restricted) return;
          var group = TS.groups.getGroupById(TS.model.active_group_id);
          TS.channels.ui.showArchiveGroupDialog(group);
        }
      }
    },
    "/leave": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: ["/close", "/part"],
      desc: TS.i18n.t("Leave a channel", "cmd_handlers")(),
      func: function(cmd, rest, words) {
        if (words.length == 1) {
          var model_ob = TS.shared.getActiveModelOb();
          if (TS.model.active_channel_id) {
            if (model_ob.is_archived) {
              TS.channels.closeArchivedChannel(TS.model.active_channel_id);
            } else {
              TS.channels.leave(TS.model.active_channel_id);
            }
          } else if (TS.model.active_im_id) {
            TS.ims.closeIm(TS.model.active_im_id);
          } else if (TS.model.active_mpim_id) {
            TS.mpims.closeMpim(TS.model.active_mpim_id);
          } else if (TS.model.active_group_id) {
            if (model_ob.is_archived) {
              TS.shared.closeArchivedChannel(model_ob.id);
            } else {
              TS.groups.leave(model_ob.id);
            }
          } else {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("A valid channel or team member name is required.", "cmd_handlers")(), "", "sad_surprise");
          }
        } else {
          var channel = TS.channels.getChannelByName(rest);
          if (channel) {
            TS.channels.leave(channel.id);
          } else {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("A valid channel name is required.", "cmd_handlers")(), "", "sad_surprise");
          }
        }
      }
    },
    "/star": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      desc: TS.i18n.t("Stars the current channel or conversation", "cmd_handlers")(),
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
          TS.stars.toggleStarOnMsg(in_reply_to_msg.ts, model_ob, function() {
            var feedback = in_reply_to_msg.is_starred ? TS.i18n.t("Ok, I starred this thread", "cmd_handlers")() : TS.i18n.t("Ok, I unstarred this thread", "cmd_handlers")();
            TS.cmd_handlers.addTempEphemeralFeedback(feedback, null, null, model_ob.id, in_reply_to_msg.ts);
          });
        } else {
          TS.stars.toggleStarOnActiveModelObject(function(model_ob) {
            if (model_ob.is_starred) {
              TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Ok, I starred {channel}", "cmd_handlers")({
                channel: model_ob.name
              }));
            } else {
              TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Ok, {channel} is unstarred", "cmd_handlers")({
                channel: model_ob.name
              }));
            }
          });
        }
      }
    },
    "/close": {
      type: "client",
      autocomplete: true,
      alias_of: "/leave",
      aliases: null,
      desc: "",
      func: function(cmd, rest, words) {
        TS.cmd_handlers["/leave"].func(cmd, rest, words);
      }
    },
    "/part": {
      type: "client",
      autocomplete: true,
      alias_of: "/leave",
      aliases: null,
      desc: "",
      func: function(cmd, rest, words) {
        TS.cmd_handlers["/leave"].func(cmd, rest, words);
      }
    },
    "/topic": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Set the channel topic", "cmd_handlers")(),
      args: [{
        name: TS.i18n.t("new topic", "cmd_handlers")(),
        optional: true
      }],
      func: function(cmd, rest) {
        var model_ob = TS.shared.getActiveModelOb();
        if (TS.model.user.is_restricted || TS.channels.isChannelRequired(model_ob) && !TS.permissions.members.canPostInChannel(model_ob)) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Setting the topic is a restricted action.", "cmd_handlers")(), cmd + " " + rest, "sad_surprise");
          return;
        }
        if (rest.length > TS.model.channel_topic_max_length) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Topics cannot exceed {max_characters} characters.", "cmd_handlers")({
            max_characters: TS.model.channel_topic_max_length
          }), cmd + " " + rest, "sad_surprise");
          return;
        }
        if (TS.model.active_channel_id) {
          if (rest) {
            TS.channels.setTopic(TS.model.active_channel_id, rest);
          } else {
            $("#channel_topic_text").click().focus().select();
          }
        } else if (TS.model.active_group_id) {
          if (rest) {
            TS.groups.setTopic(TS.model.active_group_id, rest);
          } else {
            $("#channel_topic_text").click().focus().select();
          }
        } else {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Regrettably, DMs do not have topics", "cmd_handlers")(), "", "sad_surprise");
        }
      }
    },
    "/togglethemes": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.prefs.setPrefByAPI({
          name: "messages_theme",
          value: TS.model.prefs.messages_theme === "light_with_avatars" ? "dense" : "light_with_avatars"
        });
      }
    },
    "/search": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: ["/s"],
      desc: TS.i18n.t("Perform a search", "cmd_handlers")(),
      args: [{
        name: TS.i18n.t("your text", "cmd_handlers")(),
        optional: true
      }],
      func: function(cmd, rest) {
        TS.client.ui.flex.openFlexTab("search");
        TS.view.resizeManually("TS.search.view.showResults");
        TS.search.autocomplete.search(rest, true);
        TS.clog.track("SEARCH_OPEN", {
          open_method: "command"
        });
      }
    },
    "/s": {
      type: "client",
      autocomplete: true,
      alias_of: "/search",
      aliases: null,
      desc: "",
      func: function(cmd, rest) {
        TS.cmd_handlers["/search"].func(cmd, rest);
      }
    },
    "/rename": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Rename a channel", "cmd_handlers")(),
      args: [{
        name: TS.i18n.t("new name", "cmd_handlers")(),
        optional: true
      }],
      func: function(cmd, rest) {
        if (TS.model.user.is_restricted) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("You don’t have permission to rename.", "cmd_handlers")(), "", "sad_surprise");
          return;
        }
        if (!TS.model.active_channel_id && !TS.model.active_group_id) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("IM channels cannot be renamed.", "cmd_handlers")(), "", "sad_surprise");
          return;
        }
        var model_ob = TS.shared.getActiveModelOb();
        if (TS.model.active_channel_id || TS.model.active_group_id) {
          if (!TS.model.user.is_admin && model_ob.creator != TS.model.user.id) {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Only Team Admins (or the channel creator) are allowed to rename channels.", "cmd_handlers")(), "", "sad_surprise");
            return;
          }
        }
        var next_name = TS.utility.htmlEntities(rest) || model_ob.name;
        TS.ui.channel_options_dialog.start(model_ob.id, "rename", {
          name: next_name
        });
      }
    },
    "/beep": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.sounds.play("new_message");
      }
    },
    "/upload": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function(cmd, rest) {
        var blob = TS.utility.base64StrtoBlob(rest);
        TS.client.ui.file_pasted_sig.dispatch(blob);
      }
    },
    "/colors": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: ["/colours"],
      desc: TS.i18n.t("View any custom colors you have set for other members", "cmd_handlers")(),
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        var members = TS.members.getMembersForUser();
        var member;
        var str = "";
        for (var i = 0; i < members.length; i += 1) {
          member = members[i];
          if (member.member_color != member.color) {
            str += member.name + ": " + member.member_color + "\n";
          }
        }
        var feedback_text = str ? TS.i18n.t("You have overridden colors as follows:", "cmd_handlers")() + "\n" + str : TS.i18n.t("No user color overrides have been set.", "cmd_handlers")();
        if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
          TS.cmd_handlers.addEphemeralFeedback(feedback_text, null, null, model_ob.id, in_reply_to_msg.ts);
        } else {
          TS.cmd_handlers.addEphemeralFeedback(feedback_text);
        }
      }
    },
    "/colours": {
      type: "client",
      autocomplete: true,
      alias_of: "/colors",
      aliases: null,
      desc: "",
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        TS.cmd_handlers["/colors"].func(cmd, rest, words, in_reply_to_msg, model_ob);
      }
    },
    "/color": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: ["/colour"],
      desc: TS.i18n.t("Set a custom color for another member", "cmd_handlers")(),
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        var name = words.length > 1 ? words[1] : "";
        var color = words.length > 2 ? words[2].replace(/#/g, "") : "";
        var feedback_text;
        var input_text = cmd + " " + rest;
        var m;
        if (TS.boot_data.feature_name_tagging_client_extras) {
          m = TS.members.getMemberById(name);
        } else {
          m = TS.members.getMemberByName(name);
        }
        if (!m) {
          feedback_text = TS.i18n.t("A valid team member name is required.", "cmd_handlers")();
          if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
            TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, "sad_surprise", model_ob.id, in_reply_to_msg.ts);
          } else {
            TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, "sad_surprise");
          }
          return;
        }
        var member_identifier;
        if (m) {
          if (TS.boot_data.feature_name_tagging_client_extras) {
            member_identifier = "@" + m.id;
          } else {
            member_identifier = "@" + m.name;
          }
        }
        if (color && (color.length != 6 || !("#" + color).match(TS.format.hex_rx))) {
          feedback_text = TS.i18n.t("A valid 6 character hex code is required, like `FF0000`.", "cmd_handlers")();
          if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
            TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, null, model_ob.id, in_reply_to_msg.ts);
          } else {
            TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text);
          }
          return;
        }
        TS.members.setMemberUserColor(m, color);
        TS.model.prefs.user_colors = JSON.stringify(TS.model.user_colors);
        TS.prefs.setPrefByAPI({
          name: "user_colors",
          value: TS.model.prefs.user_colors
        });
        if (color) {
          feedback_text = TS.i18n.t("You’ve set your custom color for {user} to {color}", "cmd_handlers")({
            user: member_identifier,
            color: "#" + color
          });
        } else {
          feedback_text = TS.i18n.t("You’ve removed your custom color for {user}.", "cmd_handlers")({
            user: member_identifier
          });
        }
        if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
          TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, null, model_ob.id, in_reply_to_msg.ts);
        } else {
          TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text);
        }
      }
    },
    "/colour": {
      type: "client",
      autocomplete: true,
      alias_of: "/color",
      aliases: null,
      desc: "",
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        TS.cmd_handlers["/color"].func(cmd, rest, words, in_reply_to_msg, model_ob);
      }
    },
    "/colortest": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function(cmd, rest) {
        var colors = null;
        if (rest) {
          try {
            colors = JSON.parse(rest);
          } catch (ex) {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Not a good value for colors: ", "cmd_handlers")() + rest, "", "sad_surprise");
            return;
          }
        }
        if (!colors || !colors.length) {
          colors = ["#DDCFFA", "#2EF645", "#F38303", "#E702AE", "#3C986D", "#9D6158", "#F43368", "#97C10A", "#7491F9", "#9E63A3", "#FACE41", "#35A5CC", "#39A93E", "#4FECA8", "#CA5B34", "#E2A974", "#2BCFCB", "#F89BA7", "#89868A", "#6A7841", "#ADC498", "#B1DBDD", "#B849C3", "#9CDB81", "#E72F36", "#A16A28", "#F68CCF", "#317C84", "#58851C", "#FC4A97", "#5774BB", "#97B7FE", "#C64D97", "#CB4A5C", "#F68B6B", "#81EE4F", "#B7ED6D", "#756D8E", "#3AED69", "#81E7FB", "#91ECB7", "#ED8947", "#57AF19", "#28BC89", "#4A9788", "#D645DF", "#B498FE", "#71C8F9", "#C07B1D", "#16BD60", "#EFCAE3", "#A4E0BB", "#478AAF", "#59953E", "#886CA7", "#F0C3F1", "#29AF70", "#80A5F8", "#636BB8"];
        }
        var i;
        for (i = 0; i < colors.length; i += 1) {
          colors[i] = colors[i].replace("#", "");
        }
        var members = TS.members.getMembersForUser();
        for (i = 0; i < members.length; i += 1) {
          TS.members.setMemberUserColor(members[i], colors[_.random(0, colors.length - 1)]);
        }
      }
    },
    "/discon": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.ms.disconnect();
      }
    },
    "/sleepsleep": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.ms.sleep();
      }
    },
    "/sleepsleep2": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.ms.sleep();
        TS.ms.setReconnectUrl("");
      }
    },
    "/wakewake": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.ms.wake();
      }
    },
    "/discon2": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.model.break_token = true;
        TS.ms.disconnect();
      }
    },
    "/discon3": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.model.break_reconnections = true;
        TS.ms.disconnect();
      }
    },
    "/discon4": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.ms.setReconnectUrl("");
        TS.ms.disconnect();
      }
    },
    "/emo": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: ["/emote", "/emoji"],
      desc: "",
      func: function() {
        var e = {
          target: TS.client.ui.$msg_input
        };
        TS.ui.react_emoji_menu.start({
          e: e
        });
      }
    },
    "/emoji": {
      type: "client",
      autocomplete: false,
      alias_of: "/emo",
      aliases: null,
      desc: "",
      func: function() {
        TS.cmd_handlers["/emo"].func();
      }
    },
    "/emote": {
      type: "client",
      autocomplete: false,
      alias_of: "/emo",
      aliases: null,
      desc: "",
      func: function() {
        TS.cmd_handlers["/emo"].func();
      }
    },
    "/editlast": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Edit the last message you posted", "cmd_handlers")(),
      func: function(cmd, rest, words, in_reply_to_msg, model_ob_arg) {
        var model_ob = model_ob_arg || TS.shared.getActiveModelOb();
        var feedback_text;
        var input_text = cmd + " " + rest;
        if (!model_ob) {
          return;
        }
        rest = $.trim(rest);
        if (!rest) {
          feedback_text = TS.i18n.t("You must enter some text!", "cmd_handlers")();
          if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
            TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, null, model_ob.id, in_reply_to_msg.ts);
          } else {
            TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text);
          }
          return;
        }
        var msg;
        if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
          msg = TS.utility.msgs.getEditableReplyByProp("user", TS.model.user.id, model_ob, in_reply_to_msg.ts);
        } else {
          var msgs = _.reject(model_ob.msgs, TS.utility.msgs.isMsgReply);
          msg = TS.utility.msgs.getEditableMsgByProp("user", TS.model.user.id, msgs);
        }
        if (!msg) {
          feedback_text = TS.i18n.t("Found no recent messages from you to edit.", "cmd_handlers")();
          if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
            TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, "sad_surprise", model_ob.id, in_reply_to_msg.ts);
          } else {
            TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, input_text, "sad_surprise");
          }
          return;
        }
        TS.msg_edit.commitEdit(msg, model_ob, rest);
      }
    },
    "/deletelast": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Delete the last message you posted", "cmd_handlers")(),
      func: function(cmd, rest, words, in_reply_to_msg, model_ob_arg) {
        var model_ob = model_ob_arg || TS.shared.getActiveModelOb();
        if (!model_ob) {
          return;
        }
        var msg;
        if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
          msg = TS.utility.msgs.getEditableReplyByProp("user", TS.model.user.id, model_ob, in_reply_to_msg.ts);
        } else {
          var msgs = _.reject(model_ob.msgs, TS.utility.msgs.isMsgReply);
          msg = TS.utility.msgs.getEditableMsgByProp("user", TS.model.user.id, msgs);
        }
        if (!msg) {
          var feedback_text = TS.i18n.t("Found no recent messages from you to delete.", "cmd_handlers")();
          if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
            TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, "", "sad_surprise", model_ob.id, in_reply_to_msg.ts);
          } else {
            TS.cmd_handlers.addTempEphemeralFeedback(feedback_text, "", "sad_surprise");
          }
          return;
        }
        TS.msg_edit.startDelete(msg.ts, model_ob);
      }
    },
    "/collapse": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Collapse all files in the current channel (opposite of {slash_expand})", "cmd_handlers")({
        slash_expand: "/expand"
      }),
      func: function() {
        TS.inline_imgs.collapseAllInCurrent();
        TS.inline_videos.collapseAllInCurrent();
        TS.inline_attachments.collapseAllInCurrent();
        TS.inline_audios.collapseAllInCurrent();
        TS.inline_others.collapseAllInCurrent();
        TS.inline_file_previews.collapseAllInCurrent();
        TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("I’ve collapsed all files in this channel for you.", "cmd_handlers")());
      }
    },
    "/expand": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Expand all files in the current channel (opposite of {collapse_command})", "cmd_handlers")({
        collapse_command: "/collapse"
      }),
      func: function() {
        TS.inline_imgs.expandAllInCurrent();
        TS.inline_videos.expandAllInCurrent();
        TS.inline_attachments.expandAllInCurrent();
        TS.inline_audios.expandAllInCurrent();
        TS.inline_others.expandAllInCurrent();
        TS.inline_file_previews.expandAllInCurrent();
        TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("I’ve expanded all files in this channel for you.", "cmd_handlers")());
      }
    },
    "/attach_align": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        $("body").toggleClass("attachments_flush_with_avatar");
      }
    },
    "/attach_thumb_align": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        window.attach_thumb_align_title = !window.attach_thumb_align_title;
        TS.client.msg_pane.rebuildMsgs();
      }
    },
    "/remove": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: ["/kick"],
      desc: TS.i18n.t("Remove a person from the current channel", "cmd_handlers")(),
      args: [{
        name: "@user",
        optional: false
      }],
      func: function(cmd, rest) {
        if (TS.model.active_channel_id && !TS.permissions.members.canKickFromChannels()) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Removing from channels is a restricted action.", "cmd_handlers")(), "", "sad_surprise");
          return;
        }
        if (TS.model.active_group_id && !TS.permissions.members.canKickFromGroups()) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Removing from private channels is a restricted action.", "cmd_handlers")(), "", "sad_surprise");
          return;
        }
        if (TS.model.active_im_id || TS.model.active_mpim_id) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("You can’t remove someone from a DM.", "cmd_handlers")(), "", "sad_surprise");
          return;
        }
        var model_ob = TS.shared.getActiveModelOb();
        if (model_ob.is_archived) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("You can’t remove anyone from *{channel}* while it is archived.", "cmd_handlers")({
            channel: (TS.model.active_channel_id ? "#" : "") + model_ob.name
          }), "", "sad_surprise");
          return;
        }
        rest = $.trim(rest);
        if (!rest) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Please specify someone to remove!", "cmd_handlers")(), cmd + " " + rest);
          return;
        }
        var member;
        if (TS.boot_data.feature_name_tagging_client_extras) {
          member = TS.members.getMemberById(rest);
        } else {
          member = TS.members.getMemberByName(rest);
        }
        if (!member) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("*{input}* is not a recognized member name.", "cmd_handlers")({
            input: TS.utility.htmlEntities(rest)
          }), cmd + " " + rest, "", "sad_surprise");
          return;
        }
        if (member.is_app_user) {
          var channel = _getActiveChannel();
          TS.api.call("apps.permissions.remove", {
            channel: channel.id,
            app_user: member.id
          }).then(function() {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("{user} has been removed from the channel.", "cmd_handlers")({
              user: _getUserIdentifier(member)
            }));
          }).catch(function() {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Hmm, something went wrong, try again?", "cmd_handlers")({
              user: _getUserIdentifier(member)
            }), cmd + " " + rest);
          });
          return;
        }
        if (TS.channels.isChannelRequired(model_ob) && !member.is_restricted && !member.is_bot) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("You can’t remove this member from *{channel}*!", "cmd_handlers")({
            channel: (TS.model.active_channel_id ? "#" : "") + model_ob.name
          }));
          return;
        }
        TS.membership.ensureChannelMembershipIsKnownForUsers(model_ob.id, [member.id]).then(function() {
          var membership_status = TS.membership.getUserChannelMembershipStatus(member.id, model_ob);
          if (!membership_status.is_member) {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("*{user}* is not a member of this {channel}.", "cmd_handlers")({
              user: TS.utility.htmlEntities(rest),
              channel: model_ob.is_channel ? TS.i18n.t("channel", "cmd_handlers")() : TS.i18n.t("private channel", "cmd_handlers")()
            }), cmd + " " + rest, "sad_surprise");
            return null;
          }
          if (member.is_self) {
            TS.client.ui.onSubmit("/leave");
            return null;
          }
          if (model_ob.is_channel) {
            TS.channels.kickMember(model_ob.id, member.id);
          } else if (model_ob.is_group) {
            TS.groups.kickMember(model_ob.id, member.id);
          }
          return null;
        });
      }
    },
    "/kick": {
      type: "client",
      autocomplete: true,
      alias_of: "/remove",
      aliases: null,
      desc: "",
      func: function(cmd, rest) {
        TS.cmd_handlers["/remove"].func(cmd, rest);
      }
    },
    "/feedback": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Send feedback to Slack", "cmd_handlers")(),
      args: [{
        name: TS.i18n.t("your message", "cmd_handlers")(),
        optional: true
      }],
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        if (!rest) {
          TS.utility.openInNewTab("/help/requests/new", "_blank");
          return;
        }
        TS.generic_dialog.start({
          title: TS.i18n.t("Send feedback", "cmd_handlers")(),
          body: '<p class="bold">' + TS.i18n.t("Looks like you are trying to send us some feedback! Yes?", "cmd_handlers")() + "</p>",
          show_cancel_button: true,
          show_go_button: true,
          go_button_text: TS.i18n.t("Yes, send it", "cmd_handlers")(),
          onGo: function() {
            var api_args = {
              command: cmd,
              text: TS.format.cleanCommandText(rest),
              channel: TS.model.active_cid
            };
            if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
              api_args.channel = model_ob.id;
              api_args.thread_ts = in_reply_to_msg.ts;
            }
            TS.api.call("chat.command", api_args, function(ok, data, api_args) {
              TS.client.ui.onAPICommand(ok, data, api_args, rest);
            });
          },
          onCancel: function() {
            var input_txt = cmd + " " + rest;
            if (TS.boot_data.feature_threads_slash_cmds && model_ob && in_reply_to_msg) {
              TS.utility.populateThreadInputs(input_txt, model_ob.id, in_reply_to_msg.ts);
            } else {
              TS.utility.populateInput(TS.client.ui.$msg_input, input_txt);
            }
          }
        });
      }
    },
    "/shrug": {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Appends ¯\\_(ツ)_/¯ to your message", "cmd_handlers")(),
      args: [{
        name: TS.i18n.t("your message", "cmd_handlers")(),
        optional: true
      }],
      func: function(cmd, rest, words, in_reply_to_msg, model_ob) {
        var txt = rest || "";
        if (txt && txt.substr(txt.length - 1) !== " ") {
          txt += " ";
        }
        txt += "¯\\_(ツ)_/¯ ";
        if (!model_ob) model_ob = TS.shared.getActiveModelOb();
        if (model_ob.is_channel) {
          TS.channels.sendMsg(model_ob.id, txt, in_reply_to_msg);
        } else if (model_ob.is_im) {
          TS.ims.sendMsg(model_ob.id, txt, in_reply_to_msg);
        } else if (model_ob.is_group && !model_ob.is_mpim) {
          TS.groups.sendMsg(model_ob.id, txt, in_reply_to_msg);
        } else if (model_ob.is_mpim) {
          TS.mpims.sendMsg(model_ob.id, txt, in_reply_to_msg);
        }
      }
    },
    "/showfallbacks": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.model.show_attachment_fallback = !TS.model.show_attachment_fallback;
        TS.client.msg_pane.rebuildMsgs();
      }
    },
    "/macgap.app.enabledevelopertools()": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        if (window.macgap && window.macgap.app && window.macgap.app.enableDeveloperTools) {
          macgap.app.enableDeveloperTools();
        }
      }
    },
    "/toggle_debugging_prefs": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        TS.ui.prefs_dialog.start("advanced", "#prefs_debug");
      }
    },
    "/slack_diagnostic_report": {
      type: "client",
      autocomplete: false,
      alias_of: null,
      aliases: null,
      desc: "",
      func: function() {
        _generateAndDisplayDiagnosticReport();
      }
    }
  });
  var _SUPPORTED_THREAD_CMDS = ["/shrug", "/prefs", "/shortcuts", "/keys", "/toggle_debugging_prefs", "/away", "/search", "/togglethemes", "/feedback", "/slack_diagnostic_report", "/msg", "/dm", "/s", "/editlast", "/deletelast", "/star", "/beep", "/colors", "/colours", "/color", "/colour", "/active"];
  var _setCommands = function(commands, cache_ts) {
    TS.model.commands_cache_ts = cache_ts;
    TS.storage.storeCmds({
      data: commands,
      cache_ts: TS.model.commands_cache_ts
    });
    TS.cmd_handlers.mergeInServerCmds(commands);
    _maybeUpdateCallsCommand();
  };
  var _resetUpCmdsThrottled = function() {
    TS.cmd_handlers.setUpCmds();
  };
  var _maybeUpdateCallsCommand = function() {
    if (TS.cmd_handlers["/call"] && TS.cmd_handlers["/call"].type !== "client") {
      _.unset(TS.cmd_handlers, "/call");
      return;
    }
    if (!TS.utility.calls.isEnabled()) {
      _.unset(TS.cmd_handlers, "/call");
      return;
    }
    TS.cmd_handlers["/call"] = {
      type: "client",
      autocomplete: true,
      alias_of: null,
      aliases: null,
      desc: TS.i18n.t("Start a call", "cmd_handlers")(),
      args: [{
        name: TS.i18n.t("help", "cmd_handlers")(),
        optional: true
      }],
      can_be_overridden_by_server_cmd: true,
      func: function(cmd, rest) {
        var model_ob = TS.shared.getActiveModelOb();
        var member = TS.members.getMemberById(model_ob.user);
        if (TS.boot_data.page_needs_enterprise) {
          var team = TS.model.team;
          if (TS.shared.isModelObShared(model_ob) || member && team && member.team_id !== team.id) {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("You are not allowed to use this command here.", "cmd_handlers")(), "", "sad_surprise");
            return;
          }
        }
        if (rest.trim() === "help") {
          if (TS.utility.calls.isCurrentContextMultiParty() && !TS.utility.calls.isMultiPartyEnabled()) {
            TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("To call a teammate, use `/call` from your Direct Message conversation with that person.", "cmd_handlers")());
            return;
          }
          var help_message;
          if (model_ob.is_mpim) {
            help_message = TS.i18n.t("To call {group_name}, use `/call` in this group conversation.", "cmd_handlers")({
              group_name: TS.shared.getDisplayNameForModelOb(model_ob)
            });
          } else if (model_ob.is_im) {
            help_message = TS.i18n.t("To call {user}, use `/call` in this Direct Message conversation.", "cmd_handlers")({
              user: TS.shared.getDisplayNameForModelOb(model_ob)
            });
          } else {
            help_message = TS.i18n.t("To start a call in {channel}, use `/call` here", "cmd_handlers")({
              channel: TS.shared.getDisplayNameForModelOb(model_ob)
            });
          }
          TS.cmd_handlers.addTempEphemeralFeedback(help_message);
          return;
        }
        if (rest.trim().match(/--server=/)) {
          var server = rest.trim().replace(/--server=/g, "");
          var persistent_call_state = TS.storage.fetchCallsState();
          persistent_call_state.call_server_override = server;
          TS.storage.storeCallsState(persistent_call_state);
        }
        if (TS.utility.calls.isCurrentContextMultiParty() && !TS.utility.calls.isMultiPartyEnabled()) {
          if (TS.model.team.prefs.calling_app_name !== "Slack") {
            TS.utility.calls.startCallInModelOb(model_ob, true);
            return;
          }
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Group calls aren’t available on the free plan. Try using `/call` in a Direct Message conversation!", "cmd_handlers")());
          return;
        } else if (model_ob.is_slackbot_im) {
          var slackbot_responses = [TS.i18n.t("I’m on the other line. Sorry!", "cmd_handlers")(), TS.i18n.t("Thanks for calling me! I’m afraid I only accept calls from my mother, Sundays at 2pm.", "cmd_handlers")(), TS.i18n.t("I’m washing my hair right now…can’t come to the phone!", "cmd_handlers")(), TS.i18n.t("It’s awfully nice of you to try calling me. But — shh! — I’m quite afraid of the phone!", "cmd_handlers")() + " :grimacing:", TS.i18n.t("Thank you so much for calling, but I can’t talk right now, I’m watching my stories.", "cmd_handlers")()];
          var random_slackbot_response = _.shuffle(slackbot_responses)[0];
          TS.cmd_handlers.addTempEphemeralFeedback(random_slackbot_response);
          return;
        } else if (member && (member.is_bot || member.id == TS.model.user.id)) {
          TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Unfortunately, {user} is busy right now, and can’t answer your call.", "cmd_handlers")({
            user: TS.members.getMemberDisplayName(member, false, true)
          }), "", "sad_surprise");
          return;
        }
        TS.utility.calls.startCallInModelOb(model_ob, true);
      }
    };
  };
  var _generateAndDisplayDiagnosticReport = function() {
    TS.info("Generating diagnostic report...");
    var report_p = _generateDiagnosticReport();
    var report_text;
    var body_html = TS.i18n.t("This will take a minute &mdash; hang tight.", "cmd_handlers")();
    TS.generic_dialog.start({
      title: TS.i18n.t("Building diagnostic report", "cmd_handlers")(),
      body: body_html,
      show_cancel_button: true,
      show_go_button: false,
      go_button_text: TS.i18n.t("Send Report to Slack", "cmd_handlers")(),
      onCancel: function() {
        if (report_p.isPending()) {
          TS.info("Cancelling diagnostic report");
          report_p.cancel();
        }
      },
      onGo: function() {
        TS.info("Sending diagnostic report to Zendesk...");
        TS.api.call("help.issues.create", {
          title: "Slack diagnostic report",
          text: "Please see attached file.",
          attach_text: report_text,
          tags: "slack_diagnostic_report"
        }).catch(function() {
          TS.generic_dialog.alert(TS.i18n.t('Oops! That didn’t work &mdash; please give it another try. If problems persist, please <a href="/help/requests/new">contact support</a>.', "cmd_handlers")(), "Something went wrong", "Close");
        }).finally(function() {
          TS.generic_dialog.cancel();
        });
        TS.generic_dialog.div.find(".btn").addClass("disabled").attr("disabled", true);
        return false;
      }
    });
    report_p.then(function(report) {
      report_text = report;
      TS.info(report);
      TS.generic_dialog.div.find("h3").text(TS.i18n.t("Diagnostic report ready", "cmd_handlers")());
      TS.generic_dialog.div.find(".modal-body").html(TS.i18n.t("Click the button below to send the report to Slack.", "cmd_handlers")());
      TS.generic_dialog.div.find(".btn.dialog_go").removeClass("hidden");
      TS.generic_dialog.div.find(".btn.dialog_cancel").text(TS.i18n.t("Close", "cmd_handlers")());
    });
  };
  var _generateDiagnosticReport = function() {
    var t0 = performance.now();
    var promises = {};
    promises["rtm.start"] = TS.api.call("rtm.start", {}).then(function(resp) {
      return {
        latency: performance.now() - t0,
        size_bytes: JSON.stringify(resp.data).length
      };
    }).catch(function(err) {
      return {
        error: err
      };
    });
    var channels_list_args = {};
    if (TS.membership && TS.membership.lazyLoadChannelMembership()) {
      channels_list_args.exclude_members = true;
    }
    promises.channels = TS.api.call("channels.list", channels_list_args).then(function(resp) {
      return {
        remote: _.map(resp.data.channels, "id").sort(),
        local: _.map(TS.model.channels, "id").sort(),
        for_user: _.map(TS.channels.getChannelsForUser(), "id").sort()
      };
    }).catch(function(err) {
      return {
        error: err
      };
    });
    promises.groups = TS.api.call("groups.list", {
      mpim_aware: true
    }).then(function(resp) {
      return {
        remote: _.map(resp.data.groups, "id").sort(),
        local: _.map(TS.model.groups, "id").sort()
      };
    }).catch(function(err) {
      return {
        error: err
      };
    });
    promises.ims = TS.api.call("im.list").then(function(resp) {
      return {
        remote: _.map(resp.data.ims, "id").sort(),
        local: _.map(TS.model.ims, "id").sort()
      };
    }).catch(function(err) {
      return {
        error: err
      };
    });
    promises.mpims = TS.api.call("mpim.list").then(function(resp) {
      return {
        remote: _.map(resp.data.groups, "id").sort(),
        local: _.map(TS.model.mpims, "id").sort()
      };
    }).catch(function(err) {
      return {
        error: err
      };
    });
    promises.members = TS.api.call("users.list").then(function(resp) {
      return {
        remote: _.map(resp.data.members, "id").sort(),
        local: _.map(TS.model.members, "id").sort(),
        for_user: _.map(TS.members.getMembersForUser(), "id").sort()
      };
    }).catch(function(err) {
      return {
        error: err
      };
    });
    promises["channel pane"] = new Promise(function(resolve) {
      var ids_in_channels_list = $("#channels_scroller li").map(function(i, elem) {
        var $elem = $(elem);
        if ($elem.hasClass("channel")) {
          return $elem.find("[data-channel-id]").attr("data-channel-id");
        } else if ($elem.hasClass("group")) {
          return $elem.find("[data-group-id]").attr("data-group-id");
        } else if ($elem.hasClass("member")) {
          return $elem.find("[data-member-id]").attr("data-member-id");
        } else if ($elem.hasClass("mpim")) {
          return $elem.find("[data-mpim-id]").attr("data-mpim-id");
        }
        return null;
      }).toArray();
      resolve(ids_in_channels_list);
    });
    promises["version info"] = TS.api.call("test.versionInfo").then(function(resp) {
      return {
        active_version_ts: TS.boot_data.version_ts,
        latest_version_ts: _.get(resp.data, "version_ts"),
        min_version_ts: _.get(resp.data, "min_version_ts")
      };
    });
    return Promise.props(promises).then(function(responses) {
      var responses_formatted = Object.keys(responses).map(function(response_name) {
        return [response_name, _.repeat("-", response_name.length), JSON.stringify(responses[response_name])].join("\n");
      });
      var report_lines = ["Slack Diagnostic Report", "-----------------------", "Date: " + TS.makeLogDate().trim(), "Time to generate: " + _.round((performance.now() - t0) / 1e3, 2) + " seconds", "User agent: " + navigator.userAgent, "Logged-in user:" + TS.model.user.id, "", responses_formatted.join("\n\n"), "", "-------------", "End of report"];
      return report_lines.join("\n");
    });
  };
  var _getCoreCmdsGroup = function(cmds) {
    var is_shared = false;
    if (TS.boot_data.page_needs_enterprise) {
      var model_ob = TS.shared.getActiveModelOb();
      if (TS.shared.isModelObShared(model_ob)) is_shared = true;
    }
    return {
      cmds: cmds.filter(function(cmd) {
        return (cmd.type === "core" || cmd.type === "client") && !(is_shared && cmd.name === "/call");
      }),
      id: "core",
      name: "Slack"
    };
  };
  var _getTeamCmdsGroup = function(cmds) {
    return {
      cmds: cmds.filter(function(cmd) {
        return cmd.type === "custom";
      }),
      id: "custom",
      name: TS.model.team.name
    };
  };
  var _getAppCmdsGroups = function(cmds) {
    var app_cmds = cmds.filter(function(cmd) {
      return cmd.type === "app" || cmd.type === "service";
    });
    var cmds_with_names = app_cmds.filter(function(cmd) {
      return !!(cmd.service_name || cmd.app);
    });
    var cmds_without_names = app_cmds.filter(function(cmd) {
      return !(cmd.service_name || cmd.app);
    });
    var apps = {};
    cmds_with_names.forEach(function(cmd) {
      var name = TS.cmd_handlers.getAppNameForCmdName(cmd.name);
      if (!apps[name]) apps[name] = [];
      apps[name].push(cmd);
    });
    var sorted_names = TS.apps.sortNames(Object.keys(apps));
    var groups = sorted_names.map(function(name) {
      return {
        cmds: apps[name],
        id: "app",
        name: name
      };
    });
    groups.push({
      cmds: cmds_without_names,
      id: "app",
      name: "Other"
    });
    return groups;
  };
  var _maybeInviteUserToModelOb = function(user, model_ob, input_txt) {
    if (!_.isObject(user)) throw new Error("Expected user to be an object");
    if (!_.isObject(model_ob)) throw new Error("Expected model_ob to be an object");
    if (!_.isString(input_txt)) throw new Error("Expected input_txt to be a string");
    TS.membership.ensureChannelMembershipIsKnownForUsers(model_ob.id, [user.id]).then(function() {
      var membership_status = TS.membership.getUserChannelMembershipStatus(user.id, model_ob);
      if (membership_status.is_member) {
        TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("{user} is already in this channel.", "cmd_handlers")({
          user: _getUserIdentifier(user)
        }), input_txt);
        return null;
      }
      if (!model_ob.is_mpim && TS.boot_data.page_needs_enterprise && !TS.permissions.channels.canMemberJoinChannel(model_ob, user)) {
        TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("This channel is not available to {user}", "cmd_handlers")({
          user: _getUserIdentifier(user)
        }), input_txt, "sad_surprise");
        return null;
      }
      if (model_ob.is_mpim) {
        TS.ui.im_browser.startWithMpim(model_ob, [user.id]);
      } else if (model_ob.is_private || model_ob.is_group) {
        TS.ui.invite.showInviteMembersPreSelected(model_ob.id, [user.id]);
      } else {
        TS.api.call("channels.invite", {
          channel: model_ob.id,
          user: user.id
        });
      }
      return null;
    });
  };
  var _maybeInviteUserGroupToModelOb = function(ug, model_ob, input_txt) {
    if (!_.isObject(ug)) throw new Error("Expected ug to be an object");
    if (!_.isObject(model_ob)) throw new Error("Expected model_ob to be an object");
    if (!_.isString(input_txt)) throw new Error("Expected input_txt to be a string");
    TS.membership.ensureChannelMembershipIsKnownForUsers(model_ob.id, ug.users).then(function() {
      var users_to_invite = ug.users.filter(function(user_id) {
        if (TS.boot_data.page_needs_enterprise) {
          var mbr = TS.members.getMemberById(user_id);
          if (!TS.permissions.channels.canMemberJoinChannel(model_ob, mbr)) return false;
        }
        var membership_status = TS.membership.getUserChannelMembershipStatus(user_id, model_ob);
        return !membership_status.is_member;
      });
      if (!users_to_invite.length) {
        var message = TS.i18n.t("All of the users in that user group are already in this channel.", "cmd_handlers")();
        TS.cmd_handlers.addTempEphemeralFeedback(message, input_txt);
        return;
      }
      if (model_ob.is_private || model_ob.is_group) {
        TS.ui.invite.showInviteMembersPreSelected(model_ob.id, users_to_invite);
      } else {
        users_to_invite.forEach(function(user_id) {
          TS.api.call("channels.invite", {
            channel: model_ob.id,
            user: user_id
          });
        });
      }
      return null;
    });
  };
  var _maybeInviteAppUserToChannel = function(user, channel, input_txt) {
    if (!_.isObject(user)) throw new Error("Expected user to be an object");
    if (!_.isObject(channel)) throw new Error("Expected channel to be an object");
    TS.api.call("apps.permissions.add", {
      channel: channel.id,
      app_user: user.id
    }).then(function(response) {
      var scopes = _.get(response, "data.permission.scopes");
      var scope_list = scopes.join(", ");
      if (_.get(response, "data.should_confirm")) {
        TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Need to confirm adding {user}.", "cmd_handlers")({
          user: _getUserIdentifier(user)
        }));
        return;
      }
      TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("{user} has been added with the following scopes: {scopes}.", "cmd_handlers")({
        user: _getUserIdentifier(user),
        scopes: scope_list
      }));
    }).catch(function(error_response) {
      var error_str = _.get(error_response, "data.error");
      if (error_str === "already_has_resource") {
        TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("{user} is already in this channel.", "cmd_handlers")({
          user: _getUserIdentifier(user)
        }), input_txt);
      } else if (error_str === "no_scopes_to_add") {
        TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("{user} can't join channels of this type.", "cmd_handlers")({
          user: _getUserIdentifier(user)
        }), input_txt);
      } else {
        TS.cmd_handlers.addTempEphemeralFeedback(TS.i18n.t("Hmm, something went wrong, try again?", "cmd_handlers")({
          user: _getUserIdentifier(user)
        }), input_txt);
      }
    });
  };
  var _getUserIdentifier = function(user) {
    if (!_.isObject(user)) throw new Error("Expected user to be an object");
    if (TS.boot_data.feature_name_tagging_client_extras) {
      return "@" + user.id;
    }
    return "@" + user.name;
  };
  var _getActiveChannel = function() {
    var channel;
    if (TS.model.active_channel_id) {
      channel = TS.channels.getChannelById(TS.model.active_channel_id);
    } else if (TS.model.active_group_id) {
      channel = TS.groups.getGroupById(TS.model.active_group_id);
    } else if (TS.model.active_mpim_id) {
      channel = TS.mpims.getMpimById(TS.model.active_mpim_id);
    } else if (TS.model.active_im_id) {
      channel = TS.ims.getImById(TS.model.active_im_id);
    }
    return channel;
  };
})();
(function() {
  "use strict";
  TS.registerModule("stars", {
    member_stars_fetched_sig: new signals.Signal,
    member_stars_being_fetched_sig: new signals.Signal,
    channel_starred_sig: new signals.Signal,
    channel_unstarred_sig: new signals.Signal,
    has_more: false,
    fetched_once: false,
    onStart: function() {
      TS.files.team_file_changed_sig.add(_teamFileChanged);
      TS.files.team_file_deleted_sig.add(TS.stars.maybeUpdateUserStarredList);
      TS.files.team_file_comment_deleted_sig.add(TS.stars.maybeUpdateUserStarredList);
      _$member_stars_more_btn = $("#member_stars_more_btn");
    },
    maybeUpdateUserStarredList: function(args) {
      if (!TS.client) return;
      if (!TS.model.team) return;
      if (_stars_being_fetched || !TS.stars.fetched_once) {
        _stars_needs_fetched = true;
        return;
      }
      _updateUserStarredList(args);
    },
    maybeRemoveStarredListItem: function(item) {
      if (!TS.client) return;
      var star_index = _.findIndex(TS.model.user.stars, function(star) {
        if (star.type !== item.type) return false;
        switch (star.type) {
          case "message":
            return star.message.ts === item.message.ts;
          case "file":
            return star.file.id === item.file_id;
          case "file_comment":
            return star.comment.id === item.comment.id;
          default:
            break;
        }
        return false;
      });
      if (star_index !== -1) TS.model.user.stars.splice(star_index, 1);
      if (TS.model.ui_state.flex_name !== "stars") return;
      var $star;
      var selector;
      if (item.type === "file") {
        selector = ".star_item #file_" + item.file_id;
        $star = $(selector).parent(".star_item");
      } else if (item.type === "message") {
        selector = '.star_item .message[data-ts="' + item.message.ts + '"]';
        $star = $(selector).parent(".star_item");
      } else if (item.type === "file_comment") {
        selector = '.star_item .star_comment[data-comment-id="' + item.comment.id + '"]';
        $star = $(selector).parents(".star_item");
      } else {
        return;
      }
      $star.remove();
    },
    fetchUserStarredItems: function() {
      var api_args = _starsListArgs();
      if (!TS.stars.fetched_once) TS.stars.fetched_once = true;
      return TS.api.call("stars.list", api_args, _onFetchUserStarredItems);
    },
    userStarStatusHasChanged: function(starred, item, parent_type) {
      _slurpStarItem(item, parent_type);
      if (item.type === "message") {
        _updateMsgStar(item.message.ts, item.channel, starred, false);
      } else if (item.type === "file") {
        if (item.file.is_starred != starred) {
          _updateFileStar(item.file.id, starred);
        }
      } else if (item.type === "file_comment") {
        if (item.comment.is_starred != starred) {
          _updateFileCommentStar(item.comment.id, item.file.id, starred);
        }
      } else if (item.type === "channel") {
        var channel = TS.channels.getChannelById(item.channel);
        if (!channel) {
          TS.warn("userStarStatusHasChanged channel_id:" + item.channel + " not found");
        } else if (channel.is_starred != starred) {
          _updateChannelStar(item.channel, starred);
        }
      } else if (item.type === "group") {
        var model_ob = TS.groups.getGroupById(item.channel);
        if (!model_ob) {
          model_ob = TS.mpims.getMpimById(item.channel);
        }
        if (!model_ob) {
          TS.warn("userStarStatusHasChanged group_id:" + item.channel + " not found");
        } else if (model_ob.is_starred != starred) {
          if (model_ob.is_mpim) {
            _updateMpimStar(item.channel, starred);
          } else {
            _updateGroupStar(item.channel, starred);
          }
        }
      } else if (item.type === "im") {
        var im = TS.ims.getImById(item.channel);
        if (!im) {
          TS.warn("userStarStatusHasChanged im_id:" + item.channel + " not found");
        } else if (im.is_starred != starred) {
          _updateImStar(item.channel, starred);
        }
      } else {
        TS.error("userStarStatusHasChanged needs to handle star item type:" + item.type);
      }
    },
    checkForStarClick: function(e) {
      if (!e.target) return false;
      var $el = $(e.target);
      var $star;
      if ($el.closest(".star").length) {
        $star = $el.closest(".star");
      } else {
        $star = $el.closest(".star_link");
      }
      var is_starred_icon_in_list = false;
      if (!$star || !$star.length) {
        if ($el.is("button.file_star")) {
          $star = $el.children(".star");
        } else if ($el.closest(".starred_icon").length) {
          is_starred_icon_in_list = true;
          $star = $el.closest(".starred_icon");
        }
      }
      if (!$star || !$star.length) return false;
      if ($star.hasClass("not-clickable")) return false;
      var currently_starred = $star.hasClass("starred");
      var api_args = {};
      var updateFunc;
      if (is_starred_icon_in_list) {
        var model_ob = TS.shared.getModelObById($star.data("c-id"));
        if (model_ob) {
          api_args.channel = model_ob.id;
          currently_starred = model_ob.is_starred;
          updateFunc = function(starred) {
            if (model_ob.is_channel) {
              _updateChannelStar(api_args.channel, starred);
            } else if (model_ob.is_im) {
              _updateImStar(api_args.channel, starred);
            } else if (model_ob.is_mpim) {
              _updateMpimStar(api_args.channel, starred);
            } else if (model_ob.is_group) {
              _updateGroupStar(api_args.channel, starred);
            }
          };
        }
      } else if ($star.hasClass("star_message")) {
        api_args.channel = $star.data("c-id");
        api_args.timestamp = $star.data("msg-id");
        updateFunc = function(starred) {
          _updateMsgStar(api_args.timestamp, api_args.channel, starred, true);
        };
      } else if ($star.hasClass("star_file")) {
        api_args.file = $star.data("file-id");
        updateFunc = function(starred) {
          _updateFileStar(api_args.file, starred);
        };
      } else if ($star.hasClass("star_file_comment")) {
        api_args.file_comment = $star.data("comment-id");
        updateFunc = function(starred) {
          _updateFileCommentStar(api_args.file_comment, $star.data("file-id"), starred);
        };
      } else if ($star.hasClass("star_channel")) {
        api_args.channel = $star.data("channel-id");
        updateFunc = function(starred) {
          _updateChannelStar(api_args.channel, starred);
        };
      } else if ($star.hasClass("star_group")) {
        api_args.channel = $star.data("group-id");
        updateFunc = function(starred) {
          _updateGroupStar(api_args.channel, starred);
        };
      } else if ($star.hasClass("star_im")) {
        api_args.channel = $star.data("im-id");
        updateFunc = function(starred) {
          _updateImStar(api_args.channel, starred);
        };
      } else if ($star.hasClass("star_mpim")) {
        api_args.channel = $star.data("mpim-id");
        updateFunc = function(starred) {
          _updateMpimStar(api_args.channel, starred);
        };
      } else {
        TS.error("checkForStarClick doesn't know what to do with a click on " + $star[0].outerHTML);
        return false;
      }
      e.preventDefault();
      updateFunc(!currently_starred);
      if (currently_starred) {
        TS.api.call("stars.remove", api_args, function(ok, data) {
          if (ok) return;
          if (data.error === "not_starred") {
            updateFunc(false);
          } else {
            updateFunc(true);
          }
        });
      } else {
        TS.api.call("stars.add", api_args, function(ok, data) {
          if (ok) return;
          if (data.error === "already_starred") {
            updateFunc(true);
          } else {
            updateFunc(false);
          }
        });
      }
      return true;
    },
    updateFileStar: function(file_id, starred) {
      _updateFileStar(file_id, starred);
    },
    toggleStarOnMsg: function(ts, model_ob, callback) {
      if (!ts || !model_ob) return;
      var msg = TS.utility.msgs.findMsg(ts, model_ob.id);
      if (!msg) return;
      var api_args = {
        channel: model_ob.id,
        timestamp: ts
      };
      var api_method = msg.is_starred ? "stars.remove" : "stars.add";
      TS.api.call(api_method, api_args, function(ok, data) {
        if (ok) {
          if (callback) callback(model_ob);
        } else if (data.error) {
          TS.error(data.error);
        }
      });
    },
    toggleStarOnActiveModelObject: function(callback) {
      var model_ob = TS.shared.getActiveModelOb();
      if (!model_ob || TS.client.activeChannelIsHidden()) return;
      var starred = model_ob.is_starred;
      var api_args = {};
      api_args.channel = model_ob.id;
      if (!starred) {
        TS.api.call("stars.add", api_args, function(ok, data) {
          if (ok) {
            if (callback) callback(model_ob);
          } else if (data.error) {
            TS.error(data.error);
          }
        });
      } else {
        TS.api.call("stars.remove", api_args, function(ok, data) {
          if (ok) {
            if (callback) callback(model_ob);
          } else if (data.error) {
            TS.error(data.error);
          }
        });
      }
    }
  });
  var _page = 1;
  var _page_size = 20;
  var _$member_stars_more_btn;
  var _stars_being_fetched = false;
  var _stars_needs_fetched = false;
  var _updateUserStarredList = function(args) {
    _stars_being_fetched = true;
    _stars_needs_fetched = false;
    TS.stars.member_stars_being_fetched_sig.dispatch(TS.model.user, true);
    var dont_set_active = true;
    var api_args = _starsListArgs();
    api_args.page = 1;
    api_args._update = true;
    api_args.count = Math.max(TS.model.user.stars.length, _page_size);
    if (args && args.delta) api_args.count += args.delta;
    TS.api.call("stars.list", api_args, _onFetchUserStarredItems, dont_set_active);
  };
  var _teamFileChanged = function(file) {
    if (file.hasOwnProperty("is_starred")) {
      _updateFileStar(file.id, file.is_starred, file.id);
      TS.files.updateFileListItem(file, $(".star_item"));
    }
  };
  var _onFetchUserStarredItems = function(ok, data, args) {
    _stars_being_fetched = false;
    TS.stars.member_stars_being_fetched_sig.dispatch(TS.model.user, false);
    if (_stars_needs_fetched) {
      TS.stars.maybeUpdateUserStarredList();
      return;
    }
    if (!ok) {
      TS.stars.member_stars_fetched_sig.dispatch({
        error: "api_not_ok"
      });
      return;
    }
    for (var i = 0; i < data.items.length; i += 1) {
      var item = data.items[i];
      TS.stars.userStarStatusHasChanged(true, item, "stars.list");
    }
    if (args.page == 1) {
      TS.model.user.stars = data.items;
    } else {
      TS.model.user.stars = TS.model.user.stars.concat(data.items);
      TS.model.user.stars = _.uniqWith(TS.model.user.stars, _.isEqual);
    }
    if (_$member_stars_more_btn.data("ladda")) {
      _$member_stars_more_btn.data("ladda").stop();
    }
    TS.stars.has_more = data.paging.pages > data.paging.page;
    if (!args._update) _page += 1;
    TS.stars.member_stars_fetched_sig.dispatch(null, TS.model.user);
  };
  var _starsListArgs = function() {
    var args = {
      user: TS.model.user.id,
      exclude: "Ch,Gh,Dh",
      page: _page,
      count: _page_size
    };
    return args;
  };
  var _slurpStarItem = function(item, parent_type) {
    var upsert;
    if (item.type === "message") {
      item.message._rxn_key = TS.rxns.getRxnKey("message", item.message.ts, item.channel);
      if (item.message.type === "channel_topic" || item.message.type === "channel_purpose" || item.message.type === "channel_join" || item.message.type === "channel_leave") {
        item.message.subtype = item.message.type;
      }
      item.message.type = "message";
    } else if (item.type === "file" || item.type === "file_comment") {
      if (item.file) {
        upsert = TS.files.upsertAndSignal(item.file);
        item.file = upsert.file;
        if (item.type === "file_comment") {
          if (item.comment) {
            item.comment = TS.files.addCommentToFile(item.comment, item.file);
          } else {
            TS.error("WTF no comment in type " + item.type + " in " + parent_type);
            return false;
          }
        }
      } else {
        TS.error("WTF no file in type " + item.type + " in " + parent_type);
        return false;
      }
    } else if (item.type === "channel") {} else if (item.type === "group") {} else if (item.type === "im") {} else {
      TS.error("need to handle star item type:" + item.type + " in " + parent_type);
      return false;
    }
    return true;
  };
  var _updateMsgStar = function(ts, c_id, starred, should_log) {
    var model_ob = TS.shared.getModelObById(c_id);
    var msg;
    if (model_ob) {
      if (TS.boot_data.feature_threads_slash_cmds) {
        msg = TS.utility.msgs.findMsg(ts, c_id);
      } else {
        msg = TS.utility.msgs.getMsg(ts, model_ob.msgs);
      }
    }
    var selector = '.star_message[data-msg-id="' + ts + '"][data-c-id="' + c_id + '"]';
    var $el = $(selector);
    if (should_log) {
      var payload = {};
      var clog_key = starred ? "STAR_ADD_CLICKED" : "STAR_REMOVE_CLICKED";
      if (TS.model.unread_view_is_showing) {
        _.merge(payload, TS.client.ui.unread.getTrackingData(ts));
        TS.client.ui.unread.incrementTrackingSeqId();
      }
      _.merge(payload, TS.ui.thread.getTrackingPayloadForEl($el));
      if (TS.ui.thread.getContextForEl($el) === "threads_view") TS.client.ui.threads.incrementTrackingSeqId();
      TS.clog.track(clog_key, payload);
    }
    _updateStar($el, starred, msg, selector);
  };
  var _updateFileCommentStar = function(comment_id, file_id, starred) {
    var file = TS.files.getFileById(file_id);
    var comment;
    if (!file) {
      TS.warn("updateFileCommentStar file_id:" + file_id + " not found");
    } else {
      comment = TS.files.getFileCommentById(file, comment_id);
    }
    var selector = '.star_comment[data-comment-id="' + comment_id + '"]';
    _updateStar($(selector), starred, comment, selector);
  };
  var _updateFileStar = function(file_id, starred) {
    var file = TS.files.getFileById(file_id);
    if (!file) {
      TS.warn("updateFileStar file_id:" + file_id + " not found");
    }
    var selector = '.star_file[data-file-id="' + file_id + '"]';
    _updateStar($(selector), starred, file, selector);
  };
  var _updateChannelStar = function(channel_id, starred) {
    var channel = TS.channels.getChannelById(channel_id);
    if (!channel) {
      TS.warn("updateChannelStar channel_id:" + channel_id + " not found");
    }
    channel.is_starred = starred;
    var selector = '.star_channel[data-channel-id="' + channel_id + '"]';
    _updateStar($(selector), starred, channel, selector);
    if (TS.client) {
      TS.client.channel_pane.rebuild("channels", "starred");
      var model_ob = TS.shared.getModelObById(channel_id);
      if (!model_ob) {
        return;
      }
      if (starred) {
        TS.stars.channel_starred_sig.dispatch(model_ob);
      } else {
        TS.stars.channel_unstarred_sig.dispatch(model_ob);
      }
    }
  };
  var _updateGroupStar = function(group_id, starred) {
    var group = TS.groups.getGroupById(group_id);
    if (!group) {
      TS.warn("updateGroupStar group_id:" + group_id + " not found");
    }
    group.is_starred = starred;
    var selector = '.star_group[data-group-id="' + group_id + '"]';
    _updateStar($(selector), starred, group, selector);
    if (TS.client) {
      TS.client.channel_pane.rebuild("channels", "starred");
    }
  };
  var _updateImStar = function(im_id, starred) {
    var im = TS.ims.getImById(im_id);
    if (!im) {
      TS.warn("updateImStar im_id:" + im_id + " not found");
    }
    im.is_starred = starred;
    var selector = '.star_im[data-im-id="' + im_id + '"]';
    _updateStar($(selector), starred, im, selector);
    if (TS.client) {
      TS.client.channel_pane.rebuild("ims", "starred");
    }
  };
  var _updateMpimStar = function(mpim_id, starred) {
    var mpim = TS.mpims.getMpimById(mpim_id);
    if (!mpim) {
      TS.warn("updateMpimStar mpim_id:" + mpim_id + " not found");
    }
    mpim.is_starred = starred;
    var selector = '.star_mpim[data-mpim-id="' + mpim_id + '"]';
    _updateStar($(selector), starred, mpim, selector);
    if (TS.client) {
      TS.client.channel_pane.rebuild("ims", "starred");
    }
  };
  var _updateStar = function($star, starred, ob) {
    if (starred) {
      if (!$star.hasClass("starred")) {
        $star.addClass("starred ts_icon_star").removeClass("ts_icon_star_o");
      }
    } else {
      $star.removeClass("starred ts_icon_star").addClass("ts_icon_star_o");
    }
    if (ob) {
      ob.is_starred = starred;
    } else {}
  };
})();
(function() {
  "use strict";
  TS.registerModule("mentions", {
    mention_changed_sig: new signals.Signal,
    mention_removed_sig: new signals.Signal,
    mentions_fetched_sig: new signals.Signal,
    mentions_being_fetched_sig: new signals.Signal,
    mentions_being_fetched: false,
    mentions_needs_fetched: false,
    has_more: false,
    after_ts: null,
    fetched_once: false,
    active_tab: "all",
    test: function() {
      var test = {};
      return test;
    },
    onStart: function() {
      TS.prefs.mentions_exclude_at_channels_changed_sig.add(_excludeAtChannelsPrefChanged);
      TS.prefs.mentions_exclude_at_user_groups_changed_sig.add(_excludeUserGroupsPrefChanged);
    },
    maybeUpdateMentions: function(user_requested) {
      if (TS.boot_data.app !== "client") return;
      if (!TS.model.team) return;
      if (TS.mentions.mentions_being_fetched || !TS.mentions.fetched_once || TS.model.ui_state.flex_name !== "mentions") {
        TS.mentions.mentions_needs_fetched = true;
        return;
      }
      TS.mentions.updateMentions(user_requested);
    },
    updateMentions: function(user_requested) {
      TS.mentions.mentions_being_fetched = true;
      TS.mentions.mentions_needs_fetched = false;
      TS.mentions.mentions_being_fetched_sig.dispatch(user_requested);
      var dont_set_active = true;
      TS.api.call("activity.mentions", _activityMentionsArgs(), TS.mentions.onFetchMentions, dont_set_active);
    },
    fetchMoreMentions: function() {
      TS.mentions.fetchMentions(TS.mentions.after_ts);
    },
    fetchMentions: function(after_ts) {
      TS.mentions.mentions_needs_fetched = false;
      TS.mentions.fetched_once = true;
      var args = _activityMentionsArgs();
      after_ts = after_ts || "";
      args.after_ts = after_ts;
      TS.api.call("activity.mentions", args, TS.mentions.onFetchMentions);
    },
    getMentionByMsgId: function(id, replace_message_with, and_remove_it) {
      var mention;
      var remove_from_array;
      var remove_from_array_index;

      function findMentionInArrayByMsgId(array, ts) {
        return _.find(array, function(mention, index) {
          if (mention.message && mention.message.ts === ts) {
            remove_from_array = array;
            remove_from_array_index = index;
            return true;
          }
          return false;
        });
      }
      mention = findMentionInArrayByMsgId(TS.model.user.mentions, id);
      if (!mention) return null;
      if (replace_message_with && mention.message) {
        mention.message = replace_message_with;
      } else if (and_remove_it && _.isArray(remove_from_array) && _.isNumber(remove_from_array_index)) {
        remove_from_array.splice(remove_from_array_index, 1);
      }
      return mention;
    },
    onFetchMentions: function(ok, data) {
      TS.mentions.mentions_being_fetched = false;
      if (TS.mentions.mentions_needs_fetched) {
        setTimeout(TS.mentions.maybeUpdateMentions, 100);
      }
      if (!ok) {
        TS.error("failed fetchMentions");
        return;
      }
      var mention;
      var mentions = [];
      var existing_rxns;
      for (var i = 0; i < data.mentions.length; i += 1) {
        mention = data.mentions[i];
        if (mention.type === "reaction") {
          if (mention.item.type === "message") {
            mention.rxn_ts = mention.ts;
            mention.channel = mention.item.channel;
            mention.message = mention.item.message;
            mention.item.message._rxn_key = TS.rxns.getRxnKey("message", mention.item.message.ts, mention.item.channel);
            delete mention.item;
          } else if (mention.item.type === "file") {
            mention.rxn_ts = mention.ts;
            mention.channel = _.first(mention.item.file.channels);
            mention.message = {
              file: mention.item.file,
              subtype: "file_reaction",
              ts: mention.ts
            };
            delete mention.item;
          } else {
            continue;
          }
        }
        var msg = mention.message;
        if (!msg) continue;
        var file = msg.file;
        var comment = msg.comment;
        if (msg.subtype === "file_share" || msg.subtype === "file_mention" || msg.subtype === "file_comment" || msg.subtype === "file_reaction") {
          if (!file) continue;
          if (msg.subtype === "file_comment") {
            if (!comment) continue;
          }
        }
        if (msg.ts == "0000000000.000000") {
          TS.warn("bad mention! msg.ts == 0000000000.000000");
          continue;
        }
        if (msg.subtype === "file_share" || msg.subtype === "file_mention" || msg.subtype === "file_comment" || msg.subtype === "file_reaction") {
          file._rxn_key = TS.rxns.getRxnKey("file", file.id);
          existing_rxns = TS.rxns.getExistingRxnsByKey(file._rxn_key);
          if (existing_rxns && !file.reactions) {
            TS.warn("file:" + file.id + " has reactions in local model, but we got an object in mentions that does NOT have reactions, which seems suspicious");
          } else {
            TS.rxns.upsertRxnsFromDataAndUpdateUI(file._rxn_key, file.reactions);
          }
          if (msg.subtype === "file_comment") {
            comment._rxn_key = TS.rxns.getRxnKey("file_comment", comment.id);
            existing_rxns = TS.rxns.getExistingRxnsByKey(comment._rxn_key);
            if (existing_rxns && !comment.reactions) {
              TS.warn("comment:" + comment.id + " has reactions in local model, but we got an object in mentions that does NOT have reactions, which seems suspicious");
            } else {
              TS.rxns.upsertRxnsFromDataAndUpdateUI(comment._rxn_key, comment.reactions);
            }
          }
        } else {
          TS.ui.handy_rxns.decorateMsg(msg, msg.text);
          msg._rxn_key = TS.rxns.getRxnKey("message", msg.ts, mention.channel);
          existing_rxns = TS.rxns.getExistingRxnsByKey(msg._rxn_key);
          if (existing_rxns && !msg.reactions) {
            TS.warn("msg:" + msg.ts + " has reactions in local model, but we got an object in mentions that does NOT have reactions, which seems suspicious");
          } else {
            TS.rxns.upsertRxnsFromDataAndUpdateUI(msg._rxn_key, msg.reactions);
          }
          var model_ob = TS.shared.getModelObById(mention.channel);
          var existing_msg = model_ob && TS.utility.msgs.getMsg(msg.ts, model_ob.msgs);
          if (existing_msg) {
            msg.is_starred = existing_msg.is_starred;
          }
        }
        if (TS.mentions.getMentionByMsgId(msg.ts, msg)) continue;
        mentions.push(mention);
      }
      TS.model.user.mentions = TS.model.user.mentions.concat(mentions);
      TS.mentions.sortMentions();
      TS.mentions.has_more = data.has_more;
      if (TS.model.user.mentions.length) {
        mention = TS.model.user.mentions[TS.model.user.mentions.length - 1];
        TS.mentions.after_ts = mention.type === "reaction" ? mention.rxn_ts : mention.message.ts;
      }
      TS.mentions.mentions_fetched_sig.dispatch();
    },
    sortMentions: function() {
      var a_val;
      var b_val;

      function compare(a, b) {
        a_val = a.rxn_ts || a.message.ts;
        b_val = b.rxn_ts || b.message.ts;
        if (a_val < b_val) return 1;
        if (a_val > b_val) return -1;
        return 0;
      }
      TS.model.user.mentions.sort(compare);
    },
    replaceMsg: function(imsg) {
      var mention = TS.mentions.getMentionByMsgId(imsg.ts, imsg);
      if (mention) {
        TS.mentions.mention_changed_sig.dispatch(mention);
      }
    },
    removeMsg: function(ts) {
      var mention = TS.mentions.getMentionByMsgId(ts, null, true);
      if (mention) {
        TS.mentions.mention_removed_sig.dispatch(ts);
      }
    },
    setExcludeAtChannelsPref: function(value) {
      value = !!value;
      TS.model.prefs.mentions_exclude_at_channels = value;
      TS.prefs.setPrefByAPI({
        name: "mentions_exclude_at_channels",
        value: value
      });
      _excludeAtChannelsPrefChanged();
    },
    setExcludeAtUserGroupsPref: function(value) {
      value = !!value;
      TS.model.prefs.mentions_exclude_at_user_groups = value;
      TS.prefs.setPrefByAPI({
        name: "mentions_exclude_at_user_groups",
        value: value
      });
      _excludeUserGroupsPrefChanged();
    },
    weaveInRxnRecords: function() {
      var rxn_records = TS.rxns.getRxnRecords();
      var key_parts;
      var rxn_key;
      var mention_item;
      var model_ob;
      var existing_msg;
      TS.model.user.mentions = TS.model.user.mentions.filter(function(m) {
        return m.type !== "rxn";
      });
      for (var i = 0; i < rxn_records.length; i += 1) {
        rxn_key = rxn_records[i].rxn_key;
        key_parts = TS.rxns.getRxnKeyParts(rxn_key);
        if (key_parts.type === "message") {
          model_ob = TS.shared.getModelObById(key_parts.c_id);
          existing_msg = model_ob && TS.utility.msgs.getMsg(key_parts.id, model_ob.msgs);
          if (!existing_msg) continue;
          TS.mentions.getMentionByMsgId(key_parts.id, null, true);
          mention_item = {
            channel: key_parts.c_id,
            type: "reaction",
            rxn_ts: rxn_records[i].last_update,
            message: _.cloneDeep(existing_msg)
          };
          mention_item.message._rxn_key = rxn_key;
        } else if (key_parts.type === "file") {
          continue;
        } else if (key_parts.type === "file_comment") {
          continue;
        } else {
          continue;
        }
        TS.model.user.mentions.push(mention_item);
      }
      TS.mentions.sortMentions();
    }
  });
  var _activityMentionsArgs = function() {
    return _activityMentionsArgsAll();
  };
  var _activityMentionsArgsAll = function() {
    var args = {
      count: 20,
      reactions: 1
    };
    var exclude = ["thread"];
    if (TS.model.prefs.mentions_exclude_at_channels) {
      exclude.push("everyone");
      exclude.push("channel");
    }
    if (TS.model.prefs.mentions_exclude_at_user_groups) {
      exclude.push("user_group");
    }
    if (exclude.length > 0) {
      args.exclude = exclude.join(",");
    }
    return args;
  };
  var _excludeAtChannelsPrefChanged = function() {
    var value = TS.model.prefs.mentions_exclude_at_channels;
    if (value) {
      _removeMentionTypeMsgs(["everyone", "channel"]);
      TS.mentions.mentions_fetched_sig.dispatch();
    } else {
      TS.mentions.maybeUpdateMentions();
    }
  };
  var _excludeUserGroupsPrefChanged = function() {
    var value = TS.model.prefs.mentions_exclude_at_user_groups;
    if (value) {
      _removeMentionTypeMsgs(["user_group"]);
      TS.mentions.mentions_fetched_sig.dispatch();
    } else {
      TS.mentions.maybeUpdateMentions();
    }
  };
  var _removeMentionTypeMsgs = function(types) {
    var mention;
    for (var i = TS.model.user.mentions.length - 1; i >= 0; i -= 1) {
      mention = TS.model.user.mentions[i];
      if (types.indexOf(mention.type) !== -1) {
        TS.model.user.mentions.splice(i, 1);
      }
    }
  };
})();
(function() {
  "use strict";
  TS.registerModule("inline_videos", {
    no_scrolling: false,
    expand_sig: new signals.Signal,
    collapse_sig: new signals.Signal,
    onStart: function() {},
    shouldExpand: function(container_id, inline_video) {
      if (TS.model.expandable_state["vid_" + container_id + inline_video.src]) return true;
      if (TS.model.expandable_state["vid_" + container_id + inline_video.src] === false) return false;
      if (inline_video.internal_file_id) return TS.model.prefs.expand_internal_inline_imgs;
      return TS.model.prefs.expand_inline_imgs;
    },
    expandAllInCurrent: function() {
      var $collapsed_togglers = $(".msg_inline_media_toggler[data-media-type=video]:not(.expanded)");
      if (!$collapsed_togglers.length) return;
      TS.inline_videos.no_scrolling = true;
      $collapsed_togglers.trigger("click");
      TS.inline_videos.no_scrolling = false;
      if (TS.client) {
        TS.client.ui.instaScrollMsgsToBottom(false);
      }
    },
    collapseAllInCurrent: function() {
      $(".msg_inline_media_toggler[data-media-type=video].expanded").trigger("click");
    },
    expand: function(container_id, src) {
      TS.model.expandable_state["vid_" + container_id + src] = true;
      TS.storage.storeExpandableState(TS.model.expandable_state);
      var selector = "#" + TS.utility.makeSafeForDomId(container_id);
      var $el = $(selector);
      if (!$el.length) return;
      var was_at_bottom = TS.client && TS.client.ui.areMsgsScrolledToBottom();
      var filter = function() {
        return $(this).data("real-src") == src;
      };
      var $holder = TS.boot_data.feature_attachments_inline ? $el.find(".inline_attachment").filter(filter) : null;
      if (!$holder || !$holder.length) $holder = $el.find(".msg_inline_video_holder").filter(filter);
      $holder.find(".msg_inline_video_thumb_div").removeClass("hidden");
      $holder.removeClass("hidden");
      $el.find(".msg_inline_media_toggler[data-media-type=video]:not(.expanded)").filter(filter).addClass("expanded");
      if (TS.client) TS.client.ui.checkInlineImgsAndIframesEverywhere();
      $holder.css("opacity", 0).stop().animate({
        opacity: 1
      }, 300);
      if (!TS.inline_videos.no_scrolling) {
        if (TS.client && was_at_bottom) {
          TS.client.ui.instaScrollMsgsToBottom(false);
          $el.children().first().scrollintoview({
            duration: 0,
            offset: "top",
            px_offset: 10,
            direction: "y"
          });
        } else {
          $el.find(".msg_inline_video").last().scrollintoview({
            duration: 200,
            offset: "bottom",
            px_offset: -10,
            direction: "y"
          });
        }
      }
      TS.inline_videos.expand_sig.dispatch(container_id);
      if (TS.client) TS.client.ui.checkInlineImgsAndIframesEverywhere();
    },
    collapse: function(container_id, src) {
      TS.model.expandable_state["vid_" + container_id + src] = false;
      TS.storage.storeExpandableState(TS.model.expandable_state);
      var selector = "#" + TS.utility.makeSafeForDomId(container_id);
      var $el = $(selector);
      if (!$el.length) return;
      var filter = function() {
        return $(this).data("real-src") == src;
      };
      var $holder = TS.boot_data.feature_attachments_inline ? $el.find(".inline_attachment").filter(filter) : null;
      if (!$holder || !$holder.length) $holder = $el.find(".msg_inline_video_holder").filter(filter);
      $holder.css("visibility", "hidden");
      $el.find(".msg_inline_media_toggler[data-media-type=video].expanded").filter(filter).removeClass("expanded");
      $holder.find(".msg_inline_video_iframe_div").html("");
      TS.inline_videos.collapse_sig.dispatch(container_id);
      setTimeout(function() {
        $holder.addClass("hidden");
        $holder.css("visibility", "visible");
      }, 200);
    },
    enCommentHTML: function(html) {
      if (!html) return "";
      var parser = new DOMParser;
      var body_html = "<body>" + html + "</body>";
      var doc = parser.parseFromString(body_html, "text/html") || parser.parseFromString(body_html, "text/xml");
      if (!doc || !doc.body) return "";
      if (doc.body.childNodes.length === 0) {
        return "";
      }
      if (doc.body.childNodes.length == 1 && doc.body.childNodes[0].nodeType == Node.COMMENT_NODE) {
        return doc.body.innerHTML;
      }
      var comment = document.createComment(html);
      return $("<div>").append(comment).html();
    },
    unCommentHTML: function(html) {
      if (!html) return "";
      var parser = new DOMParser;
      var doc = parser.parseFromString("<body>" + html + "</body>", "text/html");
      if (!doc || !doc.body) return "";
      if (doc.body.childNodes.length != 1) return "";
      var comment = doc.body.childNodes[0];
      if (comment.nodeType != Node.COMMENT_NODE) return "";
      return comment.textContent;
    },
    checkForInlineVideoClick: function(e) {
      if (!e.target) return;
      var $el = $(e.target);
      var container_id;
      var $message = $el.closest(".message");
      container_id = $message.attr("id");
      if (!container_id) return;
      var $msg_inline_media_toggler = $el.closest(".msg_inline_media_toggler[data-media-type=video]");
      if ($msg_inline_media_toggler.length) {
        e.preventDefault();
        var src = $msg_inline_media_toggler.data("real-src");
        if ($msg_inline_media_toggler.hasClass("expanded")) {
          TS.inline_videos.collapse(container_id, src);
        } else {
          TS.inline_videos.expand(container_id, src);
        }
        return;
      }
      var $msg_inline_video_play_button = $el.closest(".msg_inline_video_play_button");
      if ($msg_inline_video_play_button.length) {
        var $msg_inline_video_holder = $msg_inline_video_play_button.closest(".msg_inline_video_holder");
        var $msg_inline_video_iframe_div = $msg_inline_video_holder.find(".msg_inline_video_iframe_div");
        $msg_inline_video_iframe_div.removeClass("hidden");
        $msg_inline_video_holder.find(".msg_inline_video_thumb_div").addClass("hidden");
        var url = $msg_inline_video_iframe_div.data("url");
        var inline_video = TS.model.inline_videos[url];
        if (!inline_video) {
          var corrected_url = url.replace(/&/g, "&amp;");
          inline_video = TS.model.inline_videos[corrected_url];
        }
        if (inline_video) {
          $msg_inline_video_iframe_div.html(TS.inline_videos.unCommentHTML(inline_video.html));
          if (url.indexOf("twitter.com" !== -1)) {
            var $video = $msg_inline_video_iframe_div.find("video");
            if ($video.length) {
              $video[0].play();
            }
          }
        } else {
          var error_html = TS.i18n.t('<div style="padding:10px; color:white">Error: unable to find "{url}" in TS.model.inline_videos</div>', "inline_videos")({
            url: TS.utility.htmlEntities(url)
          });
          $msg_inline_video_iframe_div.html(error_html);
        }
      }
    },
    makeInternalInlineVideo: function(key, video) {
      var max_w = 400;
      var max_h = 500;
      TS.model.inline_videos[key] = video;
      video.src = video.thumbnail.url || key;
      video.display_w = parseInt(video.thumbnail.width, 10);
      video.width = video.display_w;
      video.display_h = parseInt(video.thumbnail.height, 10);
      video.height = video.display_h;
      if (video.display_w > max_w) {
        video.display_w = max_w;
        video.display_h = parseInt(video.height * (video.display_w / video.width), 10);
      }
      if (video.display_h > max_h) {
        video.display_h = max_h;
        video.display_w = parseInt(video.width * (video.display_h / video.height), 10);
      }
      if (!video.html) video.html = "MISSING video.html";
      if (video.html.indexOf("gfycat.com/ifr") > -1) {
        video.html = _maybeRewriteGfyCatHtml(video.html);
      }
      video.html = video.html.replace("http://", "//");
      if (video.html.indexOf("oldwidth") == -1) {
        video.html = video.html.replace(" width=", ' width="' + video.display_w + '" oldwidth=');
        video.html = video.html.replace(" height=", ' height="' + video.display_h + '" oldheight=');
      }
      video.html = TS.inline_videos.enCommentHTML(video.html);
      video.html = TS.utility.swapInRedirUrlForIframe(video.html);
      var proxied_src = TS.utility.getImgProxyURL(video.src, video.display_w, video.display_h);
      if (proxied_src != video.src) {
        video.proxied_src = proxied_src;
      } else {
        delete video.proxied_src;
      }
    },
    test: function() {
      return {
        maybeRewriteGfyCatHtml: _maybeRewriteGfyCatHtml
      };
    }
  });
  var GFYCAT_KEY_REGEXP = /^[a-zA-Z0-9]+$/;
  var _maybeRewriteGfyCatHtml = function(html) {
    var gfycat_attrs = TS.utility.getAttributesFromHTMLString(html);
    var gfycat_src = gfycat_attrs.src;
    if (!gfycat_src) {
      return html;
    }
    var gfycat_key = gfycat_src.split("ifr/")[1] || "";
    if (!gfycat_key.match(GFYCAT_KEY_REGEXP)) {
      return html;
    }
    var gfycat_w = parseInt(gfycat_attrs.width, 10);
    var gfycat_h = parseInt(gfycat_attrs.height, 10);
    if (!gfycat_w || !gfycat_h) {
      return html;
    }
    gfycat_attrs.src = "https://" + document.location.host + "/gfycat_iframe.php?key=" + gfycat_key + "&w=" + gfycat_w + "&h=" + gfycat_h + "&" + Date.now();
    var $gfycat_ifr = $("<iframe>").attr(gfycat_attrs);
    return $gfycat_ifr[0].outerHTML;
  };
})();
(function() {
  "use strict";
  TS.registerModule("inline_attachments", {
    no_scrolling: false,
    expand_sig: new signals.Signal,
    collapse_sig: new signals.Signal,
    shouldExpand: function(container_id, inline_attachment) {
      if (TS.model.expandable_state["attach_" + container_id + inline_attachment.from_url]) return true;
      if (TS.model.expandable_state["attach_" + container_id + inline_attachment.from_url] === false) return false;
      return true;
    },
    shouldShow: function(attachment, msg) {
      if (attachment.is_share) return true;
      if (msg && msg.subtype === "reply_broadcast") return true;
      if (attachment.service_name === "twitter" && msg.subtype === "bot_message") return true;
      if (!attachment.from_url) return true;
      if (msg.standalone_attachment) return true;
      if (msg && msg.text) {
        if (msg.text.indexOf(attachment.from_url) == -1) {
          if (TS.model.ampersands_are_inconsistent_in_from_urls) {
            if (msg.text.indexOf(attachment.from_url.replace(/&/g, "&amp;")) == -1) {
              return true;
            }
          } else {
            return true;
          }
        }
      }
      if (TS.model.prefs.expand_inline_imgs) {
        if (attachment.audio_html) return true;
        if (attachment.other_html) return true;
        if (attachment.video_html) return true;
        if (attachment.image_url) return true;
        if (attachment.service_name && attachment.service_name.toString().toLowerCase() === "twitter") return true;
      }
      return !!TS.model.prefs.expand_non_media_attachments;
    },
    expandAllInCurrent: function() {
      TS.inline_attachments.no_scrolling = true;
      $(".msg_inline_attachment_expander").trigger("click");
      TS.inline_attachments.no_scrolling = false;
      if (TS.client) {
        TS.client.ui.instaScrollMsgsToBottom(false);
      }
    },
    collapseAllInCurrent: function() {
      $(".msg_inline_attachment_collapser").trigger("click");
    },
    expand: function(container_id, src) {
      TS.model.expandable_state["attach_" + container_id + src] = true;
      TS.storage.storeExpandableState(TS.model.expandable_state);
      var selector = "#" + TS.utility.makeSafeForDomId(container_id);
      var $el = $(selector);
      if (!$el.length) return;
      var was_at_bottom = TS.client && TS.client.ui.areMsgsScrolledToBottom();
      var filter = function() {
        return $(this).data("real-src") == src;
      };
      var $holder = $el.find(".inline_attachment").filter(filter);
      $holder.removeClass("hidden");
      $el.find(".msg_inline_attachment_expander").filter(filter).addClass("hidden");
      $el.find(".msg_inline_attachment_collapser").filter(filter).removeClass("hidden");
      if (TS.client) TS.client.ui.checkInlineImgsAndIframesEverywhere();
      $holder.css("opacity", 0).stop().animate({
        opacity: 1
      }, 300);
      if (!TS.inline_attachments.no_scrolling) {
        if (TS.client && was_at_bottom) {
          TS.client.ui.instaScrollMsgsToBottom(false);
          $el.children().first().scrollintoview({
            duration: 0,
            offset: "top",
            px_offset: 10,
            direction: "y"
          });
        } else {
          $holder.scrollintoview({
            duration: 200,
            offset: "bottom",
            px_offset: -10,
            direction: "y"
          });
        }
      }
      TS.inline_attachments.expand_sig.dispatch(container_id);
      if (TS.client) TS.client.ui.checkInlineImgsAndIframesEverywhere();
    },
    collapse: function(container_id, src) {
      TS.model.expandable_state["attach_" + container_id + src] = false;
      TS.storage.storeExpandableState(TS.model.expandable_state);
      var selector = "#" + TS.utility.makeSafeForDomId(container_id);
      var $el = $(selector);
      if (!$el.length) return;
      var filter = function() {
        return $(this).data("real-src") == src;
      };
      var $holder = $el.find(".inline_attachment").filter(filter);
      if (!$holder.length) $holder = $el.find(".msg_inline_attachment_holder").filter(filter);
      $holder.css("visibility", "hidden");
      $el.find(".msg_inline_attachment_expander").filter(filter).removeClass("hidden");
      $el.find(".msg_inline_attachment_collapser").filter(filter).addClass("hidden");
      TS.inline_attachments.collapse_sig.dispatch(container_id);
      setTimeout(function() {
        $holder.addClass("hidden");
        $holder.css("visibility", "visible");
      }, 200);
    },
    checkForInlineAttachmentClick: function(e) {
      if (!e.target) return;
      var $el = $(e.target);
      var container_id;
      var msg_id;
      var $message = $el.closest(".message");
      msg_id = $message.data("ts");
      container_id = $message.attr("id");
      if (!container_id) return;
      var $msg_inline_attachment_expander = $el.closest(".msg_inline_attachment_expander");
      if ($msg_inline_attachment_expander.length) {
        e.preventDefault();
        TS.inline_attachments.expand(container_id, $msg_inline_attachment_expander.data("real-src"));
      }
      var $msg_inline_attachment_collapser = $el.closest(".msg_inline_attachment_collapser");
      if ($msg_inline_attachment_collapser.length) {
        e.preventDefault();
        TS.inline_attachments.collapse(container_id, $msg_inline_attachment_collapser.data("real-src"));
      }
      var $rest_text_expander = $el.closest(".rest_text_expander");
      if ($rest_text_expander.length) {
        e.preventDefault();
        var was_at_bottom = TS.client && TS.client.ui.areMsgsScrolledToBottom();
        var $short_text = $rest_text_expander.parent().find(".short_text");
        var $rest_text_expander_text;
        var $more_text = $rest_text_expander.parent().find(".more_text");
        if ($rest_text_expander.data("show-text")) {
          if ($more_text.length) {
            $more_text.addClass("hidden");
            $rest_text_expander_text = $rest_text_expander.find("a span");
            $rest_text_expander.data("hide-text", $rest_text_expander_text.text());
            $rest_text_expander_text.text($rest_text_expander.data("show-text"));
            $rest_text_expander.data("show-text", "");
            $rest_text_expander.find("a .ts_icon").removeClass("ts_icon_caret_down").addClass("ts_icon_caret_right");
          }
        } else {
          var all_text = $short_text.attr("data-all-text");
          if (all_text) {
            $short_text.html(all_text);
            $short_text.data("all-text", "");
          }
          if ($more_text.length) $more_text.removeClass("hidden");
          if ($more_text.length && $rest_text_expander.data("hide-text")) {
            $rest_text_expander_text = $rest_text_expander.find("a span");
            $rest_text_expander.data("show-text", $rest_text_expander_text.text());
            $rest_text_expander_text.text($rest_text_expander.data("hide-text"));
            $rest_text_expander.data("hide-text", "");
            $rest_text_expander.find("a .ts_icon").removeClass("ts_icon_caret_right").addClass("ts_icon_caret_down");
          } else {
            $rest_text_expander.css("display", "none");
          }
        }
        $short_text.css("opacity", 0).transition({
          opacity: 1
        }, 300);
        TS.inline_attachments.rest_texts_expanded[$rest_text_expander.attr("id")] = true;
        if (TS.client) TS.ui.utility.updateClosestMonkeyScroller($short_text);
        if (TS.client && was_at_bottom) {
          TS.client.ui.instaScrollMsgsToBottom(false);
          $short_text.scrollintoview({
            duration: 0,
            offset: "top",
            px_offset: 10,
            direction: "y"
          });
        }
      }
      var $delete_attachment_link = $el.closest(".delete_attachment_link");
      if ($delete_attachment_link.length) {
        e.preventDefault();
        var attach_id = $delete_attachment_link.data("attachment-id").toString();
        var model_ob_id = $message.attr("data-model-ob-id");
        var model_ob = TS.shared.getModelObById(model_ob_id);
        if (!model_ob) {
          alert("missing model_ob");
          return;
        }
        if (!attach_id) {
          alert("missing attachment-id");
          return;
        }
        var c_id = model_ob.id;
        var msg = TS.utility.msgs.getMsg(msg_id, model_ob.msgs);
        var blacklist_html = "";
        if (TS.model.user.is_admin) {
          var attachment = _.find(msg.attachments, {
            id: attach_id
          });
          if (attachment && attachment.from_url) {
            var select_html = TS.inline_attachments.makeBlackListSelect(attachment.from_url);
            var disable = TS.i18n.t("Disable future attachments from this website?", "inline_attachments")();
            blacklist_html = '						<p class="large_left_margin ' + (select_html ? "no_bottom_margin" : "") + '">							<label class="checkbox normal" style="font-size: 16px;">								<input id="attachment_blacklist_cb" type="checkbox" class="small_right_margin" />' + disable + "</label>";
            if (select_html) blacklist_html += select_html;
            blacklist_html += "</p>";
          }
        }
        var remove_conf_msg = TS.i18n.t("Are you sure you wish to remove this attachment from the message?", "inline_attachments")();
        var body = '<p class="' + (blacklist_html ? "small_bottom_margin" : "") + '">' + remove_conf_msg + "</p>" + blacklist_html;
        TS.generic_dialog.start({
          title: TS.i18n.t("Remove attachment", "inline_attachments")(),
          body: body,
          go_button_text: TS.i18n.t("Yes, remove", "inline_attachments")(),
          onShow: function() {
            $("#attachment_blacklist_cb").bind("change", function() {
              var do_blacklist = !!$("#attachment_blacklist_cb").prop("checked");
              TS.info(do_blacklist);
              if (do_blacklist) {
                $("#attachment_blacklist_select").prop("disabled", false);
              } else {
                $("#attachment_blacklist_select").prop("disabled", true);
              }
            });
          },
          onGo: function() {
            if (msg.is_ephemeral) {
              msg.attachments = TS.inline_attachments.removeAttachmentById(msg.attachments, attach_id);
              TS.utility.msgs.replaceMsg(model_ob, msg, false, true);
            } else {
              var do_blacklist = !!$("#attachment_blacklist_cb").prop("checked");
              var blacklist_type = do_blacklist ? $("#attachment_blacklist_select").val() : "none";
              var blacklist_url = do_blacklist ? $("#attachment_blacklist_select").find(":selected").data("url") : "";
              var args = {
                channel: c_id,
                ts: msg_id,
                attachment: attach_id,
                blacklist_type: blacklist_type,
                blacklist_url: blacklist_url
              };
              TS.dir(0, args);
              TS.api.call("chat.deleteAttachment", args, function(ok) {
                if (ok) {
                  if (TS.web) {
                    msg.attachments = TS.inline_attachments.removeAttachmentById(msg.attachments, attach_id);
                    TS.utility.msgs.replaceMsg(model_ob, msg);
                  }
                } else {
                  var error = TS.i18n.t("Attachment removing failed!", "inline_attachments")();
                  TS.generic_dialog.alert(error);
                }
              });
            }
          }
        });
      }
    },
    makeBlackListSelect: function(url) {
      if (!url) return "";
      url = TS.utility.htmlEntities(url).replace("https://", "").replace("http://", "");
      var html = "";
      var parts = url.split("/");
      var host = parts[0];
      var last = parts[parts.length - 1];
      var host_msg = TS.i18n.t("All links from {host}", "inline_attachments")({
        host: host
      });
      var url_msg = TS.i18n.t("Just the link {url}", "inline_attachments")({
        url: url
      });
      var path_msg = TS.i18n.t("All links under {host_path}", "inline_attachments")({
        host_path: host_path
      });
      html += '<label class="select small full_width">\r';
      html += '<select id="attachment_blacklist_select" disabled="disabled" class="small" style="margin-bottom: 4px;">\r';
      html += '<option value="all" data-url="' + host + '">' + host_msg + "</option>\r";
      html += '<option value="just" data-url="' + url + '">' + url_msg + "</option>\r";
      if (last != host) {
        TS.info(last);
        var new_parts = parts.concat();
        new_parts.length -= 1;
        var host_path = new_parts.join("/");
        if (host_path != host) {
          host_path += "/";
          html += '<option value="under" data-url="' + host_path + '">' + path_msg + "</option>\r";
        }
      }
      html += "</select>\r";
      html += "</label>\r";
      return html;
    },
    rest_texts_expanded: {},
    shouldExpandText: function(id) {
      return !!TS.inline_attachments.rest_texts_expanded[id];
    },
    renderStandaloneAttachment: function(attachment) {
      TS.inline_attachments.massageAttachment(attachment, 0);
      if (attachment.image_url && !TS.model.inline_imgs[attachment.from_url]) {
        if (!attachment.from_url) {
          attachment.from_url = attachment.image_url;
        }
        TS.inline_imgs.makeInternalInlineImg(attachment.from_url, {
          link_url: attachment.from_url,
          bytes: attachment.image_bytes,
          src: attachment.image_url,
          width: isNaN(attachment.image_width) ? null : attachment.image_width,
          height: isNaN(attachment.image_height) ? null : attachment.image_height,
          should_expand: true
        });
      }
      if (attachment.video_html && !TS.model.inline_videos[attachment.from_url]) {
        TS.inline_videos.makeInternalInlineVideo(attachment.from_url, {
          src: attachment.thumb_url,
          html: attachment.video_html,
          proxied_src: attachment.proxied_thumb_url,
          title: attachment.title,
          display_h: attachment.video_html_height,
          display_w: attachment.video_html_width,
          thumbnail: {
            link_url: attachment.from_url,
            url: attachment.thumb_url,
            height: attachment.thumb_height,
            width: attachment.thumb_width
          }
        });
      }
      var msg_id = TS.utility.date.makeTsStamp();
      var attachment_html = TS.templates.builders.buildAttachmentHTML({
        attachment: attachment,
        msg: {
          enable_slack_action_links: false,
          text: attachment.from_url,
          ts: msg_id,
          url: attachment.from_url,
          standalone_attachment: attachment.standalone_attachment || false
        },
        can_delete: false,
        maybe_show_file_viewer: false,
        has_content: TS.utility.attachments.hasContent(attachment),
        from_post: true,
        model_ob: TS.shared.getModelObById(attachment.channel_id)
      });
      var container_id = TS.templates.makeMsgDomId(msg_id);
      return '<div class="message standalone-attachment" id="' + container_id + '" data-ts="' + msg_id + '">' + attachment_html + "</div>";
    },
    massageAttachment: function(attachment, index) {
      attachment._index = index;
      if ("id" in attachment) attachment.id = attachment.id.toString();
      var short_text_limit = 500;
      var short_text_br_limit = 3;
      var short_text = "";
      var short_text_display_length = 0;
      if (attachment.text) {
        var rest_text = "";
        var markup_chunk = "";
        var label = "";
        var c;
        var br_count = 0;
        var stop_at_next_space = false;
        for (var i = 0; i < attachment.text.length; i += 1) {
          c = attachment.text.charAt(i);
          if (markup_chunk || c === "<") {
            markup_chunk += c;
            if (label || c === "|") {
              label += c;
            }
            if (c === ">") {
              short_text += markup_chunk;
              short_text_display_length += label.length - 2;
              if (short_text_display_length > short_text_limit) {
                stop_at_next_space = true;
              }
              markup_chunk = "";
              label = "";
            }
          } else {
            if (c === "\n") {
              br_count += 1;
            }
            if (br_count > short_text_br_limit + 1) {
              rest_text = attachment.text.replace(short_text, "");
              break;
            }
            short_text += c;
            short_text_display_length += 1;
            if (short_text_display_length > short_text_limit) {
              stop_at_next_space = true;
            }
            if (stop_at_next_space && c === " ") {
              rest_text = attachment.text.replace(short_text, "");
              break;
            }
          }
        }
        attachment._short_text = short_text == attachment.text ? "" : short_text;
        var tbt_before = short_text.match(/```/g);
        var tbt_after = rest_text.match(/```/g);
        if (tbt_before && tbt_after) {
          attachment._short_text += "```";
        }
      }
      attachment._floated_thumb_display_height = 75;
      attachment._floated_thumb_display_width = 75;
      if (attachment.thumb_height && attachment.thumb_width) {
        if (attachment.thumb_height > attachment.thumb_width) {
          attachment._floated_thumb_display_width = parseInt(attachment.thumb_width * (attachment._floated_thumb_display_height / attachment.thumb_height), 10);
        } else {
          attachment._floated_thumb_display_height = parseInt(attachment.thumb_height * (attachment._floated_thumb_display_width / attachment.thumb_width), 10);
        }
      }
      var proxied_thumb_url = TS.utility.getImgProxyURL(attachment.thumb_url, attachment._floated_thumb_display_width, attachment._floated_thumb_display_height);
      if (proxied_thumb_url != attachment.thumb_url) {
        attachment.proxied_thumb_url = proxied_thumb_url;
      } else {
        delete attachment.proxied_thumb_url;
      }
    },
    getAttachmentByFromUrl: function(attachments, url) {
      if (!attachments) return null;
      for (var i = 0; i < attachments.length; i += 1) {
        if (!attachments[i]) {
          TS.info(url);
          TS.dir(0, attachments);
          continue;
        }
        if (!attachments[i].from_url) {
          continue;
        }
        if (attachments[i].from_url == url) {
          return attachments[i];
        }
        if (TS.model.ampersands_are_inconsistent_in_from_urls) {
          if (attachments[i].from_url.replace(/&/g, "&amp;") == url) {
            return attachments[i];
          }
        }
      }
      return null;
    },
    getAttachmentBySlackFileId: function(attachments, slack_file_id) {
      if (!attachments) return null;
      if (!slack_file_id) return null;
      for (var i = 0; i < attachments.length; i += 1) {
        if (!attachments[i]) {
          continue;
        }
        if (attachments[i].slack_file_id == slack_file_id) {
          return attachments[i];
        }
      }
      return null;
    },
    removeAttachmentById: function(attachments, id) {
      if (!attachments) return null;
      var A = [];
      for (var i = 0; i < attachments.length; i += 1) {
        if (attachments[i].id != id) {
          A.push(attachments[i]);
        }
      }
      return A;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("inline_others", {
    no_scrolling: false,
    expand_sig: new signals.Signal,
    collapse_sig: new signals.Signal,
    onStart: function() {},
    shouldExpand: function(container_id, inline_other) {
      if (TS.model.expandable_state["vid_" + container_id + inline_other.src]) return true;
      if (TS.model.expandable_state["vid_" + container_id + inline_other.src] === false) return false;
      if (inline_other.internal_file_id) return TS.model.prefs.expand_internal_inline_imgs;
      return TS.model.prefs.expand_inline_imgs;
    },
    expandAllInCurrent: function() {
      var $collapsed_togglers = $(".msg_inline_media_toggler[data-media-type=other]:not(.expanded)");
      if (!$collapsed_togglers.length) return;
      TS.inline_others.no_scrolling = true;
      $collapsed_togglers.trigger("click");
      TS.inline_others.no_scrolling = false;
      if (TS.client) {
        TS.client.ui.instaScrollMsgsToBottom(false);
      }
    },
    collapseAllInCurrent: function() {
      $(".msg_inline_media_toggler[data-media-type=other].expanded").trigger("click");
    },
    expand: function(container_id, src) {
      TS.model.expandable_state["vid_" + container_id + src] = true;
      TS.storage.storeExpandableState(TS.model.expandable_state);
      var selector = "#" + TS.utility.makeSafeForDomId(container_id);
      var $el = $(selector);
      if (!$el.length) return;
      var was_at_bottom = TS.client && TS.client.ui.areMsgsScrolledToBottom();
      var filter = function() {
        return $(this).data("real-src") == src;
      };
      var $holder = TS.boot_data.feature_attachments_inline ? $el.find(".inline_attachment").filter(filter) : null;
      if (!$holder || !$holder.length) $holder = $el.find(".msg_inline_other_holder").filter(filter);
      $holder.removeClass("hidden");
      $el.find(".msg_inline_media_toggler[data-media-type=other]:not(.expanded)").filter(filter).addClass("expanded");
      if (TS.client) TS.client.ui.checkInlineImgsAndIframesEverywhere();
      $holder.css("opacity", 0).stop().animate({
        opacity: 1
      }, 300);
      if (!TS.inline_others.no_scrolling) {
        if (TS.client && was_at_bottom) {
          TS.client.ui.instaScrollMsgsToBottom(false);
          $el.children().first().scrollintoview({
            duration: 0,
            offset: "top",
            px_offset: 10,
            direction: "y"
          });
        } else {
          $el.find(".msg_inline_other").last().scrollintoview({
            duration: 200,
            offset: "bottom",
            px_offset: -10,
            direction: "y"
          });
        }
      }
      TS.inline_others.expand_sig.dispatch(container_id);
      if (TS.client) TS.client.ui.checkInlineImgsAndIframesEverywhere();
    },
    collapse: function(container_id, src) {
      TS.model.expandable_state["vid_" + container_id + src] = false;
      TS.storage.storeExpandableState(TS.model.expandable_state);
      var selector = "#" + TS.utility.makeSafeForDomId(container_id);
      var $el = $(selector);
      if (!$el.length) return;
      var filter = function() {
        return $(this).data("real-src") == src;
      };
      var $holder = TS.boot_data.feature_attachments_inline ? $el.find(".inline_attachment").filter(filter) : null;
      if (!$holder || !$holder.length) $holder = $el.find(".msg_inline_other_holder").filter(filter);
      $holder.css("visibility", "hidden");
      $el.find(".msg_inline_media_toggler[data-media-type=other].expanded").filter(filter).removeClass("expanded");
      $holder.find(".msg_inline_other_iframe_div").html("");
      TS.inline_others.collapse_sig.dispatch(container_id);
      setTimeout(function() {
        $holder.addClass("hidden");
        $holder.css("visibility", "visible");
      }, 200);
    },
    checkForInlineOtherClick: function(e) {
      if (!e.target) return;
      var $el = $(e.target);
      var container_id;
      var $message = $el.closest(".message");
      container_id = $message.attr("id");
      if (!container_id) return;
      var $msg_inline_media_toggler = $el.closest(".msg_inline_media_toggler[data-media-type=other]");
      if ($msg_inline_media_toggler.length) {
        e.preventDefault();
        var src = $msg_inline_media_toggler.data("real-src");
        if ($msg_inline_media_toggler.hasClass("expanded")) {
          TS.inline_others.collapse(container_id, src);
        } else {
          TS.inline_others.expand(container_id, src);
        }
      }
    },
    makeInternalInlineOther: function(attachment) {
      var max_w = 400;
      var max_h = 500;
      if (attachment.other_html_width > max_w) {
        attachment.other_html_height = parseInt(attachment.other_html_height * (max_w / attachment.other_html_width), 10);
        attachment.other_html_width = max_w;
      }
      if (attachment.other_html_height > max_h) {
        attachment.other_html_width = parseInt(attachment.other_html_width * (max_h / attachment.other_html_height), 10);
        attachment.other_html_height = max_h;
      }
      var google_map_config;
      if (attachment.google_map_config) {
        google_map_config = TS.utility.parseJSONOrElse(attachment.google_map_config, undefined);
      }
      if (google_map_config && google_map_config.center && typeof google_map_config.center.lat !== "string") {
        google_map_config.scrollwheel = false;
        var dom_id = "googmap_" + (_googmap_index += 1);
        attachment.other_html = '<div class="google-maps" id="' + dom_id + '" style="width:100%; min-width:' + TS.utility.htmlEntities(attachment.other_html_width) + "px; height:" + TS.utility.htmlEntities(attachment.other_html_height) + 'px;"></div>			<script>TS.inline_others.runGoogleMapCode("' + dom_id + "\", '" + JSON.stringify(google_map_config) + "')</script>";
        attachment.safe_other_html = attachment.other_html;
      } else {
        if (attachment.other_html.indexOf("oldwidth") == -1) {
          attachment.other_html = attachment.other_html.replace(" width=", ' width="' + attachment.other_html_width + '" oldwidth=');
          attachment.other_html = attachment.other_html.replace(" height=", ' height="' + attachment.other_html_height + '" oldheight=');
        }
        attachment.safe_other_html = attachment.other_html;
        attachment.safe_other_html = TS.utility.swapInRedirUrlForIframe(attachment.safe_other_html);
        if (TS.client) attachment.safe_other_html = TS.utility.getPlaceholderHTMLFromIframe(attachment.safe_other_html);
      }
      TS.model.inline_others[attachment.other_html] = {
        src: TS.utility.htmlEntities(attachment.other_html),
        attachment: attachment
      };
    },
    runGoogleMapCode: function(map_id, config_str) {
      if (!window.google) return;
      if (!config_str) return;
      var config = JSON.parse(config_str);
      var map = new google.maps.Map(document.getElementById(map_id), config);
      if (!config.query) return;
      var geocoder = new google.maps.Geocoder;
      var max_results = typeof config.max_results === "number" ? config.max_results : 10;
      if (max_results < 0) {
        max_results = Number.MAX_VALUE;
      }
      var boundsChangedHandler = function() {
        google.maps.event.clearListeners(map, "bounds_changed");
        var bounds = map.getBounds();
        var markers_placed = 0;
        var mapperFunction = function(maps_result) {
          new google.maps.Marker({
            map: map,
            position: maps_result.geometry.location
          });
          markers_placed += 1;
        };
        var geocodeHandler = function(results, status) {
          var has_exact_match = false;
          if (status == google.maps.GeocoderStatus.OK) {
            results.slice(0, max_results).forEach(function(result) {
              mapperFunction(result);
              has_exact_match = has_exact_match || !result.partial_match;
            });
          } else {
            TS.warn("Geocoder failed due to: " + status);
          }
          if (!has_exact_match && markers_placed < max_results) {
            var place = new google.maps.places.PlacesService(map);
            var nearbySearchHandler = function(results, status) {
              if (status == google.maps.places.PlacesServiceStatus.OK) {
                results.slice(0, max_results - markers_placed).map(mapperFunction);
              } else {
                TS.warn("PlacesService failed due to: " + status);
              }
            };
            place.nearbySearch({
              bounds: bounds,
              name: config.query
            }, nearbySearchHandler);
          }
        };
        geocoder.geocode({
          address: config.query,
          bounds: bounds
        }, geocodeHandler);
      };
      google.maps.event.addListener(map, "bounds_changed", boundsChangedHandler);
    }
  });
  var _googmap_index = 0;
})();
(function() {
  "use strict";
  TS.registerModule("msg_edit", {
    edit_started_sig: new signals.Signal,
    edit_ended_sig: new signals.Signal,
    editing: false,
    editing_in_msg_pane: false,
    editing_in_convo_pane: false,
    deleting_from_editing: false,
    current_msg: null,
    current_model_ob: null,
    mousedown_active: false,
    edit_interv: 0,
    onStart: function() {},
    onCountDownInterval: function() {
      if (!TS.msg_edit.current_msg) return;
      if (TS.model.team.prefs.msg_edit_window_mins == -1 || _.get(TS.msg_edit.current_model_ob, "is_self_im")) {
        $("#edit_countdown").empty();
        return;
      }
      var exp = TS.utility.date.toDateObject(TS.msg_edit.current_msg.ts).getTime() + TS.model.team.prefs.msg_edit_window_mins * 60 * 1e3;
      var seconds = Math.floor((exp - Date.now()) / 1e3);
      if (seconds < 1) {
        $("#edit_countdown").html(TS.i18n.t("(your time to edit ran out)", "msg_edit")() + "&nbsp&nbsp&nbsp&nbsp");
      } else if (seconds < 61) {
        $("#edit_countdown").html(TS.i18n.t("(you have <strong>{seconds_count, number}</strong> seconds)", "msg_edit")({
          seconds_count: seconds
        }) + "&nbsp&nbsp&nbsp&nbsp");
      } else {
        $("#edit_countdown").empty();
      }
    },
    cancelEditingINothingHasChanged: function() {
      if (!TS.msg_edit.editing) return true;
      var original_msg_text = TS.format.unFormatMsg(TS.msg_edit.current_msg.text);
      var edited_text = TS.utility.contenteditable.value($("#message_edit_form").find("#msg_text"));
      if (edited_text === original_msg_text) {
        TS.msg_edit.onCancelEdit();
        return true;
      }
      return false;
    },
    editExpiration: function(minutes) {
      if (minutes > 0) {
        var msg_edit_duration_text = _getReadableMessageEditDuration(minutes);
        if (TS.model.user.is_admin) {
          return '<p class="no_bottom_margin">' + TS.i18n.t('On this team, you can’t edit a message after more than <strong>{msg_edit_duration_text}</strong>. Admins can adjust this in <a href="/admin/settings#message_editing" target="_new">Team&nbsp;Settings</a>.', "msg_edit")({
            msg_edit_duration_text: msg_edit_duration_text
          }) + "</p>";
        }
        return '<p class="no_bottom_margin">' + TS.i18n.t("On this team, you can’t edit a message after more than <strong>{msg_edit_duration_text}</strong>. Admins can adjust this in Team&nbsp;Settings.", "msg_edit")({
          msg_edit_duration_text: msg_edit_duration_text
        }) + "</p>";
      }
      if (TS.model.user.is_admin) {
        return '<p class="no_bottom_margin">' + TS.i18n.t('On this team, you can’t edit messages after the fact. Admins can adjust this in <a href="/admin/settings#message_editing" target="_new">Team&nbsp;Settings</a>.', "msg_edit")() + "</p>";
      }
      return '<p class="no_bottom_margin">' + TS.i18n.t("On this team, you can’t edit messages after the fact. Admins can adjust this in Team&nbsp;Settings.", "msg_edit")() + "</p>";
    },
    startEdit: function(msg_ts, model_ob, edit_state) {
      if ($("#message_edit_form").length && !TS.msg_edit.cancelEditingINothingHasChanged()) {
        TS.msg_edit.promptEdit();
        return;
      }
      if (!msg_ts) {
        TS.error("no msg_ts?");
        return null;
      }
      if (!model_ob) {
        TS.error("no model_ob?");
        return null;
      }
      if (!model_ob.msgs) {
        TS.error("no model_ob.msgs?");
        return null;
      }
      var msg = TS.utility.msgs.getMsg(msg_ts, _getMsgs(model_ob));
      if (!msg) {
        msg = TS.ui.replies.getActiveMessage(model_ob, msg_ts);
      }
      if (TS.model.threads_view_is_showing && !msg) {
        msg = TS.client.threads.getMessage(model_ob, msg_ts);
      }
      if (!msg) {
        TS.error("no msg in msgs?");
        return null;
      }
      if (TS.boot_data.feature_thanks && msg._handy_rxns_poll_data) {
        return TS.ui.handy_rxns.startPollDialog(model_ob.id, msg_ts);
      }
      var original_msg_text = TS.format.unFormatMsg(msg.text);
      var is_reopening_after_failed_edit = edit_state && edit_state.force_reopen;
      if (!is_reopening_after_failed_edit) {
        var now = Date.now();
        var ts = TS.utility.date.toDateObject(msg.ts);
        var elapsed = now - ts;
        var elapsed_minutes = elapsed / 6e4;
        if (TS.model.team.prefs.msg_edit_window_mins >= 0 && elapsed_minutes > TS.model.team.prefs.msg_edit_window_mins && !model_ob.is_self_im) {
          TS.warn("Editing unavailable on channel " + model_ob.id + ", msg with ts = " + msg.ts + ". now = " + now + ", elapsed (minutes) = " + elapsed_minutes + ", msg_edit_window_mins = " + TS.model.team.prefs.msg_edit_window_mins);
          var title = TS.model.team.prefs.msg_edit_window_mins > 0 ? TS.i18n.t("This message can’t be edited", "msg_edit")() : TS.i18n.t("Messages can’t be edited", "msg_edit")();
          TS.generic_dialog.alert(TS.msg_edit.editExpiration(TS.model.team.prefs.msg_edit_window_mins), title, TS.i18n.t("Got It", "msg_edit")());
          return;
        }
      }
      var was_at_bottom = TS.client && TS.client.ui.areMsgsScrolledToBottom();
      var msg_el;
      if (edit_state === "convo") {
        TS.msg_edit.editing_in_msg_pane = false;
        TS.msg_edit.editing_in_convo_pane = true;
        msg_el = TS.msg_edit.getDivForMsgInConvoPane(msg.ts);
      } else {
        TS.msg_edit.editing_in_msg_pane = true;
        TS.msg_edit.editing_in_convo_pane = false;
        msg_el = TS.msg_edit.getDivForMsgInMsgPane(msg.ts);
      }
      if (!msg_el.length) {
        TS.error("no msg div for edit");
        return null;
      }
      TS.msg_edit.current_msg = msg;
      TS.msg_edit.current_model_ob = model_ob;
      msg_el.addClass("hidden");
      var edit_text = original_msg_text;
      if (edit_state && edit_state.text) {
        edit_text = edit_state.text;
      }
      var html = TS.templates.message_edit_form({
        msg: msg,
        edit_text: edit_text,
        permalink: TS.utility.msgs.constructMsgPermalink(model_ob, msg.ts, msg.thread_ts),
        include_emo: !!TS.client,
        relative_ts: TS.utility.msgs.isMsgReply(msg)
      });
      msg_el.after(html);
      var form = $("#message_edit_form");
      var $form = form;
      var input = form.find("#msg_text");
      if (TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty()) {
        TS.utility.contenteditable.create(input, {
          modules: {
            tabcomplete: {
              positionMenu: function(menu) {
                menu.style.width = input.outerWidth() + "px";
                TS.tabcomplete.positionUIRelativeToInput(menu, input);
              }
            }
          },
          onEnter: function() {
            TS.msg_edit.checkAndSubmit(input, form);
            return false;
          },
          onEscape: function() {
            if (!TS.model.menu_is_showing && !TS.model.dialog_is_showing) setTimeout(TS.msg_edit.onCancelEdit, 0);
          },
          onTextChange: function() {
            TS.msg_edit.checkLengthAndUpdateMessage(input);
          }
        });
        TS.utility.contenteditable.enable(input);
        input.on("keyup", function() {
          var cursor_position = TS.utility.contenteditable.cursorPosition(input);
          if (!cursor_position.length) {
            var msgs_scroller_dimensions = TS.client && TS.client.ui.getCachedDimensionsRect("cached_msgs_scroller_rect", TS.client.ui.$msgs_scroller_div);
            if (!TS.client || form.outerHeight() < msgs_scroller_dimensions.height) {
              $form.find(".edit_controls").scrollintoview({
                px_offset: -50
              });
            }
          }
        });
        TS.utility.contenteditable.value(input, edit_text);
      }
      TS.msg_edit.checkLengthAndUpdateMessage(input);
      TS.info("message_edit_form added");
      TS.msg_edit.editing = true;
      TS.msg_edit.edit_started_sig.dispatch();
      form.bind("destroyed", function() {
        TS.info("message_edit_form removed");
        TS.msg_edit.editing = false;
        TS.msg_edit.editing_in_msg_pane = false;
        TS.msg_edit.editing_in_convo_pane = false;
        TS.msg_edit.edit_ended_sig.dispatch();
        if (!TS.boot_data.feature_texty_takes_over || !TS.utility.contenteditable.supportsTexty()) TSSSB.call("inputFieldRemoved", input.get(0));
        form = null;
        input = null;
        TS.msg_edit.resetEditUI();
      });
      if (!TS.boot_data.feature_texty_takes_over || !TS.utility.contenteditable.supportsTexty()) {
        input.TS_tabComplete({
          complete_cmds: false,
          complete_channels: true,
          complete_user_groups: true,
          complete_emoji: true,
          complete_member_specials: true,
          no_tab_out: true,
          onComplete: function(txt, new_cp) {
            TS.utility.populateInput(input, txt, new_cp);
          },
          sort_by_membership: true,
          include_self: !!TS.boot_data.feature_name_tagging_client,
          model_ob: model_ob
        });
      }
      var tab_complete_ui_props = {
        id: "msg_edit_tab_ui",
        scroll_with_element: !!TS.client,
        model_ob: model_ob
      };
      var in_flexpane = input.closest("#col_flex").length > 0;
      if (in_flexpane) {
        tab_complete_ui_props.min_width = 300;
        tab_complete_ui_props.narrow = !!TS.client;
      }
      input.tab_complete_ui(tab_complete_ui_props);
      if (!TS.boot_data.feature_texty_takes_over || !TS.utility.contenteditable.supportsTexty()) TSSSB.call("inputFieldCreated", input.get(0));
      form.bind("submit", function(e) {
        e.preventDefault();
        var edited_text = TS.utility.contenteditable.value(input);
        if (edited_text === original_msg_text) {
          TS.msg_edit.onCancelEdit();
          return;
        }
        if (!edited_text) {
          var msg_actions = TS.utility.msgs.getMsgActions(msg, model_ob);
          var in_thread = TS.boot_data.feature_new_broadcast && msg_el.attr("id") === TS.templates.makeMsgDomIdInConversation(msg_ts) || msg_el.attr("id") === TS.templates.makeMsgDomIdInThreadsView(msg_ts);
          if (TS.boot_data.feature_new_broadcast && msg_actions.remove_broadcast && !in_thread) {
            TS.msg_edit.startRemoveBroadcast(TS.msg_edit.current_msg.ts, TS.msg_edit.current_model_ob, true);
          } else if (msg_actions.delete_msg) {
            TS.msg_edit.startDelete(TS.msg_edit.current_msg.ts, TS.msg_edit.current_model_ob, TS.msg_edit.onCancelEdit, true);
          } else {
            TS.msg_edit.onConfirmEdit("~" + msg.text.replace(/~/g, "") + "~");
          }
          return;
        }
        var blocked_keyword = TS.ui.needToBlockAtChannelKeyword(edited_text, null, TS.msg_edit.current_model_ob.id);
        if (blocked_keyword) {
          TS.generic_dialog.alert("<p>" + TS.i18n.t("A Team Owner has restricted the use of <strong>{blocked_keyword}</strong> messages.", "msg_edit")({
            blocked_keyword: TS.utility.htmlEntities(blocked_keyword)
          }) + "</p>");
          return;
        }
        if (!$.trim(edited_text)) return;
        TS.msg_edit.onConfirmEdit(edited_text);
      });
      if (!TS.boot_data.feature_texty_takes_over || !TS.utility.contenteditable.supportsTexty()) {
        input.bind("textchange", function() {
          TS.msg_edit.checkLengthAndUpdateMessage(input);
        }).bind("keyup", function() {
          var selection;
          var msgs_scroller_dimensions = TS.client && TS.client.ui.getCachedDimensionsRect("cached_msgs_scroller_rect", TS.client.ui.$msgs_scroller_div);
          if (window.getSelection) {
            selection = window.getSelection();
            if (selection && selection.toString && !selection.toString()) {
              if (!TS.client || form.outerHeight() < msgs_scroller_dimensions.height) {
                $form.find(".edit_controls").scrollintoview({
                  px_offset: -50
                });
              }
            }
          }
        }).bind("keydown", function(e) {
          if (e.which == TS.utility.keymap.enter && (e.ctrlKey || e.altKey)) {
            if (!TS.model.is_mac || (TS.model.is_FF || TS.model.is_electron || TS.model.is_chrome_desktop)) {
              var p = input.getCursorPosition();
              var val = input.val();
              input.val(val.substr(0, p) + "\n" + val.substr(p));
              input.trigger("autosize").trigger("autosize-resize");
              input.setCursorPosition(p + 1);
            }
          } else if (e.which == TS.utility.keymap.enter) {
            if (!(TS.model.prefs.enter_is_special_in_tbt && TS.utility.isCursorWithinTBTs(input) && !e.shiftKey)) {
              if (TS.model.prefs.enter_is_special_in_tbt && TS.utility.isCursorWithinTBTs(input) && e.shiftKey) {
                e.preventDefault();
                TS.msg_edit.checkAndSubmit(input, form);
              } else if (input.tab_complete_ui("isShowing")) {
                e.preventDefault();
              } else if (!e.shiftKey && !e.altKey) {
                e.preventDefault();
                TS.msg_edit.checkAndSubmit(input, form);
              }
            }
          }
        }).autosize({
          boxOffset: 18
        });
        $("body").bind("keydown.close_message_edit_form", function(e) {
          if (e.which == TS.utility.keymap.esc) {
            if (input.tab_complete_ui("isShowing") || input.tab_complete_ui("wasJustHidden")) return;
            if (!TS.model.menu_is_showing && !TS.model.dialog_is_showing) setTimeout(TS.msg_edit.onCancelEdit, 0);
          }
        });
      }
      form.find("#commit_edit").bind("click", function() {
        TS.msg_edit.checkAndSubmit(input, form);
      });
      form.find("#cancel_edit").bind("click", function() {
        TS.msg_edit.onCancelEdit();
      });
      form.bind("mousedown", function() {
        TS.msg_edit.mousedown_active = true;
      });
      form.bind("mouseup", function() {
        TS.msg_edit.mousedown_active = false;
      });
      var $emo_menu = form.find(".emo_menu");
      $emo_menu.removeClass("hidden");
      $emo_menu.bind("click.open_dialog", function(e) {
        TS.ui.react_emoji_menu.start({
          e: e,
          input_to_fill: "#msg_text"
        });
      });
      if (TS.client && was_at_bottom) {
        TS.client.ui.instaScrollMsgsToBottom(false);
      }
      var msgs_scroller_dimensions = TS.client && TS.client.ui.getCachedDimensionsRect("cached_msgs_scroller_rect", TS.client.ui.$msgs_scroller_div);
      if (!TS.client || form.outerHeight() < msgs_scroller_dimensions.height) {
        $form.find(".edit_controls").scrollintoview({
          duration: 500,
          px_offset: -50,
          complete: function() {
            TS.msg_edit.focusAndSetCursorPosition(input, edit_state);
          }
        });
      } else {
        TS.msg_edit.focusAndSetCursorPosition(input, edit_state);
        $form.find(".edit_controls").scrollintoview({
          duration: 500,
          px_offset: -50
        });
      }
      if (TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty()) {
        $("#message_edit_form [contenteditable=true]").attr("spellcheck", !!TS.model.prefs.webapp_spellcheck);
      } else {
        $("#msg_text").attr("spellcheck", !!TS.model.prefs.webapp_spellcheck);
      }
      TS.msg_edit.onCountDownInterval();
      TS.msg_edit.edit_interv = setInterval(TS.msg_edit.onCountDownInterval, 1e3);
    },
    isMessageTooLong: function(input) {
      return TS.format.cleanMsg(TS.utility.contenteditable.value(input)).length > TS.model.input_maxlength;
    },
    updateTooLongWarning: function(input, too_long) {
      if (too_long) {
        $(input).parent().find(".edit_warning").removeClass("hidden");
      } else {
        $(input).parent().find(".edit_warning").addClass("hidden");
      }
    },
    checkLengthAndUpdateMessage: function(input) {
      var too_long = TS.msg_edit.isMessageTooLong(input);
      TS.msg_edit.updateTooLongWarning(input, too_long);
      return !too_long;
    },
    checkAndSubmit: function(input, form) {
      if (TS.msg_edit.checkLengthAndUpdateMessage(input)) {
        form.submit();
      }
    },
    onConfirmEdit: function(edited_text) {
      if (!TS.msg_edit.current_msg) {
        TS.error("no TS.msg_edit.current_msg?");
        return null;
      }
      if (!edited_text) {
        TS.error("no edited_text?");
        return null;
      }
      var in_replies = TS.msg_edit.editing_in_convo_pane;
      TS.msg_edit.commitEditInternal(edited_text);
      TS.utility.contenteditable.unload($("#message_edit_form #msg_text"));
      TS.msg_edit.resetEditUI();
      if (TS.client) {
        if (in_replies) {
          var only_if_visible = true;
          TS.ui.replies.focusReplyInput(only_if_visible);
        } else {
          TS.view.focusMessageInput();
        }
      }
    },
    onCancelEdit: function() {
      if (!TS.msg_edit.current_msg) {
        TS.error("no TS.msg_edit.current_msg?");
        return null;
      }
      var in_replies = TS.msg_edit.editing_in_convo_pane;
      TS.utility.contenteditable.unload($("#message_edit_form #msg_text"));
      TS.msg_edit.resetEditUI();
      if (TS.client) {
        if (in_replies) {
          var only_if_visible = true;
          TS.ui.replies.focusReplyInput(only_if_visible);
        } else {
          TS.view.focusMessageInput();
        }
      }
    },
    resetEditUI: function() {
      clearInterval(TS.msg_edit.edit_interv);
      if (!TS.msg_edit.current_msg) {
        TS.error("no TS.msg_edit.current_msg?");
        return null;
      }
      TS.msg_edit.getDivBeingEdited().removeClass("hidden");
      $("#message_edit_container").remove();
      if (!TS.boot_data.feature_texty_takes_over || !TS.utility.contenteditable.supportsTexty()) {
        $("body").unbind("keydown.close_message_edit_form");
      }
    },
    getDivBeingEdited: function() {
      if (TS.msg_edit.editing_in_msg_pane) return TS.msg_edit.getDivForMsgInMsgPane(TS.msg_edit.current_msg.ts);
      if (TS.msg_edit.editing_in_convo_pane) return TS.msg_edit.getDivForMsgInConvoPane(TS.msg_edit.current_msg.ts);
      return $();
    },
    getDivForMsgInMsgPane: function(ts) {
      var is_unread_view = TS.model.unread_view_is_showing;
      var is_threads_view = TS.model.threads_view_is_showing;
      if (is_unread_view) {
        return $("#" + TS.templates.makeMsgDomIdInUnreadView(ts));
      } else if (is_threads_view) {
        return $("#" + TS.templates.makeMsgDomIdInThreadsView(ts));
      }
      return $("#" + TS.templates.makeMsgDomId(ts));
    },
    getDivForMsgInConvoPane: function(ts) {
      return $("#" + TS.templates.makeMsgDomIdInConversation(ts));
    },
    getAllDivsForMsg: function(ts) {
      var $msg_pane_div = TS.msg_edit.getDivForMsgInMsgPane(ts);
      return $msg_pane_div.add(TS.msg_edit.getDivForMsgInConvoPane(ts));
    },
    commitEditInternal: function(edited_text) {
      TS.msg_edit.commitEdit(TS.msg_edit.current_msg, TS.msg_edit.current_model_ob, edited_text);
    },
    commitEdit: function(msg, model_ob, edited_text, attempts, delay_ms) {
      if (!msg) {
        TS.error("no msg?");
        return null;
      }
      if (!model_ob) {
        TS.error("no model_ob?");
        return null;
      }
      if (!attempts) attempts = 0;
      if (!delay_ms) delay_ms = 100;
      TS.api.call("chat.update", {
        channel: model_ob.id,
        ts: msg.ts,
        text: TS.format.cleanMsg(edited_text),
        _attempts: attempts,
        _delay_ms: delay_ms
      }, function(ok, data, args) {
        if (ok) {
          if (TS.web || model_ob.is_channel && !model_ob.is_member) {
            var new_msg = _.extend({}, msg, {
              text: data.text,
              edited: {
                ts: TS.utility.date.makeTsStamp(null, "0")
              }
            });
            TS.utility.msgs.replaceMsg(model_ob, new_msg);
          }
        } else {
          if (!data || !data.error) {
            TS.generic_dialog.alert(TS.i18n.t("Sorry, something went wrong with editing your message. Try again in a moment.", "msg_edit")(), TS.i18n.t("Message editing failed", "msg_edit")());
          } else if (data.error === "message_not_found") {
            if (args._attempts < 10) {
              args._delay_ms *= 1.75;
              setTimeout(function() {
                TS.msg_edit.commitEdit(msg, model_ob, edited_text, args._attempts, args._delay_ms);
              }, args._delay_ms);
              return;
            }
            if (model_ob.is_channel) {
              TS.channels.removeMsg(model_ob.id, msg);
            } else if (model_ob.is_im) {
              TS.ims.removeMsg(model_ob.id, msg);
            } else if (model_ob.is_mpim) {
              TS.mpims.removeMsg(model_ob.id, msg);
            } else if (model_ob.is_group) {
              TS.groups.removeMsg(model_ob.id, msg);
            }
            TS.generic_dialog.alert(TS.i18n.t("Sorry, something went wrong with editing your message. Try again in a moment.", "msg_edit")(), TS.i18n.t("Message editing failed", "msg_edit")());
          } else if (data.error === "edit_window_closed") {
            var error_text = "<p>" + TS.i18n.t("Sorry, but messages can only be edited for <strong>{msg_edit_duration_text}</strong> after posting.", "msg_edit")({
              msg_edit_duration_text: _getReadableMessageEditDuration(TS.model.team.prefs.msg_edit_window_mins)
            }) + "</p>";
            if (TS.model.user.is_admin) {
              error_text += "<p>" + TS.i18n.t('(To adjust the message editing window, visit <a href="/admin/settings#message_editing" target="_new">Team&nbsp;Settings</a>.)', "msg_edit")() + "</p>";
            }
            TS.generic_dialog.alert(error_text, TS.i18n.t("Message editing failed", "msg_edit")());
          } else if (data.error === "msg_too_long") {
            TS.generic_dialog.alert(TS.i18n.t("Sorry, your message is too long. Please shorten it and try again.", "msg_edit")(), TS.i18n.t("Message editing failed", "msg_edit")());
          } else {
            TS.generic_dialog.alert(TS.i18n.t("Sorry, something went wrong with editing your message. Try again in a moment.", "msg_edit")(), TS.i18n.t("Message editing failed", "msg_edit")());
          }
          TS.msg_edit.startEdit(msg.ts, model_ob, {
            text: edited_text,
            force_reopen: true
          });
        }
      });
    },
    promptEdit: function() {
      if ($("#message_editing_info").css("display") !== "none") {
        $("#message_edit_container").scrollintoview({
          duration: 300,
          px_offset: 0
        });
        return;
      }
      $("#message_editing_info").css("display", "");
      $("#message_editing_info").css("opacity", 0);
      $("#message_edit_container").scrollintoview({
        duration: 300,
        px_offset: 0,
        complete: function() {
          $("#message_editing_info").transition({
            opacity: 1
          }, 250);
        }
      });
    },
    startDelete: function(msg_ts, model_ob, onSuccessFunc, from_editing) {
      if (!msg_ts) {
        TS.error("no msg_ts?");
        return null;
      }
      if (!model_ob) {
        TS.error("no model_ob?");
        return null;
      }
      if (!model_ob.msgs) {
        TS.error("no model_ob.msgs?");
        return null;
      }
      var msg = TS.utility.msgs.getMsg(msg_ts, _getMsgs(model_ob));
      if (!msg) {
        msg = TS.ui.replies.getActiveMessage(model_ob, msg_ts);
      }
      if (TS.model.threads_view_is_showing && !msg) {
        msg = TS.client.threads.getMessage(model_ob, msg_ts);
      }
      if (!msg) {
        TS.error("no msg in msgs?");
        return null;
      }
      TS.msg_edit.deleting_from_editing = !!from_editing;
      TS.msg_edit.current_msg = msg;
      TS.msg_edit.current_model_ob = model_ob;
      var $msg_el = TS.msg_edit.getAllDivsForMsg(msg.ts);
      var dialog_body = '<p class="bottom_margin">' + TS.i18n.t("Are you sure you want to delete this message? This cannot be undone.", "msg_edit")() + "</p>";
      if (msg.subtype) {
        var file_label;
        if (msg.file) {
          file_label = "file";
          if (msg.file.mode === "snippet") {
            file_label = "snippet";
          } else if (msg.file.mode === "post") {
            file_label = "post";
          }
        }
        var txt = "";
        if (msg.subtype === "file_upload") {
          txt = TS.i18n.t("Note that deleting this message will not delete the {file_label} that was uploaded.", "msg_edit")({
            file_label: file_label
          });
        } else if (msg.subtype === "file_share") {
          txt = TS.i18n.t("Note that deleting this message will not unshare the {file_label}.", "msg_edit")({
            file_label: file_label
          });
        } else if (msg.subtype === "file_comment") {
          txt = TS.i18n.t("Note that deleting this message will not delete the comment.", "msg_edit")();
        }
        if (txt) {
          dialog_body += "<p>" + txt + "</p>";
        }
      }
      $msg_el.addClass("delete_mode");
      TS.generic_dialog.start({
        title: TS.i18n.t("Delete message", "msg_edit")(),
        body: dialog_body + TS.templates.builders.msgs.buildHTML({
          msg: msg,
          model_ob: model_ob,
          standalone: true
        }),
        go_button_text: TS.i18n.t("Delete", "msg_edit")(),
        go_button_class: "btn_danger",
        onGo: function() {
          if (TS.msg_edit.deleting_from_editing) {
            TS.msg_edit.onCancelEdit();
          }
          TS.msg_edit.commitDeleteInternal(onSuccessFunc);
        },
        onCancel: function() {
          TS.msg_edit.onCancelDelete();
        }
      });
      TS.generic_dialog.div.find("img.msg_inline_img.hidden").each(function(index, element) {
        var $element = $(element);
        $element.prop("src", $element.data("real-src"));
        $element.removeClass("hidden");
      });
    },
    onCancelDelete: function() {
      if (!TS.msg_edit.current_msg) {
        TS.error("no TS.msg_edit.current_msg?");
        return null;
      }
      var $msg_el = TS.msg_edit.getAllDivsForMsg(TS.msg_edit.current_msg.ts);
      $msg_el.removeClass("delete_mode");
      if (TS.msg_edit.deleting_from_editing) {
        TS.utility.contenteditable.focus($("#msg_text"));
      }
    },
    commitDeleteInternal: function(onSuccessFunc) {
      TS.msg_edit.commitDelete(TS.msg_edit.current_msg, TS.msg_edit.current_model_ob, TS.msg_edit.onCancelDelete, onSuccessFunc);
    },
    commitDelete: function(msg, model_ob, onFailFunc, onSuccessFunc, no_fail_alert, attempts, delay_ms) {
      if (!msg) {
        TS.error("no msg?");
        return null;
      }
      if (!model_ob) {
        TS.error("no model_ob?");
        return null;
      }
      var c_id = model_ob.id;
      if (!attempts) attempts = 0;
      if (!delay_ms) delay_ms = 100;
      if (msg.is_ephemeral || TS.utility.msgs.isTempMsg(msg)) {
        if (model_ob.is_channel) {
          TS.channels.removeMsg(model_ob.id, msg);
        } else if (model_ob.is_im) {
          TS.ims.removeMsg(model_ob.id, msg);
        } else if (model_ob.is_mpim) {
          TS.mpims.removeMsg(model_ob.id, msg);
        } else if (model_ob.is_group) {
          TS.groups.removeMsg(model_ob.id, msg);
        }
      } else {
        if (msg._jl_rollup_hash && msg._jl_rollup_hash.msg_ids) {
          var msg_ids = msg._jl_rollup_hash.msg_ids;
          msg_ids.forEach(function(msg_id) {
            if (msg_id == msg.ts) return;
            TS.api.call("chat.delete", {
              channel: c_id,
              ts: msg_id,
              _attempts: attempts,
              _delay_ms: delay_ms
            }, function(ok, data, args) {
              if (ok || data.error === "message_not_found") {
                if (data.error === "message_not_found") {
                  if (args._attempts < 10) {
                    args._delay_ms *= 1.75;
                    setTimeout(function() {
                      TS.msg_edit.commitDelete(msg, model_ob, onFailFunc, onSuccessFunc, no_fail_alert, args._attempts, args._delay_ms);
                    }, args._delay_ms);
                    return;
                  }
                }
                if (TS.web || model_ob.is_channel && !model_ob.is_member) {
                  if (model_ob.is_channel) {
                    TS.channels.removeMsg(model_ob.id, TS.utility.msgs.getMsg(args.ts, _getMsgs(model_ob)));
                  } else if (model_ob.is_im) {
                    TS.ims.removeMsg(model_ob.id, TS.utility.msgs.getMsg(args.ts, _getMsgs(model_ob)));
                  } else if (model_ob.is_mpim) {
                    TS.mpims.removeMsg(model_ob.id, TS.utility.msgs.getMsg(args.ts, _getMsgs(model_ob)));
                  } else if (model_ob.is_group) {
                    TS.groups.removeMsg(model_ob.id, TS.utility.msgs.getMsg(args.ts, _getMsgs(model_ob)));
                  }
                }
              }
            });
          });
        }
        TS.api.call("chat.delete", {
          channel: c_id,
          ts: msg.ts,
          _attempts: attempts,
          _delay_ms: delay_ms
        }, function(ok, data, args) {
          if (ok || data.error === "message_not_found") {
            if (data.error === "message_not_found") {
              if (args._attempts < 10) {
                args._delay_ms *= 1.75;
                setTimeout(function() {
                  TS.msg_edit.commitDelete(msg, model_ob, onFailFunc, onSuccessFunc, no_fail_alert, args._attempts, args._delay_ms);
                }, args._delay_ms);
                return;
              }
            }
            if (TS.web || model_ob.is_channel && !model_ob.is_member) {
              if (model_ob.is_channel) {
                TS.channels.removeMsg(model_ob.id, msg);
              } else if (model_ob.is_im) {
                TS.ims.removeMsg(model_ob.id, msg);
              } else if (model_ob.is_mpim) {
                TS.mpims.removeMsg(model_ob.id, msg);
              } else if (model_ob.is_group) {
                TS.groups.removeMsg(model_ob.id, msg);
              }
            }
            if (onSuccessFunc) onSuccessFunc();
          } else {
            if (onFailFunc) onFailFunc();
            if (!no_fail_alert) {
              var txt;
              if (data && data.error) {
                txt = TS.i18n.t("The message was not deleted. The error was: {error}", "msg_edit")({
                  error: data.error
                });
              } else {
                txt = TS.i18n.t("The message was not deleted. The error was: unknown", "msg_edit")();
              }
              TS.generic_dialog.start({
                title: TS.i18n.t("Delete Message Failed", "msg_edit")(),
                body: txt,
                show_cancel_button: false,
                esc_for_ok: true
              });
            }
          }
          if (TS.web) {
            var all_deleted = !TS.utility.msgs.getDisplayedMsgs(model_ob.msgs).length;
            if (all_deleted) {
              var prev_link = $(".pager .previous a");
              if (prev_link.attr("href")) {
                window.location = prev_link.attr("href");
              } else {
                TS.reload(false, "TS.msg_edit.commitEdit");
              }
            }
          }
        });
      }
    },
    $last_clicked_cb: null,
    startBatchDelete: function() {
      $("#msgs_div").addClass("selecting_messages");
      $("#channel_actions_div").addClass("hidden");
      $("#batch_delete_div").removeClass("hidden");
      TS.msg_edit.batchDeleteSelectionChanged();
    },
    cancelBatchDelete: function() {
      TS.msg_edit.selectNoneBatchDelete();
      $("#msgs_div").removeClass("selecting_messages");
      $("#channel_actions_div").removeClass("hidden");
      $("#batch_delete_div").addClass("hidden");
    },
    doBatchDelete: function() {
      var $cbs_checked = $("#msgs_div").find(".msg_select_cb:checked");
      var model_ob = TS.shared.getActiveModelOb();
      if ($cbs_checked.length) {
        var count = $cbs_checked.length;
        if (count == 1) {
          TS.msg_edit.startDelete($cbs_checked.eq(0).closest(".message").data("ts"), model_ob, TS.msg_edit.cancelBatchDelete);
          return;
        }
        var dialog_body = '<p class="small_bottom_margin">' + TS.i18n.t("Are you sure you want to delete {count, plural, =1 {this message} other {these messages}}? This cannot be undone! Note that deleting these messages will not delete any files or file comments.", "msg_edit")({
          count: count
        }) + "</p>";
        var prev_msg;
        var msg;
        for (var i = 0; i < count; i += 1) {
          if (msg && !msg.no_display) prev_msg = msg;
          var msg_ts = $cbs_checked.eq(i).closest(".message").data("ts");
          msg = TS.utility.msgs.getMsg(msg_ts, _getMsgs(model_ob));
          if (!msg) continue;
          dialog_body += TS.templates.builders.msgs.buildHTML({
            msg: msg,
            prev_msg: prev_msg,
            model_ob: model_ob,
            standalone: true
          });
        }
        var deleteThese = function(A) {
          function deleteOne(msg) {
            TS.msg_edit.commitDelete(msg, model_ob, next, next, true);
          }

          function next() {
            if (A.length) {
              setTimeout(function() {
                deleteOne(A.pop());
              }, 100);
            } else {
              TS.generic_dialog.cancel();
              TS.generic_dialog.start({
                title: "",
                body: TS.i18n.t("Messages deleted.", "msg_edit")(),
                show_cancel_button: false,
                esc_for_ok: true
              });
            }
          }
          TS.generic_dialog.start({
            title: "",
            body: "<p>" + TS.i18n.t("Deleting messages...", "msg_edit")() + "</p>",
            show_cancel_button: false,
            show_go_button: false
          });
          next();
        };
        TS.generic_dialog.start({
          title: TS.i18n.t("Delete Messages", "msg_edit")(),
          body: dialog_body,
          go_button_text: TS.i18n.t("Yes, delete these messages", "msg_edit")(),
          go_button_class: "btn_danger",
          onGo: function() {
            var A = [];
            for (var i = 0; i < count; i += 1) {
              var msg_ts = $cbs_checked.eq(i).closest(".message").data("ts");
              if (!msg_ts) {
                alert("no msg_ts");
                return;
              }
              var msg = TS.utility.msgs.getMsg(msg_ts, _getMsgs(model_ob));
              if (!msg) {
                alert("no msg");
                return;
              }
              A.push(msg);
            }
            TS.msg_edit.cancelBatchDelete();
            deleteThese(A);
          }
        });
      } else {}
    },
    batchDeleteSelectionChanged: function($cb, extend) {
      var $last_clicked_cb = TS.msg_edit.$last_clicked_cb;
      if ($last_clicked_cb && $cb && extend) {
        var $cbs = $("#msgs_div").find(".msg_select_cb:visible");
        var start_i = $cbs.index($last_clicked_cb);
        var end_i = $cbs.index($cb);
        if (start_i > end_i) {
          end_i = start_i;
          start_i = $cbs.index($cb);
        }
        var checked = $last_clicked_cb.prop("checked") === "checked";
        for (var i = start_i; i <= end_i; i += 1) {
          $cbs.eq(i).prop("checked", checked);
        }
      }
      $last_clicked_cb = $cb;
      TS.msg_edit.$last_clicked_cb = $last_clicked_cb;
      var count_txt = TS.i18n.t("0 messages", "msg_edit")();
      var $cbs_checked = $("#msgs_div").find(".msg_select_cb:checked");
      $("#msgs_div").find(".multi_delete_mode").removeClass("multi_delete_mode");
      if ($cbs_checked.length) {
        count_txt = TS.i18n.t("{count, plural, =1 {# message} other {# messages}}", "msg_edit")({
          count: $cbs_checked.length
        });
        $("#batch_delete_button").removeClass("disabled");
        $cbs_checked.each(function() {
          $(this).closest(".message").addClass("multi_delete_mode");
        });
      } else {
        $("#batch_delete_button").addClass("disabled");
      }
      $("#batch_delete_count_span").html(count_txt);
    },
    selectAllBatchDelete: function() {
      $("#msgs_div").find(".msg_select_cb:visible").prop("checked", true);
      TS.msg_edit.batchDeleteSelectionChanged();
    },
    selectNoneBatchDelete: function() {
      $("#msgs_div").find(".msg_select_cb:visible").prop("checked", false);
      TS.msg_edit.batchDeleteSelectionChanged();
    },
    startRemoveBroadcast: function(msg_ts, model_ob, from_editing) {
      var msg = TS.utility.msgs.findMsg(msg_ts, model_ob.id);
      if (!msg) {
        TS.error("Cannot find " + msg_ts + " for startRemoveBroadcast");
        return;
      }
      TS.msg_edit.deleting_from_editing = !!from_editing;
      TS.msg_edit.current_msg = msg;
      TS.msg_edit.current_model_ob = model_ob;
      var $msg_el = TS.msg_edit.getDivForMsgInMsgPane(msg_ts);
      var is_channel_or_group = model_ob.is_channel || model_ob.is_group && !model_ob.is_mpim;
      var msg_html = TS.templates.builders.msgs.buildHTML({
        msg: msg,
        model_ob: model_ob,
        standalone: true
      });
      var dialog_body = TS.templates.thread_confirm_remove_broadcast({
        is_channel_or_group: is_channel_or_group,
        msg_html: new Handlebars.SafeString(msg_html)
      });
      $msg_el.addClass("delete_mode");
      var title;
      if (is_channel_or_group) {
        title = TS.i18n.t("Remove from channel", "msg_edit")();
      } else {
        title = TS.i18n.t("Remove from conversation", "msg_edit")();
      }
      TS.generic_dialog.start({
        title: title,
        body: dialog_body,
        go_button_text: TS.i18n.t("Remove message", "msg_edit")(),
        onGo: function() {
          if (TS.msg_edit.deleting_from_editing) {
            TS.msg_edit.onCancelEdit();
          }
          TS.api.call("chat.delete", {
            channel: model_ob.id,
            ts: msg.ts,
            broadcast_delete: true
          }).then(function() {
            if (TS.web) {
              if (model_ob.is_channel) {
                TS.channels.removeMsg(model_ob.id, msg);
              } else if (model_ob.is_im) {
                TS.ims.removeMsg(model_ob.id, msg);
              } else if (model_ob.is_mpim) {
                TS.mpims.removeMsg(model_ob.id, msg);
              } else if (model_ob.is_group) {
                TS.groups.removeMsg(model_ob.id, msg);
              }
            }
          }).catch(function(err) {
            TS.error("Failed to remove broadcast " + msg.ts);
            TS.error(err);
            if (TS.msg_edit.current_msg === msg) {
              TS.msg_edit.onCancelDelete();
            }
          });
        },
        onCancel: function() {
          TS.msg_edit.onCancelDelete();
        }
      });
    },
    pauseEditing: function() {
      if (!TS.msg_edit.editing) return;
      var $input = $("#msg_text");
      var text = TS.utility.contenteditable.value($input);
      var cursor_position = TS.utility.contenteditable.cursorPosition($input);
      var edit_state = {
        msg_ts: TS.msg_edit.current_msg.ts,
        model_ob: TS.msg_edit.current_model_ob,
        text: text,
        cursor_start: cursor_position.start,
        cursor_length: cursor_position.length
      };
      TS.msg_edit.resetEditUI();
      return edit_state;
    },
    resumeEditing: function(edit_state) {
      if (TS.msg_edit.editing) return;
      if (!edit_state) return;
      if (TS.model.active_cid !== edit_state.model_ob.id) return;
      TS.msg_edit.startEdit(edit_state.msg_ts, edit_state.model_ob, edit_state);
    },
    focusAndSetCursorPosition: function(input, edit_state) {
      TS.utility.contenteditable.focus(input);
      TS.utility.rAF(function() {
        if (edit_state && _.isFinite(edit_state.cursor_start) && _.isFinite(edit_state.cursor_length)) {
          TS.utility.contenteditable.cursorPosition(input, edit_state.cursor_start, edit_state.cursor_length);
        } else {
          TS.utility.contenteditable.cursorPosition(input, 1e8, 0);
        }
      });
    }
  });
  var _getMsgs = function(model_ob) {
    return TS.model.archive_view_is_showing && model_ob._archive_msgs ? model_ob._archive_msgs : model_ob.msgs;
  };
  var _getReadableMessageEditDuration = function(minutes) {
    if (minutes == 1) {
      return TS.i18n.t("a minute", "msg_edit")() + " ";
    }
    var time = TS.utility.date.toTimeAmount(minutes);
    var expiration_text = "";
    if (time.w >= 1) {
      expiration_text += TS.i18n.t("{week_count, plural, =1 {a week} other {# weeks}}", "msg_edit")({
        week_count: time.w
      });
    }
    if (time.d >= 1) {
      expiration_text += TS.i18n.t("{day_count, plural, =1 {a day} other {# days}}", "msg_edit")({
        day_count: time.d
      });
    }
    if (time.h >= 1) {
      expiration_text += TS.i18n.t("{hour_count, plural, =1 {an hour} other {# others}}", "msg_edit")({
        hour_count: time.h
      });
    }
    if (time.mi >= 1) {
      expiration_text += TS.i18n.t("{minute_count, plural, =1 {a minute} other {# minutes}}", "msg_edit")({
        minute_count: time.mi
      });
    }
    return expiration_text;
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.fs_modal", {
    is_showing: false,
    transition_duration: 250,
    start: function(settings) {
      if (TS.ui.fs_modal.is_showing) {
        _swap(settings);
        return;
      }
      _current_settings = _.defaults({}, settings, _default_settings);
      TS.ui.fs_modal.is_showing = true;
      _build();
      if (_current_settings.modal_class) _$div.addClass(_current_settings.modal_class);
      if (_current_settings.modal_bg_class) _$bg.addClass(_current_settings.modal_bg_class);
      if (_current_settings.modal_contents_container_class) _$div.find(".contents_container").addClass(_current_settings.modal_contents_container_class);
      _$div_contents = _$div.find(".contents");
      _$div_sidebar = _$div.find("#fs_modal_sidebar");
      var body_html;
      if (_current_settings.body_template_html) {
        body_html = _current_settings.body_template_html;
        if (_current_settings.body) TS.warn("Both body and body_template_html were passed in settings to TS.ui.fs_modal.start(). Using body_template.");
      } else {
        body_html = TS.templates.fs_modal_generic_contents({
          settings: _current_settings,
          fs_modal_header: _.includes(_current_settings.modal_class, "fs_modal_header"),
          fs_modal_footer: _.includes(_current_settings.modal_class, "fs_modal_footer")
        });
      }
      _$div_contents.html(body_html);
      if (_current_settings.sidebar_html) _$div_sidebar.html(_current_settings.sidebar_html);
      _$div.on("click", ".dialog_go", _go);
      _$div.on("click", ".dialog_secondary_go", _secondaryGo);
      _$div.on("click", ".dialog_cancel", _cancel);
      $(window.document).off(".fs_modal");
      $(window.document).on("keydown.fs_modal", _onKeyDown);
      _$div_close_btn.on("click", function() {
        if (_current_settings.esc_for_ok) {
          _go();
        } else {
          _cancel();
        }
      });
      $("html").addClass("fs_modal_active");
      setTimeout(function() {
        if (_$bg) _$bg.addClass("active");
        if (_$div) _$div.addClass("active");
      }, 0);
      if (_$div.find("input").length) {
        _$div.find("input").first().focus();
      } else if (document.activeElement && document.activeElement !== document.body) {
        document.activeElement.blur();
      }
      if (_current_settings.onShow) _current_settings.onShow();
      if (_current_settings.onShowComplete) {
        var triggered = false;
        var end_event = _getTransitionEndEventName();
        var show_complete_timer = setTimeout(function() {
          triggered = true;
          _current_settings.onShowComplete();
          _$div.off(end_event + ".fs_modal_show_complete");
        }, 600);
        _$div.one(end_event + ".fs_modal_show_complete", function() {
          if (!triggered) {
            clearTimeout(show_complete_timer);
            _current_settings.onShowComplete();
          }
        });
      }
      document.activeElement.blur();
    },
    close: function(force_close) {
      _cancel(force_close);
    },
    bindBackButton: function(callback) {
      $("#fs_modal_back_btn").off("click.fs_modal").on("click.fs_modal", callback);
    },
    unbindBackButton: function() {
      $("#fs_modal_back_btn").off("click.fs_modal");
    },
    showBackButton: function() {
      $("#fs_modal_back_btn").removeClass("hidden");
    },
    hideBackButton: function() {
      $("#fs_modal_back_btn").addClass("hidden");
    },
    activate: function() {
      _$div.addClass("active");
      _$bg.addClass("active");
    },
    deactivate: function() {
      _$div.removeClass("active");
      _$bg.removeClass("active");
    },
    setHeaderTitle: function(title) {
      if (!_$div_header.length) return;
      _$div_header.find("h3").text(title);
    },
    showFooter: function() {
      if (!_$div_footer.length) return;
      _$div.addClass("fs_modal_footer");
      _$div_footer.removeClass("hidden");
    },
    hideFooter: function() {
      if (!_$div_footer.length) return;
      _$div.removeClass("fs_modal_footer");
      _$div_footer.addClass("hidden");
    }
  });
  var _$div;
  var _$bg;
  var _$div_close_btn;
  var _$div_contents;
  var _$div_sidebar;
  var _$div_header;
  var _$div_footer;
  var _current_settings = null;
  var _default_settings = {
    title: "",
    body: "",
    body_template_html: null,
    show_go_button: true,
    show_secondary_go_button: false,
    show_cancel_button: true,
    go_button_text: TS.i18n.t("OK", "fs_modal")(),
    go_button_class: "",
    secondary_go_button_text: TS.i18n.t("OK 2", "fs_modal")(),
    secondary_go_button_class: "",
    cancel_button_text: TS.i18n.t("Cancel", "fs_modal")(),
    disable_default_controls: false,
    disable_esc: false,
    onGo: null,
    onSecondaryGo: null,
    onCancel: null,
    onEnd: null,
    esc_for_ok: false,
    onShow: null,
    enter_always_gos: false,
    fullscreen: false,
    modal_class: null,
    modal_bg_class: null,
    modal_contents_container_class: null,
    sidebar_html: null
  };
  var _build = function() {
    _$bg = null;
    _$div = null;
    _$div_header = null;
    _$div_footer = null;
    _$div_close_btn = null;
    _$div_contents = null;
    _$div_sidebar = null;
    var template_data = {
      settings: _current_settings,
      fs_modal_header: _.includes(_current_settings.modal_class, "fs_modal_header"),
      fs_modal_footer: _.includes(_current_settings.modal_class, "fs_modal_footer"),
      fs_modal_sidebar: _.includes(_current_settings.modal_class, "fs_modal_sidebar"),
      disable_default_controls: _current_settings.disable_default_controls
    };
    var html = TS.templates.fs_modal(template_data);
    $("body").append(html);
    _$bg = $("#fs_modal_bg");
    _$div = $("#fs_modal");
    _$div_header = $("#fs_modal_header");
    _$div_footer = $("#fs_modal_footer");
    _$div_close_btn = $("#fs_modal_close_btn");
  };
  var _go = function() {
    if (!TS.ui.fs_modal.is_showing) {
      TS.error("not showing?");
      return;
    }
    if (_current_settings.onGo) {
      if (_current_settings.onGo() !== false) {
        _cancel();
      }
    } else {
      _cancel();
    }
  };
  var _secondaryGo = function() {
    if (!TS.ui.fs_modal.is_showing) {
      TS.error("not showing?");
      return;
    }
    if (_current_settings.onSecondaryGo) {
      if (_current_settings.onSecondaryGo() !== false) {
        _cancel();
      }
    } else {
      _cancel();
    }
  };
  var _onKeyDown = function(e) {
    if (e.which == TS.utility.keymap.enter && (TS.utility.getActiveElementProp("NODENAME") === "BODY" || _current_settings.enter_always_gos)) {
      if (_current_settings.show_go_button) {
        _go();
        e.preventDefault();
      }
    } else if (e.which == TS.utility.keymap.esc) {
      if (_current_settings.disable_esc) return;
      if (_current_settings.esc_for_ok) {
        _go();
      } else {
        _cancel();
        if (_current_settings.clog_name) {
          TS.clog.track(_current_settings.clog_name + "_ACTION", {
            action: "close_modal",
            trigger: "esc_key"
          });
        }
      }
    }
  };
  var _cancel = function(force_close) {
    if (_canClose(force_close)) {
      if (_$div) _$div.removeClass("active");
      if (_$bg) _$bg.removeClass("active");
      setTimeout(function() {
        $("html").removeClass("fs_modal_active");
      }, TS.ui.fs_modal.transition_duration);
      if (_current_settings.onCancel) _current_settings.onCancel();
      _end();
    }
  };
  var _clean = function() {
    _$div.remove();
    _$bg.remove();
    TS.ui.fs_modal.is_showing = false;
  };
  var _end = function() {
    setTimeout(function() {
      _clean();
    }, TS.ui.fs_modal.transition_duration);
    $(window.document).off("keydown.fs_modal");
    if (_current_settings.onEnd) _current_settings.onEnd();
  };
  var _swap = function(settings) {
    _$div.removeClass("active");
    if (_current_settings.onCancel) _current_settings.onCancel();
    var $bg = _$bg.attr("id", null).addClass("fs_modal_bg");
    setTimeout(function() {
      _$div.remove();
      TS.ui.fs_modal.is_showing = false;
      TS.ui.fs_modal.start(settings);
      setTimeout($bg.remove.bind($bg), TS.ui.fs_modal.transition_duration);
    }, TS.ui.fs_modal.transition_duration);
  };
  var _getTransitionEndEventName = function() {
    var event_names = {
      WebkitTransition: "webkitTransitionEnd",
      MozTransition: "transitionend",
      transition: "transitionend"
    };
    for (var name in event_names) {
      if (_$div[0].style[name] !== undefined) {
        return event_names[name];
      }
    }
  };
  var _canClose = function(force_close) {
    if (force_close) return true;
    if (TS.ui.react_emoji_menu.is_showing) return false;
    if (TS.model.menu_is_showing) return false;
    if (TS.model.dialog_is_showing) return false;
    if (TS.utility.isTabCompleteShowing()) return false;
    return true;
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.admin_edit_team_profile", {
    onStart: function() {
      $("body").on("click", '[data-action="edit_team_profile_modal"]', TS.ui.admin_edit_team_profile.start);
    },
    start: function() {
      if (_userCanEditTeamProfile()) _start();
    }
  });
  var _$div;
  var _$body;
  var _active_section_id;
  var _back_stack = [];
  var _start = function() {
    var settings = {
      body_template_html: TS.templates.admin_edit_team_profile_modal(),
      onShow: _onShow,
      onCancel: _onCancel
    };
    TS.ui.fs_modal.start(settings);
  };
  var _onShow = function() {
    _$div = $("#edit_team_profile_container");
    _$body = $("body");
    _$div.on("click", '[data-action="edit_team_profile_to_custom"]', _switchToCustom);
    _$div.on("click", '[data-action="edit_team_profile_to_add"]', _switchToAdd);
    _$div.on("click", '[data-action="edit_team_profile_to_edit"]', _switchToEdit);
    _$div.on("click", '[data-action="edit_team_profile_to_hide"]', _switchToHide);
    _$div.on("click", '[data-action="edit_team_profile_to_delete"]', _switchToDelete);
    _$div.on("click", '[data-action="edit_team_profile_cancel"]', _switchToList);
    _$div.on("click", '[data-action="edit_team_profile_confirm_edit"]', _editField);
    _$div.on("click", '[data-action="edit_team_profile_confirm_hide"]', _hideField);
    _$div.on("click", '[data-action="edit_team_profile_confirm_delete"]', _deleteField);
    _$div.on("click", '[data-action="edit_team_profile_remove_option"]', _removeOption);
    _$div.on("click", '[data-action="edit_team_profile_add_option"]', _addOption);
    _$div.on("focusin", '[data-action="edit_team_profile_update_preview_label"], [data-action="edit_team_profile_update_preview_hint"], .option_header_row + .option_row [data-action="edit_team_profile_update_preview_option"]', _decoratePreview);
    _$div.on("focusout", '[data-action="edit_team_profile_update_preview_label"], [data-action="edit_team_profile_update_preview_hint"], .option_header_row + .option_row [data-action="edit_team_profile_update_preview_option"]', _undecoratePreview);
    _$div.on("input", '[data-action="edit_team_profile_update_preview_label"], [data-action="edit_team_profile_update_preview_hint"], .option_header_row + .option_row [data-action="edit_team_profile_update_preview_option"]', _updatePreviewValue);
    _$div.on("click", '[data-action="edit_team_profile_list_menu"]', _openListMenu);
    _$div.on("input", "input", _toggleSave);
    _$body.on("keydown.admin_submit", _onKeydown);
    _ensureProfile().then(_switchToList).catch(TS.error);
  };
  var _onCancel = function() {
    _updateBackButton(true);
    _$div = null;
    _back_stack = [];
    _active_section_id = null;
    _$body.off("keydown.admin_submit");
    _$body = null;
    if (TS.web && TS.web.account_profile) TS.web.account_profile.render();
    if (TS.web && TS.web.members) TS.web.members.render();
  };
  var _onKeydown = function(e) {
    if (e.which == TS.utility.keymap.enter) {
      $(_active_section_id).find('button[type="submit"]').trigger("click");
      return false;
    }
  };
  var _ensureProfile = function() {
    return TS.team.ensureTeamProfileFields();
  };
  var _apiCall = function(method, calling_args) {
    if (!method) return;
    return TS.api.call(method, calling_args).then(function(response) {
      if (TS.web) {
        if (method === "team.profile.delete") {
          TS.team.upsertTeam({
            profile: JSON.parse(calling_args.profile)
          });
        } else {
          TS.team.upsertTeam(response.data);
        }
      }
      return Promise.resolve(response);
    }, function(error) {
      return Promise.reject(error);
    });
  };
  var _deleteField = function(e) {
    var $el = $(e.target);
    var id = $el.data("id");
    if (!id) $el = $el.closest("[data-id]");
    id = $el.data("id");
    if (!id) return;
    var field = TS.team.getTeamProfileFieldById(id);
    if (!field) return;
    _saveProfile("team.profile.delete", [id]).then(function() {
      _switchToList();
    }, _.noop);
  };
  var _hideField = function(e) {
    _hideOrShowField(e, true);
  };
  var _showField = function(e) {
    _hideOrShowField(e, false);
  };
  var _hideOrShowField = function(e, hide) {
    var $el = $(e.target);
    var id = $el.data("id");
    if (!id) $el = $el.closest("[data-id]");
    id = $el.data("id");
    if (!id) return;
    var field = TS.team.getTeamProfileFieldById(id);
    if (!field) return;
    field = $.extend({}, field);
    field.is_hidden = hide;
    if (hide) field.ordering = _makeOrdering();
    _saveProfile("team.profile.set", [field]).then(function() {
      _switchToList();
      _highlightInList(id);
    }, _.noop);
  };
  var _editField = function(e) {
    var $edit = _$div.find("#edit_team_profile_edit");
    if (!TS.ui.validation.validate($edit, {
        quiet: true,
        fast: true
      })) {
      TS.ui.validation.validate($edit);
      Ladda.stopAll();
      $("#edit_team_profile_confirm_edit_btn").addClass("disabled");
      return;
    }
    var $el = $(e.target);
    var id = $el.data("id");
    if (!id) $el = $el.closest("[data-id], [data-type]");
    id = $el.data("id");
    var $label = _$div.find('input[name="label"]');
    var $hint = _$div.find('input[name="hint"]');
    var field = TS.team.getTeamProfileFieldById(id) || {};
    var copy = JSON.stringify(field);
    field = $.extend({}, field);
    field.type = field.type || $el.data("type") || "text";
    field.label = $label.val().trim();
    field.hint = $hint.val().trim();
    field.ordering = field.ordering !== undefined ? field.ordering : _makeOrdering();
    if (field.type === "options_list") {
      field.possible_values = _$div.find('input[name^="option_"]').map(function() {
        return $(this).val().trim();
      }).toArray();
    }

    function resolve() {
      _switchToList();
      _highlightInList(id);
    }
    if (JSON.stringify(field) == copy) {
      resolve();
      Ladda.stopAll();
    } else {
      _saveProfile("team.profile.set", [field]).then(resolve, _.noop);
    }
  };
  var _saveProfile = function(method, fields) {
    fields = fields && fields.length ? fields : TS.model.team.profile.fields;
    var calling_args = {
      profile: JSON.stringify({
        fields: fields
      })
    };
    return _apiCall(method, calling_args).catch(function(error) {
      if (error.data.error === "no_perms" || error.data.error === "missing_scope") {
        TS.generic_dialog.start({
          body: TS.i18n.t("Sorry! An owner on your team has restricted who can customize your team’s profile.", "team_profile")(),
          show_cancel_button: false,
          esc_for_ok: true,
          fullscreen: false,
          onEnd: TS.ui.fs_modal.close
        });
      } else {
        TS.error("Failed to customize profile: " + error.data.error);
        return TS.generic_dialog.alert(TS.i18n.t("Sorry! Something went wrong. Please try again.", "team_profile")());
      }
    }).finally(Ladda.stopAll);
  };
  var _switchToList = function() {
    _back_stack.length = 0;
    _back_stack.push({
      back: _switchToList
    });
    var template_args = {};
    template_args.team_profile_fields = _getVisibleTeamProfileFields();
    template_args.hidden_team_profile_fields = _getHiddenTeamProfileFields();
    template_args.default_team_profile_fields = _getDefaultTeamProfileFields();
    var html = TS.templates.admin_edit_team_profile_list(template_args);
    _$div.find("#edit_team_profile_header").text(TS.i18n.t("Customize profile", "team_profile")()).removeClass("hidden center_and_narrow");
    var note;
    if (TS.model.team.profile && TS.model.team.profile.fields.length >= 50) {
      note = '<div class="alert alert_info"><i class="ts_icon ts_icon_info_circle"></i>' + TS.i18n.t("You have reached the maximum number of fields that can be added to profiles.", "team_profile")() + "</div>";
    } else {
      note = TS.i18n.t("Expand your team’s profiles by adding additional fields below", "team_profile")();
    }
    _$div.find("#edit_team_profile_value_note").html(note).removeClass("hidden center_and_narrow");
    _$div.find("#edit_team_profile_list").html(html);
    _hideAllSectionsBut("#edit_team_profile_list");
    _enableDragAndDrop();
    _unflexContentsAndCenter();
    _updateBackButton(true);
  };
  var _switchToAdd = function() {
    _back_stack.push({
      back: _switchToAdd
    });
    var template_args = {};
    template_args.default_team_profile_fields = _getDefaultTeamProfileFields();
    var html = TS.templates.admin_edit_team_profile_add(template_args);
    _$div.find("#edit_team_profile_header").text(TS.i18n.t("Select a field type", "team_profile")()).removeClass("center_and_narrow");
    _$div.find("#edit_team_profile_value_note").addClass("hidden");
    _$div.find("#edit_team_profile_add").html(html);
    _hideAllSectionsBut("#edit_team_profile_add");
    _unflexContentsAndCenter();
    _updateBackButton();
  };
  var _switchToCustom = function() {
    _back_stack.push({
      back: _switchToCustom
    });
    var html = TS.templates.admin_edit_team_profile_custom();
    _$div.find("#edit_team_profile_header").text(TS.i18n.t("Create a new field", "team_profile")()).removeClass("center_and_narrow");
    _$div.find("#edit_team_profile_value_note").text(TS.i18n.t("Which type of field would you like to create?", "team_profile")()).removeClass("hidden center_and_narrow");
    _$div.find("#edit_team_profile_custom").html(html);
    _hideAllSectionsBut("#edit_team_profile_custom");
    _unflexContentsAndCenter();
    _updateBackButton();
    _makePeoplePicker();
  };
  var _switchToEdit = function(e) {
    var $el = $(e.target);
    if ($el.hasClass("ts_icon_grabby_patty")) return false;
    var id = $el.data("id");
    if (!id) $el = $el.closest("[data-id], [data-type]");
    id = $el.data("id");
    var template_args = {};
    var header_text;
    if (!id) {
      template_args.type = $el.data("type");
      template_args.label = $el.data("label");
      header_text = TS.i18n.t("Customize profile field", "team_profile")();
    } else {
      template_args = TS.team.getTeamProfileFieldById(id);
      if (!template_args) return;
      header_text = TS.i18n.t("Edit profile field", "team_profile")();
    }
    e.stopPropagation();
    _back_stack.push({
      back: _switchToEdit,
      event: e
    });
    var html = TS.templates.admin_edit_team_profile_edit(template_args);
    _$div.find("#edit_team_profile_header").text(header_text).removeClass("center_and_narrow");
    _$div.find("#edit_team_profile_value_note").addClass("hidden");
    _$div.find("#edit_team_profile_edit").html(html);
    _hideAllSectionsBut("#edit_team_profile_edit");
    _maybeShowOptionRemoveAction();
    _maybeUpdateOptionPreviewValue();
    _makePeoplePicker();
    Ladda.bind("#edit_team_profile_confirm_edit_btn");
    _unflexContentsAndCenter();
    _updateBackButton();
    _toggleSave();
  };
  var _switchToHide = function(e) {
    var $el = $(e.target);
    var id = $el.data("id");
    if (!id) $el = $el.closest("[data-id]");
    id = $el.data("id");
    if (!id) return;
    var field = TS.team.getTeamProfileFieldById(id);
    if (!field) return;
    e.stopPropagation();
    _back_stack.push({
      back: _switchToHide,
      event: e
    });
    var html = TS.templates.admin_edit_team_profile_hide(field);
    var header_text = TS.i18n.t('Hide "{field_label}"', "team_profile")({
      field_label: field.label
    });
    _$div.find("#edit_team_profile_header").text(header_text).addClass("center_and_narrow");
    var note = TS.i18n.t("All data entered for this field will no longer be visible on your team’s profiles. You can un-hide it later.", "team_profile")();
    _$div.find("#edit_team_profile_value_note").text(note).addClass("center_and_narrow").removeClass("hidden");
    _$div.find("#edit_team_profile_hide").html(html);
    _hideAllSectionsBut("#edit_team_profile_hide");
    Ladda.bind("#edit_team_profile_confirm_hide_btn");
    _flexContentsAndCenter();
    _updateBackButton();
  };
  var _switchToDelete = function(e) {
    var $el = $(e.target);
    var id = $el.data("id");
    if (!id) $el = $el.closest("[data-id]");
    id = $el.data("id");
    if (!id) return;
    var field = TS.team.getTeamProfileFieldById(id);
    if (!field) return;
    e.stopPropagation();
    _back_stack.push({
      back: _switchToDelete,
      event: e
    });
    var html = TS.templates.admin_edit_team_profile_delete(field);
    var header_text = TS.i18n.t('Delete "{field_label}"', "team_profile")({
      field_label: field.label
    });
    _$div.find("#edit_team_profile_header").text(header_text).addClass("center_and_narrow");
    var note = TS.i18n.t("<strong>Are you sure?</strong> All data associated with this field will be permanently deleted. This <strong>cannot be undone</strong>.", "team_profile")();
    _$div.find("#edit_team_profile_value_note").html(note).addClass("center_and_narrow").removeClass("hidden");
    _$div.find("#edit_team_profile_delete").html(html);
    _hideAllSectionsBut("#edit_team_profile_delete");
    Ladda.bind("#edit_team_profile_confirm_delete_btn");
    _flexContentsAndCenter();
    _updateBackButton();
  };
  var _flexContentsAndCenter = function() {
    _$div.closest(".contents").addClass("display_flex flex_direction_column").css("height", "70vh");
    _$div.css({
      margin: "auto 0",
      height: "auto",
      "padding-top": 0
    });
  };
  var _unflexContentsAndCenter = function() {
    _$div.closest(".contents").removeClass("display_flex flex_direction_column").css("height", "");
    _$div.css({
      margin: "",
      height: "",
      "padding-top": ""
    });
  };
  var _userCanEditTeamProfile = function() {
    if (!(TS.model.team && TS.model.team.plan)) return false;
    var user = TS.model.user;
    if (!user) return false;
    if (TS.model.team.prefs.who_can_change_team_profile === "admin") return user.is_admin;
    if (TS.model.team.prefs.who_can_change_team_profile === "owner") return user.is_owner;
    return true;
  };
  var _updateBackButton = function(unbind) {
    if (unbind) {
      TS.ui.fs_modal.unbindBackButton();
      TS.ui.fs_modal.hideBackButton();
    } else {
      TS.ui.fs_modal.bindBackButton(function() {
        _back_stack.pop();
        var go_back = _back_stack.pop();
        go_back.back(go_back.event);
      });
      TS.ui.fs_modal.showBackButton();
    }
  };
  var _maybeShowOptionRemoveAction = function() {
    var options = _$div.find(".option_row");
    if (options.length >= 3) {
      options.addClass("show_remove_action");
    } else {
      options.removeClass("show_remove_action");
    }
  };
  var _maybeUpdateOptionPreviewValue = function() {
    _updatePreviewValue({
      target: _$div.find('.option_header_row + .option_row [data-action="edit_team_profile_update_preview_option"]')
    });
  };
  var _removeOption = function(e) {
    $(e.target).closest(".row.option_row").remove();
    _toggleSave();
    _maybeShowOptionRemoveAction();
    _maybeUpdateOptionPreviewValue();
    _maybeUpdateAddOptionAction();
  };
  var _addOption = function() {
    var row = TS.templates.admin_edit_team_profile_option_row({
      index: _$div.find(".row.option_row").length
    });
    _$div.find("#option_rows").append(row).find(".row.option_row").last().find("input").focus();
    _toggleSave();
    _maybeShowOptionRemoveAction();
    _maybeUpdateAddOptionAction();
  };
  var _maybeUpdateAddOptionAction = function() {
    if (_$div.find(".row.option_row").length === 50) {
      _$div.find('[data-action="edit_team_profile_add_option"]').addClass("hidden").next().removeClass("hidden");
    } else {
      _$div.find('[data-action="edit_team_profile_add_option"]').removeClass("hidden").next().addClass("hidden");
    }
  };
  var _updatePreviewValue = function(e) {
    var $el = $(e.target);
    var value = $el.val();
    if (value) value = value.trim();
    if (value !== undefined && !value.length) value = $el.data("default");
    _$div.find('.profile_field_preview [data-id="' + $el.data("target") + '"]').text(value);
  };
  var _decoratePreview = function(e) {
    var $el = _$div.find('.profile_field_preview [data-id="' + $(e.target).data("target") + '"]');
    var $select = $el.closest("select");
    if ($select.length) $el = $select;
    $el.addClass("highlight_yellow_bg");
  };
  var _undecoratePreview = function(e) {
    var $el = _$div.find('.profile_field_preview [data-id="' + $(e.target).data("target") + '"]');
    var $select = $el.closest("select");
    if ($select.length) $el = $select;
    $el.removeClass("highlight_yellow_bg");
  };
  var _makePeoplePicker = function() {
    var lazy_filter_select = _$div.find(".edit_team_profile_lazy_filter_select");
    if (!lazy_filter_select.length) return;
    var options = {
      append: true,
      classes: "disabled",
      preselected_ids: [TS.members.getMemberByName("slackbot").id]
    };
    TS.ui.people_picker.make(lazy_filter_select, options);
  };
  var _enableDragAndDrop = function() {
    _$div.find("#edit_team_profile_list_drag_and_drop_area").sortable({
      items: ".visible_row[data-id]",
      handle: ".ts_icon_grabby_patty",
      forcePlaceholderSize: true
    }).on("sortupdate", function(e) {
      e.stopPropagation();
      var dirty = [];
      $(this).find(".row[data-id]").each(function(index) {
        var field = TS.team.getTeamProfileFieldById($(this).data("id"));
        if (field && field.ordering != index) {
          field.ordering = index;
          dirty.push({
            id: field.id,
            ordering: index
          });
        }
      });
      TS.team.sortTeamProfileFieldsByOrdering();
      _saveProfile("team.profile.reorder", dirty);
    });
  };
  var _makeOrdering = function() {
    if (!TS.model.team.profile.fields.length) return 0;
    return _.max(TS.model.team.profile.fields.map(function(field) {
      return field.ordering;
    })) + 1;
  };
  var _openListMenu = function(e) {
    e.stopPropagation();
    var real_target = $(e.target).closest("[data-id]").get(0);
    var menu_event = jQuery.Event("click", {
      target: real_target,
      currentTarget: real_target
    });
    TS.menu.startWithEditTeamProfileListActions(menu_event, _onListMenuClick);
  };
  var _onListMenuClick = function(e) {
    e.preventDefault();
    var $id = $(e.target).closest("[data-id]");
    if ($id.is('[data-action="edit_team_profile_to_show"]')) {
      _showField(e);
    } else if ($id.is('[data-action="edit_team_profile_to_hide"]')) {
      _switchToHide(e);
    } else if ($id.is('[data-action="edit_team_profile_to_delete"]')) {
      _switchToDelete(e);
    }
    TS.menu.end();
  };
  var _hideAllSectionsBut = function(id) {
    var sections = ["#edit_team_profile_loading", "#edit_team_profile_list", "#edit_team_profile_add", "#edit_team_profile_custom", "#edit_team_profile_edit", "#edit_team_profile_hide", "#edit_team_profile_delete"].filter(function(section_id) {
      return section_id !== id;
    }).join(", ");
    _$div.find(sections).addClass("hidden");
    _$div.find(id).removeClass("hidden");
    _active_section_id = id;
  };
  var _getVisibleTeamProfileFields = function() {
    var fields = TS.team.getVisibleTeamProfileFields();
    return fields.length ? fields : null;
  };
  var _getHiddenTeamProfileFields = function() {
    var fields = TS.team.getHiddenTeamProfileFields();
    return fields.length ? fields : null;
  };
  var _getLabelsMap = function() {
    return TS.model.team.profile.fields.reduce(function(accumulator, field) {
      accumulator[field.label.toLowerCase()] = true;
      return accumulator;
    }, {});
  };
  var _getDefaultTeamProfileFields = function() {
    var map = _getLabelsMap();
    var fields = [{
      type: "text",
      label: TS.i18n.t("Address", "team_profile")()
    }, {
      type: "date",
      label: TS.i18n.t("Birthdate", "team_profile")()
    }, {
      type: "user",
      label: TS.i18n.t("Direct Reports", "team_profile")()
    }, {
      type: "link",
      label: TS.i18n.t("Facebook", "team_profile")()
    }, {
      type: "link",
      label: TS.i18n.t("Flickr", "team_profile")()
    }, {
      type: "link",
      label: TS.i18n.t("GitHub", "team_profile")()
    }, {
      type: "link",
      label: TS.i18n.t("Instagram", "team_profile")()
    }, {
      type: "link",
      label: TS.i18n.t("LinkedIn", "team_profile")()
    }, {
      type: "user",
      label: TS.i18n.t("Manager", "team_profile")()
    }, {
      type: "link",
      label: TS.i18n.t("Pinterest", "team_profile")()
    }, {
      type: "text",
      label: TS.i18n.t("Skype", "team_profile")()
    }, {
      type: "link",
      label: TS.i18n.t("SoundCloud", "team_profile")()
    }, {
      type: "date",
      label: TS.i18n.t("Start Date", "team_profile")()
    }, {
      type: "link",
      label: TS.i18n.t("Tumblr", "team_profile")()
    }, {
      type: "link",
      label: TS.i18n.t("Twitter", "team_profile")()
    }, {
      type: "link",
      label: TS.i18n.t("YouTube", "team_profile")()
    }].filter(function(field) {
      return !map[field.label.toLowerCase()];
    });
    return fields.length ? fields : [];
  };
  var _highlightInList = function(id) {
    var selector = id ? "[data-id=" + id + "]" : ".visible_row[data-id]";
    var $el = _$div.find("#edit_team_profile_list").find(selector).last();
    var offset = $el.outerHeight() * -2;
    $el.highlight(1500, "", null, 0);
    $el.scrollintoview({
      duration: 200,
      px_offset: offset,
      direction: "y"
    });
  };
  var _toggleSave = function() {
    $("#edit_team_profile_confirm_edit_btn").toggleClass("disabled", !TS.ui.validation.validate(_$div.find("#edit_team_profile_edit"), {
      quiet: true,
      fast: true
    }));
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.edit_member_profile", {
    onStart: function() {
      TS.members.changed_profile_sig.add(_maybeUpdateMemberPhoto);
      if (TS.view) TS.view.resize_sig.add(_maybeResizePhotoCrop);
      $("body").on("click", '[data-action="edit_member_profile_modal"]', function(e) {
        e.preventDefault();
        TS.ui.edit_member_profile.start();
        TS.clog.track("USER_PROFILE_CLICK");
      });
    },
    start: function() {
      _start();
    },
    handleDrag: function(show) {
      if (TS.boot_data.feature_take_profile_photo) {
        if (show) {
          _showImageUpload();
        } else {
          _hideImageUpload();
        }
      }
    },
    handleDrop: function(files) {
      if (TS.boot_data.feature_take_profile_photo) {
        _hideImageUpload();
        _preprocessPhoto(files);
      }
    },
    _registerCurrentStatusInput: function() {
      TS.ui.edit_member_profile._unregisterCurrentStatusInput();
      TS.ui.edit_member_profile._current_status_input = new TS.client.ui.CurrentStatusInput({
        $parent: $("#edit_member_profile_container"),
        has_presets_menu: true,
        has_form_context: true
      });
    },
    _unregisterCurrentStatusInput: function() {
      if (TS.ui.edit_member_profile._current_status_input) {
        TS.ui.edit_member_profile._current_status_input.destroy();
        TS.ui.edit_member_profile._current_status_input = null;
      }
    }
  });
  var _$div;
  var _$body;
  var _$progress;
  var _jcrop;
  var _image;
  var _timeout;
  var _active_section_id;
  var _back_stack = [];
  var _abort;
  var _capture;
  var _start = function() {
    var settings = {
      body_template_html: TS.templates.edit_member_profile_modal(),
      onShow: _onShow,
      onGo: _editMemberProfile,
      onCancel: _onCancel,
      go_button_text: TS.i18n.t("Save Changes", "edit_profile")(),
      go_button_class: "edit_member_profile_confirm_edit_btn ladda-button",
      modal_class: "fs_modal_header fs_modal_footer",
      title: TS.i18n.t("Edit your profile", "edit_profile")()
    };
    TS.ui.fs_modal.start(settings);
  };
  var _onShow = function() {
    _$div = $("#edit_member_profile_container");
    _$body = $("body");
    if (_userCanEditTeamProfile()) {
      $("#fs_modal_footer").prepend(TS.templates.edit_member_profile_footer({
        can_edit_team_profile: true
      }));
    }
    if (TS.boot_data.feature_take_profile_photo) {
      _setupPhotoCapture();
    }
    _$div.on("click", '[data-action="edit_member_profile_cancel_photo"]', _switchToList);
    _$div.on("click", '[data-action="edit_member_profile_confirm_photo_delete"]', _deletePhoto);
    _$div.on("click", '[data-action="edit_member_profile_confirm_photo_crop"]', _uploadPhoto);
    _$div.on("click", '[data-action="edit_member_profile_photo_menu"]', _maybeOpenPhotoMenu);
    _$div.on("click", '[data-action="edit_member_profile_upload_image"]', _onPhotoMenuClick);
    _$div.on("click", '[data-action="edit_member_profile_to_delete"]', _onDeleteImage);
    _$div.on("click", '[data-action="edit_member_profile_take_photo"]', _switchToPhotoTake);
    _$div.on("click", '[data-action="edit_member_profile_capture_photo"]', _capturePhoto);
    _$body.on("change.photo", '[data-action="edit_member_profile_upload_photo"]', _preprocessPhoto);
    _$body.on("keydown.member_submit", _onKeydown);
    _$div.on("input", "input", _toggleSave).on("change", "select", _toggleSave);
    _$div.on("input", '[data-plastic-type="date"]', _displayHumanReadableDate);
    _$div.on("dragenter", ".member_image_upload", _handleUploadDragOver);
    _$div.on("dragleave", ".member_image_upload", _handleUploadDragExit);
    _ensureProfile().then(_switchToList).catch(TS.error);
  };
  var _onCancel = function() {
    _maybeCancelPhotoEdit();
    _maybeCancelCapturePreview();
    _$div = null;
    _$progress = null;
    _jcrop = null;
    _image = null;
    _back_stack = [];
    _active_section_id = null;
    _capture = null;
    if (_$body) {
      _$body.off("change.photo");
      _$body.off("keydown.member_submit");
      _$body = null;
    }
    if (TS.client) TS.ui.edit_member_profile._unregisterCurrentStatusInput();
    if (TS.web && TS.web.account_profile) TS.web.account_profile.render();
    if (TS.web && TS.web.members) TS.web.members.render();
  };
  var _onKeydown = function(e) {
    if (e.which == TS.utility.keymap.enter) {
      var $active_section_submit = $(_active_section_id).find('button[type="submit"]');
      if ($active_section_submit.length) {
        $active_section_submit.trigger("click");
      } else {
        _editMemberProfile();
      }
      return false;
    }
  };
  var _ensureProfile = function() {
    return TS.team.ensureTeamProfileFields();
  };
  var _setupPhotoCapture = function() {
    if (!TS.boot_data.feature_take_profile_photo) return;
    var get_media = _getUserMedia();
    _capture = {};
    _capture.is_supported = !!get_media;
    _capture.is_accepted = true;
    _capture.is_enabled = false;
    _capture.video_el = null;
    _capture.video_stream = null;
    _capture.get_media = get_media;
  };
  var _getUserMedia = function() {
    if (!TS.boot_data.feature_take_profile_photo) return;
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
      return navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
    }
    var old_user_media = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
    if (old_user_media) {
      return function(constraints) {
        return new Promise(function(resolve, reject) {
          old_user_media.call(navigator, constraints, resolve, reject);
        });
      };
    }
    return null;
  };
  var _maybeStartCapturePreview = function() {
    if (!TS.boot_data.feature_take_profile_photo) return;
    if (_capture.is_enabled) {
      $(_capture.video_el).removeClass("no_opacity");
      return;
    }
    var overlay_show = true;
    var overlay_delay = 700;
    var $overlay = $("#edit_member_profile_photo_preview_overlay");
    $overlay.addClass("no_opacity");
    _abort = function() {
      overlay_show = false;
      $overlay.addClass("no_opacity");
    };
    var showVideo = function() {
      overlay_show = false;
      $overlay.addClass("no_opacity");
      $(_capture.video_el).removeClass("no_opacity");
    };
    var showOverlay = function() {
      if (overlay_show) $overlay.removeClass("no_opacity");
    };
    setTimeout(showOverlay, overlay_delay);
    var constraints = {
      video: {
        width: 1280,
        height: 720
      }
    };
    _capture.get_media(constraints).then(_startCaptureVideo).then(showVideo).catch(_handleUserMediaError);
  };
  var _startCaptureVideo = function(stream) {
    return new Promise(function(resolve) {
      var src = stream;
      var vendor = window.URL || window.webkitURL;
      if (vendor) src = vendor.createObjectURL(stream);
      _capture.video_el = $("#edit_member_profile_photo_preview_video").get()[0];
      _capture.is_accepted = true;
      _capture.is_enabled = true;
      _capture.video_stream = stream;
      $(_capture.video_el).attr("src", src);
      _capture.video_el.addEventListener("loadeddata", resolve);
    });
  };
  var _maybeCancelCapturePreview = function() {
    if (!TS.boot_data.feature_take_profile_photo) return;
    if (!_capture || !_capture.is_enabled) return;
    _resetCapturePreview();
    _capture.video_el.pause();
    _capture.video_el.src = "";
    _capture.video_el = null;
    _capture.video_stream.getVideoTracks()[0].stop();
    _capture.video_stream = null;
    _capture.is_enabled = false;
  };
  var _resetCapturePreview = function() {
    if (_capture.video_el) {
      $(_capture.video_el).addClass("no_opacity");
    }
    var $overlay = $("#edit_member_profile_photo_preview_overlay");
    $overlay.addClass("no_opacity");
    var $button = $("#edit_member_profile_photo_capture_button");
    $button.removeClass("hidden");
    var $countdown = $("#edit_member_profile_photo_capture_countdown");
    $countdown.addClass("hidden");
  };
  var _handleUserMediaError = function(error) {
    switch (error.name) {
      case "PermissionDeniedError":
        _capture.is_accepted = false;
        _handlePermissionDeniedError();
        break;
      case "PermissionDismissedError":
        _capture.is_accepted = false;
        _handlePermissionDeniedError();
        break;
      case "NotFoundError":
        _handleNotFoundError();
        break;
      default:
        _handleUnexpectedError();
    }
  };
  var _handlePermissionDeniedError = function() {
    return TS.generic_dialog.alert(TS.i18n.t("It looks like you‘ve blocked Slack from accessing your camera. Just change your browser‘s settings to allow Slack to take a photo now.", "edit_profile")(), TS.i18n.t("Please enable your camera", "edit_profile")()).then(_switchToList);
  };
  var _handleNotFoundError = function() {
    return TS.generic_dialog.alert(TS.i18n.t("Sorry! Your camera could not be found!", "edit_profile")()).then(_switchToList);
  };
  var _capturePhoto = function() {
    if (!TS.boot_data.feature_take_profile_photo) return;
    if (!_capture.is_enabled) return;
    _startCaptureCountdown().then(_finishCaptureCountdown).then(_captureDataFromVideo).then(_convertDataToFile).then(_validateSize).then(_preparePhotoOnServer).then(_setupPhotoForCrop).then(_startPhotoCrop).catch(_handlePhotoRejects);
  };
  var _startCaptureCountdown = function() {
    if (!TS.boot_data.feature_take_profile_photo) return;
    return new Promise(function(resolve, reject) {
      if (!_capture.is_enabled) {
        TS.warn("Camera not enabled");
        reject();
      }
      TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Smile for the camera!", "edit_profile")());
      var $button = $("#edit_member_profile_photo_capture_button");
      $button.addClass("hidden");
      var $countdown = $("#edit_member_profile_photo_capture_countdown");
      $countdown.removeClass("hidden");
      _captureCountdownCycle(3, false, resolve, reject);
    });
  };
  var _captureCountdownCycle = function(count, aborted, resolve, reject) {
    if (!TS.boot_data.feature_take_profile_photo) return;
    _abort = function() {
      aborted = true;
    };
    if (aborted) {
      TS.info("Profile photo capture aborted");
      reject(new Error("abort"));
      return;
    }
    if (count === 0) {
      resolve();
      return;
    }
    var $progress = $("#edit_member_profile_photo_countdown_progress");
    var $text = $("#edit_member_profile_photo_countdown_text");
    $progress.circleProgress({
      value: 1,
      size: 64,
      animation: {
        duration: 1e3
      },
      fill: {
        gradient: ["#50acf4", "#41a6f5"]
      },
      startAngle: Math.PI / -2
    }).on("circle-animation-progress", function() {
      $text.html(parseInt(count, 10));
    });
    setTimeout(function() {
      count -= 1;
      _captureCountdownCycle(count, aborted, resolve, reject);
    }, 1e3);
  };
  var _finishCaptureCountdown = function() {
    _resetCapturePreview();
    _switchToPhotoUpload();
    _updateProgress(0);
  };
  var _captureDataFromVideo = function() {
    if (!TS.boot_data.feature_take_profile_photo) return;
    return new Promise(function(resolve) {
      var canvas = document.createElement("canvas");
      var context = canvas.getContext("2d");
      canvas.width = _capture.video_el.videoHeight;
      canvas.height = _capture.video_el.videoHeight;
      var offset = (_capture.video_el.videoWidth - canvas.width) / -2;
      context.translate(canvas.width, 0);
      context.scale(-1, 1);
      context.drawImage(_capture.video_el, offset, 0, _capture.video_el.videoWidth, _capture.video_el.videoHeight);
      var data = canvas.toDataURL("image/png", 1);
      resolve(data);
    });
  };
  var _convertDataToFile = function(data) {
    if (!TS.boot_data.feature_take_profile_photo) return;
    var byte_string;
    if (data.split(",")[0].indexOf("base64") >= 0) {
      byte_string = atob(data.split(",")[1]);
    } else {
      byte_string = unescape(data.split(",")[1]);
    }
    var mime_string = data.split(",")[0].split(":")[1].split(";")[0];
    var ia = new Uint8Array(byte_string.length);
    for (var i = 0; i < byte_string.length; i += 1) {
      ia[i] = byte_string.charCodeAt(i);
    }
    var blob = new Blob([ia], {
      type: mime_string
    });
    blob.lastModifiedDate = new Date;
    blob.name = "camera_photo";
    var file = {
      file: blob,
      src: data
    };
    return file;
  };
  var _deletePhoto = function() {
    $("#edit_member_profile_cancel_photo_delete_btn").addClass("disabled");
    $("#fs_modal").addClass("stop_pointer_events");
    _$body.on("keydown.deletePhoto", function(e) {
      e.stopPropagation();
    });
    TS.api.call("users.deletePhoto").then(function() {
      if (TS.web) {
        return TS.api.call("users.info", {
          user: TS.model.user.id
        }).then(function(response) {
          delete response.data.ok;
          var self = $.extend(true, TS.model.user, response.data.user);
          TS.members.upsertMember(self);
          _maybeUpdateMemberPhoto();
          _switchToList();
        }, _switchToList);
      }
      _switchToList();
    }).catch(function(error) {
      TS.warn("Unable to delete profile photo");
      TS.error(error);
      return _handleUnexpectedError();
    }).finally(function() {
      Ladda.stopAll();
      _$body.off("keydown.deletePhoto");
      $("#fs_modal").removeClass("stop_pointer_events");
      $("#edit_member_profile_cancel_photo_delete_btn").removeClass("disabled");
    });
  };
  var _uploadPhoto = function() {
    if (_jcrop) _jcrop.disable();
    $("#edit_member_profile_cancel_photo_crop_btn").addClass("disabled");
    $("#edit_member_profile_retake_photo_crop_btn").addClass("disabled");
    $("#fs_modal").addClass("stop_pointer_events");
    _$body.on("keydown.uploadPhoto", function(e) {
      e.stopPropagation();
    });
    var $el = $("#edit_member_profile_photo");
    var $cropbox = $("#cropbox");
    var calling_args = $cropbox.data("dimensions");
    calling_args.id = $el.data("src_id");
    TS.api.call("users.setPhoto", calling_args).then(function(response) {
      if (TS.web) {
        delete response.data.ok;
        var self = $.extend(true, TS.model.user, response.data);
        TS.members.upsertMember(self);
        _maybeUpdateMemberPhoto();
      }
      _switchToList();
    }).catch(function(error) {
      TS.warn("Unable to upload cropped profile photo");
      TS.error(error);
      return _handleUnexpectedError();
    }).finally(function() {
      Ladda.stopAll();
      _$body.off("keydown.uploadPhoto");
      $("#fs_modal").removeClass("stop_pointer_events");
      $("#edit_member_profile_cancel_photo_crop_btn").removeClass("disabled");
      $("#edit_member_profile_retake_photo_crop_btn").removeClass("disabled");
      $cropbox.removeData("dimensions");
    });
  };
  var _preprocessPhoto = function(files) {
    var $el = files.type === "change" ? $(this) : undefined;
    if ($el) {
      if (!$el.val()) {
        if (TS.model.is_iOS) TS.menu.end();
        return;
      }
      files = $el.get(0).files;
    }
    if (files) {
      if (TS.model.is_iOS) TS.menu.end();
      if (!files.length) return;
      _switchToPhotoUpload();
      _updateProgress(0);
      _readPhoto(files[0]).then(_validateFormat).then(_validateSize).then(_preparePhotoOnServer).then(_setupPhotoForCrop).then(_startPhotoCrop).catch(_handlePhotoRejects);
      _$div.find('[data-action="edit_member_profile_upload_photo"]').val("");
    }
  };
  var _readPhoto = function(file) {
    return new Promise(function(resolve, reject) {
      var reader = new FileReader;
      reader.onload = function(e) {
        resolve({
          file: file,
          src: e.target.result
        });
      };
      reader.onabort = function() {
        TS.info("Profile photo file read aborted");
        reject(new Error("abort"));
      };
      reader.onerror = function(err) {
        TS.warn("Unable to read profile photo file");
        TS.error(err);
        reject(err);
      };
      _abort = function() {
        try {
          reader.abort();
        } catch (err) {
          TS.error(err);
        }
      };
      reader.readAsDataURL(file);
    });
  };
  var _validateFormat = function(data) {
    return data.file.type.match(/image\/(?:gif|png|jpeg)/i) ? Promise.resolve(data) : Promise.reject(new Error("format"));
  };
  var _validateSize = function(data) {
    return new Promise(function(resolve, reject) {
      _image = new Image;
      _image.onload = function() {
        resolve(data);
      };
      _image.onerror = function(err) {
        TS.warn("Unable to set profile photo file image src");
        TS.error(err);
        reject(err);
      };
      _image.src = data.src;
    });
  };
  var _preparePhotoOnServer = function(data) {
    var url = TS.model.api_url + "users.preparePhoto";
    var form_data = new FormData;
    form_data.append("image", data.file);
    form_data.append("token", TS.model.api_token);
    return new Promise(function(resolve, reject) {
      var xhr = $.ajax({
        url: url,
        data: form_data,
        dataType: "json",
        cache: false,
        contentType: false,
        processData: false,
        type: "POST",
        xhr: function() {
          var xhr = jQuery.ajaxSettings.xhr();
          if (xhr.upload) {
            xhr.upload.addEventListener("progress", function(evt) {
              if (evt.lengthComputable) {
                _updateProgress(evt.loaded / evt.total);
              } else {
                TS.info("Upload length not computable");
                _updateProgress(1);
              }
            }, false);
          }
          return xhr;
        }
      }).fail(function(xhr, text_status, error_thrown) {
        _abort = null;
        reject(new Error(error_thrown));
      }).done(function(data) {
        _abort = null;
        if (data.ok) {
          resolve(data);
        } else {
          reject(new Error(data.error));
        }
      });
      _abort = xhr.abort;
    });
  };
  var _setupPhotoForCrop = function(data) {
    return new Promise(function(resolve, reject) {
      var $el = $("#edit_member_profile_photo");
      var el = $el.get(0);
      var loaded = function() {
        _image.src = data.url;
        $("#edit_member_profile_photo_preview").css("background", "url(" + data.url + ")");
        $el.css("opacity", 0);
        _switchToPhotoCrop();
        removeListeners();
        resolve();
      };
      var errored = function(event) {
        TS.warn("Unable to set crop photo file image src");
        TS.error(event);
        removeListeners();
        reject(event);
      };
      var removeListeners = function() {
        el.removeEventListener("load", loaded);
        el.removeEventListener("error", errored);
      };
      _abort = function() {
        removeListeners();
        resolve();
      };
      $el.attr("src", data.url).data("src_id", data.id);
      el.addEventListener("load", loaded);
      el.addEventListener("error", errored);
    });
  };
  var _startPhotoCrop = function() {
    function updatePreview(dimensions) {
      if (!_image) return;
      var size = $preview.width();
      var width = size * _image.width / dimensions.crop_w;
      var height = size * _image.height / dimensions.crop_w;
      var x = width * dimensions.crop_x * -1 / _image.width;
      var y = height * dimensions.crop_y * -1 / _image.height;
      $preview.css({
        "background-size": width + "px",
        "background-position": x + "px " + y + "px"
      });
    }

    function updateSelection(crop) {
      if (!_image) return;
      var dimensions = {
        crop_x: Math.round(crop.x),
        crop_y: Math.round(crop.y),
        crop_w: Math.min(Math.round(crop.w), _image.height)
      };
      $cropbox.data("dimensions", dimensions);
      updatePreview(dimensions);
    }

    function selectAll() {
      _jcrop.animateTo(start_crop, function() {
        var crop = this.tellSelect();
        crop.w = _image.width;
        updateSelection(crop);
      });
      _jcrop.focus();
    }
    var $cropbox = $("#cropbox");
    var $preview = $("#edit_member_profile_photo_preview");
    var $el = $("#edit_member_profile_photo");
    var box_width = $el.width();
    var box_height = $el.height();
    var start_crop;
    if (!_image) return;
    var min = Math.min(_image.width, _image.height);
    updatePreview({
      crop_x: (_image.width - min) / 2,
      crop_y: (_image.height - min) / 2,
      crop_w: min
    });
    $("#edit_member_profile_photo").css("opacity", 0);
    $el.Jcrop({
      aspectRatio: 1,
      allowSelect: false,
      boxWidth: box_width,
      boxHeight: box_height,
      onSelect: updateSelection,
      onRelease: selectAll,
      bgColor: "white",
      trueSize: [_image.width, _image.height]
    }, function() {
      _jcrop = this;
      var bounds = this.getBounds();
      var min = Math.min(bounds[0], bounds[1]);
      var x = (bounds[0] - min) / 2;
      var y = (bounds[1] - min) / 2;
      start_crop = [x, y, min, min];
      selectAll();
    });
  };
  var _handlePhotoRejects = function(error) {
    switch (error && error.message) {
      case "abort":
        break;
      case "format":
      case "bad_image":
      case "too_many_frames":
        _switchToPhotoFormatError();
        break;
      case "too_large":
        _switchToPhotoOversizeError();
        break;
      default:
        return _handleUnexpectedError();
    }
  };
  var _maybeCancelPhotoEdit = function() {
    if (_abort) {
      _abort();
      _abort = null;
    }
  };
  var _handleUnexpectedError = function() {
    return TS.generic_dialog.alert(TS.i18n.t("Sorry! Something went wrong. Please try again.", "edit_profile")()).then(_switchToList);
  };
  var _switchToList = function() {
    _back_stack.length = 0;
    _back_stack.push({
      back: _switchToList
    });
    _maybeCleanUpPhotoCrop();
    _maybeCancelPhotoEdit();
    _maybeCancelCapturePreview();
    _image = null;
    var edit_profile_modal = !_$div.find("#edit_member_profile_list").children().first().length;
    if (edit_profile_modal) {
      var template_args = {
        member: TS.model.user,
        team: TS.model.team,
        team_member_profile_fields: TS.team.getVisibleTeamProfileFieldsForMember(TS.model.user, true)
      };
      var timezone_options = [];
      _.each(TS.boot_data.slack_timezones, function(tz) {
        timezone_options.push({
          label: tz[0],
          val: tz[1]
        });
      });
      template_args.timezone_options = timezone_options;
      template_args.member_tz = TS.model.user.tz || TS.boot_data.default_tz;
      var html = TS.templates.edit_member_profile_list(template_args);
      _$div.find("#edit_member_profile_list").html(html);
      if (TS.client) TS.ui.edit_member_profile._registerCurrentStatusInput();
    }
    _hideAllSectionsBut("#edit_member_profile_list");
    TS.ui.fs_modal.showFooter();
    TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Edit your profile", "edit_profile")());
    Ladda.bind(".edit_member_profile_confirm_edit_btn");
    _toggleSave();
    _makePeoplePickers();
    _unflexContentsAndCenter();
    _updateBackButton(true);
    if (TS.boot_data.feature_take_profile_photo) {
      _maybeShowDelete();
      _maybeShowTake();
    }
    return null;
  };
  var _canDeleteImage = function() {
    return TS.model.user.profile.is_custom_image === true;
  };
  var _maybeShowDelete = function() {
    var $delete = _$div.find(".show_delete");
    if (_canDeleteImage()) {
      $delete.removeClass("hidden");
      _$div.find(".member_image_wrapped_no_photo").addClass("hidden");
      _$div.find(".member_image_wrapped").removeClass("hidden");
    } else {
      $delete.addClass("hidden");
      _$div.find(".member_image_wrapped_no_photo").removeClass("hidden");
      _$div.find(".member_image_wrapped").addClass("hidden");
    }
  };
  var _showImageUpload = function() {
    if (_canDeleteImage()) {
      _$div.find(".member_image_wrapped").addClass("hidden");
    } else {
      _$div.find(".member_image_wrapped_no_photo").addClass("hidden");
    }
    _$div.find(".edit-profile-drop-overlay").removeClass("hidden");
    _$div.find(".member_image_upload").removeClass("hidden");
    $(".file_drop_icon").fadeIn({
      queue: false,
      duration: "slow"
    });
    $(".file_drop_icon").animate({
      top: "20px"
    }, "slow");
  };
  var _hideImageUpload = function() {
    if (_canDeleteImage()) {
      _$div.find(".member_image_wrapped").removeClass("hidden");
    } else {
      _$div.find(".member_image_wrapped_no_photo").removeClass("hidden");
    }
    _$div.find(".member_image_upload").addClass("hidden");
    _$div.find(".edit-profile-drop-overlay").addClass("hidden");
    _$div.find(".file_drop_icon").css("top", "-20px");
  };
  var _handleUploadDragOver = function() {
    _$div.find(".member_image_upload").addClass("hovered");
  };
  var _handleUploadDragExit = function() {
    _$div.find(".member_image_upload").removeClass("hovered");
  };
  var _maybeShowTake = function() {
    var $take = _$div.find(".show_take");
    if (_capture.is_supported) {
      $take.removeClass("hidden");
    } else {
      $take.addClass("hidden");
    }
  };
  var _maybeShowRetake = function() {
    var $retake = _$div.find("#edit_member_profile_retake_photo_crop_btn");
    if (_capture.is_supported && _capture.is_enabled && _capture.is_accepted) {
      $retake.removeClass("hidden");
    } else {
      $retake.addClass("hidden");
    }
  };
  var _switchToPhotoTake = function() {
    if (!TS.boot_data.feature_take_profile_photo) return;
    if (!_capture || !_capture.is_supported) return;
    _back_stack.push({
      back: _switchToList
    });
    _image = null;
    _maybeCleanUpPhotoCrop();
    _maybeStartCapturePreview();
    _hideAllSectionsBut("#edit_member_profile_photo_take");
    TS.ui.fs_modal.hideFooter();
    TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Take a profile photo", "edit_profile")());
    _unflexContentsAndCenter();
    _updateBackButton();
  };
  var _switchToPhotoCrop = function() {
    _back_stack.push({
      back: _switchToList
    });
    if (TS.boot_data.feature_take_profile_photo) {
      _maybeShowRetake();
    }
    _hideAllSectionsBut("#edit_member_profile_photo_crop");
    TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Crop your photo", "edit_profile")());
    Ladda.bind("#edit_member_profile_confirm_photo_crop_btn");
    _unflexContentsAndCenter();
    _updateBackButton();
  };
  var _switchToPhotoUpload = function() {
    _back_stack.push({
      back: _switchToList
    });
    if (!_$progress) _makeProgressCircle();
    _hideAllSectionsBut("#edit_member_profile_photo_upload");
    TS.ui.fs_modal.hideFooter();
    TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Uploading your photo…", "edit_profile")());
    _unflexContentsAndCenter();
    _updateBackButton();
  };
  var _switchToPhotoDelete = function() {
    _back_stack.push({
      back: _switchToPhotoDelete
    });
    _hideAllSectionsBut("#edit_member_profile_photo_delete");
    TS.ui.fs_modal.hideFooter();
    TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Remove profile photo", "edit_profile")());
    Ladda.bind("#edit_member_profile_confirm_photo_delete_btn");
    _flexContentsAndCenter();
    _updateBackButton();
  };
  var _switchToPhotoFormatError = function() {
    _back_stack.push({
      back: _switchToList
    });
    _hideAllSectionsBut("#edit_member_profile_photo_format_error");
    TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Oh cripes", "edit_profile")());
    _unflexContentsAndCenter();
    _updateBackButton();
  };
  var _switchToPhotoOversizeError = function() {
    _back_stack.push({
      back: _switchToList
    });
    _hideAllSectionsBut("#edit_member_profile_photo_oversize_error");
    TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Dang", "edit_profile")());
    _unflexContentsAndCenter();
    _updateBackButton();
  };
  var _editMemberProfile = function() {
    if (!TS.ui.validation.validate(_$div, {
        quiet: true,
        fast: true
      })) {
      TS.ui.validation.validate(_$div);
      Ladda.stopAll();
      $(".edit_member_profile_confirm_edit_btn").addClass("disabled");
      return;
    }
    var field_names = ["first_name", "last_name", "title", "phone"];
    if (TS.boot_data.feature_name_tagging_client) {
      field_names = ["real_name", "display_name", "title", "phone"];
    }
    if (TS.client) field_names = field_names.concat(["status_emoji", "status_text"]);
    var profile = {};
    field_names.forEach(function(name) {
      var $field;
      var value;
      if (TS.boot_data.feature_texty && name === "status_text") {
        $field = _$div.find("#current_status_for_edit_profile");
        value = TS.utility.contenteditable.value($field);
      } else {
        $field = _$div.find('input[name="' + name + '"]');
        value = $field.val();
      }
      profile[name] = value && value.trim();
      if (!TS.boot_data.feature_texty) {
        $field.val("").val(value);
      }
    });
    if (TS.client) {
      var current_status_input = TS.ui.edit_member_profile._current_status_input;
      if (current_status_input && current_status_input.isEdited()) {
        current_status_input.clogStatusChange(profile.status_text, profile.status_emoji, "EDIT_PROFILE");
      }
    }(TS.model.team.profile.fields || []).filter(function(field) {
      return !field.is_hidden;
    }).forEach(function(field) {
      var $field = _$div.find('input[name="' + field.id + '"], select[name="' + field.id + '"]');
      var $alt_field = _$div.find('input[name="' + field.id + '_alt"]');
      var value = $field.val();
      var alt_value = $alt_field.val();
      profile.fields = profile.fields || {};
      profile.fields[field.id] = {
        value: value && value.trim(),
        alt: alt_value && alt_value.trim()
      };
      if (field.type === "text" && field.label.toLocaleLowerCase() === "skype") profile.skype = value && value.trim();
      $field.val("").val(value);
      $alt_field.val("").val(alt_value);
    });
    var calling_args = {
      profile: JSON.stringify(profile)
    };
    var tz_value = _$div.find('[name="tz"]').val();
    if (tz_value !== TS.model.user.tz) {
      if (TS.web) {
        TS.model.user.tz = tz_value;
        TS.model.user.tz_offset = TS.boot_data.dst_offsets[tz_value].tz_offset;
      }
      TS.prefs.setPrefByAPI({
        name: "tz",
        value: tz_value
      });
    }
    TS.api.call("users.profile.set", calling_args).then(function(response) {
      $(".edit_member_profile_confirm_edit_btn").addClass("disabled");
      if (TS.web) {
        TS.model.user.profile = response.data.profile;
        TS.members.upsertMember(TS.model.user);
      }
      if (TS.client) TS.ui.edit_member_profile._unregisterCurrentStatusInput();
      TS.ui.fs_modal.close();
    }).catch(function(error) {
      $(".edit_member_profile_confirm_edit_btn").addClass("disabled");
      if (error.data.error === "ratelimited") {
        return TS.generic_dialog.alert(TS.i18n.t("You‘re changing your profile too often! You might have better luck if you try again in a few minutes.", "edit_profile")());
      }
      return TS.generic_dialog.alert(TS.i18n.t("Sorry! Something went wrong. Please try again.", "edit_profile")());
    }).finally(Ladda.stopAll);
  };
  var _flexContentsAndCenter = function() {
    _$div.closest(".contents").addClass("display_flex flex_direction_column").css("height", "70vh");
    _$div.css({
      margin: "auto 0",
      height: "auto",
      "padding-top": 0
    });
  };
  var _unflexContentsAndCenter = function() {
    _$div.closest(".contents").removeClass("display_flex flex_direction_column").css("height", "");
    _$div.css({
      margin: "",
      height: "",
      "padding-top": ""
    });
  };
  var _maybeOpenPhotoMenu = function(e) {
    e.stopPropagation();
    if ((!_canDeleteImage() || $(e.target).is(".btn")) && !TS.model.is_iOS) {
      _$div.find('[data-action="edit_member_profile_upload_photo"]').trigger("click");
    } else {
      TS.menu.member.startWithEditMemberProfilePhotoActions(e, _onPhotoMenuClick);
    }
  };
  var _onPhotoMenuClick = function(e) {
    var $el;
    if (TS.boot_data.feature_take_profile_photo) {
      $el = $(e.target).closest("ts-icon");
    } else {
      $el = $(e.target).closest("li");
    }
    if ($el.is('[data-action="edit_member_profile_upload_image"]')) {
      if (!TS.model.is_iOS) {
        e.preventDefault();
        _$div.find('[data-action="edit_member_profile_upload_photo"]').trigger("click");
        TS.menu.end();
      }
    } else if ($el.is('[data-action="edit_member_profile_to_delete"]')) {
      e.preventDefault();
      _switchToPhotoDelete();
      TS.menu.end();
    }
  };
  var _onDeleteImage = function(e) {
    var $el = TS.boot_data.feature_take_profile_photo ? $(e.target).closest("ts-icon") : $(e.target).closest("li");
    if ($el.is('[data-action="edit_member_profile_to_delete"]')) {
      e.preventDefault();
      _switchToPhotoDelete();
      TS.menu.end();
    }
  };
  var _hideAllSectionsBut = function(id) {
    var sections = ["#edit_member_profile_loading", "#edit_member_profile_list", "#edit_member_profile_photo_upload", "#edit_member_profile_photo_crop", "#edit_member_profile_photo_delete", "#edit_member_profile_photo_take", "#edit_member_profile_photo_size_error", "#edit_member_profile_photo_format_error", "#edit_member_profile_photo_oversize_error"].filter(function(section_id) {
      return section_id !== id;
    }).join(", ");
    _$div.find(sections).addClass("hidden");
    _$div.find(id).removeClass("hidden");
    _active_section_id = id;
  };
  var _updateBackButton = function(unbind) {
    if (unbind) {
      TS.ui.fs_modal.unbindBackButton();
      TS.ui.fs_modal.hideBackButton();
    } else {
      TS.ui.fs_modal.bindBackButton(function() {
        _back_stack.pop();
        var go_back = _back_stack.pop();
        go_back.back();
      });
      TS.ui.fs_modal.showBackButton();
    }
  };
  var _toggleSave = function() {
    $(".edit_member_profile_confirm_edit_btn").toggleClass("disabled", !TS.ui.validation.validate(_$div, {
      quiet: true,
      fast: true
    }));
  };
  var _makePeoplePickers = function() {
    _$div.find(".edit_member_profile_lazy_filter_select").each(function(index, el) {
      var $el = $(el);
      var preselected_ids = $el.val().split(/\s*,\s*/);
      TS.ui.people_picker.make($el, {
        preselected_ids: preselected_ids
      });
      $el.on("change", function() {
        var value = TS.ui.people_picker.value($el).map(function(item) {
          return item.member.id;
        }).join(",");
        $el.val(value);
        _toggleSave();
      });
    });
  };
  var _maybeUpdateMemberPhoto = function() {
    if (!_$div) return;
    $("#edit_member_profile_photo_container .member_image").replaceWith(TS.templates.builders.makeMemberPreviewLinkImage(TS.model.user.id, 192, false, true));
  };
  var _makeProgressCircle = function() {
    _$progress = $("#edit_member_profile_progress_circle").circleProgress({
      value: 0,
      size: 64,
      fill: {
        gradient: ["#50acf4", "#41a6f5"]
      },
      startAngle: Math.PI / -2
    });
  };
  var _updateProgress = function(percent_done) {
    var value = parseFloat(percent_done);
    if (!isNaN(value)) _$progress.circleProgress({
      value: value.toFixed(2)
    });
  };
  var _maybeCleanUpPhotoCrop = function() {
    if (!_jcrop) return;
    _jcrop.destroy();
    _jcrop = null;
    $("#edit_member_profile_photo").css({
      width: "auto",
      height: "auto",
      display: "block",
      visibility: "visible",
      opacity: 1
    });
  };
  var _maybeResizePhotoCrop = function() {
    if (_jcrop && _jcrop.getOptions().disabled) return;
    _maybeCleanUpPhotoCrop();
    if (_timeout) clearTimeout(_timeout);
    _timeout = setTimeout(function() {
      if (_image && !_jcrop) _startPhotoCrop();
    }, 300);
  };
  var _displayHumanReadableDate = function(e) {
    var $field = $(e.target);
    var $alt_field = $('input[name="' + $field.attr("name") + '_alt"]');
    var value = $field.val();
    if (value) value = value.trim();
    if (TS.ui.validation.validate($field, {
        quiet: true,
        fast: true
      })) $alt_field.val(TS.utility.date.convertISOtoUTCReadableDate(value));
  };
  var _userCanEditTeamProfile = function() {
    if (!TS.model.team.plan) return false;
    var user = TS.model.user;
    if (!user) return false;
    if (TS.model.user.enterprise_user) return TS.model.user.enterprise_user.is_admin || TS.model.user.enterprise_user.is_owner;
    if (TS.model.team.prefs.who_can_change_team_profile === "admin") return user.is_admin;
    if (TS.model.team.prefs.who_can_change_team_profile === "owner") return user.is_owner;
    return true;
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.validation", {
    completed_sig: new signals.Signal,
    onStart: function() {
      $("body").on("input.validation paste.validation change.validation blur.validation", "[data-validation]", TS.utility.debounce(function(e) {
        if ($(e.target).is(".ql-editor")) {
          _validate($(e.target).closest(".ql-container"), {}, e);
        } else {
          _validate($(e.target), {}, e);
        }
      }, 250));
      $("body").on("submit.validation", "form[data-validation-form]", function(e) {
        var $form = $(e.target);
        var passed = TS.ui.validation.validate($form);
        if (!passed) e.preventDefault();
        TS.ui.validation.completed_sig.dispatch($form, {
          event: e,
          passed: passed
        });
      });
    },
    validate: function($el, options) {
      options = options || {};
      var el = document;
      if ($el) {
        if ($el.is("[data-validation]")) {
          if ($el.length === 1) return _validate($el, options);
          return $el.toArray().every(function(el) {
            return _validate($(el), options);
          });
        }
        el = $el.get(0);
      }
      var els = Array.prototype.slice.call(el.querySelectorAll("[data-validation]"));
      if (options && options.fast) {
        return els.every(function(el) {
          return _validate($(el), options);
        });
      } else if (options && options.verbose) {
        var validation = {};
        els.forEach(function(el) {
          validation[el.name] = _validate($(el), options);
        });
        return validation;
      }
      return els.reduce(function(accumulator, el) {
        return _validate($(el), options) && accumulator;
      }, true);
    },
    register: function(key, value) {
      if (_validator_map[key]) {
        TS.warn(key + " cannot be registered because that key is already in use.");
        return;
      }
      if (typeof value !== "function") {
        TS.warn("Only functions can be registered as validators.");
        return;
      }
      _validator_map[key] = value;
    },
    showCustomValidation: function($el, message, options, hide_after_ms) {
      _showMessage($el, options.error_message || message, options.class, options, hide_after_ms);
    },
    getErrorMessage: function(error_key, data) {
      switch (error_key) {
        case "invalid_name_required":
          return _CHANNEL_CREATION_ERROR_MESSAGES.required();
        case "invalid_name_punctuation":
          return _CHANNEL_CREATION_ERROR_MESSAGES.punctuation();
        case "invalid_name_maxlength":
          return _CHANNEL_CREATION_ERROR_MESSAGES.maxlength({
            maxlength: data.maxlength
          });
        case "invalid_name_specials":
          return _CHANNEL_CREATION_ERROR_MESSAGES.specials();
        case "name_taken":
          return _CHANNEL_CREATION_ERROR_MESSAGES.name_taken({
            name: data.name
          });
        case "restricted_action":
          return _MPIM_CONVERSION_ERROR_MESSAGES.restricted_action();
        default:
          return TS.i18n.t("For some weird reason, that didn’t work. Please try again to continue.", "ui_validation")();
      }
    },
    showError: function($el, message, options, hide_after_ms) {
      _showMessage($el, options.error_message || message, "validation_error", options, hide_after_ms);
    },
    showWarning: function($el, message, options, hide_after_ms) {
      _showMessage($el, options.warning_message || message, "validation_warning", options, hide_after_ms);
    },
    showSuccess: function($el, message, options, hide_after_ms) {
      _showMessage($el, options.success_message || message, "validation_success", options, hide_after_ms);
    },
    test: function() {
      return {
        validations: _validator_map
      };
    }
  });
  var OPTIONAL_PROTOCOL_URL_REGEXP = new RegExp("^" + "(?:(?:https?|ftp)://)?" + "(?:\\S+(?::\\S*)?@)?" + "(?:" + "(?!(?:10|127)(?:\\.\\d{1,3}){3})" + "(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})" + "(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})" + "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" + "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" + "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" + "|" + "(?:localhost)" + "|" + "(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)" + "(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*" + "(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))" + "\\.?" + ")" + "(?::\\d{2,5})?" + "(?:[/?#]\\S*)?" + "$", "i");
  var ALL_SCHEMES_LINK_REGEXP = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=+$,\w]+@)?[A-Za-z0-9.-]+|(?:www\.|[-;:&=+$,\w]+@)[A-Za-z0-9.-]+)((?:\/[+~%\/.\w-]*)?\??(?:[-+=&;%@.\w]*)#?(?:[.!\/\\\w]*))?)/gi;
  var _CHANNEL_CREATION_ERROR_MESSAGES = {
    name_taken: TS.i18n.t("{name} is already taken by a channel, username, or user group.", "ui_validation"),
    lowercase: TS.i18n.t("Channel names must be all lowercase. Try again?", "ui_validation"),
    maxlength: TS.i18n.t("Blerg, that’s a bit too long! Channel names must be fewer than {maxlength} characters.", "ui_validation"),
    required: TS.i18n.t("Don’t forget to name your channel.", "ui_validation"),
    specials: TS.i18n.t("Channel names can’t contain spaces, periods, or most punctuation. Try again?", "ui_validation"),
    punctuation: TS.i18n.t("Names can’t consist solely of punctuation. Please elaborate!", "ui_validation")
  };
  var _USERNAME_VALIDATION_ERROR_MESSAGES = {
    firstalphanumeric: TS.i18n.t("Usernames must start with a letter or number. Sorry about that!", "ui_validation"),
    lowercase: TS.i18n.t("Sorry, usernames must be lowercase!", "ui_validation"),
    maxlength: TS.i18n.t("Sorry, that’s a bit too long! Usernames must be fewer than {maxlength} characters.", "ui_validation"),
    required: TS.i18n.t("Please fill in a username.", "ui_validation"),
    specials: TS.i18n.t("Usernames can’t contain special characters. Sorry about that!", "ui_validation")
  };
  var _MPIM_CONVERSION_ERROR_MESSAGES = {
    restricted_action: TS.i18n.t("Sorry! An admin on your team has restricted who can create private channels.", "ui_validation")
  };
  var _validator_map = {
    dateandformat: _validateDateAndFormat,
    firstalphanumeric: _validateFirstAlphanumeric,
    hasnourl: _validateHasNoUrl,
    isurlstrict: _validateIsUrlStrict,
    isurl: _validateIsUrl,
    islink: _validateIsLink,
    lowercase: _validateLowercase,
    maxcsv: _validateMaxCSV,
    maxlength: _validateMaxLength,
    mincsv: _validateMinCSV,
    minlength: _validateMinLength,
    nospace: _validateNospace,
    required: _validateRequired,
    reservedwords: _validateReservedWords,
    keywords: _validateKeywords,
    username: _validateUsername,
    channel_name: _validateChannelName,
    shared_channel_name: _validateSharedChannelName,
    is_email: _validateIsEmail
  };
  var _validate = function($el, options, e) {
    options = options || {};
    if ($el.is("[data-validation-for]")) options.custom_for = $el.attr("data-validation-for");
    options.success_message = TS.i18n.t("Nice, thanks!", "ui_validation")();
    if ($el.is("[data-validation-success]")) options.success_message = $el.attr("data-validation-success");
    if ($el.is("[data-validation-warning]")) options.warning_message = $el.attr("data-validation-warning");
    if ($el.is("[data-validation-error]")) options.error_message = $el.attr("data-validation-error");
    if (_isElementTextInput($el)) _clearCountdown($el, options);
    var every = _getValidators($el).every(function(validator) {
      if (validator.indexOf("=") === -1) {
        return _validator_map[validator.trim()]($el, options);
      }
      var validator_parts = validator.split("=");
      return _validator_map[validator_parts[0]]($el, options, validator_parts[1]);
    });
    TS.ui.validation.completed_sig.dispatch($el, {
      event: e,
      passed: every
    });
    if (_shouldShowSuccess($el, every, options)) TS.ui.validation.showSuccess($el, options.success_message, options, 3e3);
    return every;
  };
  var _getValidators = function($el) {
    if ($el.is("[data-validation]")) {
      return $el.attr("data-validation").replace(/\s*(,|=)\s*/g, "$1").split(/\s+/);
    }
    return [];
  };

  function _validateRequired($el, options) {
    if ($el.is('input[type="radio"]')) {
      if ($(document.querySelectorAll('[name="' + $el.prop("name") + '"][data-validation]')).filter(":checked").length) return true;
      TS.ui.validation.showWarning($el, TS.i18n.t("Please select an option", "ui_validation")(), options);
    } else if ($el.is('input[type="checkbox"]')) {
      if ($(document.querySelectorAll('[name="' + $el.prop("name") + '"][data-validation]')).filter(":checked").length) return true;
      TS.ui.validation.showWarning($el, TS.i18n.t("Please select at least one option", "ui_validation")(), options);
    } else if ($el.is("select")) {
      if ($el.val()) return true;
      TS.ui.validation.showWarning($el, TS.i18n.t("Please select an option", "ui_validation")(), options);
    } else if (_isElementTextInput($el)) {
      if (_getTextInputValue($el).trim()) return true;
      TS.ui.validation.showWarning($el, TS.i18n.t("This field can’t be empty", "ui_validation")(), options);
    } else {
      TS.error("Error: cannot validate");
    }
  }

  function _validateReservedWords($el, options, reserved) {
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (_isElementTextInput($el)) {
      var value = _getTextInputValue($el).trim().toLowerCase();
      var reserved_words = reserved.split(",");
      if (reserved_words.indexOf(value) === -1) return true;
      TS.ui.validation.showWarning($el, TS.i18n.t('"{word}" is a reserved word. Try something else!', "ui_validation")({
        word: TS.utility.htmlEntities(value)
      }), options);
    } else {
      TS.error("WTF: cannot validate");
    }
  }

  function _validateKeywords($el, options) {
    return _validateReservedWords($el, options, TS.model.RESERVED_KEYWORDS.join(","));
  }

  function _validateIsUrlStrict($el, options, protocols) {
    var error_message = TS.i18n.t("This doesn’t seem like a proper link. Sorry!", "ui_validation")();
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (_isElementTextInput($el)) {
      var value = _getTextInputValue($el);
      if (!value) return true;
      var found = value.match(OPTIONAL_PROTOCOL_URL_REGEXP);
      if (found && found.length === 1 && found[0] === value) {
        if (!protocols) return true;
        var allowed_protocols = protocols.split(",");
        for (var i = 0; i < allowed_protocols.length; i += 1) {
          if (allowed_protocols[i] === "http") {
            if (found[0].indexOf("http://") === 0 || found[0].indexOf("https://") === 0) {
              return true;
            }
          } else if (found[0].indexOf(allowed_protocols[i] + "://") === 0) {
            return true;
          } else if (allowed_protocols[i] === "https") {
            error_message = TS.i18n.t("Please use https (for security).", "ui_validation")();
          }
        }
      }
      TS.ui.validation.showWarning($el, error_message, options);
    } else {
      TS.error("Error: cannot validate");
    }
  }

  function _validateIsUrl($el, options, protocols) {
    var value = _getTextInputValue($el);
    var error_message = TS.i18n.t("This doesn‘t seem like a proper link. Sorry!", "ui_validation")();
    var allowed_protocols;
    var passes_protocols_requirement = false;
    var passes_well_formed_url_requirement = false;
    if (!value) return true;
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (!_isElementTextInput($el)) {
      TS.error("Error: cannot validate");
      return;
    }
    if (protocols) {
      allowed_protocols = protocols.split(",");
      if (allowed_protocols.indexOf("https") != -1) {
        error_message = TS.i18n.t("Please use https (for security).", "ui_validation")();
      }
      if (allowed_protocols.indexOf("http") != -1 && allowed_protocols.indexOf("https") == -1) {
        allowed_protocols.push("https");
      }
      for (var i = 0; i < allowed_protocols.length; i += 1) {
        if (value.indexOf(allowed_protocols[i] + "://") === 0) {
          passes_protocols_requirement = true;
        }
      }
    } else {
      passes_protocols_requirement = true;
      if (value.indexOf("://") == -1) {
        value = "http://" + value;
      }
    }
    passes_well_formed_url_requirement = TS.utility.url.simpleIsUrl(value);
    if (passes_well_formed_url_requirement && passes_protocols_requirement) {
      return true;
    }
    TS.ui.validation.showWarning($el, error_message, options);
  }

  function _validateIsLink($el, options) {
    var error_message = TS.i18n.t("This doesn’t seem like a proper link. Sorry!", "ui_validation")();
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (_isElementTextInput($el)) {
      var value = _getTextInputValue($el);
      if (!value) return true;
      var found = value.match(ALL_SCHEMES_LINK_REGEXP);
      if (found && found.length === 1 && found[0] === value) return true;
      TS.ui.validation.showWarning($el, error_message, options);
    } else {
      TS.error("Error: cannot validate");
    }
  }

  function _validateHasNoUrl($el, options) {
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (_isElementTextInput($el)) {
      var value = _getTextInputValue($el);
      if (!value) return true;
      if (!TS.utility.findUrls(value).length) {
        return true;
      }
      TS.ui.validation.showWarning($el, TS.i18n.t("Unfortunately, custom messages can’t contain URLs.", "ui_validation")(), options);
    } else {
      TS.error("Error: cannot validate");
    }
  }

  function _validateMinLength($el, options, length, hide_countdown) {
    return _validateLength($el, "minlength", options, length, hide_countdown);
  }

  function _validateMaxLength($el, options, length, hide_countdown) {
    return _validateLength($el, "maxlength", options, length, hide_countdown);
  }

  function _validateLength($el, key, options, length, hide_countdown) {
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (_isElementTextInput($el)) {
      var value = _getTextInputValue($el);
      length = +length;
      if (value === undefined || isNaN(length)) {
        TS.error("Error: no length to validate");
        return;
      }
      if (key === "minlength") {
        if (value.length >= length) return true;
        TS.ui.validation.showError($el, TS.i18n.t("This field can’t be less than {minlength, plural, =1{# character}other{# characters}}", "ui_validation")({
          minlength: length
        }), options);
      } else if (key === "maxlength") {
        if (!hide_countdown) _countdown($el, value.length, length, options);
        if (value.length <= length) return true;
        TS.ui.validation.showError($el, TS.i18n.t("This field can’t be more than {maxlength, plural, =1{# character}other{# characters}}", "ui_validation")({
          maxlength: length
        }), options);
      }
    } else {
      TS.error("Error: cannot validate");
    }
  }

  function _validateMinCSV($el, options, length) {
    return _validateCSV($el, "mincsv", options, length);
  }

  function _validateMaxCSV($el, options, length) {
    return _validateCSV($el, "maxcsv", options, length);
  }

  function _validateCSV($el, key, options, length) {
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (_isElementTextInput($el)) {
      var value = _getTextInputValue($el).trim();
      length = +length;
      if (value === undefined || isNaN(length)) {
        TS.error("Error: no length to validate");
        return;
      }
      if (key === "mincsv") {
        if (value.split(/\s*,\s*/).length >= length) return true;
        TS.ui.validation.showError($el, TS.i18n.t("This field can’t have less than {minlength, plural, =1{# value}other{# values}}", "ui_validation")({
          minlength: length
        }), options);
      } else if (key === "maxcsv") {
        if (value.split(/\s*,\s*/).length <= length) return true;
        TS.ui.validation.showError($el, TS.i18n.t("This field can’t have more than {maxlength, plural, =1{# value}other{# values}}", "ui_validation")({
          maxlength: length
        }), options);
      }
    } else {
      TS.error("Error: cannot validate");
    }
  }

  function _validateDateAndFormat($el, options, format) {
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (_isElementTextInput($el)) {
      var value = _getTextInputValue($el).trim();
      if (!value) return true;
      var ui_pattern;
      var found;
      var match;
      var valid;
      switch (format) {
        case "Y-m-d":
          ui_pattern = "YYYY-MM-DD";
          found = value.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/);
          match = found && found.length === 1 && found[0] === value;
          if (match) valid = _isValidISODate(value + "T00:00:00.000Z");
          break;
        case "m-d":
          ui_pattern = "MM-DD";
          found = value.match(/^[0-9]{2}-[0-9]{2}$/);
          match = found && found.length === 1 && found[0] === value;
          if (match) valid = _isValidISODate("0000-" + value + "T00:00:00.000Z");
          break;
        default:
          TS.error("Error: cannot validate");
          return;
      }
      if (match && valid) return true;
      if (!match) {
        TS.ui.validation.showWarning($el, TS.i18n.t("This needs to be in the format {pattern}. Sorry!", "ui_validation")({
          pattern: ui_pattern
        }), options);
      } else if (!valid) {
        TS.ui.validation.showWarning($el, TS.i18n.t("{value} doesn’t appear to be a valid date. Sorry!", "ui_validation")({
          value: TS.utility.htmlEntities(value)
        }), options);
      }
    } else {
      TS.error("Error: cannot validate");
    }
  }

  function _validateLowercase($el, options) {
    var value = _isElementTextInput($el) ? _getTextInputValue($el) : $el.val();
    var is_lowercase = value === value.toLocaleLowerCase();
    if (is_lowercase) return true;
    TS.ui.validation.showWarning($el, TS.i18n.t("This field must be lowercase only", "ui_validation")(), options);
  }

  function _validateNospace($el, options) {
    var value = _isElementTextInput($el) ? _getTextInputValue($el) : $el.val();
    var has_spaces = /\s/.test(value);
    if (!has_spaces) return true;
    TS.ui.validation.showWarning($el, TS.i18n.t("This field can’t contain spaces", "ui_validation")(), options);
  }

  function _validateFirstAlphanumeric($el, options) {
    var value = _isElementTextInput($el) ? _getTextInputValue($el) : $el.val();
    var is_first_alphanumeric = /^[^\W_]/.test(value);
    if (is_first_alphanumeric) return true;
    TS.ui.validation.showWarning($el, TS.i18n.t("This first character must be a letter or number", "ui_validation")(), options);
  }

  function _validateUsername($el, options) {
    var max_length = 21;
    var quiet_options = $.extend({}, options, {
      quiet: true
    });
    if (!_validateRequired($el, quiet_options)) {
      TS.ui.validation.showWarning($el, _USERNAME_VALIDATION_ERROR_MESSAGES.required(), options);
    } else if (!_validateMaxLength($el, quiet_options, max_length, true)) {
      TS.ui.validation.showWarning($el, _USERNAME_VALIDATION_ERROR_MESSAGES.maxlength({
        maxlength: max_length + 1
      }), options);
    } else if (!_validateNospace($el, quiet_options)) {
      TS.ui.validation.showWarning($el, _USERNAME_VALIDATION_ERROR_MESSAGES.specials(), options);
    } else if (!_validatePattern($el, quiet_options, /^[\w._-]+$/)) {
      TS.ui.validation.showWarning($el, _USERNAME_VALIDATION_ERROR_MESSAGES.specials(), options);
    } else if (!_validateFirstAlphanumeric($el, quiet_options)) {
      TS.ui.validation.showWarning($el, _USERNAME_VALIDATION_ERROR_MESSAGES.firstalphanumeric(), options);
    } else if (!_validateLowercase($el, quiet_options)) {
      TS.ui.validation.showWarning($el, _USERNAME_VALIDATION_ERROR_MESSAGES.lowercase(), options);
    } else if (!_validateReservedWords($el, options, TS.model.RESERVED_USERNAMES.join(","))) {
      return false;
    } else {
      return true;
    }
  }

  function _channelNameValidation($el, options) {
    var max_length = 21;
    var quiet_options = $.extend({}, options, {
      quiet: true
    });
    if (!_validateRequired($el, quiet_options)) {
      TS.ui.validation.showWarning($el, _CHANNEL_CREATION_ERROR_MESSAGES.required(), options);
      return true;
    }
    if (!TS.boot_data.feature_intl_channel_names && !_validateMaxLength($el, quiet_options, max_length, true)) {
      TS.ui.validation.showWarning($el, _CHANNEL_CREATION_ERROR_MESSAGES.maxlength({
        maxlength: max_length + 1
      }), options);
      return true;
    }
    if (!TS.boot_data.feature_intl_channel_names && !_validateLowercase($el, quiet_options)) {
      TS.ui.validation.showWarning($el, _CHANNEL_CREATION_ERROR_MESSAGES.lowercase(), options);
      return true;
    }
    if (!_validateNospace($el, quiet_options)) {
      TS.ui.validation.showWarning($el, _CHANNEL_CREATION_ERROR_MESSAGES.specials(), options);
      return true;
    }
    if (!TS.boot_data.feature_intl_channel_names && !_validatePattern($el, quiet_options, /^[a-zA-Z0-9-_]+$/)) {
      TS.ui.validation.showWarning($el, _CHANNEL_CREATION_ERROR_MESSAGES.specials(), options);
      return true;
    }
    if (_validatePattern($el, quiet_options, /^[-|_]+$/)) {
      TS.ui.validation.showWarning($el, _CHANNEL_CREATION_ERROR_MESSAGES.punctuation(), options);
      return true;
    }
  }

  function _validateChannelName($el, options, raw_params) {
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (!_isElementTextInput($el)) {
      TS.error("Error: cannot validate");
      return;
    }
    var value = _getTextInputValue($el);
    var params = _parseParams(raw_params);
    var should_fix = _.includes(params, "fix");
    if (should_fix) value = _fixChannelName($el);
    var name_validation = _channelNameValidation($el, options);
    if (name_validation) return false;
    var model_ob = TS.shared.getActiveModelOb() || {};
    if ($(".channel_options_modal").is(":visible") && value === model_ob.name) {
      return false;
    }
    var other_channel = TS.channels.getChannelByName(value) || TS.groups.getGroupByName(value) || TS.members.getMemberByName(value);
    if (!other_channel) return true;
    TS.ui.validation.showWarning($el, TS.i18n.t('"{name}" is already taken by a channel, username, or user group.', "ui_validation")({
      name: TS.utility.htmlEntities(value)
    }), options);
  }

  function _validateSharedChannelName($el, options, raw_params) {
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (!_isElementTextInput($el)) {
      TS.error("Error: cannot validate");
      return;
    }
    var value = _getTextInputValue($el);
    var params = _parseParams(raw_params);
    var should_fix = _.includes(params, "fix");
    if (should_fix) value = _fixChannelName($el);
    var name_validation = _channelNameValidation($el, options);
    if (name_validation) return false;
    var need_to_check_api = false;
    var other_channel = TS.channels.getChannelByName(value) || TS.groups.getGroupByName(value) || TS.members.getMemberByName(value);
    var current_model_ob = TS.shared.getActiveModelOb();
    if (!other_channel) need_to_check_api = true;
    if (other_channel && other_channel.id === current_model_ob.id) need_to_check_api = true;
    if (other_channel && other_channel.id !== current_model_ob.id) {
      TS.ui.validation.showWarning($el, TS.i18n.t("{name} has already been taken. Try something else!", "ui_validation")({
        name: TS.utility.htmlEntities(value)
      }), options);
      return;
    }
    return need_to_check_api;
  }

  function _validateIsEmail($el, options) {
    if ($el.is('input[type="radio"]') || $el.is('input[type="checkbox"]') || $el.is("select")) return true;
    if (_isElementTextInput($el)) {
      var value = _getTextInputValue($el);
      if (!value) return true;
      var found = value.match(TS.utility.email_regex);
      if (found && found.length === 1 && found[0] === value) return true;
      TS.ui.validation.showWarning($el, TS.i18n.t("This doesn’t seem like an email address. Sorry!", "ui_validation")(), options);
    } else {
      TS.error("Error: cannot validate");
    }
  }

  function _validatePattern($el, options, pattern) {
    var value = _isElementTextInput($el) ? _getTextInputValue($el) : $el.val();
    if (!pattern.test(value)) {
      TS.ui.validation.showWarning($el, TS.i18n.t("This field contains invalid characters", "ui_validation")(), options);
    } else {
      return true;
    }
  }
  var _isValidISODate = function(iso_date_string) {
    if (!isNaN(Date.parse(iso_date_string))) {
      var date = new Date(iso_date_string);
      return !date.toISOString().indexOf(iso_date_string);
    }
  };
  var _shouldShowSuccess = function($el, every, options) {
    var $label = $(document.querySelector('label[for="' + (options.custom_for || $el.attr("name")) + '"]'));
    if (!$label.length) return;
    return !(options && options.quiet) && every && $label.data("validation-ephemeral") === false;
  };
  var _showMessage = function($el, message, validation_level, options, hide_after_ms) {
    if (options && options.quiet) return;
    var $label = $(document.querySelector('label[for="' + (options.custom_for || $el.attr("name")) + '"]'));
    if (!$label.length) return;
    var timeout = $label.data("validation-timeout");
    clearTimeout(timeout);
    var $message = $label.find(".validation_message");
    if (!$message.length) {
      $message = $("<span />").addClass("validation_message overflow_ellipsis");
      if ($el.is("select")) {
        $message.insertBefore($label.find("select"));
      } else {
        $message.appendTo($label);
      }
    }
    _toggleValidationLevel($el, $label, validation_level);
    $message.get(0).title = message;
    $message.fadeIn(100);
    $label.data("validation-ephemeral", !!hide_after_ms);
    if (hide_after_ms) {
      $label.data("validation-timeout", setTimeout(function() {
        $label.removeData("validation-ephemeral").removeData("validation-timeout");
        $message.fadeOut(100, function() {
          _toggleValidationLevel($el, $label);
          $message.remove();
        });
      }, hide_after_ms));
    }
  };
  var _levels = ["validation_error", "validation_warning", "validation_success"];
  var _toggleValidationLevel = function($el, $label, validation_level) {
    if ($label.hasClass(validation_level)) return;
    $el.removeClass(_levels.join(" "));
    $el.addClass(validation_level);
    $label.removeClass(_levels.join(" "));
    $label.addClass(validation_level);
  };
  var _countdown = function($el, value_length, validation_length, options) {
    if (validation_length - value_length <= 6) {
      _setCountdown($el, value_length, validation_length, options);
    } else {
      _clearCountdown($el, options);
    }
  };
  var _setCountdown = function($el, value_length, validation_length, options) {
    var label = document.querySelector('label[for="' + (options.custom_for || $el.attr("name")) + '"]');
    if (!label) return;
    var countdown_data_attr = [value_length, validation_length].join("/");
    $(label).attr("data-countdown", countdown_data_attr).addClass("countdown");
    var styles = window.getComputedStyle(label, ":after");
    var countdown_text_width = parseFloat(styles.width) || 9 * countdown_data_attr.length;
    if (!$el.data("countdown-padding-right")) $el.data("countdown-padding-right", parseFloat($el.css("padding-right")));
    $el.css("padding-right", countdown_text_width + parseFloat(styles.right) + $el.data("countdown-padding-right"));
  };
  var _clearCountdown = function($el, options) {
    var label = document.querySelector('label[for="' + (options.custom_for || $el.attr("name")) + '"]');
    if (!label) return;
    $(label).removeClass("countdown");
    $el.removeData("countdown-padding-right");
    $el.css("padding-right", "");
  };
  var _isElementTextInput = function($el) {
    if (TS.utility && TS.utility.contenteditable) {
      return $el.is("input") || $el.is("textarea") || TS.utility.contenteditable.isContenteditable($el);
    }
    return $el.is("input") || $el.is("textarea");
  };
  var _getTextInputValue = function($el) {
    if (TS.utility && TS.utility.contenteditable) {
      return TS.utility.contenteditable.value($el);
    }
    return $el.val();
  };
  var _parseParams = function(param_text) {
    if (!_.isString(param_text)) return [];
    return _(param_text).split(",").map(_.trim).compact().value();
  };
  var _fixChannelName = function($el) {
    var value = _getTextInputValue($el);
    var clean_value = value.toLowerCase().replace(/^#+/, "");
    if (clean_value && value !== clean_value) {
      var cursor_start = TS.utility.contenteditable.cursorPosition($el).start;
      if (clean_value.length < value.length) {
        cursor_start -= value.length - clean_value.length;
      }
      $el.val(clean_value);
      TS.utility.contenteditable.cursorPosition($el, cursor_start);
    }
    return clean_value;
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.token_input", {
    onStart: function() {},
    make: function($container, options) {
      if (!($container && $container.length)) return;
      var $input = $container.find("input");
      if (!($input && $input.length)) return;
      if ($input.val().trim()) {
        _tokenizeInput($input);
      }
      $container.on("click", function() {
        $container.addClass("active");
        $input.focus();
      });
      $input.on("paste", function() {
        setTimeout(function() {
          var val = $input.val().trim();
          if (!/,/.test(val)) return true;
          if (val) _tokenizeInput($input, options);
        }, 0);
      }).on("keydown", function(e) {
        var length = $input.val().length;
        if (!length && e.which === TS.utility.keymap.del) {
          _untokenizeInput($input, options);
        } else if (length === 1 && !$input.prev(".token").length) {
          _untokenizeInput($input, options);
        }
        if (length && e.which === TS.utility.keymap.enter) {
          _tokenizeInput($input, options);
        }
      }).on("keyup", function(e) {
        var length = $input.val().length;
        if (length && (e.which === TS.utility.keymap.comma || e.which === TS.utility.keymap.space)) {
          _tokenizeInput($input, options);
        }
      }).on("focusout", function() {
        _tokenizeInput($input, options);
        $container.removeClass("active");
      }).on("focusin", function() {
        $container.addClass("active");
      });
      $input.data("placeholder", $input.attr("placeholder"));
      if ($container.find(".token").length) $input.attr("placeholder", "");
      if (options && options.remove_on_click) {
        $container.on("click", ".token", function() {
          $(this).remove();
        });
      }
    },
    value: function($container, value) {
      if (value) return _setTokenInputValue($container, value);
      return _getTokenInputValue($container);
    }
  });
  var _getTokenInputValue = function($container) {
    var token_values = [];
    $container.find(".token").each(function() {
      var value = $(this).text().trim();
      token_values.push(value);
    });
    return token_values.join(", ");
  };
  var _setTokenInputValue = function($container, value) {
    var $input = $container.find("input");
    $container.find(".token").remove();
    $input.val(value);
    _tokenizeInput($input);
  };
  var _tokenizeInput = function($input, options) {
    var val = $input.val().trim();
    var vals = val.split(/\s*[,\s]\s*/);
    var has_tokens = false;
    vals.forEach(function(value) {
      if (value) {
        var $token = $("<span />").addClass("token").text(value);
        $token.toggleClass("remove_on_click", options && options.remove_on_click);
        $input.before($token);
        has_tokens = true;
        if (options && options.onTokenChange) options.onTokenChange($input, $token);
      }
    });
    if (has_tokens) $input.attr("placeholder", "").val("");
  };
  var _untokenizeInput = function($input, options) {
    var $token = $input.prev(".token");
    if ($token.length) {
      var val = $token.text();
      $token.remove();
      $input.val(val + " ");
    } else {
      $input.attr("placeholder", $input.data("placeholder"));
    }
    if (options && options.onTokenChange) options.onTokenChange($input);
  };
})();
(function() {
  "use strict";
  TS.registerModule("enterprise.workspaces", {
    showList: function($container, list, base_url, sort_by) {
      var teams = TS.enterprise.workspaces.getList(list, sort_by);
      var $more_teams_available = $(".more_teams_available");
      var html = "";
      if (teams.length) {
        teams.forEach(function(team) {
          html += TS.enterprise.workspaces.getTeamCardHTML(team, base_url, true);
        });
        var teams_not_on_teams = TS.enterprise.workspaces.getList("teams_not_on", sort_by);
        if (list === "teams_on" && teams_not_on_teams.length) {
          $more_teams_available.attr("data-has-more", "yes").removeClass("hidden");
        } else {
          $more_teams_available.attr("data-has-more", "").addClass("hidden");
        }
      } else {
        if (list === "teams_on") {
          html += TS.templates.not_on_any_workspaces();
        } else {
          html += TS.templates.no_workspaces_to_join();
        }
        $more_teams_available.attr("data-has-more", "").addClass("hidden");
      }
      $container.html(html).attr("data-list", list);
      _bindEvents($container, list, base_url);
      return Promise.resolve(!!teams.length);
    },
    getList: function(list, sort_by, filter_by) {
      if (!sort_by) {
        if (list === "teams_not_on") {
          sort_by = "members";
        } else {
          sort_by = "join";
        }
      }
      if (!filter_by) filter_by = "";
      filter_by = filter_by.toLowerCase();
      var teams = {
        teams_on: [],
        teams_not_on: []
      };
      TS.model.enterprise_teams.forEach(function(team) {
        if (TS.model.user.enterprise_user.teams.indexOf(team.id) > -1) {
          teams.teams_on.push(team);
        } else if (team.is_open || team.is_closed || team.is_assigned) {
          teams.teams_not_on.push(team);
        }
      });
      return teams[list].filter(function(team) {
        return team.name.toLowerCase().indexOf(filter_by) > -1 || team.description && team.description.toLowerCase().indexOf(filter_by) > -1;
      }).sort(function(a, b) {
        if (sort_by === "name") {
          var a_name = a.name.toLowerCase();
          var b_name = b.name.toLowerCase();
          if (a_name < b_name) return -1;
          if (a_name > b_name) return 1;
          return 0;
        } else if (sort_by === "creation") {
          return b.created - a.created;
        } else if (sort_by === "join") {
          return b.joined_date - a.joined_date;
        } else if (sort_by === "members") {
          return parseInt(b.user_counts.active_members, 10) - parseInt(a.user_counts.active_members, 10);
        }
        return 0;
      });
    },
    joinTeam: function(team_id) {
      var team = TS.enterprise.getTeamById(team_id);
      if (!team) {
        return TS.generic_dialog.alert(TS.i18n.t("Invalid workspace", "enterprise_dashboard")(), TS.i18n.t("Oops! Something went wrong.", "enterprise_dashboard")());
      }
      if (!team.is_open && !team.is_assigned) {
        return TS.generic_dialog.alert(TS.i18n.t("This workspace is not available to join.", "enterprise_dashboard")(), TS.i18n.t("Oops! Something went wrong.", "enterprise_dashboard")());
      }
      var calling_args = {
        team: team.id
      };
      if (TS.boot_data.app === "client") calling_args.enterprise_token = TS.model.enterprise_api_token;
      return TS.api.call("enterprise.teams.join", calling_args, function(ok, data, args) {
        var team = TS.enterprise.getTeamById(args.team);
        var message = new Handlebars.SafeString(emoji.replace_colons(":sparkles:") + TS.i18n.t(" You‘ve successfully joined <strong>{team_name}</strong>", "enterprise_dashboard")({
          team_name: TS.utility.htmlEntities(team.name)
        }));
        if (ok) {
          team = _.merge({}, TS.enterprise.getTeamById(args.team));
          team.joined_date = data.joined_date;
          TS.enterprise.upsertEnterpriseTeam(team);
          _showToastMessage("success", message);
          return true;
        }
        if (data.error === "user_already_team_member") {
          _showToastMessage("success", message);
          return true;
        } else if (data.error === "team_is_not_open") {
          _showToastMessage("error", TS.i18n.t("This team is not open to join.", "enterprise_dashboard")());
          return false;
        }
        _showToastMessage("error", TS.i18n.t('Joining team failed with error "{error}"', "enterprise_dashboard")({
          error: data.error
        }));
        return false;
      });
    },
    requestToJoinTeam: function(team_id) {
      var calling_args = {
        team: team_id
      };
      if (TS.boot_data.app === "client") calling_args.enterprise_token = TS.model.enterprise_api_token;
      return TS.api.call("enterprise.teams.joinrequests.create", calling_args, function(ok, data, args) {
        var team = TS.enterprise.getTeamById(args.team);
        var updated_team = _.merge({}, team, {
          has_join_request: true
        });
        TS.enterprise.upsertEnterpriseTeam(updated_team);
        return ok;
      });
    },
    createLogoutURL: function(team_id, base_url) {
      var el_a = document.createElement("a");
      el_a.href = base_url;
      var logout_url = el_a.protocol + "//" + el_a.host + "/signout/" + team_id + el_a.search + el_a.hash;
      el_a = null;
      return logout_url;
    },
    createURL: function(team, base_url) {
      var el_a = document.createElement("a");
      el_a.href = base_url;
      var url = el_a.protocol + "//" + team.domain + "." + el_a.host + "/";
      el_a = null;
      return url;
    },
    getTeamCardHTML: function(team, base_url, with_wrapper) {
      var url = TS.enterprise.workspaces.createURL(team, base_url);
      team.launch_url = url + "messages";
      team.site_url = url + "home";
      team.signout_url = TS.enterprise.workspaces.createLogoutURL(team.id, base_url);
      var template_name = "enterprise_teams_launch_card";
      if (with_wrapper) template_name = "enterprise_teams_launch_card_wrapper";
      return TS.templates[template_name]({
        team: team,
        user: TS.model.user
      });
    },
    recordPageView: function(list, has_teams_to_show, from_where) {
      if (!from_where) from_where = "";
      var enterprise_payload = {
        tracking_code: from_where,
        target_team_id: 0
      };
      var ui_context_payload = {
        action: "impression"
      };
      if (has_teams_to_show) {
        ui_context_payload.action_status = 1;
      } else {
        ui_context_payload.action_status = 2;
      }
      switch (list) {
        case "teams_on":
          enterprise_payload.anchor_page = "your_workspaces";
          enterprise_payload.entity_key = "your_workspaces_list";
          break;
        case "teams_not_on":
          enterprise_payload.anchor_page = "find_workspaces";
          enterprise_payload.entity_key = "workspaces_you_can_join_list";
          break;
        default:
          break;
      }
      TS.clog.track(_CLOG_NAMESPACE, _.assign({}, enterprise_payload, {
        contexts: {
          ui_context: ui_context_payload
        }
      }));
    },
    recordTeamView: function(team_id, anchor_page, from_where) {
      if (!from_where) from_where = "";
      var enterprise_payload = {
        entity_key: "workspace_detail",
        target_team_id: team_id,
        tracking_code: from_where
      };
      var ui_context_payload = {
        action: "impression",
        action_status: 1
      };
      TS.clog.track(_CLOG_NAMESPACE, _.assign({}, enterprise_payload, {
        contexts: {
          ui_context: ui_context_payload
        }
      }));
    },
    recordTeamJoin: function(team_id, anchor_page, from_where) {
      if (!from_where) from_where = "";
      var enterprise_payload = {
        anchor_page: anchor_page,
        entity_key: "join_workspace",
        target_team_id: team_id,
        tracking_code: from_where
      };
      var ui_context_payload = {
        action: "click",
        action_status: 1
      };
      TS.clog.track(_CLOG_NAMESPACE, _.assign({}, enterprise_payload, {
        contexts: {
          ui_context: ui_context_payload
        }
      }));
    },
    recordTeamLeave: function(team_id, anchor_page, from_where) {
      if (!from_where) from_where = "";
      var enterprise_payload = {
        anchor_page: anchor_page,
        entity_key: "leave_workspace",
        target_team_id: team_id,
        tracking_code: from_where
      };
      var ui_context_payload = {
        action: "click",
        action_status: 1
      };
      TS.clog.track(_CLOG_NAMESPACE, _.assign({}, enterprise_payload, {
        contexts: {
          ui_context: ui_context_payload
        }
      }));
    },
    recordTeamLeaveConfirm: function(team_id, anchor_page, from_where) {
      if (!from_where) from_where = "";
      var enterprise_payload = {
        anchor_page: anchor_page,
        entity_key: "leave_workspace_confirm",
        target_team_id: team_id,
        tracking_code: from_where
      };
      var ui_context_payload = {
        action: "click",
        action_status: 1
      };
      TS.clog.track(_CLOG_NAMESPACE, _.assign({}, enterprise_payload, {
        contexts: {
          ui_context: ui_context_payload
        }
      }));
    },
    recordTeamRequestToJoin: function(team_id, anchor_page, from_where) {
      if (!from_where) from_where = "";
      var enterprise_payload = {
        anchor_page: anchor_page,
        entity_key: "request_to_join_workspace",
        target_team_id: team_id,
        tracking_code: from_where
      };
      var ui_context_payload = {
        action: "click",
        action_status: 1
      };
      TS.clog.track(_CLOG_NAMESPACE, _.assign({}, enterprise_payload, {
        contexts: {
          ui_context: ui_context_payload
        }
      }));
    },
    showRequestDialog: function() {
      var dialog_selector = "#generic_dialog";
      var go_btn_selector = ".dialog_go";
      var api_method = "enterprise.teams.creationrequests.create";
      var team_name_selector = "#input_ws_team_name";
      var team_message_selector = "#textarea_ws_team_message";
      var form_selector = "#ws_request_form";

      function checkForm() {
        var $parent = $(dialog_selector);
        var $go = $parent.find(go_btn_selector);
        var ok = TS.ui.validation.validate($(form_selector));
        if (ok) {
          $go.removeAttr("disabled");
          return true;
        }
        $go.attr("disabled", true);
        return false;
      }
      TS.generic_dialog.start({
        title: TS.i18n.t("Request a New Team", "enterprise_workspaces")(),
        body: TS.templates.ws_request_dialog(),
        show_cancel_button: true,
        show_go_button: true,
        go_button_text: TS.i18n.t("Send Request", "enterprise_workspaces")(),
        onGo: function() {
          var $parent = $(dialog_selector);
          var $input_ws_team_name = $(team_name_selector);
          var name_value = $input_ws_team_name.val();
          var $textarea_ws_team_message = $(team_message_selector);
          var ws_team_message = $textarea_ws_team_message.val();
          var $go_button = $parent.find(go_btn_selector);
          $go_button.addClass("ladda-button");
          $go_button.attr("data-style", "expand-right");
          var ladda_button = Ladda.create($go_button[0]);
          ladda_button.start();
          var calling_args = {
            name: name_value,
            reason: ws_team_message
          };
          if (TS.boot_data.app === "client") calling_args.enterprise_token = TS.model.enterprise_api_token;
          TS.api.callImmediately(api_method, calling_args).then(function() {
            TS.ui.toast.show({
              type: "success",
              message: TS.i18n.t("Request to create <b>{team_name}</b> sent! You‘ll be notified once it‘s reviewed.", "enterprise_workspaces")({
                team_name: TS.utility.htmlEntities(name_value)
              })
            });
            TS.generic_dialog.end();
            TS.generic_dialog.cancel();
          }).catch(function(resp) {
            if (!resp || !resp.data) {
              TS.error("WTF: error, but no response or data on " + api_method + "?", resp);
              return;
            }
            var data = resp.data;
            var errors = {
              name_taken: TS.i18n.t("Request failed: The team name <b>{team_name}</b> is already taken.", "enterprise_workspaces")({
                team_name: TS.utility.htmlEntities(name_value)
              }),
              name_is_empty: TS.i18n.t("Request failed: A team name is required.", "enterprise_workspaces")(),
              name_too_long: TS.i18n.t("Request failed: The team name you provided is too long.", "enterprise_workspaces")(),
              reason_too_long: TS.i18n.t("Team request failed: The reason you provided is too long.", "enterprise_workspaces")(),
              unknown: TS.i18n.t("Team request failed: The response error was <b>{error_message}</b>.", "enterprise_workspaces")({
                error_message: data.error || "unknown"
              })
            };
            TS.ui.toast.show({
              type: "error",
              message: errors[data.error] || errors.unknown
            });
            TS.error(api_method + " failed with error: " + (data.error || "undefined"));
            ladda_button.stop();
          });
          return false;
        }
      });
      $([team_name_selector, team_message_selector].join(",")).on("keyup change", checkForm);
      $(team_name_selector).focus();
      $(dialog_selector).find(go_btn_selector).attr("disabled", true);
    }
  });
  var _CLOG_NAMESPACE = "ENTERPRISE_DISCOVER_WORKSPACES";
  var _bindEvents = function($container, list, base_url) {
    var $parents = $container.parents();
    var $search_input = $parents.find('[data-qa="teams_search"]');
    var $workspace_info = $parents.find(".workspace_info");
    var $more_teams_available_message = $parents.find(".more_teams_available");
    var $title_bar = $parents.find(".title_bar");
    var $sort_container = $(".sort_by_container");
    var $sort_by_your = $sort_container.find('select[data-qa="sort-by-your"]');
    var $sort_by_find = $sort_container.find('select[data-qa="sort-by-find"]');
    $container.off();
    $search_input.off();
    $workspace_info.off();
    $more_teams_available_message.off();
    $sort_by_your.off();
    $sort_by_find.off();
    var _joinTeamHandler = function(team_id) {
      return TS.enterprise.workspaces.joinTeam(team_id).then(function(result) {
        if (result) {
          var updated_member = _.merge({}, TS.model.user);
          updated_member.enterprise_user.teams = _.uniq(updated_member.enterprise_user.teams.concat(team_id));
          if (TS.boot_data.app === "web") {
            TS.model.user = updated_member;
          } else {
            TS.members.upsertMember(updated_member);
          }
          var team = TS.enterprise.getTeamById(team_id);
          $container.find('[data-id="' + team_id + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(team, base_url));
        }
        return result;
      });
    };
    $search_input.on("input", function() {
      var filter_by = $(this).val();
      var sort_by;
      if (list === "teams_on") {
        sort_by = $sort_by_your.val();
      } else {
        sort_by = $sort_by_find.val();
      }
      var teams = TS.enterprise.workspaces.getList(list, sort_by, filter_by);
      var html = "";
      if (teams.length) {
        teams.forEach(function(team) {
          html += TS.enterprise.workspaces.getTeamCardHTML(team, base_url, true);
        });
      } else {
        html += TS.templates.no_workspace_results();
      }
      if (TS.boot_data.feature_workspace_request) {
        var $ws_create = $("#ws_request_create_link");
        if (filter_by.length) {
          $ws_create.removeClass("hidden");
        } else {
          $ws_create.addClass("hidden");
        }
      }
      $container.html(html).attr("data-list", list);
      _bindEvents($container, list, base_url);
    });
    $more_teams_available_message.on("click", '[data-qa="find-more-teams"]', function(e) {
      e.preventDefault();
      $('.enterprise_memberdash_header .menu_item_teams[data-qa="find-teams"]').click();
    });
    var sortChangeHandler = function() {
      var sort_by = $(this).val();
      var filter_by = $search_input.val();
      var teams = TS.enterprise.workspaces.getList(list, sort_by, filter_by);
      var html = "";
      if (teams.length) {
        teams.forEach(function(team) {
          html += TS.enterprise.workspaces.getTeamCardHTML(team, base_url, true);
        });
      } else if (list === "teams_on") {
        html += TS.templates.not_on_any_workspaces();
      } else {
        html += TS.templates.no_workspaces_to_join();
      }
      $container.html(html).attr("data-list", list);
      _bindEvents($container, list, base_url);
    };
    $sort_by_your.on("change", sortChangeHandler);
    $sort_by_find.on("change", sortChangeHandler);
    var enterpriseTeamCardClick = function(team_id, stop_history_state) {
      if (typeof team_id !== "string") team_id = $(this).data("id");
      $container.addClass("hidden");
      $title_bar.addClass("hidden");
      $more_teams_available_message.addClass("hidden");
      $search_input.addClass("hidden").attr("disabled", "disabled");
      $workspace_info.html(TS.templates.team_info({
        list: list
      })).removeClass("hidden").attr("data-team-id", team_id);
      if (!stop_history_state) {
        var title = $("title").text();
        var which = list === "teams_not_on" ? "find-teams" : "your-teams";
        window.history.pushState(team_id, title, "/signin/" + which + "/" + team_id);
      }
      var additional_options = {
        top_combined_channels: 5,
        include_admins: true
      };
      var promises = [];
      if (!TS.client) {
        promises.push(TS.api.call("users.info", {
          user: TS.boot_data.user_id
        }).then(function(response) {
          TS.model.user = response.data.user;
        }));
      }
      promises.push(TS.enterprise.ensureTeamInModel(team_id, additional_options));
      return Promise.all(promises).then(function() {
        return TS.enterprise.getTeamById(team_id);
      }).then(function(team) {
        if (!team) {
          $workspace_info.attr("data-team-id", "");
          return;
        }
        var url = TS.enterprise.workspaces.createURL(team, base_url);
        team.launch_url = url + "messages";
        team.site_url = url + "home";
        $workspace_info.html(TS.templates.team_info({
          list: list,
          team: team,
          user: TS.model.user
        })).attr("data-team-id", team_id);
        $container.find('[data-id="' + team.id + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(team, base_url));
        var anchor_page;
        var from_where;
        if (list === "teams_on") {
          anchor_page = "your_workspaces";
          from_where = "your_workspaces_list";
        } else {
          anchor_page = "find_workspaces";
          from_where = "workspaces_you_can_join_list";
        }
        TS.enterprise.workspaces.recordTeamView(team.id, anchor_page, from_where);
      });
    };
    $container.on("click", ".enterprise_team_card", enterpriseTeamCardClick);
    $workspace_info.on("click", ".back_to_teams", function(e) {
      e.preventDefault();
      window.history.back();
      $container.removeClass("hidden");
      $title_bar.removeClass("hidden");
      $search_input.removeClass("hidden").removeAttr("disabled");
      $workspace_info.addClass("hidden").attr("data-team-id", "");
      if ($more_teams_available_message.attr("data-has-more") === "yes") $more_teams_available_message.removeClass("hidden");
    });
    $(window).on("popstate", function(e) {
      var state = e.originalEvent.state;
      if (state && state[0] === "T" && state.length === 9) {
        var stop_history_state = true;
        enterpriseTeamCardClick(state, stop_history_state);
      } else {
        $container.removeClass("hidden");
        $title_bar.removeClass("hidden");
        $search_input.removeClass("hidden").removeAttr("disabled");
        $workspace_info.addClass("hidden").attr("data-team-id", "");
        if ($more_teams_available_message.attr("data-has-more") === "yes") $more_teams_available_message.removeClass("hidden");
      }
    });
    $workspace_info.on("click", 'button[data-qa="join-btn"]', function() {
      var ladda = Ladda.create(this);
      ladda.start();
      var team_id = $(this).data("id");
      var team = TS.enterprise.getTeamById(team_id);
      _joinTeamHandler(team_id).then(function(result) {
        ladda.stop();
        if (result) {
          var url = TS.enterprise.workspaces.createURL(team, base_url);
          team.launch_url = url + "messages";
          team.site_url = url + "home";
          $workspace_info.html(TS.templates.team_info({
            list: list,
            team: team,
            user: TS.model.user
          }));
          var anchor_page;
          var from_where = "workspace_detail";
          if (list === "teams_on") {
            anchor_page = "your_workspaces";
          } else {
            anchor_page = "find_workspaces";
          }
          TS.enterprise.workspaces.recordTeamJoin(team.id, anchor_page, from_where);
        }
        return result;
      });
    });
    $workspace_info.on("click", '[data-qa="leave-btn"]', function(e) {
      e.preventDefault();
      var team_id = $(this).data("id");
      TS.ui.leave_team_dialog.start(team_id);
    });
    $workspace_info.on("click", 'button[data-qa="request-to-join-btn"]', function(e) {
      e.preventDefault();
      var ladda = Ladda.create(this);
      ladda.start();
      var team_id = $(this).data("id");
      TS.enterprise.workspaces.requestToJoinTeam(team_id).then(function() {
        var team = TS.enterprise.getTeamById(team_id);
        $container.find('[data-id="' + team_id + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(team, base_url));
        ladda.stop();
        var url = TS.enterprise.workspaces.createURL(team, base_url);
        team.launch_url = url + "messages";
        team.site_url = url + "home";
        $workspace_info.html(TS.templates.team_info({
          list: list,
          team: team,
          user: TS.model.user
        }));
        var anchor_page;
        var from_where = "workspace_detail";
        if (list === "teams_on") {
          anchor_page = "your_workspaces";
        } else {
          anchor_page = "find_workspaces";
        }
        TS.enterprise.workspaces.recordTeamRequestToJoin(team.id, anchor_page, from_where);
      }).catch(function() {
        ladda.stop();
      });
    });
    $container.on("click", ".enterprise_team_card a", function(e) {
      e.stopPropagation();
    });
    var launchTeamButtonHandler = function(e) {
      if (TS.model.is_our_app) {
        e.preventDefault();
        e.stopPropagation();
        var clicked_team_id = $(this).data("id");
        var teams = _.map(TS.model.user.enterprise_user.teams, function(team_id) {
          var team = TS.enterprise.getTeamById(team_id);
          return {
            name: TS.model.user.name,
            id: TS.model.user.id,
            team_id: team.id,
            team_name: team.name,
            team_url: TS.utility.enterprise.buildTeamUrl(team.domain)
          };
        }).sort(function(a, b) {
          if (a.id === clicked_team_id) return -1;
          if (b.id === clicked_team_id) return 1;
          if (a.team_name < b.team_name) return -1;
          if (a.team_name > b.team_name) return 1;
          return 0;
        });
        var select_team = true;
        TSSSB.call("didSignIn", teams, select_team);
      }
    };
    $container.on("click", ".enterprise_team_card [data-name=launch_team_button]", launchTeamButtonHandler);
    $workspace_info.on("click", "[data-name=launch_team_button]", launchTeamButtonHandler);
    $container.on("click", ".enterprise_team_card .enterprise_team_menu", function(e) {
      e.stopPropagation();
      var team_site_url = $(this).val();
      var team_id = $(this).data("id");
      var team = TS.enterprise.getTeamById(team_id);
      TS.menu.enterprise_team_signin.start(e, $(this), {
        list: list,
        team_id: team_id,
        team_site_url: team_site_url,
        should_show_leave_team: TS.permissions.enterprise.canUserLeaveTeam(TS.model.user, team)
      });
    });
    $container.on("click", ".enterprise_team_card .enterprise_team_join", function(e) {
      e.stopPropagation();
      var ladda = Ladda.create(this);
      ladda.start();
      var team_id = $(this).data("id");
      _joinTeamHandler(team_id).then(function(result) {
        ladda.stop();
        if (result) {
          var anchor_page;
          var from_where;
          if (list === "teams_on") {
            anchor_page = "your_workspaces";
            from_where = "your_workspaces_list";
          } else {
            anchor_page = "find_workspaces";
            from_where = "workspaces_you_can_join_list";
          }
          TS.enterprise.workspaces.recordTeamJoin(team_id, anchor_page, from_where);
        }
      });
    });
    $container.on("click", ".enterprise_team_card .enterprise_team_request", function(e) {
      e.stopPropagation();
      var ladda = Ladda.create(this);
      ladda.start();
      var team_id = $(this).data("id");
      TS.enterprise.workspaces.requestToJoinTeam(team_id).then(function() {
        var team = TS.enterprise.getTeamById(team_id);
        ladda.stop();
        $container.find('[data-id="' + team_id + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(team, base_url));
      }).catch(function() {
        ladda.stop();
      });
    });
    $container.find(".not_on_any_workspaces").on("click", ".find_teams", function(e) {
      e.preventDefault();
      TS.enterprise.member_header.setPage("teams_not_on");
      TS.enterprise.signin.loadPage("teams_not_on");
    });
  };
  var _showToastMessage = function(type, message) {
    TS.ui.toast.show({
      type: type,
      message: message
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.workspaces", {
    start: function() {
      if (!TS.boot_data.page_needs_enterprise) return;
      if (TS.model.user.is_restricted) return;
      return TS.enterprise.promiseToGetTeams().then(function() {
        var teams = TS.enterprise.workspaces.getList("teams_not_on");
        var template_args = {
          teams: teams,
          user: TS.model.user
        };
        if (TS.boot_data.feature_workspace_request) {
          template_args.org_prefs_ws_request_admin_enabled = _.get(TS.boot_data, "enterprise_prefs.org_prefs.enterprise_team_creation_request.is_enabled") && !TS.model.user.is_restricted;
        }
        var settings = {
          title: TS.i18n.t("Join {enterprise_name} Teams", "enterprise_workspaces")({
            enterprise_name: TS.model.enterprise.name
          }),
          body_template_html: TS.templates.workspaces_dialog(template_args),
          onShow: _onShowWorkspaces,
          onCancel: _onCancelWorkspaces,
          modal_class: "fs_modal_header workspaces_modal"
        };
        TS.ui.fs_modal.start(settings);
      });
    }
  });
  var _onShowWorkspaces = function() {
    _bindEvents();
  };
  var _onCancelWorkspaces = function() {};
  var _bindEvents = function() {
    var $container = $(".workspaces_modal");
    var $workspaces = $container.find(".workspaces");
    var $workspace_info = $container.find(".workspace_info");
    var $title_bar = $container.find(".title_bar");
    var $sort_by = $container.find(".sort_by_container select");
    var $search_input = $container.find('[data-qa="teams_search"]');
    var base_url = TS.boot_data.logout_url;
    $container.off();
    $search_input.off();
    $sort_by.off();
    $workspace_info.off();
    var _joinTeamHandler = function(team_id) {
      return TS.enterprise.workspaces.joinTeam(team_id).then(function(result) {
        if (result) {
          var updated_member = _.merge({}, TS.model.user);
          updated_member.enterprise_user.teams = _.uniq(updated_member.enterprise_user.teams.concat(team_id));
          TS.members.upsertMember(updated_member);
          var team = TS.enterprise.getTeamById(team_id);
          $container.find('[data-id="' + team_id + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(team, base_url));
          var from_where = "workspace_detail";
          var anchor_page = "find_workspaces";
          TS.enterprise.workspaces.recordTeamJoin(team.id, anchor_page, from_where);
        }
        return result;
      });
    };
    $search_input.on("input", function() {
      var filter_by = $(this).val();
      var sort_by = $sort_by.val();
      var teams = TS.enterprise.workspaces.getList("teams_not_on", sort_by, filter_by);
      var html = "";
      if (teams.length) {
        teams.forEach(function(team) {
          html += TS.enterprise.workspaces.getTeamCardHTML(team, base_url, true);
        });
      } else {
        html += TS.templates.no_workspace_results();
      }
      $workspaces.html(html);
      _bindEvents();
    });
    $sort_by.on("change", function() {
      var sort_by = $(this).val();
      var filter_by = $search_input.val();
      var teams = TS.enterprise.workspaces.getList("teams_not_on", sort_by, filter_by);
      var html = "";
      teams.forEach(function(team) {
        html += TS.enterprise.workspaces.getTeamCardHTML(team, base_url, true);
      });
      $workspaces.html(html);
      _bindEvents();
    });
    $container.on("click", ".enterprise_team_card", function() {
      var team_id = $(this).data("id");
      $workspaces.addClass("hidden");
      $title_bar.addClass("hidden");
      $search_input.addClass("hidden").attr("disabled", "disabled");
      $workspace_info.html(TS.templates.team_info({
        list: "teams_not_on"
      })).removeClass("hidden");
      var additional_options = {
        top_combined_channels: 5,
        include_admins: true
      };
      return TS.enterprise.ensureTeamInModel(team_id, additional_options).then(function(team) {
        if (!team) {
          return;
        }
        var url = TS.enterprise.workspaces.createURL(team, base_url);
        team.launch_url = url + "messages";
        team.site_url = url + "home";
        $workspace_info.html(TS.templates.team_info({
          list: "teams_not_on",
          team: team,
          user: TS.model.user
        }));
        var anchor_page = "find_workspaces";
        var from_where = "workspaces_you_can_join_list";
        TS.enterprise.workspaces.recordTeamView(team.id, anchor_page, from_where);
      });
    });
    $workspace_info.on("click", ".back_to_teams", function(e) {
      e.preventDefault();
      $workspaces.removeClass("hidden");
      $title_bar.removeClass("hidden");
      $search_input.removeClass("hidden").removeAttr("disabled");
      $workspace_info.addClass("hidden");
    });
    $workspace_info.on("click", 'button[data-qa="join-btn"]', function() {
      var ladda = Ladda.create(this);
      ladda.start();
      var team_id = $(this).data("id");
      var team = TS.enterprise.getTeamById(team_id);
      _joinTeamHandler(team_id).then(function(result) {
        ladda.stop();
        if (result) {
          var url = TS.enterprise.workspaces.createURL(team, base_url);
          team.launch_url = url + "messages";
          team.site_url = url + "home";
          $workspace_info.html(TS.templates.team_info({
            list: "teams_not_on",
            team: team,
            user: TS.model.user
          }));
          var anchor_page = "find_workspaces";
          var from_where = "workspace_detail";
          TS.enterprise.workspaces.recordTeamJoin(team.id, anchor_page, from_where);
        }
        return result;
      });
    });
    $workspace_info.on("click", '[data-qa="leave-btn"]', function(e) {
      e.preventDefault();
      var team_id = $(this).data("id");
      TS.ui.leave_team_dialog.start(team_id);
    });
    $workspace_info.on("click", 'button[data-qa="request-to-join-btn"]', function(e) {
      e.preventDefault();
      var ladda = Ladda.create(this);
      ladda.start();
      var team_id = $(this).data("id");
      TS.enterprise.workspaces.requestToJoinTeam(team_id).then(function() {
        var team = TS.enterprise.getTeamById(team_id);
        $container.find('[data-id="' + team_id + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(team, base_url));
        ladda.stop();
        var url = TS.enterprise.workspaces.createURL(team, base_url);
        team.launch_url = url + "messages";
        team.site_url = url + "home";
        $workspace_info.html(TS.templates.team_info({
          list: "teams_not_on",
          team: team,
          user: TS.model.user
        }));
        var anchor_page = "find_workspaces";
        var from_where = "workspace_detail";
        TS.enterprise.workspaces.recordTeamRequestToJoin(team.id, anchor_page, from_where);
      }).catch(function() {
        ladda.stop();
      });
    });
    $container.on("click", ".enterprise_team_menu", function(e) {
      e.stopPropagation();
      var team_site_url = $(this).val();
      var team_id = $(this).data("id");
      TS.menu.enterprise_team_signin.start(e, $(this), {
        list: "teams_not_on",
        team_id: team_id,
        team_site_url: team_site_url,
        should_show_leave_team: false
      });
    });
    $container.on("click", ".enterprise_team_join", function(e) {
      e.stopPropagation();
      var ladda = Ladda.create(this);
      ladda.start();
      var team_id = $(this).data("id");
      _joinTeamHandler(team_id).then(ladda.stop);
    });
    $container.on("click", ".enterprise_team_request", function(e) {
      e.stopPropagation();
      var ladda = Ladda.create(this);
      ladda.start();
      var team_id = $(this).data("id");
      TS.enterprise.workspaces.requestToJoinTeam(team_id).then(function() {
        var team = TS.enterprise.getTeamById(team_id);
        ladda.stop();
        $container.find('[data-id="' + team_id + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(team, base_url));
        var anchor_page = "find_workspaces";
        var from_where = "workspaces_you_can_join_list";
        TS.enterprise.workspaces.recordTeamJoin(team_id, anchor_page, from_where);
      }).catch(function() {
        ladda.stop();
      });
    });
    $container.on("click", '[data-qa="ws-request-new-team"]', function(e) {
      e.stopPropagation();
      var enabled;
      if (TS.boot_data.feature_workspace_request) {
        enabled = _.get(TS.boot_data, "enterprise_prefs.org_prefs.enterprise_team_creation_request.is_enabled") && !TS.model.user.is_restricted;
      }
      if (enabled) TS.enterprise.workspaces.showRequestDialog();
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("help", {
    issues_sorted_sig: new signals.Signal,
    issues: [],
    more_url: null,
    fake_api_rsps: false,
    max_title_chars: 100,
    onStart: function() {
      if (!TS.client) return;
      TS.ms.connected_sig.addOnce(function() {
        TS.api.call("help.issues.list", {}, TS.help.onListIssues);
      });
    },
    getIssueById: function(id) {
      var issue;
      for (var i = 0; i < TS.help.issues.length; i += 1) {
        issue = TS.help.issues[i];
        if (issue.id == id) {
          return issue;
        }
      }
      return null;
    },
    onListIssues: function(ok, data) {
      if (TS.help.fake_api_rsps) {
        TS.help.more_url = "/help";
        TS.help.issues = [{
          id: "T00001",
          title: "issue 1",
          ts: "1111111111",
          short_text: "blah blah blah blah blah",
          state: "resolved"
        }, {
          id: "T00002",
          title: "issue 2",
          ts: "1141111111",
          short_text: "I think this is ok",
          state: "open"
        }, {
          id: "T00003",
          title: "issue 3",
          ts: "1121111111",
          short_text: "but I am not so sure abotu this",
          state: "unread"
        }, {
          id: "T00004",
          title: "issue 4",
          ts: "1161111111",
          short_text: "what about that?",
          state: "open"
        }, {
          id: "T00005",
          title: "issue 5",
          ts: "1151111111",
          short_text: "fuck it all to hell",
          state: "open"
        }, {
          id: "T00006",
          title: "issue 6",
          ts: "1171111111",
          short_text: "MORE BATTRY PLZ",
          state: "read"
        }, {
          id: "T00007",
          title: "issue 7",
          ts: "1191111111",
          short_text: "halp",
          state: "unread"
        }, {
          id: "T00008",
          title: "issue 8",
          ts: "191111111",
          short_text: "halp",
          state: "unread"
        }, {
          id: "T00009",
          title: "issue 9",
          ts: "181111111",
          short_text: "halp",
          state: "unread"
        }, {
          id: "T000010",
          title: "issue 10",
          ts: "171111111",
          short_text: "halp halp halp halp halp halp halp halp halp halp ...",
          state: "unread"
        }];
      } else if (ok) {
        TS.help.issues = data.issues;
      }
      TS.help.sortIssues();
      TS.help.updateIcon();
    },
    sortIssues: function() {
      var sort_map = {
        unread: 4,
        open: 3,
        read: 2,
        resolved: 1
      };
      var issue;
      for (var i = 0; i < TS.help.issues.length; i += 1) {
        issue = TS.help.issues[i];
        issue._sorter = parseFloat((sort_map[issue.state] || 5) + "." + issue.ts);
      }
      TS.help.issues.sort(function compare(a, b) {
        if (a._sorter < b._sorter) return 1;
        if (a._sorter > b._sorter) return -1;
        return 0;
      });
      TS.help.issues_sorted_sig.dispatch();
    },
    updateIcon: function() {
      var tab_css_class = "normal";
      var unread_count = 0;
      var issue;
      for (var i = 0; i < TS.help.issues.length; i += 1) {
        issue = TS.help.issues[i];
        if (issue.state === "unread") {
          tab_css_class = "unread";
          unread_count += 1;
        }
      }
      $("#flex_menu_toggle").removeClass("normal open unread").addClass(tab_css_class);
      $("#help_icon_circle_count, .help_icon_circle_count").addClass("hidden");
      if (unread_count > 9) unread_count = "9+";
      if (unread_count) $("#help_icon_circle_count, .help_icon_circle_count").removeClass("hidden").text(unread_count);
    },
    createIssue: function(user_args, callback) {
      var title = user_args.title;
      var text = user_args.text;
      if (!title) return;
      text = text || "";
      var args = {
        title: title,
        text: text
      };
      if (user_args.tags) {
        args.tags = user_args.tags;
      }
      TS.api.call("help.issues.create", args, function(ok, data) {
        if (!ok && TS.help.fake_api_rsps) {
          var issue = {
            id: Date.now(),
            title: title,
            ts: Date.now() / 1e3,
            short_text: text.substr(0, 50),
            state: "open"
          };
          setTimeout(function() {
            TS.ms.handleMsg({
              type: "issue_created",
              issue: issue
            });
          }, 2e3);
        }
        if (callback) callback(ok, TS.help.makeErrStr(data));
      });
    },
    fetchIssueDetails: function(id, callback) {
      var issue = TS.help.getIssueById(id);
      if (!issue) {
        if (callback) callback(false, issue, "unknown issue");
        return;
      }
      TS.api.call("help.issues.info", {
        id: id
      }, function(ok, data) {
        var iissue;
        if (TS.help.fake_api_rsps) {
          ok = true;
          iissue = _.cloneDeep(issue);
          iissue.comments = [{
            ts: 112211111,
            from: "eeric",
            text: "comment 1"
          }, {
            ts: 112214444,
            from: "whoop",
            text: "comment 2"
          }];
        } else if (ok) {
          iissue = data.issue;
        }
        TS.help.onIssueChange(iissue);
        if (callback) callback(ok, issue, TS.help.makeErrStr(data));
      });
    },
    markIssueRead: function(id, callback) {
      var issue = TS.help.getIssueById(id);
      if (!issue) {
        if (callback) callback(false, "unknown issue");
        return;
      }
      if (issue.state !== "unread") {
        if (callback) callback(true);
        return;
      }
      TS.api.call("help.issues.markRead", {
        id: id
      }, function(ok, data) {
        if (!ok && TS.help.fake_api_rsps) {
          var clone = _.cloneDeep(issue);
          clone.state = "read";
          setTimeout(function() {
            TS.ms.handleMsg({
              type: "issue_change",
              issue: clone
            });
          }, 2e3);
        }
        if (callback) callback(ok, TS.help.makeErrStr(data));
      });
    },
    replyToIssue: function(id, text, callback) {
      TS.api.call("help.issues.replyTo", {
        id: id,
        text: text
      }, function(ok, data) {
        if (callback) callback(ok, TS.help.makeErrStr(data), data && data.error ? data.error : "");
      });
    },
    markIssueResolved: function(id, callback) {
      var issue = TS.help.getIssueById(id);
      if (!issue) {
        if (callback) callback(false, "unknown issue");
        return;
      }
      TS.api.call("help.issues.markResolved", {
        id: id
      }, function(ok, data) {
        if (TS.help.fake_api_rsps || !ok && data && data.error === "ticket_closed") {
          ok = true;
          var clone = _.cloneDeep(issue);
          clone.state = "resolved";
          setTimeout(function() {
            TS.ms.handleMsg({
              type: "issue_change",
              issue: clone
            });
          }, 1e3);
        }
        if (callback) callback(ok, TS.help.makeErrStr(data));
      });
    },
    onIssueChange: function(iissue) {
      var issue = TS.help.getIssueById(iissue.id);
      if (issue) {
        TS.help.updateIssue(iissue, issue);
      } else {
        TS.help.issues.push(iissue);
      }
      TS.help.sortIssues();
      TS.help.updateIcon();
    },
    updateIssue: function(iissue, issue) {
      _.forOwn(iissue, function(v, k) {
        issue[k] = v;
      });
      if (issue.comments) {
        issue.comments.sort(function compare(a, b) {
          if (a.ts < b.ts) return 1;
          if (a.ts > b.ts) return -1;
          return 0;
        });
      }
    },
    makeErrStr: function(data) {
      if (!data) return "missing data";
      if (data.ok) return null;
      if (data.error && data.info && TS.boot_data.feature_tinyspeck) {
        try {
          return 'api error: "' + data.error + '"<br><br><div class="admin-section" style="word-wrap: break-word; word-break: break-word;">api rsp: ' + JSON.stringify(data).replace(/,/g, ", ") + "</div>";
        } catch (error) {}
      }
      if (data.error) return 'api error: "' + data.error + '"';
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("ui.share_dialog", {
    div: null,
    showing: false,
    delegate: undefined,
    onStart: function() {
      TS.files.team_file_changed_sig.add(_teamFileChanged);
      TS.files.team_file_comment_added_sig.add(_teamFileCommentCountChanged);
      TS.files.team_file_comment_deleted_sig.add(_teamFileCommentCountChanged);
    },
    onKeydown: function(e) {
      if (!TS.ui.share_dialog.showing) return;
      if (e.which == TS.utility.keymap.enter) {
        if (TS.utility.getActiveElementProp("NODENAME") === "BODY") {
          TS.ui.share_dialog.go();
          e.preventDefault();
        }
      } else if (e.which == TS.utility.keymap.esc) {
        if (TS.utility.getActiveElementProp("NODENAME") === "BODY") {
          TS.ui.share_dialog.cancel();
        }
      }
    },
    start: function(item_id, hide_file_preview, has_title, source_model_ob_id, comment, allow_create) {
      if (TS.client && TS.client.ui.checkForEditing()) return;
      _submitting = false;
      _item_id = item_id;
      var item = TS.files.getFileById(item_id);
      var type = "file";
      if (item.mode === "post") {
        type = "file_post";
      } else if (item.mode === "space") {
        type = "file_space";
      } else if (item.mode === "snippet") {
        type = "file_snippet";
      } else if (item.mode === "arugula") {
        type = "file_arugula";
      }
      var sharing_html = TS.templates.builders.buildFileSharingControls(item, true, null, has_title);
      var file_html = hide_file_preview ? "" : TS.templates.builders.fileHTML(item, {
        for_share_dialog: true
      });
      var template_args = {
        type: type,
        item: item,
        item_owner: TS.members.getMemberById(item.user),
        sharing_html: new Handlebars.SafeString(sharing_html),
        file_html: new Handlebars.SafeString(file_html)
      };
      template_args.icon_class = TS.utility.getImageIconClass(item, "thumb_80");
      if (!TS.ui.share_dialog.div) TS.ui.share_dialog.build();
      var html = TS.templates.share_dialog(template_args);
      html = TS.format.replaceHighlightMarkers(html);
      var div = TS.ui.share_dialog.div;
      div.html(html);
      var $file_comment_textarea = $("#file_comment_textarea");
      TS.ui.comments.bindInput($file_comment_textarea, TS.ui.share_dialog.go);
      if (!TS.boot_data.feature_texty_takes_over || !TS.utility.contenteditable.supportsTexty()) {
        $file_comment_textarea.autogrow();
      }
      if (comment) TS.utility.contenteditable.value($file_comment_textarea, comment);
      $file_comment_textarea = null;
      div.modal("show");
      div.find(".dialog_cancel").click(TS.ui.share_dialog.cancel);
      div.find(".dialog_go").click(TS.ui.share_dialog.go);
      TS.ui.file_share.bindFileShareDropdowns(false, {
        id: source_model_ob_id
      }, undefined, allow_create);
      TS.ui.file_share.bindFileShareShareToggle();
      TS.ui.file_share.bindFileShareCommentField();
    },
    go: function() {
      if (_submitting) {
        TS.info("TS.ui.share_dialog stopping because already sharing");
        return;
      }
      if (!TS.ui.share_dialog.showing) {
        TS.error("not showing?");
        return;
      }
      var selected = $("#select_share_channels").lazyFilterSelect("value")[0];
      var comment = _.trim(TS.format.cleanMsg(TS.utility.contenteditable.value($("#file_comment_textarea"))));
      var share_fn = function() {
        TS.shared.getShareModelObId(model_ob_id, function(real_model_ob_id) {
          var shared_from_msg = false;
          TS.files.shareFile(_item_id, real_model_ob_id, comment, shared_from_msg).then(function() {
            _item_id = null;
            if (!TS.client) return;
            var dest_model_ob = TS.shared.getModelObById(real_model_ob_id);
            if (!dest_model_ob) return;
            var active_model_ob = TS.shared.getActiveModelOb();
            if (active_model_ob && active_model_ob.id === dest_model_ob.id) {
              TS.client.ui.instaScrollMsgsToBottom();
            } else {
              return TS.client.displayModelOb(dest_model_ob);
            }
          });
        });
      };
      if (selected && selected.model_ob && selected.model_ob.create_channel) {
        var saved_item_id = _item_id;
        TS.ui.new_channel_modal.start(selected.model_ob.name).then(function(data) {
          _item_id = saved_item_id;
          model_ob_id = data.id;
          share_fn();
          return null;
        }).catch(function() {
          TS.ui.share_dialog.start(saved_item_id, false, false, false, comment);
          return null;
        });
        TS.ui.share_dialog.cancel();
        return false;
      }
      if (TS.ui.file_share.shouldBlockUploadDialogSubmission()) return;
      var $div = $("#share_dialog");
      var model_ob_id = $div.find("#share_model_ob_id").val();
      if (!model_ob_id) {
        if (selected) {
          model_ob_id = selected.model_ob.id;
        }
      }
      if (!model_ob_id) {
        TS.warn("model_ob_id is not set! " + $("#select_share_channels").val());
        return;
      }
      if (TS.ui.share_dialog.delegate && typeof TS.ui.share_dialog.delegate.submit === "function") {
        TS.ui.share_dialog.delegate.submit($div, share_fn);
      } else {
        share_fn();
      }
      _submitting = true;
      TS.ui.share_dialog.div.modal("hide");
    },
    cancel: function() {
      _item_id = null;
      TS.ui.share_dialog.div.modal("hide");
    },
    end: function() {
      if (_thumbnail_lazy_load && _thumbnail_lazy_load.detachEvents) {
        _thumbnail_lazy_load.detachEvents();
      }
      _thumbnail_lazy_load = null;
      TS.model.dialog_is_showing = false;
      TS.ui.share_dialog.showing = false;
      TS.ui.comments.unbindInput($("#file_comment_textarea"));
      TS.ui.share_dialog.div.empty();
      $(window.document).unbind("keydown", TS.ui.share_dialog.onKeydown);
    },
    build: function() {
      $("body").append('<div id="share_dialog" class="modal hide fade"></div>');
      TS.ui.share_dialog.div = $("#share_dialog");
      var div = TS.ui.share_dialog.div;
      div.on("hidden", function(e) {
        if (e.target != this) return;
        TS.ui.share_dialog.end();
      });
      div.on("show", function(e) {
        if (e.target != this) return;
        TS.model.dialog_is_showing = true;
        TS.ui.share_dialog.showing = true;
      });
      div.on("shown", function(e) {
        if (e.target != this) return;
        var preselected = $("#select_share_channels").lazyFilterSelect("value");
        if (preselected.length < 1) {
          $("#select_share_channels").lazyFilterSelect("getInstance").$input.focus();
        } else {
          TS.utility.contenteditable.focus($("#file_comment_textarea"));
        }
        $(window.document).bind("keydown", TS.ui.share_dialog.onKeydown);
        _thumbnail_lazy_load = TS.ui.share_dialog.div.find("img.lazy").lazyload();
      });
    }
  });
  var _thumbnail_lazy_load = null;
  var _item_id;
  var _submitting = false;
  var _teamFileChanged = function(file) {
    if (TS.ui.share_dialog.showing && _item_id === file.id) {
      _updateFileSharedChannels(file);
      _rebuildFileHtml(file);
    }
  };
  var _teamFileCommentCountChanged = function(file) {
    if (TS.ui.share_dialog.showing && _item_id === file.id) {
      _rebuildFileHtml(file);
    }
  };
  var _updateFileSharedChannels = function(file) {
    TS.templates.builders.updateFileShareLabels(file);
    $("#select_share_at_channel_list").html(TS.templates.builders.makeFileCommentHelpHTML(file));
  };
  var _rebuildFileHtml = function(file) {
    var item_dom_id = TS.templates.makeFileDomId(file);
    $("#" + item_dom_id).replaceWith(TS.templates.builders.fileHTML(file, {
      for_share_dialog: true
    }));
    var $lazy_loaded_img = $("#" + item_dom_id).find("img.lazy");
    $lazy_loaded_img.removeClass("lazy").attr("src", $lazy_loaded_img.attr("data-original"));
  };
})();
(function() {
  "use strict";
  TS.registerModule("pins", {
    pins_fetched_sig: new signals.Signal,
    pinned_status_changed_sig: new signals.Signal,
    pinned_message_changed_sig: new signals.Signal,
    pinned_message_deleted_sig: new signals.Signal,
    onStart: function() {
      TS.files.team_file_comment_deleted_sig.add(_fileCommentDeleted);
      TS.files.team_file_deleted_sig.add(_fileDeleted);
      if (TS.client && TS.client.login_sig) {
        TS.client.login_sig.add(_handleDisplayChannel);
      } else if (TS.web && TS.web.login_sig) {
        TS.web.login_sig.add(_handleDisplayChannel);
      }
      TS.channels.switched_sig.add(_handleDisplayChannel);
      TS.groups.switched_sig.add(_handleDisplayChannel);
      TS.ims.switched_sig.add(_handleDisplayChannel);
      TS.mpims.switched_sig.add(_handleDisplayChannel);
      TS.ms.connected_sig.add(__handleSocketConnected);
      TS.channels.left_sig.add(_handleLeftChannelOrGroup);
      TS.groups.left_sig.add(_handleLeftChannelOrGroup);
    },
    fetchPins: function(model_ob) {
      if (!model_ob) return;
      _are_pins_currently_being_fetched[model_ob.id] = true;
      if (TS.isPartiallyBooted()) {
        return new Promise(function(resolve) {
          TS.ms.connected_sig.addOnce(function() {
            resolve(TS.pins.fetchPins(model_ob));
          });
        });
      }
      return TS.api.call("pins.list", {
        channel: model_ob.id
      }).then(function(resp) {
        if (TS.useRedux()) {
          model_ob = TS.redux.channels.getUpdatedReferenceToEntity(model_ob);
        }
        var pinned_items = resp.data.items;
        TS.pins.upsertPinnedItems(pinned_items);
        model_ob.pinned_items = pinned_items;
        model_ob.has_pins = pinned_items.length > 0;
        if (!model_ob.is_channel || model_ob.is_member) _have_pins_been_fetched[model_ob.id] = true;
        TS.pins.pins_fetched_sig.dispatch(model_ob, pinned_items);
        return null;
      }).catch(function(e) {
        TS.logError("Failed to fetch pins for model ob: " + model_ob.id, e);
      }).finally(function() {
        delete _are_pins_currently_being_fetched[model_ob.id];
      });
    },
    arePinsCurrentlyBeingFetched: function(model_ob) {
      return !!_are_pins_currently_being_fetched[model_ob.id];
    },
    havePinsBeenFetched: function(model_ob) {
      return !!_have_pins_been_fetched[model_ob.id];
    },
    startPinFile: function(file_id, model_ob) {
      var file = TS.files.getFileById(file_id);
      if (!file) return;
      _promptAddPin("file", model_ob, {
        file: file,
        type: "file"
      });
    },
    unPinFile: function(file_id, model_ob) {
      var file = _getPinnedFile(file_id, model_ob);
      if (!file) return;
      var item = {
        file: file,
        type: "file"
      };
      _promptRemovePin(item, model_ob, function() {
        _callPinsRemove(model_ob, item);
      });
    },
    startPinFileComment: function(comment_id, file_id, model_ob) {
      var file = TS.files.getFileById(file_id);
      if (!file) return;
      var comment = TS.files.getFileCommentById(file, comment_id);
      if (!comment) return;
      _promptAddPin("comment", model_ob, {
        file: file,
        comment: comment,
        type: "file_comment"
      });
    },
    unPinFileComment: function(comment_id, file_id, model_ob) {
      var comment = _getPinnedComment(comment_id, file_id, model_ob);
      var file = TS.files.getFileById(file_id);
      if (!comment || !file) return;
      var item = {
        file: file,
        comment: comment,
        type: "file_comment"
      };
      _promptRemovePin(item, model_ob, function() {
        _callPinsRemove(model_ob, item);
      });
    },
    startPinMessage: function(msg_ts, model_ob) {
      msg_ts = msg_ts.toString();
      var msg = TS.utility.msgs.findMsg(msg_ts, model_ob.id);
      if (msg) {
        if (msg.subtype === "file_comment") {
          TS.pins.startPinFileComment(msg.comment.id, msg.file.id, model_ob);
        } else if (msg.file) {
          TS.pins.startPinFile(msg.file.id, model_ob);
        } else {
          _promptAddPin("message", model_ob, {
            message: msg,
            type: "message"
          });
        }
      }
    },
    unPinMessage: function(msg_ts, model_ob) {
      msg_ts = msg_ts.toString();
      var msg = _getPinnedMsg(msg_ts, model_ob);
      if (msg) {
        if (msg.subtype === "file_comment") {
          TS.pins.unPinFileComment(msg.comment.id, msg.file.id, model_ob);
        } else if (msg.file) {
          TS.pins.unPinFile(msg.file.id, model_ob);
        } else {
          var item = {
            message: msg,
            type: "message"
          };
          _promptRemovePin(item, model_ob, function() {
            _callPinsRemove(model_ob, item);
          });
        }
      }
    },
    isMessagePinned: function(msg, model_ob) {
      if (msg.subtype === "file_comment") {
        if (!msg.comment) return false;
        return !!_getPinnedComment(msg.comment.id, msg.file.id, model_ob);
      } else if (msg.file) {
        return !!_getPinnedFile(msg.file.id, model_ob);
      }
      return !!_getPinnedMsg(msg.ts, model_ob);
    },
    pinStatusHasChanged: function(pinned, item, type, model_ob) {
      var msg;
      var file;
      var comment;
      var item_changed;
      var model_ob_changed;
      var file_changes;
      if (type === "message" && model_ob) {
        msg = TS.utility.msgs.findMsg(item.message.ts, model_ob.id);
        if (msg) {
          item.message = msg;
          item_changed = _updatePinnedStatus(pinned, msg, model_ob);
        }
      } else if (type === "file_comment") {
        file_changes = TS.files.upsertFile(item.file);
        file = TS.files.getFileById(item.file.id);
        item.file = file;
        comment = TS.files.getFileCommentById(file, item.comment.id);
        if (comment) {
          item.comment = comment;
          item_changed = _updatePinnedStatus(pinned, comment, model_ob);
        } else {
          comment = TS.files.addCommentToFile(item.comment, file);
          item.comment = comment;
        }
        item_changed = item_changed || file_changes.status === "CHANGED";
      } else if (type === "file") {
        file_changes = TS.files.upsertFile(item.file);
        file = TS.files.getFileById(item.file.id);
        item.file = file;
        item_changed = _updatePinnedStatus(pinned, file, model_ob);
        item_changed = item_changed || file_changes.status === "CHANGED";
      }
      model_ob_changed = _updateModelPinnedItems(pinned, item, type, model_ob);
      if (item_changed || model_ob_changed) TS.pins.pinned_status_changed_sig.dispatch(model_ob, item, pinned);
    },
    upsertPinnedItems: function(pinned_items) {
      pinned_items.forEach(function(item) {
        if (item.type === "file") {
          TS.files.upsertFile(item.file);
          item.file = TS.files.getFileById(item.file.id);
        } else if (item.type === "file_comment") {
          TS.files.upsertFile(item.file);
          item.file = TS.files.getFileById(item.file.id);
          var comment = TS.files.getFileCommentById(item.file, item.comment.id);
          if (!comment) comment = TS.files.addCommentToFile(item.comment, item.file);
          item.comment = comment;
        }
      });
    },
    replaceMsg: function(msg, model_ob) {
      if (!model_ob.pinned_items) return;
      model_ob.pinned_items.forEach(function(item) {
        if (item.type === "message" && item.message.ts === msg.ts) {
          item.message = msg;
          TS.pins.pinned_message_changed_sig.dispatch(model_ob, item);
        }
      });
    },
    removeMsg: function(msg_ts, model_ob) {
      if (!model_ob.pinned_items) return;
      _updateModelPinnedItems(false, {
        message: {
          ts: msg_ts
        }
      }, "message", model_ob);
      TS.pins.pinned_message_deleted_sig.dispatch(model_ob);
    },
    canUserPinHere: function(model_ob) {
      if (!TS.client || !model_ob) return false;
      if (!TS.permissions.members.canPostInChannel(model_ob)) return false;
      if (model_ob.is_channel && !model_ob.is_member) return false;
      return true;
    },
    getPinData: function(msg) {
      var matching_pin;
      var pinned_items = TS.shared.getActiveModelOb().pinned_items;
      if (_.isEmpty(pinned_items)) return;
      _.forEach(pinned_items, function(pinned_item) {
        if (pinned_item.type === "file" && (msg.subtype === "file_share" || msg.subtype === "file_mention")) {
          if (msg.file.id === pinned_item.file.id) {
            matching_pin = pinned_item;
            return false;
          }
        } else if (pinned_item.type === "file_comment" && msg.subtype === "file_comment") {
          if (msg.comment.id === pinned_item.comment.id) {
            matching_pin = pinned_item;
            return false;
          }
        } else if (pinned_item.type === "message") {
          if (msg.ts === pinned_item.message.ts) {
            matching_pin = pinned_item;
            return false;
          }
        }
      });
      if (!matching_pin) return;
      var pin_data = {
        created: matching_pin.created,
        created_by: matching_pin.created_by
      };
      return pin_data;
    },
    getUnreadPins: function(model_ob) {
      var last_read;
      var unread_pins = [];
      if (!model_ob) return unread_pins;
      var marked_reason = model_ob._marked_reason;
      if (model_ob.last_read === "0000000000.000000" && marked_reason !== "back") return unread_pins;
      if (TS.model.ui.is_window_focused) {
        if (marked_reason === "back") {
          var msg_after_last_read = TS.utility.msgs.getDisplayedMsgAfterTS(model_ob.last_read, model_ob.msgs);
          if (msg_after_last_read) {
            last_read = parseFloat(msg_after_last_read.ts) - 1;
          } else {
            last_read = model_ob.last_read;
          }
        } else if (model_ob._prev_last_read && (!marked_reason || marked_reason === "viewed")) {
          last_read = model_ob._prev_last_read;
        } else {
          last_read = model_ob.last_read;
        }
      } else {
        last_read = model_ob.last_read;
      }
      var pinned_items = model_ob.pinned_items;
      if (_.isEmpty(pinned_items)) return unread_pins;
      _.forEach(pinned_items, function(pinned_item) {
        var user = TS.members.getMemberById(pinned_item.created_by);
        if (!user) return;
        if (pinned_item.created > Math.ceil(last_read)) {
          if (user.is_self && marked_reason === "back") {
            unread_pins.push(pinned_item);
          } else if (!user.is_self) {
            unread_pins.push(pinned_item);
          }
        }
      });
      return unread_pins;
    },
    test: function() {
      return {
        fileDeleted: _fileDeleted,
        fileCommentDeleted: _fileCommentDeleted,
        have_pins_been_fetched: _have_pins_been_fetched
      };
    }
  });
  var _have_pins_been_fetched = {};
  var _are_pins_currently_being_fetched = {};
  var _previously_connected = false;
  var _getPinnedFile = function(file_id, model_ob) {
    var file = TS.files.getFileById(file_id);
    if (!file || !file.pinned_to) return null;
    var pinned = file.pinned_to.indexOf(model_ob.id) !== -1;
    return pinned ? file : null;
  };
  var _getPinnedComment = function(comment_id, file_id, model_ob) {
    var file = TS.files.getFileById(file_id);
    if (!file) return null;
    var comment = TS.files.getFileCommentById(file, comment_id);
    if (!comment || !comment.pinned_to) return null;
    var pinned = comment.pinned_to.indexOf(model_ob.id) !== -1;
    return pinned ? comment : null;
  };
  var _getPinnedMsg = function(msg_ts, model_ob) {
    if (model_ob.pinned_items) {
      var item;
      for (var i = 0; i < model_ob.pinned_items.length; i += 1) {
        item = model_ob.pinned_items[i];
        if (item.type === "message" && item.message.ts === msg_ts) return item.message;
      }
    }
    var msg = TS.utility.msgs.findMsg(msg_ts, model_ob.id);
    if (!msg) return null;
    if (msg.subtype === "file_comment") {
      if (_getPinnedComment(msg.comment.id, msg.file.id, model_ob)) return msg;
    } else if (msg.file) {
      if (_getPinnedFile(msg.file.id, model_ob)) return msg;
    } else if (msg.pinned_to && msg.pinned_to.indexOf(model_ob.id) !== -1) {
      return msg;
    }
    return null;
  };
  var _updatePinnedStatus = function(pinned, item, model_ob) {
    var changed = false;
    if (!item.pinned_to) item.pinned_to = [];
    if (pinned) {
      if (item.pinned_to.indexOf(model_ob.id) === -1) {
        item.pinned_to.push(model_ob.id);
        changed = true;
      }
    } else {
      var index = item.pinned_to.indexOf(model_ob.id);
      if (index !== -1) {
        item.pinned_to.splice(index, 1);
        changed = true;
      }
    }
    return changed;
  };
  var _updateModelPinnedItems = function(pinned, item, type, model_ob) {
    var changed = false;
    if (!model_ob.pinned_items) model_ob.pinned_items = [];
    var pinned_items_index = -1;
    model_ob.pinned_items.some(function(pinned_item, index) {
      var matches = false;
      if (type === "message" && pinned_item.type === "message") {
        if (pinned_item.message.ts === item.message.ts) matches = true;
      } else if (type === "file" && pinned_item.type === "file") {
        if (pinned_item.file.id === item.file.id) matches = true;
      } else if (type === "file_comment" && pinned_item.type === "file_comment") {
        if (pinned_item.comment.id === item.comment.id) matches = true;
      }
      if (matches) {
        pinned_items_index = index;
      }
      return matches;
    });
    if (!pinned && pinned_items_index !== -1) {
      model_ob.pinned_items.splice(pinned_items_index, 1);
      changed = true;
    } else if (pinned && pinned_items_index === -1) {
      model_ob.pinned_items.unshift(item);
      changed = true;
    }
    model_ob.has_pins = model_ob.pinned_items.length > 0;
    return changed;
  };
  var _promptAddPin = function(type, model_ob, item) {
    var body_text = TS.i18n.t("Are you sure you want to pin this {type} to {pin_to_label}?", "pins")({
      type: type,
      pin_to_label: Handlebars.helpers.pinToLabel(model_ob)
    });
    var body = "<p>" + body_text + "</p>" + TS.client.channel_page.pinnedItemHtml(item, model_ob);
    var title = TS.i18n.t("Pin {type}", "pins")({
      type: type
    });
    var button_text = TS.i18n.t("Yes, pin this {type}", "pins")({
      type: type
    });
    TS.generic_dialog.start({
      title: title,
      body: body,
      go_button_text: button_text,
      onGo: function() {
        _callPinsAdd(model_ob, item);
      }
    });
  };
  var _callPinsAdd = function(model_ob, item) {
    var args = _apiArgs(model_ob, item);
    var ts = TS.utility.date.makeTsStamp(null, "0");
    TS.api.call("pins.add", args, function(ok, data) {
      if (!ok) {
        if (data.error === "too_many_pins") {
          var type = "message";
          if (item.type === "file") type = "file";
          if (item.type === "file_comment") type = "comment";
          TS.generic_dialog.start({
            title: TS.i18n.t("Couldn’t pin {type}", "pins")({
              type: type
            }),
            body: "<p>" + TS.i18n.t("Sorry! You’ve hit the limit on how many pins you can have in this channel.", "pins")() + "</p>",
            show_cancel_button: false
          });
        } else {
          TS.info("pins.add got a not ok rsp: " + data.error);
        }
        if (data.error !== "already_pinned") return;
      }
      item.created = ts;
      item.created_by = TS.boot_data.user_id;
      TS.pins.pinStatusHasChanged(true, item, item.type, model_ob);
    });
  };
  var _callPinsRemove = function(model_ob, item) {
    var args = _apiArgs(model_ob, item);
    TS.api.call("pins.remove", args, function(ok, data) {
      if (!ok) {
        if (data.error !== "not_pinned") return;
      }
      TS.pins.pinStatusHasChanged(false, item, item.type, model_ob);
    });
  };
  var _apiArgs = function(model_ob, item) {
    var args = {
      channel: model_ob.id
    };
    if (item.type === "message") {
      args.timestamp = item.message.ts;
    } else if (item.type === "file") {
      args.file = item.file.id;
    } else if (item.type === "file_comment") {
      args.file_comment = item.comment.id;
    }
    return args;
  };
  var _promptRemovePin = function(item, model_ob, callback) {
    TS.client.channel_page.highlightPinnedItemForRemoval(item);
    var html = TS.client.channel_page.pinnedItemHtml(item, model_ob);
    TS.generic_dialog.start({
      title: TS.i18n.t("Remove Pinned Item", "pins")(),
      body: "<p>" + TS.i18n.t("Are you sure you want to remove this pinned item?", "pins")() + "</p>" + html,
      go_button_text: TS.i18n.t("Yes, remove this pinned item", "pins")(),
      onGo: callback,
      onCancel: function() {
        TS.client.channel_page.unHighlightPinnedItemForRemoval(item);
      }
    });
  };
  var _fileCommentDeleted = function(file, comment_id, deleted_comment) {
    if (!deleted_comment || !deleted_comment.pinned_to) return;
    deleted_comment.pinned_to.forEach(function(model_ob_id) {
      var model_ob = TS.shared.getModelObById(model_ob_id);
      if (!model_ob) return;
      var changed = _updateModelPinnedItems(false, {
        comment: deleted_comment
      }, "file_comment", model_ob);
      if (changed) TS.pins.pinned_status_changed_sig.dispatch(model_ob);
    });
  };
  var _fileDeleted = function(file) {
    if (!file) return;
    if (file.pinned_to) {
      file.pinned_to.forEach(function(model_ob_id) {
        var model_ob = TS.shared.getModelObById(model_ob_id);
        if (!model_ob) return;
        var changed = _updateModelPinnedItems(false, {
          file: file
        }, "file", model_ob);
        if (changed) TS.pins.pinned_status_changed_sig.dispatch(model_ob);
      });
    }
    if (file.comments) {
      file.comments.forEach(function(comment) {
        _fileCommentDeleted(file, comment.id, comment);
      });
    }
  };
  var _handleDisplayChannel = function() {
    var model_ob = TS.shared.getActiveModelOb();
    if (model_ob && !_have_pins_been_fetched[model_ob.id] && !_are_pins_currently_being_fetched[model_ob.id]) TS.pins.fetchPins(model_ob);
  };
  var __handleSocketConnected = function() {
    if (_previously_connected) {
      _have_pins_been_fetched = {};
      _are_pins_currently_being_fetched = {};
    } else {
      _previously_connected = true;
    }
  };
  var _handleLeftChannelOrGroup = function() {
    var model_ob = TS.shared.getActiveModelOb();
    delete _have_pins_been_fetched[model_ob.id];
    delete _are_pins_currently_being_fetched[model_ob.id];
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.toggle", {
    onStart: function() {
      $('input[type="checkbox"][data-style="toggle"]').each(function() {
        $(this).togglify();
      });
    },
    togglify: function($checkbox, settings) {
      if (settings) {
        settings = _.defaults({}, settings, _default_settings);
      } else {
        settings = {};
        settings.initial_state = $checkbox.data("initial_state") ? $checkbox.data("initial_state") : _default_settings.initial_state;
        settings.label = $checkbox.data("label") ? $checkbox.data("label") : _default_settings.label;
        settings.on_class = $checkbox.data("on-class") ? $checkbox.data("on-class") : _default_settings.on_class;
        settings.on_text = $checkbox.data("on-text") ? $checkbox.data("on-text") : _default_settings.on_text;
        settings.off_text = $checkbox.data("off-text") ? $checkbox.data("off-text") : _default_settings.off_text;
        settings.off_class = $checkbox.data("off-class") ? $checkbox.data("off-class") : _default_settings.off_class;
        settings.off_label = $checkbox.data("off-label") ? $checkbox.data("off-label") : _default_settings.off_label;
        settings.disabled = $checkbox.data("disabled") ? $checkbox.data("disabled") : _default_settings.disabled;
        settings.cls = $checkbox.data("cls") ? $checkbox.data("cls") : _default_settings.cls;
      }
      if (settings.initial_state === null) {
        settings.initial_state = !!$checkbox.is(":checked");
      }
      if (settings.disabled === null) {
        settings.disabled = !!$checkbox.is(":disabled");
      }
      _create($checkbox, settings);
      return $checkbox;
    }
  });
  var _default_settings = {
    cls: "",
    initial_state: null,
    label: "",
    on_text: "On",
    on_class: "",
    off_text: "Off",
    off_class: "",
    off_label: "",
    disabled: null
  };
  var _create = function($checkbox, settings) {
    var $el_to_hide = $checkbox;
    var $label = $checkbox.closest("label");
    if ($label.length) {
      $el_to_hide = $label;
      var label_text = $.trim($label.text());
      if (label_text && settings.label === _default_settings.label && settings.off_label === _default_settings.off_label) {
        settings.label = label_text;
      }
    }
    var html = _build(settings);
    var $toggle = $(html);
    $el_to_hide.addClass("hidden").after($toggle);
    $toggle.on("click", function() {
      $(this).toggleClass("checked");
      $checkbox.prop("checked", $(this).hasClass("checked")).trigger("change");
      if (settings.on_class !== settings.off_class) {
        $(this).toggleClass(settings.on_class, $(this).hasClass("checked"));
        $(this).toggleClass(settings.off_class, !$(this).hasClass("checked"));
      } else if (settings.on_class !== "") {
        TS.warn("TS.ui.toggle: on & off classes are the same. You may want to use the `cls` option instead");
      }
    });
  };
  var _build = function(settings) {
    var html = TS.templates.toggle({
      settings: settings
    });
    return html;
  };
})();
$.fn.togglify = function(settings) {
  "use strict";
  return TS.ui.toggle.togglify($(this), settings);
};
(function() {
  "use strict";
  TS.registerModule("inline_file_previews", {
    expand_sig: new signals.Signal,
    collapse_sig: new signals.Signal,
    onStart: function() {
      _startTimeAgoInterval();
    },
    checkForInlineFilePreviewClick: function(e) {
      var $el = $(e.target);
      var file_id;
      var $msg = $el.closest(".message");
      if ($msg.length === 0) return;
      if ($el.hasClass("service_link") || $el.closest(".service_link") > 0) return;
      var container_id = $msg.attr("id");
      var $msg_inline_file_preview_toggler = $el.closest(".msg_inline_file_preview_toggler");
      if ($msg_inline_file_preview_toggler.length > 0) {
        e.preventDefault();
        file_id = $msg_inline_file_preview_toggler.data("file-id");
        if ($msg_inline_file_preview_toggler.hasClass("collapsed")) {
          _inlineExpand(container_id, file_id);
        } else {
          _inlineCollapse(container_id, file_id);
        }
        return true;
      }
      var $container = $el.closest(".inline_file_preview_container, .file_container");
      if ($container.length === 0) return;
      var $message = $el.closest("ts-message");
      var message_ts = $message.data("ts") + "";
      var message_c_id = $message.data("model-ob-id");
      var payload = {
        message_timestamp: message_ts,
        channel_id: message_c_id,
        channel_type: message_c_id ? message_c_id.charAt(0) : "",
        member_id: $message.data("member-id"),
        app_id: $message.data("app-id"),
        bot_id: $message.data("bot-id")
      };
      if ($el.closest(".preview_show.preview_show_more").length > 0) {
        e.preventDefault();
        _expandContent(e, $msg, $container);
        TS.clog.track("PREVIEW_EXPAND", payload);
        return true;
      }
      if ($el.closest(".preview_show.preview_show_less .preview_show_btn, .preview_show_less_header").length > 0) {
        e.preventDefault();
        _collapseContent(e, $msg, $container);
        TS.clog.track("PREVIEW_COLLAPSE", payload);
        return true;
      }
      if ($el.closest("a").length) return false;
      file_id = $container.data("file-id");
      var file = TS.files.getFileById(file_id);
      if (!file) return false;
      if (file.mode === "space" || file.mode === "post" || file.mode === "arugula" || file.mode === "email" || file.mode === "snippet") {
        if ($container.hasClass("inline_collapsed")) {
          e.preventDefault();
          _expandContent(e, $msg, $container);
          return true;
        }
      }
      return false;
    },
    shouldTruncate: function(file) {
      if (!file) return false;
      if (file.mode === "snippet") {
        if (file.lines_more > 0 || file.preview_is_truncated) return true;
      } else if (file.mode === "post" || file.mode === "space") {
        if (!file.preview) return false;
        if (file.preview.length >= 400) return true;
        if (file.preview.split(" ").length >= 50) return true;
        if (file.preview.split("\n").length >= 4) return true;
        var closing_tags = file.preview.match(/<\/(?:h\d|p|li|pre|blockquote)>/g) || [];
        var only_start_tags = file.preview.match(/<hr>/g) || [];
        var tags = closing_tags.concat(only_start_tags);
        if (tags.length >= 4) return true;
      } else if (file.mode === "email") {
        return true;
      }
      return false;
    },
    isTruncated: function(msg_id, file) {
      if (!file) return false;
      return !_expanded_content_state[msg_id + "_" + file.id];
    },
    expandableState: function(container_id, file_id) {
      if (TS.model.expandable_state["inline_file_" + container_id + file_id]) return true;
      if (TS.model.expandable_state["inline_file_" + container_id + file_id] === false) return false;
    },
    shouldExpand: function(container_id, file_id) {
      var expandable_state = TS.inline_file_previews.expandableState(container_id, file_id);
      if (typeof expandable_state === "boolean") return expandable_state;
      return true;
    },
    expandAllInCurrent: function() {
      _no_scrolling = true;
      $(".msg_inline_file_preview_toggler").each(function(i, el) {
        var $el = $(el);
        var file_id = $el.data("file-id");
        var container_id = $el.closest(".message").attr("id");
        _inlineExpand(container_id, file_id);
      });
      _no_scrolling = false;
      if (TS.client) TS.client.ui.instaScrollMsgsToBottom(false);
    },
    collapseAllInCurrent: function() {
      $(".msg_inline_file_preview_toggler").each(function(i, el) {
        var $el = $(el);
        var file_id = $el.data("file-id");
        var container_id = $el.closest(".message").attr("id");
        _inlineCollapse(container_id, file_id);
      });
    },
    test: function() {
      return {
        actuallyExpandContent: _actuallyExpandContent
      };
    }
  });
  var _expanded_content_state = {};
  var _no_scrolling = false;
  var _inlineExpand = function(container_id, file_id) {
    TS.model.expandable_state["inline_file_" + container_id + file_id] = true;
    TS.storage.storeExpandableState(TS.model.expandable_state);
    var selector = "#" + TS.utility.makeSafeForDomId(container_id);
    var $el = $(selector);
    if (!$el.length) return;
    var was_at_bottom = TS.client && TS.client.ui.areMsgsScrolledToBottom();
    var filter = function() {
      return $(this).data("file-id") == file_id;
    };
    var $holder = $el.find(".inline_file_preview_container, .file_container").filter(filter);
    $el.find(".msg_inline_file_title_hider").filter(filter).addClass("hidden");
    $el.find('.msg_inline_file_preview_toggler[data-file-id="' + file_id + '"]').removeClass("collapsed").addClass("expanded");
    $holder.removeClass("hidden");
    if (TS.client) TS.client.ui.checkInlineImgsAndIframesEverywhere();
    $holder.css("opacity", 0).stop().animate({
      opacity: 1
    }, 300);
    if (!_no_scrolling) {
      if (TS.client && was_at_bottom) {
        TS.client.ui.instaScrollMsgsToBottom(false);
        $holder.scrollintoview({
          duration: 0,
          offset: "top",
          px_offset: 0,
          direction: "y"
        });
      } else {
        $holder.scrollintoview({
          duration: 200,
          offset: "bottom",
          px_offset: 0,
          direction: "y"
        });
      }
    }
    TS.inline_file_previews.expand_sig.dispatch(container_id);
    if (TS.client) TS.ui.utility.updateClosestMonkeyScroller($el);
  };
  var _inlineCollapse = function(container_id, file_id) {
    TS.model.expandable_state["inline_file_" + container_id + file_id] = false;
    TS.storage.storeExpandableState(TS.model.expandable_state);
    var selector = "#" + TS.utility.makeSafeForDomId(container_id);
    var $el = $(selector);
    if (!$el.length) return;
    var filter = function() {
      return $(this).data("file-id") == file_id;
    };
    var $holder = $el.find(".inline_file_preview_container, .file_container").filter(filter);
    $el.find(".msg_inline_file_title_hider").filter(filter).removeClass("hidden");
    $el.find('.msg_inline_file_preview_toggler[data-file-id="' + file_id + '"]').removeClass("expanded").addClass("collapsed");
    $holder.addClass("hidden");
    TS.inline_file_previews.collapse_sig.dispatch(container_id);
    setTimeout(function() {
      if (TS.client) TS.ui.utility.updateClosestMonkeyScroller($el);
    }, 0);
  };
  var _expandContent = function(e, $msg, $container) {
    var file_id = $container.data("file-id");
    var file = TS.files.getFileById(file_id);
    if (!file) return;
    if (file.mode === "post" || file.mode === "space" || file.mode === "snippet") {
      var $btn = $container.find(".preview_show_more .preview_show_btn");
      $btn.data("stashed_text", $btn.html()).empty();
      var spinner = new Spinner({
        lines: 9,
        length: 0,
        width: 4,
        radius: 5,
        corners: 1,
        rotate: 0,
        direction: 1,
        color: "#ffffff",
        speed: 1,
        trail: 25,
        shadow: false,
        hwaccel: false,
        className: "spinner",
        zIndex: 2e9,
        top: "-8px",
        left: "-4px",
        opacity: .1
      });
      spinner.spin($btn.get(0));
      $container.addClass("loading");
      TS.files.fetchFileInfo(file_id, function(id, file) {
        spinner.stop();
        $btn.html($btn.data("stashed_text"));
        $container.removeClass("loading");
        if (file.content_html || file.content_highlight_html) _actuallyExpandContent($msg, file);
        TS.utility.welcome_post.clogWelcomePostExpand(file);
      });
    } else if (file.mode === "email") {
      if (file.simplified_html) {
        _actuallyExpandContent($msg, file);
      } else {
        $msg.find(".email_content").addClass("loading");
        var expand_timeout = setTimeout(function() {
          $msg.find(".inline_file_preview_container, .file_container").addClass("expanded");
        }, 1e3);
        TS.files.fetchFileInfo(file_id, function(id, fetched_file) {
          clearTimeout(expand_timeout);
          _actuallyExpandContent($msg, fetched_file);
          $msg.find(".email_content").removeClass("loading");
        });
      }
    }
  };
  var _actuallyExpandContent = function($msg, file) {
    var container_id = $msg.attr("id");
    var state_id = container_id + "_" + file.id;
    _expanded_content_state[state_id] = true;
    $msg.find(".inline_file_preview_container, .file_container").removeClass("inline_collapsed").addClass("inline_expanded");
    TS.inline_file_previews.expand_sig.dispatch($msg);
    if (TS.client) TS.ui.utility.updateClosestMonkeyScroller($msg);
  };
  var _collapseContent = function(e, $msg, $container) {
    var ts = $msg.attr("id");
    var file_id = $container.data("file-id");
    var file = TS.files.getFileById(file_id);
    if (!file) return;
    var state_id = ts + "_" + file_id;
    delete _expanded_content_state[state_id];
    $msg.find(".inline_file_preview_container, .file_container").removeClass("inline_expanded").addClass("inline_collapsed");
    if (!_no_scrolling) {
      var boundingRect = $msg[0].getBoundingClientRect();
      if (boundingRect.top < 0) {
        $msg.scrollintoview({
          duration: 0,
          offset: "top",
          px_offset: 0,
          direction: "y"
        });
      }
    }
    TS.inline_file_previews.collapse_sig.dispatch($msg);
    if (TS.client) TS.ui.utility.updateClosestMonkeyScroller($msg);
  };
  var _timeAgoInterval;
  var _startTimeAgoInterval = function() {
    if (_timeAgoInterval) clearInterval(_timeAgoInterval);
    var updater = function() {
      var $times = $("#msgs_div .file_time_ago");
      var times = [];
      $times.each(function() {
        var file_id = $(this).data("file-id");
        var file = TS.files.getFileById(file_id);
        if (!file) {
          times.push($(this).text());
          return;
        }
        times.push(TS.utility.date.toTimeAgo(file.updated));
        file = null;
      });
      $times.each(function(index, element) {
        $(element).text(times[index]);
        element = null;
      });
      $times = null;
    };
    updater = TS.utility.throttleFunc(updater, 5e3);
    _timeAgoInterval = setInterval(updater, 6e4);
  };
})();
(function() {
  "use strict";
  TS.registerModule("rxns", {
    rxn_records_changed_sig: new signals.Signal,
    member_rxns_fetched_sig: new signals.Signal,
    member_rxns_being_fetched_sig: new signals.Signal,
    need_alerts: {},
    onStart: function() {
      if (!TS.client) return;
      TS.prefs.team_handy_rxns_changed_sig.add(_updateAllRxnsUI);
      TS.prefs.channel_handy_rxns_changed_sig.add(_updateAllRxnsUI);
      TS.prefs.preferred_skin_tone_changed_sig.add(_updateAllRxnsUI);
      TS.prefs.emoji_mode_changed_sig.add(_updateAllRxnsUI);
      _dispatchSignalThrottled = function() {};
      var _throttledUpdateUI = function() {};
      TS.client.login_sig.add(function() {
        _dispatchSignalThrottled = TS.utility.throttleFunc(_dispatchSignal, 100);
        _throttledUpdateUI = TS.utility.throttleFunc(_updateUI, 1e3);
      });
      _updateUIThrottled = function(rxn_key, item_type) {
        _throttledUpdateUI(rxn_key, undefined, undefined, item_type);
      };
    },
    upsertRxnsFromDataAndUpdateUI: function(rxn_key, rxns) {
      var upsert = _upsertRxnsFromData(rxn_key, rxns);
      if (upsert.status !== "NOOP") {
        _updateUIThrottled(rxn_key);
      }
      return upsert;
    },
    getRxnKey: function(type, id, c_id) {
      if (type === "message" && !c_id) TS.error("getRxnKey: no c_id provided for message rxn_key");
      if (type !== "message" && c_id) TS.error("getRxnKey: c_id provided for but this is not a message rxn_key");
      return type + "-" + id + "-" + (c_id || "");
    },
    getRxnKeyByMsgType: function(msg) {
      var rxn_key;
      if (msg.subtype === "file_upload" || msg.subtype === "file_share" || msg.subtype === "file_mention" || msg.subtype === "file_reaction") {
        if (msg.file) rxn_key = msg.file._rxn_key;
      } else if (msg.subtype === "file_comment") {
        if (msg.comment) rxn_key = msg.comment._rxn_key;
      } else {
        rxn_key = msg._rxn_key;
      }
      return rxn_key;
    },
    getRxnKeyFromData: function(item) {
      var id;
      if (item.type === "message") {
        id = item.ts || item.message.ts;
      } else if (item.type === "file") {
        id = item.file.id || item.file;
      } else if (item.type === "file_comment") {
        id = item.file_comment || item.comment.id;
      } else {
        throw new Error("item.type not handled");
      }
      return TS.rxns.getRxnKey(item.type, id, item.channel);
    },
    getExistingRxnsByKey: function(rxn_key) {
      return _rxns[rxn_key] || null;
    },
    getRxnRecordByKey: function(rxn_key) {
      if (_rxn_records_map[rxn_key]) return _rxn_records_map[rxn_key];
      for (var i = _rxn_records.length - 1; i > -1; i -= 1) {
        if (_rxn_records[i].rxn_key === rxn_key) {
          _rxn_records_map[rxn_key] = _rxn_records[i];
          return _rxn_records_map[rxn_key];
        }
      }
      return null;
    },
    getNextRxnRecordThatNeedsAlert: function() {
      var candidate;
      for (var i = _rxn_records.length - 1; i > -1; i -= 1) {
        if (TS.rxns.need_alerts[_rxn_records[i].rxn_key]) {
          candidate = _rxn_records[i];
        } else {
          break;
        }
      }
      return candidate;
    },
    getRxnsFromData: function(item) {
      if (item.type === "message") return item.message && item.message.reactions;
      if (item.type === "file") return item.file && item.file.reactions;
      if (item.type === "file_comment") return item.comment && item.comment.reactions;
      return null;
    },
    doesRxnsHaveRxnFromMember: function(rxns, name, member_id) {
      var canonical_name = TS.emoji.nameToCanonicalName(name);
      if (!rxns) return false;
      var rxn = TS.rxns.getRxnFromRxns(rxns, name) || TS.rxns.getRxnFromRxns(rxns, canonical_name);
      if (!rxn) return false;
      if (!rxn.count) return false;
      if (!rxn.users) return false;
      return rxn.users.indexOf(member_id) != -1;
    },
    doesRxnsHaveRxnFromUser: function(rxns, name) {
      return TS.rxns.doesRxnsHaveRxnFromMember(rxns, name, TS.model.user.id);
    },
    doesRxnsHaveRxn: function(rxns, name) {
      if (!rxns) return false;
      return !!TS.rxns.getRxnFromRxns(rxns, name);
    },
    doesRxnsHaveSkinlessRxn: function(rxns, name) {
      if (!rxns) return false;
      var names = [name.replace(/(::skin-tone-[2-6])/, "")];
      TS.emoji.spliceSkinToneVariationsIntoAnArrayOfEmojiNames(names);
      for (var i = 0; i < names.length; i += 1) {
        if (TS.rxns.getRxnFromRxns(rxns, names[i])) return true;
      }
      return false;
    },
    countAllRxns: function(rxns) {
      if (!rxns) return 0;
      var t = 0;
      rxns.forEach(function(rxn) {
        t += rxn.count || 0;
      });
      return t;
    },
    countAllEmoji: function(rxns) {
      if (!rxns) return 0;
      return rxns.length;
    },
    countAllUsersRxns: function(rxns, user_id) {
      if (!rxns) return 0;
      var t = 0;
      rxns.forEach(function(rxn) {
        if (rxn.users.indexOf(user_id) > -1) {
          t += 1;
        }
      });
      return t;
    },
    getAllUniqueRxners: function(rxns, except) {
      if (!rxns) return [];
      var rxners = [];
      rxns.forEach(function(rxn) {
        if (!rxn) return;
        if (!rxn.count) return;
        if (!rxn.users) return;
        rxn.users.forEach(function(member_id) {
          if (except == member_id) return;
          if (rxners.indexOf(member_id) != -1) return;
          rxners.push(member_id);
        });
      });
      return rxners;
    },
    getRxnFromRxns: function(rxns, name) {
      if (!rxns) return null;
      return rxns.filter(function(val) {
        return val.name == name;
      })[0] || null;
    },
    changeRxnsFromIMsg: function(imsg) {
      if (!imsg.item) return;
      var simple_format = false;
      if (imsg.item.type === "message" && imsg.item.ts) {
        simple_format = true;
      } else if (imsg.item.type === "file" && typeof imsg.item.file === "string") {
        simple_format = true;
      } else if (imsg.item.type === "file_comment" && imsg.item.file_comment && typeof imsg.item.file === "string") {
        simple_format = true;
      }
      if (!simple_format) return;
      if (!_isReactionItemRelevant(imsg.item)) return;
      var by_self = imsg.user == TS.model.user.id;
      var rxn_key = TS.rxns.getRxnKeyFromData(imsg.item);
      var existing_rxns = TS.rxns.getExistingRxnsByKey(rxn_key);
      var new_rxns;
      var adding = imsg.type === "reaction_added";
      new_rxns = _addOrRemoveRxnFromRxns(adding, _.cloneDeep(existing_rxns) || [], imsg.reaction, imsg.user);
      var upsert = _upsertRxnsFromData(rxn_key, new_rxns);
      TS.dir(888, upsert, "handleRxnChangeFromMS upsert status:" + upsert.status);
      _maybeUpdateRxnRecords(imsg);
      if (upsert.status === "NOOP") return;
      if (by_self && !imsg._from_evt_log) {
        _updateUI(rxn_key, imsg.reaction, imsg.user, imsg.item.type);
      } else {
        _updateUIThrottled(rxn_key, imsg.item.type);
      }
    },
    changeRxnsFromUserAction: function(rxn_key, name, adding) {
      var canonical_name = TS.emoji.nameToCanonicalName(name);
      var rxns = TS.rxns.getExistingRxnsByKey(rxn_key);
      var rxn = TS.rxns.getRxnFromRxns(rxns, name);
      if (adding || !rxn) name = canonical_name;
      TS.log(888, "changeRxnsFromUserAction rxn_key:" + rxn_key + " name:" + name + " adding:" + adding);
      if (adding && !TS.emoji.isValidName(name)) {
        TS.error('"' + name + '" is not a valid emoji');
        return;
      }
      if (adding && TS.boot_data.feature_thanks && TS.rxns.getHandyRxnsDisplayDataByRxnKey(rxn_key).is_poll) {
        _removeAllRxnsFromUser(rxn_key);
      }
      var existing_rxns = TS.rxns.getExistingRxnsByKey(rxn_key) || [];
      if (adding) {
        var emoji_cnt = TS.rxns.countAllEmoji(existing_rxns);
        var rxns_cnt = TS.rxns.countAllUsersRxns(existing_rxns, TS.model.user.id);
        if (emoji_cnt >= 50 && !TS.rxns.doesRxnsHaveRxn(existing_rxns, name)) {
          _displayTooManyError(TOO_MANY_EMOJI);
          return;
        } else if (rxns_cnt >= 23) {
          _displayTooManyError(TOO_MANY_REACTIONS);
          return;
        }
      }
      var new_rxns = _addOrRemoveUserRxnFromRxns(adding, _.cloneDeep(existing_rxns), name);
      TS.dir(888, existing_rxns, "existing_rxns");
      TS.dir(888, new_rxns, "new_rxns");
      var upsert = _upsertRxnsFromUserAction(rxn_key, new_rxns);
      TS.dir(888, upsert, "changeRxnsFromUserAction upsert status:" + upsert.status);
      if (upsert.status === "NOOP") {
        TS.error("changeRxnsFromUserAction called but no NOOP?");
        return;
      }
      _updateUI(rxn_key, name, TS.model.user.id);
      var method = adding ? "reactions.add" : "reactions.remove";
      var api_args = _getApiArgsFromKey(rxn_key, {
        name: name
      });
      var $el = $('[data-rxn-key="' + rxn_key + '"]');
      var payload = {};
      var $message = $el.closest("ts-message");
      var message_ts = $message.data("ts") + "";
      var message_c_id = $message.data("model-ob-id");
      payload = {
        message_timestamp: message_ts,
        channel_id: message_c_id,
        channel_type: message_c_id ? message_c_id.charAt(0) : "",
        member_id: $message.data("member-id"),
        app_id: $message.data("app-id"),
        bot_id: $message.data("bot-id")
      };
      var clog_key = adding ? "REACTION_ADDED" : "REACTION_REMOVED";
      if (TS.model.unread_view_is_showing && api_args.timestamp) {
        _.merge(payload, TS.client.ui.unread.getTrackingData(api_args.timestamp));
        TS.client.ui.unread.incrementTrackingSeqId();
      }
      _.merge(payload, TS.ui.thread.getTrackingPayloadForEl($el));
      if (TS.ui.thread.getContextForEl($el) === "threads_view") TS.client.ui.threads.incrementTrackingSeqId();
      TS.clog.track(clog_key, payload);
      _incrementPendingCnt(rxn_key);
      TS.api.call(method, api_args, function(ok, data, args) {
        _decrementPendingCnt(rxn_key);
        var update_ui = false;
        if (ok) {} else if (!adding && data.error && data.error === "no_reaction") {} else {
          if (data.error == TOO_MANY_EMOJI || data.error == TOO_MANY_REACTIONS) {
            _displayTooManyError(data.error);
          } else if (data.error == INVALID_NAME) {
            TS.warn("Attempted to add/remove invalid emoji and the API complained: " + args.name);
          }
          var current_rxns = TS.rxns.getExistingRxnsByKey(rxn_key) || [];
          var undone_rxns = _addOrRemoveUserRxnFromRxns(!adding, _.cloneDeep(current_rxns), name);
          var upsert = _upsertRxnsFromUserAction(rxn_key, undone_rxns);
          TS.dir(888, upsert, "changeRxnsFromUserAction UNDO upsert status:" + upsert.status);
          if (upsert.status === "NOOP") {
            TS.log(888, "changeRxnsFromUserAction trying to undo because of API rsp, but no NOOP?");
          } else {
            update_ui = true;
          }
        }
        var maybeUpdateModel = function() {
          TS.log(888, "maybeUpdateModel pending:" + _pending_counts[rxn_key] + " _pending_last:" + _pending_last[rxn_key]);
          if (_pending_counts[rxn_key]) return false;
          if (!_pending_last.hasOwnProperty(rxn_key)) return false;
          var upsert = _upsertRxnsFromUserAction(rxn_key, _pending_last[rxn_key]);
          delete _pending_last[rxn_key];
          TS.dir(888, upsert, "maybeUpdateModel status:" + upsert.status);
          if (upsert.status === "NOOP") return false;
          _updateUI(rxn_key);
          _fetchAndUpdateRxns(rxn_key);
          return true;
        };
        if (!maybeUpdateModel() && !update_ui) return;
        _updateUI(rxn_key);
      });
    },
    checkForRxnClick: function(e) {
      if (!e || !e.target) return;
      var $el = $(e.target);
      var $rxn = $el.closest(".rxn");
      if (!$rxn.length) return;
      var name = String($rxn.data("emoji"));
      var $rxn_panel = $el.closest(".rxn_panel");
      var rxn_key = $rxn_panel.data("rxn-key");
      var is_handy = $rxn.hasClass("is_handy");
      var adding;
      if ($rxn.hasClass("menu_rxn")) {
        TS.ui.react_emoji_menu.start({
          e: e,
          rxn_key: rxn_key
        });
      } else {
        adding = !$rxn.hasClass("user_reacted");
        if (!adding && e.shiftKey) {
          _removeAllRxnsFromUser(rxn_key);
        } else {
          var suffix = is_handy && TS.emoji.isNameSkinToneModifiable(name) ? ":" + TS.emoji.getChosenSkinToneModifier() : "";
          TS.rxns.changeRxnsFromUserAction(rxn_key, name + suffix, adding);
        }
      }
    },
    getRxnRecords: function() {
      return _rxn_records;
    },
    getRxnKeyParts: function(rxn_key) {
      var keyA = rxn_key.split("-");
      return {
        type: keyA[0],
        id: keyA[1],
        c_id: keyA[2]
      };
    },
    test: function() {
      return {
        updateUI: _updateUI,
        addOrRemoveRxnFromRxns: _addOrRemoveRxnFromRxns,
        upsertRxnsFromData: _upsertRxnsFromData,
        upsertRxns: _upsertRxns,
        incrementPendingCnt: _incrementPendingCnt,
        decrementPendingCnt: _decrementPendingCnt,
        fetchAndUpdateRxns: _fetchAndUpdateRxns,
        displayTooManyError: _displayTooManyError,
        TOO_MANY_REACTIONS: TOO_MANY_REACTIONS,
        TOO_MANY_EMOJI: TOO_MANY_EMOJI
      };
    },
    clearHandyRxnsDisplayDataCache: function() {
      _handy_rxns_dd = {};
    },
    getHandyRxnsDisplayDataByCidAndMsgId: function(c_id, msg_id) {
      var scope = c_id || "team";
      var handy_rxns;
      if (c_id && msg_id && TS.boot_data.feature_thanks) {
        var msg = TS.utility.msgs.getMsg(msg_id, TS.shared.getModelObById(c_id).msgs);
        if (msg && msg._handy_rxns_poll_data) {
          scope = c_id + "-" + msg_id;
          handy_rxns = msg._handy_rxns_poll_data;
        }
      }
      if (_handy_rxns_dd[scope]) {
        return _handy_rxns_dd[scope];
      }
      handy_rxns = handy_rxns || TS.rxns.getHandyRxnsByCidAndMsgId(c_id, msg_id, TS.model.team.prefs.team_handy_rxns);
      if (!handy_rxns) {
        return {
          list: [],
          restrict: false,
          is_poll: false
        };
      }
      _handy_rxns_dd[scope] = {
        items: {},
        restrict: !!handy_rxns.restrict,
        is_poll: !!handy_rxns.is_poll
      };
      handy_rxns.list.forEach(function(item) {
        var suffix = TS.emoji.isNameSkinToneModifiable(item.name) ? TS.emoji.getChosenSkinToneModifier() : "";
        var name_with_colons = ":" + item.name + ":" + suffix;
        _handy_rxns_dd[scope].items[item.name] = {
          html: new Handlebars.SafeString(TS.emoji.graphicReplace(name_with_colons, {
            no_skin_tone_squares: true
          })),
          name: name_with_colons,
          title: item.title,
          use_title: TS.boot_data.feature_thanks && item.title && item.title != item.name,
          names: name_with_colons
        };
      });
      return _handy_rxns_dd[scope];
    },
    getMemberRxnsFromMessage: function(message, member_id) {
      if (!message || !member_id) return;
      var rxn_key = TS.rxns.getRxnKeyByMsgType(message);
      if (!rxn_key) return;
      var rxns = TS.rxns.getExistingRxnsByKey(rxn_key);
      if (!rxns) return;
      var user_rxns = rxns.filter(function(rxn) {
        return _.includes(rxn.users, member_id);
      });
      return user_rxns;
    },
    getHandyRxnsDisplayDataByRxnKey: function(rxn_key) {
      rxn_key = rxn_key || "";
      var key_parts = TS.rxns.getRxnKeyParts(rxn_key);
      var c_id = key_parts.c_id || "";
      var msg_id = key_parts.type === "message" && key_parts.id;
      return TS.rxns.getHandyRxnsDisplayDataByCidAndMsgId(c_id, msg_id);
    },
    getHandyRxnsByCidAndMsgId: function(c_id, msg_id, fallback) {
      fallback = fallback || null;
      if (c_id && msg_id && TS.boot_data.feature_thanks) {
        var msg = TS.utility.msgs.getMsg(msg_id, TS.shared.getModelObById(c_id).msgs);
        if (msg && msg._handy_rxns_poll_data) return msg._handy_rxns_poll_data;
      }
      var pref = TS.model.team.prefs.channel_handy_rxns;
      return pref && pref[c_id] && Object.keys(pref[c_id]).length && pref[c_id] || fallback;
    },
    getHandyRxnsTitleForEmojiByRxnKey: function(name, rxn_key) {
      name = TS.emoji.stripWrappingColons(name).replace(/(::skin-tone-[2-6])/g, "");
      var datum = TS.rxns.getHandyRxnsDisplayDataByRxnKey(rxn_key).items[name];
      return datum && datum.use_title && datum.title || "";
    }
  });
  var _handy_rxns_dd = {};
  var _rxn_records = [];
  var _rxn_records_map = {};
  var _rxns = {};
  var _pending_counts = {};
  var _pending_last = {};
  var _updateUI = function(rxn_key, name, member_id, item_type) {
    var can_ignore_scroll;
    var rxn_key_parts = TS.rxns.getRxnKeyParts(rxn_key);
    if (rxn_key_parts && rxn_key_parts.c_id) {
      var current_model_ob = TS.shared.getActiveModelOb();
      if (current_model_ob && current_model_ob.id !== rxn_key_parts.c_id) {
        if (TS.pri) TS.log(888, "rxn c_id of " + rxn_key_parts.c_id + " != current model_ob id of " + current_model_ob.id + " - skipping scroll work.");
        can_ignore_scroll = true;
      }
    }
    var was_at_bottom;
    if (!can_ignore_scroll) was_at_bottom = TS.client && TS.client.ui && TS.client.ui.areMsgsScrolledToBottom();
    TS.templates.builders.updateRxnPanels(rxn_key, name, member_id);
    if (item_type === "file") {
      TS.log("(Temporary) Rebuilding mentions due to file reaction.");
      TS.view.rebuildMentions();
    }
    if (TS.client && was_at_bottom) {
      TS.client.ui.instaScrollMsgsToBottom(true);
    }
  };
  var _updateUIThrottled = function(rxn_key, item_type) {
    _updateUI(rxn_key, undefined, undefined, item_type);
  };
  var _addOrRemoveUserRxnFromRxns = function(adding, rxns, name) {
    return _addOrRemoveRxnFromRxns(adding, rxns, name, TS.model.user.id);
  };
  var _addOrRemoveRxnFromRxns = function(adding, rxns, name, member_id) {
    var rxn = TS.rxns.getRxnFromRxns(rxns, name);
    if (adding) {
      if (!rxn) {
        rxns.push({
          users: [member_id],
          count: 1,
          name: name
        });
      } else if (TS.utility.ensureInArray(rxn.users, member_id)) {
        rxn.count += 1;
      }
    } else if (rxn) {
      var rxn_exists = rxn.users.indexOf(member_id) >= 0;
      if (rxn_exists) {
        _.pull(rxn.users, member_id);
        rxn.count -= 1;
        if (rxn.count < 1 || rxn.users.length === 0) {
          _.pull(rxns, rxn);
        }
        if (!rxns.length) {
          rxns = null;
        }
      }
    }
    return rxns;
  };
  var _upsertRxnsFromUserAction = function(rxn_key, rxns) {
    return _upsertRxns(rxn_key, rxns, true);
  };
  var _upsertRxnsFromData = function(rxn_key, rxns) {
    return _upsertRxns(rxn_key, rxns, false);
  };
  var _upsertRxns = function(rxn_key, rxns, force) {
    var upsert = {
      status: "NOOP",
      what_changed: [],
      rxns: rxns
    };
    if (!force && _pending_counts[rxn_key]) {
      _pending_last[rxn_key] = _.cloneDeep(rxns);
      TS.log(888, "_upsertRxns call ignored because !force && _pending_counts[" + rxn_key + "]:" + _pending_counts[rxn_key]);
      return upsert;
    }
    var existing_rxns = TS.rxns.getExistingRxnsByKey(rxn_key);
    if (rxns) {
      if (existing_rxns) {
        if (!TS.utility.areSimpleObjectsEqual(existing_rxns, rxns, "rxn_key:" + rxn_key)) {
          upsert.status = "CHANGED";
          _rxns[rxn_key] = rxns;
        }
      } else {
        upsert.status = "ADDED";
        _rxns[rxn_key] = rxns;
      }
    } else if (existing_rxns) {
      upsert.status = "CHANGED";
      delete _rxns[rxn_key];
    }
    upsert.rxns = _rxns[rxn_key] || null;
    TS.dir(888, upsert, rxn_key);
    return upsert;
  };
  var _incrementPendingCnt = function(rxn_key) {
    if (!rxn_key) return;
    _pending_counts[rxn_key] = _pending_counts[rxn_key] || 0;
    _pending_counts[rxn_key] += 1;
    TS.log(888, "_incrementPendingCnt " + rxn_key + ": " + _pending_counts[rxn_key]);
  };
  var _decrementPendingCnt = function(rxn_key) {
    if (!_pending_counts[rxn_key]) {
      TS.log(888, "_decrementPendingCnt " + rxn_key + ": " + _pending_counts[rxn_key]);
      return;
    }
    _pending_counts[rxn_key] -= 1;
    if (_pending_counts[rxn_key] === 0) {
      delete _pending_counts[rxn_key];
    }
    TS.log(888, "_decrementPendingCnt " + rxn_key + ": " + _pending_counts[rxn_key]);
  };
  var _getApiArgsFromKey = function(rxn_key, args) {
    args = args || {};
    var key_parts = TS.rxns.getRxnKeyParts(rxn_key);
    if (key_parts.type === "message") {
      args.channel = key_parts.c_id;
      args.timestamp = key_parts.id;
    } else if (key_parts.type === "file") {
      args.file = key_parts.id;
    } else if (key_parts.type === "file_comment") {
      args.file_comment = key_parts.id;
    } else {
      throw new Error("type not handled");
    }
    return args;
  };
  var _fetchAndUpdateRxns = function(rxn_key, attempt) {
    attempt = attempt || 1;
    var max_attempts = 2;
    var api_args = _getApiArgsFromKey(rxn_key, {
      full: true
    });
    TS.log(888, "_fetchAndUpdateRxns rxn_key:" + rxn_key + " attempt:" + attempt);
    _incrementPendingCnt(rxn_key);
    TS.api.call("reactions.get", api_args, function(ok, data) {
      _decrementPendingCnt(rxn_key);
      if (ok) {
        var rxns = TS.rxns.getRxnsFromData(data);
        var upsert = _upsertRxnsFromData(rxn_key, rxns);
        TS.dir(888, upsert, "_fetchAndUpdateRxns upsert status:" + upsert.status);
        if (upsert.status === "NOOP") return;
        _updateUI(rxn_key);
      } else {
        TS.error("_fetchAndUpdateRxns got an err:" + JSON.stringify(data || null));
      }
      if (attempt < max_attempts) {
        attempt += 1;
        _fetchAndUpdateRxns(rxn_key, attempt);
      }
    });
  };
  var _getRxnRecordEntryByNameAndMemberId = function(record, name, member_id) {
    if (!record) return null;
    if (!record.emoji) return null;
    if (!record.emoji.hasOwnProperty(name)) return null;
    for (var i = 0; i < record.emoji[name].length; i += 1) {
      if (record.emoji[name][i].id === member_id) return record.emoji[name][i];
    }
    return null;
  };
  var _isImsgRelevantToRxnRecords = function(imsg) {
    if (!TS.client) return false;
    if (imsg.user == TS.model.user.id) return false;
    if (imsg.item.type === "message" && typeof imsg.item.message !== "undefined" && imsg.item.message.user != TS.model.user.id) return false;
    if (imsg.item.type === "file" && typeof imsg.item.file !== "undefined" && imsg.item.file.user != TS.model.user.id) return false;
    if (imsg.item.type === "file_comment" && typeof imsg.item.comment !== "undefined" && imsg.item.comment.user != TS.model.user.id) return false;
    return true;
  };
  var _maybeUpdateRxnRecords = function(imsg) {
    if (!_isImsgRelevantToRxnRecords(imsg)) return;
    var rxn_key = TS.rxns.getRxnKeyFromData(imsg.item);
    if (imsg.type === "reaction_added") {
      if (imsg.item.type === "message") {
        var source_channel = imsg.item.channel;
      }
      var and_alert = !imsg._from_evt_log && imsg.item.type === "message";
      _addToRxnsRecord(imsg.reaction, rxn_key, imsg.user, imsg.event_ts, and_alert, source_channel);
    } else {
      _removeFromRxnsRecord(imsg.reaction, rxn_key, imsg.user);
    }
  };
  var _isReactionItemRelevant = function(item) {
    if (!item) return false;
    if (item.type === "message") {
      var msg = TS.utility.msgs.findMsg(item.ts, item.channel);
      if (!msg) return false;
      item.message = msg;
      return true;
    } else if (item.type === "file" || item.type === "file_comment") {
      var file = TS.files.getFileById(item.file);
      if (!file) return false;
      item.file = file;
      if (item.type === "file_comment") {
        var comment = TS.files.getFileCommentById(file, item.file_comment);
        if (!comment) return false;
        item.comment = comment;
      }
      return true;
    }
    return false;
  };
  var _addToRxnsRecord = function(name, rxn_key, member_id, when, and_alert, source_channel) {
    when = when || TS.utility.date.makeTsStamp();
    and_alert = !!and_alert;
    var added = false;
    var record = _rxn_records_map[rxn_key];
    if (!record) {
      added = true;
      _rxn_records[_rxn_records.length] = {
        rxn_key: rxn_key
      };
      _rxn_records_map[rxn_key] = _rxn_records[_rxn_records.length - 1];
      record = _rxn_records_map[rxn_key];
    }
    record.last_update = when;
    if (and_alert) {
      TS.rxns.need_alerts[rxn_key] = TS.rxns.need_alerts[rxn_key] || when;
    }
    record.emoji = record.emoji || {};
    record.source = source_channel || "";
    record.emoji[name] = record.emoji.hasOwnProperty(name) && record.emoji[name] || [];
    var which = record.emoji[name];
    var entry = _getRxnRecordEntryByNameAndMemberId(record, name, member_id);
    if (!entry) {
      which[which.length] = {
        id: member_id
      };
      entry = which[which.length - 1];
    }
    entry.when = when;
    TS.dir(877, _rxn_records, name + " " + rxn_key + " " + member_id);
    var len = _rxn_records.length;
    if (added && len > 1 && _rxn_records[len - 1].last_update < _rxn_records[len - 2].last_update) {
      _rxn_records.sort(function compare(a, b) {
        if (a.last_update < b.last_update) return -1;
        if (a.last_update > b.last_update) return 1;
        return 0;
      });
    }
    _dispatchSignalThrottled(and_alert);
  };
  var _dispatchSignal = function(and_alert) {
    TS.rxns.rxn_records_changed_sig.dispatch(and_alert);
  };
  var _dispatchSignalThrottled = function() {
    _dispatchSignal();
  };
  var _removeFromRxnsRecord = function(name, rxn_key, member_id) {
    var record = TS.rxns.getRxnRecordByKey(rxn_key);
    var entry = _getRxnRecordEntryByNameAndMemberId(record, name, member_id);
    if (entry && record) {
      _.pull(record.emoji[name], entry);
      if (!record.emoji[name].length) {
        delete record.emoji[name];
      }
      if (!Object.keys(record.emoji).length) {
        delete _rxn_records_map[rxn_key];
        _.pull(_rxn_records, record);
      }
    }
    TS.rxns.rxn_records_changed_sig.dispatch();
  };
  var _displayTooManyError = function(error) {
    var reaction_limit_reached_title = TS.i18n.t("Reaction Limit Reached", "rxns")();
    var too_many_reactions = TS.i18n.t("A message can contain up to 23 different emojis from a single person. Sorry, you can’t add any more than this!", "rxns")();
    var too_many_emoji = TS.i18n.t("A message can contain up to 50 different emojis in its reactions. Sorry, you can’t add any more than this!", "rxns")();
    if (error == TOO_MANY_REACTIONS) {
      TS.generic_dialog.alert(too_many_reactions, reaction_limit_reached_title);
    } else if (error == TOO_MANY_EMOJI) {
      TS.generic_dialog.alert(too_many_emoji, reaction_limit_reached_title);
    } else {}
  };
  var _updateAllRxnsUI = function() {
    $(".msgs_holder").find("ts-message").each(function() {
      var $msg_el = $(this);
      var rxn_key = $msg_el.find(".rxn_panel").data("rxn-key") || "";
      TS.ui.messages.maybeUpdateMessageHoverContainer($msg_el);
      TS.templates.builders.updateRxnPanelsAndHandyRxns(rxn_key);
    });
  };
  var TOO_MANY_REACTIONS = "too_many_reactions";
  var TOO_MANY_EMOJI = "too_many_emoji";
  var INVALID_NAME = "invalid_name";
  var _removeAllRxnsFromUser = function(rxn_key) {
    var rxns = TS.rxns.getExistingRxnsByKey(rxn_key);
    if (!rxns) return;
    rxns.forEach(function(rxn) {
      if (!TS.rxns.doesRxnsHaveRxnFromUser(rxns, rxn.name)) return;
      TS.rxns.changeRxnsFromUserAction(rxn_key, rxn.name, false);
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.new_channel_modal", {
    start: function(title, is_public, preselected_ids) {
      if (!TS.permissions.members.canCreateChannels() && !TS.permissions.members.canCreateGroups()) return;
      TS.ui.fs_modal.start({
        body_template_html: '<div id="new_channel_modal_container"></div>',
        onShow: _onShow,
        onEnd: _onEnd
      });
      _$modal_container = $("#new_channel_modal_container");
      return TS.ui.new_channel_modal.startInContainer(_$modal_container, title, is_public, preselected_ids);
    },
    startInContainer: function($container, title, is_public, preselected_ids) {
      if (!TS.permissions.members.canCreateChannels() && !TS.permissions.members.canCreateGroups()) return;
      _$modal_container = $container;
      _is_public = is_public !== false;
      if (!TS.permissions.members.canCreateChannels()) _is_public = false;
      if (!TS.permissions.members.canCreateGroups()) _is_public = true;
      var can_toggle_private = TS.permissions.members.canCreateChannels() && TS.permissions.members.canCreateGroups();
      if (TS.boot_data.feature_intl_channel_names) {
        title = TS.utility.cleanChannelName(title || "");
      } else {
        title = TS.utility.cleanChannelName(title || "").substr(0, TS.model.channel_name_max_length);
      }
      preselected_ids = preselected_ids || [];
      _$modal_container.html(TS.templates.channel_new_modal({
        title: title,
        is_public: _is_public,
        can_toggle_private: can_toggle_private,
        compliance_exports_enabled_for_team: !!TS.model.team.prefs.compliance_export_start,
        is_ra: TS.model.user.is_restricted,
        can_create_shared_channel: TS.permissions.members.canCreateSharedChannel()
      }));
      _ladda = Ladda.create(_$modal_container.find(".new_channel_go")[0]);
      _bindUI(preselected_ids);
      if (TS.boot_data.feature_intl_channel_names) {
        setTimeout(function() {
          _maybeDisplayIntlChannelNamesCoachmark();
        }, 500);
      }
      return new Promise(function(resolve, reject) {
        _deferred = {
          resolve: resolve,
          reject: reject
        };
      });
    },
    go: function() {
      if (!TS.boot_data.feature_intl_channel_names) {
        var validated = TS.ui.validation.validate(_$modal_container.find(".title_input"), {});
        if (!validated) return;
        validated = TS.channels.ui.channelCreateDialogCleanName(_$modal_container);
        if (!validated) return;
      }
      var title = _$modal_container.find(".title_input").val();
      var invited_members = $("#invite_members_container").lazyFilterSelect("value");
      var invited_member_ids = [];
      var pending_users = [];
      if (invited_members) {
        invited_members.forEach(function(item) {
          if (item.member) {
            invited_member_ids.push(item.member.id);
          } else {
            pending_users.push(item);
          }
        });
      }
      var purpose = $.trim(_$modal_container.find("#channel_purpose_input").val());
      if (_ladda) _ladda.start();
      if (_is_public) {
        _createPublicChannel(title, purpose, invited_member_ids, pending_users);
      } else {
        _createPrivateChannel(title, purpose, invited_member_ids, pending_users);
      }
    },
    end: function() {
      _cleanup();
    },
    test: function() {
      return {
        createPublicChannel: _createPublicChannel,
        createPrivateChannel: _createPrivateChannel,
        showNameTakenAlert: _showNameTakenAlert
      };
    }
  });
  var _$modal_container;
  var _ladda;
  var _is_public;
  var _deferred;
  var _bindKeyboardShortcuts = function() {
    var people_picker_input = _$modal_container.find("#invite_members_container").find("input")[0];
    var purpose_input = _$modal_container.find("#channel_purpose_input")[0];
    _$modal_container.on("keydown", function(e) {
      if (e.which === TS.utility.keymap.enter && document.activeElement != people_picker_input && document.activeElement != purpose_input) {
        TS.ui.new_channel_modal.go();
        e.preventDefault();
      } else if (e.which === TS.utility.keymap.esc) {
        TS.ui.fs_modal.close();
        e.preventDefault();
      }
    });
  };
  var _bindPublicPrivateToggle = function() {
    var $toggle = $("#channel_public_private_toggle");
    $toggle.togglify();
    $toggle.bind("change", function() {
      _is_public = $toggle.is(":checked");
      if ($toggle.is(":checked")) {
        _$modal_container.find(".private_channel_item").addClass("hidden");
        _$modal_container.find(".public_channel_item").removeClass("hidden");
      } else {
        _$modal_container.find(".public_channel_item").addClass("hidden");
        _$modal_container.find(".private_channel_item").removeClass("hidden");
      }
    });
  };
  var _legacyDetermineInviteMembers = function(preselected_ids) {
    if (TS.lazyLoadMembersAndBots()) {
      throw new Error("_legacyDetermineInviteMembers should not be called if flannel is enabled!");
    }
    var members_you_can_invite = TS.groups.getActiveMembersForInviting(TS.model.user.is_admin);
    members_you_can_invite = members_you_can_invite.filter(function(member) {
      return member._is_local;
    });
    var invite_members = TS.channels.makeMembersWithPreselectsForTemplate(members_you_can_invite, preselected_ids);
    invite_members.sort(function(a, b) {
      return TS.members.memberSorterByName(a.member, b.member);
    });
    return invite_members;
  };
  var _maybeFetchEligiblePendingMembers = function() {
    return new Promise(function(resolve) {
      if (TS.model.user.is_admin) {
        TS.api.call("users.admin.invited").then(function(resp) {
          var pending_invites = TS.pending_users.filterOutURAs(resp.data.pending);
          if (pending_invites.length) {
            pending_invites.forEach(function(invitee) {
              TS.pending_users.sanitizeNameFields(invitee);
            });
            resolve(pending_invites);
          } else {
            resolve([]);
          }
        });
      } else {
        resolve([]);
      }
    });
  };
  var _buildMembersSelectDataPromise = function(preselected_ids) {
    var first_call = true;
    var invited_members_p = _maybeFetchEligiblePendingMembers();
    return function(query, pageNumber) {
      if (query.charAt(0) === "@") query = query.substring(1);
      var load_promise;
      var should_prepopulate_users = false;
      if (first_call) {
        first_call = false;
        if (_.get(preselected_ids, "length")) {
          should_prepopulate_users = true;
        }
      }
      if (should_prepopulate_users) {
        var selected_members = _.compact(preselected_ids.map(TS.members.getMemberById));
        var items = selected_members.map(function(member) {
          return {
            member: member,
            lfs_id: String(member.id),
            preselected: true
          };
        });
        return Promise.resolve({
          items: items
        });
      } else if (pageNumber > 0) {
        return Promise.resolve({
          items: []
        });
      }
      load_promise = _getSearchPromise(query);
      return Promise.all([load_promise, invited_members_p]).then(function(responses) {
        var members = responses[0];
        var invited_members = responses[1];
        if (_.isUndefined(invited_members) || invited_members.length === 0) {
          return members;
        }
        var start_regex = new RegExp("^" + TS.utility.regexpEscape(query), "i");
        var suffix_regex = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(query), "i");
        invited_members = invited_members.filter(function(item) {
          return TS.pending_users.checkUserMatch(item, start_regex) || TS.pending_users.checkUserMatch(item, suffix_regex);
        });
        members = members.concat(invited_members).sort(function(a, b) {
          return TS.pending_users.usersSorterByName(a, b);
        });
        return members;
      });
    };
  };
  var _getSearchPromise = function(query) {
    var query_params = {
      query: query,
      filter: "everyone"
    };
    return TS.flannel.fetchAndUpsertObjectsWithQuery(query_params).then(function(response) {
      var items = [];
      if (query === "") {
        items = TS.members.getMembersForUser();
      } else {
        items = response.objects;
      }
      return items.filter(function(item) {
        return !(item.is_ultra_restricted || item.deleted || !item._is_local);
      }).map(function(item) {
        return {
          member: item,
          lfs_id: String(item.id)
        };
      });
    });
  };
  var _bindFilterSelect = function(preselected_ids) {
    var prev_query;
    var start_regex;
    var suffix_regex;
    var lazy_filter_select_opts = {
      append: true,
      per_page: 50,
      approx_item_height: 50,
      placeholder_text: TS.i18n.t("Search by name", "new_channel")(),
      template: function(item) {
        var html;
        if (item.member) {
          html = TS.templates.channel_invite_member_small({
            member: item.member
          });
        } else {
          html = TS.templates.channel_invite_pending_user_small({
            invitee: item
          });
        }
        return new Handlebars.SafeString(html);
      },
      tokenTemplate: function(item) {
        var html;
        if (item.member) {
          html = TS.templates.channel_invite_member_token({
            member: item.member
          });
        } else {
          html = TS.templates.channel_invite_pending_user_token({
            invitee: item
          });
        }
        return new Handlebars.SafeString(html);
      },
      tokenClass: function(item) {
        if (item.member) {
          return TS.templates.builders.getMemberTypeClass(item.member);
        }
        return "lfs_token_pending_user";
      },
      filter: function(item, query) {
        var member = item.member;
        if (prev_query !== query) {
          start_regex = new RegExp("^" + TS.utility.regexpEscape(query), "i");
          suffix_regex = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(query), "i");
          prev_query = query;
        }
        var match_names_only = true;
        if (member) {
          return TS.utility.members.checkMemberMatch(member, start_regex, match_names_only) || TS.utility.members.checkMemberMatch(member, suffix_regex, match_names_only);
        }
        return TS.pending_users.checkUserMatch(item, start_regex) || TS.pending_users.checkUserMatch(item, suffix_regex);
      },
      noResultsTemplate: function(query) {
        if (!query) {
          return TS.i18n.t("No one found", "new_channel")();
        }
        return TS.i18n.t("No one found matching <strong>{query}</strong>", "new_channel")({
          query: TS.utility.truncateAndEscape(query, 50)
        });
      }
    };
    if (TS.lazyLoadMembersAndBots()) {
      lazy_filter_select_opts.data_promise = _buildMembersSelectDataPromise(preselected_ids);
    } else {
      var members = _legacyDetermineInviteMembers(preselected_ids);
      lazy_filter_select_opts.data = members;
      _maybeFetchEligiblePendingMembers().then(function(pending_invites) {
        if (!pending_invites || !pending_invites.length) return;
        var invite_members = members.concat(pending_invites).sort(function(a, b) {
          return TS.pending_users.usersSorterByName(a, b);
        });
        if (_$modal_container) {
          _updateFilterSelect(invite_members);
        }
      });
    }
    $("#invite_members_container").lazyFilterSelect(lazy_filter_select_opts);
  };
  var _bindUI = function(preselected_ids) {
    _bindFilterSelect(preselected_ids);
    _$modal_container.find(".lfs_input").attr("id", "invite_members_input");
    _$modal_container.find(".new_channel_go").click(TS.ui.new_channel_modal.go);
    _$modal_container.find(".create_share_channel").click(function() {
      TS.ui.new_channel_modal.end();
      TS.ui.share_channel_dialog.start({
        title: $("#channel_create_title").val(),
        is_private: !$("#channel_public_private_toggle").is(":checked")
      });
    });
    _bindKeyboardShortcuts();
    _bindPublicPrivateToggle();
    _$modal_container.find(".title_input").keydown(function() {
      _$modal_container.find(".modal_input_note.mustard_yellow").each(function() {
        $(this).addClass("hidden");
      });
    });
    $("#channel_create_title").focus();
    _$modal_container.find(".new_channel_cancel_btn").on("click", function() {
      var reject = _deferred && _deferred.reject;
      if (reject) reject();
      TS.ui.fs_modal.close();
    });
    var $button = $("#save_channel");
    var $input = $("#channel_create_title");

    function inputChange() {
      var value = $input.val();
      if (value && value.length) {
        TS.utility.disableElement($button, false);
      } else {
        TS.utility.disableElement($button, true);
      }
    }
    if ($button.length && $input.length) {
      $input.on("input", inputChange);
      inputChange();
    }
  };
  var _createPublicChannel = function(title, purpose, invited_members, pending_users) {
    TS.channels.create(title, {
      validate_name: !!TS.boot_data.feature_intl_channel_names
    }).then(function(res) {
      var data = res.data;
      if (purpose) TS.channels.setPurpose(data.channel.id, purpose);
      if (invited_members) {
        for (var i = 0; i < invited_members.length; i += 1) {
          TS.api.call("channels.invite", {
            channel: data.channel.id,
            user: invited_members[i]
          });
        }
      }
      if (pending_users && pending_users.length) {
        TS.pending_users.invitePendingUsersToChannel(pending_users, data.channel.id);
      }
      TS.ui.fs_modal.close();
    }).catch(function(res) {
      res = res || {};
      var error = res.data ? res.data.error : res.message;
      if (_ladda) _ladda.stop();
      if (TS.boot_data.feature_intl_channel_names) {
        var msg = TS.ui.validation.getErrorMessage(error, {
          maxlength: 22,
          name: title
        });
        TS.ui.validation.showWarning(_$modal_container.find(".title_input"), msg, {
          custom_for: "channel_create_title"
        });
      } else if (error === "name_taken") {
        _showNameTakenAlert();
      } else if (error === "restricted_action") {
        _showError(TS.i18n.t("Sorry! An admin on your team has restricted who can create public channels.", "new_channel")());
      } else {
        TS.error("Failed to create public channel: " + error);
        _showError(TS.i18n.t("Sorry! Something went wrong.", "new_channel")());
      }
    });
  };
  var _createPrivateChannel = function(title, purpose, invited_members, pending_users) {
    TS.groups.create(title, {
      and_invite_members_idsA: invited_members,
      validate: !!TS.boot_data.feature_intl_channel_names
    }).then(function(res) {
      var data = res.data;
      if (purpose) TS.groups.setPurpose(data.group.id, purpose);
      if (pending_users && pending_users.length) {
        TS.pending_users.invitePendingUsersToChannel(pending_users, data.group.id);
      }
      TS.ui.fs_modal.close();
    }).catch(function(res) {
      if (_ladda) _ladda.stop();
      var error = res.data.error;
      if (TS.boot_data.feature_intl_channel_names) {
        var msg = TS.ui.validation.getErrorMessage(error, {
          maxlength: 22,
          name: title
        });
        TS.ui.validation.showWarning(_$modal_container.find(".title_input"), msg, {
          custom_for: "channel_create_title"
        });
      } else if (error === "name_taken") {
        _showNameTakenAlert();
      } else if (error === "restricted_action") {
        _showError(TS.i18n.t("Sorry! An admin on your team has restricted who can create private channels.", "new_channel")());
      } else {
        TS.error("Failed to create private channel: " + error);
        _showError(TS.i18n.t("Sorry! Something went wrong.", "new_channel")());
      }
    });
  };
  var _updateFilterSelect = function(members) {
    if (TS.lazyLoadMembersAndBots()) {
      return;
    }
    var lfs_id_count = 0;
    members.forEach(function(member) {
      member.lfs_id = lfs_id_count;
    });
    $("#invite_members_container").lazyFilterSelect("update", members);
  };
  var _showNameTakenAlert = function() {
    TS.channels.ui.channelCreateDialogShowNameTakenAlert(_$modal_container);
  };
  var _showError = function(message) {
    TS.channels.ui.channelCreateDialogShowOtherErrorAlert(_$modal_container, message);
  };
  var _maybeDisplayIntlChannelNamesCoachmark = function() {
    var intl_channel_names_launch_date = new Date("March 17, 2017 10:00:00");
    var intl_channel_names_launch_ts = Math.floor(intl_channel_names_launch_date.getTime() / 1e3);
    if (TS.model.prefs.seen_intl_channel_names_coachmark) return;
    if (TS.boot_data.browser_lang === "en-US" || TS.boot_data.browser_lang === "en-us") return;
    if (TS.model.user.created > intl_channel_names_launch_ts) return;
    TS.model.prefs.seen_intl_channel_names_coachmark = true;
    TS.prefs.setPrefByAPI({
      name: "seen_intl_channel_names_coachmark",
      value: true
    }, function() {
      TS.coachmark.start(TS.coachmarks.coachmarks.intl_channel_names);
    });
  };
  var _unbindUI = function() {
    if (_$modal_container) {
      _$modal_container.find(".new_channel_go").off("click");
      _$modal_container.find("#channel_public_private_toggle").off("change");
      _$modal_container.off("keydown");
    }
  };
  var _onShow = function() {};
  var _onEnd = function() {
    _cleanup();
  };
  var _cleanup = function() {
    _unbindUI();
    _$modal_container = null;
    _ladda = null;
    _deferred = null;
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.toast", {
    show: function(settings) {
      _maybeInsertToast();
      var instance = $.extend({}, _DEFAULT_SETTINGS, settings);
      if (["success", "warning", "error"].indexOf(instance.type) < 0) instance.type = _DEFAULT_SETTINGS.type;
      if (["top", "bottom"].indexOf(instance.position) < 0) instance.position = _DEFAULT_SETTINGS.position;
      instance.message = new Handlebars.SafeString(instance.message);
      instance.retry_message = new Handlebars.SafeString(instance.retry_message);
      if (settings.retry_action) instance._retryable = true;
      _maybeShowToast(instance);
      return instance;
    }
  });
  var _DEFAULT_SETTINGS = {
    dismissable: false,
    message: TS.i18n.t("Success", "toast")(),
    position: "bottom",
    retry_action: _.noop,
    retry_message: TS.i18n.t("Something went wrong. Try again?", "toast")(),
    type: "success",
    _retryable: false
  };
  var _DISMISS_SELECTOR = ".dismiss_toast";
  var _RETRY_SELECTOR = ".retry_toast";
  var _queue = [];
  var _is_currently_visible = false;
  var _$toast_parent;
  var _toast_timeout;
  var _toast_timeout_time = 3e3;
  var _current_instance;
  var _bindEvents = function() {
    _$toast_parent.on("click", _DISMISS_SELECTOR, _dismissToast);
    _$toast_parent.on("click", _RETRY_SELECTOR, _retryAction);
  };
  var _dismissToast = function() {
    if (_toast_timeout) clearTimeout(_toast_timeout);
    _hideToast();
  };
  var _ensureNothingInQueue = function() {
    if (_needToShowNextToast()) _maybeShowNextToast();
  };
  var _getNextToast = function() {
    return _queue.shift();
  };
  var _hideToast = function() {
    if (_needToShowNextToast()) {
      _maybeShowNextToast();
    } else {
      _$toast_parent.removeClass("toast_in").addClass("toast_out");
      _is_currently_visible = false;
      _ensureNothingInQueue();
    }
  };
  var _markToastForDeath = function() {
    if (_toast_timeout) clearTimeout(_toast_timeout);
    _toast_timeout = setTimeout(function() {
      _hideToast();
    }, _toast_timeout_time);
  };
  var _maybeInsertToast = function() {
    if (!_$toast_parent) {
      _$toast_parent = $('<div id="toast" class="hidden">');
      var html = TS.templates.toast({});
      _$toast_parent.html(html);
      _$toast_parent.appendTo("body");
      _bindEvents();
    }
  };
  var _maybeShowNextToast = function() {
    var next_toast = _getNextToast();
    if (next_toast) _maybeShowToast(next_toast, true);
  };
  var _maybeShowToast = function(instance, should_show) {
    if (_is_currently_visible && !should_show) {
      _queue.push(instance);
    } else {
      _current_instance = instance;
      var html = TS.templates.toast({
        instance: instance,
        already_exists: !!should_show
      });
      _$toast_parent.html(html);
      _unhideToast();
    }
  };
  var _needToShowNextToast = function() {
    return _queue.length > 0;
  };
  var _retryAction = function() {
    if (!_current_instance._retryable || _current_instance.type !== "error") return;
    _current_instance.retry_action();
    _dismissToast();
  };
  var _unhideToast = function() {
    if (!_is_currently_visible) {
      _$toast_parent.removeClass("hidden").removeClass("toast_out").addClass("toast_in");
      _is_currently_visible = true;
    }
    _markToastForDeath();
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.lazy_filter_select", {
    STYLES: {
      "default": "default",
      filter_in_list: "filter_in_list",
      normal: "normal",
      small: "small"
    },
    onStart: function() {
      $("select[data-lazy-filter-select], label[data-lazy-filter-select] select").addClass("hidden").lazyFilterSelect({
        use_data_attributes: true
      });
    },
    create: function($select, settings) {
      if (settings.use_data_attributes) {
        var settings_keys = Object.keys($select.data());
        settings_keys.forEach(function(setting_key) {
          if (setting_key.indexOf("lazyFilterSelect") > -1 && setting_key !== "TS-lazyFilterSelect" && $select.data(setting_key) !== "") {
            var setting = $select.data(setting_key);
            if (setting === "true" || setting === "false") setting = setting === "true";
            settings[setting_key.replace("lazyFilterSelect", "").toLowerCase()] = setting;
          }
        });
      }
      if ($select.prop("tagName") === "SELECT") {
        if (typeof settings.single === "undefined") {
          settings.single = !$select.prop("multiple");
        }
      }
      var instance = $.extend({}, _DEFAULT_SETTINGS, settings);
      if (settings.approx_divider_height === undefined) {
        instance.approx_divider_height *= 1;
      }
      if (settings.approx_item_height === undefined) {
        instance.approx_item_height *= 1;
      }
      var $container = $('<div class="lazy_filter_select">');
      if (instance.classes) $container.addClass(instance.classes);
      if ($select.prop("disabled")) instance.disabled = true;
      if (instance.disabled) $container.addClass("disabled");
      instance.style = _.get(TS.ui.lazy_filter_select.STYLES, instance.style, TS.ui.lazy_filter_select.STYLES.default);
      if (_isFilterInListStyle(instance) && !instance.single) {
        TS.console.warn("Multi-select lazyFilterSelect instances can't use the 'filter_in_list' style. Using 'default' style instead.");
        instance.style = TS.ui.lazy_filter_select.default;
      }
      var html = TS.templates.lazy_filter_select_container({
        instance: instance,
        aria_labelledby: $select.attr("aria-labelledby"),
        STYLES: TS.ui.lazy_filter_select.STYLES
      });
      $container.html(html);
      if (instance.append) {
        $container.appendTo($select);
      } else {
        $container.insertAfter($select);
      }
      $container.addClass(instance.style + "_style");
      if (instance.single) $container.addClass("single");
      if (instance.width) $container.css("width", instance.width);
      if (instance.css) $container.css(instance.css);
      instance.$container = $container;
      instance.$select = $select;
      instance.$input_container = $container.find(".lfs_input_container");
      instance.$lfs_value = $container.find(".lfs_value");
      instance.$input = $container.find(".lfs_input");
      instance.$list_container = $container.find(".lfs_list_container");
      instance.$list = $container.find(".lfs_list");
      instance.$status = $container.find(".lfs_status");
      instance.$status_loading_indicator = instance.$status.find(".lfs_status_loading_indicator");
      instance.$status_content = instance.$status.find(".lfs_status_content");
      if (_isFilterInListStyle(instance)) {
        instance.$filter_input = $container.find(".lfs_filter_input");
      } else {
        instance.$filter_input = instance.$input;
      }
      instance._page_number = 1;
      instance._slug_id_counter = 1;
      instance.run = _run;
      if (instance.data_promise) {
        if (_isRunningPromisePending(instance)) instance._running_promise.cancel("Uhhh...");
        instance._running_promise = _runDataPromiseQuery(instance, "").then(function(data) {
          instance.data = data;
          instance.run();
          _bindUI(instance);
        }, function(error) {
          _bindUI(instance);
          _showErrorStatus(instance, error, "Something failed while trying to return the initial data for lazyFilterSelect.");
        });
      } else {
        if (instance.data) instance.data = instance.data.slice();
        instance.run();
        _bindUI(instance);
      }
      instance.current_items_in_view_signal = new signals.Signal;
      return instance;
    }
  });
  var _DEFAULT_SETTINGS = {
    allow_item_unselect: false,
    allow_list_position_above: false,
    always_visible: false,
    append: false,
    approx_divider_height: 28,
    approx_item_height: 30,
    data_promise: null,
    data_qa: "lfs",
    disabled: false,
    filter: function(item, query) {
      var text = item.toString();
      query = query.toLowerCase();
      if (item instanceof jQuery || item instanceof HTMLElement) {
        text = $(item).text();
        var additional_text = $(item).attr("data-additional-search-field");
        if (additional_text && additional_text.toLowerCase().indexOf(query) > -1) return true;
      }
      return text.toLowerCase().indexOf(query) > -1;
    },
    input_debounce_wait_time: undefined,
    listItemClass: null,
    max_selected_items: Infinity,
    min_query_length: 0,
    monkey_scroll: true,
    no_default_selection: false,
    noResultsTemplate: function(query) {
      if (_usingMinQueryLength(this) && query.length < this.min_query_length) {
        return TS.i18n.t("{query_length, plural, =0 {Start typing to see results…} other {Keep typing to see results…}}", "lazy_filter_select")({
          query_length: query.length
        });
      }
      return TS.i18n.t("No items matched {query}", "lazy_filter_select")({
        query: "<strong>" + TS.utility.htmlEntities(query) + "</strong>"
      });
    },
    errorTemplate: function(error) {
      return error || TS.i18n.t("Couldn't load results.", "lazy_filter_select")();
    },
    onInputBlur: _.noop,
    onInputFocus: _.noop,
    onReady: function() {},
    onItemAdded: function() {},
    onItemRemoved: function() {},
    onKeyDown: function() {},
    onMaxItemsSelected: function() {},
    onListShown: _.noop,
    onListHidden: _.noop,
    adjustAvailableSpaceAbove: _.identity,
    adjustAvailableSpaceBelow: _.identity,
    placeholder_text: TS.i18n.t("Choose an option…", "lazy_filter_select")(),
    filter_placeholder_text: TS.i18n.t("Search", "lazy_filter_select")(),
    renderDividerFunc: null,
    render_item_func: null,
    restrict_input_container_height: false,
    restrict_preselected_item_removal: false,
    scroll_threshold: 1e3,
    set_height: true,
    should_graphic_replace_emoji: false,
    single: false,
    sluggify: {
      enabled: false,
      delimiter: null,
      key_name: null,
      validator: null
    },
    style: TS.ui.lazy_filter_select.STYLES.default,
    template: function(item) {
      var text = item.toString();
      var addl_text;
      var ts_icon;
      if (item instanceof jQuery || item instanceof HTMLElement) {
        text = $(item).text();
        addl_text = _formatTextForDisplay($(item).attr("data-additional-search-field"), this);
        ts_icon = _formatTextForDisplay($(item).attr("data-ts-icon"), this);
      }
      text = _formatTextForDisplay(text, this);
      if (addl_text) text += ' <span class="addl_text">' + addl_text + "</span>";
      if (ts_icon) text += ' <ts-icon class="addl_icon ' + ts_icon + '"></ts-icon>';
      return new Handlebars.SafeString(text);
    },
    tokenClass: null,
    tokenTemplate: null,
    tokenTemplateSingle: null,
    use_data_attributes: false,
    _$active: null,
    _all_done_fetching: false,
    _list_built: false,
    _list_visible: false,
    _mouse: {},
    _page_number: 1,
    _prevent_blur: false,
    _previous_val: "",
    _running_promise: null,
    _scroll_callback_was_called: false,
    _showing_status: false
  };
  $.widget("TS.lazyFilterSelect", {
    _create: function() {
      this.instance = TS.ui.lazy_filter_select.create(this.element, this.options);
    },
    _destroy: function() {
      this.instance.$container.remove();
      delete this.instance;
    },
    blur: function() {
      this.instance.$filter_input.blur();
    },
    clearValue: function() {
      if (this.instance.single) {
        if (this.instance._selected.length) {
          var $item = this.instance.$input_container.find(".lfs_item");
          _removeSelected(this.instance, $item);
        }
      } else {
        _removeAllSelected(this.instance);
      }
    },
    container: function() {
      return this.instance.$container;
    },
    disable: function() {
      _disable(this.instance);
    },
    disabled: function() {
      return this.instance.disabled;
    },
    enable: function() {
      _enable(this.instance);
    },
    focus: function() {
      this.instance.$filter_input.focus();
    },
    getInstance: function() {
      return this.instance;
    },
    hideList: function() {
      _hideList(this.instance, {
        force: true
      });
      _hideStatus(this.instance);
    },
    recomputeHeight: function() {
      _updateMonkeyScroll(this.instance);
    },
    setValue: function(val) {
      var prev_selected_index = this.element[0].selectedIndex;
      this.element.val(val);
      if (this.element[0].selectedIndex < 0) {
        this.element[0].selectedIndex = 0;
      }
      var selected_option = this.element[0].options[this.element[0].selectedIndex];
      if (this.instance.single) {
        if (this.element[0].selectedIndex == prev_selected_index) return;
      } else {
        _removeAllSelected(this.instance);
      }
      var data_item = _getData(this.instance, $(selected_option));
      _selectDataItem(this.instance, data_item);
    },
    showList: function() {
      _showList(this.instance);
    },
    update: function(data) {
      _update(this.instance, data);
    },
    updatePlaceholder: function(text) {
      this.instance.placeholder_text = text;
      this.instance.$input.prop("placeholder", text);
    },
    updateFilterPlaceholder: function(text) {
      if (!_isFilterInListStyle(this.instance)) return;
      this.instance.filter_placeholder_text = text;
      this.instance.$filter_input.prop("placeholder", text);
    },
    value: function() {
      return this.instance._selected;
    }
  });
  var _addUserCreatedSlugFromString = function(instance, str) {
    if (!_instanceCanSluggify(instance)) return;
    if (!str.trim()) return;
    if (!_canAddNewItem(instance)) return;
    var item = {};
    item[instance.sluggify.key_name] = str.trim();
    item.lfs_id = null;
    item.lfs_slug_id = instance._slug_id_counter;
    instance._slug_id_counter += 1;
    instance._selected.push(item);
    var slug_html = TS.templates.lazy_filter_select_item({
      content: instance.tokenTemplate(item),
      applied_classes: "lfs_token",
      slug_id: item.lfs_slug_id,
      data_qa: instance.data_qa
    }).replace(/(\r\n|\n|\r)/gm, "");
    var $slug = $(slug_html);
    $slug.insertBefore(instance.$input);
    if (instance.sluggify.validator) {
      instance.sluggify.validator($slug);
    }
    _populate(instance, instance.data);
    _showList(instance);
    instance.$filter_input.val("");
    instance._previous_val = "";
    _adjustInput(instance);
    instance.onItemAdded(item);
    if (!_canAddNewItem(instance)) instance.onMaxItemsSelected();
  };
  var _adjustInput = function(instance) {
    if (!instance.single) {
      instance.$input.prop("size", instance.$filter_input.val().length + 1);
      if (instance.$filter_input.val().length + instance._selected.length === 0) {
        _showEmptyState(instance);
      } else {
        instance.$input_container.removeClass("empty");
        instance.$input_container.removeClass("error");
        _clearPlaceholderText(instance);
      }
    }
  };
  var _bindListListeners = function(instance) {
    if (instance.data_promise) {
      instance.$list.on("scroll", function() {
        var top = $(this).scrollTop();
        var list_height = instance.$list.height();
        var list_items_height = instance.$list.find(".list_items").height();
        var scroll_mark = list_items_height - top - list_height;
        if (scroll_mark <= instance.scroll_threshold && !instance._scroll_callback_was_called && !instance._all_done_fetching) {
          _callScrollCallback(instance, instance._previous_val, instance._page_number + 1);
          instance._scroll_callback_was_called = true;
        } else if (scroll_mark > instance.scroll_threshold && instance._scroll_callback_was_called) {
          if (_isRunningPromisePending(instance)) instance._running_promise.cancel("User scrolled back and we do not need to add more data");
          instance._scroll_callback_was_called = false;
        }
      });
    }
  };
  var _bindUI = function(instance) {
    instance.$container.on("mouseleave", _onContainerMouseleave.bind(null, instance));
    instance.$container.on("click", _onContainerClick.bind(null, instance));
    instance.$container.parents("label").on("click", _onContainerParentsLabelClick.bind(null, instance));
    instance.$input_container.on("focus", _onInputContainerFocus.bind(null, instance));
    instance.$input.on("focus", _onInputFocus.bind(null, instance));
    var on_filter_input_input;
    if (_.isUndefined(instance.input_debounce_wait_time)) {
      on_filter_input_input = _onFilterInputInput;
    } else {
      on_filter_input_input = _.debounce(_onFilterInputInput, instance.input_debounce_wait_time);
    }
    instance.$filter_input.on("input", on_filter_input_input.bind(null, instance));
    instance.$filter_input.on("keydown", _onFilterInputKeydown.bind(null, instance));
    instance.$filter_input.on("blur", _onFilterInputBlur.bind(null, instance));
    instance.$lfs_value.on("click", _onValueClick.bind(null, instance));
    instance.$lfs_value.on("mousedown", _onValueMousedown.bind(null, instance));
    instance.$input_container.on("click", ".lfs_token", _onTokenClick.bind(null, instance));
    instance.$input_container.on("mousedown", ".lfs_token", _onTokenMousedown.bind(null, instance));
    instance.$list_container.on("mousedown", _onListContainerMousedown.bind(null, instance));
    instance.$list_container.on("mouseup", _onListContainerMouseup.bind(null, instance));
    instance.$list_container.on("mousemove", ".lfs_item", _onItemMousemove.bind(null, instance));
    instance.$list_container.on("mouseleave", ".lfs_item.active", _onActiveItemMouseleave.bind(null, instance));
    var item_click_event = _.get(TSSSB, "env.desktop_app_version") === null ? "click" : "mousedown";
    instance.$list_container.on(item_click_event, ".lfs_item", _onItemClick.bind(null, instance));
    instance.onReady();
  };
  var _buildItem = function(instance, item, token) {
    var $item = $(item);
    var selected = _isAlreadySelected(instance, item);
    var disabled = item.disabled || item.lfs_disabled;
    if (instance.restrict_preselected_item_removal && item.preselected) disabled = true;
    var content;
    if (token && _.isFunction(instance.tokenTemplate)) {
      content = instance.tokenTemplate(item);
    } else if (instance.single && _.isFunction(instance.tokenTemplateSingle)) {
      content = instance.tokenTemplateSingle(item);
    } else {
      content = instance.template(item);
    }
    var description = _formatTextForDisplay($item.data("lfs-item-desc"), instance);
    var class_map = {
      active: instance._previous_val !== "" && !selected && !disabled,
      disabled: disabled,
      lfs_token: token,
      selected: selected,
      single: instance.single,
      group_item: $item.hasClass("group_item")
    };
    if (_.isFunction(instance.tokenClass)) {
      class_map[instance.tokenClass(item)] = true;
    }
    return TS.templates.lazy_filter_select_item({
      content: content,
      icon: $item.data("lfs-item-icon"),
      desc: new Handlebars.SafeString(description),
      applied_classes: TS.utility.getAppliedClasses(class_map),
      lfs_id: item.lfs_id,
      data_qa: instance.data_qa
    }).replace(/(\r\n|\n|\r)/gm, "");
  };
  var _LIST_POSITION_ABOVE_CLASSNAME = "position_above";
  var _SHOW_STATUS_CLASSNAME = "show_status";
  var _sizeAndPositionItemsList = function(instance) {
    if (!instance._list_built && !instance._showing_status) return;
    instance.$list_container.removeClass(_LIST_POSITION_ABOVE_CLASSNAME);
    var original_max_height = instance.$list.css("max-height");
    instance.$list.css({
      "max-height": 0
    });
    var list_height = instance.$list[0].scrollHeight;
    var non_list_height = parseInt(instance.$list_container.css("padding-top"), 10) + parseInt(instance.$list_container.css("padding-bottom"), 10) + parseInt(instance.$list_container.css("border-top-width"), 10) + parseInt(instance.$list_container.css("border-bottom-width"), 10) + parseInt(instance.$list_container.css("margin-top"), 10) + parseInt(instance.$list_container.css("margin-bottom"), 10);
    if (_isFilterInListStyle(instance)) {
      non_list_height += instance.$filter_input.outerHeight() + parseInt(instance.$filter_input.css("margin-bottom"), 10);
    }
    var list_container_max_height = parseInt(instance.$list_container.css("max-height"), 10);
    var list_container_min_height = 2 * instance.approx_item_height + non_list_height;
    var needed_space = Math.min(list_height + non_list_height, list_container_max_height);
    var window_height = $(window).height();
    var input_container_bottom = instance.$input_container[0].getBoundingClientRect().bottom + parseInt(instance.$input_container.css("margin-bottom"), 10);
    var available_space = instance.adjustAvailableSpaceBelow(window_height - input_container_bottom);
    if (instance.allow_list_position_above) {
      var input_container_top = instance.$input_container[0].getBoundingClientRect().top + parseInt(instance.$input_container.css("margin-top"), 10);
      var available_space_above = instance.adjustAvailableSpaceAbove(input_container_top);
      var can_fit_above = available_space_above >= needed_space;
      var can_fit_below = available_space >= needed_space && available_space > list_container_min_height;
      if (can_fit_above && !can_fit_below) {
        available_space = available_space_above;
        instance.$list_container.addClass(_LIST_POSITION_ABOVE_CLASSNAME);
      }
    }
    var new_list_max_height = Math.floor(Math.min(available_space, needed_space) - non_list_height);
    instance.$list.css({
      "max-height": new_list_max_height || original_max_height
    });
  };
  var _callScrollCallback = function(instance, query, page_number) {
    if (_isRunningPromisePending(instance)) instance._running_promise.cancel("Scrolling happened");
    if (instance._all_done_fetching) return;
    instance._running_promise = instance.data_promise(query, page_number).then(function(response) {
      var new_data = response;
      if (new_data.items) new_data = new_data.items;
      if (new_data && new_data.length) {
        instance._page_number += 1;
        if (!instance._current_data) instance._current_data = instance.data.slice();
        if (typeof response.all_items_fetched !== "undefined") instance._all_done_fetching = !!response.all_items_fetched;
        if (typeof response.num_remaining !== "undefined" && response.num_remaining === 0) instance._all_done_fetching = true;
        var actual_new_items;
        var num_new = parseInt(response.num_new, 10) || 0;
        actual_new_items = new_data.slice(-num_new);
        if (actual_new_items.length) {
          if (response._replace_all_items || response.replace_all_items) {
            instance._current_data = actual_new_items;
          } else {
            instance._current_data = instance._current_data.concat(actual_new_items);
          }
          _doAllTheThingsRequiredWithNewData(instance, instance._current_data);
        } else {
          instance._all_done_fetching = true;
        }
      } else {
        instance._all_done_fetching = true;
      }
    }, function(error) {
      _showErrorStatus(instance, error, "Something failed while trying to return the next batch of data for lazyFilterSelect.");
    });
  };
  var _canAddNewItem = function(instance) {
    return instance._selected.length < instance.max_selected_items;
  };
  var _disable = function(instance) {
    if (instance.disabled) return;
    instance.disabled = true;
    instance.$container.addClass("disabled");
    instance.$input.prop("disabled", true);
    instance.$filter_input.prop("disabled", true);
  };
  var _doAllTheThingsRequiredWithNewData = function(instance, data) {
    _prepItems(instance, data);
    _populate(instance, data);
    var should_rebuild_list = instance._list_built && (!instance.data || instance.data.length === 0 || instance.always_visible);
    if (should_rebuild_list) _showList(instance, true);
    _adjustInput(instance);
  };
  var _enable = function(instance) {
    if (!instance.disabled) return;
    instance.disabled = false;
    instance.$container.removeClass("disabled");
    instance.$input.prop("disabled", false);
    instance.$filter_input.prop("disabled", false);
  };
  var _filterGroup = function(instance, query) {
    var data = instance.data;
    var filtered = [];
    for (var i = 0; i < data.length; i += 1) {
      var item = data[i];
      if (item.lfs_group || item.is_divider) {
        var filtered_children = [];
        for (var j = 0; j < item.children.length; j += 1) {
          var subitem = item.children[j];
          if (instance.filter(subitem, query)) filtered_children.push(subitem);
        }
        if (filtered_children.length > 0) {
          filtered.push({
            is_divider: true,
            lfs_group: true,
            label: item.label,
            children: filtered_children
          });
        }
      } else if (instance.filter(item, query)) {
        filtered.push(item);
      }
    }
    return filtered;
  };
  var _getLfsId = function($item) {
    return $item.attr("data-lfs-id") || $item.prop("lfs_id") || null;
  };
  var _getData = function(instance, $item, is_already_selected) {
    var lfs_id = _getLfsId($item);
    var data;
    if (is_already_selected) {
      data = instance._selected;
    } else {
      data = instance.data_promise && instance._current_data ? instance._current_data : instance.data;
      if (lfs_id.indexOf(".") !== -1) {
        var parent_group_index = parseInt(lfs_id.split(".")[0], 10);
        data = data[parent_group_index] ? data[parent_group_index].children : data[0].children;
      }
    }
    var vals = data.filter(function(item) {
      return item.lfs_id === lfs_id;
    });
    if (vals.length) {
      return vals[0];
    }
    return null;
  };
  var _getUserCreatedSlugData = function(instance, $slug) {
    var lfs_slug_id = parseInt($slug.attr("data-lfs-slug-id"), 10);
    var data = instance._selected;
    var vals = data.filter(function(item) {
      return item.lfs_slug_id === lfs_slug_id;
    });
    if (vals.length) return vals[0];
    return null;
  };
  var _hideList = function(instance, options) {
    options = options || {};
    var needs_force = !instance._list_visible || instance.always_visible || instance.disabled;
    if (needs_force && !options.force) return;
    instance._list_visible = false;
    instance.$list_container.removeClass("visible");
    instance.$container.removeClass("list_visible");
    instance.$input_container.removeClass("active");
    if (instance._list_built) {
      instance.$list.longListView("setHidden", true);
    }
    instance._$active = null;
    instance.onListHidden();
  };
  var _instanceCanSluggify = function(instance) {
    if (!instance.sluggify.enabled) {
      return false;
    } else if (!instance.sluggify.delimiter) {
      TS.error("You must pass a delimiter regular expression to use sluggify with lazyFilterSelect.");
      return false;
    } else if (!instance.sluggify.key_name) {
      TS.error("You must pass a key name to use sluggify with lazyFilterSelect.");
      return false;
    } else if (instance.single) {
      TS.error("Sluggify only works in multi-select versions of lazyFilterSelect.");
      return false;
    }
    return true;
  };
  var _isAlreadySelected = function(instance, item) {
    if (!instance._selected.length) return false;
    var matches = instance._selected.filter(function(selected_item) {
      return selected_item.lfs_id === item.lfs_id;
    });
    return !!matches.length;
  };
  var _itemIsUserCreatedSlug = function(item) {
    if (item instanceof jQuery) {
      return !!item.attr("data-lfs-slug-id");
    }
    return item.lfs_slug_id !== undefined;
  };
  var _loadSlugAndRemoveFromData = function(instance, item, data) {
    if (!_instanceCanSluggify(instance)) return;
    if (!_itemIsUserCreatedSlug(item)) return;
    var $item = $(item);
    var description = _formatTextForDisplay($item.data("lfs-item-desc"), instance);
    instance._slug_id_counter = Math.max(item.lfs_slug_id, instance._slug_id_counter) + 1;
    instance._selected.push(item);
    var $slug;
    var slug_html = TS.templates.lazy_filter_select_item({
      content: instance.tokenTemplate(item),
      icon: $item.data("lfs-item-icon"),
      desc: new Handlebars.SafeString(description),
      applied_classes: "lfs_token",
      slug_id: item.lfs_slug_id,
      data_qa: instance.data_qa
    }).replace(/(\r\n|\n|\r)/gm, "");
    $slug = $(slug_html);
    $slug.insertBefore(instance.$input);
    _adjustInput(instance);
    if (instance.sluggify.validator) {
      instance.sluggify.validator($slug);
    }
    instance.data = data.filter(function(data_item) {
      return data_item.lfs_slug_id !== item.lfs_slug_id;
    });
    return instance.data;
  };
  var _parseHTMLOptionData = function($select) {
    var $items = $select.children("option, optgroup");
    var data = $items.length > 0 ? [] : undefined;
    $items.each(function() {
      if ($(this).prop("tagName") === "OPTGROUP") {
        var children = $(this).children("option").toArray();
        if ($(this).prop("disabled")) {
          children = children.map(function(item) {
            item.lfs_disabled = true;
            return item;
          });
        }
        data.push({
          is_divider: true,
          lfs_group: true,
          label: $(this).prop("label"),
          children: children
        });
      } else {
        data.push(this);
      }
    });
    return data;
  };
  var _populate = function(instance, data) {
    if (!data) data = instance.data;
    if (!data) {
      _showErrorStatus(instance);
      return;
    }
    if (data.length === 0) {
      _showNoResultsStatus(instance);
      return;
    }
    _hideStatus(instance, {
      keep_input_active: true
    });
    if (!instance._list_built) {
      if (!instance.data || instance.data.length === 0) {
        instance.data = data;
      }
      _startListView(instance);
    } else {
      var temp_data = _preLongListViewPrep(data);
      instance.$list.longListView("setItems", temp_data, true);
      instance._current_data = data;
      _updateMonkeyScroll(instance);
    }
    _sizeAndPositionItemsList(instance);
  };
  var _preLongListViewPrep = function(data) {
    var temp_data = [];
    data.forEach(function(item) {
      temp_data.push(item);
      if (item.children && item.children.length) {
        for (var i = 0; i < item.children.length; i += 1) {
          temp_data.push(item.children[i]);
        }
      }
    });
    return temp_data;
  };
  var _prepItems = function(instance, data) {
    if (!data) data = instance.data;
    if (!data) return;
    var html = "";
    var token = !instance.single;
    var i = 0;
    while (i < data.length) {
      var item = data[i];
      if (_itemIsUserCreatedSlug(item)) {
        data = _loadSlugAndRemoveFromData(instance, item, data);
        continue;
      }
      if (item.children && item.children.length) {
        item.lfs_group = true;
      }
      if (item.lfs_group || item.is_divider) {
        item.is_divider = true;
        var k = i;
        for (var j = 0; j < item.children.length; j += 1) {
          var subitem = item.children[j];
          subitem.lfs_id = subitem.lfs_id || k + "." + j;
          if ((subitem.selected || subitem.preselected) && instance.no_default_selection === false) {
            if (instance.single && instance._selected.length > 0 || _isAlreadySelected(instance, subitem)) continue;
            instance._selected.push(subitem);
            html += _buildItem(instance, subitem, token);
          }
        }
      } else {
        item.lfs_id = item.lfs_id || String(i);
        if ((item.selected || item.preselected) && instance.no_default_selection === false) {
          if (instance.single && instance._selected.length > 0 || _isAlreadySelected(instance, item)) {
            i += 1;
            continue;
          }
          instance._selected.push(item);
          html += _buildItem(instance, item, token);
        }
      }
      i += 1;
    }
    if (html.length > 0) {
      instance.$container.addClass("value");
      if (instance.single) {
        instance.$lfs_value.html(html);
      } else {
        $(html).insertBefore(instance.$input);
        instance.$input_container.removeClass("empty");
        instance.$input_container.removeClass("error");
        _clearPlaceholderText(instance);
      }
    }
  };
  var _removeAllSelected = function(instance) {
    while (instance.$input_container.find(".lfs_token").length > 0) {
      _removeLastSelected(instance);
    }
  };
  var _removeLastSelected = function(instance) {
    var $token = instance.$input_container.find(".lfs_token").last();
    if ($token.length) _removeSelected(instance, $token);
  };
  var _removeSelected = function(instance, $item) {
    if (instance.disabled) return;
    if (_itemIsUserCreatedSlug($item)) {
      _removeUserCreatedSlug(instance, $item);
      return;
    }
    var data_item = _getData(instance, $item, true);
    if (data_item.disabled || instance.restrict_preselected_item_removal && data_item.preselected) return;
    instance._selected = instance._selected.filter(function(item) {
      return item !== data_item;
    });
    var $list_item = instance.$list.find('[data-lfs-id="' + data_item.lfs_id + '"]');
    $list_item.removeClass("selected");
    $item.remove();
    _updateVal(instance);
    if (instance.$filter_input.val().length + instance._selected.length === 0) {
      _showEmptyState(instance);
    }
    if (instance._selected.length === 0) instance.$container.removeClass("value");
    instance.onItemRemoved(data_item);
  };
  var _removeUserCreatedSlug = function(instance, $slug) {
    if (!_instanceCanSluggify(instance)) return;
    var data_item = _getUserCreatedSlugData(instance, $slug);
    instance._selected = instance._selected.filter(function(item) {
      return item !== data_item;
    });
    $slug.remove();
    _updateVal(instance);
    if (instance.$filter_input.val().length + instance._selected.length === 0) {
      _showEmptyState(instance);
    }
    instance.onItemRemoved(data_item);
  };
  var _run = function() {
    if (this.data && this.data.length === 0) TS.warn("Data passed to lazyFilterSelect is empty.");
    _update(this, this.data);
    if (this.always_visible) _showList(this);
    if (this.restrict_input_container_height) {
      this.$container.addClass("has_restricted_input_container_height");
      if (!TS.environment.supports_custom_scrollbar) {
        this.$input_container.monkeyScroll();
      }
    }
  };
  var _runQuery = function(instance, query, keep_value) {
    if (instance.disabled) return;
    if (query === instance._previous_val) return;
    instance._all_done_fetching = false;
    instance._previous_val = query;
    instance._$active = null;
    _adjustInput(instance);
    instance._page_number = 1;
    if (instance._list_built) instance.$list.longListView("scrollToTop", true);
    if (instance.data_promise) {
      if (_isRunningPromisePending(instance)) instance._running_promise.cancel("User entered more text");
      instance._running_promise = _runDataPromiseQuery(instance, query).then(function(data) {
        _doAllTheThingsRequiredWithNewData(instance, data);
        _showList(instance, keep_value);
      }, function(error) {
        _showErrorStatus(instance, error, "Something failed while trying to return the filtered data for lazyFilterSelect.");
      });
    } else {
      _showList(instance, keep_value);
      var filtered = _filterGroup(instance, query);
      _populate(instance, filtered);
      _adjustInput(instance);
    }
  };
  var _runDataPromiseQuery = function(instance, query) {
    return new Promise(function(resolve, reject) {
      if (query.length < instance.min_query_length) {
        instance._all_done_fetching = true;
        resolve([]);
      } else {
        _.delay(function() {
          if (_isRunningPromisePending(instance)) _showLoadingStatus(instance);
        }, 650);
        instance.data_promise(query).then(function(response) {
          response = response || {};
          if (!_.isUndefined(response.all_items_fetched)) {
            instance._all_done_fetching = !!response.all_items_fetched;
          }
          if (response.num_remaining === 0) {
            instance._all_done_fetching = true;
          }
          var data = (response.items || response).slice();
          resolve(data);
          _hideStatus(instance, {
            keep_input_active: true
          });
        }, function(error) {
          reject(error);
          _hideStatus(instance);
        });
      }
    });
  };
  var _isRunningPromisePending = function(instance) {
    return instance._running_promise && instance._running_promise.isPending();
  };
  var _select = function(instance, direction) {
    if (instance.disabled) return;
    if (!instance._list_visible) {
      _showList(instance);
      return;
    }
    var $to_select;
    if (!instance._$active) {
      $to_select = instance.$list.find(".lfs_item:not(.disabled, .hidden)").first();
    } else {
      $to_select = instance._$active[direction](".lfs_item:not(.disabled, .hidden)").first();
    }
    if ($to_select.length) {
      $to_select.scrollintoview({
        duration: 0
      });
      if (instance._$active) instance._$active.removeClass("active");
      $to_select.addClass("active");
      instance._$active = $to_select;
    }
  };
  var _selectable = function($item) {
    return !($item.hasClass("selected") || $item.hasClass("disabled"));
  };
  var _selectDataItem = function(instance, data_item) {
    if (!_canAddNewItem(instance)) return;
    if (instance.single && instance._selected.length) {
      var $prev_list_item = instance.$list.find('[data-lfs-id="' + instance._selected[0].lfs_id + '"]');
      $prev_list_item.removeClass("selected");
      instance._selected.length = 0;
      instance.$lfs_value.empty();
    }
    instance._selected.push(data_item);
    _updateVal(instance);
    var $token = $(_buildItem(instance, data_item, !instance.single));
    if (_.isFunction(instance.tokenClass)) {
      $token.addClass(instance.tokenClass(data_item));
    }
    if (instance.single) {
      $token.appendTo(instance.$lfs_value);
    } else {
      $token.addClass("lfs_token");
      $token.insertBefore(instance.$input);
    }
    if (!instance.single) {
      instance.$input_container.removeClass("empty");
      instance.$input_container.removeClass("error");
      _clearPlaceholderText(instance);
    }
    instance.$container.addClass("value");
    instance.onItemAdded(data_item);
    if (!_canAddNewItem(instance)) instance.onMaxItemsSelected();
    if (!instance.single) instance.$filter_input.focus();
  };
  var _selectDown = function(instance) {
    return _select(instance, "nextAll");
  };
  var _selectListItem = function(instance) {
    if (instance.disabled) return;
    var $active = instance._$active;
    if (!$active.length) return;
    if (!_selectable($active)) return;
    if (!_canAddNewItem(instance)) return;
    $active.addClass("selected");
    $active.removeClass("active");
    instance._$active = null;
    var data_item = _getData(instance, $active);
    _selectDataItem(instance, data_item);
  };
  var _selectUp = function(instance) {
    return _select(instance, "prevAll");
  };
  var _showEmptyState = function(instance) {
    instance.$input_container.addClass("empty");
    _resetPlaceholderText(instance);
  };
  var _showList = function(instance, keep_value) {
    if (instance.disabled) return;
    TS.utility.rAF(function() {
      instance.$filter_input.focus();
    });
    if (instance._list_visible) return;
    if (instance._showing_status && instance.always_visible) return;
    if (!instance._list_built) _startListView(instance);
    if (instance._list_built || instance._showing_status) {
      instance._list_visible = true;
      instance.$list_container.addClass("visible");
      instance.$container.addClass("list_visible");
      if (!_isFilterInListStyle(instance)) instance.$input_container.addClass("active");
      if (instance._list_built) instance.$list.longListView("setHidden", false);
    }
    if (instance.single && !keep_value) {
      instance.$filter_input.val("");
      instance._previous_val = "";
      instance.$filter_input.focus();
      if (_usingMinQueryLength(instance)) instance.data = [];
      _populate(instance);
    }
    if (instance.set_height) {
      _sizeAndPositionItemsList(instance);
      if (instance.monkey_scroll && !TS.environment.supports_custom_scrollbar) {
        instance.$list.monkeyScroll();
      }
    }
    instance.onListShown();
  };
  var _startListView = function(instance) {
    if (!instance.data || instance.data.length === 0) return;
    var data = _preLongListViewPrep(instance.data);
    instance._list_built = true;
    var long_list_view_args = {
      items: data,
      approx_item_height: instance.approx_item_height,
      approx_divider_height: instance.approx_divider_height,
      preserve_dom_order: true,
      makeDivider: function() {
        return $('<div class="lfs_group"></div>');
      },
      makeElement: function() {
        return $(TS.templates.lazy_filter_select_item().replace(/(\r\n|\n|\r)/gm, ""));
      },
      renderDivider: function($el, item, data) {
        if (instance.renderDividerFunc) return instance.renderDividerFunc($el, item, data);
        $el.html(_formatTextForDisplay(item.label, instance));
      },
      renderItem: function($el, item, data) {
        if (instance.render_item_func) return instance.render_item_func($el, item, data);
        var $item = $(item);
        var remove_classes = "active selected disabled single group_item lfs_token";
        var class_map = {
          disabled: item.disabled || item.lfs_disabled,
          selected: _isAlreadySelected(instance, item),
          single: instance.single,
          group_item: $item.hasClass("group_item")
        };
        if (_.isFunction(instance.listItemClass)) {
          class_map[instance.listItemClass(item)] = true;
        }
        var applied_classes = TS.utility.getAppliedClasses(class_map);
        var attributes = {
          "data-qa": instance.data_qa + "-item-" + item.lfs_id,
          "data-lfs-id": item.lfs_id,
          title: item.title
        };
        $el.attr(attributes).removeClass(remove_classes).addClass(applied_classes).html(instance.template(item).string);
        if ($item.data("lfs-item-icon")) {
          var background_css = "url(" + $item.data("lfs-item-icon") + ")";
          var $icon = $('<span class="lfs_item_icon">').css("background-image", background_css);
          $el.prepend($icon);
        }
        if ($item.data("lfs-item-desc")) {
          var text = _formatTextForDisplay($item.data("lfs-item-desc"), instance);
          var $desc = $('<span class="lfs_item_desc">').html(text);
          $el.append($desc);
        }
      }
    };
    instance.$list.longListView(long_list_view_args);
    _bindListListeners(instance);
    instance.$list_items = instance.$container.find(".list_items");
    TS.utility.rAF(function() {
      if (instance.monkey_scroll && !TS.environment.supports_custom_scrollbar) {
        instance.$list.monkeyScroll();
      }
      instance.$list.longListView("resizeImmediately");
      TS.utility.rAF(function() {
        instance.current_items_in_view_signal.dispatch(instance.$list.longListView("getCurrentItemsInView") || []);
      });
    });
    if (instance.$list.longListView("getCurrentItemsInViewSignal")) {
      instance.$list.longListView("getCurrentItemsInViewSignal").add(function(data) {
        instance.current_items_in_view_signal.dispatch(data);
      });
    }
  };
  var _stopThePresses = function(e) {
    e.stopPropagation();
    e.preventDefault();
  };
  var _unselectItem = function(instance, $item) {
    if (instance.single || !instance.allow_item_unselect) return;
    var data_item = _getData(instance, $item, true);
    $item.removeClass("selected");
    instance._selected = instance._selected.filter(function(item) {
      return item !== data_item;
    });
    instance.$input_container.find('.lfs_item[data-lfs-id="' + data_item.lfs_id + '"]').remove();
    _updateVal(instance);
    if (instance.$filter_input.val().length + instance._selected.length === 0) {
      _showEmptyState(instance);
    }
    if (instance._selected.length === 0) instance.$container.removeClass("value");
    instance.onItemRemoved(data_item);
  };
  var _unsluggifySlug = function(instance, $slug) {
    if (!_instanceCanSluggify(instance) || !_itemIsUserCreatedSlug($slug)) return;
    var slug_text = $slug.text().trim();
    if ($slug.length) _removeUserCreatedSlug(instance, $slug);
    instance.$filter_input.val(slug_text);
    _adjustInput(instance);
    instance.$filter_input.select();
  };
  var _update = function(instance, data) {
    instance.data = data || _parseHTMLOptionData(instance.$select);
    if (instance.data) {
      instance._selected = [];
      _prepItems(instance);
      if (instance.$filter_input.val().length) {
        var query = instance.$filter_input.val();
        instance._previous_val = "";
        _runQuery(instance, query);
      }
    }
  };
  var _updateMonkeyScroll = function(instance) {
    if (instance.restrict_input_container_height) {
      TS.ui.utility.updateClosestMonkeyScroller(instance.$input_container, true);
    }
    if (instance.monkey_scroll && !TS.environment.supports_custom_scrollbar) {
      _sizeAndPositionItemsList(instance);
      TS.utility.rAF(function() {
        TS.ui.utility.updateClosestMonkeyScroller(instance.$list, true);
      });
    }
  };
  var _updateVal = function(instance) {
    if (instance.append) return;
    var values = instance._selected.filter(function(item) {
      return item instanceof HTMLOptionElement;
    }).map(function(item) {
      return $(item).val();
    });
    instance.$select.val(values).trigger("change");
  };
  var _formatTextForDisplay = function(text, instance) {
    text = TS.utility.htmlEntities(text);
    if (_.get(instance, "should_graphic_replace_emoji")) {
      text = TS.emoji.graphicReplace(text);
    }
    return text;
  };
  var _clearPlaceholderText = function(instance) {
    instance.$input.attr("placeholder", "");
    if (_isFilterInListStyle(instance)) instance.$filter_input.attr("placeholder", "");
  };
  var _resetPlaceholderText = function(instance) {
    instance.$input.attr("placeholder", instance.placeholder_text);
    if (_isFilterInListStyle(instance)) instance.$filter_input.attr("placeholder", instance.filter_placeholder_text);
  };
  var _isFilterInListStyle = function(instance) {
    return instance.style === TS.ui.lazy_filter_select.STYLES.filter_in_list;
  };
  var _usingMinQueryLength = function(instance) {
    return _.isFunction(instance.data_promise) && instance.min_query_length;
  };
  var _showErrorStatus = function(instance, error, internal_message) {
    _showStatus(instance, instance.errorTemplate(error), {
      internal_error_message: internal_message,
      clear_active_items: true
    });
  };
  var _showNoResultsStatus = function(instance) {
    var message = instance.noResultsTemplate(instance.$filter_input.val());
    _showStatus(instance, message, {
      clear_active_items: true
    });
  };
  var _showLoadingStatus = function(instance) {
    var message = TS.i18n.t("Loading results…", "lazy_filter_select")();
    _showStatus(instance, message, {
      show_loading_indicator: true
    });
  };
  var _showStatus = function(instance, message, options) {
    options = options || {};
    instance._showing_status = true;
    if (options.internal_error_message) {
      TS.error(options.internal_error_message);
    }
    if (!_isFilterInListStyle(instance)) {
      instance.$input_container.addClass("active");
    }
    if (options.show_loading_indicator) {
      instance.$status_loading_indicator.removeClass("hidden");
    }
    if (options.clear_active_items) {
      instance._$active = null;
    }
    instance.$status_content.html(message);
    instance.$list_container.addClass(_SHOW_STATUS_CLASSNAME);
  };
  var _hideStatus = function(instance, options) {
    options = options || {};
    instance._showing_status = false;
    if (!options.keep_input_active) {
      instance.$input_container.removeClass("active");
    }
    instance.$status_loading_indicator.addClass("hidden");
    instance.$list_container.removeClass(_SHOW_STATUS_CLASSNAME);
  };
  var _onContainerMouseleave = function(instance) {
    instance._prevent_blur = false;
  };
  var _onContainerClick = function(instance) {
    if (instance.disabled) return;
    _showList(instance);
  };
  var _onContainerParentsLabelClick = function(instance, e) {
    if (instance.disabled) return;
    e.preventDefault();
    _showList(instance);
  };
  var _onInputContainerFocus = function(instance) {
    instance.$input_container.click();
    instance.$input.focus();
  };
  var _onInputFocus = function(instance) {
    if (!instance._input_is_focused) {
      instance._input_is_focused = true;
      instance.$input_container.click();
      instance.onInputFocus();
    }
    if (!instance.single) {
      instance.$input_container.addClass("active");
    }
  };
  var _onFilterInputInput = function(instance) {
    var query = instance.$filter_input.val();
    if (_instanceCanSluggify(instance) && query.match(instance.sluggify.delimiter)) {
      var slugs = query.split(instance.sluggify.delimiter);
      slugs.forEach(function(slug) {
        if (slug.length) _addUserCreatedSlugFromString(instance, slug);
      });
    } else {
      _runQuery(instance, query, true);
    }
  };
  var _onFilterInputKeydown = function(instance, e) {
    if (instance.disabled) return;
    switch (e.keyCode) {
      case TS.utility.keymap.down:
        _stopThePresses(e);
        _selectDown(instance);
        break;
      case TS.utility.keymap.up:
        _stopThePresses(e);
        _selectUp(instance);
        break;
      case TS.utility.keymap.enter:
        _onFilterInputKeydownEnter(instance, e);
        break;
      case TS.utility.keymap.del:
        _onFilterInputKeydownDel(instance, e);
        break;
      case TS.utility.keymap.tab:
        _onFilterInputKeydownTab(instance, e);
        break;
      case TS.utility.keymap.esc:
        _onFilterInputKeydownEsc(instance, e);
        break;
      default:
        break;
    }
    instance.onKeyDown(e, e.isDefaultPrevented());
  };
  var _onFilterInputBlur = function(instance) {
    if (!instance._prevent_blur) {
      _hideList(instance);
      _hideStatus(instance);
    }
    if (instance.$filter_input.val().trim() && _instanceCanSluggify(instance)) {
      _addUserCreatedSlugFromString(instance, instance.$filter_input.val());
    }
    instance._input_is_focused = false;
    instance.onInputBlur();
  };
  var _onFilterInputKeydownEnter = function(instance, e) {
    if (instance._$active && instance._$active.length && instance._list_visible) {
      _stopThePresses(e);
      var $current_active = instance._$active;
      var should_unselect_item = !instance.single && instance.allow_item_unselect && _isAlreadySelected(instance, _getData(instance, $current_active));
      if (should_unselect_item) {
        _unselectItem(instance, $current_active);
      } else {
        if (!_canAddNewItem(instance)) return;
        _selectListItem(instance);
        var $el = $(e.currentTarget);
        if ($el.val() !== "") {
          $el.val("");
          instance._previous_val = "";
          _populate(instance);
        }
        if (instance.single) {
          _hideList(instance);
          _hideStatus(instance);
        }
      }
    }
  };
  var _onFilterInputKeydownDel = function(instance, e) {
    if (instance.$filter_input.val() === "") {
      _stopThePresses(e);
      var $last_item = instance.$input_container.find(".lfs_token").last();
      if (_instanceCanSluggify(instance) && _itemIsUserCreatedSlug($last_item)) {
        _unsluggifySlug(instance, $last_item);
      } else {
        _removeLastSelected(instance);
      }
    }
  };
  var _onFilterInputKeydownTab = function(instance, e) {
    if (instance.$filter_input.val().trim() && _instanceCanSluggify(instance)) {
      _stopThePresses(e);
      _addUserCreatedSlugFromString(instance, instance.$filter_input.val());
    } else if (instance.tab_to_nav) {
      _stopThePresses(e);
      if (e.shiftKey) {
        _selectUp(instance);
      } else {
        _selectDown(instance);
      }
    }
  };
  var _onFilterInputKeydownEsc = function(instance, e) {
    _stopThePresses(e);
    _hideList(instance);
    _hideStatus(instance);
    instance.$filter_input.blur();
  };
  var _onValueClick = function(instance, e) {
    if (instance.disabled) return;
    e.stopPropagation();
    _showList(instance);
    instance._prevent_blur = false;
  };
  var _onValueMousedown = function(instance, e) {
    if (e.which === 1) instance._prevent_blur = true;
  };
  var _onTokenClick = function(instance, e) {
    if (instance.disabled) return;
    _removeSelected(instance, $(e.currentTarget));
    instance._prevent_blur = false;
  };
  var _onTokenMousedown = function(instance, e) {
    if (e.which === 1) instance._prevent_blur = true;
  };
  var _onListContainerMousedown = function(instance, e) {
    if (e.which === 1) instance._prevent_blur = true;
  };
  var _onListContainerMouseup = function(instance) {
    if (instance._prevent_blur) instance.$filter_input.focus();
  };
  var _onItemMousemove = function(instance, e) {
    if (instance.disabled) return;
    if (e.clientX == instance._mouse.lastX && e.clientY == instance._mouse.lastY) return;
    var $el = $(e.currentTarget);
    if (instance._$active) instance._$active.removeClass("active");
    if (!$el.hasClass("active") && _selectable($el)) {
      $el.addClass("active");
      instance._$active = $el;
    }
    instance._mouse.lastX = e.clientX;
    instance._mouse.lastY = e.clientY;
  };
  var _onActiveItemMouseleave = function(instance, e) {
    $(e.currentTarget).removeClass("active");
    instance._$active = null;
  };
  var _onItemClick = function(instance, e) {
    if (instance.disabled) return;
    e.preventDefault();
    var $el = $(e.currentTarget);
    instance._$active = $el;
    var should_unselect_item = !instance.single && instance.allow_item_unselect && _isAlreadySelected(instance, _getData(instance, $el));
    if (should_unselect_item) {
      _unselectItem(instance, $el);
    } else {
      var selectable = _selectable($el);
      if (!selectable && !instance.single) return;
      if (!_canAddNewItem(instance)) return;
      if (!selectable && instance.single) {
        _hideList(instance);
        e.stopPropagation();
        return;
      }
      _selectListItem(instance);
      if (instance.$filter_input.val() !== "") {
        instance.$filter_input.val("");
        instance._previous_val = "";
        _populate(instance);
      }
      if (instance.single) {
        _hideList(instance);
        e.stopPropagation();
      }
    }
    instance._prevent_blur = false;
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.people_picker", {
    STYLES: {
      normal: "normal",
      small: "small"
    },
    onStart: function() {},
    preload: function(options) {
      _createFilterFunction(options)("");
      return options;
    },
    make: function($el, options) {
      options = options || {};
      if (!options.append) $el.addClass("hidden");
      options.style = _.get(TS.ui.people_picker.STYLES, options.style, TS.ui.people_picker.STYLES.normal);
      if (TS.boot_data.page_needs_enterprise || options.force_lazy_filter_select || TS.lazyLoadMembersAndBots()) {
        $el.lazyFilterSelect({
          append: !!options.append,
          always_visible: !!options.always_visible,
          approx_item_height: options.approx_item_height || 50,
          data_promise: _createFilterFunction(options),
          placeholder_text: options.placeholder_text || TS.i18n.t("Search by name", "people_picker")(),
          classes: "people_picker",
          scroll_threshold: 2500,
          single: !!options.single,
          style: options.style,
          template: options.template || function(item) {
            var html = TS.templates.member_small({
              member: item.member
            });
            return new Handlebars.SafeString(html);
          },
          tokenTemplate: function(item) {
            var html = TS.templates.member_token({
              member: item.member
            });
            return new Handlebars.SafeString(html);
          },
          tokenClass: function(item) {
            return TS.templates.builders.getMemberTypeClass(item.member);
          },
          noResultsTemplate: function(query) {
            if (!query) {
              return TS.i18n.t("No one found", "people_picker")();
            }
            return TS.i18n.t("No one found matching <strong>{query}</strong>", "people_picker")({
              query: TS.utility.htmlEntities(query)
            });
          },
          onItemAdded: options.onItemAdded,
          onItemRemoved: options.onItemRemoved
        });
      } else {
        var data_specified = options.include_bots ? TS.members.getActiveMembersExceptSelfAndSlackbot() : TS.members.getActiveMembersExceptSelfAndBots();
        var opts = {
          append: !!options.append,
          always_visible: !!options.always_visible,
          data: _makeMembersWithPreselectsForTemplate(options.members || data_specified, options.preselected_ids || []),
          per_page: 50,
          approx_item_height: options.approx_item_height || 50,
          placeholder_text: options.placeholder_text || TS.i18n.t("Search by name", "people_picker")(),
          classes: "people_picker",
          single: !!options.single,
          style: options.style,
          template: options.template || function(item) {
            var html = TS.templates.member_small({
              member: item.member
            });
            return new Handlebars.SafeString(html);
          },
          tokenTemplate: function(item) {
            var html = TS.templates.member_token({
              member: item.member
            });
            return new Handlebars.SafeString(html);
          },
          tokenClass: function(item) {
            return TS.templates.builders.getMemberTypeClass(item.member);
          },
          filter: function(item, query) {
            var start_regex;
            var suffix_regex;
            var prev_query;
            var member = item.member;
            if (!options.include_bots && member.is_bot) {
              return false;
            }
            if (prev_query !== query) {
              start_regex = new RegExp("^" + TS.utility.regexpEscape(query), "i");
              suffix_regex = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(query), "i");
              prev_query = query;
            }
            var match_names_only = true;
            return TS.utility.members.checkMemberMatch(member, start_regex, match_names_only) || TS.utility.members.checkMemberMatch(member, suffix_regex, match_names_only);
          },
          noResultsTemplate: function(query) {
            if (!query) {
              return TS.i18n.t("No one found", "people_picker")();
            }
            return TS.i18n.t("No one found matching <strong>{query}</strong>", "people_picker")({
              query: TS.utility.htmlEntities(query)
            });
          },
          onItemAdded: options.onItemAdded,
          onItemRemoved: options.onItemRemoved
        };
        $el.lazyFilterSelect(opts);
      }
    },
    value: function($el) {
      return $el.lazyFilterSelect("value");
    },
    clearValue: function($el) {
      return $el.lazyFilterSelect("clearValue");
    },
    recomputeHeight: function($el) {
      return $el.lazyFilterSelect("recomputeHeight");
    }
  });
  var _createFilterFunction = function(options) {
    var member_searcher = {};
    var preselected_ids = {};
    if (options.preselected_ids && options.preselected_ids.length) {
      _.forEach(options.preselected_ids, function(id) {
        if (id) preselected_ids[id] = true;
      });
    }
    var omitted_ids = {};
    if (options.omitted_ids && options.omitted_ids.length) {
      _.forEach(options.omitted_ids, function(id) {
        if (id) omitted_ids[id] = true;
      });
    }
    var promiseToFilter = function(query, pageNumber) {
      if (query.charAt(0) === "@") query = query.substring(1);
      if (query === "" && options.empty_query_result) {
        if (pageNumber > 0) {
          return Promise.resolve([]);
        }
        return Promise.resolve(options.empty_query_result.map(function(member) {
          return {
            member: member,
            lfs_id: String(member.id),
            preselected: !!preselected_ids[member.id]
          };
        }));
      }
      if (query === "" && options.initial_load_promise) {
        if (_.isUndefined(pageNumber)) {
          return options.initial_load_promise;
        }
        options.initial_load_promise = _getSearchPromise(options.initial_load_promise, preselected_ids, omitted_ids);
        return options.initial_load_promise;
      }
      if (member_searcher.query !== query) {
        member_searcher.query = query;
        member_searcher.include_org = TS.boot_data.page_needs_enterprise;
        member_searcher.include_slackbot = false;
        member_searcher.include_self = false;
        member_searcher.full_profile_filter = false;
        member_searcher.include_bots = !!options.include_bots;
      }
      var load_promise = TS.members.ensureMembersArePresent(preselected_ids).then(function() {
        return _getSearchPromise(member_searcher, preselected_ids, omitted_ids);
      });
      if (query === "" && !options.initial_load_promise) {
        options.initial_load_promise = load_promise;
      }
      return load_promise;
    };
    return promiseToFilter;
  };
  var _getSearchPromise = function(searcherOrPromise, preselectedIds, omitted_ids) {
    return Promise.resolve().then(function() {
      var unknown_user_ids = [];
      var ids = _.keys(preselectedIds);
      ids.forEach(function(id) {
        var mbr = TS.members.getMemberById(id);
        if (!mbr) unknown_user_ids.push(id);
      });
      if (unknown_user_ids.length) {
        return TS.members.ensureMembersArePresent(unknown_user_ids);
      }
      return Promise.resolve();
    }).then(function() {
      return TS.members.promiseToSearchMembers(searcherOrPromise).then(function(response) {
        var items = [];
        if (response.query === "") {
          items = TS.members.getMembersForUser();
        } else {
          items = response.items;
        }
        response.items = items.filter(function(item) {
          return !omitted_ids[item.id];
        }).map(function(item) {
          if (item.member && typeof item.preselected !== "undefined") return item;
          return {
            member: item,
            lfs_id: String(item.id),
            preselected: !!preselectedIds[item.id]
          };
        });
        return response;
      });
    });
  };
  var _makeMembersWithPreselectsForTemplate = function(members, preselected_ids) {
    return members && members.map(function(member) {
      return {
        member: member,
        lfs_id: String(member.id),
        preselected: preselected_ids.indexOf(member.id) !== -1
      };
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.utility", {
    onStart: _.noop,
    preventElementFromScrolling: function($el, callback, find_new_el) {
      if (!$el.length || _preventing_element_from_scrolling) {
        callback();
        return;
      }
      var initial_offset = $el.offset();
      try {
        _preventing_element_from_scrolling = true;
        callback();
      } finally {
        _preventing_element_from_scrolling = false;
      }
      if (_.isFunction(find_new_el)) {
        $el = find_new_el();
        if (!$el.length) return;
      }
      var now_top = $el.offset().top;
      var dist_moved = now_top - initial_offset.top;
      var $scroller = $el.closest(".monkey_scroller");
      if (!$scroller.length) {
        $scroller = $el.closest(":scrollable(vertical)");
      }
      if ($scroller.is("html")) $scroller = $("body");
      if (dist_moved !== 0) {
        var scroll_top = $scroller.scrollTop() + dist_moved;
        $scroller.scrollTop(Math.round(scroll_top));
      }
      if (TS.client) TS.ui.utility.updateClosestMonkeyScroller($el);
    },
    updateClosestMonkeyScroller: function($el, force) {
      if (!$el) return;
      var $scroller = $el.closest(".monkey_scroller");
      var data = $scroller.data("monkeyScroll");
      if (!data) return;
      if (!$scroller.data("monkeyScrollBeingCalled")) {
        $scroller.data("monkeyScrollBeingCalled", true);
        TS.utility.setImmediate(function() {
          data.updateFunc(force);
          $scroller.data("monkeyScrollBeingCalled", false);
        });
      }
    },
    mkFocusStyleListener: function(container_class, item_class, focus_state_name) {
      var container_selector = "." + container_class;
      var item_selector = "." + item_class;
      var focus_class = item_class + "--" + (focus_state_name || "focus");
      var focus_selector = "." + focus_class;
      return function(e) {
        var $container = $(container_selector);
        if ($container.hasClass("hidden")) {
          return;
        }
        var target = e.target;
        var $focused_item = $container.find(focus_selector);
        var focused_item = $focused_item.get(0);
        if (focused_item && !$container.get(0).contains(target)) {
          $focused_item.removeClass(focus_class);
          return;
        }
        if (focused_item && focused_item.contains(target) || $(target).hasClass(focus_class)) {
          return;
        }
        $focused_item.removeClass(focus_class);
        $(target).closest(item_selector).addClass(focus_class);
      };
    },
    prevWithClass: function($node, class_name) {
      var $prev = $node.prev();
      return $prev.hasClass(class_name) || !$prev.length ? $prev : TS.ui.utility.prevWithClass($prev, class_name);
    }
  });
  var _preventing_element_from_scrolling = false;
})();
(function() {
  "use strict";
  TS.registerModule("ui.messages_utils", {
    onStart: _.noop,
    getFirstTabStopInView: function(messages_in_view) {
      var reducer = _mkReducerFn("last");
      return messages_in_view.reduce(reducer, null) || $();
    },
    getLastTabStopInView: function(messages_in_view) {
      var reducer = _mkReducerFn("first");
      return messages_in_view.reduceRight(reducer, null) || $();
    },
    identifyFirstAndLastTabStopInView: function() {
      var messages_in_view = TS.ui.messages_utils.getMessagesInView();
      if (!messages_in_view || messages_in_view && !messages_in_view.length) {
        return;
      }
      var $parent = messages_in_view[0].closest(".message_container,.msgs_holder");
      var $first_tab_stop = TS.ui.messages_utils.getFirstTabStopInView(messages_in_view);
      var $last_tab_stop = TS.ui.messages_utils.getLastTabStopInView(messages_in_view);
      $parent.find(".first_tab_stop_in_view").removeClass("first_tab_stop_in_view");
      $parent.find(".last_tab_stop_in_view").removeClass("last_tab_stop_in_view");
      $first_tab_stop.addClass("first_tab_stop_in_view");
      $last_tab_stop.addClass("last_tab_stop_in_view");
    },
    getMessageFromPoint: function(startX, startY, endX, endY) {
      var i = 5;
      var x_incr = i;
      var y_incr = (startY - endY) / (startX - endX / i) + i;
      var findMessageAt = function(x, y) {
        var el = document.elementFromPoint(x, y);
        var $message = $(el).closest(".message");
        if ($message.length) {
          return $message;
        }
        if (x <= endX) {
          return;
        }
        var next_x = x - x_incr;
        var next_y = y - y_incr;
        return findMessageAt(next_x, next_y);
      };
      return findMessageAt(startX, startY);
    },
    getPreviousMessage: function($message) {
      var $prev = TS.ui.utility.prevWithClass($message, "message");
      return $prev.length ? $prev : _lastMsgFromPrevGroup($message, ".day_container");
    },
    getPreviousUnreadViewMessage: function($message) {
      var $prev = TS.ui.utility.prevWithClass($message, "message");
      return $prev.length ? $prev : _lastMsgFromPrevGroup($message, ".unread_group");
    },
    getPreviousThreadsViewMessage: function($message) {
      var $prev = TS.ui.utility.prevWithClass($message, "message");
      if ($prev.length) {
        return $prev;
      }
      var $root_message = TS.ui.utility.prevWithClass($message.closest(".thread_replies_container"), "message");
      if ($root_message.length) {
        return $root_message;
      }
      var $last_of_prev_thread = _lastMsgFromPrevGroup($message, ".message_container_item");
      if ($last_of_prev_thread.length) {
        return $last_of_prev_thread;
      }
      var last_message_selector = ".day_container:last-child .message_container_item:last-child .message:last-child";
      return _lastMsgFromPrevGroup($message, ".threads_section", last_message_selector);
    },
    getMessagesInView: function() {
      var $messages_container = $("#messages_container");
      var offsets = $messages_container.offset();
      var height = $messages_container.height();
      var x = offsets.left + $messages_container.width() / 2;
      var y = offsets.top + (height - 10);
      var maxX = offsets.left;
      var maxY = (height - offsets.top) / 2;
      var prev_msg_fn = function() {
        var $clientui = $("#client-ui");
        if ($clientui.hasClass("unread_view_is_showing")) {
          return TS.ui.messages_utils.getPreviousUnreadViewMessage;
        }
        if ($clientui.hasClass("threads_view_is_showing")) {
          return TS.ui.messages_utils.getPreviousThreadsViewMessage;
        }
        return TS.ui.messages_utils.getPreviousMessage;
      }();
      var getPrevious = function(messages) {
        var $message = messages[messages.length - 1];
        var y = $message.offset().top;
        if (y >= 0 && y <= 10) {
          return messages;
        }
        if (y < 0) {
          return messages;
        }
        var $previous = prev_msg_fn($message);
        if (!$previous.length) {
          return messages;
        }
        return getPrevious(messages.concat($previous));
      };
      var $last_in_view = TS.ui.messages_utils.getMessageFromPoint(x, y, maxX, maxY);
      if (!$last_in_view) {
        return;
      }
      return getPrevious([$last_in_view]);
    }
  });
  var _focusable_nodes_selector = "input,select,textarea,button,a,div[tabindex],span[tabindex]";
  var _form_element_names_re = /^(input|select|textarea|button)$/;
  var _mkReducerFn = function(method_name) {
    return function(acc, $message) {
      if (acc) {
        return acc;
      }
      var has_focus = $message.hasClass("message--focus");
      if (!has_focus) {
        $message.addClass("message--focus");
      }
      var filter_result = _getFocusableChildren($message)[method_name]();
      if (!has_focus) {
        $message.removeClass("message--focus");
      }
      if (filter_result[0]) {
        return filter_result;
      }
    };
  };
  var _mkInViewFilterFn = function() {
    var $messages_container = $("#messages_container");
    var minY = $messages_container.offset().top;
    var maxY = minY + $messages_container.height();
    return function(node) {
      var top = $(node).offset().top;
      return top >= minY && top <= maxY;
    };
  };
  var _getFocusableChildren = function($node) {
    var inView = _mkInViewFilterFn();
    var filerFn = function(i, node) {
      return inView(node) && _inTabFlow(node) && _isVisible(node);
    };
    return $node.find(_focusable_nodes_selector).filter(filerFn);
  };
  var _inTabFlow = function(node) {
    var node_name = node.nodeName.toLowerCase();
    var tab_index = node.getAttribute("tabindex");
    var has_implicit_tabindex = tab_index == null || node.tabIndex >= 0;
    var has_explicit_tabindex = tab_index !== null && tab_index >= 0;
    var in_tab_flow = has_implicit_tabindex || has_explicit_tabindex;
    var is_form_element = _form_element_names_re.test(node_name);
    var is_anchor = node_name === "a";
    if (is_form_element && !node.disabled && node.type !== "hidden" && in_tab_flow) {
      return true;
    }
    if (is_anchor && (node.href && in_tab_flow || !node.href && has_explicit_tabindex)) {
      return true;
    }
    if (!(is_form_element || is_anchor) && has_explicit_tabindex) {
      return true;
    }
    return false;
  };
  var _isVisible = function(node) {
    var $node = $(node);
    return $node.css("visibility") === "visible" && $node.css("display") !== "none" && $node.css("opacity") == 1;
  };
  var _lastMsgFromPrevGroup = function($message, container_selector, last_message_selector) {
    var last_selector = last_message_selector || ".message:last-child";
    return $message.closest(container_selector).prev(container_selector).find(last_selector);
  };
})();
(function() {
  "use strict";
  TS.registerModule("dnd", {
    dnd_statuses_changed_sig: new signals.Signal,
    current_user_dnd_status_changed_sig: new signals.Signal,
    onStart: function() {
      if (!TS.client) return;
      if (TS.useRedux()) {
        delete TS.model.dnd.current_statuses;
      }
      TS.ms.connected_sig.add(_onConnected);
      TS.ms.disconnected_sig.add(_onDisconnected);
      var team_delay = _.random(_TEAM_INFO_DELAY_MIN, _TEAM_INFO_DELAY_MAX);
      var single_user_delay = Math.round(team_delay * _SINGLE_USER_INFO_DELAY_SCALE);
      TS.dnd.setApiDelays(team_delay, single_user_delay);
      TS.members.joined_team_sig.add(_memberJoinedTeam);
      TS.members.changed_deleted_sig.add(_memberDeletedChanged);
      TS.dnd.debouncedCheckForChanges = TS.utility.throttleFunc(TS.dnd.checkForChanges, 500, true);
      if (TS.lazyLoadMembersAndBots()) {
        TS.members.lazily_added_sig.add(_maybeSetDndStatusForNewMemberAndSignal);
      }
      if (TS.boot_data.feature_dnd_on_demand) {
        if (TS.boot_data.feature_tinyspeck) {
          _record_metrics = true;
        } else {
          _record_metrics = TS.utility.enableFeatureForUser(1);
        }
        _be_lazy = true;
      }
      if (TS.dnd.isLazy()) {
        TS.presence_manager.sub_list_changed.add(_presenceManagerSubListChanged);
      }
    },
    isLazy: function() {
      return _be_lazy;
    },
    memberDndStatus: function() {
      var in_dnd = TS.dnd.calculateMemberDndFromTimestamp(TS.model.user);
      var snoozing = in_dnd && TS.model.dnd.snooze_enabled;
      var end_time_ts = _endTime(TS.model.user);
      var readable_end_time;
      if (end_time_ts && snoozing) {
        readable_end_time = _snoozeReadableCountdown(end_time_ts);
      } else if (end_time_ts) {
        readable_end_time = TS.utility.date.toTime(end_time_ts, true);
        if (!TS.utility.date.do24hrTime()) {
          readable_end_time = readable_end_time.split(":00").join("");
        }
      }
      return {
        in_dnd: in_dnd,
        snoozed: snoozing,
        ends: end_time_ts,
        readable_end_time: readable_end_time
      };
    },
    setSnooze: function(num_minutes) {
      return TS.api.call("dnd.setSnooze", {
        num_minutes: num_minutes
      }, function(ok, data) {
        if (!ok) {
          TS.warn("dnd.setSnooze failed");
          return;
        }
        _log("dnd.setSnooze to " + num_minutes + " minutes. New end time is " + _readableTs(data.snooze_endtime));
      });
    },
    endSnooze: function() {
      return TS.api.call("dnd.endSnooze", {}, function(ok) {
        if (!ok) {
          TS.warn("dnd.endSnooze failed");
          return;
        }
        _log("dnd.endSnooze succeeded");
      });
    },
    endDnd: function() {
      return TS.api.call("dnd.endDnd", {}, function(ok) {
        if (!ok) {
          TS.warn("dnd.endDnd failed");
          return;
        }
        _log("dnd.endDnd succeeded");
      });
    },
    calculateMemberDndFromTimestamp: function(member, now) {
      var is_in_dnd;
      if (!now) now = _now();
      var start = _startTime(member);
      var end = _endTime(member);
      if (member.is_self && TS.model.dnd.snooze_enabled && end) {
        if (end > now) return true;
      }
      if (start == null || end == null) return false;
      is_in_dnd = end > now && (start <= now || start > end);
      return is_in_dnd;
    },
    isMemberInDnd: function(member) {
      if (TS.useRedux()) {
        return !!TS.redux.dnd.isMemberInDndById(member.id);
      }
      return !!TS.model.dnd.current_statuses[member.id];
    },
    checkForChanges: function() {
      if (!TS.model.ms_connected) return;
      if (_record_metrics) TS.metrics.mark("dnd_check_for_changes");
      var self_changed = false;
      var now = _now();
      if (TS.model.dnd.snooze_enabled) {
        if (now >= TS.model.dnd.snooze_endtime) {
          TS.model.dnd.snooze_enabled = false;
          self_changed = true;
        }
      }
      if (TS.dnd.isLazy() && _.size(TS.model.dnd.team) > _DND_LIST_SIZE_LIMIT) {
        _log("checkForChanges over limit, purging non-relevant dnd data");
        _purgeNonRelevantData();
      }
      var members_with_stale_times = [];
      var members_with_updates = [];
      var checkMember = function(member) {
        if (!member || member.deleted) return;
        var was_in_dnd = TS.dnd.isMemberInDnd(member) || false;
        var is_in_dnd = TS.dnd.calculateMemberDndFromTimestamp(member, now);
        if (was_in_dnd != is_in_dnd) {
          _updateDndForMember(member.id, is_in_dnd);
          if (member.is_self) self_changed = true;
          members_with_updates.push(member);
        }
        if (_memberHasStaleTimes(member, now)) {
          members_with_stale_times.push(member);
        }
      };
      if (TS.dnd.isLazy()) {
        _.forOwn(TS.model.dnd.team, function(props, uid) {
          var member = TS.members.getMemberById(uid);
          checkMember(member);
        });
      } else {
        var all_members = TS.members.getMembersForUser();
        _.forEach(all_members, checkMember);
      }
      if (self_changed && !_.includes(members_with_updates, TS.model.user)) members_with_updates.push(TS.model.user);
      if (members_with_updates.length > 0) _log("Processing DND status changes for " + members_with_updates.length + " members");
      _dispatchStatusesChangedSig(members_with_updates);
      if (self_changed) {
        TS.dnd.current_user_dnd_status_changed_sig.dispatch();
        TSSSB.call("dndStatusChanged", TS.dnd.isMemberInDnd(TS.model.user));
        _log("Current user DND status changed");
      }
      if (TS.dnd.isLazy()) {
        var discarded = 0;
        members_with_stale_times = _.filter(members_with_stale_times, function(member) {
          var is_subscribed = TS.presence_manager.isSubscribedToMember(member.id);
          if (!is_subscribed) {
            delete TS.model.dnd.team[member.id];
            discarded += 1;
          }
          return is_subscribed;
        });
        if (discarded) _log("checkForChanges discarded " + discarded + " stale members");
      }
      TS.dnd.kickOffNextEventTimer();
      if (_record_metrics) {
        if (TS.dnd.isLazy()) {
          TS.metrics.measureAndClear("dnd_check_for_changes_lazy", "dnd_check_for_changes");
        } else {
          TS.metrics.measureAndClear("dnd_check_for_changes", "dnd_check_for_changes");
        }
      }
      return members_with_stale_times;
    },
    debouncedCheckForChanges: function() {},
    kickOffNextEventTimer: function() {
      clearTimeout(_next_event_timer);
      var now = _now();
      var next_ts = _calcNextCheckTime(now);
      _log("next DND tick scheduled for " + _readableTs(next_ts));
      var in_ms = (next_ts - now) * 1e3;
      _next_timer_time = next_ts;
      _next_event_timer = setTimeout(function() {
        var members_needing_new_data = TS.dnd.checkForChanges();
        var force_full_team = false;
        if (_team_info_first_boot_fail_time) {
          if (_now() - _team_info_first_boot_fail_time > 15 * 60) force_full_team = true;
        }
        if (!TS.dnd.isLazy() && (force_full_team || members_needing_new_data.length > _INDIVIDUAL_UPDATE_LIMIT)) {
          TS.dnd.fetchFullTeam();
        } else if (members_needing_new_data.length > 1) {
          TS.dnd.fetchMultipleMembers(members_needing_new_data);
          _log("DND refreshing " + members_needing_new_data + " members");
        } else if (members_needing_new_data.length === 1) {
          TS.dnd.refreshMember(members_needing_new_data[0]);
          _log("DND refreshing one member");
        }
      }, in_ms);
    },
    fetchFullTeam: function(first_boot) {
      var promise = _fetchTeamInfo(first_boot);
      if (promise) return promise.finally(TS.dnd.checkForChanges);
    },
    fetchMultipleMembers: function(members) {
      var promise = _fetchUsersInfo(members);
      if (promise) return promise.finally(TS.dnd.checkForChanges);
    },
    refreshMember: function(member) {
      var promise = _fetchUserInfo(member);
      if (promise) return promise.finally(TS.dnd.checkForChanges);
    },
    updateUserPropsAndSignal: function(user_id, props) {
      _updateUserDndProps(user_id, props);
      if (user_id === TS.model.user.id) {
        TS.dnd.checkForChanges();
      } else {
        TS.dnd.debouncedCheckForChanges();
      }
    },
    dndOverride: function(c_id, ts) {
      var channel = TS.shared.getModelObById(c_id);
      if (!channel) return;
      var msg = TS.utility.msgs.getMsg(ts, channel.msgs);
      if (!msg) return;
      if (msg._ignore_dnd) return;
      msg._ignore_dnd = true;
      if (channel.is_im) {
        TS.ui.growls.growlImMessage(channel, msg);
      } else {
        TS.ui.growls.growlchannelOrGroupMessage(channel, msg);
      }
    },
    debugInfo: function() {
      var logging = ["DND debug info:"];
      logging.push("next timer fires at " + _readableTs(_next_timer_time));
      logging.push("_team_info_delay: " + _team_info_delay);
      logging.push("_single_user_info_delay: " + _single_user_info_delay);
      logging.push("_calcNextCheckTime: " + _readableTs(_calcNextCheckTime()));
      var output = "\n" + logging.join("\n");
      TS.info(output);
    },
    debugMember: function(member) {
      var logging = ["DND member debugging:"];
      logging.push("is in DND: " + !!TS.dnd.isMemberInDnd(member) + " (" + TS.dnd.calculateMemberDndFromTimestamp(member) + ")");
      logging.push("start: " + _readableTs(_startTime(member), true));
      logging.push("end  : " + _readableTs(_endTime(member), true));
      logging.push("next : " + _readableTs(_nextTime(member), true));
      logging.push("stale? " + _memberHasStaleTimes(member));
      var end = _endTime(member);
      if (end && _timeWasProbablyASnooze(end)) {
        logging.push("Probably a snooze");
      } else if (end) {
        logging.push("Probably a scheduled DND");
      }
      var output = "\n" + logging.join("\n");
      TS.info(output);
    },
    setApiDelays: function(team_delay, single_user_delay) {
      _team_info_delay = team_delay;
      _single_user_info_delay = single_user_delay;
    },
    test: function() {
      return {
        fetchUsersInfo: _fetchUsersInfo,
        calcNextCheckTime: _calcNextCheckTime,
        snoozeReadableCountdown: _snoozeReadableCountdown,
        updateUserDndProps: _updateUserDndProps,
        timeWasProbablyASnooze: _timeWasProbablyASnooze,
        memberHasStaleTimes: _memberHasStaleTimes,
        ensureDndTimesForMemberIds: _ensureDndTimesForMemberIds,
        purgeNonRelevantData: _purgeNonRelevantData,
        requested_member_ids: _requested_member_ids
      };
    }
  });
  var _MIN_TIMER_DELAY = 15;
  var _MAX_TIMER_DELAY = 5 * 60;
  var _INDIVIDUAL_UPDATE_LIMIT = 100;
  var _TEAM_INFO_DELAY_MAX = 1500;
  var _TEAM_INFO_DELAY_MIN = 10;
  var _SINGLE_USER_INFO_DELAY_SCALE = .01;
  var _DND_LIST_SIZE_LIMIT = 1500;
  var _team_info_delay = _TEAM_INFO_DELAY_MAX;
  var _single_user_info_delay = _TEAM_INFO_DELAY_MIN;
  var _next_event_timer;
  var _next_timer_time;
  var _team_info_first_boot_fail_time = null;
  var _requested_member_ids = {};
  var _be_lazy = false;
  var _record_metrics = false;
  var _updateDndForMember = function(member_id, is_in_dnd) {
    if (TS.useRedux()) {
      TS.redux.dnd.updateDndForMember(member_id, is_in_dnd);
    } else if (TS.model.dnd.current_statuses) {
      TS.model.dnd.current_statuses[member_id] = is_in_dnd;
    }
  };
  var _dispatchStatusesChangedSig = function(members) {
    if (TS.dnd.isLazy()) {
      members = _.filter(members, function(m) {
        if (m.is_self) return true;
        return TS.presence_manager.isSubscribedToMember(m.id);
      });
    }
    if (members.length) TS.dnd.dnd_statuses_changed_sig.dispatch(members);
  };
  var _onConnected = function(was_fast_reconnect) {
    if (TS.dnd.isLazy()) {
      if (!was_fast_reconnect) {
        _purgeNonRelevantData();
        var member_ids = TS.presence_manager.getSubList();
        if (!_.includes(member_ids, TS.model.user.id)) member_ids.push(TS.model.user.id);
        var force = true;
        _ensureDndTimesForMemberIds(member_ids, force);
      }
      TS.dnd.checkForChanges();
    } else {
      if (!was_fast_reconnect) {
        var first_boot = true;
        setTimeout(function() {
          TS.dnd.fetchFullTeam(first_boot);
        }, _.random(100, 1e4));
      }
      TS.dnd.checkForChanges();
    }
  };
  var _onDisconnected = function() {
    clearTimeout(_next_event_timer);
  };
  var _memberJoinedTeam = function(member) {
    if (TS.dnd.isLazy()) return;
    TS.dnd.refreshMember(member);
  };
  var _memberDeletedChanged = function(member) {
    if (TS.dnd.isLazy()) return;
    if (!member.deleted) TS.dnd.refreshMember(member);
  };
  var _presenceManagerSubListChanged = function() {
    if (!TS.dnd.isLazy()) return;
    _ensureDndTimesForMemberIds(TS.presence_manager.getSubList());
  };
  var _ensureDndTimesForMemberIds = function(member_ids, force) {
    if (!member_ids || !member_ids.length) return Promise.resolve();
    var members = _.map(member_ids, TS.members.getMemberById);
    members = _.filter(members, function(m) {
      return m && !m.is_bot && !m.deleted;
    });
    if (!force) {
      members = _.filter(members, function(m) {
        return !_requested_member_ids[m.id] && !TS.model.dnd.team[m.id];
      });
    }
    if (!members.length) return Promise.resolve();
    member_ids = _.map(members, "id");
    var member_map = _.groupBy(member_ids);
    _.forEach(member_ids, function(id) {
      _requested_member_ids[id] = true;
    });
    _log("_ensureDndTimesForMemberIds requesting " + member_ids.length);
    if (_record_metrics) TS.metrics.count("dnd_lookup_lazy", member_ids.length);
    return TS.api.call("dnd.teamInfo", {
      users: member_ids.join(",")
    }).then(function(resp) {
      var data = resp.data;
      if (data.users) {
        _.forOwn(data.users, function(props, user_id) {
          if (member_map[user_id]) _updateUserDndProps(user_id, props);
        });
        TS.dnd.checkForChanges();
      }
      var missing_members = 0;
      _.forEach(member_ids, function(id) {
        if (!TS.model.dnd.team[id]) {
          _log("dnd lookup failed for " + id);
          missing_members += 1;
        }
      });
      if (missing_members) TS.metrics.count("dnd_lookup_failed", missing_members);
    }).catch(function() {
      TS.metrics.count("dnd_lookup_request_failed");
    }).finally(function() {
      _.forEach(member_ids, function(id) {
        delete _requested_member_ids[id];
      });
    });
  };
  var _purgeNonRelevantData = function() {
    var relevant_members = _.groupBy(TS.presence_manager.getSubList());
    var to_remove = [];
    _.forOwn(TS.model.dnd.team, function(props, uid) {
      if (relevant_members[uid]) return;
      if (uid === TS.model.user.id) return;
      to_remove.push(uid);
      _updateDndForMember(uid, false);
    });
    var members = _.map(to_remove, TS.members.getMemberById);
    members = _.compact(members);
    _dispatchStatusesChangedSig(members);
    _.forEach(to_remove, function(uid) {
      delete TS.model.dnd.team[uid];
    });
    _log("_purgeNonRelevantData dropped " + to_remove.length);
  };
  var _calcNextCheckTime = function(now) {
    var next_ts;
    if (!now) now = _now();
    var next_self = _nextTime(TS.model.user, now);
    if (next_self) next_ts = next_self;
    TS.model.members.forEach(function(next_member) {
      if (next_member.id == TS.model.user.id) return;
      var next_member_time = _nextTime(next_member, now);
      if (!next_member_time) return;
      if (!next_ts || next_member_time < next_ts) next_ts = next_member_time;
    });
    var max_delay = _MAX_TIMER_DELAY + now;
    if (!next_ts || next_ts > max_delay) next_ts = max_delay;
    var min_delay = _MIN_TIMER_DELAY + now;
    if (next_ts < min_delay) next_ts = min_delay;
    return next_ts;
  };
  var _updateUserDndProps = function(user_id, props, team_props) {
    if (!team_props) team_props = TS.model.dnd.team;
    if (user_id === TS.model.user.id) {
      if (props.dnd_enabled) {
        TS.model.dnd.next_dnd_start_ts = props.next_dnd_start_ts;
        TS.model.dnd.next_dnd_end_ts = props.next_dnd_end_ts;
      } else {
        TS.model.dnd.next_dnd_start_ts = null;
        TS.model.dnd.next_dnd_end_ts = null;
      }
      if ("snooze_enabled" in props) TS.model.dnd.snooze_enabled = props.snooze_enabled;
      if ("snooze_endtime" in props) TS.model.dnd.snooze_endtime = props.snooze_endtime;
    }
    if (props.dnd_enabled) {
      team_props[user_id] = {
        next_dnd_start_ts: props.next_dnd_start_ts,
        next_dnd_end_ts: props.next_dnd_end_ts
      };
    } else {
      team_props[user_id] = {
        next_dnd_start_ts: null,
        next_dnd_end_ts: null
      };
    }
  };
  var _team_fetch_in_progress = false;
  var _fetchTeamInfo = function(first_boot) {
    if (TS.dnd.isLazy()) {
      TS.error("lazy dnd: should never call _fetchTeamInfo");
      return;
    }
    if (_team_fetch_in_progress) return;
    _team_fetch_in_progress = true;
    return TS.api.call("dnd.teamInfo", {}, function(ok, data) {
      _team_fetch_in_progress = false;
      if (!ok) {
        if (first_boot) _team_info_first_boot_fail_time = _now();
        TS.warn("dnd.teamInfo failed");
        return;
      }
      _team_info_first_boot_fail_time = null;
      var team_data = {};
      if (data.users) {
        _.forOwn(data.users, function(props, user_id) {
          _updateUserDndProps(user_id, props, team_data);
        });
        TS.model.dnd.team = team_data;
      }
    }, true);
  };
  var _team_multi_fetch_in_progress = false;
  var _fetchUsersInfo = function(members) {
    if (_team_multi_fetch_in_progress) return;
    _team_multi_fetch_in_progress = true;
    if (_record_metrics) {
      var lookup_label = TS.dnd.isLazy() ? "dnd_lookup_lazy" : "dnd_lookup";
      TS.metrics.count(lookup_label, members.length);
    }
    var member_ids = _.map(members, "id").join(",");
    return TS.api.call("dnd.teamInfo", {
      users: member_ids
    }, function(ok, data) {
      _team_multi_fetch_in_progress = false;
      if (!ok) {
        TS.warn("dnd.teamInfo failed for a multi-user request");
        return;
      }
      if (data.users) {
        _.forOwn(data.users, function(props, user_id) {
          _updateUserDndProps(user_id, props);
        });
      }
    }, true);
  };
  var _pending_single_user_updates = [];
  var _fetchUserInfo = function(member) {
    if (_pending_single_user_updates.indexOf(member.id) !== -1) return;
    _pending_single_user_updates.push(member.id);
    if (_pending_single_user_updates.length > 1) return;
    return new Promise(function(resolve, reject) {
      setTimeout(function() {
        var member_ids = _pending_single_user_updates;
        _pending_single_user_updates = [];
        var api_method = "dnd.info";
        var api_args = {
          user: member_ids[0]
        };
        if (member_ids.length > 1) {
          api_method = "dnd.teamInfo";
          api_args = member_ids.length > _INDIVIDUAL_UPDATE_LIMIT ? {} : {
            users: member_ids.join(",")
          };
        }
        if (_record_metrics) {
          var lookup_label = TS.dnd.isLazy() ? "dnd_lookup_lazy" : "dnd_lookup";
          TS.metrics.count(lookup_label, member_ids.length);
        }
        TS.api.call(api_method, api_args, function(ok, data) {
          if (!ok) {
            if (member_ids.length > 1) {
              TS.warn("dnd.teamInfo failed for a multi-user request (bundled single-user fetches)");
            } else {
              TS.warn("dnd.info failed for " + member_ids[0]);
              reject(new Error("dnd.info failed for " + member_ids[0]));
            }
            return;
          }
          if (data.users) {
            _.forOwn(data.users, function(props, user_id) {
              _updateUserDndProps(user_id, props);
            });
          } else {
            _updateUserDndProps(member_ids[0], data);
          }
          resolve();
        }, true);
      }, _single_user_info_delay * 1e3);
    });
  };
  var _startTime = function(member) {
    if (member.is_self) return TS.model.dnd.next_dnd_start_ts;
    var times = TS.model.dnd.team[member.id];
    if (!times) return null;
    return times.next_dnd_start_ts;
  };
  var _endTime = function(member) {
    if (member.is_self) {
      if (TS.model.dnd.snooze_enabled) return TS.model.dnd.snooze_endtime;
      return TS.model.dnd.next_dnd_end_ts;
    }
    var times = TS.model.dnd.team[member.id];
    if (!times) return null;
    return times.next_dnd_end_ts;
  };
  var _nextTime = function(member, now) {
    if (!now) now = _now();
    var start = _startTime(member);
    var end = _endTime(member);
    if (start && end) {
      if (start > now && start < end) return start;
    }
    if (end) {
      if (end > now) return end;
      var delayed_fetch = end + _team_info_delay;
      if (delayed_fetch >= now) return delayed_fetch;
    }
    return null;
  };
  var _now = function() {
    return Math.floor(Date.now() / 1e3);
  };
  var _snoozeReadableCountdown = function(end_time_ts) {
    var remaining = end_time_ts - _now();
    if (remaining < 0) {
      return TS.i18n.t("0s", "dnd")();
    }
    var hours;
    var minutes;
    hours = remaining / 3600;
    if (hours >= 1) {
      hours = Math.floor(hours);
      minutes = (remaining - hours * 3600) / 60;
      minutes = Math.round(minutes);
      if (minutes === 60) {
        hours += 1;
        return TS.i18n.t("{dnd_hours}h", "dnd")({
          dnd_hours: hours
        });
      }
      if (minutes === 0) {
        return TS.i18n.t("{dnd_hours}h", "dnd")({
          dnd_hours: hours
        });
      }
      return TS.i18n.t("{dnd_hours}h {dnd_minutes}m", "dnd")({
        dnd_hours: hours,
        dnd_minutes: minutes
      });
    }
    minutes = remaining / 60;
    if (minutes >= 1) {
      minutes = Math.round(minutes);
      if (minutes === 60) {
        return TS.i18n.t("1h", "dnd")();
      }
      return TS.i18n.t("{dnd_minutes}m", "dnd")({
        dnd_minutes: minutes
      });
    }
    return TS.i18n.t("{dnd_remaining}s", "dnd")({
      dnd_remaining: remaining
    });
  };
  var _memberHasStaleTimes = function(member, now) {
    if (!now) now = _now();
    var end = _endTime(member);
    if (!end || end > now) return false;
    var delta = now - end;
    if (_timeWasProbablyASnooze(end)) {
      return true;
    }
    return delta >= _team_info_delay;
  };
  var _timeWasProbablyASnooze = function(end_ts) {
    var d = new Date(end_ts * 1e3);
    var seconds = d.getSeconds();
    var minutes = d.getMinutes();
    var probably_scheduled = seconds === 0 && (minutes === 0 || minutes === 30);
    return !probably_scheduled;
  };
  var _log = function(s) {
    TS.log(2002, s);
  };
  var _readableTs = function(ts, include_date) {
    if (!ts) return "<null>";
    var d = new Date(ts * 1e3);
    if (include_date) return d.toTimeString() + " (" + d.toDateString() + ")";
    return d.toTimeString();
  };
  var _maybeSetDndStatusForNewMemberAndSignal = function(member) {
    if (TS.dnd.isLazy()) return;
    if (_.isEmpty(TS.model.dnd.team) || _team_fetch_in_progress) {
      return;
    }
    var times = TS.model.dnd.team[member.id];
    if (!times) return;
    var should_have_dnd_enabled = !!times.next_dnd_start_ts;
    if (!should_have_dnd_enabled) {
      return;
    }
    var props = {
      dnd_enabled: true,
      next_dnd_start_ts: times.next_dnd_start_ts,
      next_dnd_end_ts: times.next_dnd_end_ts
    };
    _updateUserDndProps(member.id, props);
    TS.dnd.debouncedCheckForChanges();
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.inline_saver", {
    show: function(settings) {
      settings = settings || {};
      var $el = $(settings.target);
      if (!$el.length) {
        TS.warn("TS.ui.inline_saver called without a valid target.");
        return;
      }
      var $existing_saver = $el.data("inline-saver");
      if ($existing_saver && $existing_saver.length) {
        $existing_saver.remove();
        clearTimeout($el.data("inline-saver-spin-timeout"));
      }
      var $inline_saver = $(TS.templates.inline_saver({
        custom_text: settings.custom_text,
        hide_text: settings.hide_text
      }));
      $inline_saver.insertAfter($el);
      $el.data("inline-saver", $inline_saver);
      if (settings.promise) {
        settings.promise.then(function() {
          _hideSaver(settings);
        }).catch(function() {
          _hideSaver(settings, true);
        });
      } else {
        var timeout = setTimeout(function() {
          _hideSaver(settings);
        }, _SPIN_DURATION);
        $el.data("inline-saver-spin-timeout", timeout);
      }
    }
  });
  var _SPIN_DURATION = 500;
  var _FADE_DURATION = 2e3;
  var _FAIL_FADE_DURATION = 3e3;
  var _hideSaver = function(settings, failed) {
    settings = settings || {};
    var $el = $(settings.target);
    clearTimeout($el.data("inline-saver-hide-timeout"));
    var $existing_saver = $el.data("inline-saver");
    if (!$existing_saver || !$existing_saver.length) {
      return;
    }
    var next_class = failed ? "failed" : "saved";
    $existing_saver.removeClass("saving").addClass(next_class);
    var fade_duration = failed ? _FAIL_FADE_DURATION : _FADE_DURATION;
    var timeout = setTimeout(function() {
      $existing_saver.remove();
    }, fade_duration);
    $el.data("inline-saver-hide-timeout", timeout);
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.messages", {
    onStart: function() {
      var $body = $("body");
      $body.on("click.msg_action", "ts-message", function(e) {
        if (TS.client && TS.client.ui.checkForEditing(e)) return;
        _msgActionHandler(e);
      });
      $body.delegate("ts-message.dirty_hover_container", "mouseenter", function(e) {
        TS.ui.messages.updateMessageHoverContainer($(e.currentTarget));
      });
    },
    maybeUpdateMessageHoverContainer: function($msg) {
      if (!$msg.length) return;
      if ($msg.is(":visible")) {
        TS.ui.messages.updateMessageHoverContainer($msg);
      } else {
        $msg.addClass("dirty_hover_container");
      }
    },
    updateMessageHoverContainer: function($msg) {
      $msg.removeClass("dirty_hover_container");
      var model_ob_id = $msg.data("model-ob-id");
      var model_ob = model_ob_id ? TS.shared.getModelObById(model_ob_id) : TS.shared.getActiveModelOb();
      if (!model_ob) return;
      var msg_ts = $msg.attr("data-ts");
      var msg = TS.utility.msgs.getMsg(msg_ts, model_ob.msgs);
      if (!msg && model_ob._archive_msgs) msg = TS.utility.msgs.getMsg(msg_ts, model_ob._archive_msgs);
      if (!msg && TS.model.unread_view_is_showing) msg = TS.client.unread.getMessage(model_ob, msg_ts);
      if (!msg) msg = TS.ui.replies.getActiveMessage(model_ob, msg_ts);
      if (!msg) msg = TS.client.threads.getMessage(model_ob, msg_ts);
      if (!msg) {
        TS.error(msg_ts + " not found in " + model_ob_id);
        return;
      }
      var rxn_key = TS.rxns.getRxnKeyByMsgType(msg);
      var $ahc = $msg.find("[data-js=action_hover_container]");
      var handy_rxns_dd = TS.boot_data.feature_thanks && TS.rxns.getHandyRxnsDisplayDataByRxnKey(rxn_key);
      var show_unnadded_handy_rxns = !handy_rxns_dd.is_poll && (_always_show_unnadded_handy_rxns || $msg.hasClass("just_added_handy_rxn_from_actions"));
      var handy_rxns_to_show;
      if (handy_rxns_dd) {
        if (show_unnadded_handy_rxns) {
          var rxns = TS.rxns.getExistingRxnsByKey(rxn_key);
          handy_rxns_to_show = _.cloneDeep(handy_rxns_dd);
          for (var k in handy_rxns_to_show.items) {
            if (!TS.rxns.doesRxnsHaveSkinlessRxn(rxns, k)) continue;
            delete handy_rxns_to_show.items[k];
          }
          if ($msg.hasClass("just_added_handy_rxn_from_actions")) {
            $msg.bind("mouseout.handy_rxns", function() {
              if (!_always_show_unnadded_handy_rxns) $msg.addClass("dirty_hover_container");
              $msg.removeClass("just_added_handy_rxn_from_actions");
              $msg.unbind("mouseout.handy_rxns");
            });
          }
        } else if (!TS.rxns.getExistingRxnsByKey(rxn_key) && !handy_rxns_dd.is_poll) {
          handy_rxns_to_show = handy_rxns_dd;
        }
      }
      var is_in_conversation = $msg.closest("ts-conversation").length > 0;
      var is_in_threads_view = $msg.closest("#threads_msgs").length > 0;
      var is_in_thread = is_in_conversation || is_in_threads_view;
      var is_root_msg = !msg.thread_ts || msg.thread_ts === msg.ts;
      var hide_actions_menu = msg.subtype === "tombstone" && model_ob.is_channel && !model_ob.is_member;
      $ahc.html(TS.templates.action_hover_items({
        msg: msg,
        actions: TS.utility.msgs.getMsgActions(msg, model_ob),
        ts_tip_delay_class: "ts_tip_delay_60",
        handy_rxns: handy_rxns_to_show,
        is_in_threads_view: is_in_threads_view,
        is_in_thread: is_in_thread,
        is_root_msg: is_root_msg,
        hide_actions_menu: hide_actions_menu,
        show_rxn_action: !!$ahc.data("show_rxn_action") && (!handy_rxns_dd || !handy_rxns_dd.restrict),
        show_reply_action: !!$ahc.data("show_reply_action"),
        show_comment_action: !!$ahc.data("show_comment_action"),
        abs_permalink: $ahc.data("abs_permalink")
      }));
      $ahc.toggleClass("narrow_buttons", $ahc.children().length > 3);
    }
  });
  var _always_show_unnadded_handy_rxns = false;
  var _msgActionHandler = function(e) {
    if (TS.isPartiallyBooted()) {
      TS.incremental_boot.userDidInteractWithUI();
      e.preventDefault();
      return;
    }
    var $el = $(e.target);
    var $action_el = $el.closest("[data-action]");
    if ($action_el.length) {
      var $msg_el = $el.closest("ts-message");
      var model_ob_id = $msg_el.data("model-ob-id");
      var model_ob = model_ob_id ? TS.shared.getModelObById(model_ob_id) : TS.shared.getActiveModelOb();
      var msg_ts = $msg_el.attr("data-ts");
      var msg = TS.utility.msgs.getMsg(msg_ts, model_ob.msgs);
      var action = $action_el.data("action");
      var in_archives = false;
      if (!msg) {
        msg = TS.utility.msgs.getMsg(msg_ts, model_ob._archive_msgs);
        if (msg) in_archives = true;
      }
      if (!msg) {
        msg = TS.ui.replies.getActiveMessage(model_ob, msg_ts);
      }
      if (!msg && TS.model.threads_view_is_showing) {
        msg = TS.client.threads.getMessage(model_ob, msg_ts);
      }
      if (!msg && TS.model.unread_view_is_showing) {
        msg = TS.client.unread.getMessage({
          id: model_ob_id
        }, msg_ts);
        if (msg) {
          model_ob = TS.client.unread.getGroup(model_ob_id).model_ob;
        }
      }
      if (!msg) {
        TS.error("WTF no message to click?");
        return;
      }
      var rxn_key = TS.rxns.getRxnKeyByMsgType(msg);
      var thread_ts;
      switch (action) {
        case "actions_menu":
          if (in_archives) {
            TS.menu.startWithMessageActions(e, $msg_el.data("ts"), model_ob._archive_msgs, model_ob);
          } else {
            TS.menu.startWithMessageActions(e, $msg_el.data("ts"), model_ob.msgs, model_ob);
          }
          break;
        case "reaction":
          if (TS.model.unread_view_is_showing && TS.client.unread.shouldRecordMetrics()) {
            TS.metrics.count("unread_view_emoji_reaction");
          }
          TS.ui.react_emoji_menu.start({
            e: e,
            rxn_key: rxn_key
          });
          break;
        case "pin":
          TS.pins.startPinMessage(msg_ts, model_ob);
          break;
        case "unpin":
          TS.pins.unPinMessage(msg_ts, model_ob);
          break;
        case "edit":
          TS.msg_edit.startEdit(msg_ts, model_ob);
          break;
        case "delete":
          TS.msg_edit.startDelete(msg_ts, model_ob);
          break;
        case "mark_unread":
          TS.info("_msgActionHandler: setting unread point on " + model_ob.id + ", ts = " + msg_ts + " (mark_unread)");
          TS.client.msg_pane.setUnreadPoint(msg_ts);
          break;
        case "reply":
          if ($msg_el.length) {
            if (TS.model.unread_view_is_showing && TS.client.unread.shouldRecordMetrics()) {
              TS.metrics.count("unread_view_reply");
            }
            thread_ts = msg.thread_ts || msg.ts;
            if (TS.boot_data.feature_message_replies_inline) {
              TS.ui.thread.startInlineThread(model_ob, msg, $msg_el);
            } else {
              TS.ui.utility.preventElementFromScrolling($msg_el, function() {
                TS.ui.replies.openConversation(model_ob, thread_ts);
              });
            }
          }
          break;
        case "open_in_channel":
          if (TS.web) {
            var permalink = TS.utility.msgs.constructMsgPermalink(model_ob, msg_ts);
            window.location = permalink;
          } else if (TS.client) {
            if (TS.model.threads_view_is_showing) TS.client.ui.threads.trackThreadsViewClosed("OPEN_IN_CHANNEL");
            thread_ts = msg.thread_ts || msg.ts;
            TS.client.ui.tryToJump(model_ob.id, thread_ts);
          }
          break;
        case "open_conversation":
          break;
        case "copy_link":
          var floater_title = TS.i18n.t("Copied!", "messages_action_items")();
          TS.tips.updateFloater({
            title: floater_title,
            classes_to_add: ["success"]
          });
          TS.clipboard.writeText($action_el.data("permalink"));
          break;
        case "comment":
          if (TS.client) {
            e.preventDefault();
            TS.client.ui.files.previewFile(msg.file.id, "", false, true);
          }
          break;
        case "share_message":
          if (TS.model.unread_view_is_showing && TS.client.unread.shouldRecordMetrics()) {
            TS.metrics.count("unread_view_share_message");
          }
          TS.ui.share_message_dialog.start(msg.ts, model_ob);
          break;
        case "add_handy_rxn":
          var name = $action_el.data("name");
          var adding = !TS.rxns.doesRxnsHaveRxnFromUser(TS.rxns.getExistingRxnsByKey(rxn_key), name);
          if (adding) $msg_el.addClass("just_added_handy_rxn_from_actions");
          TS.rxns.changeRxnsFromUserAction(rxn_key, name, adding);
          break;
        case "share_file":
          var file = msg.file;
          if (!file) return;
          if (TS.client) {
            TS.view.files.shareInCurrentChannelOrIM(file.id, model_ob_id);
          } else {
            TS.ui.share_dialog.start(file.id);
          }
          break;
        case "positive_feedback":
        case "negative_feedback":
        case "dismiss":
          if (TS.client && TS.boot_data.feature_sli_briefing && TS.highlights_briefing) {
            TS.highlights_briefing.sendFeedback(e, action, msg_ts, model_ob_id);
          }
          break;
        default:
          TS.error("WTF no action?");
          break;
      }
    }
  };
})();
(function() {
  "use strict";
  TS.registerModule("click", {
    onStart: function() {
      _setupBinding();
      _addAll();
    },
    addHandler: function(selector, fn, prevent_on_drag) {
      if (_.isFunction(selector)) {
        prevent_on_drag = fn;
        fn = selector;
        selector = null;
      }
      _handlers.push({
        selector: selector,
        fn: fn,
        prevent_on_drag: prevent_on_drag || false
      });
    },
    addClientHandler: function() {
      if (!TS.client) return;
      return TS.click.addHandler.apply(this, arguments);
    },
    addWebHandler: function() {
      if (!TS.web) return;
      return TS.click.addHandler.apply(this, arguments);
    },
    test: function() {
      return {
        addAll: _addAll,
        setupBinding: _setupBinding,
        handlers: function() {
          return _handlers;
        },
        resetHandlers: function() {
          _handlers = [];
        },
        unbind: function() {
          $("body").off("click.ts_dot_click");
          $("body").off("mousedown.ts_dot_click_mousedown");
        }
      };
    }
  });
  var _handlers = [];
  var _addAll = function() {
    TS.click.addClientHandler("#archive_msg_lim_btn, #msg_lim_header_link, #msg_lim_header_btn", function(e, $el) {
      TS.clog.track("GROWTH_PRICING", {
        contexts: {
          ui_context: {
            step: "history",
            action: "click",
            ui_element: $el.data("data-clog-ui-element")
          }
        }
      });
    });
    TS.click.addClientHandler(function(e) {
      if (TS.client.ui.checkForEditing(e)) e.preventDefault();
    });
    TS.click.addWebHandler("#msgs_div", function(e) {
      if (!TS.utility.isSpaceClickEventSafe(e)) e.preventDefault();
    });
    TS.click.addClientHandler("#msgs_div .message[data-ts]", function(e) {
      var $el = $(e.target);
      var msg_id = $el.closest(".message").data("ts");
      if (msg_id) msg_id = msg_id.toString();
      var model_ob = TS.shared.getActiveModelOb();
      if (!msg_id) return;
      if (e.altKey) {
        e.preventDefault();
        TS.info("setting unread point on " + model_ob.id + " due to alt+click on message with ts = " + msg_id);
        TS.client.msg_pane.setUnreadPoint(msg_id);
        return;
      }
      if (TS.utility.cmdKey(e) && e.shiftKey) {
        e.preventDefault();
        var msg = TS.utility.msgs.getMsg(msg_id, model_ob.msgs);
        TS.dir(0, msg);
        if (model_ob.is_im) {
          TS.ui.growls.growlImMessage(model_ob, msg, false, true);
        } else {
          TS.ui.growls.growlchannelOrGroupMessage(model_ob, msg, false, true);
        }
      }
    });
    TS.click.addClientHandler("ts-message .resend_temp_msg, ts-message .remove_temp_msg", function(e, $el) {
      var $msg = $el.closest("ts-message");
      var ts = $msg.attr("data-ts");
      if (!ts) return;
      var model_ob_id = $msg.attr("data-model-ob-id");
      var model_ob = TS.shared.getModelObById(model_ob_id);
      if (!model_ob) return;
      e.preventDefault();
      var resend = $el.hasClass("resend_temp_msg");
      TS.utility.msgs.handleFailedMsgSend(ts, model_ob, resend);
    });
    TS.click.addClientHandler(".top_results_search_message_result", function(e, $el, origin) {
      var $target = $(e.target);
      var $search_result = $target.closest(".search_message_result");
      var module_name = $search_result.data("module-name") || "";
      var module_order = $search_result.data("module-order") || 0;
      var $ts_message = $target.closest("ts-message");
      var message_iid = $ts_message.data("iid") || "";
      if ($target.attr("href")) return;
      if ($target.parents(".rxn").length) return;
      var href_found = false;
      $target.parentsUntil(".top_results_search_message_result").each(function() {
        if ($(this).attr("href")) {
          href_found = true;
        }
      });
      if (href_found) {
        return;
      }
      var match_with_index = TS.search.view.getMatchForSearchResult($el);
      if (!match_with_index) return;
      var match = match_with_index.match;
      e.preventDefault();
      if (TS.boot_data.page_needs_enterprise) {
        if (match.team && TS.model.team.id != match.team && !match.channel.is_shared && match.permalink) {
          TS.utility.openInNewTab(match.permalink, "_blank");
        }
      }
      var c_id = match.channel && match.channel.id ? match.channel.id : match.channel;
      var model_ob = TS.shared.getModelObById(c_id);
      var thread_ts = match.thread_ts;
      if (thread_ts && thread_ts != match.ts) {
        TS.ui.replies.openConversation(model_ob, thread_ts, match.ts, origin);
        return;
      }
      var payload = {
        click_target_type: "top_results_jump_body",
        click_position: match_with_index.index,
        click_user_id: match.user,
        click_channel_id: match.channel.id,
        click_timestamp: match.ts,
        click_module_name: module_name,
        click_module_position: module_order,
        click_sort: TS.search.sort
      };
      if (TS.search.last_request_id) {
        payload.request_id = TS.search.last_request_id;
      }
      if (message_iid) {
        payload.click_iid = message_iid;
      }
      TS.clog.track("SEARCH_CLICK", payload);
      TS.client.ui.tryToJump(c_id, match.ts);
    });
    TS.click.addClientHandler(".search_message_result a, .search_message_result button", function(e, $el) {
      var $target = $(e.target);
      var match_with_index = TS.search.view.getMatchForSearchResult($el);
      if (!match_with_index) return;
      var match = match_with_index.match;
      var target_type;
      var target_user_id;
      var target_ts;
      var $search_result = $target.closest(".search_message_result");
      var module_name = $search_result.data("module-name") || "";
      var module_order = $search_result.data("module-order") || 0;
      var result_iid = $search_result.data("iid") || "";
      var $ts_message = $target.closest("ts-message");
      var message_iid = $ts_message.data("iid") || result_iid;
      var $message;
      if ($target.hasClass("jump")) {
        target_type = "top_results_jump";
      } else if ($target.hasClass("search_jump")) {
        target_type = "jump";
      } else if ($target.hasClass("archive")) {
        target_type = "archive";
      } else if ($target.is(".channel_link, .internal_im_link, .mpim_link, .group_link")) {
        target_type = "channel";
      } else if ($target.hasClass("message_sender")) {
        target_type = "sender";
        $message = $target.closest("ts-message");
        target_user_id = $message.data("memberId");
        target_ts = $message.data("ts") + "";
      } else if ($target.hasClass("timestamp")) {
        target_type = "timestamp";
        $message = $target.closest("ts-message");
        target_user_id = $message.data("memberId");
        target_ts = $message.data("ts") + "";
      } else if ($target.hasClass("star")) {
        target_type = "star";
        $message = $target.closest("ts-message");
        target_user_id = $message.data("memberId");
        target_ts = $message.data("ts") + "";
      } else if ($target.attr("href") || $target.attr("onclick")) {
        target_type = "link";
      }
      if (target_type) {
        var payload = {
          click_target_type: target_type,
          click_position: match_with_index.index,
          click_user_id: match.user,
          click_channel_id: match.channel.id,
          click_timestamp: match.ts,
          click_target_user_id: target_user_id,
          click_target_timestamp: target_ts,
          click_module_name: module_name,
          click_module_position: module_order,
          click_sort: TS.search.sort
        };
        if (TS.search.last_request_id) {
          payload.request_id = TS.search.last_request_id;
        }
        if (message_iid) {
          payload.click_iid = message_iid;
        }
        TS.clog.track("SEARCH_CLICK", payload);
      }
    });
    TS.click.addClientHandler(".search_message_result .sli_feedback", function(e, $el) {
      e.preventDefault();
      var $target = $(e.target);
      var match_with_index = TS.search.view.getMatchForSearchResult($el);
      if (!match_with_index) return;
      var payload = {};
      var tip = "";
      var tooltip_text_map = {
        plus: TS.i18n.t('Search result is relevant<br><span class="subtle_silver">(query string will be logged!)</span>', "clicks")(),
        circle: TS.i18n.t('Search result is somewhat relevant<br><span class="subtle_silver">(query string will be logged!)</span>', "clicks")(),
        minus: TS.i18n.t('Search result is not relevant<br><span class="subtle_silver">(query string will be logged!)</span>', "clicks")()
      };
      if ($target.is(".selected")) {
        payload.undo = true;
        if ($target.is(".sli_feedback_plus")) {
          tip = tooltip_text_map.plus;
        } else if ($target.is(".sli_feedback_circle")) {
          tip = tooltip_text_map.circle;
        } else if ($target.is(".sli_feedback_minus")) {
          tip = tooltip_text_map.minus;
        }
      } else {
        tip = TS.i18n.t('oops!<br><span class="subtle_silver">remove my feedback</span>', "clicks")();
      }
      TS.tips.updateTipTitle($target, tip);
      $target.toggleClass("selected");
      $target.siblings(".sli_feedback").each(function() {
        $(this).removeClass("selected");
        var tip = "";
        if ($(this).is(".sli_feedback_plus")) {
          tip = tooltip_text_map.plus;
        } else if ($(this).is(".sli_feedback_circle")) {
          tip = tooltip_text_map.circle;
        } else if ($(this).is(".sli_feedback_minus")) {
          tip = tooltip_text_map.minus;
        }
        TS.tips.updateTipTitle($(this), tip);
      });
      if ($target.is(".sli_feedback_plus")) {
        payload.value = 5;
      } else if ($target.is(".sli_feedback_circle")) {
        payload.value = 1;
      } else if ($target.is(".sli_feedback_minus")) {
        payload.value = -5;
      }
      payload.channel_id = match_with_index.match.channel.id;
      payload.message_id = match_with_index.match.ts;
      payload.permalink = match_with_index.match.permalink;
      payload.query = TS.search.view.latest_msg_search_results.query;
      payload.search_sort = TS.search.sort;
      payload.search_exclude_bots = TS.model.prefs.search_exclude_bots;
      payload.search_only_current_team = TS.model.prefs.search_only_current_team;
      payload.search_exclude_channel = TS.model.prefs.search_exclude_channels;
      payload.search_only_my_channels = TS.model.prefs.search_only_my_channels;
      TS.api.call("search.feedback", payload);
    });
    TS.click.addClientHandler("ts-message .message_body a, ts-message .file_container a", function(e, $el) {
      var $message;
      var message_ts;
      var message_c_id;
      var member_id;
      var app_id;
      var bot_id;
      var url;
      var payload;
      var is_image;
      var file_id;
      var file;
      if (!TS.boot_data.feature_new_message_click_logging) {
        $message = $el.closest("ts-message");
        message_ts = $message.data("ts") + "";
        message_c_id = $message.data("model-ob-id");
        member_id = $message.data("member-id");
        app_id = $message.data("app-id");
        bot_id = $message.data("bot-id");
        var original_href = $el.data("referer-original-href");
        url = original_href || $el.attr("href");
        payload = {
          message_timestamp: message_ts,
          channel_id: message_c_id,
          channel_type: message_c_id ? message_c_id.charAt(0) : "",
          member_id: member_id,
          app_id: app_id,
          bot_id: bot_id,
          url: url || ""
        };
        if ($el.is(".channel_link, .internal_channel_link")) {
          var channel_id = $el.data("channel-id");
          payload.item_id = channel_id;
          payload.item_type = "C";
        } else if ($el.is("[data-file-id]")) {
          file_id = $el.data("file-id");
          payload.item_id = file_id;
          payload.item_type = "F";
        }
        if (TS.model.unread_view_is_showing) {
          _.merge(payload, TS.client.ui.unread.getTrackingData(message_ts));
          TS.client.ui.unread.incrementTrackingSeqId();
        }
        is_image = $el.closest(".msg_inline_img_holder").length > 0;
        file_id = $el.attr("data-file-id");
        if (!file_id) file_id = $el.closest("[data-file-id]").attr("data-file-id");
        file = file_id ? TS.files.getFileById(file_id) : null;
        if (_.get(file, "external_type") === "gdrive") {
          if (!payload.contexts) {
            payload.contexts = {};
          }
          if (!payload.contexts.platform) {
            payload.contexts.platform = {};
          }
          payload.contexts.platform.service_type = "GSUITE";
          payload.contexts.platform.app_id = 9;
          payload.contexts.platform.has_rich_preview = TS.files.fileHasRichPreview(file);
        }
        if (is_image || file && TS.files.fileIsImage(file)) {
          TS.clog.track("MSG_PHOTO_EXPAND", payload);
        }
        TS.clog.track("MSG_LINK_CLICKED", payload);
      } else {
        var $target = $(e.target);
        $message = $el.closest("ts-message");
        message_ts = $message.data("ts") + "";
        message_c_id = $message.data("model-ob-id");
        var message_ob = message_ts && message_c_id ? TS.utility.msgs.findMsg(message_ts, message_c_id) : null;
        member_id = $message.data("member-id");
        app_id = $message.data("app-id");
        bot_id = $message.data("bot-id");
        url = $el.data("referer-original-href") || $el.attr("href");
        payload = {
          message_timestamp: message_ts,
          channel_id: message_c_id,
          channel_type: message_c_id ? message_c_id.charAt(0) : "",
          member_id: member_id,
          app_id: app_id,
          bot_id: bot_id,
          url: url || ""
        };
        var is_raw = TS.utility.msgs.isRawLink($target, url);
        if (is_raw) payload.link_is_raw = true;
        var type = TS.utility.msgs.extractLinkType($el, $target, url);
        payload.link_type = type;
        var action = TS.utility.msgs.extractLinkAction($el, $target);
        if (action) payload.link_action = action;
        var item_id = TS.utility.msgs.extractLinkItemId($el, $target, type);
        if (item_id) {
          payload.item_id = item_id;
          payload.item_type = item_id.charAt(0);
        }
        var has_attachments = message_ob && message_ob.attachments;
        if (has_attachments) {
          var is_attachment_link = $el.closest(".attachment_group").length > 0;
          if (is_attachment_link) {
            payload.link_is_attachment = true;
            var field = TS.utility.msgs.extractLinkAttachmentField($el);
            if (field) payload.link_attachment_field = field;
          }
        }
        if (TS.model.unread_view_is_showing) {
          _.merge(payload, TS.client.ui.unread.getTrackingData(message_ts));
          TS.client.ui.unread.incrementTrackingSeqId();
        }
        is_image = $el.closest(".msg_inline_img_holder").length > 0;
        file_id = $el.attr("data-file-id");
        if (!file_id) file_id = $el.closest("[data-file-id]").attr("data-file-id");
        file = file_id ? TS.files.getFileById(file_id) : null;
        if (_.get(file, "external_type") === "gdrive") {
          if (!payload.contexts) {
            payload.contexts = {};
          }
          if (!payload.contexts.platform) {
            payload.contexts.platform = {};
          }
          payload.contexts.platform.service_type = "GSUITE";
          payload.contexts.platform.app_id = 9;
          payload.contexts.platform.has_rich_preview = TS.files.fileHasRichPreview(file);
        }
        if (is_image || file && TS.files.fileIsImage(file)) {
          TS.clog.track("MSG_PHOTO_EXPAND", payload);
        }
        TS.clog.track("MSG_LINK_CLICKED", payload);
      }
    });
    TS.click.addClientHandler("ts-message .msg_inline_video_buttons_div .msg_inline_video_play_button", function(e, $el) {
      var $message = $el.closest("ts-message");
      var message_ts = $message.data("ts") + "";
      var message_c_id = $message.data("model-ob-id");
      var member_id = $message.data("member-id");
      var app_id = $message.data("app-id");
      var bot_id = $message.data("bot-id");
      var open_new_window_link = $message.find(".msg_inline_video_new_window_button");
      var original_href = open_new_window_link.data("referer-original-href");
      var url = original_href || open_new_window_link.attr("href");
      var payload = {
        message_timestamp: message_ts,
        channel_id: message_c_id,
        channel_type: message_c_id ? message_c_id.charAt(0) : "",
        member_id: member_id,
        app_id: app_id,
        bot_id: bot_id,
        url: url || ""
      };
      TS.clog.track("MSG_VIDEO_PLAY", payload);
    });
    TS.click.addClientHandler(".member_preview_link, .member_preview_image", function(e, $el, preview_origin) {
      e.preventDefault();
      var parent_preview_scroller = $el.closest("#member_preview_scroller");
      var member_id = $el.data("member-id");
      if (member_id) {
        if (e.shiftKey) {
          e.preventDefault();
          var member = TS.members.getMemberById(member_id);
          TS.dir(0, member);
        }
        if (parent_preview_scroller.length && member_id == TS.model.previewed_member_id) {
          TS.menu.member.startWithMember(e, member_id);
        } else if (parent_preview_scroller.length) {
          TS.menu.member.startWithMember(e, member_id, true);
        } else if (preview_origin === "mentions" || preview_origin === "search_results" || preview_origin === "conversation" || preview_origin === "threads") {
          if (preview_origin === "search_results" && $el.closest('[data-expert-search-module-name="experts"]').length) {
            TS.sli_expert_search.handleExpertsClick(e, "experts", "user");
          }
          TS.menu.member.startWithMember(e, member_id);
        } else {
          var parent_msgs_div = $el.closest("#msgs_div, #archives_msgs_div, #unread_msgs_div");
          var is_in_all_members_dialog = $el.closest("#all_members_container").length > 0;
          if (TS.ui.share_dialog.showing) TS.ui.share_dialog.div.modal("hide");
          if (parent_msgs_div.length || is_in_all_members_dialog) {
            TS.menu.member.startWithMember(e, member_id);
          } else {
            TS.client.ui.previewMember(member_id, preview_origin || "team_list");
          }
        }
        var $message = $el.closest("ts-message");
        var message_ts = $message.data("ts") + "";
        var message_c_id = $message.data("model-ob-id");
        member_id = $message.data("member-id");
        var app_id = $message.data("app-id");
        var bot_id = $message.data("bot-id");
        var payload = {
          message_timestamp: message_ts,
          channel_id: message_c_id,
          channel_type: message_c_id ? message_c_id.charAt(0) : "",
          member_id: member_id,
          app_id: app_id,
          bot_id: bot_id
        };
        TS.clog.track("USERNAME_CLICK", payload);
      } else {
        TS.warn("hmmm, no data-member-id?");
      }
    });
    TS.click.addClientHandler(".app_profile a, .app_profile_slash_command", function(e, $el) {
      var $app_profile = $el.closest(".app_profile");
      TS.clog.track("USER_PROFILE_CLICK", {
        app_id: $app_profile.data("app_id"),
        bot_id: $app_profile.data("bot_id")
      });
    });
    TS.click.addClientHandler('.bot_message .message_body a[href*="admin/billing"]', function() {
      TS.clog.track("GROWTH_PRICING", {
        contexts: {
          ui_context: {
            step: "slackbot",
            action: "click",
            ui_element: "billing_link"
          }
        }
      });
    });
    TS.click.addClientHandler(".member_details a", function(e, $el) {
      if (!$el.hasClass("member_preview_menu_target")) {
        TS.clog.track("USER_PROFILE_CLICK");
      }
    });
    TS.click.addClientHandler(".member", function(e, $el) {
      e.preventDefault();
      var member_id = $el.data("member-id");
      if (member_id) {
        TS.menu.member.startWithMember(e, member_id);
      } else {
        TS.warn("hmmm, no data-member-id?");
      }
    });
    TS.click.addClientHandler(".theme_installer_btn", function(e, $el) {
      e.preventDefault();
      var custom_values = $el.data("theme");
      var remove_last_theme_selected = false;
      if (custom_values) {
        custom_values = custom_values.replace(/ /g, "");
        custom_values = custom_values.replace(/,$/g, "");
        var custom_arr = custom_values.split(",");
        custom_values = {
          column_bg: custom_arr[0],
          menu_bg: custom_arr[1],
          active_item: custom_arr[2],
          active_item_text: custom_arr[3],
          hover_item: custom_arr[4],
          text_color: custom_arr[5],
          active_presence: custom_arr[6],
          badge: custom_arr[7]
        };
        TS.prefs.last_theme_selected_in_UI = "custom_theme";
        TS.prefs.setMultiPrefsByAPI({
          sidebar_theme: TS.prefs.last_theme_selected_in_UI,
          sidebar_theme_custom_values: JSON.stringify(custom_values)
        });
        TS.model.prefs.sidebar_theme = TS.prefs.last_theme_selected_in_UI;
        TS.prefs.setSidebarThemeCustomValues(custom_values);
        TS.view.prefs.sidebarThemePrefChanged(remove_last_theme_selected);
      }
    });
    TS.click.addClientHandler(".internal_im_link", function(e, $el) {
      e.preventDefault();
      TS.ims.startImByMemberId($el.data("member-id"));
    });
    TS.click.addClientHandler(".group_link, .internal_group_link", function(e, $el) {
      e.preventDefault();
      TS.view.onGroupReferenceClick(e, $el.data("group-id"));
    });
    TS.click.addClientHandler(".internal_im_call_link", function(e, $el) {
      if (!TS.utility.calls.isEnabled()) return;
      e.preventDefault();
      TS.utility.calls.startCallInModelOb(TS.members.getMemberByName($el.data("member-name")));
    });
    TS.click.addClientHandler(".file_viewer_link", function(e, $el) {
      e.preventDefault();
      if ($el.hasClass("file_viewer_channel_link")) {
        TS.ui.fs_modal_file_viewer.start({
          modal_class: "fs_modal_file_viewer",
          $el: $el,
          current_file_id: $el.data("file-id"),
          show_control_btns: !$el.closest("#file_preview_container").length
        });
      }
    });
    TS.click.addClientHandler(".file_viewer_external_link", function(e, $el) {
      e.preventDefault();
      TS.ui.fs_modal_file_viewer.start({
        modal_class: "fs_modal_file_viewer",
        $el: $el,
        current_file_id: $el.data("file-id"),
        current_external_link: $el[0]
      });
    });
    TS.click.addHandler(".inline_attachment.clickable, .inline_attachment.clickable + .reply_broadcast_rule", function(e, $el) {
      var ignore_selectors = ["a", ".media_caret", ".delete_attachment_link", ".msg_inline_video_buttons_div"].join(",");
      if ($(e.target).closest(ignore_selectors).length) return;
      var $link;
      if ($el.is(".reply_broadcast") || $el.closest(".reply_broadcast_rule").length) {
        $link = $el.closest(".message_body").find('[data-action="open_conversation"]');
      } else {
        $link = $el.find(".attachment_from_url_link");
      }
      if ($link[0]) {
        $link[0].click();
      }
    }, true);
    TS.click.addClientHandler(".internal_file_list_filter", function(e, $el) {
      e.preventDefault();
      TS.client.ui.files.showFileList();
      TS.client.ui.files.toggleFileList($el.data("file-list-filter"));
    });
    TS.click.addClientHandler("[data-expert-search-module-name] .channel_link", function(e, $el) {
      var type = $el.parents("[data-expert-search-module-name]").data("expert-search-module-name");
      TS.sli_expert_search.handleExpertsClick(e, type, "channel");
    });
    TS.click.addClientHandler(".channel_link, .internal_channel_link", function(e, $el) {
      e.preventDefault();
      TS.view.onChannelReferenceClick(e, $el.data("channel-id"));
    });
    TS.click.addClientHandler(".internal_member_link:not(.plastic_contenteditable_element)", function(e, $el) {
      e.preventDefault();
      if ($el.data("member-id")) {
        TS.view.onMemberReferenceClick(e, $el.data("member-id"));
      } else if ($el.data("member-name")) {
        TS.view.onMemberReferenceClick(e, $el.data("member-name"));
      }
    });
    TS.click.addClientHandler(".internal_user_group_link", function(e, $el) {
      e.preventDefault();
      TS.view.onUserGroupReferenceClick(e, $el.data("user-group-id"));
    });
    TS.click.addClientHandler(".file_preview_link, .file_details_container .file_comment_btn, .back_from_file_comments", function(e, $el, preview_origin) {
      e.preventDefault();
      if (TS.ui.share_dialog.showing) TS.ui.share_dialog.div.modal("hide");
      var c_id = $el.closest("[data-model-ob-id]").attr("data-model-ob-id");
      var file_id = $el.attr("data-file-id");
      if (!file_id) file_id = $el.closest("[data-file-id]").attr("data-file-id");
      var file = TS.files.getFileById(file_id);
      if (file && file.is_deleted) {
        TS.generic_dialog.alert("<p>" + TS.i18n.t("This file has been deleted.", "clicks")() + "</p>");
        return;
      }
      if (preview_origin === "search_results" && TS.files.fileIsImage(file)) {
        TS.ui.fs_modal_file_viewer.start({
          modal_class: "fs_modal_file_viewer",
          $el: $el,
          current_file_id: file_id,
          show_control_btns: false
        });
        return;
      }
      var focus_comment_input = $el.hasClass("file_comment_link");
      var force_flexpane = $el.hasClass("file_force_flexpane");
      if (!force_flexpane) {
        var qs = focus_comment_input ? "?comments=1" : "";
        if (TS.client.windows.openFileWindow(file_id, qs)) return;
      }
      TS.client.ui.files.previewFile(file_id, preview_origin || "file_list", false, focus_comment_input, c_id);
    });
    TS.click.addClientHandler(".msg_actions", function(e, $el) {
      var msg_ts = $el.data("msg-ts");
      if ($el.is($el) || $el.closest(".msg_cog").length) {
        e.preventDefault();
        if (TS.model.archive_view_is_showing) {
          var current_model_ob = TS.client.archives.getCurrentModelOb() || {};
          TS.menu.startWithMessageActions(e, msg_ts, current_model_ob._archive_msgs);
        } else {
          TS.menu.startWithMessageActions(e, msg_ts, TS.shared.getActiveModelOb().msgs);
        }
      }
    });
    TS.click.addClientHandler(".comment_actions", function(e, $el) {
      var $cog = $(e.target);
      if ($cog.hasClass("comment_cog")) {
        e.preventDefault();
        TS.menu.startWithCommentActions(e, $el.data("file-id"), $el.data("comment-id"));
      }
    });
    TS.click.addHandler(".file_actions", function(e, $el) {
      e.preventDefault();
      TS.menu.file.startWithFileActions(e, $el.data("file-id"));
    });
    TS.click.addClientHandler(".file_ssb_download_link", function(e, $el) {
      var open_flexpane = !(TS.ui.fs_modal_file_viewer && TS.ui.fs_modal_file_viewer.is_showing);
      var file = TS.files.getFileById($el.data("file-id"));
      var payload = {
        is_successful: false
      };
      if (file) {
        payload.is_successful = true;
        var user = TS.members.getMemberById(file.user);
        if (user && user.is_bot) {
          var bot_id = user.profile.bot_id;
          var bot = TS.bots.getBotById(bot_id);
          payload.app_id = bot ? bot.app_id : "";
          payload.bot_id = bot_id;
        }
      }
      TS.clog.track("FILE_DOWNLOAD", payload);
      if (file && TS.client.downloads.startDownload(file, open_flexpane)) {
        e.preventDefault();
      }
    });
    TS.click.addClientHandler(".msg_jump, .star_jump", function(e, $el, origin) {
      e.preventDefault();
      var msg_id = $el.closest("[data-ts]").data("ts") + "";
      if (!msg_id) {
        TS.error("error no msg_id to jump to?");
        return;
      }
      var c_id = $el.data("cid");
      var model_ob = TS.shared.getModelObById(c_id);
      var thread_ts = $el.closest("[data-thread-ts]").attr("data-thread-ts");
      if (thread_ts && thread_ts != msg_id) {
        TS.ui.replies.openConversation(model_ob, thread_ts, msg_id, origin);
        return;
      }
      TS.client.ui.tryToJump(c_id, msg_id);
    });
    TS.click.addClientHandler(".search_message_result .search_jump", function(e, $el, origin) {
      var match_with_index = TS.search.view.getMatchForSearchResult($el);
      if (!match_with_index) return;
      var match = match_with_index.match;
      e.preventDefault();
      var first_with_extracts = TS.search.view.firstResultWithExtracts(match);
      var c_id = match.channel && match.channel.id ? match.channel.id : match.channel;
      var model_ob = TS.shared.getModelObById(c_id);
      var thread_ts = first_with_extracts.thread_ts;
      if (thread_ts && thread_ts != first_with_extracts.ts) {
        TS.ui.replies.openConversation(model_ob, thread_ts, first_with_extracts.ts, origin);
        return;
      }
      TS.client.ui.tryToJump(c_id, first_with_extracts.ts);
    });
    TS.click.addWebHandler("#msgs_div.selecting_messages ts-message", function(e) {
      var $target = $(e.target);
      if ($target.attr("href") || $target.hasClass("star")) return;
      var $message = $target.closest("ts-message");
      var $checkbox = $message.find(".msg_select_cb");
      if (!$target.is("input")) {
        $checkbox.prop("checked", !$checkbox.prop("checked"));
      }
      TS.msg_edit.batchDeleteSelectionChanged($checkbox, e.shiftKey);
    });
    TS.click.addHandler(TS.rxns.checkForRxnClick);
    TS.click.addHandler(TS.stars.checkForStarClick);
    TS.click.addHandler(function(e) {
      var search_match = TS.client && TS.search.view.getMatchForSearchResult($(e.target));
      TS.inline_imgs.checkForInlineImgClick(e, search_match && search_match.match);
      if (search_match && TS.client) TS.ui.utility.updateClosestMonkeyScroller($(e.target));
    });
    TS.click.addHandler(function(e) {
      var search_match = TS.client && TS.search.view.getMatchForSearchResult($(e.target));
      TS.inline_videos.checkForInlineVideoClick(e, search_match && search_match.match);
      if (search_match && TS.client) TS.ui.utility.updateClosestMonkeyScroller($(e.target));
    });
    TS.click.addHandler(function(e) {
      var search_match = TS.client && TS.search.view.getMatchForSearchResult($(e.target));
      TS.inline_audios.checkForInlineAudioClick(e, search_match && search_match.match);
      if (search_match && TS.client) TS.ui.utility.updateClosestMonkeyScroller($(e.target));
    });
    TS.click.addHandler(function(e) {
      var search_match = TS.client && TS.search.view.getMatchForSearchResult($(e.target));
      TS.inline_others.checkForInlineOtherClick(e, search_match && search_match.match);
      if (search_match && TS.client) TS.ui.utility.updateClosestMonkeyScroller($(e.target));
    });
    TS.click.addHandler(function(e) {
      var search_match = TS.client && TS.search.view.getMatchForSearchResult($(e.target));
      TS.inline_attachments.checkForInlineAttachmentClick(e, search_match && search_match.match);
      if (search_match && TS.client) TS.ui.utility.updateClosestMonkeyScroller($(e.target));
    });
    TS.click.addHandler(TS.inline_file_previews.checkForInlineFilePreviewClick);
    TS.click.addHandler(TS.inline_room_previews.checkForInlineRoomPreviewClick);
    TS.click.addClientHandler(".file_list_item", function(e, $el, preview_origin) {
      var can_click_through;
      var $target = $(e.target);
      var file_id = $el.data("file-id");
      var index = $el.parent().children().index($el);
      var payload = {
        click_target_type: "file",
        click_position: index,
        click_file_id: file_id,
        click_module_name: "files",
        click_module_position: 0,
        click_sort: TS.search.getSort("search.files"),
        request_id: TS.search.last_files_request_id
      };
      TS.clog.track("SEARCH_CLICK", payload);
      can_click_through = !TS.menu.file.file_list_menu_up && !$target.is(".star") && (!$target.closest("a").length && !$target.closest("button").length);
      if (can_click_through) {
        e.preventDefault();
        if (TS.files.fileIsImage(file_id)) {
          TS.ui.fs_modal_file_viewer.start({
            modal_class: "fs_modal_file_viewer",
            $el: $el,
            current_file_id: file_id,
            show_control_btns: false
          });
          return;
        }
        if (TS.ui.share_dialog.showing) TS.ui.share_dialog.div.modal("hide");
        TS.client.ui.files.previewFile($el.data("file-id"), preview_origin || "file_list", false);
      }
    });
    TS.click.addClientHandler("a.file_share, button.file_share", function(e, $el) {
      e.preventDefault();
      TS.view.files.shareInCurrentChannelOrIM($el.data("file-id"));
    });
    TS.click.addClientHandler(".snippet_edit_dialog_link", function(e, $el) {
      var file = TS.files.getFileById($el.data("file-id"));
      if (!file.is_truncated) {
        e.preventDefault();
        TS.ui.snippet_dialog.startEdit(file.id);
      }
    });
    TS.click.addClientHandler(".file_new_window_link", function(e, $el) {
      if (TS.client.windows.openFileWindow($el.data("file-id"), "")) {
        e.preventDefault();
      } else {
        TS.utility.welcome_post.clogWelcomePostOpen($el);
      }
    });
    TS.click.addClientHandler("a.show_parent_replies, a.show_replies, .reply_bar", function(e, $el, origin) {
      e.preventDefault();
      var $msg_el = $el.closest("ts-message");
      var thread_ts = $msg_el.attr("data-thread-ts");
      if (!thread_ts) return;
      var model_ob_id = $msg_el.attr("data-model-ob-id");
      var model_ob = TS.shared.getModelObById(model_ob_id);
      if (!model_ob) return;
      TS.ui.utility.preventElementFromScrolling($msg_el, function() {
        TS.ui.replies.openConversation(model_ob, thread_ts, null, origin);
      });
    });
    TS.click.addWebHandler(".reply_bar", function(e, $el) {
      var target = $(e.target);
      if (!target.is("a")) {
        var $msg_el = $el.closest("ts-message");
        var thread_ts = $msg_el.attr("data-thread-ts");
        if (!thread_ts) return;
        var model_ob_id = $msg_el.attr("data-model-ob-id");
        var model_ob = TS.shared.getModelObById(model_ob_id);
        if (!model_ob) return;
        var url = TS.utility.msgs.constructConversationPermalink(model_ob, thread_ts);
        window.open(url);
      }
    });
    TS.click.addClientHandler('[data-action="open_conversation"]', function(e, $el, origin) {
      e.preventDefault();
      var model_ob_id = $el.attr("data-model-ob-id");
      var model_ob = TS.shared.getModelObById(model_ob_id);
      if (!model_ob) return;
      var thread_ts = $el.attr("data-thread-ts");
      if (!thread_ts) return;
      var reply_ts = $el.attr("data-ts");
      TS.ui.replies.openConversation(model_ob, thread_ts, reply_ts, origin);
    });
    TS.click.addClientHandler("#mentions_clear_notifications", function(e) {
      e.preventDefault();
      TS.replies.markAllThreads();
    });
    TS.click.addClientHandler("#reply_container .reply_send", function(e, $el) {
      e.preventDefault();
      TS.ui.replies.submitReply(e, $el);
    });
    TS.click.addClientHandler("#threads_msgs .reply_send", function(e, $el) {
      e.preventDefault();
      TS.ui.thread.submitReply(e, $el);
    });
    TS.click.addClientHandler("#reply_container .join_channel_from_thread", function(e, $el) {
      e.preventDefault();
      TS.ui.replies.joinChannelFromThread(e, $el);
    });
    TS.click.addClientHandler("#threads_msgs .join_channel_from_thread", function(e, $el) {
      e.preventDefault();
      TS.ui.thread.joinChannelFromThread(e, $el);
    });
    TS.click.addClientHandler(".thread_error_state_refresh_button", function(e) {
      e.preventDefault();
      TS.client.threads.maybeReloadThreadsView();
    });
    TS.click.addClientHandler(".app_index_error_state_refresh_button", function(e) {
      e.preventDefault();
      TS.client.app_index.maybeReloadAppIndexView();
    });
    TS.click.addClientHandler("#thread_notification_banner .banner_buttons .btn", function(e, $el) {
      e.preventDefault();
      var should_turn_on_pref = $el.data("turn-on-pref");
      var $banner = $("#thread_notification_banner");
      var curr_height = $banner.height();
      $banner.height(curr_height);
      $banner.addClass("show_confirmation");
      $banner.height(92);
      TS.prefs.setPrefByAPI({
        name: "seen_threads_notification_banner",
        value: true
      });
      var is_pref_updated = TS.model.prefs.threads_everything !== should_turn_on_pref;
      if (is_pref_updated) {
        TS.prefs.setPrefByAPI({
          name: "threads_everything",
          value: should_turn_on_pref
        });
        TS.clog.track("PREF_USER_CLIENT_UPDATE", {
          updated_user_client_prefs: {
            threads_everything: should_turn_on_pref.toString()
          }
        });
      }
    });
    TS.click.addClientHandler("#thread_notification_banner .close", function(e) {
      e.preventDefault();
      var $banner = $("#thread_notification_banner");
      var curr_height = $banner.height();
      $banner.height(curr_height);
      $banner.height(0);
      if (!TS.model.prefs.seen_threads_notification_banner) TS.prefs.setPrefByAPI({
        name: "seen_threads_notification_banner",
        value: true
      });
      var is_confirmation_banner = $banner.hasClass("show_confirmation");
      var clog_event = is_confirmation_banner ? "THREADS_EVERYTHING_EXP_CLOSE_CONFIRMATION" : "THREADS_EVERYTHING_EXP_CLOSE_PROMPT";
      TS.clog.track(clog_event);
    });
    TS.click.addClientHandler("#thread_notification_banner_pref_link", function(e) {
      e.preventDefault();
      TS.ui.prefs_dialog.start("notifications", "#prefs_threads_everything", "prefs_notifications");
    });
    TS.click.addClientHandler("a.see_all_pins", function(e) {
      if (TS.client && TS.client.channel_page) {
        e.preventDefault();
        TS.client.ui.flex.openFlexTab("details");
        TS.client.channel_page.showPinsSection();
        $("#channel_page_scroller .channel_page_pinned_items").highlight(null, "channel_page_pinned_items_highlighter");
      }
    });
    TS.click.addClientHandler("ts-thread .reveal_new_replies", function(e, $el) {
      var $thread = $el.closest("ts-thread");
      if (!$thread.length) return;
      e.preventDefault();
      var model_ob_id = $thread.attr("data-model-ob-id");
      var thread_ts = $thread.attr("data-thread-ts");
      TS.client.threads.showNewRepliesAndMarkThread(model_ob_id, thread_ts);
    });
    TS.click.addClientHandler("ts-thread .view_all_replies", function(e, $el) {
      var $thread = $el.closest("ts-thread");
      if (!$thread.length) return;
      e.preventDefault();
      if ($el.hasClass("active")) return;
      $el.addClass("active");
      var model_ob_id = $thread.attr("data-model-ob-id");
      var thread_ts = $thread.attr("data-thread-ts");
      TS.client.threads.showPreviousReplies(model_ob_id, thread_ts).finally(function() {
        $el.removeClass("active");
      });
    });
    TS.click.addClientHandler("#msgs_div ts-thread .expand_inline_thread", function(e, $el) {
      e.preventDefault();
      var $thread = $el.closest("ts-thread");
      if (!$thread.length) return;
      TS.ui.thread.expandInlineThread($thread);
    });
    TS.click.addClientHandler("#msgs_div ts-thread .collapse_inline_thread", function(e, $el) {
      e.preventDefault();
      var $thread = $el.closest("ts-thread");
      if (!$thread.length) return;
      TS.ui.thread.collapseInlineThread($thread);
    });
    TS.click.addClientHandler("a[href]", function(e, $el, origin) {
      var url_path = $el.attr("href").toLowerCase();
      var routes_to_auth = {
        "/account/settings": true,
        "/admin": true,
        "/admin/billing": true,
        "/admin/settings": true,
        "/apps": true,
        "/customize": true,
        "/files": true,
        "/pricing": true,
        "/stats": true
      };
      if (routes_to_auth[url_path]) {
        e.preventDefault();
        TS.utility.openAuthenticatedInBrowser(url_path);
        return;
      }
      if (TS.client.archives.maybeHandleArchiveLink($el, origin)) {
        if (TS.ui.fs_modal_file_viewer && TS.ui.fs_modal_file_viewer.is_showing) {
          TS.ui.fs_modal.close();
        }
        e.preventDefault();
        return;
      }
      if (TS.utility.calls.maybeHandleCallLink($el)) {
        e.preventDefault();
        return;
      }
      if (!$el.attr("target") && url_path.indexOf("skype:") !== 0) {
        e.preventDefault();
        TS.utility.openInNewTab(url_path, TS.templates.builders.newWindowName());
        return;
      }
      var file_id = TS.utility.getFileIDFromURL(url_path);
      if (file_id && TS.client.windows.openFileWindow(file_id, "")) {
        e.preventDefault();
        return;
      }
      if (TS.ui.replies.maybeOpenConversationLink($el, origin)) {
        e.preventDefault();
      }
    });
    TS.click.addClientHandler(".search_message_result", function(e, $el) {
      var $result = $(this);
      var $target = $(e.target);
      if ($target.attr("href") || $target.attr("onclick")) return;
      if ($target.parents().attr("href")) return;
      if ($target.parents(".message").length && window.getSelection && window.getSelection().toString()) return;
      if ($el.hasClass("top_results_search_message_result")) return;
      var match_with_index = TS.search.view.getMatchForSearchResult($el);
      if (!match_with_index) return;
      if ($result.hasClass("no_extracts")) return;
      e.preventDefault();
      TS.search.view.toggleExtractsForMatch(e, match_with_index);
    });
    TS.click.addClientHandler(".attachment_show_more", function(e, $el) {
      var model_ob = TS.shared.getActiveModelOb();
      var ts = $el.data("msg-ts").toString();
      var msg = TS.utility.msgs.findMsg(ts, model_ob.id);
      var shown_attachments = msg._shown_attachments;
      if (Number.isInteger(shown_attachments) && shown_attachments + 20 <= msg.attachments.length) {
        msg._shown_attachments += 20;
      } else {
        msg._shown_attachments = msg.attachments.length;
      }
      if (ts == TS.shared.getLatestMsgTs(model_ob)) {
        TS.shared.markReadMsg(model_ob.id, ts, TS.model.marked_reasons.viewed);
      }
      TS.client.msg_pane.rebuildMsgs();
    });
    TS.click.addClientHandler(".attachement_actions_interactions .btn", function(e) {
      e.preventDefault();
      var context = TS.attachment_actions.handleActionEventAndGetContext($(e.target));
      if (context.action.confirm) {
        TS.attachment_actions.confirmAction(context.action, function() {
          TS.attachment_actions.action_triggered_sig.dispatch(context);
        });
      } else {
        TS.attachment_actions.action_triggered_sig.dispatch(context);
      }
    });
    TS.click.addClientHandler("#threads_view_banner .clear_unread_messages", function(e) {
      e.preventDefault();
      TS.client.threads.markAllNewThreads();
    });
    TS.click.addClientHandler("#threads_view_banner", function(e) {
      e.preventDefault();
      if (TS.client.ui.threads.isAlternativeThreadsViewShowing()) {
        TS.client.threads.maybeReloadThreadsView();
        return;
      }
      TS.client.ui.threads.jumpToTop();
    });
    TS.click.addClientHandler(".app_preview_link", function(e, $el) {
      var $closest_ts_message = $el.closest("[data-bot-id]");
      if (TS.model.user.is_restricted || TS.model.user.is_ultra_restricted) {
        var member_name = $el.data("member-name");
        if (member_name) {
          e.preventDefault();
          return TS.view.onMemberReferenceClick(e, member_name);
        }
        return;
      }
      e.preventDefault();
      var is_viewing_im = TS.model.active_im_id && !TS.client.activeChannelIsHidden();
      var bot_id = $closest_ts_message.data("bot-id");
      var message_ts = $closest_ts_message.data("ts") + "";
      var message_c_id = $closest_ts_message.data("model-ob-id");
      var member_id = $closest_ts_message.data("member-id");
      var app_id = $closest_ts_message.data("app-id");
      var payload = {
        message_timestamp: message_ts,
        channel_id: message_c_id,
        channel_type: message_c_id ? message_c_id.charAt(0) : "",
        member_id: member_id,
        app_id: app_id,
        bot_id: bot_id
      };
      TS.clog.track("USERNAME_CLICK", payload);
      if (bot_id) {
        if (is_viewing_im) {
          TS.menu.app.startWithApp(e, bot_id, null, true);
        } else {
          TS.menu.app.startWithApp(e, bot_id);
        }
      } else {
        TS.warn("hmm, no data-bot-id?");
      }
    });
    TS.click.addClientHandler(".attachment_attribution a", function(e, $el) {
      var bot_id = $el.data("attribution-bot-id");
      if (bot_id) {
        e.preventDefault();
        TS.menu.app.startWithApp(e, bot_id);
      } else {
        TS.warn("hmm, no data-bot-id?");
      }
    });
    TS.click.addHandler("[data-slash-command-autofill]", function(e, $el) {
      var $input = TS.client.msg_input.$input;
      var value = TS.utility.contenteditable.value($input);
      var command = $el.data("slash-command-autofill");
      if (!value) {
        TS.utility.contenteditable.clear($input);
        TS.utility.contenteditable.insertTextAtCursor($input, command);
        if (!TS.utility.contenteditable.supportsTexty()) {
          $input.TS_tabComplete("promiseToChoose", undefined, true);
        }
      }
      TS.utility.contenteditable.value($input, command + " " + value);
      TS.utility.contenteditable.cursorPosition($input, command.length + 1, value.length);
      TS.utility.contenteditable.focus($input);
      if (!TS.utility.contenteditable.supportsTexty()) $input.trigger("textchange");
    });
    if (TS.boot_data.feature_sli_recaps && TS.boot_data.feature_sli_recaps_interface) {
      TS.click.addClientHandler(".highlights_feedback_positive", function(e) {
        var msg_ts = $(e.target).parents("ts-message").data("ts");
        var model_ob_id = $(e.target).parents("ts-message").data("model-ob-id");
        $(e.target).parent().html(TS.i18n.t("You marked this message as <strong>helpful</strong>.", "messages")());
        if (TS.client.ui.unread.isUnreadViewDOMShowing()) {
          if (TS.boot_data.feature_sli_highlight_unreads) TS.client.ui.sli_highlight_all_unreads.markFeedbackForMessage(model_ob_id, msg_ts, true);
        } else {
          TS.recaps_signal.markFeedbackForMessage(msg_ts, true);
        }
      });
      TS.click.addClientHandler(".highlights_feedback_negative", function(e) {
        var msg_ts = $(e.target).parents("ts-message").data("ts");
        var model_ob_id = $(e.target).parents("ts-message").data("model-ob-id");
        $(e.target).parent().html(TS.i18n.t("You marked this message as <strong>not helpful</strong>.", "messages")());
        if (TS.client.ui.unread.isUnreadViewDOMShowing()) {
          if (TS.boot_data.feature_sli_highlight_unreads) TS.client.ui.sli_highlight_all_unreads.markFeedbackForMessage(model_ob_id, msg_ts, false);
        } else {
          TS.recaps_signal.markFeedbackForMessage(msg_ts, false);
        }
      });
      TS.click.addClientHandler("#msgs_scroller_div .recap_highlight_debug", function(e) {
        if (TS.boot_data.feature_tinyspeck && TS.recaps_signal.sli_recaps_debug_group === "sli_debug_info") {
          var debug_info = TS.recaps_signal.getDebugInfoFor($(e.target).parents("ts-message").data("ts"));
          TS.client.ui.debugger_flexpane.printJSON(debug_info);
        }
      });
    }
    if (TS.boot_data.feature_sli_briefing && TS.highlights_briefing) {
      TS.click.addClientHandler("#sli_briefing .recap_highlight_debug", function(e) {
        if (TS.boot_data.feature_tinyspeck && TS.highlights_briefing.sli_recaps_debug_group === "sli_debug_info") {
          var ts = $(e.target).parents("ts-message").data("ts");
          var model_ob_id = $(e.target).parents("ts-message").data("model-ob-id");
          var debug_info = TS.highlights_briefing.getDebugInfoFor(ts, model_ob_id);
          TS.client.ui.debugger_flexpane.printJSON(debug_info);
        }
      });
    }
    if (TS.boot_data.feature_sli_highlight_unreads && _.get(TS, "client.ui.sli_highlight_all_unreads")) {
      TS.click.addClientHandler("#unread_msgs_div .recap_highlight_debug", function(e) {
        if (TS.boot_data.feature_tinyspeck && TS.recaps_signal.sli_recaps_debug_group === "sli_debug_info") {
          var ts = $(e.target).parents("ts-message").data("ts");
          var model_ob_id = $(e.target).parents("ts-message").data("model-ob-id");
          var debug_info = TS.client.ui.sli_highlight_all_unreads.getDebugInfoFor(ts, model_ob_id);
          TS.client.ui.debugger_flexpane.printJSON(debug_info);
        }
      });
    }
    TS.click.addClientHandler("[data-js=sli_expert_search_toggle]", function(e) {
      if (TS.sli_expert_search) TS.sli_expert_search.toggleExpand(e);
    });
  };
  var _setupBinding = function() {
    var mousedown_position = {};
    $("body").on("mousedown.ts_dot_click_mousedown", function(e) {
      mousedown_position.x = e.clientX;
      mousedown_position.y = e.clientY;
    });
    $("body").on("click.ts_dot_click", function(e) {
      if (e.isDefaultPrevented()) return;
      if (TS.view && TS.view.maybeFollowLink(e)) return;
      if (TS.isPartiallyBooted()) {
        e.preventDefault();
        return;
      }
      var $target = $(e.target);
      var preview_origin = _getPreviewOrigin(e);
      var handler;
      var $el;
      for (var i = 0; i < _handlers.length; i += 1) {
        handler = _handlers[i];
        $el = null;
        if (handler.prevent_on_drag && (e.clientX != mousedown_position.x || e.clientY != mousedown_position.y)) {
          continue;
        } else if (handler.selector) {
          $el = $target.closest(handler.selector);
          if (!$el.length) continue;
          handler.fn(e, $el, preview_origin);
          if (e.isDefaultPrevented()) TS.log(2003, "click on " + handler.selector);
        } else {
          handler.fn(e, preview_origin);
        }
        if (e.isDefaultPrevented()) return;
      }
    });
  };
  var _getPreviewOrigin = function(e) {
    var $target = $(e.target);
    if ($target.closest("#search_results_container").length) return "search_results";
    if ($target.closest("#member_stars_list").length) return "starred_items";
    if ($target.closest("#member_mentions").length) return "mentions";
    if ($target.closest("#file_list").length) return "file_list";
    if ($target.closest("#file_preview_scroller").length) return "file_preview";
    if ($target.closest("#member_preview_scroller").length) return "member_preview";
    if ($target.closest("#convo_scroller").length) return "conversation";
    if ($target.closest("#groups_tab").length) return "groups";
    if ($target.closest("#threads_msgs_scroller_div").length) return "threads";
    if ($target.closest("#channel_page_scroller").length) {
      var model_ob = TS.shared.getActiveModelOb();
      var origin = "channel_page";
      if (model_ob.is_group && !model_ob.is_mpim) {
        origin = "group_page";
      } else if (model_ob.is_im || model_ob.is_mpim) {
        origin = "im_page";
      }
      return origin;
    }
    return null;
  };
})();
(function() {
  "use strict";
  TS.registerModule("frecency", {
    onStart: function() {},
    construct: function(namespace, options) {
      return _createFrecency(namespace, options);
    },
    getExisting: function(namespace) {
      return _getFrecency(namespace);
    },
    test: function() {
      return {
        _clearInstance: function(namespace) {
          delete _instances[namespace];
        }
      };
    }
  });
  var _DAY = 1e3 * 60 * 60 * 24;
  var _BUCKETS = [1e3 * 60 * 60 * 4, _DAY, _DAY * 3, _DAY * 7, _DAY * 30, _DAY * 90];
  var _WEIGHTS = [100, 80, 60, 40, 20, 10];
  var _REDUCED_MULTIPLIER = .5;
  var _PRUNE_AFTER = _BUCKETS[_BUCKETS.length - 1];
  var _PRUNE_BELOW_COUNT = 100;

  function _getFrecency(namespace) {
    return _instances[namespace];
  }

  function _createFrecency(namespace, options) {
    if (_instances[namespace]) {
      TS.error('namespace "' + namespace + '" already exists');
      return null;
    }
    var _cache;
    _cache = TS.storage.fetchFrecency(namespace) || {};
    if (options && options.onStart) _cache = options.onStart(namespace);

    function _query(list, text, bonusPoints, sortOptions) {
      var keys = _.keys(_cache);
      if (!bonusPoints) bonusPoints = function() {
        return 0;
      };
      var hits = {};
      _.each(keys, function(key) {
        if (key.indexOf(text) > -1 || text.indexOf(key) > -1) {
          if (Array.isArray(_cache[key])) {
            _.each(_cache[key], function(item) {
              if (hits[item.id]) {
                var old_score = _calculateScore(hits[item.id]);
                var new_score = _calculateScore(item);
                if (new_score > old_score) {
                  hits[item.id] = item;
                }
              } else {
                hits[item.id] = item;
              }
            });
          } else if (hits[_cache[key].id]) {
            var old_score = _calculateScore(hits[_cache[key].id]);
            var new_score = _calculateScore(_cache[key]);
            if (new_score > old_score) {
              hits[_cache[key].id] = _cache[key];
            }
          } else {
            hits[_cache[key].id] = _cache[key];
          }
        }
      });
      var new_list = [];
      _.each(list, function(item, index) {
        var extra_score = 0;
        if (_cache[item.id]) {
          extra_score = _calculateScore(_cache[item.id]);
        }
        if (!sortOptions || !sortOptions.normalize) {
          extra_score += bonusPoints(item, sortOptions);
        }
        new_list.push({
          id: item.id,
          score: _calculateScore(hits[item.id]) + extra_score,
          original_index: index
        });
      });
      if (sortOptions && sortOptions.normalize) {
        new_list = _normalize(new_list);
        new_list = _.map(new_list, function(item, i) {
          item.score += bonusPoints(list[i], sortOptions);
          return item;
        });
      }
      new_list.sort(function(a, b) {
        if (a.score === b.score) return a.original_index - b.original_index;
        return b.score - a.score;
      });
      return new_list;
    }

    function _record(item, text) {
      if (_cache[text] && !Array.isArray(_cache[text])) {
        if (_cache[text].id === item.id) {
          _countVisit(_cache[text]);
        } else {
          _cache[text] = [_cache[text], _createCacheRecord(item.id)];
        }
      } else if (Array.isArray(_cache[text])) {
        var exists = false;
        for (var i = 0; i < _cache[text].length; i += 1) {
          if (_cache[text][i].id === item.id) {
            _countVisit(_cache[text][i]);
            exists = true;
            break;
          }
        }
        if (!exists) {
          _cache[text].push(_createCacheRecord(item.id));
        }
      } else {
        _cache[text] = {
          id: item.id,
          count: 1,
          visits: [Date.now()]
        };
      }
      if (_cache[item.id]) {
        _countVisit(_cache[item.id]);
        _cache[item.id]._reduced = true;
      } else {
        _cache[item.id] = _createCacheRecord(item.id);
        _cache[item.id]._reduced = true;
      }
      if (options && options.recordFunc) {
        options.recordFunc(_cache);
      } else {
        TS.storage.storeFrecency(namespace, _cache);
      }
    }

    function _normalize(list) {
      var high_score = _.get(_.maxBy(list, "score"), "score") || 0;
      return _.map(list, function(item) {
        if (item.score > 0) item.score = item.score / high_score * 100;
        return item;
      });
    }

    function _countVisit(item) {
      item.count += 1;
      if (item.visits.length === 10) item.visits.shift();
      item.visits.push(Date.now());
    }

    function _createCacheRecord(id) {
      return {
        id: id,
        count: 1,
        visits: [Date.now()]
      };
    }

    function _getMostCommon(max, normalize) {
      var new_cache = {};
      var new_list = [];
      _traverseCache(false, function(item) {
        if (!new_cache[item.id]) {
          new_cache[item.id] = {
            id: item.id,
            score: _calculateScore(item) + _cache[item.id] ? _calculateScore(_cache[item.id]) : 0
          };
        } else {
          new_cache[item.id].score += _calculateScore(item);
        }
      });
      new_list = _.toArray(new_cache);
      new_list.sort(function(a, b) {
        return b.score - a.score;
      });
      if (max) {
        new_list = new_list.slice(0, max);
      }
      if (normalize) {
        new_list = _normalize(new_list);
      }
      return new_list;
    }

    function _getMostCommonWithPrefix(prefix, max, normalize) {
      var new_cache = {};
      var new_list = [];
      _traverseCache(false, function(item) {
        if (_.get(item, "id[0]") !== prefix) return;
        if (!new_cache[item.id]) {
          new_cache[item.id] = {
            id: item.id,
            score: _calculateScore(item) + _cache[item.id] ? _calculateScore(_cache[item.id]) : 0
          };
        } else {
          new_cache[item.id].score += _calculateScore(item);
        }
      });
      new_list = _.toArray(new_cache);
      new_list.sort(function(a, b) {
        return b.score - a.score;
      });
      if (max) {
        new_list = new_list.slice(0, max);
      }
      if (normalize) {
        new_list = _normalize(new_list);
      }
      return new_list;
    }

    function _calculateScore(item) {
      if (!item || !item.visits) return 0;
      var points = 0;
      var i = item.visits.length - 1;
      var now = Date.now();
      for (i; i >= 0; i -= 1) points += _weighVisit(now - item.visits[i]);
      if (item._reduced) {
        points *= _REDUCED_MULTIPLIER;
      }
      return item.count * points / item.visits.length;
    }

    function _weighVisit(recency) {
      var i = 0;
      var length = _BUCKETS.length;
      for (i; i < length; i += 1) {
        if (recency < _BUCKETS[i]) return _WEIGHTS[i];
      }
      return 0;
    }

    function _getCache(item) {
      if (item) return _cache[item];
      return _cache;
    }

    function _setCache(data) {
      _cache = data;
    }

    function _clearCache() {
      _cache = {};
      TS.storage.clearFrecency(namespace);
      if (options && options.onClearCache) options.onClearCache();
    }

    function _pruneCache() {
      var keys = Object.keys(_cache);
      _.each(keys, function(key) {
        if (_.isArray(_cache[key])) {
          for (var i = _cache[key].length; i > -1; i -= 1) {
            if (_shouldPruneCacheItem(_cache[key][i])) {
              _cache[key].splice(i, 1);
            }
          }
          if (!_cache[key].length) {
            _cache[key] = null;
            delete _cache[key];
          }
        } else if (_shouldPruneCacheItem(_cache[key])) {
          _cache[key] = null;
          delete _cache[key];
        }
      });
    }

    function _shouldPruneCacheItem(item) {
      if (!item || _.isEmpty(item.visits)) {
        return true;
      }
      if (Date.now() - item.visits[item.visits.length - 1] > _PRUNE_AFTER && item.count < _PRUNE_BELOW_COUNT) {
        return true;
      }
    }

    function _traverseCache(including_reduced, callback) {
      _.each(_cache, function(item) {
        if (!including_reduced && item._reduced) return;
        if (Array.isArray(item)) {
          _.each(item, function(entry) {
            callback(entry);
          });
        } else {
          callback(item);
        }
      });
    }
    var api = {
      query: _query,
      record: _record,
      getMostCommon: _getMostCommon,
      getMostCommonWithPrefix: _getMostCommonWithPrefix,
      _getCache: _getCache,
      _setCache: _setCache,
      _clearCache: _clearCache,
      _pruneCache: _pruneCache,
      _test: {
        _REDUCED_MULTIPLIER: _REDUCED_MULTIPLIER,
        _PRUNE_BELOW_COUNT: _PRUNE_BELOW_COUNT,
        _traverseCache: _traverseCache
      }
    };
    _instances[namespace] = api;
    return api;
  }
  var _instances = {};
})();
(function() {
  "use strict";
  TS.registerModule("ui.frecency", {
    onStart: function() {
      if (TS.client) TS.client.before_login_sig.addOnce(_onBeforeLogin);
      if (TS.web) TS.web.before_login_sig.addOnce(_onBeforeLogin);
      TS.prefs.frecency_jumper_changed_sig.add(_setFrecencyCache);
    },
    record: function() {
      _frecency.record.apply(this, arguments);
    },
    query: function() {
      return _frecency.query.apply(this, arguments);
    },
    clearCache: function() {
      _frecency._clearCache.apply(this);
    },
    getMostCommonWithPrefix: function() {
      return _frecency.getMostCommonWithPrefix.apply(this, arguments);
    },
    isEnterprise: function() {
      return TS.boot_data.feature_enterprise_frecency && TS.boot_data.page_needs_enterprise;
    },
    bonus_points: {
      starred_channel: 10,
      member_of_this_channel: 10,
      archived_channel_or_group: -50,
      not_in_channel: -25,
      usergroup_or_keyword: -25,
      fuzzy_match: 50,
      exact_match: 100,
      matches_previous_name: -50
    }
  });
  var _frecency;
  var _THROTTLE_MS = 1e3 * 60;
  var _onBeforeLogin = function _onBeforeLogin() {
    _frecency = TS.frecency.construct("jumper", {
      onStart: function() {
        _setPrefThrottled = TS.utility.throttleFunc(_setPrefThrottled, _THROTTLE_MS, true);
        return TS.model.frecency_jumper;
      },
      recordFunc: function(cache) {
        TS.model.frecency_jumper = cache;
        _setPrefThrottled();
      },
      onClearCache: function() {
        TS.prefs.setPrefByAPI({
          name: TS.ui.frecency.isEnterprise() ? "frecency_ent_jumper" : "frecency_jumper",
          value: "{}"
        });
      }
    });
  };
  var _setFrecencyCache = function _setFrecencyCache() {
    _frecency._setCache(TS.model.frecency_jumper);
  };
  var _setPrefThrottled = function _setPrefThrottled() {
    TS.prefs.setPrefByAPI({
      name: TS.ui.frecency.isEnterprise() ? "frecency_ent_jumper" : "frecency_jumper",
      value: JSON.stringify(TS.model.frecency_jumper)
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("sorter", {
    onStart: function() {},
    search: function(query, data, options) {
      return _search(query, data, options);
    },
    printTest: function(query, options) {
      var all_members = TS.members.getActiveMembersWithSlackbotAndNotSelf();
      var all_channels = TS.channels.getUnarchivedChannelsForUser();
      var all_groups = TS.groups.getUnarchivedGroups();
      var all_mpims = TS.mpims.getVisibleMpims();
      var all_teams = _.values(TS.boot_data.other_accounts);
      var all_usergroups = TS.user_groups.getActiveUserGroups();
      var all_emoji = TS.model.emoji_map;
      var all_broadcast_keywords = TS.utility.members.getBroadcastKeywordsForUser();
      var all_views = TS.model.NAMED_VIEWS;
      var data = {
        members: all_members,
        channels: all_channels,
        groups: all_groups,
        mpims: all_mpims,
        teams: all_teams,
        usergroups: all_usergroups,
        emoji: all_emoji,
        broadcast_keywords: all_broadcast_keywords,
        views: all_views
      };
      TS.sorter.search(query, data, _.extend({
        print: true
      }, options));
    },
    test: function() {
      return {
        sortFuzzy: _sortFuzzy,
        frecencyBonusPoints: _frecencyBonusPointsNormalized,
        getFilteredMatchesForFrecency: _getFilteredMatchesForFrecency,
        scoreMember: _scoreMember,
        _scoreUserGroup: _scoreUserGroup,
        getSubQueryMatchers: _getSubQueryMatchers
      };
    }
  });
  var _SORT_LOCAL_AWARE_LIMIT = 24;
  var _makeFuzzySearcher = function(query, options) {
    var fuzzy_limit = options.fuzzy_limit != null ? options.fuzzy_limit : 10;
    query = TS.i18n.deburr(query.toLocaleLowerCase());
    var only_members = query.charAt(0) === "@";
    var only_channels = query.charAt(0) === "#";
    var only_emoji = query.charAt(0) === ":";
    if (only_members || only_channels || only_emoji) query = query.substring(1);
    var fuzzy_options = {
      fuzzy_limit: fuzzy_limit
    };
    var fuzzy_member_options = {
      fuzzy_limit: fuzzy_limit,
      search_forward_only: true
    };
    var fuzzy_emoji_options = {
      fuzzy_limit: fuzzy_limit,
      substrings_only: true
    };
    var fuzzy = TS.fuzzy.makeFuzzyMatcher(query, fuzzy_options);
    var fuzzy_members = TS.fuzzy.makeFuzzyMatcher(query, fuzzy_member_options);
    var sub_query_matchers = _getSubQueryMatchers(query, fuzzy_member_options);
    var fuzzy_emoji = TS.fuzzy.makeFuzzyMatcher(query, fuzzy_emoji_options);
    return {
      query: query,
      only_channels: only_channels,
      only_members: only_members,
      only_emoji: only_emoji,
      matchesChannel: function(c) {
        if (only_members || only_emoji) return false;
        if ((options.allow_empty_query || only_channels) && !query) {
          c._jumper_score = 0;
          return true;
        }
        var score = fuzzy.score(c.name_normalized || c.name);
        c._jumper_score = score;
        if (options.search_previous_channel_names && c.previous_names && c.previous_names.length) {
          c._jumper_previous_name_scores = _.map(c.previous_names, function(name) {
            return {
              score: fuzzy.score(name),
              name: name
            };
          });
          var did_match_previous_names = _.some(c._jumper_previous_name_scores, function(o) {
            return o.score <= fuzzy_limit;
          });
          c._jumper_only_matched_previous_names = did_match_previous_names && score > fuzzy_limit;
          if (c._jumper_only_matched_previous_names) {
            var lowest = _.minBy(c._jumper_previous_name_scores, "score");
            c._jumper_previous_name_match = lowest && lowest.name;
          } else {
            c._jumper_previous_name_match = null;
          }
          return score <= fuzzy_limit || did_match_previous_names;
        }
        return score <= fuzzy_limit;
      },
      matchesGroup: function(g) {
        if (only_channels || only_members || only_emoji) return false;
        if (options.allow_empty_query && !query) {
          g._jumper_score = 0;
          return true;
        }
        var score = fuzzy.score(g.name_normalized || g.name);
        g._jumper_score = score;
        return score <= fuzzy_limit;
      },
      matchesMember: function(m) {
        if (only_channels || only_emoji) return false;
        if ((options.allow_empty_query || only_members) && !query) {
          m._jumper_score = 0;
          return true;
        }
        var score = _scoreMember(m, fuzzy_members, query, only_members);
        m._jumper_score = score;
        return score <= fuzzy_limit;
      },
      matchesMpim: function(mpim) {
        if (only_channels || only_members || only_emoji) return false;
        if (options.allow_empty_query && !query) {
          mpim._jumper_score = 0;
          return true;
        }
        var members = TS.mpims.getMembersInDisplayOrder(mpim);
        var scores = sub_query_matchers.map(function(query_matcher) {
          var scores = members.map(function(m) {
            return _scoreMember(m, query_matcher);
          });
          return _.min(scores);
        });
        var total = _.sum(scores);
        mpim._jumper_score = total;
        return total <= fuzzy_limit;
      },
      matchesTeam: function(team) {
        if (only_channels || only_members || only_emoji) return false;
        var score = fuzzy.score(team.team_name.toLocaleLowerCase());
        team._jumper_score = score;
        return score <= fuzzy_limit;
      },
      matchesUserGroup: function(ug) {
        if (only_channels || only_emoji) return false;
        if ((options.allow_empty_query || only_members) && !query) {
          ug._jumper_score = 0;
          return true;
        }
        var score = _scoreUserGroup(ug, fuzzy);
        ug._jumper_score = score;
        return score <= fuzzy_limit;
      },
      matchesEmoji: function(emoji) {
        if (only_channels || only_members) return false;
        if (options.allow_empty_query && !query) {
          emoji._jumper_score = 0;
          return true;
        }
        var emoji_name = TS.i18n.deburr(emoji.display_name || emoji.name);
        var score = fuzzy_emoji.score(emoji_name);
        emoji._jumper_score = score;
        return score <= fuzzy_limit;
      },
      matchesBroadcastKeyword: function(bk) {
        if (only_channels || only_emoji) return false;
        if ((options.allow_empty_query || only_members) && !query) {
          bk._jumper_score = 0;
          return true;
        }
        var score = _scoreBroadcastKeyword(bk, fuzzy);
        bk._jumper_score = score;
        return score <= fuzzy_limit;
      },
      matchesView: function(v) {
        if (only_channels || only_emoji) return false;
        var score = fuzzy.score(v.name.toLocaleLowerCase());
        if (Infinity === score && v.alt_names) {
          score = _.reduce(v.alt_names, function(score, name) {
            return Math.min(score, fuzzy.score(name.toLocaleLowerCase()));
          }, score);
        }
        v._jumper_score = score;
        return score <= fuzzy_limit;
      }
    };
  };
  var _getSubQueryMatchers = function(query, fuzzy_options) {
    var sub_queries = query.split(/[,| ]/).filter(function(i) {
      return !!i;
    });
    return sub_queries.map(function(q) {
      q = q.charAt("0") === "@" ? q.substring(1) : q;
      return TS.fuzzy.makeFuzzyMatcher(q, fuzzy_options);
    });
  };
  var _scoreMember = function(member, matcher, query, only_members) {
    var score;
    if (TS.utility.queryIsMaybeSelf(query) && member.is_self) return 0;
    if (TS.boot_data.feature_name_tagging_client) {
      var real_name_score = Infinity;
      var real_name_normalized_score = Infinity;
      var display_name_score = Infinity;
      var display_name_normalized_score = Infinity;
      real_name_score = matcher.score(member._real_name_lc);
      if (member._real_name_lc !== member._real_name_normalized_lc) {
        real_name_normalized_score = matcher.score(member._real_name_normalized_lc);
      }
      if (member._display_name_lc) {
        display_name_score = matcher.score(member._display_name_lc);
        if (member._display_name_lc !== member._display_name_normalized_lc) {
          display_name_normalized_score = matcher.score(member._display_name_normalized_lc);
        }
      }
      score = Math.min(real_name_score, real_name_normalized_score, display_name_score, display_name_normalized_score);
    } else {
      var name_score = Infinity;
      var rn_score = Infinity;
      var rn_norm_score = Infinity;
      name_score = matcher.score(member.name);
      if (member._real_name_lc && !only_members) {
        rn_score = matcher.score(member._real_name_lc);
        if (member._real_name_lc !== member._real_name_normalized_lc) {
          rn_norm_score = matcher.score(member._real_name_normalized_lc);
        }
      }
      score = Math.min(name_score, rn_score, rn_norm_score);
    }
    return score;
  };
  var _scoreUserGroup = function(usergroup, matcher) {
    var name_score = Infinity;
    var handle_score = Infinity;
    name_score = matcher.score(usergroup.name);
    handle_score = matcher.score(usergroup.handle);
    var score = Math.min(name_score, handle_score);
    return score;
  };
  var _scoreBroadcastKeyword = function(bk, matcher) {
    var name_score = Infinity;
    name_score = matcher.score(bk.name);
    if (!bk.alias) return name_score;
    var alias_score = Infinity;
    alias_score = matcher.score(bk.alias);
    var score = Math.min(name_score, alias_score);
    return score;
  };
  var _search = function(query, data, options) {
    var searcher = _makeFuzzySearcher(query, options || {});
    var exact_matches = [];
    var member_matches = [];
    var channel_matches = [];
    var channel_matches_not_member = [];
    var channel_matches_archived = [];
    var group_matches = [];
    var group_matches_archived = [];
    var mpim_matches = [];
    var team_matches = [];
    var usergroup_matches = [];
    var emoji_matches = [];
    var broadcast_keyword_matches = [];
    var view_matches = [];
    data.members = data.members || [];
    data.channels = data.channels || [];
    data.groups = data.groups || [];
    data.mpims = data.mpims || [];
    data.teams = data.teams || [];
    data.usergroups = data.usergroups || [];
    data.emoji = data.emoji || [];
    data.broadcast_keywords = data.broadcast_keywords || [];
    data.views = data.views || [];
    if (!searcher.only_channels && !searcher.only_emoji) {
      member_matches = data.members.filter(function(m) {
        if (TS.boot_data.feature_name_tagging_client) {
          if (options.prefer_exact_match && (TS.members.getMemberPreferredName(m).toLocaleLowerCase() === searcher.query || TS.members.getMemberRealName(m).toLocaleLowerCase() === searcher.query)) {
            m._jumper_exact_match = true;
            exact_matches.push(m);
            return false;
          }
          m._jumper_exact_match = false;
        }
        if (options.prefer_exact_match && m.name === searcher.query) {
          m._jumper_exact_match = true;
          exact_matches.push(m);
          return false;
        }
        m._jumper_exact_match = false;
        return searcher.matchesMember(m);
      });
      usergroup_matches = data.usergroups.filter(function(ug) {
        if (options.prefer_exact_match && ug.handle === searcher.query || ug.name_lc === searcher.query) {
          exact_matches.push(ug);
          return false;
        }
        return searcher.matchesUserGroup(ug);
      });
      broadcast_keyword_matches = data.broadcast_keywords.filter(function(bk) {
        if (options.prefer_exact_match && bk.name === searcher.query) {
          exact_matches.push(bk);
          return false;
        }
        return searcher.matchesBroadcastKeyword(bk);
      });
    }
    if (!searcher.only_members && !searcher.only_emoji) {
      data.channels.forEach(function(c) {
        if (options.prefer_exact_match && c.name === searcher.query) {
          c._jumper_exact_match = true;
          exact_matches.push(c);
          return false;
        }
        c._jumper_exact_match = false;
        var matched = searcher.matchesChannel(c);
        if (!matched) return;
        if (c.is_member) {
          channel_matches.push(c);
        } else if (c.is_archived) {
          channel_matches_archived.push(c);
        } else {
          channel_matches_not_member.push(c);
        }
      });
    }
    if (!searcher.only_channels && !searcher.only_members && !searcher.only_emoji) {
      data.groups.forEach(function(g) {
        if (options.prefer_exact_match && g.name === searcher.query) {
          g._jumper_exact_match = true;
          exact_matches.push(g);
          return false;
        }
        g._jumper_exact_match = false;
        var matched = searcher.matchesGroup(g);
        if (!matched) return;
        if (g.is_archived) {
          group_matches_archived.push(g);
        } else {
          group_matches.push(g);
        }
      });
      mpim_matches = data.mpims.filter(function(mpim) {
        return searcher.matchesMpim(mpim);
      });
      team_matches = data.teams.filter(function(team) {
        if (options.prefer_exact_match && team.team_name.toLocaleLowerCase() === searcher.query) {
          team._jumper_exact_match = true;
          exact_matches.push(team);
          return false;
        }
        team._jumper_exact_match = false;
        var match = searcher.matchesTeam(team);
        return match;
      });
    }
    if (!searcher.only_channels && !searcher.only_members) {
      emoji_matches = data.emoji.filter(function(e) {
        if (options.prefer_exact_match && (e.display_name || e.name) === searcher.query) {
          e._jumper_exact_match = true;
          exact_matches.push(e);
          return false;
        }
        e._jumper_exact_match = false;
        return searcher.matchesEmoji(e);
      });
    }
    if (TS.client && data.views) {
      if (!searcher.only_channels && !searcher.only_members) {
        view_matches = data.views.filter(function(v) {
          if (options.prefer_exact_match && v.name === searcher.query) {
            exact_matches.push(v);
            return false;
          }
          return searcher.matchesView(v);
        });
      }
    }
    var primary_matches;
    var secondary_matches;
    var tertiary_matches;
    var sort_locale_aware;
    primary_matches = member_matches.concat(channel_matches, group_matches, mpim_matches, emoji_matches, usergroup_matches, broadcast_keyword_matches, view_matches);
    sort_locale_aware = TS.boot_data.feature_intl_channel_names || primary_matches.length < _SORT_LOCAL_AWARE_LIMIT;
    primary_matches.sort(_.partial(_sortFuzzy, sort_locale_aware));
    secondary_matches = channel_matches_not_member.concat(team_matches);
    sort_locale_aware = TS.boot_data.feature_intl_channel_names || secondary_matches.length < _SORT_LOCAL_AWARE_LIMIT;
    secondary_matches.sort(_.partial(_sortFuzzy, sort_locale_aware));
    tertiary_matches = group_matches_archived.concat(channel_matches_archived);
    sort_locale_aware = TS.boot_data.feature_intl_channel_names || tertiary_matches.length < _SORT_LOCAL_AWARE_LIMIT;
    tertiary_matches.sort(_.partial(_sortFuzzy, sort_locale_aware));
    var all_matches = primary_matches.concat(secondary_matches, tertiary_matches);
    var filtered_matches = all_matches;
    if (options.prefer_exact_match && exact_matches.length > 0) {
      for (var i = 0; i < exact_matches.length; i += 1) {
        filtered_matches.unshift(exact_matches[i]);
      }
    }
    if (options.frecency) {
      options.normalize = true;
      filtered_matches = TS.ui.frecency.query(filtered_matches, query, _frecencyBonusPointsNormalized, options);
    }
    if (options.limit) {
      filtered_matches = _.take(filtered_matches, options.limit);
    }
    if (options.frecency) {
      filtered_matches = _getFilteredMatchesForFrecency(filtered_matches);
    }
    if (options.print) {
      var output = "\n";
      filtered_matches.forEach(function(match) {
        var model_ob = options.frecency ? match.model_ob : match;
        if (options.frecency) output += "[" + match.score + "] ";
        if (model_ob._jumper_score != null) output += "[" + model_ob._jumper_score + "] ";
        if (model_ob.is_mpim) {
          output += TS.mpims.getDisplayName(model_ob);
        } else if (model_ob.is_channel) {
          output += "#" + model_ob.name;
        } else if (model_ob.is_group) {
          output += model_ob.name;
        } else if (model_ob.team_name) {
          output += model_ob.team_name;
        } else if (model_ob.is_usergroup) {
          output += "@" + model_ob.name;
        } else if (model_ob.presence) {
          output += "@" + model_ob.name;
        } else {
          output += match.model_ob.name;
        }
        output += "\n";
      });
      TS.info(output);
    }
    return filtered_matches;
  };
  var _getFilteredMatchesForFrecency = function(filtered_matches) {
    var matches_for_render = [];
    if (TS.boot_data.page_needs_enterprise) {
      filtered_matches = _.uniqBy(filtered_matches, function(match) {
        return match.id;
      });
    }
    _.forEach(filtered_matches, function(f_match) {
      var model_ob;
      if (TS.utility.strLooksLikeAMemberId(f_match.id)) {
        var member_model_ob = TS.members.getMemberById(f_match.id);
        if (member_model_ob) {
          matches_for_render.push({
            model_ob: member_model_ob,
            score: f_match.score
          });
          return;
        }
      }
      var team_match = _.find(TS.boot_data.other_accounts, function(account) {
        return account.id === f_match.id && account.team_id != TS.model.team.id;
      });
      var bk_match = f_match.id.indexOf("BK") === 0;
      var view_match = f_match.id.indexOf("V") === 0;
      if (team_match) {
        model_ob = team_match;
      } else if (bk_match) {
        model_ob = TS.model.getBroadcastKeywordById(f_match.id);
      } else if (view_match) {
        model_ob = TS.model.getViewById(f_match.id);
      } else {
        model_ob = TS.shared.getModelObById(f_match.id);
      }
      if (model_ob) {
        matches_for_render.push({
          model_ob: model_ob,
          score: f_match.score
        });
      }
    });
    return matches_for_render;
  };
  var _getNameForComparison = function(model_ob) {
    var name;
    if (model_ob.is_mpim) {
      name = TS.mpims.getDisplayNameLowerCase(model_ob);
    } else if (model_ob.is_usergroup) {
      name = model_ob.handle;
    } else if (model_ob._name_lc) {
      name = model_ob._name_lc;
    } else if (model_ob.team_name) {
      name = model_ob.team_name.toLocaleLowerCase();
    } else {
      name = model_ob.name;
    }
    return name;
  };
  var _sortFuzzy = function(locale_aware, a, b) {
    if (a.is_mpim && !b.is_mpim) return 1;
    if (b.is_mpim && !a.is_mpim) return -1;
    if (!a.is_mpim && !b.is_mpim) {
      var score_diff = a._jumper_score - b._jumper_score;
      if (score_diff !== 0) return score_diff;
    }
    if (a.is_mpim && b.is_mpim) {
      var mpim_score_diff = a._jumper_score - b._jumper_score;
      if (mpim_score_diff !== 0) return mpim_score_diff;
      var member_count_diff = TS.mpims.getMemberCount(a) - TS.mpims.getMemberCount(b);
      if (member_count_diff !== 0) return member_count_diff;
    }
    var a_name = _getNameForComparison(a);
    var b_name = _getNameForComparison(b);
    if (locale_aware) {
      return TS.i18n.sorter(a_name, b_name);
    }
    if (a_name > b_name) return 1;
    if (b_name > a_name) return -1;
    return 0;
  };
  var _frecencyBonusPointsNormalized = function(item, options) {
    if (item.is_mpim) return 0;
    var score = 0;
    if (item._jumper_exact_match) {
      score += TS.ui.frecency.bonus_points.exact_match;
    } else {
      score += _calculateNormalizedFuzzyBonusPoints(item);
    }
    if (item._jumper_previous_name_scores) {
      score += TS.ui.frecency.bonus_points.matches_previous_name;
    }
    if (options.prefer_channel_members && item.presence) {
      if (options.model_ob && _isUserIdKnownToBeMemberOfChannel(item.id, options.model_ob)) {
        score += TS.ui.frecency.bonus_points.member_of_this_channel;
      }
    }
    if (item.is_starred) {
      score += TS.ui.frecency.bonus_points.starred_channel;
    }
    if (item.is_emoji) {
      if (item.name === "thumbsup" || item.name === "point_up") {
        score += 1;
      }
    }
    if (item.is_channel || item.is_group) {
      if (item.is_archived) {
        score += TS.ui.frecency.bonus_points.archived_channel_or_group;
      }
      if (item.is_channel && options.prefer_channels_user_belongs_to) {
        if (!item.is_archived && !_isUserIdKnownToBeMemberOfChannel(TS.model.user.id, TS.shared.getModelObById(item.id))) {
          score += TS.ui.frecency.bonus_points.not_in_channel;
        }
      }
    }
    if (item.is_usergroup || item.is_broadcast_keyword) {
      score += TS.ui.frecency.bonus_points.usergroup_or_keyword;
    }
    return score;
  };
  var _calculateNormalizedFuzzyBonusPoints = function(item) {
    var fuzziness = item._jumper_score;
    if (!_.isFinite(fuzziness)) return 0;
    var scaler = Math.pow(.5, fuzziness);
    return Math.round(TS.ui.frecency.bonus_points.fuzzy_match * scaler);
  };
  var _isUserIdKnownToBeMemberOfChannel = function(user_id, model_ob) {
    if (model_ob.is_channel && user_id === TS.model.user.id) return model_ob.is_member;
    var membership_status = TS.membership.getUserChannelMembershipStatus(user_id, model_ob);
    return membership_status.is_known && membership_status.is_member;
  };
})();
(function() {
  "use strict";
  TS.registerModule("fuzzy", {
    onStart: function() {},
    score: function(str, query, options) {
      if (!options) options = {};
      var matcher = TS.fuzzy.makeFuzzyMatcher(query, options);
      return matcher.score(str);
    },
    makeFuzzyMatcher: function(query, options) {
      var query_node = _queryToLinkedList(query);
      if (options.fuzzy_limit == null) options.fuzzy_limit = Infinity;
      return {
        score: function(str) {
          var should_continue = _containsAllLetters(str, query_node);
          if (!should_continue) return Infinity;
          if (!query_node) return Infinity;
          var node = _lettersToGraph(str);
          if (!node) return Infinity;
          var result = _searchWordBoundariesOnly(node, query_node, options);
          if (!result) return Infinity;
          var summed_up = _countResult(result);
          if (summed_up > options.fuzzy_limit) return Infinity;
          return summed_up;
        }
      };
    },
    test: function() {
      return {
        lettersToGraph: _lettersToGraph,
        queryToLinkedList: _queryToLinkedList
      };
    }
  });
  var _ignored_chars = " -_'.’​()";
  var _countResult = function(result) {
    if (!result) return 0;
    return result.count + _countResult(result.next);
  };
  var _searchWordBoundariesOnly = function(node, query_node, options) {
    var first = _searchWordBoundariesOnlyWorker(node, query_node, 0, options);
    if (!first) {
      first = _.reduce(node.jumps, function(match, jump_node) {
        if (match || jump_node === node) return match;
        return _searchWordBoundariesOnlyWorker(jump_node, query_node, 1, options);
      }, null);
    }
    return first;
  };
  var _searchWordBoundariesOnlyWorker = function(node, query_node, score, options) {
    if (!node) return null;
    var this_match;
    if (!node.visited && (node.letter === query_node.letter || node.ignored && query_node.is_separator)) {
      this_match = {
        node: node,
        count: score
      };
    }
    if (!this_match) return null;
    if (!query_node.next) return this_match;
    node.visited = true;
    var next = _searchWordBoundariesOnlyWorker(node.next, query_node.next, 0, options);
    var next_query_node = query_node.next;
    if (next_query_node.is_space) {
      if (next_query_node.next) next_query_node = next_query_node.next;
    }
    if (!next) {
      next = _.reduce(node.jumps, function(result, jump_node) {
        if (result) return result;
        if (jump_node.visited || jump_node === node) return result;
        if (options.search_forward_only || options.substrings_only) {
          if (jump_node.index < node.index) return result;
        }
        if (options.substrings_only) {
          if (jump_node.index > node.index + 2) return result;
        }
        return _searchWordBoundariesOnlyWorker(jump_node, next_query_node, 1, options);
      }, null);
    }
    node.visited = false;
    if (next) {
      this_match.next = next;
      return this_match;
    }
    return null;
  };
  var _lettersToGraph = function(str) {
    var letters = str.split("");
    var l = letters.shift();
    return _lettersToGraphWorker(l, null, letters, [], 0);
  };
  var _lettersToGraphWorker = function(letter, prev, rest, jumps, index) {
    if (!letter) return null;
    var node = _makeLetterNode(letter, prev, jumps, index);
    if (!prev || prev.ignored && !node.ignored) {
      jumps.push(node);
    }
    var next_node = _lettersToGraphWorker(rest.shift(), node, rest, jumps, index + 1);
    if (next_node) {
      node.next = next_node;
    }
    return node;
  };
  var _makeLetterNode = function(letter, prev, jumps, index) {
    return {
      letter: letter,
      ignored: _ignored_chars.indexOf(letter) !== -1,
      next: null,
      prev: prev,
      jumps: jumps,
      visited: false,
      index: index
    };
  };
  var _queryToLinkedList = function(query) {
    if (!query) return null;
    var letters = query.split("");
    return _queryToLinkedListWorker(letters, 0);
  };
  var _queryToLinkedListWorker = function(letters, index) {
    if (index >= letters.length) return null;
    var letter = letters[index];
    var is_separator = _ignored_chars.indexOf(letter) !== -1 && (index !== 0 || letters.length > 1);
    var is_space = letter === " ";
    return {
      letter: letter,
      is_separator: is_separator,
      is_space: is_space,
      next: _queryToLinkedListWorker(letters, index + 1),
      index: index
    };
  };
  var _containsAllLetters = function(str, query_node) {
    if (!query_node) return true;
    if (TS.boot_data.feature_tinyspeck && (_.isUndefined(str) || str === null)) {
      TS.warn("_containsAllLetters: str passed in was not defined: ", str);
    }
    var found_it = query_node.is_separator || str.indexOf(query_node.letter) !== -1;
    if (!found_it) return false;
    return _containsAllLetters(str, query_node.next);
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.shared_channels_invites", {
    onStart: function() {
      TS.ui.validation.register("valid_invite", _validateValidInvite);
    },
    start: function() {
      if (TS.boot_data.page_needs_enterprise) _start();
    }
  });
  var _$body;
  var _$div;
  var _$filter;
  var _filtered_channels = [];
  var _$list;
  var _list_built = false;
  var _$list_container;
  var _list_visible = false;
  var _private_shared_channels = [];
  var _private_shared_invites = [];
  var _shared_channels = [];
  var _shared_invites = [];
  var _$sort_by;
  var _managing = false;
  var _addSentEmailsFeedback = function(id) {
    if (!id) return;
    var invite = _getSharedInviteFromModelById(id, _isPrivateInviteById(id));
    if (!invite) return;
    _$div.find('.sci_send_email_container [data-action="replace_sent_emails"]').replaceWith(TS.templates.shared_channels_invites_sent_emails(invite));
  };
  var _name_check_wait_time = 1e3;
  var _name_check_timer;
  var _name_available_timer;
  var _name_available_show_time = 1e3;
  var _name_check_api_call;
  var _toggleChannelNameChecking = function(disable, trigger_available) {
    if (!disable) disable = false;
    if (!trigger_available) trigger_available = false;
    _$div.find("#sci_channels_create .input_wrapper .spinner").toggleClass("hidden", disable);
    if (trigger_available) _toggleChannelNameAvailable(!disable);
  };
  var _toggleChannelNameAvailable = function(disable) {
    if (_name_available_timer) {
      clearTimeout(_name_available_timer);
      _name_available_timer = null;
    }
    if (!disable) disable = false;
    var $available = _$div.find("#sci_channels_create .input_wrapper .available");
    $available.toggleClass("hidden", disable);
    if (!disable) {
      _name_available_timer = setTimeout(function() {
        $available.addClass("hidden");
      }, _name_available_show_time);
    }
  };
  var _bindUI = function() {
    TS.kb_nav.start(_$list.find(".list_items"), ".channel_browser_row", _$list, {
      use_data_ordering: true,
      px_offset: 35,
      scrollToStartImmediately: function() {
        _$list.longListView("scrollToTop", true);
      },
      scrollToEndImmediately: function() {
        _$list.longListView("scrollToEnd", true);
      }
    });
    TS.kb_nav.setAllowHighlightWithoutBlurringInput(true);
    TS.kb_nav.setSubmitItemHandler(function(e) {
      if (_managing) _openChannel($(this), e);
    });
    _$list.find(".list_items").on("click", ".channel_browser_row", function(e) {
      _openChannel($(this), e);
    });
    _$div.on("click", '[data-action="sci_to_create"]', _switchToCreate);
    _$div.on("click", '[data-action="sci_channels_create"]', _createInvite);
    _$div.on("click", '[data-action="sci_cancel"]', _switchToManage);
    _$div.on("change", '[type="radio"][name="share_with"]', _toggleShareWith);
    _$div.on("click", '[data-action="sci_show_action"]', _showAction);
    var channel_name_input = '#sci_channels_create input[name="channel_name"]';
    var debounced_name_check_method = _.debounce(function($el) {
      if (_name_check_api_call && _name_check_api_call.isPending()) {
        if (_name_check_timer) {
          clearTimeout(_name_check_timer);
          _name_check_timer = null;
        }
        _name_check_timer = setTimeout(function($el) {
          debounced_name_check_method($el);
        }, _name_check_wait_time, $el);
        return;
      }
      $(".validation_message").remove();
      $('label[for="channel_name"]').removeClass("validation_warning");
      $el.removeClass("validation_warning");
      var do_validation = false;
      var is_disabled = true;
      var disable_checking_spinner = true;
      var trigger_available_name_message = false;
      var $create_button = $('#sci_channels_create [data-action="sci_channels_create"]');
      _toggleChannelNameChecking();
      _toggleButton(null, $create_button, do_validation, is_disabled);
      var validation = TS.ui.validation.validate($el);
      if (validation) {
        var new_name = $el.val().trim();
        _name_check_api_call = TS.api.callImmediately("enterprise.nameTaken", {
          name: new_name,
          ignore_local_team: false
        }, function(ok, data) {
          if (!ok) {
            disable_checking_spinner = true;
            trigger_available_name_message = false;
            _toggleChannelNameChecking(disable_checking_spinner, trigger_available_name_message);
            TS.generic_dialog.alert("Something failed! " + data.error);
          } else {
            if (data.name_taken) {
              disable_checking_spinner = true;
              trigger_available_name_message = false;
              _toggleChannelNameChecking(disable_checking_spinner, trigger_available_name_message);
              is_disabled = true;
              _toggleButton(null, $create_button, do_validation, is_disabled);
              TS.ui.validation.showWarning($el, '"' + TS.utility.htmlEntities(new_name) + '" is already taken by a channel, username, or user group.', {});
              return;
            }
            disable_checking_spinner = true;
            trigger_available_name_message = true;
            _toggleChannelNameChecking(disable_checking_spinner, trigger_available_name_message);
            is_disabled = false;
            _toggleButton(null, $create_button, do_validation, is_disabled);
          }
          return null;
        }).catch(function() {
          _name_check_api_call = null;
          disable_checking_spinner = true;
          trigger_available_name_message = false;
          _toggleChannelNameChecking(disable_checking_spinner, trigger_available_name_message);
        });
      } else {
        disable_checking_spinner = true;
        _toggleChannelNameChecking(disable_checking_spinner);
      }
    }, _name_check_wait_time, {
      leading: false,
      trailing: true
    });
    _$div.on("input", channel_name_input, function(e) {
      e.preventDefault();
      e.stopPropagation();
      debounced_name_check_method($(this));
    });
    _$div.on("input", '#sci_channels_create [data-validation]:not([name="channel_name"])', function() {
      var $container = _$div.find("#sci_channels_create");
      _toggleButton($container.find(_getCreateViewValidationSelector()), $container.find('[data-action="sci_channels_create"]'), true);
    });
    _$filter.on("textchange", function() {
      if (!_list_built) return;
      _filterList();
    }).on("keydown", function(e) {
      if (e.which === TS.utility.keymap.esc) TS.ui.fs_modal.close();
    });
    _$sort_by.on("change", function() {
      if (!_list_built) return;
      var sort_by = $(this).val();
      if (TS.model.ui_state) {
        TS.model.ui_state.sort_shared_channel_browser_by = sort_by;
        TS.storage.storeUIState(TS.model.ui_state);
      }
      _sortChannels(sort_by);
      _filterList();
    });
    _$div.on("click", ".clear_filter_icon", function() {
      _$filter.val("").trigger("textchange").focus();
    });
    _$body.on("keyup.sci", _onKeyUp);
    _$div.on("click", '[data-action="sci_toggle_contents"]', _toggleContents);
    _$div.on("click", '[data-action="sci_toggle_send_email"]', _toggleSendEmail);
    _$div.on("click", '[data-action="sci_toggle_copy_link"]', _toggleCopyLink);
    _$div.on("click", '[data-action="sci_send"]', _sendInviteEmail);
    _$div.on("click", '[data-action="sci_copy"]', _maybeCopyLink);
    _$div.on("click", '[data-action="sci_revoke"]', _revokeSharedInvite);
    _$div.on("input", "input[data-invite-id]", function(e) {
      var $container = $(e.target).parent();
      var do_validation = true;
      _toggleButton($container, $container.find('[data-action="sci_send"]'), do_validation);
    });
  };
  var _collapseAction = function() {
    _$div.find(".showing_sci_action").removeClass("showing_sci_action");
  };
  var _collapseCopyLink = function(e) {
    $(e.target).closest(".sci_invite_container").find(".sci_copy_link_mini_container").addClass("hidden");
  };
  var _collapseSendEmail = function(e) {
    $(e.target).closest(".sci_invite_container").find(".sci_send_email_mini_container").addClass("hidden");
  };
  var _concatWithDividers = function(to_join, joined) {
    var channels = [];
    if (to_join.length > 0) {
      channels.push({
        is_divider: true,
        name: TS.i18n.t("Channels you can join", "shared")()
      });
      channels = channels.concat(to_join);
    }
    if (joined.length > 0) {
      channels.push({
        is_divider: true,
        name: TS.i18n.t("Channels you belong to", "shared")()
      });
      channels = channels.concat(joined);
    }
    return channels;
  };
  var _createInvite = function() {
    var $container = _$div.find("#sci_channels_create");
    var $contents = $container.find(_getCreateViewValidationSelector());
    if (!TS.ui.validation.validate($contents, {
        quiet: true,
        fast: true
      })) {
      TS.ui.validation.validate($contents);
      Ladda.stopAll();
      $container.find('[data-action="sci_channels_create"]').addClass("disabled");
      return;
    }
    var args = {};
    var is_private = !$container.find('[name="access"]').prop("checked");
    if (_isEnterprise()) {
      switch ($container.find('[name^="share_with"]:checked').val()) {
        case "specific":
          args.target_domains = $container.find('[name="domains"]').val();
          break;
        case "external":
          args.target_domain = $container.find('[name="domain"]').val();
          break;
        case "all":
          args.all_teams = true;
          break;
        default:
          break;
      }
    } else {
      args.target_domain = $container.find('[name="domain"]').val();
    }
    var channel_name = $container.find('[name="channel_name"]').val();
    if (channel_name) args.channel_name = channel_name;
    var purpose = $container.find('[name="purpose"]').val();
    if (purpose) args.purpose = purpose.trim();
    if (args.target_domain) {
      _promiseToCallInviteShared(args, is_private).then(function(response) {
        var invite_id = response.data.invite_id;
        _switchToSend(response.data);
        return _promiseToCallListSharedInvites(is_private).then(function(response) {
          _setSharedInvitesIntoModel(response.data.invites, is_private);
          _rebuildSharedInvite(invite_id);
        });
      }).catch(_handleError).finally(Ladda.stopAll);
    } else {
      _promiseToCallCreateShared(args, is_private).then(function(created_channel) {
        var new_channel_id;
        if (created_channel.data.group) {
          new_channel_id = created_channel.data.group.id;
          if (!created_channel.data.group.is_member) {
            TS.console.warn("A new shared private channel was just created (" + new_channel_id + ") but the creator was not listed as a member in the API response");
            created_channel.data.group.is_member = true;
          }
          TS.groups.upsertGroup(created_channel.data.group);
          TS.groups.displayGroup({
            id: new_channel_id
          });
        } else {
          new_channel_id = created_channel.data.channel.id;
          if (!created_channel.data.channel.is_member) {
            TS.console.warn("A new shared channel was just created (" + new_channel_id + ") but the creator was not listed as a member in the API response");
            created_channel.data.channel.is_member = true;
          }
          TS.channels.upsertChannel(created_channel.data.channel);
          TS.channels.displayChannel({
            id: new_channel_id
          });
        }
        TS.ui.fs_modal.close();
        return null;
      }).catch(_handleError).finally(Ladda.stopAll);
    }
  };
  var _filterList = function() {
    var query = $.trim(_$filter.val());
    if (query !== "") {
      if (query.indexOf("#") !== -1) {
        query = query.replace("#", "", "g");
        query = $.trim(query);
      }
    }
    if (query) {
      _$filter.closest(".channel_browser_filter_container").addClass("active");
      _filtered_channels = _getListItems(query);
    } else {
      _$filter.closest(".channel_browser_filter_container").removeClass("active");
      _filtered_channels = _getListItems();
    }
    if (_filtered_channels.length === 0) {
      _updateNoChannelsMessage(query);
      _hideAllSectionsBut("#sci_no_shared_channels");
    } else {
      _hideAllSectionsBut("#sci_channels_container");
    }
    _$list.longListView("scrollToTop", true);
    _$list.longListView("setItems", _filtered_channels);
    TS.utility.rAF(function() {
      TS.ui.utility.updateClosestMonkeyScroller(_$list);
      _$list.longListView("resizeImmediately");
    });
    if (query) {
      TS.kb_nav.highlightFirstItem();
    } else {
      TS.kb_nav.clearHighlightedItem();
    }
  };
  var _findSharedInviteByTeamDomainAndChannelName = function(team_domain, channel_name) {
    return _.find(_getSharedInvitesFromModel(), function(invite) {
      return invite.team.domain === team_domain && invite.channel_name === channel_name;
    }) || _.find(_getSharedInvitesFromModel(true), function(invite) {
      return invite.team.domain === team_domain && invite.channel_name === channel_name;
    });
  };
  var _getCreateViewValidationSelector = function() {
    var selectors = ['[name="channel_name"]', '[name="purpose"]'];
    if (_isEnterprise()) {
      switch (_$div.find('[name^="share_with"]:checked').val()) {
        case "specific":
          selectors.push('[name="team_list"]');
          break;
        case "external":
          selectors.push('[name="domain"]');
          break;
        default:
          break;
      }
    } else {
      selectors.push('[name="domain"]');
    }
    return selectors.join(", ");
  };
  var _getEnterpriseTeamsFromModelLessOwn = function() {
    return _isEnterprise() ? _.filter(TS.model.enterprise_teams, function(team) {
      return team.id !== TS.model.team.id;
    }) : [];
  };
  var _getListItems = function(query) {
    var shared_channels = _getSharedChannelsFromModel();
    var private_shared_channels = _getSharedChannelsFromModel(true);
    var no_shared_channels = !(shared_channels.length || private_shared_channels.length);
    if (no_shared_channels) return;
    var merged = _mergePublicChannelsWithPrivateChannels(shared_channels, private_shared_channels);
    var to_join = [];
    var joined = [];
    var duplicates = {};
    var exact_match;
    var match_regex;
    if (query) {
      query = TS.utility.regexpEscape(query);
      match_regex = new RegExp(query, "i");
    }
    merged.forEach(function(channel) {
      var is_already_listed = duplicates.hasOwnProperty(channel.id);
      if (is_already_listed) return;
      if (!channel.hasOwnProperty("name")) return;
      if (!is_already_listed) duplicates[channel.id] = true;
      if (query) {
        if (channel.name.toLowerCase() === query.toLowerCase()) {
          exact_match = channel;
          return;
        }
        if (!channel.name.match(match_regex)) return;
      }
      if (channel.is_member) {
        joined.push(channel);
      } else {
        to_join.push(channel);
      }
    });
    if (exact_match) {
      if (exact_match.is_member) {
        joined.unshift(exact_match);
      } else {
        to_join.unshift(exact_match);
      }
    }
    return _concatWithDividers(to_join, joined);
  };
  var _getSharedChannelsFromModel = function(is_private) {
    return is_private ? _private_shared_channels : _shared_channels;
  };
  var _getSharedInviteFromModelById = function(id, is_private) {
    return _.find(_getSharedInvitesFromModel(is_private), function(invite) {
      return invite.invite_id == id;
    });
  };
  var _getSharedInvitesFromModel = function(is_private) {
    return is_private ? _private_shared_invites : _shared_invites;
  };
  var _getToggleInputLabel = function() {
    var label = TS.i18n.t("Anyone on your team can join", "shared")();
    if (_isEnterprise()) {
      var name = TS.utility.htmlEntities(TS.model.enterprise.name);
      switch (_$div.find('[name^="share_with"]:checked').val()) {
        case "specific":
          label = TS.i18n.t("Specific teams at {name} can join", "shared")({
            name: name
          });
          break;
        case "all":
          label = TS.i18n.t("Anyone at {name} can join", "shared")({
            name: name
          });
          break;
        default:
          break;
      }
    }
    return label;
  };
  var _getToggleInputOffLabel = function() {
    var label = TS.i18n.t("Restricted to invited members", "shared")();
    if (_isEnterprise()) {
      var name = TS.utility.htmlEntities(TS.model.enterprise.name);
      switch (_$div.find('[name^="share_with"]:checked').val()) {
        case "specific":
          label = TS.i18n.t("Restricted to invited members on specific {name} teams", "shared")({
            name: name
          });
          break;
        case "all":
          label = TS.i18n.t("Restricted to invited members at {name}", "shared")({
            name: name
          });
          break;
        default:
          break;
      }
    }
    return label;
  };
  var _handleError = function(error) {
    var body;
    switch (error.data.error) {
      case "invalid_target_domain":
        body = TS.i18n.t("Darn&mdash;we couldn’t find a team with that domain. Try again?", "shared")();
        break;
      case "name_taken":
        body = TS.i18n.t("Darn&mdash;that channel name is already taken. Try another?", "shared")();
        break;
      case "invite_exists":
        body = TS.i18n.t("An invitation already exists for that team and channel.", "shared")();
        break;
      case "shared_channel_exists":
        body = TS.i18n.t("Good news! That team has already joined the shared channel.", "shared")();
        break;
      case "not_paid":
        body = TS.i18n.t("Darn&mdash;that team has to upgrade to a paid Slack plan to join a shared channel.", "shared")();
        break;
      default:
        return _handleUnexpectedError(error);
    }
    return TS.generic_dialog.alert(body);
  };
  var _handleUnexpectedError = function(error) {
    var message = error.message || "";
    if (error.data && error.data.error) message += ": " + error.data.error;
    TS.error(message);
    var alert_str = TS.i18n.t("Sorry! Something went wrong. Please try again.", "shared")();
    return TS.generic_dialog.alert(alert_str);
  };
  var _hideAllSectionsBut = function(id) {
    var sections = ["#sci_loading", "#sci_no_shared_channels", "#sci_channels_container", "#sci_channels_create", "#sci_send", "#sci_invites_container"].filter(function(section_id) {
      return section_id !== id;
    }).join(", ");
    _$div.find(sections).addClass("hidden");
    _$div.find(id).removeClass("hidden");
  };
  var _hideList = function() {
    _list_visible = false;
    if (_list_built) {
      _$list.longListView("setHidden", true);
    }
  };
  var _isEnterprise = function() {
    return TS.boot_data.page_needs_enterprise;
  };
  var _isPrivateInviteById = function(id) {
    return !!_getSharedInviteFromModelById(id, true);
  };
  var _makeEnterpriseTeamsPicker = function() {
    var $container = _$div.find("#sci_channels_create");
    $container.find('[name="domains"]').each(function(index, el) {
      var $el = $(el);
      TS.ui.team_picker.make($el, {
        teams: _getEnterpriseTeamsFromModelLessOwn()
      });
      $el.on("change", function() {
        var value = TS.ui.team_picker.value($el).map(function(item) {
          return item.team.domain;
        }).join(",");
        $el.val(value);
        var do_validation = true;
        _toggleButton($container.find(_getCreateViewValidationSelector()), $container.find('[data-action="sci_channels_create"]'), do_validation);
      });
    });
  };
  var _maybeCopyLink = function(e) {
    var $el = $(e.target);
    var $container = $el.parent();
    var $input = $container.find("input");
    var $feedback = $container.find("label > span");
    var input = $input.get(0);
    var link = $input.val();
    if (TS.clipboard.canWriteText()) {
      TS.clipboard.writeText(link);
    } else {
      _showEphemeralCopyLinkFeedback($feedback);
    }
    if (input) input.setSelectionRange(0, link.length);
  };
  var _maybeRebuildManageView = function() {
    if (!_getSharedInvitesFromModel().length && !_getSharedChannelsFromModel().length && !_getSharedInvitesFromModel(true).length && !_getSharedChannelsFromModel(true).length) _switchToManage();
  };
  var _mergePublicChannelsWithPrivateChannels = function(public_channels, private_channels) {
    return public_channels.concat(private_channels);
  };
  var _numMembers = function(channel) {
    if ("num_members" in channel) {
      return channel.num_members || 0;
    }
    return channel.active_members ? channel.active_members.length : 0;
  };
  var _onCancel = function() {
    _updateBackButton(true);
    _$div = null;
    _$body.off("keyup.sci");
    _$body = null;
    TS.kb_nav.end();
    _list_visible = false;
    _list_built = false;
    _setSharedChannelsIntoModel([]);
    _setSharedChannelsIntoModel([], true);
  };
  var _onKeyUp = function(e) {
    if (e.which !== TS.utility.keymap.enter) return;
    var $el = $(e.target);
    if ($el.is("input[data-invite-id]")) {
      _sendInviteEmail(e);
    } else if ($el.is('input[name="domain"], input[name="channel_name"]')) {
      TS.ui.startButtonSpinner($('#sci_channels_create [data-action="sci_channels_create"]').get(0));
      _createInvite(e);
    }
  };
  var _onShow = function() {
    _$div = $("#sci_container");
    _$body = $("body");
    _$list_container = _$div.find(".list_container");
    _$list = _$list_container.find(".list");
    _$filter = _$div.find("#channel_browser_filter");
    _$sort_by = _$div.find("#channel_browser_sort");
    if (TS.model.ui_state && TS.model.ui_state.sort_shared_channel_browser_by) _$sort_by.find('option[value="' + TS.model.ui_state.sort_shared_channel_browser_by + '"]').attr("selected", true);
    _promiseToGetData().then(_switchToManage).catch(_handleError);
  };
  var _openChannel = function($row, e) {
    if ($row.hasClass("channel_link")) {
      var channel_id = $row.data("channel-id");
      TS.view.onChannelReferenceClick(e, channel_id);
    } else {
      var group_id = $row.data("group-id");
      TS.view.onGroupReferenceClick(e, group_id);
    }
    TS.ui.fs_modal.close();
  };
  var _promiseToCallCreateShared = function(args, is_private) {
    return TS.api.call(is_private ? "enterprise.groups.createShared" : "enterprise.channels.createShared", args);
  };
  var _promiseToCallInviteShared = function(args, is_private) {
    return TS.api.call(is_private ? "groups.inviteShared" : "channels.inviteShared", args);
  };
  var _promiseToCallListShared = function(is_private) {
    return TS.api.call(is_private ? "groups.listShared" : "channels.listShared");
  };
  var _promiseToCallListSharedInvites = function(is_private) {
    return TS.api.call(is_private ? "groups.listSharedInvites" : "channels.listSharedInvites");
  };
  var _promiseToCallRevokeSharedInvite = function(args, is_private) {
    return TS.api.call(is_private ? "groups.revokeSharedInvite" : "channels.revokeSharedInvite", args);
  };
  var _promiseToCallSendSharedInvite = function(args, is_private) {
    return TS.api.call(is_private ? "groups.sendSharedInvite" : "channels.sendSharedInvite", args);
  };
  var _promiseToGetData = function() {
    var promises = [_promiseToCallListShared().reflect(), _promiseToCallListShared(true).reflect()];
    if (TS.boot_data.feature_shared_channels_invite) {
      promises.push(_promiseToCallListSharedInvites().reflect());
      promises.push(_promiseToCallListSharedInvites(true).reflect());
    }
    return Promise.all(promises).then(function(responses) {
      var rejection_reasons = [];
      responses.forEach(function(response) {
        if (response.isFulfilled()) return;
        rejection_reasons.push(response.reason());
      });
      if (rejection_reasons.length) {
        return Promise.reject(new Error("Some shared channels start APIs failed:\n" + rejection_reasons.join("\n")));
      }
      _setSharedChannelsIntoModel(responses[0].value().data.channels);
      _setSharedChannelsIntoModel(responses[1].value().data.channels, true);
      if (TS.boot_data.feature_shared_channels_invite) {
        _setSharedInvitesIntoModel(responses[2].value().data.invites);
        _setSharedInvitesIntoModel(responses[3].value().data.invites, true);
      }
    });
  };
  var _rebuildEmailedInvitations = function(id) {
    if (!id) return;
    var invite = _getSharedInviteFromModelById(id, _isPrivateInviteById(id));
    if (!invite) return;
    _$div.find("#sci_invite_container_" + id + ' [data-action="replace_emailed_invites"]').replaceWith(TS.templates.shared_channels_invites_emailed_invitations(invite));
  };
  var _rebuildSharedInvite = function(id) {
    if (!id) return;
    var invite = _getSharedInviteFromModelById(id, _isPrivateInviteById(id));
    if (!invite) return;
    var $el = _$div.find("#sci_invite_container_" + id);
    if ($el.length) {
      $el.replaceWith(TS.templates.shared_channels_invites_invite(invite));
    } else {
      _$div.find("#sci_invites_container .sci_list_header").after(TS.templates.shared_channels_invites_invite(invite));
    }
    _$div.find("#sci_invites_container").removeClass("hidden");
  };
  var _removeSharedInvite = function(id) {
    if (!id) return;
    _$div.find("#sci_invite_container_" + id).remove();
    var $el = _$div.find("#sci_invites_container");
    if ($el.children().length === 1) $el.addClass("hidden");
  };
  var _removeSharedInviteFromModelById = function(id, is_private) {
    _.remove(_getSharedInvitesFromModel(is_private), function(invite) {
      return invite.invite_id == id;
    });
  };
  var _revokeSharedInvite = function(e) {
    var $el = $(e.target);
    var invite_id = $el.data("invite-id");
    var is_private = _isPrivateInviteById(invite_id);
    _promiseToCallRevokeSharedInvite({
      invite_id: invite_id
    }, is_private).then(function() {
      _removeSharedInviteFromModelById(invite_id, is_private);
      _removeSharedInvite(invite_id);
      _maybeRebuildManageView();
    }).catch(_handleError);
  };
  var _sendInviteEmail = function(e) {
    var $el = $(e.target);
    var $container = $el.parent();
    if (!TS.ui.validation.validate($container, {
        quiet: true,
        fast: true
      })) {
      TS.ui.validation.validate($container);
      $container.find('[data-action="sci_send"]').addClass("disabled");
      return;
    }
    var invite_id = $el.data("invite-id");
    var $input = $container.find("input");
    var email = $input.val();
    if (!email) return;
    var is_private = _isPrivateInviteById(invite_id);
    var args = {
      invite_id: invite_id,
      email: email
    };
    _promiseToCallSendSharedInvite(args, is_private).then(function() {
      $input.val("");
      return _promiseToCallListSharedInvites(is_private).then(function(response) {
        _setSharedInvitesIntoModel(response.data.invites, is_private);
        _rebuildEmailedInvitations(invite_id);
        _addSentEmailsFeedback(invite_id);
      });
    }).catch(_handleError);
  };
  var _setSharedChannelsIntoModel = function(shared_channels, is_private) {
    if (shared_channels.length) {
      shared_channels = shared_channels.map(function(shared_channel) {
        var model_ob = TS.shared.getModelObById(shared_channel.channel);
        return $.extend({}, shared_channel, model_ob);
      });
    }
    if (is_private) {
      _private_shared_channels = shared_channels;
    } else {
      _shared_channels = shared_channels;
    }
  };
  var _setSharedInvitesIntoModel = function(shared_invites, is_private) {
    if (is_private) {
      _private_shared_invites = shared_invites;
    } else {
      _shared_invites = shared_invites;
    }
  };
  var _setupTeamNameOverlayEffect = function() {
    var overlay = _$div.find("#sci_channels_create .placeholder_overlay");
    _$div.find('#sci_channels_create input[name="domain"]').on("input", function(e) {
      overlay.toggleClass("hidden", !!$(e.target).val());
    });
  };
  var _setupToggleInput = function() {
    _$div.find('#sci_channels_create [name="access"]').togglify({
      on_text: TS.i18n.t("Public", "shared")(),
      off_text: TS.i18n.t("Private", "shared")(),
      label: _getToggleInputLabel(),
      off_label: _getToggleInputOffLabel(),
      off_class: "ts_toggle_orange",
      initial_state: true
    });
  };
  var _showAction = function(e) {
    _collapseAction();
    var $el = $(e.currentTarget).addClass("showing_sci_action");
    if ($el.is(".sci_send_email_container")) $el.find("input").focus();
  };
  var _showEphemeralCopyLinkFeedback = function($el) {
    var timeout = $el.data("timeout");
    clearTimeout(timeout);
    $el.removeClass("hidden").data("timeout", setTimeout(function() {
      $el.addClass("hidden");
    }, 3e3));
  };
  var _showList = function() {
    if (_list_visible) return;
    if (!_list_built) {
      _startListView();
      _list_visible = true;
      return;
    }
    if (_list_built) {
      _list_visible = true;
      _$list.longListView("setHidden", false);
      _$list.longListView("setItems", _getListItems(), true);
      TS.utility.rAF(function() {
        TS.ui.utility.updateClosestMonkeyScroller(_$list);
      });
    }
  };
  var _sortChannels = function(sort_by) {
    var sorts = ["name", "creator", "created", "members_high", "members_low"];
    var sort = "name";
    if (sorts.indexOf(sort_by) !== -1) sort = sort_by;
    _sortChannelsBy(_getSharedChannelsFromModel(), sort);
    _sortChannelsBy(_getSharedChannelsFromModel(true), sort);
  };
  var _sortChannelsBy = function(channels, sort) {
    if (sort === "name") {
      channels.sort(function(a, b) {
        if (a._name_lc > b._name_lc) return 1;
        if (b._name_lc > a._name_lc) return -1;
        return 0;
      });
    } else if (sort === "creator") {
      channels.sort(function(a, b) {
        var a_creator;
        var b_creator;
        a_creator = TS.members.getMemberById(a.creator);
        b_creator = TS.members.getMemberById(b.creator);
        if (a_creator && b_creator) {
          if (a_creator._name_lc > b_creator._name_lc) return 1;
          if (b_creator._name_lc > a_creator._name_lc) return -1;
          return 0;
        } else if (a_creator && !b_creator) {
          return -1;
        } else if (!a_creator && b_creator) {
          return 1;
        }
        return 0;
      });
    } else if (sort === "created") {
      channels.sort(function(a, b) {
        if (a.created < b.created) return 1;
        if (b.created < a.created) return -1;
        return 0;
      });
    } else if (sort === "members_high") {
      channels.sort(function(a, b) {
        var num_a = _numMembers(a);
        var num_b = _numMembers(b);
        if (num_a < num_b) return 1;
        if (num_b < num_a) return -1;
        return 0;
      });
    } else if (sort === "members_low") {
      channels.sort(function(a, b) {
        var num_a = _numMembers(a);
        var num_b = _numMembers(b);
        if (num_a > num_b) return 1;
        if (num_b > num_a) return -1;
        return 0;
      });
    }
  };
  var _start = function() {
    var show_create_shared_channel_btn = TS.permissions.members.canCreateConvertOrgSharedChannels();
    var settings = {
      body_template_html: TS.templates.shared_channels_invites_modal({
        show_create_shared_channel_btn: show_create_shared_channel_btn
      }),
      onShow: _onShow,
      onCancel: _onCancel,
      modal_class: "fs_modal_internal_scroll convert_to_shared_dialog"
    };
    TS.ui.fs_modal.start(settings);
  };
  var _startListView = function() {
    _list_built = true;
    var list_items = _getListItems();
    var long_list_view_args = {
      items: list_items,
      approx_item_height: 60,
      preserve_dom_order: true,
      approx_divider_height: 35,
      pin_dividers: true,
      makeElement: function(data) {
        var $el = $(TS.templates.channel_browser_row({
          is_shared: true
        }));
        data.$icon = $el.find(".channel_browser_type_icon");
        data.$name = $el.find(".channel_browser_channel_name");
        data.$creator = $el.find(".channel_browser_created_by");
        data.$date = $el.find(".channel_browser_created_on");
        data.$purpose = $el.find(".channel_browser_channel_purpose");
        data.$member_count_container = $el.find(".channel_browser_member_count_container");
        data.$member_count = $el.find(".channel_browser_member_count");
        data.$open = $el.find(".channel_browser_open");
        data.$preview = $el.find(".channel_browser_preview");
        data.$joined = $el.find(".channel_browser_joined");
        data.$shared_channel_icon = $el.find(".shared_channel_icon");
        data.$teams = $el.find(".teams");
        return $el;
      },
      makeDivider: function() {
        return $("<div>").addClass("channel_browser_divider");
      },
      renderItem: function($el, item, data) {
        if (TS.shared.isModelObOrgShared(item)) {
          data.$shared_channel_icon.removeClass("hidden");
        } else {
          data.$shared_channel_icon.addClass("hidden");
        }
        if (item.is_channel) {
          data.$icon.removeClass("ts_icon_lock").addClass("ts_icon_channel_pane_hash");
        } else {
          data.$icon.removeClass("ts_icon_channel_pane_hash").addClass("ts_icon_lock");
        }
        data.$name.text(item.name ? item.name : "");
        var creator = TS.members.getMemberById(item.creator);
        if (creator) {
          data.$creator.removeClass("hidden");
          data.$creator.find(".channel_browser_creator_name").text(TS.members.getMemberDisplayName(creator));
        } else {
          data.$creator.addClass("hidden");
        }
        data.$date.text(TS.utility.date.toCalendarDate(item.created));
        var member_count = _numMembers(item);
        data.$member_count.text(member_count);
        if (item.purpose && item.purpose.value) {
          var purpose_html = TS.utility.formatTopicOrPurpose(item.purpose.value);
          purpose_html = purpose_html.replace(/<a .*?>(.*?)<\/a>/g, "$1");
          data.$purpose.removeClass("hidden").html(purpose_html);
        } else {
          data.$purpose.text("").addClass("hidden");
        }
        var is_member = item.is_member || item.is_group;
        if (is_member) {
          data.$open.removeClass("hidden");
          data.$preview.addClass("hidden");
          data.$joined.removeClass("hidden");
        } else {
          data.$open.addClass("hidden");
          data.$preview.removeClass("hidden");
          data.$joined.addClass("hidden");
        }
        if (item.is_group) {
          $el.removeClass("channel_link").removeAttr("data-channel-id");
          $el.addClass("group_link").attr("data-group-id", item.id);
        } else {
          $el.removeClass("group_link").removeAttr("data-group-id");
          $el.addClass("channel_link").attr("data-channel-id", item.id);
        }
        if (TS.shared.isModelObOrgShared(item)) {
          var team_icons_html = "";
          var additional_teams = 0;
          var shared_teams = [];
          if (item.is_global_shared) {
            TS.model.enterprise_teams.forEach(function(team, index) {
              if (index > 9) {
                additional_teams += 1;
                return;
              }
              shared_teams.push(team);
            });
          } else {
            item.shared_team_ids.forEach(function(id, index) {
              if (index > 9) {
                additional_teams += 1;
                return;
              }
              var team_ob = TS.enterprise.getTeamById(id);
              shared_teams.push(team_ob);
            });
          }
          team_icons_html += TS.templates.shared_channel_list_team_icon({
            teams: shared_teams,
            show_additional_teams: additional_teams > 0,
            additional_teams: additional_teams,
            org_shared: TS.shared.isModelObOrgShared(item)
          });
          data.$teams.html(team_icons_html);
        } else {
          data.$teams.empty();
        }
      },
      renderDivider: function($el, item) {
        $el.text(item.name);
      },
      calcItemHeight: function($el) {
        return $el.outerHeight();
      }
    };
    _$list.longListView(long_list_view_args);
    _bindUI();
    TS.utility.rAF(function() {
      _$list.monkeyScroll();
    });
  };
  var _switchToCreate = function() {
    _managing = false;
    var is_enterprise = _isEnterprise();
    var template_args = {
      reserved_domain: TS.model.team.domain
    };
    if (is_enterprise) template_args.enterprise_info = TS.model.enterprise;
    var html = TS.templates.shared_channels_invites_create(template_args);
    var $create = _$div.find("#sci_channels_create");
    $create.html(html).find("textarea").autogrow();
    _hideAllSectionsBut("#sci_channels_create");
    _hideList();
    $("#fs_modal.convert_to_shared_dialog").toggleClass("fs_modal_internal_scroll", false);
    _$div.find("#sci_header_wrapper").addClass("hidden");
    _setupTeamNameOverlayEffect();
    _setupToggleInput();
    if (is_enterprise) _makeEnterpriseTeamsPicker();
    _$div.find('#sci_channels_create [name="domain"]').focus();
    Ladda.bind('#sci_channels_create [data-action="sci_channels_create"]');
    _updateBackButton();
  };
  var _switchToManage = function() {
    _managing = true;
    _$div.find("#sci_header_wrapper").removeClass("hidden");
    var shared_channels = _getSharedChannelsFromModel();
    var private_shared_channels = _getSharedChannelsFromModel(true);
    var no_shared_channels = !(shared_channels.length || private_shared_channels.length);
    if (no_shared_channels) {
      _updateNoChannelsMessage();
      _hideAllSectionsBut("#sci_no_shared_channels");
      _hideList();
      _bindUI();
      return null;
    }
    _hideAllSectionsBut("#sci_channels_container");
    $("#fs_modal.convert_to_shared_dialog").toggleClass("fs_modal_internal_scroll", true);
    if (TS.model.ui_state && TS.model.ui_state.sort_shared_channel_browser_by) {
      _sortChannels(TS.model.ui_state.sort_shared_channel_browser_by);
    } else {
      _sortChannels(_$sort_by.val());
    }
    _showList();
    _updateBackButton(true);
  };
  var _switchToSend = function(args) {
    _managing = false;
    var html = TS.templates.shared_channels_invites_send(args);
    _$div.find("#sci_send").html(html);
    _hideAllSectionsBut("#sci_send");
    _hideList();
    _updateBackButton();
  };
  var _toggleButton = function($container, $btn, do_validation, is_disabled) {
    if (do_validation) is_disabled = !TS.ui.validation.validate($container, {
      quiet: true,
      fast: true
    });
    $btn.toggleClass("disabled", is_disabled);
  };
  var _toggleContents = function(e) {
    if ($(e.target).is("a, input, .btn")) return;
    var $el = $(e.currentTarget);
    var is_showing = $el.hasClass("showing_contents");
    $el.toggleClass("showing_contents", !is_showing);
    $el.find(".sci_toggle_icon").toggleClass("ts_icon_caret_right", is_showing).toggleClass("ts_icon_caret_down", !is_showing);
  };
  var _toggleCopyLink = function(e) {
    var $el = $(e.target).closest(".sci_invite_container").find(".sci_copy_link_mini_container");
    $el.toggleClass("hidden", !$el.hasClass("hidden"));
    _collapseSendEmail(e);
  };
  var _toggleSendEmail = function(e) {
    var $el = $(e.target).closest(".sci_invite_container").find(".sci_send_email_mini_container");
    $el.toggleClass("hidden", !$el.hasClass("hidden")).find("input").focus();
    _collapseCopyLink(e);
  };
  var _toggleShareWith = function(e) {
    var $el = $(e.target);
    var $container = _$div.find("#sci_channels_create");
    var checked = $el.val();
    var show_specific = checked === "specific";
    var show_external = checked === "external";
    $("#sci_specific_team").toggleClass("hidden", !show_specific);
    $("#sci_external_team").toggleClass("hidden", !show_external);
    $container.find('[for="share_with_specific"]').toggleClass("hidden", !show_specific);
    $container.find('[for="share_with_external"]').toggleClass("hidden", !show_external);
    if (checked === "specific") $container.find('[name="team_list"]').focus();
    if (checked === "external") $container.find('[name="domain"]').focus();
    var do_validation = true;
    _toggleButton($container.find(_getCreateViewValidationSelector()), $container.find('[data-action="sci_channels_create"]'), do_validation);
    _updateToggleInputLabels();
  };
  var _updateBackButton = function(unbind) {
    if (unbind) {
      TS.ui.fs_modal.unbindBackButton();
      TS.ui.fs_modal.hideBackButton();
    } else {
      TS.ui.fs_modal.bindBackButton(_switchToManage);
      TS.ui.fs_modal.showBackButton();
    }
  };
  var _updateNoChannelsMessage = function(query) {
    var _$empty_state = _$div.find("#sci_no_shared_channels");
    var _$msg = _$empty_state.find(".sci_no_shared_note");
    var default_message = TS.i18n.t("You don’t have any shared channels yet.", "shared")();
    if (query) {
      var no_match_warning = TS.i18n.t("No matches found for <strong> {escaped_query_string} </strong>", "shared")({
        escaped_query_string: TS.utility.truncateAndEscape(query, 50)
      });
      _$msg.html(no_match_warning);
    } else {
      _$msg.text(default_message);
    }
  };
  var _updateToggleInputLabels = function() {
    _$div.find(".ts_toggle_on_label").text(_getToggleInputLabel());
    _$div.find(".ts_toggle_off_label").text(_getToggleInputOffLabel());
  };
  var _validateValidInvite = function($el, options) {
    if (!_$div) return true;
    if (!$el.is("input")) return true;
    var $container = $("#sci_channels_create");
    var $domain_el = $el.is('[name="domain"]') ? $el : $container.find("[name=domain]");
    var $channel_el = $el.is("[name=channel_name]") ? $el : $container.find("[name=channel_name]");
    var domain = $domain_el.val();
    var channel = $channel_el.val();
    if (!domain) return true;
    domain = domain.trim();
    channel = channel.trim();
    if (_findSharedInviteByTeamDomainAndChannelName(domain, channel)) {
      if (!options.quiet) $el.addClass("invalid_invite");
      var warning = TS.i18n.t("This invite already exists. Try a different team or channel!", "shared")();
      TS.ui.validation.showWarning($el, warning, options);
      return;
    }
    if ($domain_el === $el) {
      if (channel && !options.quiet && $channel_el.hasClass("invalid_invite")) {
        $channel_el.removeClass("invalid_invite");
        TS.ui.validation.validate($channel_el);
      }
    } else if (domain && !options.quiet && $domain_el.hasClass("invalid_invite")) {
      $domain_el.removeClass("invalid_invite");
      TS.ui.validation.validate($domain_el);
    }
    if (!options.quiet) $el.removeClass("invalid_invite");
    return true;
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.team_picker", {
    STYLES: {
      normal: "normal",
      small: "small"
    },
    onStart: function() {},
    make: function($el, options) {
      options = options || {};
      var prev_query;
      var start_regex;
      var suffix_regex;
      if (!options.append) $el.addClass("hidden");
      options.style = _.get(TS.ui.team_picker.STYLES, options.style, TS.ui.team_picker.STYLES.normal);
      var filter_select_options = {
        append: !!options.append,
        data: _makeTeamsWithPreselectsForTemplate(options.teams || [], options.preselected_ids || []),
        approx_item_height: 38,
        per_page: 50,
        placeholder_text: TS.i18n.t("Add teams", "team_picker")(),
        classes: "team_picker",
        restrict_preselected_item_removal: options.restrict_preselected_item_removal || false,
        single: !!options.single,
        style: options.style,
        template: function(item) {
          var html = TS.templates.invite_team_small({
            team: item.team
          });
          return new Handlebars.SafeString(html);
        },
        tokenTemplate: function(item) {
          var html = TS.templates.invite_team_token({
            team: item.team
          });
          return new Handlebars.SafeString(html);
        },
        filter: function(item, query) {
          var team = item.team;
          if (prev_query !== query) {
            start_regex = new RegExp("^" + TS.utility.regexpEscape(query), "i");
            suffix_regex = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(query), "i");
            prev_query = query;
          }
          return _checkTeamMatch(team, start_regex) || _checkTeamMatch(team, suffix_regex);
        },
        noResultsTemplate: function(query) {
          if (!query) {
            return TS.i18n.t("No teams found", "team_picker")();
          }
          return TS.i18n.t("No teams found matching <strong>{query}</strong>", "team_picker")({
            query: TS.utility.htmlEntities(query)
          });
        }
      };
      $el.lazyFilterSelect(filter_select_options);
    },
    value: function($el) {
      return $el.lazyFilterSelect("value");
    }
  });
  var _makeTeamsWithPreselectsForTemplate = function(teams, preselected_ids) {
    return teams && teams.map(function(team) {
      return {
        team: team,
        preselected: preselected_ids.indexOf(team.id) !== -1
      };
    });
  };
  var _checkTeamMatch = function(team, regex) {
    return team.name && team.name.match(regex);
  };
})();
(function() {
  "use strict";
  TS.registerModule("user_groups", {
    updated_sig: new signals.Signal,
    is_in_bulk_upsert_mode: false,
    onStart: function() {
      if (TS.client) {
        TS.client.login_sig.add(TS.user_groups.onLogin);
      } else if (TS.web) {
        TS.web.login_sig.add(TS.user_groups.onLogin);
      }
      TS.user_groups.sortUserGroupsAndDispatchThrottled = _.debounce(TS.user_groups.sortUserGroupsAndDispatchThrottled, 500);
    },
    onLogin: function() {
      _login_sig_fired = true;
      TS.user_groups.sortUserGroups();
    },
    getUserGroupsByHandle: function(handle) {
      if (!handle || handle === "@") return;
      handle = _.toLower(handle);
      var user_groups = TS.model.user_groups;
      if (!user_groups) return;
      var user_group = _handle_map[handle];
      if (user_group) return user_group;
      for (var i = 0; i < user_groups.length; i += 1) {
        user_group = user_groups[i];
        if (user_group.handle == handle || "@" + user_group.handle == handle) {
          TS.warn(handle + " not in _handle_map?");
          _handle_map["@" + handle] = user_group;
          _handle_map[handle] = user_group;
          return user_group;
        }
      }
      return null;
    },
    getUserGroupsById: function(id) {
      if (TS.model.user && TS.model.user.is_restricted) return false;
      var user_groups = TS.model.user_groups;
      var user_group = _id_map[id];
      if (user_group) return user_group;
      if (!user_groups) return;
      for (var i = 0; i < user_groups.length; i += 1) {
        user_group = user_groups[i];
        if (user_group.id == id) {
          TS.warn(id + " not in _id_map?");
          _id_map[id] = user_group;
          return user_group;
        }
      }
      return null;
    },
    getActiveUserGroups: function(include_idp_usergroups) {
      var user_groups = _.filter(TS.model.user_groups, function(ug) {
        if (include_idp_usergroups) return !ug.date_delete;
        return !ug.date_delete && ug.team_id;
      });
      return user_groups;
    },
    promiseToGetUserGroupMembers: function(id) {
      return TS.api.call("subteams.users.list", {
        subteam: id,
        include_disabled: 1
      }).then(function(resp) {
        var data = resp.data;
        var user_group = TS.user_groups.mergeAndUpsertUserGroupFromUsersListCall(id, data);
        return user_group;
      });
    },
    getUserGroupMembers: function(id, handler) {
      TS.api.call("subteams.users.list", {
        subteam: id,
        include_disabled: 1
      }, function(ok, data) {
        if (ok && data) {
          var user_group = TS.user_groups.mergeAndUpsertUserGroupFromUsersListCall(id, data);
          if (user_group && handler) {
            handler(user_group);
          }
        }
      });
    },
    mergeAndUpsertUserGroupFromUsersListCall: function(id, data) {
      var user_group = TS.user_groups.getUserGroupsById(id);
      if (!user_group) return;
      user_group.users = data.users;
      user_group.user_count = data.users.length;
      TS.user_groups.updated_sig.dispatch(user_group.id);
      return user_group;
    },
    updateMembersOfUserGroup: function(data, handler) {
      TS.api.call("subteams.users.update", data, handler);
    },
    createUserGroup: function(data, handler) {
      TS.api.call("subteams.create", data, handler);
    },
    updateUserGroup: function(data, handler) {
      TS.api.call("subteams.update", data, handler);
    },
    enableUserGroup: function(user_group_id, handler) {
      TS.api.call("subteams.enable", {
        subteam: user_group_id
      }, handler);
    },
    disableUserGroup: function(user_group_id, handler) {
      TS.api.call("subteams.disable", {
        subteam: user_group_id
      }, handler);
    },
    deleteUserGroup: function(user_group_id, handler) {
      TS.api.call("subteams.delete", {
        subteam: user_group_id,
        include_disabled: 1
      }, handler);
    },
    ensureUserGroupMembersInModelObNumIsKnown: function(user_group_id, model_ob_id) {
      var user_group = TS.user_groups.getUserGroupsById(user_group_id);
      var channel = TS.channels.getChannelById(model_ob_id) || TS.groups.getGroupById(model_ob_id);
      if (!user_group || !channel) {
        return Promise.resolve();
      }
      if (_.isUndefined(user_group.users)) {
        if (!_pending_group_request_promises[user_group_id]) {
          _pending_group_request_promises[user_group_id] = TS.user_groups.promiseToGetUserGroupMembers(user_group_id).then(function(updated_group) {
            if (updated_group && updated_group.users) {
              var known_membership_promise;
              if (TS.membership && TS.membership.lazyLoadChannelMembership()) {
                known_membership_promise = TS.membership.ensureChannelMembershipIsKnownForUsers(channel.id, updated_group.users);
              } else {
                known_membership_promise = Promise.resolve();
              }
              return known_membership_promise;
            }
          }).finally(function() {
            delete _pending_group_request_promises[user_group_id];
          });
          return _pending_group_request_promises[user_group_id];
        }
        return _pending_group_request_promises[user_group_id];
      }
      if (TS.membership && TS.membership.lazyLoadChannelMembership()) {
        return TS.membership.ensureChannelMembershipIsKnownForUsers(channel.id, user_group.users);
      }
      return Promise.resolve();
    },
    getUserGroupMembersNotInModelObCount: function(user_group_id, model_ob_id) {
      var user_group = TS.user_groups.getUserGroupsById(user_group_id);
      var user_group_count = _.get(user_group, "users.length");
      var channel = TS.channels.getChannelById(model_ob_id) || TS.groups.getGroupById(model_ob_id);
      if (!user_group || !channel) {
        return 0;
      }
      if (_.isUndefined(user_group.users)) {
        return 0;
      }
      if (TS.membership && TS.membership.lazyLoadChannelMembership() && !TS.membership.isChannelMembershipKnownForUsers(channel.id, user_group.users)) {
        return 0;
      }
      var members = user_group.users.filter(function(member_id) {
        var user_membership = TS.membership.getUserChannelMembershipStatus(member_id, channel);
        return user_membership.is_known && user_membership.is_member;
      });
      return user_group_count - members.length;
    },
    upsertUserGroup: function(user_group) {
      if (TS.model.user && TS.model.user.is_restricted) return false;
      var existing_user_group = TS.user_groups.getUserGroupsById(user_group.id);
      user_group._name_lc = user_group.name.toLowerCase();
      if (existing_user_group) {
        if (TS.pri) TS.log(4, 'updating existing User Group "' + user_group.id + '"');
        var user_user_group = TS.model.your_user_group_regex[user_group.id];
        if (user_user_group) TS.user_groups.removeSelfUserGroup(existing_user_group.id);
        for (var k in user_group) {
          if (existing_user_group[k] != user_group[k]) {
            existing_user_group[k] = user_group[k];
          }
        }
        if (!user_group.date_delete && user_group.users && user_group.users.indexOf(TS.model.user.id) !== -1) {
          if (!TS.user_groups.getUserGroupsById(user_group.id)) {
            TS.model.user_groups.push(user_group);
          }
          TS.user_groups.upsertSelfUserGroup(existing_user_group.id);
          _assignMapsForGroup(user_group);
        }
      } else if (!user_group.date_delete) {
        TS.log(4, 'Adding user group "' + user_group.id + '"');
        if (!TS.user_groups.getUserGroupsById(user_group.id)) {
          TS.model.user_groups.push(user_group);
        }
        _assignMapsForGroup(user_group);
      }
      if (!TS.user_groups.is_in_bulk_upsert_mode) TS.user_groups.sortUserGroupsAndDispatchThrottled();
    },
    sortUserGroupsAndDispatch: function() {
      TS.user_groups.sortUserGroups();
      TS.user_groups.updated_sig.dispatch();
    },
    sortUserGroupsAndDispatchThrottled: function() {
      return TS.user_groups.sortUserGroupsAndDispatch();
    },
    startBatchUpsert: function() {
      if (TS.user_groups.is_in_bulk_upsert_mode) return false;
      TS.user_groups.is_in_bulk_upsert_mode = true;
      return true;
    },
    finishBatchUpsert: function() {
      if (!TS.user_groups.is_in_bulk_upsert_mode) return false;
      TS.user_groups.is_in_bulk_upsert_mode = false;
      TS.user_groups.sortUserGroupsAndDispatch();
      return true;
    },
    sortUserGroups: function() {
      if (!_login_sig_fired) return;
      TS.model.user_groups.sort(TS.i18n.mappedSorter("_name_lc"));
    },
    upsertUserGroupAndSignal: function(user_group) {
      TS.user_groups.upsertUserGroup(user_group);
      TS.user_groups.updated_sig.dispatch(user_group.id);
    },
    userGroupMembersChanged: function(data) {
      TS.info("TS.user_groups.userGroupMembersChanged");
      var user_group = TS.user_groups.getUserGroupsById(data.subteam_id);
      if (!user_group) return;
      if (user_group.users) {
        if (data.added_users) user_group.users = _.union(user_group.users, data.added_users);
        if (data.removed_users) user_group.users = _.difference(user_group.removed_users, data.removed_users);
      }
      user_group.user_count = parseInt(user_group.user_count, 10) || 0;
      user_group.user_count += parseInt(data.added_users_count, 10) || 0;
      user_group.user_count = Math.max(0, user_group.user_count - (data.removed_users_count || 0));
      user_group.date_previous_update = _.assign(user_group, _.pick(data, ["date_update", "date_previous_update"]));
    },
    removeUserGroup: function(user_group) {
      var existing_user_group = TS.user_groups.getUserGroupsById(user_group.id);
      if (existing_user_group) {
        TS.user_groups.removeSelfUserGroup(existing_user_group.id);
        _deleteMapsForGroup(existing_user_group);
        existing_user_group.date_delete = -1;
      }
    },
    removeUserGroupAndSignal: function(user_group) {
      TS.user_groups.removeUserGroup(user_group);
      TS.user_groups.updated_sig.dispatch(user_group.id);
    },
    upsertSelfUserGroup: function(user_group_id) {
      var existing_user_group_regex = TS.model.your_user_group_regex[user_group_id];
      if (existing_user_group_regex) TS.user_groups.removeSelfUserGroup(user_group_id);
      var ug = TS.user_groups.getUserGroupsById(user_group_id);
      if (ug && !ug.date_delete) {
        var user_group_regex = new RegExp("<!subteam\\^(" + ug.id + (ug.handle ? "|" + ug.handle : "") + ")\\b");
        TS.model.your_user_group_regex[ug.id] = user_group_regex;
        if (ug.handle) {
          TS.model.highlight_words.push("@" + ug.handle);
          TS.model.highlight_words_regex = null;
        }
      }
    },
    removeSelfUserGroup: function(user_group_id) {
      TS.model.your_user_group_regex[user_group_id] = null;
      delete TS.model.your_user_group_regex[user_group_id];
      var ug = TS.user_groups.getUserGroupsById(user_group_id);
      if (ug) {
        if (ug.handle) _.pull(TS.model.highlight_words, "@" + ug.handle);
        _deleteMapsForGroup(ug);
        TS.model.highlight_words_regex = null;
        TS.user_groups.updated_sig.dispatch(ug.id);
      }
    },
    ensureUserGroupsArePresent: function(user_group_ids) {
      var unknown_ids = [];
      user_group_ids.forEach(function(id) {
        if (!TS.user_groups.getUserGroupsById(id)) unknown_ids.push(id);
      });
      if (!unknown_ids.length) return Promise.resolve();
      return _promiseToGetUserGroups(unknown_ids);
    },
    test: function() {
      return {
        clearUseGroupMaps: _clearUseGroupMaps
      };
    }
  });
  var _handle_map = {};
  var _id_map = {};
  var _promiseToGetUserGroups = function(user_group_ids) {
    var clauses = [];
    user_group_ids.forEach(function(id) {
      clauses.push({
        type: "and",
        clauses: [{
          type: "is",
          value: "group"
        }, {
          type: "id",
          value: id
        }]
      });
    });
    var api_options = {
      count: user_group_ids.length,
      include_usergroups: true,
      query: {
        type: "or",
        clauses: clauses
      }
    };
    api_options.query = JSON.stringify(api_options.query);
    return TS.api.callImmediately("search.enterprise", api_options).then(function(response) {
      if (response.data.items && response.data.items.length) {
        TS.user_groups.startBatchUpsert();
        response.data.items.forEach(function(ug) {
          TS.user_groups.upsertUserGroup(ug);
        });
        TS.user_groups.finishBatchUpsert();
      }
      return null;
    });
  };
  var _clearUseGroupMaps = function() {
    _handle_map = {};
    _id_map = {};
  };
  var _assignMapsForGroup = function(user_group) {
    if (!user_group) return;
    if (user_group.handle) {
      _handle_map[user_group.handle] = user_group;
      _handle_map["@" + user_group.handle] = user_group;
    }
    _id_map[user_group.id] = user_group;
  };
  var _deleteMapsForGroup = function(user_group) {
    if (!user_group) return;
    if (user_group.handle) {
      delete _handle_map[user_group.handle];
      delete _handle_map["@" + user_group.handle];
    }
    delete _id_map[user_group.id];
  };
  var _pending_group_request_promises = {};
  var _login_sig_fired;
})();
(function() {
  "use strict";
  TS.registerModule("ui.admin_user_groups", {
    user_groups_fetched: new signals.Signal,
    onStart: function() {
      $("body").on("click", '[data-action="admin_user_groups_modal"]', function() {
        _start();
      });
      $("body").on("click", '[data-action="admin_user_groups_modal_new"]', function() {
        TS.ui.admin_user_groups.add();
      });
    },
    start: function() {
      _start();
    },
    add: function() {
      _start();
      _close_when_done = true;
      _switchSettingsFormView();
    },
    editInfo: function(user_group) {
      _start();
      _close_when_done = true;
      _switchSettingsFormView(user_group);
    },
    editMembers: function(user_group) {
      _start();
      _close_when_done = true;
      _switchMembersFormView(user_group, false);
    },
    disable: function(user_group) {
      _start();
      _close_when_done = true;
      _switchToggleView(user_group, "disable_user_group");
    },
    enable: function(user_group) {
      _start();
      _close_when_done = true;
      _switchToggleView(user_group, "enable_user_group");
    },
    remove: function(user_group) {
      _start();
      _close_when_done = true;
      _switchToggleView(user_group, "delete_user_group");
    },
    test: function() {
      var test_ob = {
        _isFullLocalMember: _isFullLocalMember
      };
      Object.defineProperty(test_ob, "_isFullLocalMember", {
        get: function() {
          return _isFullLocalMember;
        },
        set: function(v) {
          _isFullLocalMember = v;
        }
      });
      return test_ob;
    }
  });
  var _$div;
  var _$all_user_groups;
  var _$user_groups_form_div;
  var _$user_groups_toggle_div;
  var _refresh_list = true;
  var _user_groups = [];
  var _temp_user_group;
  var _close_when_done = false;
  var _start = function() {
    var body_template_html = TS.templates.user_group_modal({
      show_info_pane: !TS.model.prefs.hide_user_group_info_pane,
      show_user_groups_add: TS.permissions.members.canCreateAndDeleteUserGroups()
    });
    var settings = {
      body_template_html: body_template_html,
      onShow: _onShow,
      onCancel: _onCancel
    };
    TS.ui.fs_modal.start(settings);
  };
  var _onShow = function() {
    _$div = $("#user_groups_container");
    _$all_user_groups = $("#all_user_groups");
    _$user_groups_form_div = $("#user_groups_form_div");
    _$user_groups_toggle_div = $("#user_groups_toggle_div");
    _switchListView();
    _$div.find('[data-action="open_form"]').on("click", function(e) {
      e.preventDefault();
      var id = $(this).closest(".user_group_item").data("user-group-id");
      var user_group = _getUserGroupFromId(id);
      _switchSettingsFormView(user_group);
    });
  };
  var _onCancel = function() {
    _refresh_list = true;
    if (_temp_user_group) {
      TS.user_groups.deleteUserGroup(_temp_user_group.id);
    }
    _$div = null;
    _$all_user_groups = null;
    _$user_groups_form_div = null;
    _$user_groups_toggle_div = null;
    _close_when_done = false;
    _$monkey_scroll = null;
    _$icon_close = null;
    $(window).off("resize", _onResizeList);
  };
  var _onReset = function(e) {
    if (e) e.preventDefault();
    if (!_close_when_done) {
      _switchListView();
    } else {
      TS.ui.fs_modal.close();
      _$monkey_scroll = null;
    }
  };
  var _onUpdateComplete = function() {
    if (!_close_when_done) {
      _refresh_list = true;
      _switchListView();
    } else {
      TS.ui.fs_modal.close();
      _$monkey_scroll = null;
    }
  };
  var _bindBackButton = function() {
    if (!_close_when_done) {
      TS.ui.fs_modal.bindBackButton(_switchListView);
      TS.ui.fs_modal.showBackButton();
    }
  };
  var _findAutoUserGroup = function(auto_type) {
    if (!_user_groups || !auto_type) return false;
    for (var i = 0, j = _user_groups.length; i < j; i += 1) {
      if (_user_groups[i].auto_type === auto_type) {
        return _user_groups[i];
      }
    }
    return false;
  };
  var _alertIfNotOk = function(ok, data) {
    if (!ok) {
      var group_name = $("#user_group_name_input").val() || "";
      var group_handle = $("#user_group_handle_input").val() || "";
      data.group_name = group_name;
      data.group_handle = group_handle;
      if (data.error && (data.error === "forbidden_handle" || data.error === "forbidden_name")) {
        var combined_input = group_name + group_handle;
        if (combined_input) {
          var auto_owners = _findAutoUserGroup("owner");
          var auto_admins = _findAutoUserGroup("admin");
          var looks_like_admin_group = !!combined_input.match(/admins/i);
          var looks_like_owner_group = !!combined_input.match(/owners/i);
          data.suggest_auto_group = true;
          data.can_create_auto_owners = looks_like_owner_group && TS.model.user.is_admin && !auto_owners;
          data.can_enable_auto_owners = looks_like_owner_group && auto_owners && auto_owners.date_delete;
          data.can_create_auto_admins = looks_like_admin_group && TS.model.user.is_admin && !auto_admins;
          data.can_enable_auto_admins = looks_like_admin_group && auto_admins && auto_admins.date_delete;
        }
      }
      $("#user_group_alerts").html(TS.templates.user_group_alerts(data));
      return true;
    }
    return false;
  };
  var _onResizeList = function() {
    var $groups_header = $("#user_groups_header");
    if (!$groups_header.length) return;
    var $list = $("#user_groups_list_div");
    if (!$list.length) return;
    var groups_header_padding = parseInt($groups_header.css("padding-top"), 10);
    var header_height = $groups_header[0].offsetHeight;
    var window_height = $(window).height();
    var min_list_height = 250;
    var height = Math.max(min_list_height, window_height - header_height - groups_header_padding);
    $list.css("height", height);
  };
  var _switchListView = function(highlight_id) {
    if (_refresh_list) {
      var $user_group_list = $("#user_groups_list_div");
      $user_group_list.html(Handlebars.helpers.loadingHTML());
      TS.api.call("subteams.list", {
        include_disabled: 1,
        include_users: 1
      }, function(ok, data) {
        if (_alertIfNotOk(ok, data)) return;
        _user_groups = data.subteams;
        for (var i = 0, j = _user_groups.length; i < j; i += 1) {
          _user_groups[i]._name_lc = _user_groups[i].name.toLowerCase();
        }
        _user_groups.sort(TS.i18n.mappedSorter("_name_lc"));
        TS.ui.admin_user_groups.user_groups_fetched.dispatch(_user_groups);
        _refreshList();
        _bindListUI();
        if (highlight_id) {
          $('#fs_modal [data-user-group-id="' + highlight_id + '"]').addClass("highlight_yellow");
          $("#fs_modal").animate({
            scrollTop: $(".highlight_yellow").offset().top
          }, 500);
        }
      });
      _refresh_list = false;
    }
    _$all_user_groups.removeClass("hidden");
    _$user_groups_form_div.addClass("hidden");
    _$user_groups_toggle_div.addClass("hidden");
    TS.ui.fs_modal.hideBackButton();
  };
  var _bindListUI = function() {
    $(window).on("resize", _onResizeList);
    _onResizeList();
    $("#user_groups_list_div").monkeyScroll();
    _$monkey_scroll = $("#user_groups_list_div").data("monkeyScroll");
    $("#user_group_modal_search").on("keydown keyup change", _updateSearch);
    _$icon_close = $("#user_groups_header .user_groups_search .icon_close");
    _$icon_close.off("click").on("click", _clearSearch);
    _$all_user_groups.off("click");
    _$all_user_groups.on("click", '[data-action="open_form"]', function(e) {
      e.preventDefault();
      var $target = $(e.target);
      var id = $target.closest(".user_group_item").data("user-group-id");
      var user_group = _getUserGroupFromId(id);
      _switchSettingsFormView(user_group);
    });
    _$all_user_groups.on("click", '[data-action="edit_members"]', function(e) {
      e.preventDefault();
      var $target = $(e.target);
      var id = $target.closest(".user_group_item").data("user-group-id");
      var user_group = _getUserGroupFromId(id);
      _switchMembersFormView(user_group);
    });
    _$all_user_groups.on("click", '[data-action="hide_info_pane"]', function(e) {
      e.preventDefault();
      TS.prefs.setPrefByAPI({
        hide_user_group_info_pane: true
      }, function(ok, data) {
        if (_alertIfNotOk(ok, data)) return;
        _$div.find(".info_panel").addClass("hidden");
      });
    });
    _$all_user_groups.on("click", ".user_group_toggle_btn", function(e) {
      e.preventDefault();
      var $target = $(e.target).closest("button, a");
      var id = $target.closest(".user_group_item").data("user-group-id");
      var action = $target.data("action");
      var user_group = _getUserGroupFromId(id);
      _switchToggleView(user_group, action);
    });
    _$all_user_groups.on("click", ".clear_members_filter", _clearSearch);
    var autoMethodHandler = function(ok, data) {
      if (ok) {
        _refresh_list = true;
        _close_when_done = false;
        _switchListView(data.subteam && data.subteam.id ? data.subteam.id : null);
      }
    };
    var auto_methods = {
      owners: {
        create: function() {
          TS.api.call("subteams.createAuto", {
            type: "owner"
          }, autoMethodHandler);
        },
        enable: function() {
          var user_group = _findAutoUserGroup("owner");
          if (!user_group) return;
          TS.user_groups.enableUserGroup(user_group.id, autoMethodHandler);
        }
      },
      admins: {
        create: function() {
          TS.api.call("subteams.createAuto", {
            type: "admin"
          }, autoMethodHandler);
        },
        enable: function() {
          var user_group = _findAutoUserGroup("admin");
          if (!user_group) return;
          TS.user_groups.enableUserGroup(user_group.id, autoMethodHandler);
        }
      }
    };
    _$user_groups_form_div.off("click").on("click", "a.user_group_auto_action", function(e) {
      var $target = $(e.target);
      var type = $target.data("auto-type");
      var action = $target.data("auto-action");
      if (auto_methods[type] && auto_methods[type][action]) {
        auto_methods[type][action]();
        e.preventDefault();
        return false;
      }
    });
  };
  var _switchToggleView = function(user_group, action) {
    if (!user_group) {
      TS.warn("Cannot switch toggle view to undefined User Group");
      return;
    }
    _$user_groups_toggle_div.html(TS.templates.user_group_toggle({
      action: action,
      user_group: user_group
    }));
    _$user_groups_toggle_div.find('[data-action="cancel"]').on("click", _onReset);
    _$user_groups_toggle_div.find(".user_group_toggle_btn").on("click", function() {
      var action = $(this).data("action");
      TS.user_groups[action](user_group.id, function(ok, data) {
        if (_alertIfNotOk(ok, data)) return;
        if (action === "enableUserGroup") {
          _enableUserGroup(user_group);
        }
        _onUpdateComplete();
      });
    });
    _$user_groups_toggle_div.find('[data-action="switch_delete_user_group"]').on("click", function(e) {
      e.preventDefault();
      _switchToggleView(user_group, "delete_user_group");
    });
    _$all_user_groups.addClass("hidden");
    _$user_groups_toggle_div.removeClass("hidden");
    _bindBackButton();
  };
  var _enableUserGroup = function(user_group) {
    var ug = TS.user_groups.getUserGroupsById(user_group.id);
    if (!ug) TS.user_groups.upsertUserGroup(_.cloneDeep(user_group));
  };
  var _switchSettingsFormView = function(user_group) {
    _$user_groups_form_div.html(TS.templates.user_group_settings_form(user_group));
    var channels = TS.channels.getUnarchivedChannelsForUser().map(function(option) {
      return {
        id: option.id,
        name: option.name,
        is_shared: option.is_shared
      };
    });
    var groups = TS.groups.getUnarchivedGroups().map(function(option) {
      return {
        id: option.id,
        name: option.name,
        is_group: true,
        is_shared: option.is_shared
      };
    });
    var options = channels.concat(groups);
    if (user_group) {
      var default_channels_groups = user_group.prefs.channels.concat(user_group.prefs.groups);
      default_channels_groups.forEach(function(item) {
        for (var i = 0; i < options.length; i += 1) {
          if (item == options[i].id) {
            options[i].selected = true;
            break;
          }
        }
      });
    }
    var opts = {
      data: options,
      template: function(item) {
        var shared_string = ' <ts-icon class="ts_icon_shared_channel ts_icon_inherit"></ts-icon>';
        var template;
        if (item.is_group) {
          template = '<ts-icon class="ts_icon_lock ts_icon_inherit"></ts-icon>';
        } else {
          template = "#";
        }
        template += TS.utility.htmlEntities(item.name);
        if (item.is_shared) template += shared_string;
        return new Handlebars.SafeString(template);
      },
      placeholder_text: "",
      filter: function(item, query) {
        var start_regex = new RegExp("^" + TS.utility.regexpEscape(query), "i");
        var prefix_regex = new RegExp("^" + TS.utility.regexpEscape(query.replace("#", "")), "i");
        var suffix_regex = new RegExp("(-|_|\\+|\\s|\\.|#)" + TS.utility.regexpEscape(query), "i");
        return item.name.match(prefix_regex) || item.name.match(start_regex) || item.name.match(suffix_regex);
      }
    };
    $("#user_group_default_channels").lazyFilterSelect(opts);
    _bindSettingsFormUI(user_group);
    _$all_user_groups.addClass("hidden");
    _$user_groups_form_div.removeClass("hidden");
    _bindBackButton();
  };
  var _bindSettingsFormUI = function(user_group) {
    var save_function;
    var is_new;
    var user_group_id;
    if (user_group) {
      save_function = TS.user_groups.updateUserGroup;
      is_new = false;
      user_group_id = user_group.id;
    } else {
      save_function = TS.user_groups.createUserGroup;
      is_new = true;
    }
    var $user_group_handle_input = $("#user_group_handle_input");
    $user_group_handle_input.on("input", function() {
      $(this).closest(".handle_input").toggleClass("empty", !this.value.length);
    });
    _$user_groups_form_div.find(".user_group_settings_form").on("submit", function(e) {
      e.preventDefault();
      var name = $('input[name="name"]').val();
      var handle = $('input[name="handle"]').val();
      var description = $('input[name="description"]').val();
      var channels = $("#user_group_default_channels").lazyFilterSelect("value");
      channels = channels.map(function(channel) {
        return channel.id;
      });
      var args = {
        name: name,
        handle: handle,
        description: description,
        channels: channels
      };
      if (user_group_id) args.subteam = user_group_id;
      save_function(args, function(ok, data) {
        if (_alertIfNotOk(ok, data)) return;
        if (is_new) {
          _temp_user_group = data.subteam;
          _switchMembersFormView(data.subteam, is_new);
        } else {
          _onUpdateComplete();
        }
      });
    });
    _$user_groups_form_div.find(".user_group_settings_form").on("reset", _onReset);
    var $button = $("#save_user_group");
    var $input = $("#user_group_name_input");

    function inputChange() {
      var value = $input.val();
      if (value && value.length) {
        $button.removeAttr("disabled");
      } else {
        $button.attr("disabled", true);
      }
    }
    if ($button.length && $input.length) {
      $input.on("change", inputChange);
      $input.on("keyup", inputChange);
      inputChange();
    }
  };
  var _switchMembersFormView = function(user_group, is_new) {
    var is_locked = !!user_group.is_external || !!user_group.auto_type;
    var data;
    if (!TS.lazyLoadMembersAndBots()) {
      data = TS.members.getMembersForUser().filter(_isFullLocalMember).map(function(member) {
        return {
          member: member
        };
      });
    }
    var renderForm = function() {
      _$user_groups_form_div.html(TS.templates.user_group_members_form({
        is_new: is_new,
        is_locked: is_locked,
        user_group: user_group
      }));
    };
    var renderUI = function() {
      var $member_count = $("#member_count");
      var member_count = user_group.user_count || 0;
      var updateForm = function() {
        var $button = $(is_new ? "#create_group" : "#save_group");
        if ($button.length) {
          if (member_count < 1) {
            $button.prop("disabled", true);
          } else {
            $button.prop("disabled", false);
          }
        }
      };
      var opts = {
        approx_item_height: 50,
        template: function(item) {
          var html = TS.templates.user_group_invite_member_small(item);
          return new Handlebars.SafeString(html);
        },
        onItemAdded: function() {
          member_count += 1;
          $member_count.html(member_count);
          updateForm();
        },
        onItemRemoved: function() {
          member_count -= 1;
          $member_count.html(member_count);
          updateForm();
        },
        filter: function(item, query) {
          var member = item.member;
          if (query.charAt(0) === "@") query = query.substr(1);
          var start_regex = new RegExp("^" + TS.utility.regexpEscape(query), "i");
          var suffix_regex = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(query), "i");
          return TS.utility.members.checkMemberMatch(member, start_regex) || TS.utility.members.checkMemberMatch(member, suffix_regex);
        },
        disabled: !!user_group.is_external || !!user_group.auto_type
      };
      if (TS.lazyLoadMembersAndBots()) {
        opts.data_promise = _buildMembersSelectDataPromise(user_group);
      } else {
        opts.data = data;
      }
      $("#user_group_members_select").lazyFilterSelect(opts);
      _bindMembersFormUI(user_group, is_new);
      _$all_user_groups.addClass("hidden");
      _$user_groups_form_div.removeClass("hidden");
      updateForm();
    };
    if (is_new) {
      renderForm();
      TS.ui.fs_modal.hideBackButton();
      renderUI();
    } else {
      var selected_members;
      var work = function() {
        if (!TS.lazyLoadMembersAndBots()) {
          selected_members = user_group.users;
          selected_members.forEach(function(item) {
            for (var i = 0; i < data.length; i += 1) {
              if (item == data[i].member.id) {
                data[i].selected = true;
                break;
              }
            }
          });
        }
        renderForm();
        _bindBackButton();
        renderUI();
      };
      if (user_group.users === undefined) {
        TS.user_groups.getUserGroupMembers(user_group.id, function(updated_group) {
          if (updated_group && updated_group.users) {
            user_group = updated_group;
            return work();
          }
        });
      } else {
        return work();
      }
    }
  };
  var _buildMembersSelectDataPromise = function(user_group) {
    var first_call = true;
    return function(query, pageNumber) {
      if (query.charAt(0) === "@") query = query.substring(1);
      var should_prepopulate_users = false;
      if (first_call) {
        first_call = false;
        if (_.get(user_group, "users.length")) {
          should_prepopulate_users = true;
        }
      }
      if (should_prepopulate_users) {
        var selected_members = user_group.users.map(TS.members.getMemberById);
        selected_members.sort(TS.members.memberSorterByName);
        var items = selected_members.map(function(member) {
          return {
            member: member,
            lfs_id: String(member.id),
            preselected: true
          };
        });
        return Promise.resolve(items);
      }
      if (pageNumber > 0) {
        return Promise.resolve([]);
      }
      var member_searcher = {
        query: query,
        include_org: TS.boot_data.page_needs_enterprise,
        include_slackbot: false,
        include_self: true,
        full_profile_filter: false,
        include_bots: true
      };
      var load_promise = _getSearchPromise(member_searcher);
      return load_promise;
    };
  };
  var _getSearchPromise = function(searcherOrPromise) {
    return Promise.resolve().then(function() {
      return TS.members.promiseToSearchMembers(searcherOrPromise).then(function(response) {
        var items = [];
        if (response.query === "") {
          items = TS.members.getMembersForUser();
        } else {
          items = response.items;
        }
        response.items = items.filter(function(item) {
          return !item.is_restricted;
        }).map(function(item) {
          return {
            member: item,
            lfs_id: String(item.id)
          };
        });
        return response;
      });
    });
  };
  var _bindMembersFormUI = function(user_group, is_new) {
    _$user_groups_form_div.find(".user_group_members_form").on("submit", function(e) {
      e.preventDefault();
      var members = $("#user_group_members_select").lazyFilterSelect("value");
      members = members.map(function(option) {
        return option.member.id;
      });
      TS.user_groups.updateMembersOfUserGroup({
        subteam: user_group.id,
        users: members
      }, function(ok, data) {
        if (_alertIfNotOk(ok, data)) return;
        _temp_user_group = null;
        _onUpdateComplete();
      });
    });
    _$user_groups_form_div.find(".user_group_members_form").on("reset", function(e) {
      e.preventDefault();
      if (is_new) {
        TS.user_groups.disableUserGroup(user_group.id, function(ok, data) {
          if (_alertIfNotOk(ok, data)) return;
          _temp_user_group = null;
          _onReset(e);
        });
      } else {
        _onReset(e);
      }
    });
  };
  var _updateSearch = function(e) {
    var $input = $(e.target);
    var value = $input.val();
    if (value !== _last_query) {
      _last_query = value;
      _$icon_close.toggleClass("hidden", value === "");
      _refreshList();
    }
  };
  var _clearSearch = function() {
    var $input = $("#user_group_modal_search");
    _last_query = "";
    $input.val("");
    setTimeout(function() {
      $input.focus();
    }, 0);
    _$icon_close.addClass("hidden");
    _refreshList();
  };
  var _refreshList = function() {
    var $list_div = $("#user_groups_list_div");
    var query = _last_query;
    var html;
    $("#user_groups_header .user_groups_search").toggleClass("hidden", !_user_groups.length);
    if (typeof query === "string" && query.length) {
      var user_groups = _user_groups.filter(function(ug) {
        return ug.handle.indexOf(query) !== -1 || ug._name_lc.indexOf(query) !== -1 || ug.description && ug.description.toLowerCase().indexOf(query) !== -1;
      });
      if (user_groups.length) {
        $list_div.html(TS.templates.builders.buildUserGroupListHTML(user_groups));
        if (_$monkey_scroll) _$monkey_scroll.updateFunc();
        return;
      }
      var template_args = {
        query: query,
        tab: {
          label: "User Groups"
        }
      };
      html = '<div class="no_results top_margin">' + TS.templates.team_list_no_results(template_args) + "</div>";
    } else {
      html = TS.templates.builders.buildUserGroupListHTML(_user_groups);
    }
    $list_div.html(html);
    if (_$monkey_scroll) _$monkey_scroll.updateFunc();
  };
  var _isFullLocalMember = function(member) {
    if (!member) return false;
    if (member._is_local && !member.deleted && !member.is_ultra_restricted && !member.is_restricted && !(member.is_bot || member.is_slackbot)) {
      return true;
    }
    return false;
  };
  var _getUserGroupFromId = function(id) {
    if (id) {
      for (var i = 0; i < _user_groups.length; i += 1) {
        if (_user_groups[i].id == id) {
          return _user_groups[i];
        }
      }
    }
  };
  var _last_query;
  var _$monkey_scroll;
  var _$icon_close;
})();
(function() {
  "use strict";
  TS.registerModule("enterprise", {
    enterprise_domain_changed_sig: new signals.Signal,
    onStart: function() {
      if (TS.boot_data.page_needs_enterprise) _maybeSetupEnterpriseModel();
      if (TS.client) TS.client.user_added_to_team_sig.add(TS.enterprise.ensureTeamInModel);
      if (TS.client) TS.client.user_removed_from_team_sig.add(TS.enterprise.ensureTeamInModel);
    },
    getTeamsForMember: function(member, with_shared) {
      var user = TS.model.user;
      if (!member.enterprise_user) return null;
      if (with_shared && !user.enterprise_user) return null;
      if (!TS.model.enterprise || !TS.model.enterprise_teams) return null;
      var all_teams = TS.model.enterprise_teams;
      var member_teams = member.enterprise_user.teams;
      var user_teams = [];
      var teams = {
        all: []
      };
      if (with_shared) {
        user_teams = user.enterprise_user.teams;
        teams.other = [];
        teams.shared = [];
      }
      all_teams.forEach(function(all_team) {
        var has_member = false;
        var has_user = false;
        if (member_teams.indexOf(all_team.id) > -1) {
          has_member = true;
          teams.all.push(all_team);
        }
        if (with_shared && has_member) {
          if (user_teams.indexOf(all_team.id) > -1) has_user = true;
          if (has_user) {
            teams.shared.push(all_team);
          } else {
            teams.other.push(all_team);
          }
        }
      });
      return teams;
    },
    upsertAndSignal: function(enterprise) {
      if (!TS.boot_data.page_needs_enterprise) TS.warn("Unexpected call to TS.enterprise.upsertAndSignal");
      if (!enterprise) return;
      var upsert = TS.enterprise.upsertEnterprise(enterprise);
      if (upsert.status === "CHANGED") {
        if (upsert.what_changed.indexOf("name") != -1) {
          TS.enterprise.enterprise_domain_changed_sig.dispatch(upsert.enterprise);
        }
      }
      return upsert;
    },
    upsertEnterprise: function(enterprise) {
      if (!TS.boot_data.page_needs_enterprise) TS.warn("Unexpected call to TS.enterprise.upsertEnterprise");
      _maybeSetupEnterpriseModel();
      var existing_enterprise = TS.model.enterprise;
      var status = "NOOP";
      var what_changed = [];
      if (enterprise) {
        for (var k in enterprise) {
          if (existing_enterprise[k] != enterprise[k]) {
            if (k === "icon") {
              existing_enterprise[k] = enterprise[k];
              what_changed.push(k);
              status = "CHANGED";
            } else if (existing_enterprise[k] != enterprise[k]) {
              if (enterprise[k] && !TS.utility.isScalar(enterprise[k])) {
                existing_enterprise[k] = enterprise[k];
                TS.warn(k + " is not scalar! it needs to be handled by upsertEnterprise specifically to test if it has changed! " + typeof enterprise[k]);
              } else if (typeof enterprise[k] !== "boolean" || !enterprise[k] != !existing_enterprise[k]) {
                existing_enterprise[k] = enterprise[k];
                what_changed.push(k);
                status = "CHANGED";
              }
            }
          }
        }
      }
      return {
        status: status,
        enterprise: existing_enterprise,
        what_changed: what_changed
      };
    },
    upsertEnterpriseTeam: function(team, do_not_propagate) {
      if (!TS.boot_data.page_needs_enterprise) TS.warn("Unexpected call to TS.enterprise.upsertEnterpriseTeam");
      if (!team || typeof team === "string") return;
      var teams = TS.model.enterprise_teams;
      var existing_enterprise_team = TS.enterprise.getTeamById(team.id);
      var is_current_team = TS.model.team && team.id === TS.model.team.id;
      if (existing_enterprise_team) {
        _.each(_.keys(team), function(k) {
          existing_enterprise_team[k] = team[k];
        });
        team = existing_enterprise_team;
        _maybeSetTopChannels(team);
        _maybeSetCanLeaveTeam(team);
        if (is_current_team) team = _.merge({}, existing_enterprise_team, TS.model.team);
      } else {
        _processNewTeamForUpserting(team);
        if (is_current_team) team = _.merge({}, team, TS.model.team);
        teams.push(team);
        _id_map[team.id] = team;
      }
      if (is_current_team && !do_not_propagate) {
        do_not_propagate = true;
        TS.team.upsertTeam(team, do_not_propagate);
      }
      return team;
    },
    getTeamById: function(id) {
      var teams = TS.model.enterprise_teams;
      var team = _id_map[id];
      if (team) return team;
      if (!teams) return null;
      for (var i = 0; i < teams.length; i += 1) {
        team = teams[i];
        if (team.id === id) {
          TS.warn(id + " not in _id_map?");
          _id_map[id] = team;
          return team;
        }
      }
      return null;
    },
    promiseToEnsureEnterprise: function() {
      if (!TS.boot_data.page_needs_enterprise) TS.warn("Unexpected call to TS.enterprise.promiseToEnsureEnterprise");
      _maybeSetupEnterpriseModel();
      return Promise.all([TS.api.call("enterprise.info", {
        include_primary_owner: true
      }).reflect(), TS.enterprise.promiseToGetTeams().reflect()]).then(function(responses) {
        var rejection_reasons = [];
        responses.forEach(function(response) {
          if (response.isFulfilled()) return;
          rejection_reasons.push(response.reason());
        });
        if (rejection_reasons.length) {
          return Promise.reject(new Error("Some enterprise APIs failed:\n" + rejection_reasons.join("\n")));
        }
        var enterprise = responses[0].value().data.enterprise;
        TS.enterprise.upsertEnterprise(enterprise);
      });
    },
    promiseToGetTeams: function(exclude_discoverable) {
      var calling_args = {
        include_archived: false,
        include_deleted: false,
        include_user_counts: true,
        include_leave_team: true,
        include_join_request: true
      };
      if (exclude_discoverable) calling_args.exclude_discoverable = exclude_discoverable;
      return TS.api.call("enterprise.teams.list", calling_args).reflect().then(function(response) {
        if (!response.isFulfilled()) return Promise.reject(new Error("The API failed:\n" + response.reason()));
        var teams = response.value().data.teams;
        teams.forEach(function(team) {
          TS.enterprise.upsertEnterpriseTeam(team);
        });
        return Promise.resolve(TS.model.enterprise_teams.filter(function(team) {
          if (!exclude_discoverable) return true;
          return exclude_discoverable.indexOf(team.discoverable) < 0;
        }));
      });
    },
    ensureTeamInModel: function(team_id, additional_options) {
      var calling_args = {
        include_user_counts: true,
        include_leave_team: true,
        team: team_id,
        include_join_request: true
      };
      if (TS.model.enterprise_api_token) calling_args.enterprise_token = TS.model.enterprise_api_token;
      if (additional_options) calling_args = _.merge({}, calling_args, additional_options);
      return TS.api.callImmediately("enterprise.teams.info", calling_args).then(function(response) {
        if (!response.data.ok) return false;
        return TS.enterprise.upsertEnterpriseTeam(response.data.team);
      });
    },
    addTeamsToSharedForChannel: function(channel, teams_ids) {
      if (!TS.boot_data.page_needs_enterprise) return;
      if (!channel.is_shared) return;
      if (channel.is_global_shared) return;
      var shared_team_ids = channel.shared_team_ids;
      shared_team_ids = _(shared_team_ids).concat(teams_ids).uniq().value();
      channel.shared_team_ids = shared_team_ids;
    },
    updateSharesForChannel: function(channel, teams_ids) {
      if (!TS.boot_data.page_needs_enterprise) return;
      if (!channel.is_shared) return;
      channel.shared_team_ids = _.uniq(teams_ids);
    },
    isUserOnTeam: function(user, team) {
      return user.enterprise_user.teams.indexOf(team.id) > -1;
    }
  });
  var _id_map = {};
  var _maybeSetupEnterpriseModel = function() {
    if (TS.model.enterprise && TS.model.enterprise_teams) return;
    TS.model.enterprise = _.merge({}, TS.model.enterprise);
    TS.model.enterprise_teams = _.merge([], TS.model.enterprise_teams);
  };
  var _processNewTeamForUpserting = function(team) {
    switch (team.discoverable) {
      case "public":
      case "open":
        team.is_open = true;
        break;
      case "private":
      case "closed":
        team.is_closed = true;
        break;
      case "unlisted":
      default:
        team.is_unlisted = true;
        break;
    }
    if (!team.user_counts) team.user_counts = {};
    if (team.user_counts && !team.user_counts.active_members) team.user_counts.active_members = 0;
    _maybeSetTopChannels(team);
    if (typeof team.joined_date === "undefined") team.joined_date = 0;
    _maybeSetCanLeaveTeam(team);
  };
  var _maybeSetCanLeaveTeam = function(team) {
    if (team.can_leave === false && (team.cannot_leave_reasons && team.cannot_leave_reasons.length === 1 && team.cannot_leave_reasons[0] === "not_team_member") && !team.is_assigned) {
      team.can_leave = true;
      team.cannot_leave_reasons = [];
    }
  };
  var _maybeSetTopChannels = function(team) {
    if (!team.top_combined_channels) team.top_combined_channels = [];
    if (team.your_channels || team.your_groups) {
      var top_combined_channels = [];
      if (team.your_channels) top_combined_channels = top_combined_channels.concat(team.your_channels);
      if (team.your_groups) top_combined_channels = top_combined_channels.concat(team.your_groups);
      team.top_combined_channels = _.uniqBy(team.top_combined_channels.concat(top_combined_channels), "id").sort(function(a, b) {
        var name_a = a.name.toLowerCase();
        var name_b = b.name.toLowerCase();
        if (name_a < name_b) return -1;
        if (name_a > name_b) return 1;
        return 0;
      });
    }
  };
})();
(function() {
  "use strict";
  TS.registerModule("signup", {
    ERROR_BAD_EMAIL_DOMAIN: "bad_email_domain",
    ERROR_DOMAIN_NOT_FOUND: "domain_not_found",
    ERROR_INVALID_CODE: "invalid_code",
    ERROR_MISC: "misc",
    ERROR_MISSING_ARGS: "missing_args",
    ERROR_MISSING_USERNAME: "missing_username",
    ERROR_NO_EMAIL: "no_email",
    ERROR_NO_EMAIL_MISC: "no_email_misc",
    ERROR_NO_TEAM_NAME: "no_team_name",
    ERROR_NO_URL: "no_url",
    ERROR_NO_USERNAME: "no_username",
    ERROR_RATELIMITED: "ratelimited",
    ERROR_URL_BAD: "url_bad",
    ERROR_URL_LONG: "url_long",
    ERROR_URL_NO_LETTER: "url_no_letter",
    ERROR_URL_START_END_DASH: "url_start_end_dash",
    ERROR_URL_TAKEN: "url_taken",
    ERROR_USERNAME_BAD: "username_bad",
    ERROR_USERNAME_LONG: "username_long",
    ERROR_USERNAME_NOT_ALLOWED: "username_not_allowed",
    ERROR_USERNAME_START: "username_start",
    ERROR_USERNAME_TAKEN: "username_taken",
    ERROR_NAME_IS_SLACKBOT: "name_is_slackbot",
    onStart: function() {
      _method = window.callSlackAPIUnauthed ? window.callSlackAPIUnauthed : TS.api.call;
    },
    isBadSignupDomain: function(domain) {
      if (_checked_bad_domains[domain] !== undefined) {
        return Promise.resolve(_checked_bad_domains[domain]);
      }
      return new Promise(function(resolve) {
        _method("signup.checkEmailDomain", {
          domain: domain
        }, function(ok, data) {
          _checked_bad_domains[domain] = !data.ok;
          resolve(!data.ok);
        });
      });
    },
    checkEmail: function(email, options) {
      var check_syntax = TS.utility.email.validateEmail(email, 1);
      if (!check_syntax.is_valid) {
        return Promise.resolve({
          is_valid: false,
          error_key: check_syntax.error_key,
          error_message: check_syntax.error_message
        });
      }
      options = options || {};
      var timeout = options.timeout || 2e3;
      var email_domain = email.split("@")[1];
      options.get_info = options.get_info && _domain_found_mx_records[email_domain] === undefined;
      var check_mx_records = options.get_info;
      if (check_mx_records && timeout) {
        var resolve;
        var has_resolved;
        var timeout_id;
        _checkEmail(email, email_domain, options).then(function(data) {
          if (!has_resolved) {
            has_resolved = true;
            resolve(data);
            clearInterval(timeout_id);
          }
        });
        timeout_id = setTimeout(function() {
          if (!has_resolved) {
            _checkEmail(email, email_domain).then(function(data) {
              if (!has_resolved) {
                has_resolved = true;
                resolve(data);
              }
            });
          }
        }, timeout);
        return new Promise(function(r) {
          resolve = r;
        });
      }
      return _checkEmail(email, email_domain, {
        get_info: check_mx_records
      });
    },
    verifyEmailConfirmationCode: function(email, code) {
      var api_args = {
        email: email,
        code: code
      };
      return new Promise(function(resolve) {
        _method("signup.confirmCode", api_args, function(ok, data) {
          if (ok) {
            return resolve({
              is_valid: true,
              api_response: data
            });
          }
          var error_key = data.error;
          if (error_key === "failed") {
            error_key = TS.signup.ERROR_INVALID_CODE;
          }
          return resolve({
            is_valid: false,
            error_key: error_key,
            error_message: TS.signup.getErrorMessage(error_key)
          });
        });
      });
    },
    checkUsernameSyntax: function(username) {
      var error_key;
      if (!username || !username.length) {
        error_key = TS.signup.ERROR_MISSING_USERNAME;
      } else if (username.length > _MAX_USERNAME_LENGTH) {
        error_key = TS.signup.ERROR_USERNAME_LONG;
      } else if (!_REGEX_USERNAME.test(username)) {
        error_key = TS.signup.ERROR_USERNAME_BAD;
      } else if (!_REGEX_USERNAME_START.test(username)) {
        error_key = TS.signup.ERROR_USERNAME_START;
      }
      if (error_key) {
        return {
          is_valid: false,
          error_key: error_key,
          error_message: TS.signup.getErrorMessage(error_key)
        };
      }
      return {
        is_valid: true
      };
    },
    checkUsernameAvailability: function(username, options) {
      var check_syntax = TS.signup.checkUsernameSyntax(username);
      if (!check_syntax.is_valid) {
        return Promise.resolve({
          is_valid: false,
          error_key: check_syntax.error_key,
          error_message: check_syntax.error_message
        });
      }
      var api_args = {
        username: username
      };
      options = options || {};
      if (options.team_id) api_args.team_id = options.team_id;
      if (options.lead_id) api_args.lead_id = options.lead_id;
      return new Promise(function(resolve) {
        _method("signup.checkUsername", api_args, function(ok, data) {
          if (ok) {
            return resolve({
              is_valid: true
            });
          }
          var error_key = data.error;
          var error_message;
          if (data.error === TS.signup.ERROR_USERNAME_NOT_ALLOWED) {
            error_message = _ERROR_MESSAGES[error_key]({
              username: TS.utility.htmlEntities(username)
            });
          } else if (data.error === "taken") {
            error_key = TS.signup.ERROR_USERNAME_TAKEN;
          }
          var return_data = {
            is_valid: false,
            error_key: error_key,
            error_message: error_message || TS.signup.getErrorMessage(error_key)
          };
          if (!options.get_suggestions) return resolve(return_data);
          if (!options.email) {
            TS.warn("TS.signup.checkUsernameAvailability can only try to get username suggestions when options.email is set");
            return resolve(return_data);
          }
          TS.signup.suggestUsernameFromEmail(options.email).then(function(obj) {
            if (obj.has_suggestion) {
              return_data.has_suggestion = true;
              return_data.suggestion = obj.username;
            }
            return resolve(return_data);
          });
        });
      });
    },
    suggestUsernameFromEmail: function(email, options) {
      var username = email.toLocaleLowerCase().match(/^[a-z0-9]+/gi);
      if (username) username = username[0];
      if (!username || username.length > _MAX_USERNAME_LENGTH) {
        return Promise.resolve({
          has_suggestion: false
        });
      }
      return new Promise(function(resolve) {
        options = options || {};
        var new_options = {
          lead_id: options.lead_id,
          get_suggestions: false
        };
        TS.signup.checkUsernameAvailability(username, new_options).then(function(data) {
          if (data.is_valid) {
            return resolve({
              has_suggestion: true,
              username: username
            });
          }
          return resolve({
            has_suggestion: false
          });
        });
      });
    },
    checkNameSyntax: function(name) {
      if (name && name.toLocaleLowerCase() === "slackbot") {
        var error_key = TS.signup.ERROR_NAME_IS_SLACKBOT;
        return {
          is_valid: false,
          error_key: error_key,
          error_message: TS.signup.getErrorMessage(error_key)
        };
      }
      return {
        is_valid: true
      };
    },
    checkURLSyntax: function(url) {
      var error_key;
      if (url.length > _MAX_URL_LENGTH) {
        error_key = TS.signup.ERROR_URL_LONG;
      } else if (!_REGEX_LETTERS_NUMS_DASHES.test(url)) {
        error_key = TS.signup.ERROR_URL_BAD;
      } else if (_REGEX_NO_START_END_DASH.test(url)) {
        error_key = TS.signup.ERROR_URL_START_END_DASH;
      } else if (!_REGEX_HAS_LETTER.test(url)) {
        error_key = TS.signup.ERROR_URL_NO_LETTER;
      }
      if (error_key) {
        return {
          is_valid: false,
          error_key: error_key,
          error_message: TS.signup.getErrorMessage(error_key)
        };
      }
      return {
        is_valid: true
      };
    },
    checkURLAvailability: function(url, email, options) {
      if (!url || !email) {
        TS.error("TS.signup.checkURLAvailability missing arguments");
        return Promise.resolve({
          is_valid: false,
          error_key: TS.signup.ERROR_MISSING_ARGS,
          error_message: TS.signup.getErrorMessage(TS.signup.ERROR_MISSING_ARGS)
        });
      }
      var check_syntax = TS.signup.checkURLSyntax(url);
      if (!check_syntax.is_valid) {
        return Promise.resolve({
          is_valid: false,
          error_key: check_syntax.error_key,
          error_message: check_syntax.error_message
        });
      }
      var api_args = {
        email: email,
        url: url
      };
      options = options || {};
      if (options.lead_id) api_args.lead_id = options.lead_id;
      return new Promise(function(resolve) {
        _method("signup.checkURL", api_args, function(ok, data) {
          if (ok) {
            return resolve({
              is_available: true
            });
          } else if (data.error === "ratelimited") {
            return resolve({
              error_key: TS.signup.ERROR_RATELIMITED,
              error_message: TS.signup.getErrorMessage(TS.signup.ERROR_RATELIMITED)
            });
          }
          if (data.error === "bad") data.error = TS.signup.ERROR_URL_BAD;
          if (data.error === "taken") data.error = TS.signup.ERROR_URL_TAKEN;
          var return_data = {
            is_available: false,
            error_key: data.error,
            error_message: TS.signup.getErrorMessage(data.error)
          };
          if (!options.get_suggestions) return resolve(return_data);
          TS.signup.suggestURL(url, email).then(function(obj) {
            return_data.available = obj.available;
            return_data.unavailable = obj.unavailable;
            return resolve(return_data);
          });
        });
      });
    },
    suggestURL: function(url, email) {
      if (!url || !email) {
        TS.error("TS.signup.suggestURL missing arguments");
        return Promise.resolve({
          error_key: TS.signup.ERROR_MISSING_ARGS,
          error_message: TS.signup.getErrorMessage(TS.signup.ERROR_MISSING_ARGS)
        });
      }
      var api_args = {
        email: email,
        url: url
      };
      return new Promise(function(resolve) {
        _method("signup.suggestURL", api_args, function(ok, data) {
          if (ok) {
            return resolve({
              available: data.available,
              unavailable: data.unavailable
            });
          }
          return resolve({
            error_key: data.error
          });
        });
      });
    },
    createTeam: function(api_args) {
      if (_create_request_in_progress) return Promise.resolve(false);
      _create_request_in_progress = true;
      return new Promise(function(resolve) {
        _method("signup.createTeam", api_args, function(ok, data) {
          _create_request_in_progress = false;
          if (ok) {
            return resolve({
              team_created: true,
              signin_url: data.url,
              user_id: data.user_id,
              team_id: data.team_id,
              team_id_raw: data.team_id_raw,
              api_token: data.api_token,
              valid_signup_domain: data.valid_signup_domain
            });
          }
          var error_message;
          if (data.error === TS.signup.ERROR_BAD_EMAIL_DOMAIN && TS.utility.email_regex.test(api_args.email)) {
            var email_domain = TS.utility.htmlEntities(api_args.email.split("@")[1]);
            error_message = _ERROR_MESSAGES[data.error]({
              email_domain: email_domain
            });
          }
          return resolve({
            team_created: false,
            error_key: data.error,
            error_message: error_message || TS.signup.getErrorMessage(data.error)
          });
        });
      });
    },
    getErrorMessage: function(error_key, data) {
      return (_ERROR_MESSAGES[error_key] || _ERROR_MESSAGES[TS.signup.ERROR_MISC])(data || {});
    },
    test: function() {
      return {
        error_messages: _ERROR_MESSAGES
      };
    }
  });
  var _ERROR_MESSAGES = {
    bad_email_domain: TS.i18n.t("Sorry, but we do not allow signups from @{email_domain}. Please pick a different email address!", "signup"),
    domain_not_found: TS.i18n.t("Are you sure that address is typed correctly? If there are no mistakes, carry on!", "signup"),
    invalid_code: TS.i18n.t("That code wasn’t valid. Give it another go!", "signup"),
    missing_username: TS.i18n.t("Please fill in a username.", "signup"),
    name_is_slackbot: TS.i18n.t("Sorry, slackbot is a reserved word. Try something else!", "signup"),
    misc: TS.i18n.t("For some weird reason, that didn’t work. Please try again to continue.", "signup"),
    no_email: TS.i18n.t("For some really weird reason, we’re having trouble with your email. Please try again.", "signup"),
    no_email_misc: TS.i18n.t("For some really weird reason, we’re having trouble with your email preferences. Please try again.", "signup"),
    no_team_name: TS.i18n.t("For some really weird reason, we’re having trouble with your team name. Please try again.", "signup"),
    no_url: TS.i18n.t("For some reason, we’re having trouble with your team URL. Please try again.", "signup"),
    no_username: TS.i18n.t("For some really weird reason, we’re having trouble with your username. Please try again.", "signup"),
    ratelimited: TS.i18n.t("Sorry, you’ve hit the rate limit. You’ll be able to try again soon.", "signup"),
    url_bad: TS.i18n.t("Team URLs can only have letters, numbers, and dashes.", "signup"),
    url_long: TS.i18n.t("Please enter up to 21 characters for your Team URL.", "signup"),
    url_no_letter: TS.i18n.t("Please enter at least one letter for your Team URL.", "signup"),
    url_start_end_dash: TS.i18n.t("Team URLs can’t start or end with a dash. Sorry!", "signup"),
    url_taken: TS.i18n.t("This URL is not available. Sorry!", "signup"),
    username_bad: TS.i18n.t("Sorry, usernames can only contain letters, numbers, periods, hyphens, and underscores, with no spaces!", "signup"),
    username_long: TS.i18n.t("Usernames cannot be longer than 21 characters.", "signup"),
    username_not_allowed: TS.i18n.t("Oops, sorry! Your username can’t be {username}, as it’s reserved for other uses.", "signup"),
    username_start: TS.i18n.t("Sorry, usernames must begin with a letter or number!", "signup"),
    username_taken: TS.i18n.t("Sorry, but this username is not available! Please pick another one.", "signup")
  };
  var _MAX_URL_LENGTH = 21;
  var _MAX_USERNAME_LENGTH = 21;
  var _REGEX_LETTERS_NUMS_DASHES = new RegExp("^[a-z0-9-]+$", "i");
  var _REGEX_HAS_LETTER = new RegExp("[a-z]", "i");
  var _REGEX_NO_START_END_DASH = new RegExp("(^[-])|(.*[-])$", "i");
  var _REGEX_USERNAME = new RegExp("^[a-z0-9-._]+$", "i");
  var _REGEX_USERNAME_START = new RegExp("^[a-z0-9][a-z0-9-._]*$", "i");
  var _method;
  var _checked_bad_domains = {};
  var _domain_found_mx_records = {};
  var _create_request_in_progress = false;
  var _checkEmail = function(email, email_domain, options) {
    var check_mx_records = options && options.get_info;
    var api_args = {
      email: email,
      get_info: check_mx_records
    };
    return new Promise(function(resolve) {
      _method("signup.checkEmail", api_args, function(ok, data) {
        if (ok) {
          return resolve({
            is_ok: true,
            api_response: data
          });
        }
        var error_message;
        if (data.error === TS.signup.ERROR_BAD_EMAIL_DOMAIN) {
          error_message = _ERROR_MESSAGES[data.error]({
            email_domain: email_domain
          });
        } else if (data.error === TS.signup.ERROR_DOMAIN_NOT_FOUND) {
          _domain_found_mx_records[email_domain] = false;
        } else if (check_mx_records) {
          _domain_found_mx_records[email_domain] = true;
        }
        return resolve({
          is_ok: false,
          error_key: data.error,
          error_message: error_message || TS.signup.getErrorMessage(data.error)
        });
      });
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("google_auth", {
    isAuthed: function(instance_id) {
      return _auth_instances[instance_id];
    },
    pollForAuthStatus: function(instance_id, callback, window_ref, options) {
      options = options || {};
      var interval = options.interval || 1e3;
      var max_attempts = options.max_attempts || Infinity;
      var attempts = 0;
      var timeout_id;
      var is_authed;
      var clear_polling = false;
      var checkAuth = function() {
        attempts += 1;
        is_authed = TS.google_auth.isAuthed(instance_id);
        if (is_authed || window_ref && window_ref.closed) {
          timeout_id = null;
          callback(!!is_authed);
        } else if (!clear_polling && attempts < max_attempts) {
          _checkIfAuthed(instance_id);
          timeout_id = setTimeout(checkAuth, interval);
        }
      };
      checkAuth();
      return {
        cancel: function() {
          if (timeout_id) clearTimeout(timeout_id);
          clear_polling = true;
        }
      };
    },
    getAuthLink: function(instance_id) {
      if (_auth_urls[instance_id]) return Promise.resolve(_auth_urls[instance_id]);
      return new Promise(function(resolve) {
        TS.api.call("services.googlecontacts.oauth.init", {
          instance_id: instance_id
        }).then(function(obj) {
          _auth_urls[instance_id] = obj.data.auth_url;
          resolve(obj.data.auth_url);
        });
      });
    },
    getContactList: function(instance_id, opts) {
      if (!TS.google_auth.isAuthed(instance_id)) return Promise.resolve([]);
      return new Promise(function(resolve) {
        var aggregate_data = [];
        TS.google_auth.getContactsFromAPI(instance_id, opts, aggregate_data, function(data) {
          resolve(data || []);
        });
      });
    },
    getContactsFromAPI: function(instance_id, opts, aggregate_data, callback) {
      TS.api.call("services.googlecontacts.list", {
        instance_id: instance_id,
        page: opts.page,
        count: opts.count
      }).then(function(obj) {
        aggregate_data.push.apply(aggregate_data, obj.data.contacts);
        if (obj.data.all_items_fetched === false) {
          opts.page += 1;
          TS.google_auth.getContactsFromAPI(instance_id, opts, aggregate_data, callback);
        } else {
          var callback_data = {
            items: aggregate_data,
            all_items_fetched: obj.data.all_items_fetched
          };
          callback(callback_data);
        }
      });
    },
    getContactListFromQuery: function(instance_id, opts) {
      if (!TS.google_auth.isAuthed(instance_id)) return Promise.resolve([]);
      return new Promise(function(resolve) {
        TS.api.call("services.googlecontacts.search", {
          instance_id: instance_id,
          query: opts.query,
          page: opts.page,
          count: opts.count
        }).then(function(obj) {
          var data = {
            items: obj.data.contacts,
            all_items_fetched: obj.data.all_items_fetched
          };
          resolve(data || []);
        });
      });
    },
    isAppsEmail: function(email_val, timeout) {
      if (!TS.utility.email.validateEmail(email_val).is_valid) {
        return Promise.resolve({
          error_key: "invalid_email"
        });
      }
      var domain = email_val.split("@")[1];
      if (_cached_is_apps_email_checks[domain] !== undefined) {
        return Promise.resolve(_cached_is_apps_email_checks[domain]);
      }
      var timeout_id;
      var has_timed_out;
      var api_args = {
        email: email_val,
        get_info: true
      };
      var method = window.callSlackAPIUnauthed ? window.callSlackAPIUnauthed : TS.api.call;
      return new Promise(function(resolve) {
        method("signup.checkEmail", api_args, function(ok, data) {
          if (timeout_id) {
            clearTimeout(timeout_id);
            timeout_id = null;
          }
          if (ok) {
            _cached_is_apps_email_checks[domain] = {
              is_google: data.type === "google_apps",
              auth_url: data.auth_url
            };
          }
          if (!has_timed_out) {
            return resolve(_cached_is_apps_email_checks[domain]);
          }
        });
        if (timeout) {
          timeout_id = setTimeout(function() {
            TS.log(99, "TS.google_auth.isAppsEmail timed out after " + timeout / 1e3 + " seconds");
            timeout_id = null;
            has_timed_out = true;
            return resolve({
              error_key: "timed_out"
            });
          }, timeout);
        }
      });
    }
  });
  var _cached_is_apps_email_checks = {};
  var _auth_instances = {};
  var _auth_urls = {};
  var _checkIfAuthed = function(instance_id) {
    return new Promise(function(resolve) {
      TS.api.call("services.googlecontacts.oauth.hasAuth", {
        instance_id: instance_id
      }).then(function(obj) {
        var has_authed = obj.data.has_auth;
        _auth_instances[instance_id] = has_authed;
        resolve(has_authed);
      });
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.email", {
    ERROR_EMPTY: "empty",
    ERROR_INVALID: "invalid",
    ERROR_TOO_MANY: "too_many",
    EMAIL_REGEX: new RegExp("^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$", "i"),
    DOMAIN_REGEX: new RegExp("^@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$", "i"),
    convertToArray: function(email_val) {
      return email_val.replace(/\s|\n/g, "").replace(/,$/g, "").split(",");
    },
    validateEmail: function(email_val, max_addresses) {
      var email_array = TS.utility.email.convertToArray(email_val);
      return _validateEmail(email_array, max_addresses);
    },
    validateDomain: function(email_domain_val) {
      var email_domain_array = email_domain_val ? TS.utility.email.convertToArray(email_domain_val) : [];
      return _validateDomain(email_domain_array);
    },
    correctTypos: function(email_val, recorrect) {
      if (recorrect === undefined) recorrect = true;
      return _correctAllTypos(email_val, recorrect);
    },
    removeDuplicates: function(email_val) {
      return _.uniq(TS.utility.email.convertToArray(email_val)).join(",");
    },
    getErrorMessage: function(error_key, data) {
      return _ERROR_MESSAGES[error_key] ? _ERROR_MESSAGES[error_key](data || {}) : "";
    },
    getTooManyErrorMessage: function(max_addresses) {
      return _ERROR_MESSAGES[TS.utility.email.ERROR_TOO_MANY]({
        max_addresses: max_addresses
      });
    },
    test: function() {
      return {
        error_messages: _ERROR_MESSAGES,
        tld_typo: _TLD_TYPO,
        domain_typo: _DOMAIN_TYPO
      };
    }
  });
  var _ERROR_MESSAGES = {
    empty: TS.i18n.t("Please fill in your email.", "email_utility"),
    invalid: TS.i18n.t("Sorry, but that email is invalid.", "email_utility"),
    too_many: TS.i18n.t("Please make your list shorter — we can check up to {max_addresses} addresses at a time.", "email_utility"),
    invalid_domain: TS.i18n.t("Sorry, but that isn’t a valid email domain.", "email_utility")
  };
  var _validateDomain = function(domain_array) {
    if (!Array.isArray(domain_array)) TS.error("Type error: TS.utility.email._validateDomain requires an array. domain_array is a", typeof domain_array);
    var error_domain_array = [];
    _.each(domain_array, function(domain_val) {
      if (!TS.utility.email.DOMAIN_REGEX.test(domain_val)) {
        error_domain_array.push(domain_val);
      }
    });
    if (error_domain_array.length) {
      var error_key = "invalid_domain";
      return {
        is_valid: false,
        email_domain: domain_array,
        error_key: error_key,
        error_message: _ERROR_MESSAGES[error_key](),
        error_domains: error_domain_array
      };
    }
    return {
      is_valid: true,
      email_domain: domain_array,
      error_key: "",
      error_message: ""
    };
  };
  var _validateEmail = function(email_array, max_addresses) {
    if (!Array.isArray(email_array)) TS.error("Type error: TS.utility.email._validateEmail requires an array. email_array is a", typeof email_array);
    var index = 0;
    var total_emails = email_array.length;
    var email_val;
    var error_key;
    var error_message;
    if (max_addresses && total_emails > max_addresses) {
      error_key = TS.utility.email.ERROR_TOO_MANY;
      if (max_addresses > 1) {
        error_message = TS.utility.email.getTooManyErrorMessage(max_addresses);
      } else {
        error_message = TS.utility.email.getErrorMessage(TS.utility.email.ERROR_INVALID);
      }
      return {
        is_valid: false,
        email_array: email_array,
        error_key: error_key,
        error_message: error_message
      };
    }
    for (index; index < total_emails; index += 1) {
      email_val = email_array[index];
      if (!index && email_val === "") {
        error_key = TS.utility.email.ERROR_EMPTY;
      } else if (!TS.utility.email.EMAIL_REGEX.test(email_val)) {
        error_key = TS.utility.email.ERROR_INVALID;
      }
      if (error_key) {
        return {
          is_valid: false,
          email_array: email_array,
          error_key: error_key,
          error_message: TS.utility.email.getErrorMessage(error_key)
        };
      }
    }
    return {
      is_valid: true,
      email_array: email_array,
      error_key: "",
      error_message: ""
    };
  };
  var _TLD_TYPO = {
    cmo: "com",
    ocm: "com",
    con: "com",
    "com.com": "com",
    vom: "com",
    cim: "com",
    cpm: "com",
    ccom: "com",
    coom: "com",
    comm: "com",
    cmm: "com"
  };
  var _DOMAIN_TYPO = {
    gmai: "gmail",
    gamil: "gmail",
    gmil: "gmail",
    gmial: "gmail",
    gmal: "gmail",
    gmaill: "gmail",
    gnail: "gmail",
    gamail: "gmail",
    gmsil: "gmail",
    yhoo: "yahoo",
    yahooo: "yahoo",
    yaho: "yahoo",
    homail: "hotmail",
    hotmaill: "hotmail",
    outook: "outlook",
    outlock: "outlook",
    otlook: "outlook",
    outlolk: "outlook"
  };
  var _corrected_emails = {};
  var _correctAllTypos = function(email_val, recorrect) {
    if (recorrect === undefined) recorrect = true;
    var email_array = TS.utility.email.convertToArray(email_val);
    var updated_val = email_val;
    var shadow_val = email_val;
    email_array.forEach(function(email) {
      if (!recorrect && _corrected_emails[email]) return;
      var corrected = _correctTypos(email);
      if (corrected.has_typo) {
        _corrected_emails[email] = true;
        updated_val = updated_val.replace(email, corrected.email_val);
        shadow_val = shadow_val.replace(email, corrected.shadow_val);
      }
    });
    return {
      typo_corrected: email_val !== updated_val,
      shadow_email: shadow_val.replace(/\n/g, "<br />"),
      updated_email: updated_val
    };
  };
  var _correctTypos = function(email_val) {
    var shadow_val = email_val;
    var has_typo;
    var regex;
    _.forOwn(_TLD_TYPO, function(fix, typo) {
      regex = new RegExp("\\." + typo + "$");
      if (regex.test(email_val)) {
        has_typo = true;
        email_val = email_val.replace(regex, "." + fix);
        shadow_val = shadow_val.replace(regex, '.<span class="seafoam_green">' + fix + "</span>");
        return false;
      }
    });
    _.forOwn(_DOMAIN_TYPO, function(fix, typo) {
      regex = new RegExp("@" + typo + "\\.");
      if (regex.test(email_val)) {
        has_typo = true;
        email_val = email_val.replace(regex, "@" + fix + ".");
        shadow_val = shadow_val.replace(regex, '@<span class="seafoam_green">' + fix + "</span>.");
        return false;
      }
    });
    return {
      has_typo: has_typo,
      email_val: email_val,
      shadow_val: shadow_val
    };
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.email_healing", {
    onStart: function() {
      _bindEmailInputs();
    },
    test: function() {
      return {
        _correctEmailTypos: _correctEmailTypos
      };
    }
  });
  var _count = 0;
  var _colors = {};
  var _bindEmailInputs = function() {
    var $body = $("body");
    $body.on("input", "[data-email-healing]", _.debounce(_correctEmailTypos, 600));
    $body.on("blur", "[data-email-healing]", _correctEmailTypos);
  };
  var _correctEmailTypos = function() {
    var input_element = this;
    var email_val = _htmlEntities(input_element.value);
    if (!TS.utility.email.validateEmail(email_val).is_valid) return;
    var corrected = TS.utility.email.correctTypos(email_val, false);
    if (!corrected.typo_corrected) return;
    var id = input_element.getAttribute("data-email-healing");
    if (id === "true") {
      _count += 1;
      id = _count;
      input_element.setAttribute("data-email-healing", id);
    }
    if (_colors[id] === undefined) {
      _colors[id] = {
        color: window.getComputedStyle(input_element).color,
        orange: this.getAttribute("data-email-healing-typo-color") || "#ffa800",
        green: this.getAttribute("data-email-healing-corrected-color") || "#2ab27b"
      };
    }
    input_element.style.color = _colors[id].orange;
    input_element.style.transition = "color 0.2s ease-out 0s";
    setTimeout(function() {
      input_element.value = corrected.updated_email;
      input_element.style.color = _colors[id].green;
      input_element.style.transition = "color 0.2s ease-out 0s";
    }, 300);
    setTimeout(function() {
      input_element.style.color = _colors[id].color;
      input_element.style.transition = "color 0.6s ease-out 0.3s";
    }, 500);
  };
  var _htmlEntities = function(str) {
    if (!str && str !== 0) return "";
    return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.search", {
    test: function() {
      return {
        _fetchMembersFromFlannel: _fetchMembersFromFlannel
      };
    },
    makeClause: function(type, value, field_id) {
      if (_validateClauseParameters(type, value, field_id)) return;
      var clause = {
        type: type.toLowerCase(),
        value: value
      };
      if (field_id) clause.field_id = field_id;
      return clause;
    },
    makeConjunction: function(type, clauses) {
      if (_validateConjunctionParameters(type, clauses)) return;
      return {
        type: type.toLowerCase(),
        clauses: clauses
      };
    },
    promiseToSearch: function(args) {
      if (!args || !args.query) return Promise.reject(new Error("cannot search without arguments and a query"));
      if (args.all_of_org && !TS.boot_data.page_needs_enterprise) return Promise.reject(new Error("cannot search an org when not an enterprise team"));
      if (TS.lazyLoadMembersAndBots()) {
        if (!args.hasOwnProperty("raw_query")) {
          return Promise.reject(new Error("Flannel searches require a `raw_query` to be provided"));
        }
        var query = args.raw_query;
        var max_count = args.count || Infinity;
        var results_p;
        if (_.isEmpty(args.raw_query)) {
          results_p = Promise.resolve([]);
        } else {
          results_p = _fetchMembersFromFlannel(args.raw_query, max_count, args.determine_membership_for_channel);
        }
        return results_p.then(function(response) {
          var members = response.objects;
          if (!args.include_bots) {
            var deleted_bots = _.remove(members, {
              is_bot: true
            });
            if (deleted_bots.length) TS.log(1989, "Flannel: removed these bots from results:", deleted_bots);
          }
          if (args.exclude_slackbot && args.include_bots) {
            var deleted_slackbot = _.remove(members, {
              is_slackbot: true
            });
            if (deleted_slackbot.length) TS.log(1989, "Flannel: removed slackbot from results:", deleted_slackbot);
          }
          if (TS.boot_data.page_needs_enterprise && !args.all_of_org) {
            var deleted_org_members = _.remove(members, function(member) {
              var teams_for_member = _.get(member, "enterprise_user.teams", []);
              var member_is_on_this_team = _.includes(teams_for_member, TS.model.team.id);
              return !member_is_on_this_team;
            });
            if (deleted_org_members.length) TS.log(1989, "Flannel: removed these org members from results:", deleted_org_members);
          }
          if (!args.include_deleted) {
            var deleted_members = _.remove(members, {
              deleted: true
            });
            if (deleted_members.length) TS.log(1989, "Flannel: removed these deleted members from results:", deleted_members);
          }
          members = _.intersection(TS.members.getMembersForUser(), members);
          return {
            ok: true,
            data: {
              items: members.slice(0, max_count),
              next_cursor_mark: null,
              num_found: members.length,
              teams: [TS.model.team]
            },
            args: {
              query: query
            }
          };
        });
      }
      var calling_args = {
        query: JSON.stringify(args.query)
      };
      ["sort", "sort_direction", "count", "cursor_mark", "include_bots", "include_deleted", "exclude_slackbot"].forEach(function(key) {
        if (args[key]) calling_args[key] = args[key];
      });
      var endpoint = args.endpoint;
      if (!endpoint) endpoint = args.all_of_org ? "search.enterprise" : "search.team";
      return TS.api.call(endpoint, calling_args).catch(_handleError);
    }
  });
  var _validateClauseParameters = function(type, value, field_id) {
    if (!type) {
      TS.error("cannot make a clause without a type");
      return;
    }
    if (!value) {
      TS.error("cannot make a clause without a value");
      return;
    }
    if (type === "custom" && !field_id) {
      TS.error("cannot make a custom type clause without a field id");
    }
  };
  var _validateConjunctionParameters = function(type, clauses) {
    if (!type) {
      TS.error("cannot make a conjunction without an 'and' or 'or' type");
      return;
    }
    if (!clauses || clauses.length < 2) {
      TS.error("cannot make a conjunction without at least two clauses");
    }
  };
  var _handleError = function(error) {
    TS.error(error.data.error + " error occured while searching");
    TS.generic_dialog.alert(TS.i18n.t("Sorry! Something went wrong. Please try again.", "utility_search")());
    throw error;
  };
  var _fetchMembersFromFlannel = function(query, max_count, determine_membership_for_channel) {
    var flannel_query = {
      query: query,
      count: max_count
    };
    var fetch_and_upsert_p = TS.flannel.fetchAndUpsertObjectsWithQuery(flannel_query);
    var need_membership_status = TS.membership.lazyLoadChannelMembership() && determine_membership_for_channel;
    if (!need_membership_status) {
      return fetch_and_upsert_p;
    }
    var constrained_flannel_query = _.assign({
      channels: [determine_membership_for_channel]
    }, flannel_query);
    var constrained_fetch_and_upsert_p = TS.flannel.fetchAndUpsertObjectsWithQuery(constrained_flannel_query);
    return Promise.join(fetch_and_upsert_p, constrained_fetch_and_upsert_p).then(function(promise_results) {
      var unconstrained_response = promise_results[0];
      var constrained_response = promise_results[1];
      var unconstrained_response_ids = _.map(unconstrained_response.objects, "id");
      var constrained_response_ids = _.map(constrained_response.objects, "id");
      var channel = TS.shared.getModelObById(determine_membership_for_channel);
      constrained_response_ids.forEach(function(user_id) {
        TS.membership.setUserChannelMembership(user_id, channel, true);
      });
      _.difference(unconstrained_response_ids, constrained_response_ids).forEach(function(user_id) {
        TS.membership.setUserChannelMembership(user_id, channel, false);
      });
      return unconstrained_response;
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.calls_analytics", {
    onStart: function() {
      if (TS.calls) {
        TS.calls.room_id_sig.add(_sigRoomId);
        TS.web.login_sig.add(_sigLoggedIn);
      }
      if (TS.client) {
        TS.utility.calls.room_id_sig.add(_sigRoomId);
        TS.client.login_sig.add(_sigLoggedIn);
      }
    },
    teardown: function() {
      clearTimeout(_record_timer);
      if (_utility_call_analytics_state.room_id) delete _utility_call_analytics_state.room_id;
    },
    isStateClean: function() {
      return _.isEmpty(_utility_call_analytics_state);
    },
    record: function(series, stats) {
      var stat_type = series.slice(0, series.indexOf("."));
      var is_video_stat = stat_type === "video_send_stats" || stat_type === "video_recv_stats";
      if (is_video_stat || !_.find(_record_buffer, function(d) {
          return d.measurement === series;
        })) {
        _record_buffer.push(_createAnalyticsData(series, stats));
      }
      if (!_record_timer) {
        _record_timer = setTimeout(TS.utility.calls_analytics.flush, _record_timer_duration);
      }
    },
    promiseToRecordImmediately: function(series, stats) {
      var data = {
        database: _getDatabaseName(),
        points: [_createAnalyticsData(series, stats)]
      };
      return TS.api.call("screenhero.rooms.proxyAnalytics", {
        data: JSON.stringify(data)
      }).catch(_.noop);
    },
    flush: function() {
      if (_record_buffer.length) {
        var now = Date.now();
        _record_buffer = _record_buffer.map(function(data) {
          data.fields.posted_time = now;
          return data;
        });
        TS.api.call("screenhero.rooms.proxyAnalytics", {
          data: JSON.stringify({
            database: _getDatabaseName(),
            points: _record_buffer
          })
        }).catch(_.noop);
        _record_buffer = [];
      }
      clearTimeout(_record_timer);
      _record_timer = undefined;
    },
    logEvent: function(event) {
      var series;
      if (!(TS.model && TS.model.user && TS.model.user.id || _utility_call_analytics_state.room_id)) {
        TS.warn("calls analytics module not ready: " + JSON.stringify(event));
        return;
      }
      series = ["user_event_logs"];
      if (_utility_call_analytics_state.room_id) {
        series.push(_utility_call_analytics_state.room_id);
      } else {
        series.push(TS.model.user.id);
      }
      $.extend(event || {}, {
        user_id: TS.model.user.id,
        os: _calls_analytics_config.os,
        ssb_version: _calls_analytics_config.ssb_version,
        webapp_version: _calls_analytics_config.webapp_version
      });
      TS.utility.calls_analytics.record(series.join("."), event);
    }
  });
  var _calls_analytics_config = {};
  var _record_timer;
  var _record_timer_duration = 5e3;
  var _record_buffer = [];
  var _utility_call_analytics_state = {};
  var _getDatabaseName = function() {
    return TS.boot_data.version_ts === "dev" ? "calls_dev" : "calls";
  };
  var _createAnalyticsData = function(series, stats) {
    if (typeof stats === "string" || typeof stats === "number") {
      stats = {
        value: stats
      };
    }
    stats.value = JSON.stringify(stats.value);
    stats.client_time = Date.now();
    return {
      measurement: series,
      fields: stats
    };
  };
  var _sigRoomId = function(options) {
    _utility_call_analytics_state.room_id = options.room_id;
  };
  var _sigLoggedIn = function() {
    if (TS.model.is_mac) {
      _calls_analytics_config.os = "mac";
    } else if (TS.model.is_win) {
      _calls_analytics_config.os = "win";
    } else if (TS.model.is_lin) {
      _calls_analytics_config.os = "lin";
    } else {
      _calls_analytics_config.os = navigator.userAgent;
    }
    _calls_analytics_config.webapp_version = TS.boot_data.min_sh_version_ts;
    if (TS.model.mac_ssb_version) {
      if (window.macgap && macgap.screenhero && macgap.screenhero.getAppVersion) {
        _calls_analytics_config.ssb_version = macgap.screenhero.getAppVersion();
      } else {
        _calls_analytics_config.ssb_version = TS.model.mac_ssb_version + "." + TS.model.mac_ssb_version_minor;
      }
    } else if (TS.model.win_ssb_version) {
      _calls_analytics_config.ssb_version = TS.model.win_ssb_version + "." + TS.model.win_ssb_version_minor;
    } else if (TS.model.lin_ssb_version) {
      _calls_analytics_config.ssb_version = TS.model.lin_ssb_version + "." + TS.model.win_lin_version_minor;
    } else {
      _calls_analytics_config.ssb_version = "N/A";
    }
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.calls_log", {
    enableDevLogging: function() {
      if (TS.boot_data.version_ts === "dev") TS.pri = "123," + TS.pri;
    },
    enableBuffering: function(enable) {
      _calls_log_config.enable_buffering = enable;
    },
    log: function() {
      var msg = _constructMsg.apply(null, arguments);
      _storeToLogBuffer(msg, "DBG");
    },
    logInfo: function() {
      var msg = _constructMsg.apply(null, arguments);
      TS.info(msg);
      _storeToLogBuffer(msg, "INF");
    },
    logWarn: function() {
      var msg = _constructMsg.apply(null, arguments);
      TS.warn(msg);
      _storeToLogBuffer(msg, "WRN");
    },
    logError: function() {
      var msg = _constructMsg.apply(null, arguments);
      TS.error(msg);
      _storeToLogBuffer(msg, "ERR");
    },
    logEvent: function(event, skip_analytics) {
      _logEvent(event, "EDBG", skip_analytics);
    },
    logEventInfo: function(event) {
      _logEvent(event, "EINF");
    },
    logEventWarn: function(event) {
      _logEvent(event, "EWRN");
    },
    logEventError: function(event) {
      _logEvent(event, "EERR");
    },
    getAndClearBuffer: function() {
      var log_str = _utility_call_log_state.buffer.join("\n");
      if (_utility_call_log_state.buffer_overflow) {
        log_str += _calls_log_config.excess;
      }
      _utility_call_log_state.buffer = [];
      _utility_call_log_state.buffer_length = 0;
      _utility_call_log_state.buffer_overflow = false;
      return log_str;
    }
  });
  var _calls_log_config = {
    enable_buffering: false,
    MAX_LENGTH: 3e4,
    excess: "... log is too long"
  };
  var _utility_call_log_state = {
    buffer: [],
    buffer_length: 0,
    buffer_overflow: false
  };
  var _storeToLogBuffer = function(msg, level) {
    var prefix;
    if (_calls_log_config.enable_buffering === false) return;
    prefix = "[" + level + "|" + TS.makeLogDate() + "]:";
    if (prefix.length + msg.length + _utility_call_log_state.buffer_length + _calls_log_config.excess.length < _calls_log_config.MAX_LENGTH) {
      _utility_call_log_state.buffer.push(prefix + msg);
    } else {
      _utility_call_log_state.buffer_overflow = true;
    }
  };
  var _constructMsg = function() {
    var msg = [];
    for (var i = 0; i < arguments.length; i += 1) {
      if (!arguments[i]) continue;
      if (typeof arguments[i] === "object") {
        msg.push(JSON.stringify(arguments[i]));
      } else {
        msg.push(arguments[i].toString());
      }
    }
    return msg.join("");
  };
  var _logEvent = function(event, level, skip_analytics) {
    var msg = _constructMsg(event.value);
    var name_value = event.event + ": " + msg;
    switch (level) {
      case "EDBG":
        break;
      case "EINF":
        TS.info(name_value);
        break;
      case "EWRN":
        TS.warn(name_value);
        break;
      case "EERR":
        TS.error(name_value);
        break;
      default:
        break;
    }
    if (!skip_analytics) {
      TS.utility.calls_analytics.logEvent($.extend(event, {
        level: level
      }));
    }
    _storeToLogBuffer(name_value, level);
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.calls", {
    share_url_prefix: document.location.origin + "/call/",
    calls_window_changed_sig: new signals.Signal,
    room_id_sig: new signals.Signal,
    started_platform_call_sig: new signals.Signal,
    window_types: {
      call_window: "call_window",
      mini_panel: "mini_panel",
      incoming_call: "incoming_call"
    },
    messages_to_call_window_types: {
      invite_response: "invite_response",
      invite_cancel: "invite_cancel",
      start_call: "start_call",
      caller_id: "caller_id",
      mini_panel_action: "mini_panel_action",
      did_close_window: "did_close_window",
      ping: "ping",
      ms_msg: "ms_msg",
      reachability: "reachability",
      calls_status: "calls_status",
      regions: "regions",
      got_server: "got_server",
      got_server_error: "got_server_error"
    },
    messages_to_mini_panel_types: {
      update_state: "update_state"
    },
    messages_from_call_window_types: {
      update_mini_panel: "update_mini_panel",
      set_call_window_loaded: "set_call_window_loaded",
      set_call_window_busy: "set_call_window_busy",
      show_growl_notification: "show_growl_notification",
      set_is_publisher_screensharing: "set_is_publisher_screensharing",
      pong: "pong",
      close: "close",
      hide_call_window: "hideCallWindow",
      get_calls_status: "get_calls_status",
      force_janus_disconnect: "force_janus_disconnect",
      get_regions: "get_regions",
      get_server: "get_server",
      get_member_data: "get_member_data",
      play_sound: "play_sound"
    },
    messages_from_incoming_call_types: {
      user_clicked_accept_or_reject: "user_clicked_accept_or_reject"
    },
    messages_from_mini_panel_types: {
      user_clicked_action: "user_clicked_action"
    },
    invite_response_types: {
      accept: "accept",
      reject: "reject",
      on_call: "on_call",
      dnd: "dnd",
      hangup: "hangup"
    },
    invite_cancel_types: {
      cleanup: "cleanup",
      timeout: "timeout",
      inviter_cancel: "inviter_cancel",
      accepted_timeout: "accepted_timeout",
      caller_hangup: "caller_hangup"
    },
    invite_unsupported_types: {
      platform: "platform",
      client_version: "client_version",
      offline: "offline"
    },
    onStart: function() {
      _utility_call_state.in_slack_app = !!TS.client;
      _utility_call_state.in_call_window = !!TS.calls;
      _utility_call_state.calls_url_prefix = document.location.origin + "/call/";
      if (_utility_call_state.in_slack_app) {
        TS.ms.on_msg_sig.add(_sigMsgReceived);
        TS.ms.connected_sig.add(_sigMSConnected);
        TS.ms.disconnected_sig.add(_sigMSDisconnected);
        window.addEventListener("online", _sigReachabilityChanged);
        window.addEventListener("offline", _sigReachabilityChanged);
        window.addEventListener("message", _receivePostedMessageFromChildWindow);
        if (TS.model.is_our_app) {
          if (window.macgap) TS.ssb.teams_did_load_sig.add(_sigTeamsDidLoad);
          TS.client.login_sig.add(_sigDidLogin);
        }
        if (TS.client.windows) {
          TS.client.windows.win_finished_loading_sig.add(_sigWindowFinishedLoading);
          TS.client.windows.win_will_close_sig.add(_sigWindowClosed);
          TS.client.windows.win_crashed_sig.add(_sigWindowCrashed);
          TS.client.windows.win_became_key_sig.add(_sigWindowBecameKey);
          TS.client.windows.win_resigned_key_sig.add(_sigWindowResignedKey);
        }
        if (TS.ui) TS.ui.window_unloaded_sig.add(_sigClientWindowUnloaded);
        if (TS.model.is_our_app) {
          _utility_call_state.call_window_loaded = false;
        } else {
          _utility_call_state.call_window_loaded = true;
        }
        _utility_call_state.is_ms_connected = false;
        _utility_call_state.is_reachability_online = true;
        TS.experiment.loadUserAssignments().then(function() {
          if (TS.experiment.getGroup("calls_ss") === "enabled") {
            _utility_call_state.screen_sharing_enabled = TS.model.supports_screen_sharing;
          }
          if (TS.experiment.getGroup("calls_better_regions") === "enabled") {
            _utility_call_state.calls_better_regions_expt = true;
          }
        });
      }
    },
    startCallInModelOb: function(model_ob, force_native_call, is_video_call) {
      var call_info;
      var is_platform_call = !force_native_call && TS.model.team.prefs.calling_app_name !== "Slack";
      if (TS.utility.strLooksLikeAMemberId(model_ob.id)) {
        var member_id = model_ob.id;
        model_ob = TS.ims.getImByMemberId(member_id);
        if (!model_ob) {
          TS.ims.promiseToStartImByMemberId(member_id, true, false).then(function() {
            model_ob = TS.ims.getImByMemberId(member_id);
            call_info = {
              id: model_ob.id,
              is_dm: model_ob.is_im,
              is_mpdm: model_ob.is_mpim,
              is_video_call: is_video_call
            };
            if (is_platform_call) {
              TS.utility.calls.launchPlatformCalls(call_info);
            } else {
              TS.utility.calls.launchVideoCall(call_info);
            }
          });
          return;
        }
      }
      call_info = {
        id: model_ob.id,
        is_dm: model_ob.is_im,
        is_mpdm: model_ob.is_mpim,
        is_video_call: is_video_call
      };
      if (is_platform_call) {
        TS.utility.calls.launchPlatformCalls(call_info);
      } else {
        TS.utility.calls.launchVideoCall(call_info);
      }
    },
    getCallsUrlPrefix: function() {
      return _utility_call_state.calls_url_prefix;
    },
    isEnabled: function() {
      if (!TS.model || !TS.model.team || !TS.model.team.prefs) return false;
      return TS.model.team.prefs.allow_calls;
    },
    isCallWindowReady: function() {
      return _utility_call_state.is_reachability_online && _utility_call_state.is_ms_connected;
    },
    isMultiPartyEnabled: function() {
      return TS.utility.calls.isEnabled() && TS.utility.calls.isPaidTeam();
    },
    isPaidTeam: function() {
      return TS.model.team.plan !== "";
    },
    isCurrentContextMultiParty: function() {
      if (TS.model.active_channel_id || TS.model.active_group_id || TS.model.active_mpim_id) {
        return true;
      }
      return false;
    },
    launchPlatformCalls: function(call_info) {
      if (!call_info) return;
      if (!call_info.id) return;
      var is_ssb = TSSSB.env.desktop_app_version != null;
      TS.utility.calls.started_platform_call_sig.dispatch({
        is_loading: true
      });
      TS.api.call("calls.request", {
        channel: call_info.id,
        app: TS.model.team.prefs.calling_app_id
      }).then(function(res) {
        if (!res.data.ok) {
          _handleCallsRequestError(res);
          return;
        }
        var platform_calls_window = window.open(encodeURI(res.data.url), TS.model.team.prefs.calling_app_name);
        try {
          platform_calls_window.focus();
        } catch (e) {
          if (!is_ssb) {
            var browser = bowser.name;
            var popup_ephemeral_msg_text;
            if (browser) {
              popup_ephemeral_msg_text = TS.i18n.t("Please allow pop-ups in {browser} to make a call. You can <http://my.slack.com/help/requests/new|contact Slack> if you need help.", "utility")({
                browser: browser
              });
            } else {
              popup_ephemeral_msg_text = TS.i18n.t("Please allow pop-ups in your browser to make a call. You can <http://my.slack.com/help/requests/new|contact Slack> if you need help.", "utility")();
            }
            var popup_ephemeral_msg = {
              text: popup_ephemeral_msg_text,
              ephemeral_type: "enable_popups",
              slackbot_feels: "sad_surprise"
            };
            TS.client.ui.addEphemeralBotMsg(popup_ephemeral_msg);
          }
        }
      }).catch(function(res) {
        _handleCallsRequestError(res);
      }).finally(function() {
        TS.utility.calls.started_platform_call_sig.dispatch({
          is_loading: false
        });
      });
    },
    launchVideoCall: function(call_info) {
      if (!TS.model.supports_voice_calls && !TS.utility.calls.platformHasCallsCode()) {
        _showModalForUnsupportedCalls();
        return;
      }
      if (!call_info) return;
      if (!call_info.id) return;
      if (!TS.utility.calls.isCallWindowReady()) return;
      if (_utility_call_state.incoming_caller_info) {
        var im = TS.ims.getImByMemberId(_utility_call_state.incoming_caller_info.user_id);
        if (im && im.id === call_info.id) {
          _isInIncomingCall().then(function(is_in_incoming_call) {
            if (is_in_incoming_call) {
              TS.utility.calls.closeIncomingCallWindow();
              TS.utility.calls.sendInvitationResponseToCaller({
                user_id: _utility_call_state.incoming_caller_info.user_id,
                room_id: _utility_call_state.incoming_caller_info.room_id,
                response: TS.utility.calls.invite_response_types.accept,
                did_choose_video: false
              });
            }
          });
        }
      }
      _isCallWindowBusy().then(function(is_busy) {
        if (is_busy) {
          _handleAlreadyInCall();
          return;
        }
        TS.utility.calls_log.logEvent({
          event: _utility_calls_config.log_events.start_call,
          value: call_info
        });
        _startCall(_utility_call_state.calls_url_prefix + call_info.id, call_info.id, {
          start_with_video: call_info.is_video_call
        });
      });
    },
    sendInvitationResponseToCaller: function(args) {
      if (!args || !args.user_id || !args.room_id || !args.response || !TS.utility.calls.invite_response_types[args.response]) {
        TS.utility.calls_log.log("sendInvitationResponseToCaller: invalid args: ", args);
        return;
      }
      TS.utility.calls.room_id_sig.dispatch({
        room_id: args.room_id
      });
      if (args.response) {
        TS.api.callImmediately("screenhero.rooms.inviteResponse", {
          caller: args.user_id,
          room: args.room_id,
          response: args.response
        }, function(ok, data) {
          if (!ok) TS.utility.calls_log.log("inviteResponse API failed with: ", data);
        });
        if (args.response === TS.utility.calls.invite_response_types.accept) {
          _utility_call_state.accepted_caller_id = args.user_id;
          if (!args.currently_calling_caller) _joinVideoCall(args.room_id, args.did_choose_video);
        }
      }
      Promise.join(_isCallWindowBusy(), _isInIncomingCall(), function(call_window_busy, incoming_call_window_busy) {
        TS.utility.calls_log.logEvent({
          event: _utility_calls_config.log_events.invite_response_send,
          value: {
            response_type: args.response,
            user_id: args.user_id,
            room_id: args.room_id,
            is_call_window_busy: call_window_busy,
            is_in_incoming_call: incoming_call_window_busy
          }
        });
        return null;
      });
    },
    closeIncomingCallWindow: function(skip_teardown) {
      TS.utility.calls_log.logEvent({
        event: _utility_calls_config.log_events.close_incoming_call
      });
      if (TS.model.is_our_app) {
        if (window.macgap) {
          TSSSB.call("closeIncomingCallWindow");
        } else if (window.winssb) {
          if (_utility_call_state.incoming_call_token) {
            TSSSB.call("closeWindow", _utility_call_state.incoming_call_token);
            delete _utility_call_state.incoming_call_token;
          }
        }
      } else {
        _isInIncomingCall().then(function(is_in_incoming_call) {
          if (is_in_incoming_call) TS.incoming_call.timeout();
        });
      }
      delete _utility_call_state.incoming_caller_info;
      if (!skip_teardown) _teardownIncomingCall();
    },
    maybeHandleCallLink: function($el) {
      if (!_utility_call_state.in_slack_app) return false;
      if (!$el || !$el.length) return false;
      if (!$el.is("a")) return false;
      var href = $el.attr("href");
      if (!href) return false;
      href = TS.utility.normalizeDevHost(href);
      href = href.replace("https://", "").replace("http://", "");
      var call_url = TS.utility.normalizeDevHost(_utility_call_state.calls_url_prefix);
      call_url = call_url.replace("https://", "").replace("http://", "");
      if (href.indexOf(call_url) === 0) {
        href = href.replace(call_url, "call/");
      }
      while (href.indexOf("/") === 0) {
        href = href.substr(1);
      }
      if (href.indexOf("call/") !== 0) return false;
      var A = href.split("/");
      if (A.length < 2) return false;
      var room_id = A[1];
      if (!room_id) return false;
      if (!TS.utility.calls.isCallWindowReady()) return true;
      _isInIncomingCall().then(function(is_in_incoming_call) {
        if (is_in_incoming_call) {
          TS.utility.calls_log.logEvent({
            event: _utility_calls_config.log_events.call_object_click_in_incoming_call
          });
          return;
        }
        TS.utility.calls.room_id_sig.dispatch({
          room_id: room_id
        });
        _joinVideoCall(room_id);
      });
      return true;
    },
    getParentWindow: function() {
      if (window.macgap) {
        if (_utility_call_state.in_call_window) {
          if (document.ssb_main && document.ssb_main.TS && document.ssb_main.TS.utility && document.ssb_main.TS.utility.calls) {
            return document.ssb_main.TS.utility.calls.getParentWindow();
          }
        } else {
          return window;
        }
      } else if (window.winssb && !(window.parentInfo || window.parentBrowserWindowId)) {
        TS.utility.calls_log.log("WinSSB: Trying to get parent window before browser window ID is initialized");
      } else if (window.opener) {
        return window.opener;
      }
    },
    promiseToGetRegions: function() {
      if (_region_p) return _region_p;
      if (_utility_call_state.calls_better_regions_expt) {
        _region_p = new Promise(function(resolve) {
          var servers = {
            east: "slack-calls-0fc78df4963fa1cd7.slack-core.com",
            west: "slack-calls-04e6ff274e7196b49.slack-core.com",
            eu: "slack-calls-004c3e8ad31b95218.slack-core.com",
            ap: "slack-calls-00f1852837340bafc.slack-core.com"
          };
          TS.api.callImmediately("screenhero.getServers", {
            protocol_version: "2.0",
            media_server: "janus"
          }, function(ok, data) {
            if (ok) {
              servers = data.servers;
            }
            var all_regions = Object.keys(servers);
            var resolved = false;
            _.each(all_regions, function(region) {
              $.ajax({
                type: "OPTIONS",
                url: "https://" + servers[region] + "/janus",
                async: true,
                cache: false,
                timeout: 2e3
              }).always(function() {
                TS.utility.calls_log.logEvent({
                  event: "RegionsNew",
                  value: region
                });
                if (!resolved) {
                  resolve(region);
                  resolved = true;
                }
              });
            });
          });
        });
        return _region_p;
      }
      var regions;
      _region_p = new Promise(function(resolve) {
        $.ajax({
          type: "GET",
          url: "https://region.slack-core.com/region.json",
          async: true,
          cache: false,
          timeout: 2e3,
          success: function(json) {
            TS.utility.calls_log.logEvent({
              event: "Regions",
              value: json.region_text
            });
            regions = json.region_text;
            if (TS.boot_data.version_ts === "dev") regions = "dev";
            resolve(regions);
          },
          error: function(XMLHttpRequest, textStatus, errorThrown) {
            TS.utility.calls_log.logEventError({
              event: "GetRegionsErr",
              value: {
                status: textStatus,
                error: errorThrown
              }
            });
            regions = "west|east|ap|eu";
            if (TS.boot_data.version_ts === "dev") regions = "dev";
            resolve(regions);
          }
        });
      });
      return _region_p;
    },
    promiseToGetServer: function(regions, id) {
      if (_server_p[id]) return _server_p[id];
      var method;
      var args = {
        regions: regions,
        protocol: "1.0"
      };
      if (id.charAt(0) === "R") {
        method = "screenhero.rooms.join";
        args.room = id;
      } else {
        method = "screenhero.rooms.create";
        args.channel = id;
        var persistent_call_state = TS.storage.fetchCallsState();
        if (persistent_call_state.call_server_override) {
          args.call_server = persistent_call_state.call_server_override;
          persistent_call_state.call_server_override = null;
          TS.storage.storeCallsState(persistent_call_state);
        }
      }
      _server_p[id] = TS.api.callImmediately(method, args);
      return _server_p[id];
    },
    clearServerPromise: function(id) {
      delete _server_p[id];
    },
    isScreenSharing: function() {
      return _utility_call_state.is_publisher_screensharing;
    },
    isSupportedMessage: function(type) {
      var calls_supported_message_types = ["user_change", "pref_change", "team_join", "channel_created", "channel_deleted", "channel_archive", "channel_unarchive", "channel_rename", "channel_joined", "channel_left", "group_deleted", "group_archive", "group_unarchive", "group_rename", "group_joined", "group_left", "im_open", "mpim_joined", "mpim_open", "mpim_close"];
      return calls_supported_message_types.indexOf(type) !== -1;
    },
    getPlatformErrorMessage: function() {
      if (TS.model.is_our_app) {
        if (TS.model.lin_ssb_version) {
          return TS.i18n.t("Unfortunately, the calls feature is not available on Linux.", "utility")();
        } else if (window.winssb) {
          return TS.i18n.t("To use the calls feature, please upgrade to the latest version of Slack for Windows.", "utility")();
        }
        return TS.i18n.t("To use the calls feature, please upgrade to the latest version of the Mac app for Slack.", "utility")();
      } else if (bowser.mobile && bowser.ios) {
        return TS.i18n.t("Please update your Slack iOS app to the newest version.", "utility")();
      } else if (bowser.mobile) {
        return TS.i18n.t("Unfortunately, the calls feature is not available on mobile browsers.", "utility")();
      }
      return TS.i18n.t("Unfortunately, the calls feature is not available in this browser. Please switch to Chrome.", "utility")();
    },
    getPlatformErrorTitle: function() {
      if (TS.model.is_our_app) {
        if (TS.model.lin_ssb_version) {
          return TS.i18n.t("Calls feature is not available on Linux", "utility")();
        } else if (window.winssb) {
          return TS.i18n.t("Please update your Slack for Windows", "utility")();
        }
        return TS.i18n.t("Please update your Slack for Mac", "utility")();
      } else if (bowser.mobile) {
        return TS.i18n.t("Calls feature is not available on mobile browsers", "utility")();
      }
      return TS.i18n.t("Calls feature is not available in this browser", "utility")();
    },
    platformHasCallsCode: function() {
      if (TS.model.is_our_app) {
        if (TS.model.mac_ssb_version == "1.1" && TS.model.mac_ssb_version_minor < 8 || parseFloat(TS.model.mac_ssb_version) < 2) {
          return false;
        }
        if (TS.model.win_ssb_version == "1.2" && TS.model.win_ssb_version_minor < 5 || parseFloat(TS.model.win_ssb_version) < 1.2) {
          return false;
        }
      }
      return true;
    },
    verifyOriginUrl: function(originHref) {
      return TS.utility.url.getHostName(originHref) == window.location.hostname && _.startsWith(originHref, "https:");
    },
    getUrlForRoom: function(room) {
      return TS.utility.calls.getUrlForRoomId(room.id);
    },
    getUrlForRoomId: function(room_id) {
      return TS.utility.calls.share_url_prefix + room_id;
    },
    dbg: {
      getState: function() {
        return {
          config: _utility_calls_config,
          state: _utility_call_state
        };
      },
      isCallWindowBusy: function() {
        _isCallWindowBusy().then(function(is_busy) {
          TS.info("_isCallWindowBusy: " + is_busy);
        });
      },
      isIncomingCallWindowBusy: function() {
        _isInIncomingCall().then(function(is_in_incoming_call) {
          TS.info("_isInIncomingCall: " + is_in_incoming_call);
        });
      }
    }
  });
  var _region_p;
  var _server_p = {};
  var _utility_calls_config = {
    call_window_dims: {
      width: 1070,
      height: 600,
      min_width: 600,
      min_height: 500
    },
    mini_panel_dims: {
      width: 280,
      height: 64,
      min_width: 280,
      min_height: 44,
      x_offset: 50,
      y_offset: 50
    },
    incoming_call_window_dims: {
      width: 240,
      height: 373
    },
    log_events: {
      previous_crash: "PreviousCrash",
      incoming_call: "IncomingCall",
      invite_response_from_callee: "InviteResponseFromCallee",
      ms_connected: "MSConnected",
      ms_disconnected: "MSDisconnected",
      reachability_changed: "ReachabilityChanged",
      window_closed: "WindowClosed",
      window_crashed: "WindowCrashed",
      call_window_load_timeout: "CallWindowLoadTimeout",
      call_window_load_start: "CallWindowLoadStart",
      incoming_call_timeout: "IncomingCallTimeout",
      send_msg_no_call_window: "SendMsgNoCallWindow",
      send_msg_no_mini_panel: "SendMsgNoMiniPanel",
      call_window_loaded: "CallWindowLoaded",
      call_window_busy: "CallWindowBusy",
      invalid_msg_from_child_window: "InvalidMsgFromChildWindow",
      call_window_pong: "CallWindowPong",
      unknown_msg_from_call_window: "UnknownMsgFromCallWindow",
      incoming_call_click: "IncomingCallClick",
      unknown_msg_from_incoming_call_window: "UnknownMsgFromIncomingCallWindow",
      mini_panel_click: "MiniPanelClick",
      unknown_msg_from_mini_panel: "UnknownMsgFromMiniPanel",
      call_object_click_in_incoming_call: "CallObjectClickInIncomingCall",
      invite_response_send: "InviteResponseSend",
      close_incoming_call: "CloseIncomingCall",
      no_mini_panel_in_update: "NoMiniPanelInUpdate",
      start_call: "StartCall",
      join_call: "JoinCall"
    },
    CALL_WINDOW_LOAD_TIMEOUT_MSECS: 30 * 1e3,
    INCOMING_RING_TIMEOUT_MSECS: 29 * 1e3
  };
  var _utility_call_state = {};
  var _handleCallsRequestError = function(res) {
    var ephemeral_msg = {
      text: res.data.response || TS.i18n.t("Darn, that didn’t work. Try your call again or <http://my.slack.com/help.requests/new|contact us> if it’s still not working.", "utility")(),
      ephemeral_type: res.data.error || "uncaught_third_party_call_error",
      slackbot_feels: "sad_surprise"
    };
    TS.client.ui.addEphemeralBotMsg(ephemeral_msg);
  };
  var _sigMsgReceived = function(imsg) {
    if (!_utility_call_state.in_slack_app) return;
    TS.utility.calls_log.log("Received msg type: ", imsg.type);
    switch (imsg.type) {
      case "screenhero_invite":
        TS.utility.calls_log.logEvent({
          event: _utility_calls_config.log_events.incoming_call,
          value: imsg
        });
        Promise.join(_isCallWindowBusy(), _isInIncomingCall(), function(call_window_busy, incoming_call_window_busy) {
          _handleIncomingCall(call_window_busy, incoming_call_window_busy, imsg);
          return null;
        });
        break;
      case "screenhero_invite_cancel":
        TS.utility.calls.closeIncomingCallWindow();
        _isCallWindowBusy().then(function(is_busy) {
          if (is_busy) {
            _sendMessageToCallWindow({
              message_type: TS.utility.calls.messages_to_call_window_types.invite_cancel,
              cancel_type: imsg.cancel_type,
              user_id: imsg.responder,
              room_id: imsg.room
            });
          } else {
            _utility_call_state.cached_invite_cancel = {
              cancel_type: imsg.cancel_type,
              user_id: imsg.responder,
              room_id: imsg.room
            };
          }
        });
        break;
      case "screenhero_invite_response":
        TS.utility.calls_log.logEvent({
          event: _utility_calls_config.log_events.invite_response_from_callee,
          value: imsg
        });
        _sendMessageToCallWindow({
          message_type: TS.utility.calls.messages_to_call_window_types.invite_response,
          response_type: imsg.response,
          user_id: imsg.responder,
          room_id: imsg.room
        });
        TS.api.callImmediately("screenhero.rooms.inviteCancel", {
          responder: imsg.responder,
          room: imsg.room,
          cancel_type: TS.utility.calls.invite_cancel_types.cleanup
        }, function() {});
        break;
      case "sh_room_join":
        TS.utility.calls_log.log("sh_room_join msg: ", imsg);
        break;
      default:
        if (TS.utility.calls.isSupportedMessage(imsg.type)) {
          if (!TS.model.is_our_app) {
            _sendMessageToCallWindow({
              message_type: TS.utility.calls.messages_to_call_window_types.ms_msg,
              msg: imsg
            });
          }
        }
        break;
    }
  };
  var _sigMSConnected = function() {
    var skip_analytics = true;
    TS.utility.calls_log.logEvent({
      event: _utility_calls_config.log_events.ms_connected
    }, skip_analytics);
    _utility_call_state.is_ms_connected = true;
    _updateCallIcon();
  };
  var _sigMSDisconnected = function() {
    var skip_analytics = true;
    TS.utility.calls_log.logEvent({
      event: _utility_calls_config.log_events.ms_disconnected
    }, skip_analytics);
    _utility_call_state.is_ms_connected = false;
    _updateCallIcon();
  };
  var _sigReachabilityChanged = function() {
    _utility_call_state.is_reachability_online = window.navigator.onLine;
    _updateCallIcon();
    _notifyReachability();
  };
  var _sigTeamsDidLoad = function() {
    _utility_call_state.teams_loaded = true;
  };
  var _sigDidLogin = function() {
    _utility_call_state.did_login = true;
  };
  var _sigWindowFinishedLoading = function(token) {
    switch (token) {
      case _utility_call_state.incoming_call_token:
        TSSSB.call("centerWindow", token);
        TSSSB.call("showWindow", token);
        _setupIncomingCall();
        break;
      case _utility_call_state.mini_panel_token:
        if (window.winssb && winssb.window && winssb.window.browserWindows && winssb.window.browserWindows[token] && winssb.window.browserWindows[token].setMinimumSize) {
          winssb.window.browserWindows[token].setMinimumSize(_utility_calls_config.mini_panel_dims.min_width, _utility_calls_config.mini_panel_dims.min_height);
          winssb.window.browserWindows[token].setSize(_utility_calls_config.mini_panel_dims.width, _utility_calls_config.mini_panel_dims.height);
        }
        break;
      default:
        break;
    }
  };
  var _sigWindowClosed = function(token) {
    var skip_analytics = true;
    TS.utility.calls_log.logEvent({
      event: _utility_calls_config.log_events.window_closed,
      value: {
        token: token,
        cw_token: _utility_call_state.call_window_token,
        mp_token: _utility_call_state.mini_panel_token,
        ic_token: _utility_call_state.incoming_call_token
      }
    }, skip_analytics);
    switch (token) {
      case _utility_call_state.call_window_token:
        _utility_call_state.last_call_window_token = _utility_call_state.call_window_token;
        _notifySSBsCallWindowAvailable();
        if (_utility_call_state.call_window_token) delete _utility_call_state.call_window_token;
        _closeMiniPanel();
        _closeCursorsWindow();
        break;
      case _utility_call_state.mini_panel_token:
        if (_utility_call_state.mini_panel_token) delete _utility_call_state.mini_panel_token;
        break;
      default:
        break;
    }
  };
  var _sigWindowCrashed = function(token) {
    TS.utility.calls_log.logEvent({
      event: _utility_calls_config.log_events.window_crashed,
      value: {
        token: token,
        cw_token: _utility_call_state.call_window_token,
        mp_token: _utility_call_state.mini_panel_token,
        ic_token: _utility_call_state.incoming_call_token
      }
    });
    if (token !== _utility_call_state.last_call_window_token && token !== _utility_call_state.call_window_token) return;
    _callWindowGoingAway();
    _notifySSBsCallWindowAvailable();
    delete _utility_call_state.call_window_token;
    TS.utility.calls_log.logEvent({
      event: _utility_calls_config.log_events.previous_crash
    });
    _closeMiniPanel();
    _closeCursorsWindow();
  };
  var _sigWindowBecameKey = function(token) {
    if (token !== _utility_call_state.call_window_token) return;
    TSSSB.call("hideWindow", _utility_call_state.mini_panel_token);
  };
  var _sigWindowResignedKey = function(token) {
    if (token !== _utility_call_state.call_window_token) return;
    _isCallWindowBusy().then(function(is_busy) {
      if (is_busy) {
        TSSSB.call("showWindowInactive", _utility_call_state.mini_panel_token);
      }
    });
  };
  var _sigClientWindowUnloaded = function() {
    TS.utility.calls_log.log("client window unloaded!");
    _forceCloseWindow();
  };
  var _showModalForUnsupportedCalls = function() {
    TS.generic_dialog.start({
      title: TS.utility.calls.getPlatformErrorTitle(),
      body: TS.utility.calls.getPlatformErrorMessage(),
      show_cancel_button: true,
      go_button_text: TS.i18n.t("Update Slack App", "utility")(),
      onGo: function() {
        var target = "_" + Math.random();
        TS.utility.openInNewTab("https://slack.com/downloads", target);
      }
    });
  };
  var _areTransparentWindowsSupported = function() {
    return _.get(window, "winssb.app.areTransparentWindowsSupported", true);
  };
  var _startCallWindow = function(url) {
    var args;
    if (!TS.utility.calls.isEnabled()) return;
    if (!TS.utility.calls.platformHasCallsCode()) return;
    if (TS.model.is_our_app && _utility_call_state.call_window_token) {
      _sendMessageToCallWindow({
        message_type: TS.utility.calls.messages_to_call_window_types.start_call,
        args: {
          url: url
        }
      });
      _openMiniPanel();
      _openCursorsWindow();
      TSSSB.call("focusWindow", _utility_call_state.call_window_token);
      return;
    }
    args = {
      url: url || _utility_call_state.calls_url_prefix,
      title: "",
      background: true,
      width: _utility_calls_config.call_window_dims.width,
      height: _utility_calls_config.call_window_dims.height,
      minWidth: _utility_calls_config.call_window_dims.min_width,
      minHeight: _utility_calls_config.call_window_dims.min_height,
      hideMenuBar: true,
      windowType: "calls",
      show: true,
      no_spinner: true,
      hides_on_close: false
    };
    if (TS.model.is_our_app) {
      if (TS.model.is_mac) args.titleBarStyle = "hidden";
    }
    if (window.winssb) {
      var display = TSSSB.call("getAppDisplay");
      args.x = display.bounds.x + (display.bounds.width - _utility_calls_config.call_window_dims.width) / 2;
      args.y = display.bounds.y + (display.bounds.height - _utility_calls_config.call_window_dims.height) / 2;
    }
    _utility_call_state.call_window_token = TS.client.windows.openWindow(args);
    TS.utility.calls_log.log("_startCallWindow: returned token: ", _utility_call_state.call_window_token);
    _openMiniPanel();
    _openCursorsWindow();
  };
  var _closeCallWindow = function() {
    if (!_utility_call_state.call_window_token) return;
    _callWindowGoingAway();
    var call_window_token = _utility_call_state.call_window_token;
    delete _utility_call_state.call_window_token;
    TSSSB.call("closeWindow", call_window_token);
  };
  var _openMiniPanel = function() {
    if (!window.winssb || _utility_call_state.mini_panel_token) return;
    var display = TSSSB.call("getDisplayForWindow", _utility_call_state.call_window_token);
    var win_args = {
      x: display.bounds.x + (display.bounds.width - _utility_calls_config.mini_panel_dims.x_offset - _utility_calls_config.mini_panel_dims.width),
      y: display.bounds.y + _utility_calls_config.mini_panel_dims.y_offset,
      width: _utility_calls_config.mini_panel_dims.width,
      height: _utility_calls_config.mini_panel_dims.height,
      minWidth: _utility_calls_config.mini_panel_dims.min_width,
      minHeight: _utility_calls_config.mini_panel_dims.min_height,
      hideMenuBar: true,
      resizable: false,
      alwaysOnTop: true,
      frame: false,
      windowType: "calls_mini_panel",
      show: false,
      useContentSize: true,
      skip_css: true,
      skipTaskbar: true,
      fullscreenable: false
    };
    if (TS.model.is_mac && _areTransparentWindowsSupported()) {
      win_args.transparent = true;
    }
    win_args.content_html = TS.templates.calls_minipanel({
      no_border: !TS.model.is_mac,
      js_urls: TS.boot_data.electron_window_injection_urls ? TS.boot_data.electron_window_injection_urls.calls_mini_panel.js : [],
      css_urls: TS.boot_data.electron_window_injection_urls ? TS.boot_data.electron_window_injection_urls.calls_mini_panel.css : []
    });
    _utility_call_state.mini_panel_token = TS.client.windows.openWindow(win_args);
    TSSSB.call("showWindowInactive", _utility_call_state.mini_panel_token);
    TSSSB.call("hideWindow", _utility_call_state.mini_panel_token);
  };
  var _openCursorsWindow = function() {
    if (!_utility_call_state.screen_sharing_enabled) return;
    var content_html = TS.templates.calls_cursors({
      js_urls: TS.boot_data.electron_window_injection_urls ? TS.boot_data.electron_window_injection_urls.calls_cursors.js : [],
      css_urls: TS.boot_data.electron_window_injection_urls ? TS.boot_data.electron_window_injection_urls.calls_cursors.css : []
    });
    var cursors_win_args = {
      width: 0,
      height: 0,
      windowType: "calls_cursors",
      transparent: true,
      alwaysOnTop: true,
      hideMenuBar: true,
      resizable: false,
      frame: false,
      useContentSize: true,
      content_html: content_html,
      type: "desktop",
      fullscreenable: false,
      enableLargerThanScreen: true,
      hasShadow: false,
      focusable: false,
      show: false
    };
    _utility_call_state.cursors_window_token = TS.client.windows.openWindow(cursors_win_args);
  };
  var _closeMiniPanel = function() {
    if (!_utility_call_state.mini_panel_token) return;
    var mini_panel_token = _utility_call_state.mini_panel_token;
    delete _utility_call_state.mini_panel_token;
    TSSSB.call("closeWindow", mini_panel_token);
  };
  var _closeCursorsWindow = function() {
    if (!_utility_call_state.screen_sharing_enabled) return;
    if (!_utility_call_state.cursors_window_token) return;
    var cursors_window_token = _utility_call_state.cursors_window_token;
    delete _utility_call_state.cursors_window_token;
    TSSSB.call("closeWindow", cursors_window_token);
  };
  var _forceCloseWindow = function() {
    if (_utility_call_state.mini_panel_token) {
      TSSSB.call("closeWindow", _utility_call_state.mini_panel_token);
      delete _utility_call_state.mini_panel_token;
    }
    if (_utility_call_state.call_window_token) {
      _sendMessageToCallWindow({
        message_type: TS.utility.calls.messages_to_call_window_types.did_close_window
      });
      _callWindowGoingAway();
      TSSSB.call("closeWindow", _utility_call_state.call_window_token);
      _notifySSBsCallWindowAvailable();
      delete _utility_call_state.call_window_token;
    }
    if (_utility_call_state.window_handle) {
      _utility_call_state.window_handle.close();
      delete _utility_call_state.window_handle;
    }
  };
  var _callWindowGoingAway = function() {
    _setCallWindowLoaded(false);
    _setCallWindowBusy(false);
  };
  var _handleIncomingCall = function(call_window_busy, incoming_call_window_busy, imsg) {
    if (!TS.utility.calls.isEnabled()) return;
    var is_relevant = TS.shared.isRelevantTeam();
    if (!is_relevant) return;
    var currently_calling_caller = false;
    var im = TS.ims.getImByMemberId(imsg.caller);
    if (im && im.id === _utility_call_state.call_channel) {
      currently_calling_caller = true;
    }
    if (call_window_busy || incoming_call_window_busy || currently_calling_caller) {
      TS.utility.calls.sendInvitationResponseToCaller({
        user_id: imsg.caller,
        room_id: imsg.room,
        response: currently_calling_caller ? TS.utility.calls.invite_response_types.accept : TS.utility.calls.invite_response_types.on_call,
        currently_calling_caller: currently_calling_caller
      });
      return;
    }
    if (TS.dnd.isMemberInDnd(TS.model.user)) {
      TS.utility.calls.sendInvitationResponseToCaller({
        user_id: imsg.caller,
        room_id: imsg.room,
        response: TS.utility.calls.invite_response_types.dnd
      });
      return;
    }
    var caller = TS.members.getMemberById(imsg.caller);
    var caller_p = Promise.resolve(caller);
    if (!caller) {
      caller_p = TS.api.call("users.info", {
        user: imsg.caller
      }).then(function(response) {
        TS.members.upsertMember(response.data.user);
        caller = TS.members.getMemberById(imsg.caller);
      });
    }
    caller_p.then(function() {
      var caller_name = TS.members.getMemberDisplayName(caller);
      if (TS.model.is_our_app) {
        if (window.winssb) {
          var win_args = {
            width: _utility_calls_config.incoming_call_window_dims.width,
            height: _utility_calls_config.incoming_call_window_dims.height,
            hideMenuBar: true,
            resizable: false,
            alwaysOnTop: true,
            frame: false,
            windowType: "calls_incoming_call",
            show: false,
            skip_css: true,
            fullscreenable: false
          };
          if (TS.model.is_mac && _areTransparentWindowsSupported()) {
            win_args.transparent = true;
          }
          var incoming_call_div = TS.templates.calls_incoming_call({
            caller: caller,
            name: caller_name,
            is_video_call: TS.model.supports_video_calls && imsg.cameras_on > 0,
            team: TS.model.team.name
          });
          win_args.content_html = TS.templates.calls_incoming_call_window({
            incoming_call_div: incoming_call_div,
            room_id: imsg.room,
            user_id: imsg.caller,
            no_border: !TS.model.is_mac,
            css_urls: TS.boot_data.electron_window_injection_urls ? TS.boot_data.electron_window_injection_urls.calls_incoming_call.css : []
          });
          _utility_call_state.incoming_call_token = TS.client.windows.openWindow(win_args);
        } else if (window.macgap) {
          TSSSB.call("incomingCall", {
            room_id: imsg.room,
            name: caller_name,
            user_id: imsg.caller,
            avatar_img_src: caller.profile.image_192
          });
          _setupIncomingCall();
        }
      } else {
        TS.incoming_call.start({
          caller: caller,
          name: caller_name,
          is_video_call: TS.model.supports_video_calls && imsg.cameras_on > 0,
          onAccept: function(did_choose_video) {
            TS.utility.calls.sendInvitationResponseToCaller({
              user_id: imsg.caller,
              room_id: imsg.room,
              response: TS.utility.calls.invite_response_types.accept,
              did_choose_video: did_choose_video
            });
          },
          onReject: function() {
            TS.utility.calls.sendInvitationResponseToCaller({
              user_id: imsg.caller,
              room_id: imsg.room,
              response: TS.utility.calls.invite_response_types.reject
            });
          },
          onTimeout: function() {},
          onShow: function() {
            _setupIncomingCall();
          },
          onEnd: function() {
            _teardownIncomingCall();
          }
        });
      }
      _utility_call_state.incoming_caller_info = {
        user_id: imsg.caller,
        room_id: imsg.room
      };
    });
  };
  var _setupIncomingCall = function() {
    TS.sounds.play("call/incoming_ring_" + TS.boot_data.call_sounds_version + ".mp3", {
      should_loop: true,
      ignore_mute: true
    });
    _utility_call_state.incoming_ring_timer = setTimeout(function() {
      TS.utility.calls_log.logEvent({
        event: _utility_calls_config.log_events.incoming_call_timeout
      });
      TS.utility.calls.closeIncomingCallWindow();
    }, _utility_calls_config.INCOMING_RING_TIMEOUT_MSECS);
    _utility_call_state.in_incoming_call = true;
    _notifySSBsIncomingCallWindowBusy();
  };
  var _teardownIncomingCall = function() {
    TS.sounds.stop("call/incoming_ring_" + TS.boot_data.call_sounds_version + ".mp3", {
      ignore_mute: true
    });
    if (_utility_call_state.incoming_ring_timer) {
      clearTimeout(_utility_call_state.incoming_ring_timer);
      delete _utility_call_state.incoming_ring_timer;
    }
    delete _utility_call_state.in_incoming_call;
    delete _utility_call_state.incoming_caller_info;
    _notifySSBsIncomingCallWindowAvailable();
  };
  var _isInIncomingCall = function() {
    if (!TS.model.is_our_app || !TSSSB.call("supportsIncomingCallWindowStatus")) {
      return Promise.resolve(!!_utility_call_state.in_incoming_call);
    }
    return TSSSB.call("isIncomingCallWindowBusy");
  };
  var _sendMessageToCallWindow = function(args) {
    if (TS.model.is_our_app) {
      var window_token = _utility_call_state.call_window_token;
      if (!window_token) {
        TS.utility.calls_log.logEventWarn({
          event: _utility_calls_config.log_events.send_msg_no_call_window,
          value: args
        });
        return;
      }
      if (window.macgap) {
        var win = TS.client.windows.getWinByToken(window_token);
        if (win && win.window) {
          win.window.postMessage(args, "*");
        }
      } else if (window.winssb && window.winssb.window) {
        window.winssb.window.postMessage(args, window_token);
      }
    } else if (_utility_call_state.window_handle) {
      _utility_call_state.window_handle.postMessage(args, "*");
    }
  };
  var _sendMessageToMiniPanel = function(args) {
    if (!_utility_call_state.mini_panel_token) {
      TS.utility.calls_log.logEventWarn({
        event: _utility_calls_config.log_events.send_msg_no_mini_panel,
        value: args
      });
      return;
    }
    if (window.winssb && window.winssb.window) {
      window.winssb.window.postMessage(args, _utility_call_state.mini_panel_token);
    }
  };
  var _notifyReachability = function() {
    if (!_utility_call_state.call_window_loaded) return;
    _sendMessageToCallWindow({
      message_type: TS.utility.calls.messages_to_call_window_types.reachability,
      online: _utility_call_state.is_reachability_online
    });
  };
  var _setCallWindowLoaded = function(is_loaded) {
    var skip_analytics = true;
    TS.utility.calls_log.logEvent({
      event: _utility_calls_config.log_events.call_window_loaded,
      value: {
        is_loaded: is_loaded
      }
    }, skip_analytics);
    _utility_call_state.call_window_loaded = is_loaded;
    _updateCallIcon();
    if (is_loaded) TSSSB.call("focusWindow", _utility_call_state.call_window_token);
    _notifyReachability();
  };
  var _setCallWindowBusy = function(is_busy) {
    var skip_analytics = true;
    TS.utility.calls_log.logEvent({
      event: _utility_calls_config.log_events.call_window_busy,
      value: {
        is_busy: is_busy
      }
    }, skip_analytics);
    _utility_call_state.is_call_window_busy = is_busy;
    if (is_busy) {
      _notifySSBsCallWindowBusy();
      if (_utility_call_state.accepted_caller_id) {
        _sendMessageToCallWindow({
          message_type: TS.utility.calls.messages_to_call_window_types.caller_id,
          args: {
            caller_id: _utility_call_state.accepted_caller_id
          }
        });
      }
      if (_utility_call_state.cached_invite_cancel) {
        _sendMessageToCallWindow({
          message_type: TS.utility.calls.messages_to_call_window_types.invite_cancel,
          cancel_type: _utility_call_state.cached_invite_cancel.cancel_type,
          user_id: _utility_call_state.cached_invite_cancel.user_id,
          room_id: _utility_call_state.cached_invite_cancel.room_id
        });
      }
    } else {
      _notifySSBsCallWindowAvailable();
      _utility_call_state.call_channel = undefined;
      _utility_call_state.is_publisher_screensharing = false;
      _utility_call_state.is_publisher_screenhero = false;
    }
    if (_utility_call_state.accepted_caller_id) delete _utility_call_state.accepted_caller_id;
    if (_utility_call_state.cached_invite_cancel) delete _utility_call_state.cached_invite_cancel;
  };
  var _isCallWindowBusy = function() {
    if (!TS.model.is_our_app || !TSSSB.call("supportsCallWindowStatus")) {
      return Promise.resolve(!!_utility_call_state.is_call_window_busy);
    }
    return TSSSB.call("isCallWindowBusy");
  };
  var _startCall = function(url, name, options) {
    options = options || {};
    url += "?_fast_members=1&_end_call_sound=1" + (options.start_with_video ? "&_start_with_video=1" : "");
    if (TS.pri) {
      url += "&pri=" + TS.pri;
    }
    if (TS.qs_args._calls_halt_at_loading_screen) {
      url += "&_calls_halt_at_loading_screen=1";
    }
    if (TS.qs_args.locale) {
      url += "&locale=" + TS.qs_args.locale;
    }
    if (TS.qs_args.js_path) {
      url += "&js_path=" + encodeURIComponent(TS.qs_args.js_path);
    }
    TS.utility.calls.promiseToGetRegions().then(function(regions) {
      TS.utility.calls.promiseToGetServer(regions, name).catch(_.noop);
    });
    if (TS.model.is_our_app) {
      _startCallWindow(url);
    } else {
      _utility_call_state.window_handle = window.open(url, name);
    }
    _utility_call_state.call_channel = name;
  };
  var _joinVideoCall = function(room_id, start_with_video) {
    if (!TS.model.supports_voice_calls && !TS.utility.calls.platformHasCallsCode()) {
      _showModalForUnsupportedCalls();
      return;
    }
    if (!TS.utility.calls.isCallWindowReady()) return;
    _isCallWindowBusy().then(function(is_busy) {
      if (is_busy) {
        _handleAlreadyInCall();
        return;
      }
      TS.utility.calls_log.logEvent({
        event: _utility_calls_config.log_events.join_call,
        value: {
          room_id: room_id,
          start_with_video: start_with_video
        }
      });
      _startCall(_utility_call_state.calls_url_prefix + room_id, room_id, {
        start_with_video: start_with_video
      });
    });
  };
  var _showModalForAlreadyInCall = function(team_name) {
    var dialog_title;
    if (team_name) {
      dialog_title = TS.i18n.t("You’re already in a call on another team ({team_name})", "utility")({
        team_name: team_name
      });
    } else {
      dialog_title = TS.i18n.t("You’re already in a call on another team", "utility")();
    }
    TS.generic_dialog.start({
      title: dialog_title,
      body: '<p class="no_bottom_margin">' + TS.i18n.t("You can only be in one call at a time. Please end that call and try again.", "utility")() + "</p>",
      go_button_text: TS.i18n.t("OK", "utility")(),
      show_cancel_button: false
    });
  };
  var _handleAlreadyInCall = function() {
    TS.utility.calls_log.log("_handleAlreadyInCall");
    if (!TS.model.is_our_app) {
      _utility_call_state.window_handle.focus();
      return;
    }
    if (!TSSSB.call("supportsCallWindowStatus")) {
      TSSSB.call("focusWindow", _utility_call_state.call_window_token);
      return;
    }
    TSSSB.call("getCallWindowTeamId", {
      cb: function(team_id) {
        if (team_id === TS.model.team.id) {
          TSSSB.call("focusWindow", _utility_call_state.call_window_token);
        } else {
          TSSSB.call("getCallWindowTeamName", {
            cb: function(team_name) {
              _showModalForAlreadyInCall(team_name);
            }
          });
        }
      }
    });
  };
  var _updateCallIcon = function() {
    if (TS.utility.calls.platformHasCallsCode()) {
      TS.client.msg_pane.setCallButtonState(TS.utility.calls.isCallWindowReady());
    } else {
      TS.client.msg_pane.setCallButtonState(true);
    }
  };
  var _updateMiniPanelState = function(mini_panel_state) {
    if (!_utility_call_state.mini_panel_token) {
      TS.utility.calls_log.logEventWarn({
        event: _utility_calls_config.log_events.no_mini_panel_in_update
      });
      return;
    }
    _sendMessageToMiniPanel({
      message_type: TS.utility.calls.messages_to_mini_panel_types.update_state,
      mini_panel_state: mini_panel_state
    });
  };
  var _notifySSBsCallWindowBusy = function() {
    if (!TS.model.is_our_app) return;
    TSSSB.call("setCallWindowBusy", {
      is_busy: true
    });
    TSSSB.call("setCallWindowToken", {
      token: _utility_call_state.call_window_token
    });
    TSSSB.call("setCallWindowTeamId", {
      team_id: TS.model.team.id
    });
    TSSSB.call("setCallWindowTeamName", {
      team_name: TS.model.team.name
    });
  };
  var _notifySSBsCallWindowAvailable = function() {
    if (!TS.model.is_our_app) return;
    if (!TSSSB.call("supportsCallWindowStatus")) return;
    var call_window_token = String(_utility_call_state.call_window_token);
    TSSSB.call("getCallWindowToken", {
      cb: function(token) {
        if (token !== call_window_token) return;
        TSSSB.call("setCallWindowBusy", {
          is_busy: false
        });
        TSSSB.call("clearCallWindowToken");
        TSSSB.call("clearCallWindowTeamId");
        TSSSB.call("clearCallWindowTeamName");
      }
    });
  };
  var _notifySSBsIncomingCallWindowBusy = function() {
    if (!TS.model.is_our_app) return;
    if (!TSSSB.call("supportsIncomingCallWindowStatus")) return;
    TSSSB.call("setIncomingCallWindowBusy", {
      is_busy: true
    });
    if (_utility_call_state.incoming_call_token) {
      TSSSB.call("setIncomingCallWindowToken", {
        token: _utility_call_state.incoming_call_token
      });
    }
    TSSSB.call("setIncomingCallWindowTeamId", {
      team_id: TS.model.team.id
    });
    TSSSB.call("setIncomingCallWindowTeamName", {
      team_name: TS.model.team.name
    });
  };
  var _notifySSBsIncomingCallWindowAvailable = function() {
    var _clearIncomingCallWindowData = function() {
      TSSSB.call("setIncomingCallWindowBusy", {
        is_busy: false
      });
      TSSSB.call("clearIncomingCallWindowToken");
      TSSSB.call("clearIncomingCallWindowTeamId");
      TSSSB.call("clearIncomingCallWindowTeamName");
    };
    if (!TS.model.is_our_app) return;
    if (!_utility_call_state.incoming_call_token) {
      _clearIncomingCallWindowData();
      return;
    }
    var incoming_call_window_token = String(_utility_call_state.incoming_call_token);
    TSSSB.call("getIncomingCallWindowToken", {
      cb: function(token) {
        if (token !== incoming_call_window_token) return;
        _clearIncomingCallWindowData();
      }
    });
  };
  var _forceJanusDisconnect = function(server, session_id, token, transaction_id) {
    $.ajax({
      timeout: 2e3,
      type: "POST",
      url: server + "/" + session_id,
      async: true,
      cache: false,
      contentType: "application/json",
      headers: {
        Authorization: "Basic " + btoa(":" + token)
      },
      data: JSON.stringify({
        janus: "destroy",
        transaction: transaction_id
      }),
      dataType: "json"
    });
  };
  var _receivePostedMessageFromChildWindow = function(evt) {
    if (!evt || !evt.data || !evt.data.message_type) {
      TS.utility.calls_log.logEvent({
        event: _utility_calls_config.log_events.invalid_msg_from_child_window,
        value: evt
      });
      return;
    }
    if (!TS.model.is_our_app && !TS.utility.calls.verifyOriginUrl(evt.origin)) {
      return;
    }
    if (evt.data.origin_window_type === TS.utility.calls.window_types.call_window) {
      switch (evt.data.message_type) {
        case TS.utility.calls.messages_from_call_window_types.update_mini_panel:
          _updateMiniPanelState(evt.data.mini_panel_state);
          if (evt.data.mini_panel_state.hidden) TSSSB.call("hideWindow", _utility_call_state.mini_panel_token);
          break;
        case TS.utility.calls.messages_from_call_window_types.set_call_window_loaded:
          _setCallWindowLoaded(evt.data.is_loaded);
          _notifyReachability();
          break;
        case TS.utility.calls.messages_from_call_window_types.set_call_window_busy:
          _setCallWindowBusy(evt.data.is_busy);
          break;
        case TS.utility.calls.messages_from_call_window_types.show_growl_notification:
          if (TS.notifs.getGlobalNotificationSetting() !== "nothing") {
            TS.ui.growls.show(evt.data.title, evt.data.txt, null, {
              subtitle: evt.data.subtitle,
              sound_name: "none",
              channelId: evt.data.channel,
              is_call_notification: true
            });
          }
          break;
        case TS.utility.calls.messages_from_call_window_types.set_is_publisher_screensharing:
          _utility_call_state.is_publisher_screensharing = evt.data.is_enabled;
          _utility_call_state.is_publisher_screenhero = evt.data.is_screenhero;
          break;
        case TS.utility.calls.messages_from_call_window_types.close:
          _closeCallWindow();
          _closeMiniPanel();
          _closeCursorsWindow();
          break;
        case TS.utility.calls.messages_from_call_window_types.hide_call_window:
          TSSSB.call("hideWindow", _utility_call_state.call_window_token);
          break;
        case TS.utility.calls.messages_from_call_window_types.get_calls_status:
          _isCallWindowBusy().then(function(is_busy) {
            TSSSB.call("getCallWindowTeamName", {
              cb: function(team_name) {
                _sendMessageToCallWindow({
                  message_type: TS.utility.calls.messages_to_call_window_types.calls_status,
                  is_busy: is_busy,
                  team_name: team_name
                });
              }
            });
          });
          break;
        case TS.utility.calls.messages_from_call_window_types.force_janus_disconnect:
          _forceJanusDisconnect(evt.data.server, evt.data.session_id, evt.data.token, evt.data.transaction_id);
          break;
        case TS.utility.calls.messages_from_call_window_types.get_regions:
          TS.utility.calls.promiseToGetRegions().then(function(regions) {
            _sendMessageToCallWindow({
              message_type: TS.utility.calls.messages_to_call_window_types.regions,
              regions: regions
            });
          });
          break;
        case TS.utility.calls.messages_from_call_window_types.get_server:
          var call_id = evt.data.id;
          var call_regions = evt.data.regions;
          TS.utility.calls.promiseToGetServer(call_regions, call_id).then(function(response) {
            _sendMessageToCallWindow({
              message_type: TS.utility.calls.messages_to_call_window_types.got_server,
              data: response.data
            });
            TS.utility.calls.clearServerPromise(call_id);
          }).catch(function(error) {
            TS.utility.calls.clearServerPromise(call_id);
            _sendMessageToCallWindow({
              message_type: TS.utility.calls.messages_to_call_window_types.got_server_error,
              error: error.data.error
            });
          });
          break;
        case TS.utility.calls.messages_from_call_window_types.get_member_data:
          TS.members.ensureMembersArePresent([evt.data.user_id]).then(function() {
            _sendMessageToCallWindow({
              reply_to: evt.data.message_id,
              message_type: evt.data.message_type,
              message: {
                user_id: evt.data.user_id,
                member: TS.members.getMemberById(evt.data.user_id)
              }
            });
          });
          break;
        case TS.utility.calls.messages_from_call_window_types.play_sound:
          TS.sounds.play("call/" + evt.data.sound + "_" + TS.boot_data.call_sounds_version + ".mp3");
          break;
        default:
          TS.utility.calls_log.logEvent({
            event: _utility_calls_config.log_events.unknown_msg_from_call_window,
            value: evt
          });
          break;
      }
    } else if (evt.data.origin_window_type === TS.utility.calls.window_types.incoming_call) {
      switch (evt.data.message_type) {
        case TS.utility.calls.messages_from_incoming_call_types.user_clicked_accept_or_reject:
          TS.utility.calls_log.logEvent({
            event: _utility_calls_config.log_events.incoming_call_click,
            value: evt.data
          });
          TS.utility.calls.sendInvitationResponseToCaller({
            user_id: evt.data.user_id,
            room_id: evt.data.room_id,
            response: evt.data.did_accept ? TS.utility.calls.invite_response_types.accept : TS.utility.calls.invite_response_types.reject,
            did_choose_video: evt.data.did_choose_video
          });
          var skip_teardown = true;
          TS.utility.calls.closeIncomingCallWindow(skip_teardown);
          break;
        default:
          TS.utility.calls_log.logEvent({
            event: _utility_calls_config.log_events.unknown_msg_from_incoming_call_window,
            value: evt
          });
          break;
      }
    } else if (evt.data.origin_window_type === TS.utility.calls.window_types.mini_panel) {
      switch (evt.data.message_type) {
        case TS.utility.calls.messages_from_mini_panel_types.user_clicked_action:
          TS.utility.calls_log.logEvent({
            event: _utility_calls_config.log_events.mini_panel_click,
            value: evt.data
          });
          if (evt.data.action === "mute" || evt.data.action === "leave" || evt.data.action === "screenhero" || evt.data.action === "stop_screenshare") {
            _sendMessageToCallWindow({
              message_type: TS.utility.calls.messages_to_call_window_types.mini_panel_action,
              action: evt.data.action
            });
          } else if (evt.data.action === "activate") {
            TSSSB.call("showWindow", _utility_call_state.call_window_token);
          }
          break;
        default:
          TS.utility.calls_log.logEvent({
            event: _utility_calls_config.log_events.unknown_msg_from_mini_panel,
            value: evt
          });
          break;
      }
    }
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.contenteditable", {
    onStart: function() {
      TS.utility.contenteditable.refreshTextPreferences();
    },
    create: function(input, options) {
      if (!options) options = {};
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) return;
      if (_getTextyInstance(input)) return;
      var default_options = {
        modules: {
          tabcomplete: {
            searchOptions: {
              complete_member_specials: true
            },
            appendMenu: function(menu) {
              $("body").append(menu);
            }
          },
          textsubstitutions: {
            getTextPreferences: TS.utility.contenteditable.getTextPreferences,
            buildSmartQuotesDelta: TS.format.texty.buildSmartQuotesDelta
          },
          clipboard: {}
        },
        onEnter: function() {
          return true;
        },
        onEscape: function() {
          return true;
        },
        onTab: function() {
          return TS.boot_data.feature_keyboard_navigation;
        },
        singleLineInput: false,
        onTextChange: _.noop,
        attributes: {
          role: "textbox",
          tabindex: 0,
          "aria-multiline": true,
          "aria-haspopup": true
        },
        log: _.partial(TS.log, 116),
        logError: TS.error
      };
      if (TS.boot_data.feature_texty_mentions) {
        default_options.modules.slackmention = {};
      }
      if (TS.boot_data.feature_name_tagging_client) {
        default_options.useNameTagging = true;
      }
      _.defaultsDeep(options, default_options);
      if (options.modules && options.modules.tabcomplete) {
        if (!options.modules.tabcomplete.completers) {
          options.modules.tabcomplete.completers = [TS.tabcomplete.channels, TS.tabcomplete.commands, TS.tabcomplete.emoji, TS.tabcomplete.members];
        }
        if (_.includes(options.modules.tabcomplete.completers, TS.tabcomplete.commands)) {
          var on_tab_callback = options.onTab || _.noop;
          options.onTab = function() {
            if (!TS.utility.contenteditable.value(input) && _insertLastCommandFromHistory(input)) {
              return;
            }
            return on_tab_callback();
          };
        }
      }
      var on_enter_callback = options.onEnter;
      options.onEnter = function(modifiers) {
        if (!options.singleLineInput && _shouldMakeNewline(modifiers, input)) return true;
        if (_.isFunction(on_enter_callback)) return on_enter_callback(modifiers);
        return false;
      };
      var texty = new Texty(input, options);
      _setTextyInstance(input, texty);
    },
    unload: function(input) {
      input = _normalizeInput(input);
      if (!input) return;
      if (!_isTextyElement(input)) return;
      var texty = _getTextyInstance(input);
      if (texty) texty.unload();
    },
    isActiveElement: function(input) {
      input = _normalizeInput(input);
      if (!input) return false;
      if (_isFormElement(input)) {
        return document.activeElement === input;
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        if (texty.hasFocus()) {
          return true;
        }
        return document.activeElement && document.activeElement.className.indexOf("ql-clipboard") != -1 && document.activeElement.parentNode === input;
      }
      return false;
    },
    focus: function(input) {
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) {
        input.focus();
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        texty.focus();
      }
    },
    hasFocus: function(input) {
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) {
        return $(input).is(":focus");
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        return texty.hasFocus();
      }
    },
    blur: function(input) {
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) {
        input.blur();
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        texty.blur();
      }
    },
    isContenteditable: function(input) {
      input = _normalizeInput(input);
      if (input && TS.ui && TS.ui.paste && TS.ui.paste.catcher_div && TS.ui.paste.catcher_div === input) return false;
      if (input.isContentEditable) return true;
      if (_isTextyElement(input)) return true;
      return false;
    },
    disable: function(input) {
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) {
        input.disabled = true;
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        texty.disable();
      }
    },
    isDisabled: function(input) {
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) {
        return input.disabled === true;
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        return !texty.isEnabled();
      }
      return false;
    },
    enable: function(input) {
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) {
        input.disabled = false;
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        texty.enable();
      }
    },
    isEnabled: function(input) {
      input = _normalizeInput(input);
      if (!input) return false;
      if (_isFormElement(input)) {
        return input.disabled !== true;
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        return texty.isEnabled();
      }
      return false;
    },
    value: function(input, value) {
      input = _normalizeInput(input);
      if (!input) return "";
      if (_isFormElement(input)) {
        if (_.isString(value)) input.value = value;
        return input.value;
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        if (_.isString(value)) texty.setText(value);
        return texty.getText();
      }
      return "";
    },
    getTextForRange: function(input, index, length) {
      input = _normalizeInput(input);
      if (!input) return "";
      if (_isFormElement(input)) {
        var value = TS.utility.contenteditable.value(input);
        return value.substr(index, length);
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        return texty.getTextForRange(index, length);
      }
      return "";
    },
    insertTextAtCursor: function(input, value, focus_after_insert) {
      input = _normalizeInput(input);
      if (!input) return "";
      var current_cursor;
      if (_isFormElement(input)) {
        if (!_.isString(value)) return input.value;
        current_cursor = TS.utility.contenteditable.cursorPosition(input);
        var current_val = TS.utility.contenteditable.value(input);
        var new_val = current_val.substr(0, current_cursor.start) + value + current_val.substr(current_cursor.start);
        input.value = new_val;
        if (focus_after_insert) {
          TS.utility.contenteditable.focus(input);
          TS.utility.contenteditable.cursorPosition(input, current_cursor.start + value.length, 0);
        }
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        if (_.isString(value)) texty.insertTextAtCursor(value, focus_after_insert);
      }
      return "";
    },
    getFormats: function(input, index) {
      input = _normalizeInput(input);
      if (!input) return {};
      if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        return texty.getFormats(index);
      }
      return {};
    },
    displayValue: function(input) {
      input = _normalizeInput(input);
      if (!input) return "";
      if (_isFormElement(input)) {
        return input.value;
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        return texty.getText();
      }
      return "";
    },
    isEmpty: function(input, ignore_whitespace) {
      var value = TS.utility.contenteditable.value(input);
      if (value && ignore_whitespace) {
        value = value.trim();
      }
      return value.length === 0;
    },
    clear: function(input, is_silent) {
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) {
        input.value = "";
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        texty.clear({
          is_silent: !!is_silent
        });
      }
    },
    placeholder: function(input, value) {
      input = _normalizeInput(input);
      if (!input) return "";
      var next_value;
      if (_isFormElement(input)) {
        if (_.isString(value)) {
          if (value === "") {
            input.removeAttribute("placeholder");
          } else {
            input.setAttribute("placeholder", value);
          }
        }
        next_value = input.getAttribute("placeholder");
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        texty.setPlaceholder(value);
        next_value = texty.getPlaceholder();
      }
      return next_value || "";
    },
    cursorPosition: function(input, start, length) {
      var texty;
      var pos = {
        start: 0,
        end: 0,
        length: 0
      };
      input = _normalizeInput(input);
      if (!input) return pos;
      if (_.isNumber(start)) {
        if (!length) length = 0;
        pos.start = start;
        pos.end = start + length;
        pos.length = length;
        if (_isFormElement(input)) {
          TS.selection.selectCharacters(input, pos.start, pos.end);
        } else if (_isTextyElement(input)) {
          texty = _getTextyInstance(input);
          texty.setSelection(pos.start, pos.length);
        }
      } else {
        if (!TS.utility.contenteditable.isActiveElement(input)) {
          var prev_pos = $(input).data("utility-contenteditable-cursor-position");
          if (_.isObject(prev_pos)) return prev_pos;
        }
        if (_isFormElement(input)) {
          input.focus();
          pos.start = input.selectionStart;
          pos.end = input.selectionEnd;
          pos.length = Math.abs(input.selectionEnd - input.selectionStart);
        } else if (_isTextyElement(input)) {
          texty = _getTextyInstance(input);
          var range = texty.getSelection();
          if (range) {
            pos.start = range.index;
            pos.length = range.length;
            pos.end = pos.start + pos.length;
          }
        }
      }
      return pos;
    },
    isTextSelected: function(input) {
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) {
        return !!(window.getSelection && window.getSelection().toString());
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        return texty.getSelection().length > 0;
      }
    },
    serialize: function(input) {
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) {
        return input.value;
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        return texty.serialize();
      }
      return "";
    },
    deserialize: function(input, serialized) {
      input = _normalizeInput(input);
      if (!input) return;
      if (_isFormElement(input)) {
        input.value = serialized;
      } else if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        texty.deserialize(serialized);
      }
    },
    isCursorInPreBlock: function(input) {
      input = _normalizeInput(input);
      if (!input) return false;
      if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        return texty.isCursorInPreBlock();
      }
      return false;
    },
    deleteSelection: function(input) {
      input = _normalizeInput(input);
      if (!input) return false;
      if (_isTextyElement(input)) {
        var texty = _getTextyInstance(input);
        return texty.deleteSelection();
      }
      window.getSelection().deleteFromDocument();
    },
    getTextPreferences: function() {
      return _text_preferences;
    },
    refreshTextPreferences: function() {
      if (!TS.model.is_our_app && !TS.boot_data.feature_texty_browser_substitutions || TS.model.is_our_app && !TS.model.is_mac) {
        _text_preferences = false;
        return;
      }
      _text_preferences = {
        substitutions: {},
        useSmartDashes: true,
        useSmartQuotes: true
      };
      if (TS.model.is_our_app) {
        var raw_preferences = TSSSB.call("readSystemTextPreferences");
        if (raw_preferences) {
          _text_preferences.substitutions = _.mapValues(_.keyBy(raw_preferences.substitutions, "replace"), "with");
          _text_preferences.useSmartDashes = raw_preferences.useSmartDashes;
          _text_preferences.useSmartQuotes = raw_preferences.useSmartQuotes;
        }
      }
      if (!_text_preferences.substitutions["--"] && _text_preferences.useSmartQuotes) _text_preferences.substitutions["--"] = "—";
    },
    clearHistory: function(input) {
      input = _normalizeInput(input);
      if (!input) return false;
      var texty = _getTextyInstance(input);
      if (!texty) return;
      texty.clearHistory();
    },
    supportsTexty: function() {
      return TS.boot_data.feature_texty && !TS.model.is_old_ie;
    },
    test: function() {
      var test = {
        _normalizeInput: _normalizeInput,
        _isFormElement: _isFormElement
      };
      return test;
    }
  });
  var _text_preferences = false;
  var _normalizeInput = function(input) {
    if (!input) return false;
    if (input instanceof jQuery && input[0]) input = input[0];
    if (input.nodeType !== Node.ELEMENT_NODE) return false;
    if (!TS.utility.contenteditable.supportsTexty()) return input;
    if (input.tagName.toLowerCase() === "textarea") return input;
    if (input.tagName.toLowerCase() === "input") return input;
    if ($(input).hasClass("ql-editor")) return input.parentNode;
    if (input.hasAttribute("contenteditable")) return input;
    if (TS.utility.contenteditable.supportsTexty() && input.tagName === "DIV") return input;
    return false;
  };
  var _isFormElement = function(input) {
    if (!input) return false;
    if (!TS.utility.contenteditable.supportsTexty()) return true;
    if (input.tagName.toLowerCase() === "textarea") return true;
    if (input.tagName.toLowerCase() === "input") return true;
    return false;
  };
  var _isTextyElement = function(input) {
    if (!input) return false;
    if (!TS.utility.contenteditable.supportsTexty()) return false;
    var texty = _getTextyInstance(input);
    if (texty) return true;
    return false;
  };
  var _getTextyInstance = function(input) {
    return $(input).data("__ts_quill");
  };
  var _setTextyInstance = function(input, instance) {
    $(input).data("__ts_quill", instance);
  };
  var _shouldMakeNewline = function(modifiers, input) {
    if (modifiers.metaKey) return false;
    if (input && TS.utility.contenteditable.isCursorInPreBlock(input) && TS.model.prefs.enter_is_special_in_tbt) {
      return !modifiers.shiftKey;
    }
    if (modifiers.shiftKey && !(modifiers.ctrlKey || modifiers.altKey)) return true;
    if (!modifiers.shiftKey && (modifiers.ctrlKey || modifiers.altKey)) return true;
    return false;
  };
  var _insertLastCommandFromHistory = function(input) {
    var recent_commands = TS.chat_history.getCommands();
    if (!recent_commands.length) return false;
    var prev_command = recent_commands[0];
    TS.utility.contenteditable.value(input, prev_command);
    TS.utility.contenteditable.cursorPosition(input, prev_command.length, 0);
    return true;
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.attachments", {
    hasContent: function(attachment, excluded_props) {
      if (!attachment) return false;
      if (!_.isArray(excluded_props)) excluded_props = [].concat(excluded_props);
      var props = _.difference(_CONTENT_PROPS, excluded_props);
      return _.some(props, function(prop) {
        return !_.isEmpty(attachment[prop]);
      });
    },
    getMediaSource: function(attachment) {
      if (!attachment) return;
      var media_type = TS.utility.attachments.getMediaType(attachment);
      switch (media_type) {
        case "video":
          return attachment.thumb_url;
        case "audio":
          return attachment.audio_html || attachment.audio_url;
        case "other":
          return attachment.other_html;
        case "image":
          return attachment.image_url;
        default:
          break;
      }
      return attachment.from_url;
    },
    getMediaType: function(attachment) {
      if (!attachment) return;
      if (attachment.video_html) return "video";
      if (attachment.audio_html || attachment.audio_url) return "audio";
      if (attachment.other_html) return "other";
      if (attachment.image_url) return "image";
    },
    getDecoratedAttachment: function(original_attachment, msg) {
      var attachment = _.cloneDeep(original_attachment);
      attachment._source = _getSource(attachment);
      if (_isSlackMessageUnfurl(attachment)) {
        attachment = _decorateForSlackMessage(attachment, msg);
      } else if (attachment.service_name === "twitter") {
        attachment = _decorateForTweet(attachment);
      } else if (attachment.service_name === "salesforce") {
        attachment = _decorateForSalesforce(attachment);
      }
      if (TS.boot_data.feature_auth_unfurls && attachment.is_app_unfurl && attachment.bot_id) {
        var bot = TS.bots.getBotById(attachment.bot_id);
        if (bot) {
          attachment._attribution = bot.name;
          attachment._attribution_link = "/services/" + attachment.bot_id;
        }
      }
      if (attachment._source.icon) attachment._source.icon = _getProxiedIcon(attachment._source.icon);
      if (attachment.footer_icon) attachment.footer_icon = _getProxiedIcon(attachment.footer_icon);
      return attachment;
    },
    getMediaCaretLocation: function(attachment) {
      var location = _.find(_POSSIBLE_CARET_LOCATIONS, function(prop) {
        return _.some(attachment[prop]);
      });
      return location || "end";
    },
    isAutomatedSlackUnfurl: function(attachment) {
      return !!attachment && _isSlackMessageUnfurl(attachment) && TS.utility.msgs.automated_subtypes.indexOf(attachment.msg_subtype) !== -1;
    },
    formatMessageAttachmentPart: function(text, msg, do_highlighting, do_specials, enable_slack_action_links) {
      if (msg) {
        if (do_highlighting && TS.utility.msgs.isAutomatedMsg(msg)) {
          do_highlighting = false;
        }
        if (do_highlighting && !_.isEmpty(msg.attachments)) {
          var has_automated_attachments = msg.attachments.some(TS.utility.attachments.isAutomatedSlackUnfurl);
          if (has_automated_attachments) do_highlighting = false;
        }
      }
      var formatted_msg = TS.format.formatWithOptions(text, msg, {
        no_highlights: do_highlighting !== true,
        no_specials: do_specials !== true,
        enable_slack_action_links: enable_slack_action_links === true
      });
      formatted_msg = TS.utility.msgs.handleSearchHighlights(formatted_msg);
      return formatted_msg;
    },
    findAttachment: function(args) {
      if (!args) return;
      var message = TS.utility.msgs.findMsg(args.message_ts, args.channel_id);
      if (!message) return;
      return _.find(message.attachments, {
        id: args.attachment_id
      });
    },
    test: function() {
      return {
        _isSlackMessageUnfurl: _isSlackMessageUnfurl
      };
    }
  });
  var _CONTENT_PROPS = ["title", "text", "pretext", "video_html", "audio_html", "audio_url", "other_html", "from_url", "fields", "actions", "image_url", "thumb_url", "author_name", "service_name", "footer", "footer_icon", "ts"];
  var _POSSIBLE_CARET_LOCATIONS = ["ts", "footer", "fields", "text", "title", "_source"];
  var _getSource = function(attachment) {
    var source = {};
    source.icon = attachment.service_icon || attachment.author_icon;
    source.name = attachment.service_name || attachment.author_name;
    source.link = attachment.service_url || attachment.author_link;
    source.author_name = attachment.author_name == source.name ? attachment.author_subname : attachment.author_name;
    source.author_link = attachment.author_link;
    return source;
  };
  var _isSlackMessageUnfurl = function(attachment) {
    if (attachment.is_msg_unfurl) return true;
    if (attachment.from_url && /slack\.com\/archives\/.+\/p.+/.test(attachment.from_url)) {
      attachment.is_msg_unfurl = true;
      return true;
    }
  };
  var _decorateForSlackMessage = function(attachment, msg) {
    if (attachment.author_link) {
      var slack_author_id = TS.utility.getMemberIdFromURL(attachment.author_link);
      var slack_bot_id = TS.utility.getBotIDFromURL(attachment.author_link);
      if (slack_author_id) attachment._slack_author_id = slack_author_id;
      if (slack_bot_id) attachment._slack_bot_id = slack_bot_id;
    }
    if (msg && msg.subtype === "pinned_item") {
      attachment.from_url = TS.utility.msgs.constructAbsoluteMsgPermalink(TS.shared.getActiveModelOb(), attachment.ts);
    }
    attachment._is_automated_unfurl = TS.utility.attachments.isAutomatedSlackUnfurl(attachment);
    attachment.color = null;
    _.set(attachment, "mrkdwn_in_hash.text", true);
    var probably_real_name = attachment.author_name;
    var probably_username = attachment.author_subname;
    if (TS.members.shouldDisplayRealNames() || TS.boot_data.feature_name_tagging_client) {
      attachment._source.name = probably_real_name || probably_username;
    } else {
      attachment._source.name = probably_username || probably_real_name;
    }
    attachment._source.author_name = null;
    attachment._source.author_link = null;
    attachment._unfurl_type_message = true;
    if (!attachment.footer) {
      var footer_text = _getSlackMessageFooterText(attachment.from_url, msg);
      if (footer_text) attachment.footer = footer_text;
    }
    return attachment;
  };
  var _getSlackMessageFooterText = function(url, msg) {
    url = url || "";
    var footer_text = "";
    var channel_name = TS.utility.getChannelNameFromUrl(url);
    var model_ob = TS.shared.getModelObById(channel_name);
    if (TS.boot_data.feature_intl_channel_names && model_ob) channel_name = model_ob.name;
    if (model_ob && (model_ob.is_im || model_ob.is_mpim)) {
      footer_text = TS.i18n.t("Direct message", "attachments")();
    } else if (channel_name) {
      if (msg && msg.thread_ts) {
        if (TS.utility.msgs.isMsgReply(msg)) {
          footer_text = TS.i18n.t("From a thread in #{channel_name}", "attachments")({
            channel_name: channel_name
          });
        } else {
          footer_text = TS.i18n.t("Thread in #{channel_name}", "attachments")({
            channel_name: channel_name
          });
        }
      } else {
        footer_text = TS.i18n.t("Posted in #{channel_name}", "attachments")({
          channel_name: channel_name
        });
      }
    }
    return footer_text;
  };
  var _decorateForTweet = function(attachment) {
    attachment._source.name = attachment.author_name;
    attachment._source.link = "https://twitter.com/" + attachment.author_subname;
    attachment._source.author_name = attachment.author_subname;
    attachment._source.author_link = attachment._source.link;
    attachment._unfurl_type_message = true;
    if (!attachment.footer) attachment.footer = TS.i18n.t("Twitter", "attachments")();
    if (!attachment.footer_icon) attachment.footer_icon = cdn_url + "/6e067/img/services/twitter_pixel_snapped_32.png";
    return attachment;
  };
  var _decorateForSalesforce = function(attachment) {
    attachment._source.name = attachment.author_name;
    attachment._source.author_name = attachment.author_subname;
    attachment._unfurl_type_message = true;
    attachment._always_expand = true;
    return attachment;
  };
  var _getProxiedIcon = function(url) {
    if (!url) return;
    if (url.indexOf("/img/") === 0) return url;
    var options = {
      width: 16,
      height: 16
    };
    if (url.split(".").pop() === "ico") options.convert_ico = true;
    return TS.utility.getImgProxyURLWithOptions(url, options);
  };
})();
(function() {
  "use strict";
  TS.registerModule("incoming_call", {
    div: null,
    is_showing: false,
    default_setting: {
      onAccept: null,
      onReject: null,
      onTimeout: null,
      onShow: null,
      onEnd: null
    },
    current_setting: null,
    Q: [],
    onKeydown: function(e) {
      if (e.which == TS.utility.keymap.enter) {
        if (TS.utility.getActiveElementProp("NODENAME") === "BODY") {
          TS.incoming_call.accept();
          e.preventDefault();
        }
      } else if (e.which == TS.utility.keymap.esc) {
        if (TS.utility.getActiveElementProp("NODENAME") === "BODY") {
          TS.incoming_call.reject();
        }
      }
    },
    start: function(setting) {
      if (TS.incoming_call.is_showing) {
        if (setting.unique && TS.incoming_call.current_setting.unique == setting.unique) {
          TS.info("redundant generic dialog not Qed: " + setting.unique);
        } else {
          TS.incoming_call.Q.push(setting);
        }
        return;
      }
      TS.incoming_call.current_setting = _.defaults({}, setting, TS.incoming_call.default_setting);
      var current_setting = TS.incoming_call.current_setting;
      if (!TS.incoming_call.div) TS.incoming_call.build();
      var div = TS.incoming_call.div;
      var html = TS.templates.calls_incoming_call({
        caller: setting.caller,
        name: setting.name,
        is_video_call: setting.is_video_call,
        team: TS.model.team.name
      });
      div.empty();
      div.html(html);
      div.find(".accept_audio").click(function() {
        TS.incoming_call.accept(false);
      });
      div.find(".accept_video").click(function() {
        TS.incoming_call.accept(true);
      });
      div.find(".reject").click(TS.incoming_call.reject);
      div.modal("show");
      if (document.activeElement && document.activeElement != document.body) {
        document.activeElement.blur();
      }
      if (current_setting.onShow) {
        current_setting.onShow();
      }
    },
    accept: function(did_choose_video) {
      if (!TS.incoming_call.is_showing) {
        TS.error("incoming call not showing?");
        return;
      }
      var current_setting = TS.incoming_call.current_setting;
      var div = TS.incoming_call.div;
      div.modal("hide");
      current_setting.onAccept(did_choose_video);
    },
    reject: function() {
      var current_setting = TS.incoming_call.current_setting;
      TS.incoming_call.div.modal("hide");
      if (current_setting.onReject) {
        current_setting.onReject();
      }
    },
    timeout: function() {
      var current_setting = TS.incoming_call.current_setting;
      TS.incoming_call.div.modal("hide");
      if (current_setting.onTimeout) {
        current_setting.onTimeout();
      }
    },
    end: function() {
      var current_setting = TS.incoming_call.current_setting;
      TS.model.dialog_is_showing = false;
      TS.incoming_call.is_showing = false;
      $(window.document).unbind("keydown", TS.incoming_call.onKeydown);
      TS.incoming_call.div.empty();
      if (current_setting.onEnd) {
        current_setting.onEnd();
      }
      if (!TS.incoming_call.is_showing && TS.incoming_call.Q.length) {
        var o = TS.incoming_call.Q.shift();
        TS.incoming_call.start(o);
      }
    },
    build: function() {
      $("body").append('<div id="incoming_call" class="modal hide" data-keyboard="false" data-backdrop="static"></div>');
      TS.incoming_call.div = $("#incoming_call");
      var $div = TS.incoming_call.div;
      $div.on("hidden", function(e) {
        if (e.target != this) return;
        TS.incoming_call.end();
      });
      $div.on("show", function(e) {
        if (e.target != this) return;
        TS.model.dialog_is_showing = true;
        TS.incoming_call.is_showing = true;
      });
      $div.on("shown", function(e) {
        if (e.target != this) return;
        setTimeout(function() {
          if (!TS.incoming_call.is_showing) return;
          $div.find(".title_input").select();
          $(window.document).bind("keydown", TS.incoming_call.onKeydown);
        }, 100);
      });
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("inline_room_previews", {
    onStart: function() {},
    toggle_sig: new signals.Signal,
    checkForInlineRoomPreviewClick: function(e) {
      var $el = $(e.target);
      var $msg = $el.closest(".message");
      if (!$msg.length) return;
      if ($el.closest(".msg_inline_room_preview_expander, .msg_inline_room_preview_collapser").length) {
        e.preventDefault();
        TS.inline_room_previews.toggle($msg);
        return;
      }
      if ($el.closest(".screenhero_attachment").length && !$el.hasClass("screenhero_room_link")) {
        $msg.find(".screenhero_room_link").click();
      }
    },
    shouldExpand: function(room_id) {
      var state = TS.model.expandable_state["inline_room_" + room_id];
      var pref = TS.model.prefs.expand_internal_inline_imgs;
      return state === undefined ? pref : !!state;
    },
    toggle: function($msg) {
      var $call_object = $msg.find(".sh_call_container");
      var should_expand = $call_object.hasClass("sh_call_collapsed");
      var was_at_bottom = TS.client && TS.client.ui.areMsgsScrolledToBottom();
      TS.model.expandable_state["inline_room_" + $call_object.data("room-id")] = should_expand;
      TS.storage.storeExpandableState(TS.model.expandable_state);
      $call_object.toggleClass("sh_call_collapsed");
      TS.inline_room_previews.toggleIcons($msg);
      TS.inline_room_previews.toggle_sig.dispatch($msg);
      if (TS.client && was_at_bottom) TS.client.ui.instaScrollMsgsToBottom(false);
    },
    expand: function() {},
    collapse: function() {},
    toggleIcons: function($msg) {
      $msg.find(".msg_inline_room_preview_collapser, .msg_inline_room_preview_expander").toggleClass("hidden");
    },
    expandAllInCurrent: function() {
      $(".msg_inline_room_preview_expander").trigger("click");
      if (TS.client) TS.client.ui.instaScrollMsgsToBottom(false);
    },
    collapseAllInCurrent: function() {
      $(".msg_inline_room_preview_collapser").trigger("click");
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("ui.inline_msg_input", {
    onStart: _.noop,
    make: function($container, opts) {
      var was_at_bottom = TS.client && TS.client.ui.areMsgsScrolledToBottom();
      var include_emo = !!(TS.client && !opts.no_emo);
      var should_spellcheck = !!(TS.client && TS.model.prefs.webapp_spellcheck);
      var html = TS.templates.inline_message_input({
        input_id: _.uniqueId("inline_message_input_"),
        include_emo: include_emo,
        is_texty: TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty(),
        should_spellcheck: should_spellcheck
      });
      var $form = $(html);
      $form.appendTo($container);
      var $input = $form.find(".message_input");
      if (!TS.boot_data.feature_texty_takes_over || !TS.utility.contenteditable.supportsTexty()) {
        TSSSB.call("inputFieldCreated", $input.get(0));
      }
      if (opts.placeholder) {
        TS.utility.contenteditable.placeholder($input, opts.placeholder);
      }
      if (opts.aria_label) {
        $input.attr("aria-label", opts.aria_label);
      }
      _initTabComplete($input, opts);
      _initUI($form, $input, opts);
      _initEmoMenu($form, $input);
      if (opts.scrollIntoView) {
        _scrollIntoView($form, $input, was_at_bottom);
      }
      return $form;
    }
  });
  var _uniq_id = 0;
  var _initTabComplete = function($input, opts) {
    if (TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty()) return;
    var complete_member_specials = true;
    if (opts.complete_member_specials === false) complete_member_specials = false;
    var complete_cmds = false;
    if (TS.boot_data.feature_threads_slash_cmds) complete_cmds = !!opts.complete_cmds;
    var in_thread = false;
    if (TS.boot_data.feature_threads_slash_cmds) in_thread = !!opts.in_thread;
    $input.TS_tabComplete({
      complete_cmds: complete_cmds,
      complete_channels: true,
      complete_emoji: true,
      complete_member_specials: complete_member_specials,
      complete_user_groups: true,
      no_tab_out: true,
      onComplete: function(txt, new_cp) {
        TS.utility.populateInput($input, txt, new_cp);
      },
      sort_by_membership: true,
      include_self: !!TS.boot_data.feature_name_tagging_client,
      model_ob: opts.model_ob,
      in_thread: in_thread
    });
    var props = {
      id: "inline_msg_input_tab_ui_" + _uniq_id,
      scroll_with_element: !!TS.client,
      model_ob: opts.model_ob
    };
    _uniq_id += 1;
    var in_flexpane = $input.closest("#col_flex").length > 0;
    if (in_flexpane) {
      props.min_width = 300;
      props.narrow = !!TS.client;
    }
    $input.tab_complete_ui(props);
  };
  var _initUI = function($form, $input, opts) {
    var submit_fn = opts.onSubmit || _.noop;
    var cancel_fn = opts.onCancel || _.noop;
    if (TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty()) {
      TS.utility.contenteditable.create($input, {
        modules: {
          msginput: {
            onUpArrow: function() {
              if (!TS.model.prefs.arrow_history) return _maybeEditLastMessage($input, false, opts);
            },
            onUpArrowCmd: function() {
              _maybeEditLastMessage($input, true, opts);
            }
          },
          tabcomplete: {
            searchOptions: {
              complete_member_specials: true,
              model_ob: opts.model_ob
            },
            completers: opts.completers,
            positionMenu: function(menu) {
              var offset = $input.offset();
              var to_the_edge_width = $(window).width() - offset.left - 2;
              menu.style.width = Math.min($input.outerWidth(), to_the_edge_width) + "px";
              menu.style.minWidth = 0;
              TS.tabcomplete.positionUIRelativeToInput(menu, $input);
            }
          }
        },
        placeholder: opts.placeholder,
        onEnter: function() {
          if (!TS.client.ui.cal_key_checker.prevent_enter) _tryToSubmit($input, $form, submit_fn);
          if (opts.onEnter) opts.onEnter();
          return false;
        },
        onTab: function() {
          if (opts.onTab) opts.onTab();
          return false;
        },
        onTextChange: function() {
          TS.msg_edit.checkLengthAndUpdateMessage($input);
          if (opts.onTextChange) opts.onTextChange($input);
        }
      });
      TS.utility.contenteditable.enable($input);
    }
    $form.bind("destroyed", function() {
      cancel_fn($form);
      if (!TS.boot_data.feature_texty_takes_over || !TS.utility.contenteditable.supportsTexty()) {
        TSSSB.call("inputFieldRemoved", $input.get(0));
      }
    });
    $form.bind("submit", function(e) {
      e.preventDefault();
      _tryToSubmit($input, $form, submit_fn);
    });
    if (TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty()) return;
    $input.bind("textchange", function() {
      TS.msg_edit.checkLengthAndUpdateMessage($input);
      if (opts.onTextChange) opts.onTextChange($input);
    }).bind("keyup", function() {
      var selection;
      if (window.getSelection) {
        selection = window.getSelection();
        if (selection && selection.toString && !selection.toString()) {
          $form.scrollintoview({
            direction: "vertical",
            px_offset: -50
          });
        }
      }
    }).bind("keydown", function(e) {
      if (e.which == TS.utility.keymap.enter && (e.ctrlKey || e.altKey)) {
        if (!TS.model.is_mac || (TS.model.is_FF || TS.model.is_electron || TS.model.is_chrome_desktop)) {
          var p = TS.utility.contenteditable.cursorPosition($input).start;
          var val = TS.utility.contenteditable.value($input);
          var val_with_newline = val.substr(0, p) + "\n" + val.substr(p);
          TS.utility.contenteditable.value($input, val_with_newline);
          $input.trigger("autosize").trigger("autosize-resize");
          TS.utility.contenteditable.cursorPosition($input, p + 1);
        }
      } else if (e.which == TS.utility.keymap.enter) {
        if (!(TS.model.prefs.enter_is_special_in_tbt && TS.utility.isCursorWithinTBTs($input) && !e.shiftKey)) {
          if (TS.model.prefs.enter_is_special_in_tbt && TS.utility.isCursorWithinTBTs($input) && e.shiftKey) {
            e.preventDefault();
            _tryToSubmit($input, $form, submit_fn);
          } else if ($input.tab_complete_ui("isShowing")) {
            e.preventDefault();
          } else if (!e.shiftKey && !e.altKey) {
            e.preventDefault();
            _tryToSubmit($input, $form, submit_fn);
          }
        }
      } else if (TS.client && TS.client.ui.shouldEventTriggerMaybeEditLast(e, $input)) {
        _editLastMessage($input, opts);
      }
    }).autosize({
      boxOffset: 18
    });
  };
  var _initEmoMenu = function($form, $input) {
    var $emo_menu = $form.find(".emo_menu");
    $emo_menu.removeClass("hidden");
    $emo_menu.bind("click.open_dialog", function(e) {
      TS.ui.react_emoji_menu.start({
        e: e,
        input_to_fill: $input
      });
    });
  };
  var _scrollIntoView = function($form, $input, was_at_bottom) {
    if (TS.client && was_at_bottom) {
      TS.client.ui.instaScrollMsgsToBottom(false);
    }
    $form.scrollintoview({
      duration: 500,
      px_offset: 100,
      complete: function() {
        TS.utility.contenteditable.focus($input);
        TS.utility.setCursorPosition($input, 1e8);
      }
    });
  };
  var _getMsgToEdit = function($input, model_ob) {
    var $msg = $input.closest("ts-message");
    if (model_ob && $msg.length) {
      var ts = $msg.data("ts");
      var msg = TS.utility.msgs.getMsg(ts, model_ob.msgs);
      if (msg && TS.utility.msgs.canEditMsg(msg, model_ob)) {
        return msg;
      }
    }
    return null;
  };
  var _shouldSubmit = function($input, text) {
    var is_too_long = TS.msg_edit.isMessageTooLong($input);
    if (is_too_long) return false;
    if (!$.trim(text)) return false;
    return true;
  };
  var _tryToSubmit = function($input, $form, submit_fn) {
    var text = TS.utility.contenteditable.value($input);
    if (_shouldSubmit($input, text)) {
      submit_fn($form, text);
    }
  };
  var _maybeEditLastMessage = function($input, is_meta, opts) {
    var e = jQuery.Event("keydown", {
      altKey: false,
      shiftKey: false,
      which: TS.utility.keymap.up
    });
    if (is_meta) {
      if (TS.model.is_mac) {
        e.metaKey = true;
      } else {
        e.ctrlKey = true;
      }
    }
    if (!TS.client.ui.shouldEventTriggerMaybeEditLast(e, $input)) return true;
    _editLastMessage($input, opts);
  };
  var _editLastMessage = function($input, opts) {
    var get_edit_msg_div_fn = opts.getMsgDivForEditing || _getMsgToEdit;
    var model_ob = opts.model_ob;
    var $msg = get_edit_msg_div_fn($input, model_ob);
    if ($msg && $msg.length) {
      var ts = $msg.data("ts");
      var model_ob_id = $msg.data("model-ob-id");
      model_ob = TS.shared.getModelObById(model_ob_id);
      var in_convo = $msg.closest("#convo_container").length > 0;
      var edit_state = in_convo ? "convo" : null;
      TS.msg_edit.startEdit(ts, model_ob, edit_state);
    }
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.handy_rxns", {
    onStart: function() {
      if (TS.web) TS.web.login_sig.add(_onLoginWeb);
      if (TS.client) TS.client.login_sig.add(_onLoginClient);
      TS.prefs.preferred_skin_tone_changed_sig.add(_updateSkinToneRows);
    },
    decorateMsg: function(msg, text) {
      if (!TS.boot_data.feature_thanks) return msg;
      var data_and_copy = _extractPollDataAndCopyFromText(text);
      if (data_and_copy) {
        msg._handy_rxns_poll_data = data_and_copy.data;
        msg.text = data_and_copy.copy;
      }
      return msg;
    },
    msgifyPollData: function(data) {
      var txt = _poll_marker;
      _.forOwn(data.list, function(datum) {
        txt += "\n:" + datum.name + ": " + (datum.title || datum.name) + "";
      });
      return txt;
    },
    startPollDialog: function(c_id, msg_id) {
      _model_ob = TS.shared.getModelObById(c_id);
      if (!_model_ob) return;
      _msg = TS.utility.msgs.getMsg(msg_id, _model_ob.msgs);
      if (_msg) {
        _poll_text = TS.format.unFormatMsg(_msg.text);
      } else {
        _poll_text = TS.utility.contenteditable.value(TS.client.ui.$msg_input);
      }
      TS.view.clearMessageInput();
      _in_poll_mode = true;
      _build();
      _setHandyRxns();
      _conformUIToModel();
      var get_poll_title = _msg ? TS.i18n.t("Edit a poll in {name}", "rxns") : TS.i18n.t("Create a poll in {name}", "rxns");
      var prefix = _model_ob.is_channel ? "#" : '<i class="ts_icon ts_icon_lock"></i> ';
      var title = get_poll_title({
        name: prefix + _model_ob.name
      });
      var go_button_text = _msg ? TS.i18n.t("Save", "rxns")() : TS.i18n.t("Create", "rxns")();
      var placeholder = TS.i18n.t("Your poll text", "rxns")();
      TS.generic_dialog.start({
        title: title,
        $body: _$container,
        go_button_text: go_button_text,
        onGo: function() {
          if (!_isPollSendable()) return false;
          var new_text = _$message_input.val();
          var value = _readFromDom();
          var text = new_text + TS.ui.handy_rxns.msgifyPollData(value);
          if (_msg) {
            TS.msg_edit.commitEdit(_msg, _model_ob, text);
          } else {
            TS.client.ui.sendMessage(_model_ob, text);
          }
          _clean();
          return true;
        },
        onEnd: function() {
          _clean();
        },
        onCancel: function() {
          if (!_msg) TS.client.msg_input.populate(_poll_text);
        },
        onShow: function() {
          TS.ui.inline_msg_input.make(_$container.find("#poll_dialog_input_container"), {
            placeholder: placeholder,
            no_emo: true
          });
          _$message_input = _$container.find(".message_input");
          _$message_input.val(_poll_text);
          _$message_input.on("textchange", function() {
            _updateIsDirty();
          });
          _is_dirty = undefined;
          _updateIsDirty();
        }
      });
    },
    startChannelDialog: function(c_id) {
      _model_ob = TS.shared.getModelObById(c_id);
      if (!_model_ob) return;
      _in_poll_mode = false;
      _build();
      _setHandyRxns();
      _conformUIToModel();
      var get_poll_title = TS.i18n.t("Edit handy reactions for {name}", "rxns");
      var prefix = _model_ob.is_channel ? "#" : '<i class="ts_icon ts_icon_lock"></i> ';
      var title = get_poll_title({
        name: prefix + _model_ob.name
      });
      var go_button_text = TS.i18n.t("Save", "rxns")();
      TS.generic_dialog.start({
        title: title,
        $body: _$container,
        go_button_text: go_button_text,
        onGo: function() {
          TS.ui.handy_rxns.saveHandyRxns().then(function() {
            TS.generic_dialog.cancel();
            _clean();
          }).catch(function() {
            alert("saving failed");
          });
          return false;
        },
        onEnd: function() {
          _clean();
        },
        onShow: function() {
          _is_dirty = undefined;
          _updateIsDirty();
        }
      });
    },
    saveHandyRxns: function() {
      var pref_ob;
      var value = _readFromDom();
      if (_model_ob) {
        TS.model.team.prefs.channel_handy_rxns = TS.model.team.prefs.channel_handy_rxns || {};
        if (value.list.length) {
          TS.model.team.prefs.channel_handy_rxns[_model_ob.id] = value;
        } else {
          delete TS.model.team.prefs.channel_handy_rxns[_model_ob.id];
        }
        pref_ob = {
          channel_handy_rxns: TS.model.team.prefs.channel_handy_rxns
        };
      } else {
        pref_ob = {
          team_handy_rxns: value
        };
      }
      return TS.prefs.setTeamPrefByAPI(pref_ob).then(function() {
        _setHandyRxns();
        var delayed_for_web = true;
        _updateIsDirty(delayed_for_web);
      });
    }
  });
  var _$container;
  var _$restrict_cb;
  var _$message_input;
  var _handy_rxns;
  var _model_ob;
  var _msg;
  var _in_poll_mode;
  var _poll_text;
  var _is_dirty;
  var _$rows = null;
  var _poll_marker = TS.i18n.t("⁣\n\nThis is a poll. Choose from these reactions:", "rxns")();
  var _onLoginClient = function() {};
  var _setHandyRxns = function() {
    if (_in_poll_mode) {
      _handy_rxns = _msg && _msg._handy_rxns_poll_data || {
        list: [],
        restrict: false
      };
    } else if (_model_ob) {
      _handy_rxns = TS.rxns.getHandyRxnsByCidAndMsgId(_model_ob.id, null, {
        list: [],
        restrict: false
      });
    } else {
      _handy_rxns = TS.model.team.prefs.team_handy_rxns;
    }
  };
  var _onLoginWeb = function() {
    _setHandyRxns();
    _model_ob = null;
    _in_poll_mode = false;
    _build();
    _conformUIToModel();
    $("#handy_rxns_subsection").prepend(_$container);
  };
  var _clean = function() {
    if (!_$container) return;
    _$container.empty();
    _$container = null;
    _$rows = null;
    _$restrict_cb = null;
    _$message_input = null;
  };
  var _filteredSuggestions = function() {
    var ss = _.cloneDeep(TS.boot_data.handy_rxns_suggestions);
    for (var k in ss) {
      if (_in_poll_mode) {
        if (!ss[k].is_poll) delete ss[k];
      } else if (ss[k].is_poll) {
        delete ss[k];
      }
    }
    return ss;
  };
  var _build = function() {
    _$container = $(TS.templates.rxns_handy_controller({
      max_handy_rxns: _in_poll_mode ? TS.boot_data.max_poll_handy_rxns : Math.max(TS.boot_data.max_channel_handy_rxns, TS.boot_data.max_team_handy_rxns),
      max_handy_rxns_title_chars: TS.boot_data.max_handy_rxns_title_chars,
      model_ob: _model_ob,
      in_poll_mode: _in_poll_mode,
      handy_rxns_suggestions: _filteredSuggestions()
    }));
    _$rows = _$container.find(".handy_rxns_row");
    _$restrict_cb = _$container.find("#handy_rxns_restrict_cb");
    _$message_input = $();
    _$container.find("#suggestions_ui a").bind("click", function(e) {
      var $btn = $(e.currentTarget);
      var key = $btn.data("suggestion-key");
      if (!TS.boot_data.handy_rxns_suggestions[key]) return;
      _conformUIToModel(TS.boot_data.handy_rxns_suggestions[key]);
    });
    _$restrict_cb.bind("change", function() {
      _updateIsDirty();
    });
    _$container.find("input.title").on("textchange", function() {
      _updateIsDirty();
    });
    _$container.find("a.handy_rxns_remover").on("click", function(e) {
      var $row = $(e.currentTarget).parent();
      _updateRow($row, "");
      $row.insertAfter(_$rows.last());
      _updateIsDirty();
    });
    _$container.find("a.handy_rxns_picker").on("click", function(e) {
      var $row = $(e.currentTarget).parent();
      var was_name = $row.find("a.btn").data("rxn");
      var disabled_names = $row.hasClass("empty") ? _readFromDom().list.map(function(item) {
        return item.name;
      }) : [was_name];
      TS.ui.react_emoji_menu.start({
        e: e,
        disabled_names: disabled_names,
        callback: function(name) {
          name = _cleanName(name);
          var $existing_row = _getExistingRow(name);
          if ($existing_row.length) {
            _updateRow($existing_row, was_name);
            _updateRow($row, name);
          } else {
            _updateRow($row, name);
          }
          $row.insertBefore(_getEmptyRows().first());
          _updateIsDirty();
        }
      });
    });
  };
  var _readFromDom = function() {
    var list = [];
    _$rows = _$container.find(".handy_rxns_row");
    $.each(_getFilledRows(), function(i, row) {
      var $row = $(row);
      list.push({
        name: $row.find("a.btn").data("rxn"),
        title: $row.find("input.title").val()
      });
    });
    var value = {
      list: list,
      restrict: !!_$restrict_cb.prop("checked")
    };
    if (_in_poll_mode) {
      value.restrict = true;
      value.is_poll = true;
    }
    return value;
  };
  var _cleanName = function(name) {
    return TS.emoji.stripWrappingColons(name.replace(/(::skin-tone-[2-6])/, ""));
  };
  var _getExistingRow = function(name) {
    return _$rows.filter(function() {
      return $(this).find("a.btn").data("rxn") == name;
    });
  };
  var _getFilledRows = function() {
    return _$rows.filter(function() {
      return !$(this).hasClass("empty");
    });
  };
  var _getEmptyRows = function() {
    return _$rows.filter(function() {
      return $(this).hasClass("empty");
    });
  };
  var _updateRow = function($row, name) {
    var suffix = TS.emoji.isNameSkinToneModifiable(name) ? TS.emoji.getChosenSkinToneModifier() : "";
    var html = name && TS.emoji.graphicReplace(":" + name + ":" + suffix) || '<i class="ts_icon ts_icon_add_reaction subtle_silver"></i>';
    var title = name ? TS.i18n.t("say what {name} means", "rxns")({
      name: name
    }) : "";
    $row.find("a.btn").html(html).attr("data-rxn", name).data("rxn", name);
    $row.find("input.title").val(title).attr("placeholder", title);
    $row.toggleClass("empty", !name);
    _updateUI();
    return $row;
  };
  var _conformUIToModel = function(handy_rxns) {
    handy_rxns = handy_rxns || _handy_rxns;
    $.each(_$rows, function(i, row) {
      var $row = $(row);
      var datum = handy_rxns.list[i];
      if (datum) {
        _updateRow($row, datum.name);
      } else {
        _updateRow($row, "");
      }
    });
    _$restrict_cb.prop("checked", !!handy_rxns.restrict);
    _updateUI();
    _updateIsDirty();
  };
  var _updateUI = function() {
    _$container.find("#handy_rxns_controller_empty").toggleClass("hidden", !!_getFilledRows().length);
  };
  var _updateSkinToneRows = function() {
    if (!_$rows) return;
    $.each(_$rows, function(i, row) {
      var $row = $(row);
      var name = $row.find("a.btn").data("rxn");
      if (TS.emoji.isNameSkinToneModifiable(name)) {
        _updateRow($row, name);
      }
    });
  };
  var _isPollSendable = function() {
    if (!_$message_input.val()) return false;
    if (_readFromDom().list.length < 1) return false;
    return true;
  };
  var _updateIsDirty = function(delayed_for_web) {
    var was_is_dirty = _is_dirty;
    var pref_ob = _readFromDom();
    _is_dirty = !TS.utility.areSimpleObjectsEqual(_handy_rxns, pref_ob);
    if (_in_poll_mode && _poll_text != _$message_input.val()) _is_dirty = true;
    if (TS.web) {
      if (_is_dirty == was_is_dirty) return;
      if (delayed_for_web) {
        setTimeout(function() {
          $("#handy_rxns_subsection").find(".submit_setting").toggleClass("disabled", !_is_dirty);
          TS.ui.resetButtonSpinner($("#handy_rxns_subsection").find(".submit_setting"));
        }, 2e3);
      } else {
        $("#handy_rxns_subsection").find(".submit_setting").toggleClass("disabled", !_is_dirty);
      }
    } else if (TS.client) {
      if (_in_poll_mode) {
        $("#generic_dialog").find(".btn.dialog_go").toggleClass("disabled", !_is_dirty || !_isPollSendable());
      } else {
        if (_is_dirty == was_is_dirty) return;
        $("#generic_dialog").find(".btn.dialog_go").toggleClass("disabled", !_is_dirty);
      }
    }
  };
  var _extractPollDataAndCopyFromText = function(txt) {
    if (!txt) return null;
    var poll_parts = txt.split(_poll_marker);
    if (poll_parts.length != 2) return null;
    var copy = poll_parts[0];
    var data_lines = $.trim(poll_parts[1]).split("\n");
    var data = {
      list: [],
      is_poll: true,
      restrict: true
    };
    data_lines.forEach(function(line) {
      var name = line.split(":")[1];
      var title = $.trim(line.replace(":" + name + ":", "")) || "";
      if (title == name) title = "";
      data.list.push({
        name: name,
        title: title
      });
    });
    if (!data.list.length) return null;
    return {
      data: data,
      copy: copy
    };
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.basic_share_dialog", {
    start: function(options) {
      _options = options;
      var html = TS.templates.basic_share_dialog({
        attachment_html: new Handlebars.SafeString(options.attachment_html),
        warning: options.warning,
        show_copy_link: !!options.copy_link && TS.clipboard.canWriteText(),
        copy_text: options.copy_text
      });
      var dialog_class = "basic_share_dialog";
      var default_title = TS.i18n.t("Share", "basic_share_dialog")();
      if (options.dialog_class) dialog_class += " " + options.dialog_class;
      TS.generic_dialog.start({
        title: options.title || default_title,
        go_button_text: options.go_button_text || default_title,
        dialog_class: dialog_class,
        body: html,
        onShow: _onShow,
        onEnd: _onEnd,
        onGo: options.onGo
      });
    }
  });
  var _options;
  var _onShow = function() {
    var $dialog = $("#generic_dialog.basic_share_dialog");
    $dialog.css("display", "");
    var $container = $dialog.find("#share_dialog_input_container");
    var completers = [];
    if (TS.boot_data.feature_texty_takes_over) {
      completers = [TS.tabcomplete.channels, TS.tabcomplete.emoji, TS.tabcomplete.members];
    }
    TS.ui.inline_msg_input.make($container, {
      aria_label: TS.i18n.t("Add optional comment before sharing.", "basic_share_dialog")(),
      no_emo: false,
      placeholder: TS.i18n.t("Add a message, if you’d like.", "basic_share_dialog")(),
      onEnter: TS.generic_dialog.go,
      onTextChange: _onTextChange,
      onTab: _onTab,
      completers: completers
    });
    var $input = $container.find(".message_input");
    $input.attr("id", "file_comment_textarea");
    var val = _options.initial_message || "";
    TS.utility.contenteditable.value($input, val);
    var $channel_picker = $dialog.find("#file_sharing_div");
    $channel_picker.prependTo($dialog.find(".modal-footer"));
    var show_share_prefix = true;
    TS.ui.file_share.bindFileShareDropdowns(show_share_prefix, _options.src_model_ob, undefined, true);
    $channel_picker.find("#select_share_channels").css({
      width: ""
    });
    var $warning = $("#share_dialog_warning");
    if ($warning.length) {
      $channel_picker.addClass("hidden");
      $warning.prependTo($dialog.find(".modal-footer"));
    }
    var $copy = $dialog.find('[data-action="copy_link"]');
    if ($copy.length) {
      $dialog.find(".dialog_cancel").before($copy);
      $copy.removeClass("hidden");
      $copy.click(_onCopy);
    }
    TS.generic_dialog.div.on("shown", function shown() {
      TS.generic_dialog.div.off("shown", shown);
      $container.find(".message_input").select();
    });
    $dialog.find(".share_dialog_attachment_container").find("a[href]", "button").attr("tabindex", "-1");
    if (_options.onShow) _options.onShow();
    if (TS.boot_data.feature_texty_takes_over) return;
    $input.on("keydown", function(e) {
      if (e.which === TS.utility.keymap.esc) {
        if (!TS.utility.contenteditable.value($input)) {
          e.preventDefault();
          TS.generic_dialog.cancel();
        }
      } else if (e.which === TS.utility.keymap.enter) {
        if (!e.shiftKey && !e.altKey && !$input.tab_complete_ui("isShowing")) {
          e.preventDefault();
          TS.generic_dialog.go();
        }
      } else if (e.which === TS.utility.keymap.tab && $channel_picker.find(".lfs_input_container:visible").length && !e.shiftKey && !$input.tab_complete_ui("isShowing") && !$input.tab_complete_ui("hasMatches")) {
        e.preventDefault();
        _onTab();
      }
    }).on("textchange", function() {
      _onTextChange();
    });
  };
  var _onTextChange = function() {
    TS.ui.file_share.updateAtChannelWarningNote();
    TS.ui.file_share.updateAtChannelBlockedNote();
  };
  var _onTab = function() {
    $("#file_sharing_div").find(".lfs_input_container").click();
  };
  var _onEnd = function() {
    if (_options.onEnd) _options.onEnd();
    _options = null;
  };
  var _onCopy = function() {
    if (!_options.copy_link || !TS.clipboard.canWriteText()) return;
    TS.tips.updateFloater({
      title: TS.i18n.t("Copied!", "basic_share_dialog")(),
      classes_to_add: ["success"]
    });
    TS.clipboard.writeText(_options.copy_link);
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.share_message_dialog", {
    start: function(msg_ts, model_ob, initial_message) {
      var msg = TS.utility.msgs.findMsg(msg_ts, model_ob.id);
      if (!msg) {
        TS.error("wtf no msg?");
        return;
      }
      _msg_ts = msg_ts;
      if (!_.isString(msg_ts)) _msg_ts = msg_ts.toString();
      _model_ob = model_ob;
      _submitting = false;
      var msg_html = TS.templates.builders.formatMessageAsAttachment(msg, model_ob);
      var copy_link_tooltip = TS.i18n.t("Copy a link to this message.<br>To share, paste it anywhere.", "share_message")();
      var warning;
      if (!_canShareToOtherChannels()) {
        copy_link_tooltip = TS.i18n.t("Copy a link to this message.<br>It’s private, so sharing is limited.", "share_message")();
        warning = TS.templates.share_message_dialog_warning({
          from_private_channel: (model_ob.is_private || model_ob.is_group) && !model_ob.is_mpim
        });
        warning = new Handlebars.SafeString(warning);
      }
      TS.ui.basic_share_dialog.start({
        title: TS.i18n.t("Share message", "share_message")(),
        go_button_text: TS.i18n.t("Share", "share_message")(),
        initial_message: initial_message,
        attachment_html: msg_html,
        warning: warning,
        copy_link: TS.utility.msgs.constructAbsoluteMsgPermalink(_model_ob, _msg_ts, msg.thread_ts),
        copy_text: copy_link_tooltip,
        onGo: _onGo,
        onEnd: _onEnd,
        src_model_ob: _model_ob
      });
    }
  });
  var _msg_ts;
  var _model_ob;
  var _submitting;
  var _onEnd = function() {
    _msg_ts = null;
    _model_ob = null;
  };
  var _onGo = function() {
    if (_submitting) return;
    var msg_ts = _msg_ts;
    var src_model_ob = _model_ob;
    var original_text = TS.utility.contenteditable.value($(".basic_share_dialog .message_input"));
    var text = TS.format.cleanMsg(original_text);
    text = _.trim(text);
    var $select_share_channels = $(".basic_share_dialog #select_share_channels");
    var destination = $select_share_channels.lazyFilterSelect("value")[0];
    if (destination && destination.model_ob && destination.model_ob.create_channel) {
      var saved_msg_ts = _msg_ts;
      var saved_model_ob = _model_ob;
      TS.ui.new_channel_modal.start(destination.model_ob.name).then(function(data) {
        _model_ob = saved_model_ob;
        _share(saved_msg_ts, text, saved_model_ob, data);
        return null;
      }).catch(function() {
        TS.ui.share_message_dialog.start(saved_msg_ts, saved_model_ob, text);
        return null;
      });
      TS.generic_dialog.cancel();
      return false;
    }
    if (!destination) {
      $select_share_channels.find(".lfs_input_container").addClass("error");
      return false;
    }
    _share(msg_ts, text, src_model_ob, destination.model_ob);
  };
  var _share = function(msg_ts, text, src_model_ob, dest_model_ob) {
    if (TS.ui.file_share.shouldBlockUploadDialogSubmission()) return false;
    var original_text = TS.utility.contenteditable.value($(".basic_share_dialog .message_input"));
    var $select_share_channels = $(".basic_share_dialog #select_share_channels");
    _clogMsgSharedClickEvent(src_model_ob.id, msg_ts);
    var args = {
      channel: src_model_ob.id,
      timestamp: msg_ts,
      text: text
    };
    if (_canShareToOtherChannels()) {
      if (dest_model_ob) {
        args.share_channel = dest_model_ob.presence ? "@" + dest_model_ob.name : dest_model_ob.id;
      } else if (src_model_ob.is_archived) {
        $("#select_share_pick_channel_note").removeClass("hidden");
        _.defer(function() {
          $select_share_channels.find(".lfs_input_container").click();
        });
        return false;
      }
    }
    _submitting = true;
    if (!dest_model_ob) dest_model_ob = src_model_ob;
    var ready_to_share_p;
    if (dest_model_ob && dest_model_ob.is_channel && !dest_model_ob.is_member) {
      ready_to_share_p = TS.channels.join(dest_model_ob.name);
    } else {
      ready_to_share_p = Promise.resolve();
    }
    ready_to_share_p.then(function() {
      return TS.api.call("chat.shareMessage", args).then(function() {
        if (!TS.client) return;
        var active_model_ob = TS.shared.getActiveModelOb();
        if (dest_model_ob && active_model_ob && active_model_ob.id === dest_model_ob.id && !TS.model.threads_view_is_showing && !TS.model.unread_view_is_showing) {
          TS.client.ui.instaScrollMsgsToBottom();
        } else if (args.share_channel && dest_model_ob) {
          return TS.client.displayModelOb(dest_model_ob);
        }
      });
    }).catch(function(e) {
      var error = e || "unknown error";
      if (e && e.data && e.data.error) error = e.data.error;
      TS.error("chat.shareMessage error: " + error);
      TS.generic_dialog.start({
        title: TS.i18n.t("Message could not be shared", "share_message")(),
        body: TS.i18n.t("Sorry! Something went wrong.", "share_message")(),
        go_button_text: TS.i18n.t("Try again", "share_message")(),
        onGo: function() {
          TS.ui.share_message_dialog.start(msg_ts, src_model_ob, original_text);
        }
      });
    });
  };
  var _canShareToOtherChannels = function() {
    return _model_ob.is_channel && !_model_ob.is_private;
  };
  var _clogMsgSharedClickEvent = function(model_ob_id, msg_ts) {
    if (!model_ob_id || !msg_ts) return;
    var payload = {
      channel_id: model_ob_id,
      message_id: msg_ts
    };
    var clog_key = "MSG_SHARED_CLICKED";
    var $el = $("ts-message[data-model-ob-id='" + model_ob_id + "'][data-ts='" + msg_ts + "']");
    _.merge(payload, TS.ui.thread.getTrackingPayloadForEl($el));
    if (TS.ui.thread.getContextForEl($el) === "threads_view") TS.client.ui.threads.incrementTrackingSeqId();
    TS.clog.track(clog_key, payload);
  };
})();
(function() {
  "use strict";
  TS.registerModule("attachment_actions", {
    action_triggered_sig: new signals.Signal,
    action_completed_sig: new signals.Signal,
    onStart: function() {
      TS.attachment_actions.action_triggered_sig.add(_onActionTriggered);
      TS.attachment_actions.action_completed_sig.add(_onActionCompleted);
    },
    getActionContext: function($target) {
      var context_data = _getActionContextDataFromDOM($target);
      var message = TS.utility.msgs.findMsg(context_data.message_ts, context_data.channel_id);
      if (!message) return;
      var attachment = _.find(message.attachments, {
        id: context_data.attachment_id
      });
      if (!attachment) return;
      var action = _.find(attachment.actions, {
        id: context_data.action_id
      });
      if (!action) return;
      return {
        action: action,
        attachment: attachment,
        channel_id: context_data.channel_id,
        message: message
      };
    },
    handleActionEventAndGetContext: function($target) {
      var context = TS.attachment_actions.getActionContext($target);
      if (TS.client.activeChannelIsHidden() || context.channel_id != TS.shared.getActiveModelOb().id) {
        TS.client.ui.tryToJump(context.channel_id, context.message.ts);
      }
      var slack_action_url = $target.data("slack-action-url");
      if (slack_action_url) {
        var actual_url = slack_action_url.match(/<(.*?)\|/)[1];
        if (actual_url && actual_url.indexOf(TS.utility.msgs.new_api_url_prefix) === 0) {
          TS.utility.msgs.doNewApiUrl(actual_url);
        } else {
          TS.error(slack_action_url + " does not contain a valid slack action URL.");
        }
        return;
      }
      return context;
    },
    confirmAction: function(action, onGo, onCancel) {
      var confirm_class = action.style === "danger" ? "btn_danger" : "btn_primary";
      var config = _.defaults(action.confirm, {
        dismiss_text: TS.i18n.t("Cancel", "attachment_actions")(),
        ok_text: TS.i18n.t("OK", "attachment_actions")(),
        text: "",
        title: ""
      });
      if (config.text) {
        config.text = TS.emoji.graphicReplace(config.text);
      } else if (!config.title) {
        config.text = TS.i18n.t("Are you sure?", "attachment_actions")();
      }
      if (config.title) {
        config.title = TS.emoji.graphicReplace(config.title);
      }
      TS.generic_dialog.start({
        title: config.title,
        body: config.text,
        show_go_button: true,
        show_cancel_button: true,
        go_button_text: config.ok_text,
        go_button_class: confirm_class,
        cancel_button_text: config.dismiss_text,
        onGo: onGo,
        onCancel: onCancel
      });
    },
    render: function(attachment, message_ts, only_render_if_pending) {
      if (!attachment || !message_ts) return;
      var $container = _getAttachmentActionsContainer(attachment, message_ts);
      if (!$container.length) return;
      if (!only_render_if_pending || $container.find(".attachement_actions_interactions").hasClass("attachment_pending")) {
        var html = TS.templates.attachment_actions({
          attachment: attachment
        });
        $container.html(html);
        TS.attachment_actions.select.decorateNewElements();
      }
    },
    test: function() {
      var test_obj = {};
      Object.defineProperty(test_obj, "_getActionContextDataFromDOM", {
        get: function() {
          return _getActionContextDataFromDOM;
        },
        set: function(v) {
          _getActionContextDataFromDOM = v;
        }
      });
      Object.defineProperty(test_obj, "_getPendingAttachment", {
        get: function() {
          return _getPendingAttachment;
        },
        set: function(v) {
          _getPendingAttachment = v;
        }
      });
      return test_obj;
    }
  });

  function _getPendingAttachment(attachment, actions) {
    if (!attachment || !actions || !actions.length) return;
    var changed_ids = _.map(actions, "id");
    var pending_attachment = _.cloneDeep(attachment);
    pending_attachment.actions.forEach(function(action) {
      action._disabled = true;
      action._loading = _.includes(changed_ids, action.id);
    });
    pending_attachment._pending = true;
    return pending_attachment;
  }

  function _onActionTriggered(data) {
    if (!data || !data.message || !data.attachment || !data.action || !data.channel_id) {
      TS.warn("_onActionTriggered: missing message, attachment, action, or channel_id");
      return;
    }
    var pending_attachment = _getPendingAttachment(data.attachment, [data.action]);
    if (pending_attachment) {
      TS.attachment_actions.render(pending_attachment, data.message.ts);
    }
    var action = _.clone(data.action);
    delete action.options;
    var api_args = {
      payload: JSON.stringify({
        actions: [action],
        attachment_id: data.attachment.id,
        callback_id: data.attachment.callback_id,
        channel_id: data.channel_id,
        is_ephemeral: data.message.is_ephemeral,
        message_ts: data.message.ts
      })
    };
    if (data.message.bot_id) api_args.service_id = data.message.bot_id;
    if (data.message.user) api_args.bot_user_id = data.message.user;
    TS.api.call("chat.attachmentAction", api_args).then(function(res) {
      TS.attachment_actions.action_completed_sig.dispatch({
        attachment: data.attachment,
        message_ts: data.message.ts,
        channel_id: data.channel_id,
        is_expecting_ms_update: !!(_.get(res, "data.replaced") || _.get(res, "data.deleted"))
      });
    }).catch(function(err) {
      TS.error(err);
      TS.attachment_actions.action_completed_sig.dispatch({
        attachment: data.attachment,
        message_ts: data.message.ts,
        channel_id: data.channel_id,
        err: err
      });
    });
  }

  function _onActionCompleted(args) {
    if (!args) return;
    if (args.err) {
      var default_text = TS.i18n.t("Oh no, something went wrong. Please try that again.", "attachment_actions")();
      var ephemeral_msg = {
        text: _.get(args, "err.data.response") || default_text,
        ephemeral_type: _.get(args, "err.data.error") || "attachment_action_error",
        slackbot_feels: "sad_surprise"
      };
      TS.client.ui.addEphemeralBotMsg(ephemeral_msg);
    }
    if (args.attachment && args.message_ts && args.channel_id && !args.is_expecting_ms_update) {
      _waitThenRevertActions(args);
    }
  }

  function _waitThenRevertActions(args) {
    TS.utility.rAF(function() {
      var current_attachment = TS.utility.attachments.findAttachment({
        attachment_id: args.attachment.id,
        message_ts: args.message_ts,
        channel_id: args.channel_id
      });
      if (current_attachment) {
        TS.attachment_actions.render(current_attachment, args.message_ts, true);
      }
    });
  }

  function _getAttachmentActionsContainer(attachment, message_ts) {
    var msg_dom_id = TS.templates.makeMsgDomId(message_ts);
    return $("#" + msg_dom_id).find("[data-attachment-id=" + attachment.id + "] .attachment_actions");
  }

  function _getActionContextDataFromDOM($target) {
    var $attachment = $target.parents("[data-attachment-id]");
    var $msg = $attachment.parents("ts-message");
    var context_data = {
      action_id: String($target.data("action-id") || ""),
      attachment_id: String($attachment.data("attachment-id") || ""),
      channel_id: String($msg.data("model-ob-id") || ""),
      message_ts: String($msg.data("ts") || "")
    };
    Object.keys(context_data).forEach(function(key) {
      if (!context_data[key]) {
        throw new Error('Attachment is missing "' + key + '"');
      }
    });
    return context_data;
  }
})();
(function() {
  "use strict";
  TS.registerModule("attachment_actions.select", {
    onStart: _.noop,
    decorateNewElements: function($container) {
      $container = $container || TS.client.ui.$msgs_div;
      var $new_els = $container.find(".attachement_actions_interactions select:not(.hidden)");
      $new_els.each(function() {
        var $el = $(this);
        var context = TS.attachment_actions.getActionContext($el);
        var lfs_options = {
          adjustAvailableSpaceAbove: _adjustAvailableSpaceAbove,
          adjustAvailableSpaceBelow: _adjustAvailableSpaceBelow,
          allow_list_position_above: true,
          classes: "select_attachment",
          data_promise: _getDataPromise(context),
          disabled: $el.attr("disabled"),
          errorTemplate: _errorTemplate,
          filter: _filter,
          input_debounce_wait_time: _getInputDebounceWaitTime(context),
          min_query_length: _.get(context, "action.min_query_length", 0),
          no_default_selection: true,
          onItemAdded: _onItemAdded,
          onListShown: _getOnListShownCallback(context),
          placeholder_text: _getPlaceholderText(context),
          filter_placeholder_text: _getFilterPlaceholderText(context),
          should_graphic_replace_emoji: true,
          style: TS.ui.lazy_filter_select.STYLES.filter_in_list,
          template: _getItemTemplate(context)
        };
        $el.lazyFilterSelect(lfs_options).addClass("hidden");
        var lfs_instance = $el.lazyFilterSelect("getInstance");
        _handlePreselectedOptions(context, lfs_instance);
        _adjustMenuWidth(context, lfs_instance);
      });
    },
    getActionModel: function(action, is_disabled) {
      var model = _.clone(action);
      model._disabled = model._disabled || !!is_disabled;
      model.data_source = _DATA_SOURCES[model.data_source] || _DATA_SOURCES.default;
      model.text = model.text || _getDefaultPlaceholderText(model.data_source);
      return model;
    }
  });
  var _PLACEHOLDER_TEXT = {
    channels: TS.i18n.t("Choose a channel…", "attachment_actions")(),
    conversations: TS.i18n.t("Choose a conversation…", "attachment_actions")(),
    "default": TS.i18n.t("Choose an option…", "attachment_actions")(),
    external: TS.i18n.t("Choose an option…", "attachment_actions")(),
    users: TS.i18n.t("Choose a person…", "attachment_actions")()
  };
  var _FILTER_PLACEHOLDER_TEXT = {
    channels: TS.i18n.t("Search channels", "attachment_actions")(),
    conversations: TS.i18n.t("Search conversations", "attachment_actions")(),
    "default": TS.i18n.t("Filter options", "attachment_actions")(),
    external: TS.i18n.t("Search options", "attachment_actions")(),
    users: TS.i18n.t("Search people", "attachment_actions")()
  };
  var _DATA_SOURCES = {
    channels: "channels",
    conversations: "conversations",
    "default": "default",
    external: "external",
    users: "users"
  };
  var _CONVERSATIONS_TEMPLATE_DATA_SOURCES = [_DATA_SOURCES.channels, _DATA_SOURCES.conversations, _DATA_SOURCES.users];
  var _EXTERNAL_INPUT_DEBOUNCE_WAIT_TIME = 250;

  function _onActionCompleted(action_id, context) {
    var action = _.find(context.attachment.actions, {
      id: action_id
    });
    if (action) action.selected_options = [];
  }

  function _errorTemplate(error) {
    if (!error) return TS.i18n.t("No results.", "lazy_filter_select")();
    return TS.i18n.t("Couldn’t load results.", "lazy_filter_select")();
  }

  function _onItemAdded(item) {
    var $select = this.$select;
    var context = TS.attachment_actions.handleActionEventAndGetContext($select);
    var value = _.get(item, "model_ob.id", item.value);
    var onGo = function() {
      context.action.selected_options = [{
        text: item.text,
        value: value
      }];
      var on_action_completed = _onActionCompleted.bind(null, context.action.id);
      TS.attachment_actions.action_completed_sig.addOnce(on_action_completed);
      _.defer(TS.attachment_actions.action_triggered_sig.dispatch, context);
    };
    var onCancel = function() {
      $select.lazyFilterSelect("clearValue");
    };
    if (context.action.confirm) {
      TS.attachment_actions.confirmAction(context.action, onGo, onCancel);
    } else {
      onGo();
    }
  }

  function _filter(item, query) {
    return _.isEmpty(query) || TS.fuzzy.score(item.text.toLowerCase(), query.toLowerCase()) < Infinity;
  }

  function _getOnListShownCallback(context) {
    var data_source = _.get(context, "action.data_source");
    var service_id = _getServiceId(context);
    return function onListShown() {
      _logMenuOpen(data_source, service_id);
    };
  }

  function _adjustAvailableSpaceBelow(available_space_below) {
    var footer_height = $("#footer").height() || 0;
    return available_space_below - footer_height;
  }

  function _adjustAvailableSpaceAbove(available_space_above) {
    var header_height = $("#client_header").height() || 0;
    return available_space_above - header_height;
  }

  function _getDataPromise(context) {
    switch (_.get(context, "action.data_source")) {
      case _DATA_SOURCES.channels:
        return _getDataPromiseFromSearcher({
          channels: {
            include_archived: false
          }
        }, {
          default_query: "#"
        });
      case _DATA_SOURCES.conversations:
        return _getDataPromiseForConversations();
      case _DATA_SOURCES.external:
        return _getDataPromiseForExternal(context);
      case _DATA_SOURCES.users:
        return _getDataPromiseFromSearcher({
          members: {
            include_self: true
          }
        }, {
          default_query: "@"
        });
      default:
        break;
    }
  }

  function _getDataPromiseFromSearcher(searcher_options, options) {
    searcher_options = _.defaults(searcher_options, {
      limit: 100,
      sort: {
        frecency: true
      }
    });
    options = _.defaults(options, {
      default_query: ""
    });
    return function(query) {
      query = query || options.default_query;
      return new Promise(function(resolve, reject) {
        TS.searcher.search(query, searcher_options).then(function(items) {
          resolve({
            all_items_fetched: true,
            items: items,
            replace_all_items: true
          });
        }, reject);
      });
    };
  }

  function _getDataPromiseForConversations() {
    return function(query) {
      return new Promise(function(resolve, reject) {
        TS.ui.file_share.promiseToGetFileShareSelectOptions(query).then(function(items) {
          resolve({
            all_items_fetched: true,
            items: items,
            replace_all_items: true
          });
        }, reject);
      });
    };
  }

  function _getDataPromiseForExternal(context) {
    return function(query) {
      return new Promise(function(resolve, reject) {
        var payload = {
          name: context.action.name,
          value: query,
          attachment_id: context.attachment.id,
          callback_id: context.attachment.callback_id,
          channel_id: context.channel_id,
          is_ephemeral: true,
          message_ts: context.message.ts
        };
        TS.api.call("chat.attachmentSuggestion", {
          service_id: _getServiceId(context),
          payload: JSON.stringify(payload)
        }).then(function(response) {
          resolve({
            all_items_fetched: true,
            items: _formatExternalResponseOptions(response),
            replace_all_items: true
          });
        }).catch(function(error) {
          reject(error);
        });
      });
    };
  }

  function _getInputDebounceWaitTime(context) {
    if (_.get(context, "action.data_source") !== _DATA_SOURCES.default) {
      return _EXTERNAL_INPUT_DEBOUNCE_WAIT_TIME;
    }
  }

  function _getItemTemplate(context) {
    if (_.includes(_CONVERSATIONS_TEMPLATE_DATA_SOURCES, _.get(context, "action.data_source"))) {
      return _itemTemplateForConversations;
    }
  }

  function _getPlaceholderText(context) {
    return _.get(context, "action.text") || _getDefaultPlaceholderText(_.get(context, "action.data_source"));
  }

  function _getFilterPlaceholderText(context) {
    return _.get(_FILTER_PLACEHOLDER_TEXT, _.get(context, "action.data_source"), _FILTER_PLACEHOLDER_TEXT.default);
  }

  function _getDefaultPlaceholderText(data_source) {
    return _.get(_PLACEHOLDER_TEXT, data_source, _PLACEHOLDER_TEXT.default);
  }

  function _handlePreselectedOptions(context, lfs_instance) {
    var selected_options = _.get(context, "action.selected_options");
    if (!_.isEmpty(selected_options)) {
      var formatted_text = TS.format.formatWithOptions(selected_options[0].text, {
        no_emoji: true
      }, {
        no_linking: true
      });
      lfs_instance.$input.val(formatted_text);
    }
  }

  function _adjustMenuWidth(context, lfs_instance) {
    var placeholder_text = _getPlaceholderText(context);
    var font_descriptor = TS.utility.getFontDescriptorForElement(lfs_instance.$input);
    var text_width = TS.utility.measureTextWidth(placeholder_text, font_descriptor);
    var extra_width = lfs_instance.$container.width() - lfs_instance.$input.width();
    lfs_instance.$container.css("width", Math.ceil(text_width + extra_width));
  }

  function _itemTemplateForConversations(item) {
    var html = TS.templates.file_sharing_channel_row({
      item: item.model_ob
    });
    return new Handlebars.SafeString(html);
  }

  function _formatExternalResponseOptions(response) {
    var option_groups = _.get(response, "data.option_groups");
    if (_.isArray(option_groups)) {
      return option_groups.map(function(group) {
        var children_els = _.get(group, "options", []).map(function(option) {
          return _createOptionEl(option, {
            is_group_item: true
          });
        });
        return {
          lfs_group: true,
          label: group.text,
          children: children_els
        };
      });
    }
    return _.get(response, "data.options", []).map(_createOptionEl);
  }

  function _createOptionEl(option_obj, options) {
    option_obj = _.merge({}, option_obj, {
      is_group_item: _.get(options, "is_group_item")
    });
    var html = TS.templates.attachment_actions_select_option(option_obj);
    var $container = $("<div>").html(html);
    return $container.children()[0];
  }

  function _logMenuOpen(data_source, service_id) {
    TS.clog.track("MSG_MENU_OPEN", {
      data_source: data_source,
      service_id: service_id
    });
  }

  function _getServiceId(context) {
    if (_.get(context, "attachment.is_app_unfurl")) {
      return context.attachment.bot_id;
    }
    return _.get(context, "message.bot_id");
  }
})();
(function() {
  "use strict";
  TS.registerComponent("ui.ContextualDropDown", {
    _constructor: function(container, options) {
      options = options || {};
      this._show_description = options.show_description;
      this.updated_sig = new signals.Signal;
      var option_els = Array.prototype.slice.call(container.querySelectorAll("select option"));
      container.innerHTML = TS.templates.contextual_dropdown({
        show_description: options.show_description
      });
      this._dropdown = container.querySelector(".contextual_dropdown");
      this._dropdown_label = container.querySelector(".contextual_dropdown_label");
      this._dropdown_container = container.querySelector(".contextual_dropdown_container");
      if (options.show_description) this._dropdown_desc = container.querySelector(".contextual_dropdown_desc");
      this._onOpen = _onOpen.bind(this);
      this._onClose = _onClose.bind(this);
      this._onItemClicked = _onItemClicked.bind(this);
      this._onItemMouseOver = _onItemMouseOver.bind(this);
      this._onItemMouseOut = _onItemMouseOut.bind(this);
      this._onItemPress = _onItemPress.bind(this);
      this._onFocus = _onFocus.bind(this);
      this._onBlur = _onBlur.bind(this);
      this._onEnterPress = _onEnterPress.bind(this);
      this._onArrowPress = _onArrowPress.bind(this);
      this._dropdown_label.addEventListener("click", this._onOpen);
      this._dropdown_label.addEventListener("focus", this._onFocus);
      this._dropdown_label.addEventListener("blur", this._onBlur);
      var tags_regex = /(<([^>]+)>)/gi;
      var items_html = "";
      var desc;
      var desc_disabled;
      var disabled;
      option_els.forEach(function(option_el) {
        desc = option_el.getAttribute("data-desc") || "";
        desc_disabled = option_el.getAttribute("data-desc-disabled") || "";
        disabled = !!option_el.getAttribute("disabled");
        items_html += TS.templates.contextual_dropdown_item({
          label: option_el.label,
          value: option_el.value,
          desc: desc,
          desc_disabled: desc_disabled,
          disabled: disabled,
          aria_label: (desc || option_el.label).replace(tags_regex, "")
        });
      });
      var dropdown_items = container.querySelector(".contextual_dropdown_items");
      dropdown_items.innerHTML = items_html;
      this._items = Array.prototype.slice.call(dropdown_items.querySelectorAll(".contextual_dropdown_item"));
      this._items.forEach(function(item) {
        item.addEventListener("click", this._onItemClicked);
        item.addEventListener("keydown", this._onItemPress);
        if (options.show_description) {
          item.addEventListener("mousemove", this._onItemMouseOver);
          item.addEventListener("focus", this._onItemMouseOver);
          item.addEventListener("mouseout", this._onItemMouseOut);
        }
      }.bind(this));
      if (this._items.length) {
        if (options.start_value) {
          _setCurrentSelected.call(this, dropdown_items.querySelector('[data-value="' + options.start_value + '"]'));
        } else if (options.select_first) {
          _setCurrentSelected.call(this, this._items[0]);
        }
      }
    },
    getSelectedItem: function() {
      return this._current_item || null;
    },
    getSelectedValue: function() {
      if (!this._current_item) return null;
      return this._current_item.getAttribute("data-value");
    },
    destroy: function() {
      this._onClose();
      this._dropdown_label.removeEventListener("click", this._onOpen);
      this._dropdown_label.removeEventListener("focus", this._onFocus);
      this._dropdown_label.removeEventListener("blur", this._onBlur);
      this._items.forEach(function(item) {
        item.removeEventListener("click", this._onItemClicked);
        item.removeEventListener("keydown", this._onItemPress);
        if (this._show_description) {
          item.removeEventListener("mousemove", this._onItemMouseOver);
          item.removeEventListener("focus", this._onItemMouseOver);
          item.removeEventListener("mouseout", this._onItemMouseOut);
        }
      }.bind(this));
    }
  });
  var _onFocus = function() {
    document.addEventListener("keydown", this._onEnterPress);
  };
  var _onBlur = function() {
    document.removeEventListener("keydown", this._onEnterPress);
  };
  var _onEnterPress = function(evt) {
    if (evt.key === "Enter") {
      if (this._is_open) {
        this._onClose();
      } else {
        this._onOpen();
      }
    } else if (!this._is_open && evt.key === "ArrowDown") {
      this._onOpen();
      this._onArrowPress(evt);
    }
  };
  var _onArrowPress = function(evt) {
    var index;
    if (evt.key === "ArrowDown") {
      index = this._items.indexOf(this._focused_item);
      if (index < this._items.length - 1) {
        index += 1;
      } else {
        index = 0;
      }
    } else if (evt.key === "ArrowUp") {
      index = this._items.indexOf(this._focused_item);
      if (index > 0) {
        index -= 1;
      } else {
        index = this._items.length - 1;
      }
    }
    if (index !== undefined) this._items[index].focus();
  };
  var _onOpen = function(evt) {
    if (evt) evt.stopPropagation();
    this._dropdown_label.removeEventListener("click", this._onOpen);
    document.body.addEventListener("click", this._onClose);
    document.addEventListener("keydown", this._onArrowPress);
    if (this._current_item) {
      var label = this._current_item.getAttribute("data-desc");
      this._dropdown_desc.innerHTML = label;
    }
    this._dropdown.classList.add("is_open");
    this._is_open = true;
    this._focused_item = null;
    this._dropdown_container.setAttribute("aria-hidden", false);
  };
  var _onClose = function() {
    document.body.removeEventListener("click", this._onClose);
    document.removeEventListener("keydown", this._onArrowPress);
    this._dropdown_label.addEventListener("click", this._onOpen);
    this._dropdown.classList.remove("is_open");
    this._is_open = false;
    this._dropdown_container.setAttribute("aria-hidden", true);
  };
  var _setCurrentSelected = function(item, evt) {
    if (this._current_item && this._current_item === item || !item) return;
    if (item.getAttribute("disabled")) {
      if (evt) evt.stopPropagation();
      return;
    }
    if (this._current_item) this._current_item.classList.remove("is_selected");
    this._current_item = item;
    this._current_item.classList.add("is_selected");
    this._dropdown_label.innerHTML = this._current_item.getAttribute("data-label");
    var label = this._current_item.getAttribute("data-desc");
    if (this._dropdown_desc) this._dropdown_desc.innerHTML = label;
    this.updated_sig.dispatch(this.getSelectedValue());
  };
  var _onItemClicked = function(evt) {
    _setCurrentSelected.call(this, evt.target, evt);
  };
  var _onItemMouseOver = function(evt) {
    if (this._focused_item === evt.target) return;
    var label = evt.target.getAttribute("disabled") ? evt.target.getAttribute("data-desc-disabled") : evt.target.getAttribute("data-desc");
    this._dropdown_desc.innerHTML = label;
    if (this._focused_item) this._focused_item.blur();
    this._focused_item = evt.target;
    this._focused_item.focus();
  };
  var _onItemMouseOut = function(evt) {
    if (this._focused_item === evt.target) {
      this._focused_item.blur();
      this._focused_item = null;
    }
  };
  var _onItemPress = function(evt) {
    if (evt.key === "Enter") {
      _setCurrentSelected.call(this, evt.target, evt);
      this._dropdown_label.focus();
      this._onClose();
      evt.stopPropagation();
    }
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.slackbot", {
    getWithFeels: function(feels) {
      var slackbot = _cloneSlackbotMemberObject();
      if (!slackbot || !slackbot.profile) return;
      _setProfileImages(slackbot, feels);
      return slackbot;
    }
  });

  function _cloneSlackbotMemberObject() {
    return _.cloneDeep(TS.members.getMemberById("USLACKBOT"));
  }

  function _setProfileImages(slackbot, feels) {
    switch (feels) {
      case "sad_surprise":
        slackbot.profile.image_20 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_20.png";
        slackbot.profile.image_24 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_24.png";
        slackbot.profile.image_32 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_32.png";
        slackbot.profile.image_36 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_36.png";
        slackbot.profile.image_48 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_48.png";
        slackbot.profile.image_72 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_72.png";
        slackbot.profile.image_192 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_192.png";
        slackbot.profile.image_512 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_512.png";
        break;
      case "fancy":
        slackbot.profile.image_20 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_20.png";
        slackbot.profile.image_24 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_24.png";
        slackbot.profile.image_32 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_32.png";
        slackbot.profile.image_36 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_36.png";
        slackbot.profile.image_48 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_48.png";
        slackbot.profile.image_72 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_72.png";
        slackbot.profile.image_192 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_192.png";
        slackbot.profile.image_512 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_512.png";
        break;
      default:
        TS.warn("Slackbot doesn't have an avatar for that feeling.");
        break;
    }
  }
})();
(function() {
  "use strict";
  TS.registerModule("utility.welcome_post", {
    WELCOME_POST_NAME: "Getting_started_with_Slack__team_creator_welcome_post_identifier",
    clogWelcomePostExpand: function(file) {
      if (file && file.name === TS.utility.welcome_post.WELCOME_POST_NAME) {
        if (TS.model.user.is_primary_owner) {
          TS.clog.track("WEBSITE_CLICK", {
            click_target: "expand_post_button",
            trigger: "welcome_post_team_creator",
            action: "open_post"
          });
        } else {
          TS.clog.track("WEBSITE_CLICK", {
            click_target: "expand_post_button",
            trigger: "welcome_post_team_joiner",
            action: "open_post"
          });
        }
      }
    },
    clogWelcomePostOpen: function($el) {
      var file_id = $el.data("file-id");
      var file = TS.files.getFileById(file_id);
      if (file && file.name === TS.utility.welcome_post.WELCOME_POST_NAME) {
        if (TS.model.user.is_primary_owner) {
          if ($el.hasClass("welcome_post_slackbot_message")) {
            TS.clog.track("WEBSITE_CLICK", {
              click_target: "edit_post_link",
              trigger: "welcome_post_team_creator",
              action: "open_post"
            });
          } else {
            TS.clog.track("WEBSITE_CLICK", {
              click_target: "edit_in_new_window_button",
              trigger: "welcome_post_team_creator",
              action: "open_post"
            });
          }
        } else {
          TS.clog.track("WEBSITE_CLICK", {
            click_target: "open_in_new_window_button",
            trigger: "welcome_post_team_joiner",
            action: "open_post"
          });
        }
      }
    },
    clogWelcomePostSetting: function(isEnabled) {
      if (isEnabled) {
        TS.clog.track("WEBSITE_CLICK", {
          click_target: "save_welcome_post_setting",
          trigger: "button_click",
          action: "enable"
        });
      } else {
        TS.clog.track("WEBSITE_CLICK", {
          click_target: "save_welcome_post_setting",
          trigger: "button_click",
          action: "disable"
        });
      }
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("utility.enterprise", {
    getSelf: function() {
      return _.get(TS.enterprise.model.get(), "org.user");
    },
    splitQueryIntoTerms: function(query, terms, type) {
      var results = terms;
      var query_terms;
      query = query.trim();
      if (query.length >= 2) {
        query_terms = query.split(" ");
        results = results || [];
        _.each(query_terms, function(term) {
          if (term.length >= 2) {
            results.push({
              type: type || "fuzzy_with_email",
              value: term
            });
          }
        });
      }
      return results;
    },
    getSSOProviderLabel: function(provider, placeholder) {
      if (!provider) return placeholder;
      var type = _.get(provider, "type", "");
      var name = _.get(provider, "name", "");
      var is_unconfigured = type === "";
      var is_unlabeled_custom_SAML = type === "saml";
      if (is_unconfigured || is_unlabeled_custom_SAML) return placeholder;
      return name || placeholder;
    },
    getProviderLabel: function(org_data, placeholder) {
      var fallback = placeholder || "IDP";
      if (!org_data) return fallback;
      placeholder = _.get(org_data, "saml_provider") || fallback;
      if (placeholder.toLowerCase() === "saml") placeholder = fallback;
      return TS.utility.enterprise.getSSOProviderLabel(_.get(org_data, "sso_provider"), placeholder);
    },
    getGroupsTitle: function(org_data) {
      var provider_label = TS.utility.enterprise.getProviderLabel(org_data);
      if (provider_label === "IDP") {
        return TS.i18n.t("IDP Groups", "enterprise_dashboard")();
      }
      return TS.i18n.t("{provider_label} Groups", "enterprise_dashboard")({
        provider_label: provider_label
      });
    },
    wrapWithStrongTags: _.wrap(_.escape, function(esc, text) {
      return "<strong>" + esc(text) + "</strong>";
    }),
    buildTeamUrl: function(domain) {
      return "https://" + domain + "." + TS.boot_data.abs_root_url.replace(/(http:\/\/|https:\/\/)/, "");
    },
    buildOrgUrl: function(domain) {
      return "https://" + domain + ".enterprise." + TS.boot_data.abs_root_url.replace(/(http:\/\/|https:\/\/)/, "");
    },
    getSanitizedIdpLabel: function(provider_label) {
      var possesive;
      if (provider_label !== "IDP") {
        if (_.endsWith(provider_label, "s")) {
          possesive = "’";
        } else {
          possesive = "’s";
        }
      }
      return {
        simple: provider_label === "IDP" || !provider_label ? "" : provider_label,
        your: provider_label === "IDP" || !provider_label ? TS.i18n.t("your IdP", "enterprise_utility")() : provider_label,
        possessive: provider_label === "IDP" || !provider_label ? TS.i18n.t("your IdP’s", "enterprise_utility")() : TS.i18n.t("{label}{s}", "enterprise_utility")({
          label: provider_label,
          s: possesive
        })
      };
    },
    formatChannelsData: function(data) {
      var channels = [];
      if (data.private_channels) {
        data.private_channels = _.isArray(data.private_channels) ? data.private_channels : [data.private_channels];
        channels = _.map(data.private_channels, function(private_channel) {
          var creator = TS.members.getMemberById(private_channel.creator) || {};
          return {
            creator_display: creator.real_name ? creator.real_name : creator.name,
            creator_id: private_channel.creator,
            creator_username: creator.name,
            date_created: private_channel.created,
            id: private_channel.id,
            member_count: private_channel.member_count,
            name: private_channel.name,
            purpose: private_channel.purpose.value,
            topic: private_channel.topic.value,
            "private": true,
            is_shared: private_channel.is_shared
          };
        });
      }
      if (data.channels) {
        channels = channels.concat(_.map(data.channels, function(channel) {
          var creator = TS.members.getMemberById(channel.creator) || {};
          return {
            creator_display: creator.real_name ? creator.real_name : creator.name,
            creator_id: channel.creator,
            creator_username: creator.name,
            date_created: channel.created,
            id: channel.id,
            member_count: _.get(channel, "members.length", 0),
            name: channel.name,
            purpose: _.get(channel, "purpose.value", ""),
            topic: _.get(channel, "topic.value", ""),
            "private": false,
            is_general: channel.is_general,
            is_shared: channel.is_shared
          };
        }));
      }
      return channels;
    },
    pollUntilCondition: function(options) {
      return new Promise(function(resolve, reject) {
        var default_options = {
          api_method: null,
          api_params: {},
          condition_method: null,
          interval: 5e3,
          interval_backoff: 1e3,
          attempts_max: 10,
          call_immediately: true
        };
        options = _.merge(default_options, options || {});
        var state = {
          attempts: 0,
          last_api_response: null,
          interval: parseInt(options.interval, 10) || 1e3,
          interval_backoff: parseInt(options.interval_backoff, 10) || 0
        };

        function makeAttempt() {
          if (state.attempts >= options.attempts_max) {
            return reject(new Error("Giving up on " + options.api_method + ", reached max attempts of " + options.attempts_max));
          }
          state.attempts += 1;
          state.interval += state.interval_backoff;
          TS.api.call(options.api_method, options.api_params).then(function(resp) {
            state.last_api_response = resp;
            if (options.condition_method(resp)) return resolve(resp);
            return waitAndAttempt();
          }).catch(function(err) {
            state.last_api_response = err;
            return waitAndAttempt();
          });
        }

        function waitAndAttempt() {
          window.setTimeout(makeAttempt, state.interval);
        }
        if (!options.api_method) return reject(new Error("missing required api_method in params"));
        if (!options.condition_method) return reject(new Error("missing required condition_method in params"));
        if (options.call_immediately) {
          makeAttempt();
        } else {
          waitAndAttempt();
        }
      });
    },
    getUserRoleLabel: function(user, for_org) {
      var label_map;
      var user_role_label;
      if (for_org) {
        label_map = {
          primary_owner: TS.i18n.t("Primary Org Owner", "enterprise_dashboard")(),
          owner: TS.i18n.t("Org Owner", "enterprise_dashboard")(),
          admin: TS.i18n.t("Org Admin", "enterprise_dashboard")(),
          single_channel_guest: TS.i18n.t("Single-Channel Guest", "enterprise_dashboard")(),
          multi_channel_guest: TS.i18n.t("Multi-Channel Guest", "enterprise_dashboard")(),
          member: TS.i18n.t("Member", "enterprise_dashboard")()
        };
      } else {
        label_map = {
          primary_owner: TS.i18n.t("Primary Owner", "enterprise_dashboard")(),
          owner: TS.i18n.t("Owner", "enterprise_dashboard")(),
          admin: TS.i18n.t("Admin", "enterprise_dashboard")(),
          single_channel_guest: TS.i18n.t("Single-Channel Guest", "enterprise_dashboard")(),
          multi_channel_guest: TS.i18n.t("Multi-Channel Guest", "enterprise_dashboard")(),
          member: TS.i18n.t("Member", "enterprise_dashboard")()
        };
      }
      if (user.is_ultra_restricted) {
        user_role_label = label_map.single_channel_guest;
      } else if (user.is_restricted) {
        user_role_label = label_map.multi_channel_guest;
      } else if (user.is_primary_owner) {
        user_role_label = label_map.primary_owner;
      } else if (user.is_owner) {
        user_role_label = label_map.owner;
      } else if (user.is_admin) {
        user_role_label = label_map.admin;
      } else {
        user_role_label = label_map.member;
      }
      return user_role_label;
    },
    buildAnalyticsApiOptionsFor: function(type) {
      var build = function(pairs) {
        return _.reduce(pairs, function(result, value, key) {
          var retrieved = TS.enterprise.model.get(["analytics", value]);
          if (retrieved) result[key] = retrieved;
          return result;
        }, {});
      };
      switch (type) {
        case "teams":
          return build({
            query: "teams_search_term",
            sort_prefix: "teams_sort_prefix",
            sort_dir: "teams_sort_dir",
            cursor_mark: "teams_api_cursor",
            date_range: "current_date_range",
            start_date: "start_date",
            end_date: "end_date"
          });
        case "members":
          return build({
            query: "members_search_term",
            sort_prefix: "members_sort_prefix",
            sort_dir: "members_sort_dir",
            cursor_mark: "members_api_cursor",
            date_range: "current_date_range",
            start_date: "start_date",
            end_date: "end_date"
          });
        case "channels":
          return build({
            query: "channels_search_term",
            sort_prefix: "channels_sort_prefix",
            sort_dir: "channels_sort_dir",
            cursor_mark: "channels_api_cursor",
            date_range: "current_date_range",
            start_date: "start_date",
            end_date: "end_date"
          });
        default:
          return build({
            date_range: "current_date_range",
            start_date: "start_date",
            end_date: "end_date"
          });
      }
    },
    maybeGetUpdatedAtTime: function(ts) {
      return ts ? TS.utility.date.toTimeAgo(ts) : null;
    },
    getObjectsForIds: function(objects, ids) {
      if (_.isEmpty(objects) || _.isEmpty(ids)) return [];
      return _.intersectionWith(objects, ids, function(object, id) {
        return object.id === id;
      });
    },
    getQueryForIds: function(ids) {
      if (_.isEmpty(ids)) return;
      if (ids.length === 1) return {
        query: {
          type: "id",
          value: _.head(ids)
        }
      };
      return {
        query: {
          type: "or",
          clauses: _.map(ids, function(id) {
            return {
              type: "id",
              value: id
            };
          })
        }
      };
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("ui.unsaved_form_warning", {
    onStart: function() {
      $("form[data-unsaved-form-warning]").each(function(i, form) {
        var initial_form = $(form).serializeArray();
        var form_submitted = false;
        if (form.hasAttribute("data-validation-form")) {
          TS.ui.validation.completed_sig.add(function(validated_form, status) {
            if (status.passed && validated_form[0] === form) {
              form_submitted = true;
            }
          });
        } else {
          $(form).on("submit", function() {
            form_submitted = true;
          });
        }
        $(window).on("beforeunload", function() {
          if (!form_submitted && !_.isEqual(initial_form, $(form).serializeArray())) {
            return TS.i18n.t("Changes you made may not be saved.", "unsaved_warning")();
          }
        });
      });
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("ui.pins", {
    onStart: function() {
      TS.pins.pins_fetched_sig.add(TS.ui.pins.rebuildPinnedMessagesUI);
      TS.pins.pinned_status_changed_sig.add(TS.ui.pins.updatePinUI);
    },
    updatePinUI: function(model_ob, pinned_item, is_pinned) {
      if (!model_ob || !pinned_item) return;
      if (pinned_item.type === "file") {
        _updatePinnedFileUI(model_ob, pinned_item.file, is_pinned);
      } else if (pinned_item.type === "file_comment") {
        _updatePinnedFileCommentUI(model_ob, pinned_item.comment, is_pinned);
      }
      if (pinned_item.type === "message") {
        _updatePinnedMessageUI(model_ob, pinned_item.message, is_pinned);
      }
    },
    rebuildPinnedMessagesUI: function(model_ob, pinned_items) {
      if (!pinned_items || pinned_items.length === 0) return;
      pinned_items.forEach(function(pinned_item) {
        TS.ui.pins.updatePinUI(model_ob, pinned_item, true);
      });
    },
    clearUnreadPinState: function() {
      TS.client.channel_header.clearUnreadPinState();
      TS.client.channel_page.clearUnreadPinState();
    }
  });
  var _updatePinnedMessageUI = function(model_ob, msg, is_pinned) {
    if (!model_ob || !msg || !msg.ts) return;
    var msg_dom_id = TS.templates.makeMsgDomId(msg.ts);
    var $msg = $("#messages_container #" + msg_dom_id + ', #messages_container .message_unfurl[data-attachment-ts="' + msg.ts + '"]');
    var $is_pinned_holder = $msg.find(".is_pinned_holder:first");
    if ($msg.length === 0 || $is_pinned_holder.length === 0) return;
    if (is_pinned) {
      $msg.addClass("is_pinned");
      $is_pinned_holder.html(TS.templates.builders.buildPinInfoHtml(msg).string);
    } else {
      $msg.removeClass("is_pinned");
      $is_pinned_holder.empty();
    }
  };
  var _updatePinnedFileUI = function(model_ob, file, is_pinned) {
    if (!model_ob || !file) return;
    var $files = $('.message_body[data-file-id="' + file.id + '"]');
    var $msgs = $files.closest("ts-message");
    _updatePinnedMsgDomElementUI(model_ob, $msgs, is_pinned);
  };
  var _updatePinnedFileCommentUI = function(model_ob, comment, is_pinned) {
    if (!model_ob || !comment) return;
    var $comment = $(".rxns_key_" + comment._rxn_key);
    var $msg = $comment.closest("ts-message");
    _updatePinnedMsgDomElementUI(model_ob, $msg, is_pinned);
  };
  var _updatePinnedMsgDomElementUI = function(model_ob, $msgs, is_pinned) {
    if (!model_ob || $msgs.length === 0) return;
    _.forEach($msgs, function(msg) {
      var msg_ts = $(msg).data("ts");
      if (!msg_ts) return;
      msg = TS.utility.msgs.getMsg(msg_ts, model_ob.msgs);
      if (!msg) return;
      _updatePinnedMessageUI(model_ob, msg, is_pinned);
    });
  };
})();
(function() {
  "use strict";
  TS.registerComponent("PromiseQueue", {
    _constructor: function() {
      this.queue = [];
      this.current_job = null;
    },
    destroy: function() {
      this.clear();
    },
    clear: function() {
      this.queue = [];
      if (this.current_job && this.current_job.isPending()) this.current_job.cancel();
      this.current_job = null;
    },
    addToQ: function(job) {
      return new Promise(function(resolve, reject) {
        this.queue.push(function() {
          var ret = job();
          if (!ret || !ret.then) ret = Promise.resolve();
          ret.then(resolve, reject);
          return ret;
        });
        if (this.queue.length === 1 && !this.current_job) {
          return this._nextFromQ();
        }
      }.bind(this));
    },
    _nextFromQ: function() {
      if (this.current_job) return;
      if (!this.queue.length) return;
      var next = this.queue.shift();
      var ret = next();
      this.current_job = ret;
      ret.finally(function() {
        this.current_job = null;
        this._nextFromQ();
        return null;
      }.bind(this));
      return null;
    }
  });
})();
(function() {
  "use strict";
  TS.registerModule("replies", {
    thread_marked_sig: new signals.Signal,
    thread_subscription_changed_sig: new signals.Signal,
    sanity_check_failed_sig: new signals.Signal,
    reply_changed_sig: new signals.Signal,
    reply_deleted_sig: new signals.Signal,
    DEFAULT_HISTORY_API_LIMIT: 100,
    onStart: function() {
      TS.channels.message_received_sig.add(_messageReceived);
      TS.groups.message_received_sig.add(_messageReceived);
      TS.ims.message_received_sig.add(_messageReceived);
      TS.mpims.message_received_sig.add(_messageReceived);
      TS.channels.message_removed_sig.add(_messageRemoved);
      TS.groups.message_removed_sig.add(_messageRemoved);
      TS.ims.message_removed_sig.add(_messageRemoved);
      TS.mpims.message_removed_sig.add(_messageRemoved);
      TS.channels.message_changed_sig.add(_messageChanged);
      TS.groups.message_changed_sig.add(_messageChanged);
      TS.ims.message_changed_sig.add(_messageChanged);
      TS.mpims.message_changed_sig.add(_messageChanged);
      TS.ms.connected_sig.add(_socketConnected);
    },
    canReplyToMsg: function(model_ob, msg, ignore_membership) {
      if (!TS.client) return false;
      if (!msg) return false;
      if (TS.utility.msgs.isAutomatedMsg(msg)) return false;
      if (TS.utility.msgs.isFileMsg(msg)) return false;
      if (TS.utility.msgs.isTempMsg(msg) || msg.is_ephemeral) return false;
      if (TS.utility.msgs.isMsgReply(msg)) return false;
      if (TS.ims.isImWithDeletedMember(model_ob)) return false;
      if (!ignore_membership) {
        if (model_ob.is_channel && !model_ob.is_member) return false;
      }
      return true;
    },
    getMessage: function(model_ob, ts) {
      var msg = TS.utility.msgs.getMsg(ts, model_ob.msgs) || TS.utility.msgs.getMsg(ts, model_ob._archive_msgs);
      if (msg) {
        return msg;
      }
      if (TS.ui.replies) return TS.ui.replies.getActiveMessage(model_ob, ts);
      return null;
    },
    getThread: function(c_id, thread_ts, always_make_api_call) {
      if (!always_make_api_call) {
        var messages_from_model_ob = _getThreadFromModelOb(c_id, thread_ts);
        if (messages_from_model_ob) {
          if (_shouldSanityCheck(c_id, thread_ts)) _sanityCheck(c_id, thread_ts, messages_from_model_ob);
          return Promise.resolve(messages_from_model_ob);
        }
      }
      var params = {
        channel: c_id,
        thread_ts: thread_ts
      };
      var api_endpoints_by_model_ob_type = {
        D: "im.replies",
        C: "channels.replies",
        G: "groups.replies"
      };
      var ob_type = c_id[0];
      var api_endpoint = api_endpoints_by_model_ob_type[ob_type];
      if (!api_endpoint) {
        TS.error("Unable to get thread for message in unsupported model object type with ID" + c_id);
        return Promise.reject(new Error("missing api endpoint"));
      }
      var key = _keyForThread(c_id, thread_ts);
      if (_threads_being_loaded[key]) return _threads_being_loaded[key];
      if (always_make_api_call) {
        TS.log(2004, "Calling " + api_endpoint + " for " + thread_ts + " because always_make_api_call");
      } else {
        TS.log(2004, "Calling " + api_endpoint + " for " + thread_ts + " because local history is incomplete");
      }
      _threads_being_loaded[key] = TS.api.call(api_endpoint, params).then(function(resp) {
        var messages = resp.data.messages.map(function(imsg) {
          return TS.utility.msgs.processImsgFromHistory(imsg, c_id);
        });
        _maybeSlurpSubscriptionState(c_id, messages);
        var model_ob = TS.shared.getModelObById(c_id);
        if (model_ob && model_ob.msgs && model_ob.msgs.length) {
          var temp_msgs = _.filter(model_ob.msgs, function(msg) {
            return msg.thread_ts === thread_ts && TS.utility.msgs.isTempMsg(msg);
          });
          if (temp_msgs.length) messages = _.sortBy(messages.concat(temp_msgs), "ts");
        }
        _maybeAddFetchedMsgsToModel(model_ob, messages);
        return messages;
      }).finally(function() {
        delete _threads_being_loaded[key];
      });
      return _threads_being_loaded[key];
    },
    getThreadLazy: function(c_id, thread_ts, from_end, always_make_api_call) {
      if (!always_make_api_call) {
        var messages_from_model_ob = _getThreadFromModelOb(c_id, thread_ts);
        if (messages_from_model_ob) {
          if (_shouldSanityCheck(c_id, thread_ts)) _sanityCheck(c_id, thread_ts, messages_from_model_ob, from_end);
          var root_msg = _.find(messages_from_model_ob, {
            ts: thread_ts
          });
          return Promise.resolve({
            root_msg: root_msg,
            messages: messages_from_model_ob,
            has_more_beginning: false,
            has_more_end: false
          });
        }
      }
      var model_ob = TS.shared.getModelObById(c_id);
      var api_endpoint = _repliesHistoryEndpoint(model_ob);
      if (always_make_api_call) {
        TS.log(2004, "Calling " + api_endpoint + " for " + thread_ts + " because always_make_api_call");
      } else {
        TS.log(2004, "Calling " + api_endpoint + " for " + thread_ts + " because local history is incomplete");
      }
      var key = _keyForThread(c_id, thread_ts);
      if (from_end) {
        if (_threads_being_loaded_from_end[key]) return _threads_being_loaded_from_end[key];
        _threads_being_loaded_from_end[key] = TS.replies.getThreadBefore(c_id, thread_ts).then(function(thread) {
          thread.has_more_beginning = thread.has_more;
          thread.has_more_end = false;
          return thread;
        }).finally(function() {
          delete _threads_being_loaded_from_end[key];
        });
        return _threads_being_loaded_from_end[key];
      }
      if (_threads_being_loaded[key]) return _threads_being_loaded[key];
      _threads_being_loaded[key] = TS.replies.getThreadAfter(c_id, thread_ts).then(function(thread) {
        thread.has_more_beginning = false;
        thread.has_more_end = thread.has_more;
        return thread;
      }).finally(function() {
        delete _threads_being_loaded[key];
      });
      return _threads_being_loaded[key];
    },
    getThreadBefore: function(c_id, thread_ts, oldest_ts, inclusive) {
      var params = {
        channel: c_id,
        thread_ts: thread_ts,
        count: TS.replies.DEFAULT_HISTORY_API_LIMIT
      };
      if (oldest_ts) {
        params.latest = oldest_ts;
        if (inclusive) params.inclusive = inclusive;
      }
      var model_ob = TS.shared.getModelObById(c_id);
      var api_endpoint = _repliesHistoryEndpoint(model_ob);
      return TS.api.call(api_endpoint, params).then(function(resp) {
        var ret = _processRepliesHistoryResponse(model_ob, thread_ts, resp);
        if (!ret.has_more) {
          ret.messages.unshift(ret.root_msg);
        }
        return ret;
      });
    },
    getThreadAfter: function(c_id, thread_ts, newest_ts, inclusive) {
      var params = {
        channel: c_id,
        thread_ts: thread_ts,
        count: TS.replies.DEFAULT_HISTORY_API_LIMIT
      };
      var starting_at_the_beginning = false;
      if (newest_ts) {
        params.oldest = newest_ts;
        if (inclusive) params.inclusive = inclusive;
      } else {
        starting_at_the_beginning = true;
        params.oldest = thread_ts;
        params.inclusive = true;
      }
      var model_ob = TS.shared.getModelObById(c_id);
      var api_endpoint = _repliesHistoryEndpoint(model_ob);
      return TS.api.call(api_endpoint, params).then(function(resp) {
        var ret = _processRepliesHistoryResponse(model_ob, thread_ts, resp);
        if (starting_at_the_beginning) {
          ret.messages.unshift(ret.root_msg);
        }
        return ret;
      });
    },
    getThreadAround: function(c_id, thread_ts, highlight_ts) {
      var messages_from_model_ob = _getThreadFromModelOb(c_id, thread_ts);
      if (messages_from_model_ob) {
        var from_end = false;
        if (_shouldSanityCheck(c_id, thread_ts)) _sanityCheck(c_id, thread_ts, messages_from_model_ob, from_end);
        var root_msg = _.find(messages_from_model_ob, {
          ts: thread_ts
        });
        return Promise.resolve({
          root_msg: root_msg,
          messages: messages_from_model_ob,
          has_more_beginning: false,
          has_more_end: false
        });
      }
      var before_p = TS.replies.getThreadBefore(c_id, thread_ts, highlight_ts);
      var after_p = TS.replies.getThreadAfter(c_id, thread_ts, highlight_ts, true);
      return Promise.join(before_p, after_p, function(before_data, after_data) {
        var has_more_beginning = before_data.has_more;
        var has_more_end = after_data.has_more;
        var messages = before_data.messages.concat(after_data.messages);
        if (!has_more_beginning) {
          messages.unshift(before_data.root_msg);
        }
        return {
          has_more_beginning: has_more_beginning,
          has_more_end: has_more_end,
          messages: messages,
          root_msg: before_data.root_msg
        };
      });
    },
    getSubscriptionState: function(model_ob_id, thread_ts) {
      var key = _keyForThread(model_ob_id, thread_ts);
      var subscription = _subscriptions[key];
      return subscription;
    },
    promiseToGetSubscriptionState: function(model_ob_id, thread_ts) {
      var key = _keyForThread(model_ob_id, thread_ts);
      var subscription = _subscriptions[key];
      if (subscription) return Promise.resolve(subscription);
      var pending_p = _threads_being_loaded[key] || _threads_being_loaded_from_end[key];
      if (pending_p) {
        return pending_p.then(function() {
          return TS.replies.getSubscriptionState(model_ob_id, thread_ts);
        });
      }
      if (_subscriptions_being_loaded[key]) return _subscriptions_being_loaded[key];
      _subscriptions_being_loaded[key] = TS.api.call("subscriptions.thread.get", {
        channel: model_ob_id,
        thread_ts: thread_ts
      }).then(function(response) {
        var subscriptions = response.data.subscriptions;
        var subscribed = _.includes(subscriptions, thread_ts);
        var subscription = {
          model_ob_id: model_ob_id,
          thread_ts: thread_ts,
          subscribed: subscribed
        };
        _subscriptions[key] = subscription;
        return subscription;
      }).finally(function() {
        delete _subscriptions_being_loaded[key];
      });
      return _subscriptions_being_loaded[key];
    },
    markThread: function(model_ob_id, thread_ts, ts) {
      var key = _keyForThread(model_ob_id, thread_ts);
      var subscription = _subscriptions[key];
      if (subscription && subscription.last_read === ts) return Promise.resolve();
      if (subscription) {
        if (!subscription._pending) subscription._pending = {};
        subscription._pending[ts] = true;
      }
      return TS.api.call("subscriptions.thread.mark", {
        channel: model_ob_id,
        thread_ts: thread_ts,
        ts: ts
      }).finally(function() {
        if (subscription && subscription._pending) {
          delete subscription._pending[ts];
        }
      });
    },
    markAllThreads: function(max_ts) {
      var params = {};
      if (max_ts) params.max_ts = max_ts;
      return TS.api.call("subscriptions.thread.clearAll", params);
    },
    threadMarked: function(model_ob_id, thread_ts, last_read, unread_count) {
      var key = _keyForThread(model_ob_id, thread_ts);
      var subscription = _subscriptions[key];
      if (subscription) {
        subscription.last_read = last_read;
        subscription.unread_count = unread_count;
      }
      TS.replies.thread_marked_sig.dispatch(model_ob_id, thread_ts, subscription);
    },
    threadSubscribed: function(model_ob_id, thread_ts, data) {
      var subscription = _updateThreadSubscription(model_ob_id, thread_ts, true, data);
      TS.replies.thread_subscription_changed_sig.dispatch(model_ob_id, thread_ts, subscription);
    },
    threadUnsubscribed: function(model_ob_id, thread_ts, data) {
      var subscription = _updateThreadSubscription(model_ob_id, thread_ts, false, data);
      TS.replies.thread_subscription_changed_sig.dispatch(model_ob_id, thread_ts, subscription);
    },
    setSubscriptionState: function(model_ob_id, thread_ts, subscribed, last_read) {
      var model_ob = TS.shared.getModelObById(model_ob_id);
      if (!model_ob) return;
      var key = _keyForThread(model_ob_id, thread_ts);
      var subscription = _subscriptions[key];
      if (subscription) {
        subscription.subscribed = subscribed;
      }
      var params = {
        channel: model_ob_id,
        thread_ts: thread_ts
      };
      if (last_read) {
        params.last_read = last_read;
      }
      if (subscribed) {
        return TS.api.call("subscriptions.thread.add", params);
      }
      var msg = TS.replies.getMessage(model_ob, thread_ts);
      if (msg && !msg.thread_ts) {
        params.preemptive_remove = true;
        TS.replies.thread_subscription_changed_sig.dispatch(model_ob_id, thread_ts, subscription);
      }
      return TS.api.call("subscriptions.thread.remove", params);
    },
    maybeSlurpSubscriptionState: function(model_ob_id, msgs) {
      return _maybeSlurpSubscriptionState(model_ob_id, msgs);
    },
    updateThreadBroadcastRoots: function(model_ob, updated_root_msg) {
      var msgs = model_ob.msgs;
      if (!msgs || !msgs.length) return;
      _.forEach(msgs, function(msg) {
        if (msg.ts === updated_root_msg.ts) return;
        if (msg.thread_ts !== updated_root_msg.ts) return;
        if (msg.subtype !== "thread_broadcast" || !msg.root) return;
        msg.root = updated_root_msg;
        if (model_ob.is_channel) {
          TS.channels.message_changed_sig.dispatch(model_ob, msg);
        } else if (model_ob.is_im) {
          TS.ims.message_changed_sig.dispatch(model_ob, msg);
        } else if (model_ob.is_group && model_ob.is_mpim) {
          TS.mpims.message_changed_sig.dispatch(model_ob, msg);
        } else if (model_ob.is_group && !model_ob.is_mpim) {
          TS.groups.message_changed_sig.dispatch(model_ob, msg);
        }
      });
    }
  });
  var _threads_being_loaded = {};
  var _threads_being_loaded_from_end = {};
  var _subscriptions_being_loaded = {};
  var _subscriptions = {};
  var _repliesHistoryEndpoint = function(model_ob) {
    if (model_ob.is_channel) {
      return "channels.replies";
    } else if (model_ob.is_im) {
      return "im.replies";
    }
    return "groups.replies";
  };
  var _processRepliesHistoryResponse = function(model_ob, thread_ts, resp) {
    var messages = resp.data.messages.map(function(imsg) {
      return TS.utility.msgs.processImsgFromHistory(imsg, model_ob.id);
    });
    var has_more = !!resp.data.has_more;
    _maybeSlurpSubscriptionState(model_ob.id, messages);
    if (model_ob && model_ob.msgs && model_ob.msgs.length) {
      var temp_msgs = _.filter(model_ob.msgs, function(msg) {
        return msg.thread_ts === thread_ts && TS.utility.msgs.isTempMsg(msg);
      });
      if (temp_msgs.length) messages = _.sortBy(messages.concat(temp_msgs), "ts");
    }
    _maybeAddFetchedMsgsToModel(model_ob, messages);
    var root_msg = _.find(messages, {
      ts: thread_ts
    });
    if (root_msg) {
      messages = _.without(messages, root_msg);
    }
    return {
      messages: messages,
      has_more: has_more,
      root_msg: root_msg
    };
  };
  var _socketConnected = function(was_fast_reconnect) {
    if (was_fast_reconnect) return;
    if (_subscriptions) {
      _(_subscriptions).values().forEach(function(sub) {
        delete sub.sanity_check_status;
      });
    }
  };
  var _messageChanged = function(model_ob, message) {
    var subscription = TS.replies.getSubscriptionState(model_ob.id, message.ts);
    var previously_failed = _.get(subscription, "sanity_check_status") === false;
    if (previously_failed) {
      TS.log(2004, "Clearing previous sanity check failure for " + message.ts);
      delete subscription.sanity_check_status;
    }
    TS.replies.reply_changed_sig.dispatch(model_ob, message);
  };
  var _messageRemoved = function(model_ob, message) {
    TS.replies.reply_deleted_sig.dispatch(model_ob, message);
  };
  var _messageReceived = function(model_ob, message) {
    _messageChanged(model_ob, message);
  };
  var _getThreadFromModelOb = function(c_id, thread_ts) {
    var model_ob = TS.shared.getModelObById(c_id);
    if (!model_ob) return;
    if (model_ob.is_channel && !model_ob.is_member) {
      return;
    }
    var subscription = TS.replies.getSubscriptionState(c_id, thread_ts);
    var previously_failed = _.get(subscription, "sanity_check_status") === false;
    if (previously_failed) {
      TS.log(2004, "Sanity check for " + thread_ts + " failed earlier, not using local messages");
      return;
    }
    var msgs;
    var thread_msg;
    if (!thread_msg) {
      msgs = model_ob.msgs;
      thread_msg = TS.utility.msgs.getMsg(thread_ts, msgs);
    }
    if (!thread_msg) {
      msgs = model_ob._archive_msgs;
      thread_msg = TS.utility.msgs.getMsg(thread_ts, msgs);
    }
    if (!thread_msg) {
      return;
    }
    var thread_msgs = msgs.filter(function(msg) {
      return msg.ts == thread_ts || msg.thread_ts == thread_ts;
    });
    var without_ephemerals = thread_msgs.filter(function(msg) {
      return !msg.is_ephemeral && !TS.utility.msgs.isTempMsg(msg);
    });
    var reply_count = thread_msg.reply_count || 0;
    if (without_ephemerals.length < reply_count + 1) {
      return;
    }
    return _.sortBy(thread_msgs, "ts");
  };
  var _shouldSanityCheck = function(c_id, thread_ts) {
    if (!TS.model.ms_connected || TS.api.isPaused()) return false;
    var subscription = TS.replies.getSubscriptionState(c_id, thread_ts);
    var previously_passed = _.get(subscription, "sanity_check_status", false);
    if (previously_passed) {
      TS.log(2004, "Skipping sanity check for " + thread_ts + " because it passed previously");
      return false;
    }
    return true;
  };
  var _sanityCheck = function(c_id, thread_ts, messages_from_model_ob, from_end) {
    messages_from_model_ob = messages_from_model_ob.filter(function(msg) {
      return !msg.is_ephemeral && !TS.utility.msgs.isTempMsg(msg);
    });
    var always_make_api_call = true;
    var thread_p;
    if (TS.boot_data.feature_threads_paging_flexpane) {
      thread_p = TS.replies.getThreadLazy(c_id, thread_ts, from_end, always_make_api_call);
    } else {
      thread_p = TS.replies.getThread(c_id, thread_ts, always_make_api_call).then(function(messages_from_api) {
        return {
          messages: messages_from_api,
          has_more_beginning: false,
          has_more_end: false
        };
      });
    }
    thread_p.then(function(thread) {
      var messages_from_api = thread.messages;
      if (thread.has_more_beginning) {
        messages_from_model_ob = _.takeRight(messages_from_model_ob, messages_from_api.length);
      } else if (thread.has_more_end) {
        messages_from_model_ob = _.take(messages_from_model_ob, messages_from_api.length);
      }
      var model_timestamps = _.map(messages_from_model_ob, "ts");
      var api_timestamps = _.map(messages_from_api, "ts");
      var model_texts = _.map(messages_from_model_ob, "text");
      var api_texts = _.map(messages_from_model_ob, "text");
      var subscription = TS.replies.getSubscriptionState(c_id, thread_ts);
      if (_.isEqual(model_timestamps, api_timestamps) && _.isEqual(model_texts, api_texts)) {
        TS.log(2004, "Replies sanity check passed for " + thread_ts);
        if (subscription) subscription.sanity_check_status = true;
        return;
      }
      var common_timestamps = _.intersection(model_timestamps, api_timestamps);
      var api_only_timestamps = _.difference(api_timestamps, common_timestamps);
      var model_only_timestamps = _.difference(model_timestamps, common_timestamps);
      if (model_only_timestamps.length == 0 && api_only_timestamps.length > 0) {
        var all_tombstone_timestamps = _(messages_from_api).filter(function(msg) {
          return msg.subtype === "tombstone";
        }).map("ts").value();
        var is_only_missing_tombstones = _.isEqual(api_only_timestamps.sort(), all_tombstone_timestamps.sort());
        if (is_only_missing_tombstones) {
          TS.log(2004, "Replies sanity check passed (except tombstones) for " + thread_ts);
          TS.metrics.count("replies_sanity_check_passed_except_tombstones");
          return;
        }
      }
      if (model_only_timestamps.length > 0 && api_only_timestamps.length == 0) {
        var last_api_timestamp = _.max(api_timestamps);
        var all_after_api = _.every(model_only_timestamps, function(ts) {
          return ts > last_api_timestamp;
        });
        if (all_after_api) {
          TS.log(2004, "Replies sanity check passed (except newer local msgs) for " + thread_ts);
          TS.metrics.count("replies_sanity_check_passed_except_newer_local_msgs");
          return;
        }
      }
      var debug_info = {
        version_ts: TS.boot_data.version_ts,
        channel_id: c_id,
        thread_ts: thread_ts,
        messages_from_api: api_timestamps,
        messages_from_model_ob: model_timestamps
      };
      TS.warn("Replies sanity check failed. Here's the debug info: " + JSON.stringify(debug_info));
      TS.metrics.count("replies_sanity_check_failed");
      if (subscription) subscription.sanity_check_status = false;
      var model_ob = TS.shared.getModelObById(c_id);
      if (!model_ob) return;
      var root_msg = TS.replies.getMessage(model_ob, thread_ts);
      if (!root_msg) return;
      TS.replies.sanity_check_failed_sig.dispatch(model_ob, root_msg, messages_from_api, thread.has_more_beginning, thread.has_more_end);
      return null;
    });
    return null;
  };
  var _keyForThread = function(model_ob_id, thread_ts) {
    return model_ob_id + "_" + thread_ts;
  };
  var _maybeSlurpSubscriptionState = function(model_ob_id, msgs) {
    msgs.forEach(function(msg) {
      if (!msg.hasOwnProperty("_subscribed")) return;
      var key = _keyForThread(model_ob_id, msg.ts);
      if (_subscriptions[key] && _subscriptions[key].last_read) {
        if (msg._last_read && msg._last_read > _subscriptions[key].last_read) {
          _subscriptions[key].last_read = msg._last_read;
        }
      } else {
        _subscriptions[key] = {
          model_ob_id: model_ob_id,
          thread_ts: msg.ts,
          subscribed: msg._subscribed,
          last_read: msg._last_read,
          unread_count: msg._unread_count
        };
      }
    });
  };
  var _maybeAddFetchedMsgsToModel = function(model_ob, thread_msgs) {
    if (!model_ob || !model_ob.msgs || !model_ob.msgs.length || !thread_msgs || !thread_msgs.length) return;
    var root_msg = _.find(thread_msgs, TS.utility.msgs.msgHasReplies);
    if (!root_msg || root_msg.ts !== root_msg.thread_ts) return;
    if (!TS.utility.msgs.getMsg(root_msg.ts, model_ob.msgs)) {
      return;
    }
    var diff = _.differenceBy(thread_msgs, model_ob.msgs, "ts");
    if (!diff.length) return;
    var all_msgs = model_ob.msgs.concat(diff);
    TS.utility.msgs.setMsgs(model_ob, all_msgs);
  };
  var _updateThreadSubscription = function(model_ob_id, thread_ts, subscribed, data) {
    var key = _keyForThread(model_ob_id, thread_ts);
    var subscription = _subscriptions[key];
    if (subscription) {
      subscription.subscribed = subscribed;
    } else {
      subscription = {
        subscribed: subscribed,
        model_ob_id: model_ob_id,
        thread_ts: thread_ts
      };
      _subscriptions[key] = subscription;
    }
    if (data.last_read) subscription.last_read = data.last_read;
    if (data.unread_count) subscription.unread_count = data.unread_count;
    return subscription;
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.thread", {
    expanded_threads: {},
    buildThreadHTML: function(thread, options) {
      try {
        var model_ob = thread.model_ob;
        var root_msg = thread.root_msg;
        var replies = thread.replies;
        var new_replies = [];
        if (thread.max_visible_ts) {
          var initial_replies = _.takeWhile(replies, function(msg) {
            return msg.ts <= thread.max_visible_ts;
          });
          new_replies = _.drop(replies, initial_replies.length);
          replies = initial_replies;
        }
        var id = "thread_" + model_ob.id + "_" + thread.ts.replace(".", "_");
        var im_user;
        if (model_ob.is_im) {
          im_user = TS.members.getMemberById(model_ob.user);
        }
        var subscription = TS.replies.getSubscriptionState(model_ob.id, root_msg.thread_ts);
        var is_subscribed = subscription && subscription.subscribed;
        var view_previous_count = _calcPreviousReplyCount(thread);
        var visible_reply_count;
        var total_reply_count;
        if (TS.boot_data.feature_threads_paging_flexpane) {
          if (view_previous_count >= TS.replies.DEFAULT_HISTORY_API_LIMIT) {
            visible_reply_count = _calcVisibleReplyCount(thread);
            total_reply_count = _calcTotalReplyCount(thread);
          }
        }
        var thread_html = TS.templates.thread({
          id: id,
          ts: thread.ts,
          model_ob: model_ob,
          thread: thread,
          root_msg: root_msg,
          conversation_permalink: TS.utility.msgs.constructConversationPermalink(model_ob, root_msg.ts),
          channel_msg_permalink: TS.utility.msgs.constructMsgPermalink(model_ob, root_msg.ts),
          replies: replies,
          new_replies: new_replies,
          new_replies_count: _newRepliesText(new_replies.length),
          im_user: im_user,
          is_subscribed: is_subscribed,
          options: options || {},
          view_previous_count: view_previous_count,
          visible_reply_count: visible_reply_count,
          total_reply_count: total_reply_count
        });
        return thread_html;
      } catch (err) {
        TS.error("Threads view: error rendering thread");
        TS.console.logError(err, "threads_view_error");
        return "";
      }
    },
    updateThreadWithMessage: function($thread, thread, msg, show_immediately) {
      var $existing_msg = $thread.find('ts-message[data-ts="' + msg.ts + '"]');
      var html;
      var options = {};
      var context = $thread.attr("data-context");
      if (context === "inline") {
        options.inline = true;
      }
      html = TS.templates.builders.buildThreadMsgHTML(msg, thread.model_ob, thread, options);
      var $new_msg = $(html);
      if ($existing_msg.length) {
        if ($existing_msg.hasClass("hidden")) $new_msg.addClass("hidden");
        $existing_msg.replaceWith($new_msg);
      } else if (show_immediately) {
        var $replies_container = $thread.find(".thread_replies_container");
        var $new_threads = $thread.find(".new_replies_container ts-message");
        $replies_container.append($new_threads).append($new_msg);
        _toggleNewReplyIndicatorVisibility($thread, false);
      } else {
        $thread.find(".new_replies_container").append($new_msg);
        _updateRevealNewRepliesCount(thread, $thread);
      }
      if (!TS.utility.msgs.isMsgReply(msg)) {
        _updateViewAllRepliesCount(thread, $thread, msg);
        _updateVisibleRepliesCount(thread, $thread, msg);
      } else if (msg.is_ephemeral) {
        _updateVisibleRepliesCount(thread, $thread, msg);
      }
      TS.attachment_actions.select.decorateNewElements($thread);
      _updateParticipantsList(thread, $thread);
    },
    removeMessageFromThread: function($thread, thread, msg) {
      var $reply = $("#" + TS.templates.makeMsgDomIdInThreadsView(msg.ts));
      if (!$reply.length) return;
      if (msg.rsp_id) {
        $reply.remove();
      } else {
        $reply.addClass("delete_mode").slideUp(200, function() {
          $reply.remove();
        });
      }
      _updateRevealNewRepliesCount(thread, $thread);
      _updateParticipantsList(thread, $thread);
      if (msg.is_ephemeral) {
        _updateVisibleRepliesCount(thread, $thread);
      }
    },
    revealNewReplies: function($thread, thread) {
      return new Promise(function(resolve) {
        var $indicator = $thread.find(".new_reply_indicator");
        var $old_replies_container = $thread.find(".thread_replies_container");
        var $new_replies_container = $thread.find(".new_replies_container");
        $indicator.animate({
          height: 0
        }, 150, function() {
          _toggleNewReplyIndicatorVisibility($thread, false);
          $indicator.css("height", "");
          var prev_height = $old_replies_container.height();
          $old_replies_container.height(prev_height);
          $old_replies_container.css("overflow", "hidden");
          var $new_msgs = $new_replies_container.find("ts-message");
          $new_msgs.appendTo($old_replies_container);
          $old_replies_container.css("height", "auto");
          var new_height = $old_replies_container.height();
          $old_replies_container.height(prev_height).animate({
            height: new_height
          }, 300, function() {
            $new_replies_container.css("height", "");
            $old_replies_container.css("height", "");
            $old_replies_container.css("overflow", "");
            resolve();
          });
        });
        _updateViewAllRepliesCount(thread, $thread, thread.root_msg);
        _updateVisibleRepliesCount(thread, $thread);
      });
    },
    revealPreviousReplies: function($thread, thread, messages_p) {
      var options = {};
      var context = $thread.attr("data-context");
      if (context === "inline") {
        options.inline = true;
      }
      return new Promise(function(resolve, reject) {
        messages_p.then(function() {
          var num_remaining = TS.boot_data.feature_threads_paging_flexpane && _calcPreviousReplyCount(thread);
          var $link = $thread.find(".view_all_replies_container");
          var doReveal = function() {
            if (num_remaining) {
              TS.ui.thread.hideThreadLoadingSpinner($thread);
              _updateViewAllRepliesCount(thread, $thread, thread.root_msg);
            } else {
              $link.remove();
            }
            _updateVisibleRepliesCount(thread, $thread);
            var $replies_container = $thread.find(".thread_replies_container");
            var $first_existing_msg = $replies_container.find("ts-message:first");
            var $prev_container = $("<div></div>");
            if ($first_existing_msg.length) {
              $first_existing_msg.before($prev_container);
            } else {
              $replies_container.append($prev_container);
            }
            var previous_replies = _.takeWhile(thread.replies, function(msg) {
              return msg.ts < thread.min_visible_ts;
            });
            _.forEach(previous_replies, function(msg) {
              $prev_container.append(TS.templates.builders.buildThreadMsgHTML(msg, thread.model_ob, thread, options));
            });
            TS.attachment_actions.select.decorateNewElements($thread);
            var full_height = $prev_container.height();
            $prev_container.height(0).animate({
              height: full_height
            }, 300, function() {
              var $new_msgs = $prev_container.find("ts-message");
              if ($first_existing_msg.length) {
                $new_msgs.insertBefore($first_existing_msg);
              } else {
                $new_msgs.appendTo($replies_container);
              }
              $prev_container.remove();
              resolve();
            });
          };
          if ($link.length && !num_remaining) {
            $link.animate({
              height: 0
            }, 150, doReveal);
          } else {
            doReveal();
          }
        }, function() {
          _showThreadLoadingError($thread);
          reject();
        });
      });
    },
    renderReplyInput: function($thread, thread) {
      var model_ob = thread.model_ob;
      var thread_ts = thread.root_msg.ts;
      var experiment_group = TS.experiment.getGroup("exp_thread_at_mention");
      var $reply_container = $thread.find(".reply_input_container");
      $reply_container.empty();
      var can_reply = TS.permissions.members.canPostInModelOb(TS.model.user, model_ob);
      if (TS.boot_data.feature_default_shared_channels && !can_reply) can_reply = TS.channels.read_only.threads.canThread(model_ob.id);
      if (!can_reply || model_ob.is_archived) {
        _renderRestrictedReply(model_ob, $reply_container);
        return;
      }
      if (!TS.replies.canReplyToMsg(model_ob, thread.root_msg)) {
        if (model_ob.is_channel && !model_ob.is_member) {
          _renderJoinChannelButton(model_ob, $reply_container);
        } else {
          $thread.addClass("no_reply_container");
        }
        return;
      }
      TS.ui.inline_msg_input.make($reply_container, {
        placeholder: TS.i18n.t("Reply...", "threads")(),
        complete_member_specials: false,
        complete_cmds: !!TS.boot_data.feature_threads_slash_cmds,
        in_thread: !!TS.boot_data.feature_threads_slash_cmds,
        model_ob: model_ob,
        onSubmit: function($elem, text) {
          if (!TS.model.ms_connected) return;
          if (model_ob.is_archived) {
            TS.generic_dialog.alert(TS.i18n.t("This channel has been archived; you cannot send messages to it.", "threads")());
            return;
          }
          var last_reply = _.last(thread.replies);
          if (thread.max_visible_ts) {
            last_reply = _.findLast(thread.replies, function(msg) {
              return msg.ts <= thread.max_visible_ts;
            });
          }
          var handled_reaction = TS.client.ui.maybeHandleReactionCmd(last_reply, text, function() {
            _clearInput($reply_container, model_ob, thread_ts);
          });
          if (handled_reaction) return;
          if (text.substr(0, 1) === "/" && text.substr(0, 2) !== "//") {
            if (TS.boot_data.feature_threads_slash_cmds) {
              _clearInput($reply_container, model_ob, thread_ts);
              TS.client.ui.sendSlashCommand(model_ob, text, thread.root_msg);
            } else if (text.indexOf("/shrug") === 0) {
              _clearInput($reply_container, model_ob, thread_ts);
              TS.client.ui.sendSlashCommand(model_ob, text, thread.root_msg);
            } else {
              TS.client.ui.addOrFlashEphemeralBotMsg({
                text: TS.i18n.t("You cannot use slash commands in threads. Sorry!", "threads")(),
                ephemeral_type: "threads_temp_slash_cmd_feedback",
                slackbot_feels: "sad_surprise",
                channel: model_ob.id,
                thread_ts: thread_ts
              });
              return;
            }
          } else {
            TS.utility.msgs.removeAllEphemeralMsgsByType("threads_temp_slash_cmd_feedback", model_ob.id, thread_ts);
            var should_broadcast_reply = $reply_container.find(".reply_broadcast_toggle").prop("checked");
            _clearInput($reply_container, model_ob, thread_ts);
            if (experiment_group === "copy" && !thread._has_responded_to_thread) {
              thread._has_responded_to_thread = true;
              $reply_container.removeClass("show_mention_teammates_info");
            }
            var context = TS.ui.thread.getContextForEl($thread);
            var clog_event = should_broadcast_reply ? "THREADS_REPLY_BROADCAST_CLICKED" : "THREADS_REPLY";
            var num_msg_in_thread = _.get(thread, ".root_msg.reply_count", 0) + 1;
            TS.ui.thread.trackEvent(model_ob.id, thread.root_msg.ts, context, clog_event, {
              num_msg_in_thread: num_msg_in_thread
            });
            if (should_broadcast_reply) {
              TS.log(2004, "Submitting broadcast from threads view for " + model_ob.id + "-" + thread.root_msg.ts);
            }
            TS.client.ui.sendMessage(model_ob, text, thread.root_msg, should_broadcast_reply);
          }
          return null;
        },
        getMsgDivForEditing: function() {
          var $ts_thread = $thread.closest("ts-thread");
          var replies = thread.replies;
          var msgs = _.reject(replies, function(msg) {
            return msg.subtype === "tombstone";
          });
          if (thread.root_msg.subtype !== "tombstone") msgs.unshift(thread.root_msg);
          _.reverse(msgs);
          var last_msg_from_current_user = TS.utility.msgs.getEditableMsgByProp("user", TS.model.user.id, msgs);
          if (!last_msg_from_current_user) return null;
          return $ts_thread.find('ts-message[data-ts="' + last_msg_from_current_user.ts + '"]');
        },
        onTextChange: function($input) {
          var input_value = TS.utility.contenteditable.value($input);
          var is_input_empty = !input_value.trim();
          var val = is_input_empty ? "" : input_value;
          TS.storage.storeReplyInput(model_ob.id, thread_ts, val);
          if (experiment_group === "copy" && !thread._has_responded_to_thread) {
            $reply_container.toggleClass("show_mention_teammates_info", is_input_empty);
          }
          _checkInputLengthAndUpdate($reply_container);
        }
      });
      if (experiment_group === "copy") {
        thread._has_responded_to_thread = TS.utility.msgs.userRepliedToMsg(thread.root_msg);
      }
      var $input = $reply_container.find(".message_input");
      $input.on("focusin", function() {
        $reply_container.addClass("has_focus");
      }).on("focusout", function() {
        var is_input_empty = !TS.utility.contenteditable.value($input).trim();
        var is_still_focused_actually = document.activeElement === this;
        if (is_input_empty && !is_still_focused_actually) $reply_container.removeClass("has_focus");
      });
      _renderBroadcastButtons(model_ob, thread_ts, $reply_container);
      var prev_val = TS.storage.fetchReplyInput(model_ob.id, thread_ts);
      if (prev_val) {
        TS.utility.populateInput($input, prev_val);
        $reply_container.addClass("has_focus");
      } else if (experiment_group === "copy") {
        $reply_container.toggleClass("show_mention_teammates_info", !thread._has_responded_to_thread);
      }
    },
    joinChannelFromThread: function(e, $el) {
      var $thread = $el.closest("ts-thread");
      if (!$thread.length) return;
      var model_ob_id = $thread.data("model-ob-id");
      var model_ob = TS.shared.getModelObById(model_ob_id);
      if (!model_ob) return;
      TS.channels.join(model_ob.name, null, {
        in_background: true
      });
      $thread.find(".join_channel_from_thread").addClass("disabled");
    },
    submitReply: function(e, $el) {
      if (!$el || $el.length === 0) return;
      var $reply_form = $el.closest(".reply_input_container").find("form");
      if ($reply_form.length === 0) return;
      $reply_form.submit();
    },
    findAndPopulateInput: function(text, c_id, thread_ts) {
      if (!c_id || !thread_ts) return;
      var selector = 'ts-thread[data-model-ob-id="' + c_id + '"][data-thread-ts="' + thread_ts + '"]';
      var $input = $(selector).find(".message_input");
      TS.utility.populateInput($input, text);
      TS.storage.storeReplyInput(c_id, thread_ts, text);
    },
    showThreadLoadingSpinner: function($thread) {
      if (!TS.model.threads_view_is_showing) return;
      if (!$thread || !$thread.length) return;
      var $thread_loading_container = $thread.find(".view_all_loading_container");
      $thread_loading_container.html(TS.templates.infinite_spinner({
        size: "small"
      }));
    },
    hideThreadLoadingSpinner: function($thread) {
      if (!TS.model.threads_view_is_showing) return;
      if (!$thread || !$thread.length) return;
      var $thread_loading_container = $thread.find(".view_all_loading_container");
      $thread_loading_container.empty();
    },
    startInlineThread: function(model_ob, msg) {
      _setExpanded(model_ob.id, msg.ts, true);
      TS.view.rebuildMsg(msg);
    },
    expandInlineThread: function($thread) {
      var model_ob_id = $thread.attr("data-model-ob-id");
      var thread_ts = $thread.attr("data-thread-ts");
      var model_ob = TS.shared.getModelObById(model_ob_id);
      if (!model_ob) return;
      var root_msg = TS.utility.msgs.getMsg(thread_ts, model_ob.msgs);
      if (!root_msg) return;
      var thread = {
        model_ob: model_ob,
        root_msg: root_msg,
        replies: [],
        ts: root_msg.ts
      };
      TS.ui.utility.preventElementFromScrolling($thread.find(".message_content"), function() {
        $thread.addClass("expanded");
      });
      TS.ui.thread.renderReplyInput($thread, thread);
      var messages_p = TS.replies.getThread(model_ob_id, thread_ts).then(function(messages) {
        var min_visible_ts = Infinity;
        if (thread.replies && thread.replies.length) min_visible_ts = _.first(thread.replies).ts;
        thread.min_visible_ts = min_visible_ts;
        var replies = _.filter(messages, function(msg) {
          return msg.ts !== root_msg.ts;
        });
        thread.replies = replies;
      });
      TS.ui.thread.revealPreviousReplies($thread, thread, messages_p);
      _setExpanded(model_ob_id, thread_ts, true);
      return null;
    },
    collapseInlineThread: function($thread) {
      var model_ob_id = $thread.attr("data-model-ob-id");
      var thread_ts = $thread.attr("data-thread-ts");
      var model_ob = TS.shared.getModelObById(model_ob_id);
      if (!model_ob) return;
      var root_msg = TS.utility.msgs.getMsg(thread_ts, model_ob.msgs);
      if (!root_msg) return;
      if (!TS.utility.msgs.msgHasReplies(root_msg)) {
        _setExpanded(model_ob_id, thread_ts, false);
        TS.view.rebuildMsg(root_msg);
        return;
      }
      var $replies_container = $thread.find(".thread_replies_container");
      $replies_container.animate({
        height: 0
      }, 300, function() {
        $replies_container.css("height", "");
        $replies_container.find("ts-message").remove();
        TS.ui.utility.preventElementFromScrolling($thread.find(".message_content"), function() {
          $thread.removeClass("expanded");
        });
      });
      $thread.find(".reply_input_container").html(TS.templates.thread_inline_input_placeholder({
        model_ob: model_ob,
        root_msg: root_msg,
        conversation_permalink: TS.utility.msgs.constructConversationPermalink(model_ob, root_msg.ts),
        num_total_threads: root_msg.reply_count
      }));
      _setExpanded(model_ob_id, thread_ts, false);
    },
    isThreadExpanded: function(model_ob_id, thread_ts) {
      return !!TS.ui.thread.expanded_threads[model_ob_id + thread_ts];
    },
    isMessageBeingConvertedToThread: function(model_ob_id, msg) {
      return !TS.utility.msgs.msgHasReplies(msg) && !TS.utility.msgs.isMsgReply(msg) && TS.ui.thread.isThreadExpanded(model_ob_id, msg.ts);
    },
    makeInlineThread: function(model_ob_id, thread_ts) {
      var model_ob = TS.shared.getModelObById(model_ob_id);
      if (!model_ob) return null;
      var root_msg = TS.utility.msgs.getMsg(thread_ts, model_ob.msgs);
      if (!root_msg) return null;
      var thread = {
        model_ob: model_ob,
        root_msg: root_msg,
        replies: [],
        ts: root_msg.ts
      };
      if (TS.ui.thread.isThreadExpanded(model_ob_id, thread_ts)) {
        var replies = _.filter(model_ob.msgs, function(msg) {
          return msg.ts !== thread_ts && msg.thread_ts === thread_ts;
        });
        thread.replies = replies;
      }
      return thread;
    },
    trackEvent: function(model_ob_id, thread_ts, context, event, metadata) {
      if (!model_ob_id || !thread_ts || !context) {
        TS.error("error collecting clog data for threads");
        return;
      }
      var payload = _getTrackingPayload(model_ob_id, thread_ts, context, metadata);
      if (context === "threads_view") TS.client.ui.threads.incrementTrackingSeqId();
      TS.clog.track(event, payload);
    },
    getTrackingPayloadForEl: function($el, metadata) {
      var payload = {};
      var context = TS.ui.thread.getContextForEl($el);
      if (context !== "threads_view" && context !== "convo") return payload;
      var $thread = $el.closest("ts-thread, ts-conversation");
      if (!$thread.length) return payload;
      var model_ob_id = $thread.attr("data-model-ob-id");
      var thread_ts = $thread.attr("data-thread-ts");
      if (!model_ob_id || !thread_ts) return payload;
      return _getTrackingPayload(model_ob_id, thread_ts, context, metadata);
    },
    getContextForEl: function($el) {
      if ($el.closest("#threads_msgs").length > 0) {
        return "threads_view";
      } else if ($el.closest("#convo_tab").length > 0) {
        return "convo";
      } else if ($el.closest("#msgs_scroller_div").length > 0) {
        return "message_pane";
      } else if ($el.closest("#unread_msgs_scroller_div").length > 0) {
        return "unreads_view";
      }
      return "other";
    }
  });
  var _setExpanded = function(model_ob_id, thread_ts, expanded) {
    TS.ui.thread.expanded_threads[model_ob_id + thread_ts] = expanded;
  };
  var _newRepliesText = function(count) {
    return TS.i18n.t("{reply_count,plural,=1{{reply_count} new reply}other{{reply_count} new replies}}", "threads")({
      reply_count: count
    });
  };
  var _toggleNewReplyIndicatorVisibility = function($thread, is_visible) {
    var $replies = $thread.find(".thread_messages");
    var visibility_class = "show_new_reply_indicator";
    if (is_visible) {
      $replies.addClass(visibility_class);
    } else {
      $replies.removeClass(visibility_class);
    }
  };
  var _updateRevealNewRepliesCount = function(thread, $thread) {
    if (!thread || !$thread || !$thread.length) return;
    var hidden_replies = _.reduce(thread.replies, function(count, reply) {
      if (reply.ts > thread.max_visible_ts) count += 1;
      return count;
    }, 0);
    var $new_reply_indicator = $thread.find(".new_reply_indicator");
    var $new_reply_indicator_count = $new_reply_indicator.find(".reveal_new_replies");
    if (hidden_replies <= 0) {
      _toggleNewReplyIndicatorVisibility($thread, false);
      $new_reply_indicator_count.empty();
      return;
    }
    var text = _newRepliesText(hidden_replies);
    $new_reply_indicator_count.text(text);
    _toggleNewReplyIndicatorVisibility($thread, true);
  };
  var _updateVisibleRepliesCount = function(thread, $thread) {
    if (!thread || !$thread || !$thread.length) return;
    var $visible_reply_count = $thread.find(".visible_reply_count");
    if (_calcPreviousReplyCount(thread) >= TS.replies.DEFAULT_HISTORY_API_LIMIT) {
      var visible_reply_count = _calcVisibleReplyCount(thread);
      var total_reply_count = _calcTotalReplyCount(thread);
      var text = TS.i18n.t("{visible_reply_count} of {total_reply_count}", "threads")({
        visible_reply_count: visible_reply_count,
        total_reply_count: total_reply_count
      });
      $visible_reply_count.text(text);
    } else {
      $visible_reply_count.text("");
    }
  };
  var _updateViewAllRepliesCount = function(thread, $thread, root_msg) {
    if (!$thread || !$thread.length || !root_msg || !root_msg.replies) return;
    var $view_all_replies_container = $thread.find(".view_all_replies_container");
    if (!$view_all_replies_container.length) return;
    var $link = $view_all_replies_container.find(".view_all_replies");
    var previous_reply_count = _calcPreviousReplyCount(thread);
    if (!previous_reply_count) {
      $view_all_replies_container.addClass("hidden");
      return;
    }
    var link_text = TS.i18n.t("View {reply_count,plural,=1{{reply_count} previous reply}other{{reply_count} previous replies}}", "threads")({
      reply_count: previous_reply_count
    });
    $link.text(link_text);
  };
  var _calcPreviousReplyCount = function(thread) {
    var view_previous_count = thread.root_msg.reply_count;
    var replies = thread.replies;
    if (replies && replies.length) {
      var non_ephemeral_or_temp_count = _.filter(replies, function(msg) {
        return !msg.is_ephemeral && !TS.utility.msgs.isTempMsg(msg);
      }).length;
      view_previous_count = thread.root_msg.reply_count - non_ephemeral_or_temp_count;
      if (TS.boot_data.feature_threads_paging_flexpane) {
        view_previous_count = Math.min(TS.replies.DEFAULT_HISTORY_API_LIMIT, view_previous_count);
      }
    }
    return view_previous_count;
  };
  var _calcVisibleReplyCount = function(thread) {
    var visible_reply_count;
    if (thread.max_visible_ts) {
      visible_reply_count = _.reduce(thread.replies, function(count, reply) {
        if (reply.ts <= thread.max_visible_ts) count += 1;
        return count;
      }, 0);
    } else {
      visible_reply_count = _.get(thread, ".replies", []).length;
    }
    return visible_reply_count;
  };
  var _calcTotalReplyCount = function(thread) {
    var ephemeral_or_temp_count = _.filter(thread.replies, function(msg) {
      return msg.is_ephemeral || TS.utility.msgs.isTempMsg(msg);
    }).length;
    var total_reply_count = _.get(thread, "root_msg.replies.length", 0) + ephemeral_or_temp_count;
    return total_reply_count;
  };
  var _clearInput = function($reply_container, model_ob, thread_ts) {
    var $input = $reply_container.find(".message_input");
    TS.utility.populateInput($input, "", 0);
    TS.storage.storeReplyInput(model_ob.id, thread_ts, "");
    $reply_container.find(".reply_broadcast_toggle").attr("checked", false);
  };
  var _renderBroadcastButtons = function(model_ob, thread_ts, $reply_container) {
    if (!model_ob || !thread_ts || !$reply_container || $reply_container.length === 0) return;
    if (!TS.permissions.members.canPostInChannel(model_ob)) return;
    var require_at_for_mention = _.get(TS.model, ".team.prefs.require_at_for_mention");
    $reply_container.append(TS.templates.reply_broadcast_buttons({
      model_ob: model_ob,
      thread_ts: thread_ts,
      view: "threads",
      require_at_for_mention: require_at_for_mention
    }));
    var $reply_broadcast_buttons = $reply_container.find(".reply_broadcast_label_container, .reply_send");
    var $input = $reply_container.find(".message_input");
    $reply_broadcast_buttons.mousedown(function(e) {
      e.preventDefault();
      TS.utility.contenteditable.focus($input);
    }).click(function() {
      TS.utility.contenteditable.focus($input);
    });
  };
  var _renderRestrictedReply = function(model_ob, $reply_container) {
    $reply_container.html(TS.templates.reply_limited({
      channel_name: TS.shared.getDisplayNameForModelOb(model_ob),
      is_archived: model_ob.is_archived
    }));
  };
  var _renderJoinChannelButton = function(model_ob, $reply_container) {
    $reply_container.html(TS.templates.join_channel_from_thread({
      model_ob_name: model_ob.name,
      is_threads_view: true
    }));
  };
  var _checkInputLengthAndUpdate = function($reply_container) {
    var $input = $reply_container.find(".message_input");
    var too_long = !!TS.msg_edit.isMessageTooLong($input);
    $reply_container.find(".reply_container_info").toggleClass("hidden", too_long);
  };
  var _showThreadLoadingError = function($thread) {
    if (!TS.model.threads_view_is_showing) return;
    if (!$thread || !$thread.length) return;
    var $view_all_replies_container = $thread.find(".view_all_replies_container");
    var $view_all_loading_container = $view_all_replies_container.find(".view_all_loading_container");
    var $view_all_error_msg = $view_all_replies_container.find(".view_all_error_msg");
    var $view_all_link = $view_all_replies_container.find(".view_all_replies");
    $view_all_loading_container.empty();
    $view_all_error_msg.removeClass("hidden");
    var try_again_text = TS.i18n.t("Try Again", "threads")();
    $view_all_link.removeClass("active").text(try_again_text);
  };
  var _getTrackingPayload = function(model_ob_id, thread_ts, context, metadata) {
    if (!model_ob_id || !thread_ts || !context) {
      TS.error("error collecting clog data for threads");
      return;
    }
    var payload = {
      parent_message_id: thread_ts,
      channel_id: model_ob_id,
      is_threads_view: context === "threads_view" ? 1 : 0,
      is_flexpane: context === "convo" ? 1 : 0
    };
    if (context === "threads_view") _.merge(payload, TS.client.ui.threads.getTrackingData());
    if (metadata) payload = _.merge(payload, metadata);
    return payload;
  };
  var _updateParticipantsList = function(thread, $thread) {
    var participants = TS.templates.builders.buildThreadParticipantListHTML(thread.root_msg);
    $thread.find(".thread_participants").html(participants);
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.money", {
    formatMoney: function(amount, currency_code, formatting_options) {
      var default_formatting_options = {
        all_digits: false
      };
      formatting_options = _.defaults(formatting_options, default_formatting_options);
      var all_digits = formatting_options.all_digits;
      if (!currency_code) {
        TS.error("cannot format money: no currency_code specified");
        return "";
      }
      amount = amount ? parseInt(amount, 10) : 0;
      var dollar_value;
      if (_has_Intl) {
        if (currency_code === "JPY") {
          dollar_value = amount;
        } else {
          dollar_value = amount / 100;
        }
        var has_cents = amount % 100 !== 0;
        var exclude_cents_in_output = !all_digits && !has_cents;
        var number_format_key = _getNumFormatKey(_locale, currency_code, exclude_cents_in_output);
        var number_format_obj;
        if (_number_format_cache[number_format_key]) {
          number_format_obj = _number_format_cache[number_format_key];
        } else if (exclude_cents_in_output) {
          number_format_obj = new Intl.NumberFormat(_locale, {
            style: "currency",
            currency: currency_code,
            maximumFractionDigits: 0,
            minimumFractionDigits: 0
          });
          _number_format_cache[number_format_key] = number_format_obj;
        } else {
          number_format_obj = new Intl.NumberFormat(_locale, {
            style: "currency",
            currency: currency_code
          });
          _number_format_cache[number_format_key] = number_format_obj;
        }
        return number_format_obj.format(dollar_value);
      }
      return TS.utility.money.formatMoneyWithoutIntl(amount, currency_code, formatting_options);
    },
    formatMoneyWithoutIntl: function(amount, currency_code, formatting_options) {
      var NUMBER_FORMAT_ONLY = /^[-]*[0-9]+\.?[0-9]*$/;
      var THOUSANDS_SEPARATOR_REGEX = /\B(?=(\d{3})+(?!\d))/g;
      var default_formatting_options = {
        all_digits: false
      };
      formatting_options = _.defaults(formatting_options, default_formatting_options);
      var all_digits = formatting_options.all_digits;
      if (!currency_code) {
        TS.error("cannot format money: no currency_code specified");
        return "";
      }
      amount = amount ? parseInt(amount, 10) : 0;
      var default_locale_options = _locales_number_formatting.default;
      var decimal_symbol = _locales_number_formatting[_locale] ? _locales_number_formatting[_locale].decimal_symbol : default_locale_options.decimal_symbol;
      var thousands_separator = _locales_number_formatting[currency_code] ? _locales_number_formatting[_locale].thousands_separator : default_locale_options.thousands_separator;
      var currency_symbol = _currencies[currency_code] ? _currencies[currency_code].currency_symbol : currency_code;
      if (!NUMBER_FORMAT_ONLY.test(amount)) {
        TS.warn("Incorrect input passed as parameter: amount should only contain numbers");
        return amount;
      }
      var sign_symbol = "";
      var dollar_value = "";
      var has_cents;
      var ret_val = "";
      var is_negative = amount < 0;
      if (is_negative) {
        sign_symbol = "-";
        amount = Math.abs(amount);
      }
      if (currency_code === "JPY") {
        dollar_value = amount.toString();
      } else {
        has_cents = amount % 100 !== 0;
        dollar_value = amount / 100;
        if (!all_digits) {
          dollar_value = has_cents ? dollar_value.toFixed(2).replace(".", decimal_symbol) : dollar_value.toFixed(0);
        } else {
          dollar_value = dollar_value.toFixed(2).replace(".", decimal_symbol);
        }
      }
      dollar_value = dollar_value.replace(THOUSANDS_SEPARATOR_REGEX, thousands_separator);
      switch (_locale) {
        case "en-US":
          ret_val = sign_symbol + currency_symbol + dollar_value;
          break;
        case "es-ES":
          ret_val = sign_symbol + dollar_value + " " + currency_symbol;
          break;
        case "fr-FR":
          ret_val = sign_symbol + dollar_value + " " + currency_symbol;
          break;
        case "de-DE":
          ret_val = sign_symbol + dollar_value + " " + currency_symbol;
          break;
        case "ja-JP":
          ret_val = sign_symbol + currency_symbol + dollar_value;
          break;
        default:
          ret_val = sign_symbol + currency_symbol + dollar_value;
      }
      return ret_val;
    },
    test: function() {
      var test_ob = {
        isInString: _isInString,
        currencies: _currencies,
        locales_number_formatting: _locales_number_formatting,
        locale: _locale,
        number_format_cache: _number_format_cache,
        getNumFormatKey: _getNumFormatKey,
        has_Intl: _has_Intl
      };
      Object.defineProperty(test_ob, "isInString", {
        get: function() {
          return _isInString;
        },
        set: function(v) {
          _isInString = v;
        }
      });
      Object.defineProperty(test_ob, "currencies", {
        get: function() {
          return _currencies;
        },
        set: function(v) {
          _currencies = v;
        }
      });
      Object.defineProperty(test_ob, "locales_number_formatting", {
        get: function() {
          return _locales_number_formatting;
        },
        set: function(v) {
          _locales_number_formatting = v;
        }
      });
      Object.defineProperty(test_ob, "locale", {
        get: function() {
          return "_locale";
        },
        set: function(v) {
          _locale = v;
        }
      });
      Object.defineProperty(test_ob, "number_format_cache", {
        get: function() {
          return _number_format_cache;
        },
        set: function(v) {
          _number_format_cache = v;
        }
      });
      Object.defineProperty(test_ob, "getNumFormatKey", {
        get: function() {
          return _getNumFormatKey;
        },
        set: function(v) {
          _getNumFormatKey = v;
        }
      });
      Object.defineProperty(test_ob, "has_Intl", {
        get: function() {
          return _has_Intl;
        },
        set: function(v) {
          _has_Intl = v;
        }
      });
      return test_ob;
    }
  });
  var _currencies = {
    "default": {
      currency_symbol: "$"
    },
    USD: {
      currency_symbol: "$"
    },
    GBP: {
      currency_symbol: "£"
    },
    EUR: {
      currency_symbol: "€"
    },
    JPY: {
      currency_symbol: "¥"
    }
  };
  var _locales_number_formatting = {
    "default": {
      decimal_symbol: ".",
      thousands_separator: ","
    },
    "en-US": {
      decimal_symbol: ".",
      thousands_separator: ","
    },
    "es-ES": {
      decimal_symbol: ",",
      thousands_separator: " "
    },
    "fr-FR": {
      decimal_symbol: ",",
      thousands_separator: " "
    },
    "ja-JP": {
      decimal_symbol: ".",
      thousands_separator: ","
    },
    "de-DE": {
      decimal_symbol: ",",
      thousands_separator: "."
    }
  };
  var _has_Intl = window.Intl && typeof window.Intl === "object";
  var _locale = TS.i18n.locale() || "en-US";
  var _number_format_cache = {};
  var _isInString = function(search_string, substr) {
    if (_.isEmpty(search_string) || _.isEmpty(substr)) return false;
    return search_string.indexOf(substr) >= 0;
  };
  var _getNumFormatKey = function(locale, currency_code, should_exclude_cents) {
    var cents_fmt = should_exclude_cents ? "cents" : "nocents";
    return locale + "_" + currency_code + "_" + cents_fmt;
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.react_emoji_menu", {
    is_showing: false,
    onStart: function() {
      TS.prefs.emoji_mode_changed_sig.add(_reRender);
      TS.prefs.preferred_skin_tone_changed_sig.add(_updateHandyRxnsAndReRender);
      TS.prefs.team_handy_rxns_changed_sig.add(_updateHandyRxnsAndReRender);
      TS.prefs.channel_handy_rxns_changed_sig.add(_updateHandyRxnsAndReRender);
    },
    start: function(args) {
      _start(args);
    }
  });
  var _MIN_VIEWPORT_SPACING_PX = 15;
  var _DEFAULT_OFFSET_X = 0;
  var _DEFAULT_OFFSET_Y = -6;
  var _DEFAULT_POSITION = "top-left";
  var _TARGET_NODE_ID = "reactroot_emoji_picker";
  var _emoji_picker_target;
  var _$trigger;
  var _input_to_fill = "#msg_input";
  var _rxn_key;
  var _callback;
  var _target_bounds;
  var _handy_rxns;
  var _start = function(args) {
    _rxn_key = args.rxn_key;
    if (_rxn_key) {
      _updateHandyRxns();
      _callback = function(emoji_name) {
        var adding = !TS.rxns.doesRxnsHaveRxnFromUser(TS.rxns.getExistingRxnsByKey(args.rxn_key), emoji_name);
        TS.rxns.changeRxnsFromUserAction(args.rxn_key, emoji_name, adding);
        if (args.callback) args.callback();
      };
    } else {
      _callback = args.callback;
    }
    _input_to_fill = !_rxn_key && (args.input_to_fill || _input_to_fill);
    if (TS.client && TS.utility.contenteditable.isDisabled(TS.client.ui.$msg_input) && _input_to_fill) {
      var triggered_from_inline_reply = $(_input_to_fill).closest("ts-conversation").length > 0;
      if (!triggered_from_inline_reply) {
        return;
      }
    }
    var position = args.position;
    var is_message_input = TS.client && _input_to_fill === TS.client.ui.$msg_input;
    var is_flexpane_open = _.get(TS, "model.ui_state.flex_visible");
    if (is_message_input && is_flexpane_open) {
      position = "top-right";
    }
    _$trigger = $(args.e && args.e.target);
    _toggleTriggerStyle({
      open: true,
      is_rxn: !!_rxn_key
    });
    TS.tips.hideAll();
    _target_bounds = args.target_bounds || _$trigger.dimensions_rect();
    var scroll_offset = window.pageYOffset;
    _target_bounds.top += scroll_offset;
    _target_bounds.bottom += scroll_offset;
    TS.ui.react_emoji_menu.is_showing = true;
    var picker_args = {};
    var popover_args = {
      position: position,
      offset_x: args.offset_x,
      offset_y: args.offset_y
    };
    _render(picker_args, popover_args);
  };
  var _end = function() {
    _toggleTriggerStyle({
      open: false,
      is_rxn: !!_rxn_key
    });
    _$trigger = null;
    _input_to_fill = "#msg_input";
    _rxn_key = null;
    _callback = null;
    _handy_rxns = null;
    TS.tips.unhideAll();
    TS.ui.react_emoji_menu.is_showing = false;
    _render();
  };
  var _render = function(picker_args, popover_args) {
    var picker_props = _buildEmojiPickerProps(picker_args);
    var popover_props = _buildPopoverProps(popover_args);
    _renderEmojiPickerPopover(picker_props, popover_props);
  };
  var _toggleTriggerStyle = function(args) {
    if (args.is_rxn) {
      _$trigger.closest(".menu_rxn").toggleClass("active", args.open);
      _$trigger.closest(".rxn_panel").toggleClass("active", args.open);
      _$trigger.closest("ts-message").toggleClass("active", args.open);
      _$trigger.toggleClass("active", args.open);
    } else {
      _$trigger.closest(".emo_menu").toggleClass("active", args.open);
      _$trigger.closest(".handy_rxns_row").toggleClass("active", args.open);
      _$trigger.closest(".current_status_emoji_picker").toggleClass("active", args.open);
    }
  };
  var _updateHandyRxns = function(rxn_key) {
    var rxns = TS.rxns.getHandyRxnsDisplayDataByRxnKey(rxn_key);
    _handy_rxns = _.map(rxns.items, function(rxn) {
      return rxn.name;
    });
  };
  var _getSkinToneChoices = function() {
    if (TS.model.prefs.emoji_mode === "google") return [];
    return [":hand:", ":hand::skin-tone-2:", ":hand::skin-tone-3:", ":hand::skin-tone-4:", ":hand::skin-tone-5:", ":hand::skin-tone-6:"];
  };
  var _fillInput = function(e, emoji) {
    var $input_to_fill = $(_input_to_fill);
    var emoji_display_name = emoji.display_name || emoji.name;
    var should_focus = !(e && e.shiftKey);
    if (TS.utility.contenteditable.supportsTexty() && TS.utility.contenteditable.isContenteditable($input_to_fill)) {
      setTimeout(TS.utility.contenteditable.insertTextAtCursor, 0, $input_to_fill, emoji_display_name, should_focus);
    } else {
      var current_pos = TS.utility.getCursorPosition($input_to_fill).start;
      var new_pos = current_pos + emoji_display_name.length;
      var current_val = TS.utility.contenteditable.value($input_to_fill);
      var new_val = current_val.substr(0, current_pos) + emoji_display_name + current_val.substr(current_pos);
      TS.utility.populateInput($input_to_fill, new_val);
      if (should_focus) setTimeout(TS.utility.setCursorPosition, 0, _input_to_fill, new_pos);
    }
  };
  var _buildEmojiPickerProps = function(args) {
    args = args || {};
    var props = {
      onSkinToneChanged: _onSkinToneChanged,
      groups: TS.model.emoji_groups,
      skinToneChoiceNames: _getSkinToneChoices(),
      activeSkinToneId: args.skin_tone_id || TS.model.prefs.preferred_skin_tone,
      numBackgroundColors: TS.model.emoji_menu_colors,
      onSelected: _onSelect,
      onClosed: _onClose,
      canAddEmoji: !TS.model.user.is_restricted && (!TS.model.team.prefs.emoji_only_admins || TS.model.user.is_admin)
    };
    if (_rxn_key) props.handyRxnNames = _handy_rxns;
    return props;
  };
  var _buildPopoverProps = function(args) {
    args = args || {};
    return {
      targetBounds: _target_bounds,
      allowanceX: _MIN_VIEWPORT_SPACING_PX,
      allowanceY: _MIN_VIEWPORT_SPACING_PX,
      position: args.position || _DEFAULT_POSITION,
      offsetX: !_.isUndefined(args.offset_x) ? args.offset_x : _DEFAULT_OFFSET_X,
      offsetY: !_.isUndefined(args.offset_y) ? args.offset_y : _DEFAULT_OFFSET_Y,
      isOpen: TS.ui.react_emoji_menu.is_showing,
      onClose: _onClose
    };
  };
  var _onSelect = function(e, emoji) {
    if (_callback) {
      setTimeout(_callback, 0, emoji.name);
      return;
    }
    if (!_input_to_fill) return TS.error("Could not find an _input_to_fill.");
    _fillInput(e, emoji);
  };
  var _onClose = function() {
    _end();
  };
  var _onSkinToneChanged = function(new_skin_tone_id) {
    TS.prefs.onPrefChanged({
      name: "preferred_skin_tone",
      value: new_skin_tone_id
    });
    TS.prefs.setPrefByAPI({
      name: "preferred_skin_tone",
      value: new_skin_tone_id
    });
    if (_rxn_key) _updateHandyRxns(_rxn_key);
    if (TS.ui.react_emoji_menu.is_showing) {
      var optimistic_picker_props = {
        skin_tone_id: new_skin_tone_id
      };
      _render(optimistic_picker_props);
    }
  };
  var _reRender = function() {
    if (TS.ui.react_emoji_menu.is_showing) _.defer(_render);
  };
  var _updateHandyRxnsAndReRender = function() {
    if (_rxn_key) _updateHandyRxns(_rxn_key);
    _reRender();
  };
  var _createEmojiPickerTarget = function() {
    if (!document.getElementById(_TARGET_NODE_ID)) {
      var target = document.createElement("div");
      target.setAttribute("id", _TARGET_NODE_ID);
      document.body.appendChild(target);
    }
    return document.getElementById(_TARGET_NODE_ID);
  };
  var _renderEmojiPickerPopover = function(picker_props, popover_props) {
    TS.metrics.mark("react_emoji_menu_render_mark");
    if (!_emoji_picker_target) _emoji_picker_target = _createEmojiPickerTarget();
    var emoji_picker = React.createElement(ReactComponents.EmojiPicker, picker_props, null);
    var popover = React.createElement(ReactComponents.Popover, popover_props, emoji_picker);
    ReactDOM.render(popover, _emoji_picker_target, function() {
      TS.metrics.measureAndClear("react_emoji_menu_render", "react_emoji_menu_render_mark");
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("ui.a11y", {
    focus_stack: [],
    unread_message_strings: {},
    $aria_live_div: null,
    zoom_level_changed_sig: new signals.Signal,
    zoomPercentToLevel: function(percentage) {
      return _zoom_percent_to_level[percentage];
    },
    zoomLevelToPercent: function(level) {
      return _zoom_level_to_percent[level];
    },
    onStart: function() {
      _createAriaLiveElement();
      _bindResizeListener();
      _createZoomLevelIndicatorUI();
      TS.channels.switched_sig.add(TS.ui.a11y.annouceCurrentChannelOrImOrGroup);
      TS.ims.switched_sig.add(TS.ui.a11y.annouceCurrentChannelOrImOrGroup);
      TS.groups.switched_sig.add(TS.ui.a11y.annouceCurrentChannelOrImOrGroup);
      TS.mpims.switched_sig.add(TS.ui.a11y.annouceCurrentChannelOrImOrGroup);
      TS.prefs.a11y_animations_changed_sig.add(TS.ui.a11y.replaceAnimatedImages);
    },
    focusOnNextMessage: function() {
      var $currently_focused_element = $(document.activeElement);
      var $element_to_focus_on;
      var is_message_element = $currently_focused_element.is(_message_element_selectors);
      if (is_message_element && $currently_focused_element.next().length) {
        $element_to_focus_on = $currently_focused_element.next();
      } else {
        $element_to_focus_on = _getMessageInputElement();
      }
      TS.ui.a11y.focusAndAddTabindex($element_to_focus_on);
    },
    focusOnPreviousMessage: function() {
      var $currently_focused_element = $(document.activeElement);
      var $element_to_focus_on;
      var $msgs_div = _getMessageDivElement();
      var is_message_element = $currently_focused_element.is(_message_element_selectors);
      if (is_message_element && $currently_focused_element.prev().length) {
        $element_to_focus_on = $currently_focused_element.prev();
      } else if (is_message_element && TS.model.archive_view_is_showing) {
        $element_to_focus_on = _getMessageInputElement();
      } else if ($currently_focused_element.is("#end_display_meta")) {
        $element_to_focus_on = _getMessageInputElement();
      } else if ($msgs_div.children(_message_element_selectors).length && $msgs_div.children(_message_element_selectors).last()) {
        $element_to_focus_on = $msgs_div.children(_message_element_selectors).last();
      } else {
        $element_to_focus_on = _getMessageInputElement();
      }
      TS.ui.a11y.focusAndAddTabindex($element_to_focus_on);
    },
    focusOnOldestUnreadMessage: function() {
      if (TS.client.ui.$msgs_unread_divider && TS.client.ui.$msgs_unread_divider.next().length) {
        TS.ui.a11y.focusAndAddTabindex(TS.client.ui.$msgs_unread_divider.next());
      } else {
        TS.ui.a11y.ariaLiveAnnounce(TS.i18n.t("No unread messages.", "a11y")(), true);
      }
    },
    focusOnMessageInput: function() {
      TS.ui.a11y.focusAndAddTabindex(_getMessageInputElement());
    },
    focusAndAddTabindex: function($el) {
      if (!$el) return;
      if ($el.attr("tabindex")) $el.data("previous-tabindex", $el.attr("tabindex"));
      $el.attr("tabindex", "0");
      $el.focus();
    },
    cleanUpTabindex: function($el) {
      if (!$el) return;
      if ($el.data("previous-tabindex")) {
        $el.attr("tabindex", $el.data("previous-tabindex"));
      } else {
        $el.removeAttr("tabindex");
      }
    },
    saveCurrentFocus: function() {
      TS.ui.a11y.focus_stack.push(document.activeElement);
      return document.activeElement;
    },
    saveCurrentFocusAndFocusOnElement: function($el) {
      var active_element = TS.ui.a11y.saveCurrentFocus();
      TS.ui.a11y.focusAndAddTabindex($el);
      return active_element;
    },
    restorePreviousFocus: function() {
      var last_focused_element = TS.ui.a11y.focus_stack.pop();
      if (last_focused_element && typeof last_focused_element.focus === "function") {
        last_focused_element.focus();
        return last_focused_element;
      }
    },
    restorePreviousFocusAndCleanUpElement: function($el) {
      var last_focused_element = TS.ui.a11y.restorePreviousFocus();
      TS.ui.a11y.cleanUpTabindex($el);
      return last_focused_element;
    },
    ariaLiveAnnounce: function(text, assertive) {
      TS.ui.a11y.$aria_live_div.empty();
      TS.ui.a11y.$aria_live_div.attr("aria-live", assertive ? "assertive" : "polite");
      TS.ui.a11y.$aria_live_div.text(text);
    },
    assembleActiveModelName: function() {
      var model_ob = TS.shared.getActiveModelOb();
      var name = "";
      if (TS.model.unread_view_is_showing) {
        name = TS.i18n.t("All unreads", "a11y")();
      } else if (TS.model.threads_view_is_showing) {
        name = TS.i18n.t("Threads", "a11y")();
      } else if (model_ob.is_channel) {
        name = TS.i18n.t("Channel #{model_name}", "a11y")({
          model_name: model_ob.name
        });
      } else if (model_ob.is_im) {
        if (TS.boot_data.feature_name_tagging_client) {
          name = TS.i18n.t("Direct message with {model_name}", "a11y")({
            model_name: TS.members.getMemberDisplayNameById(model_ob.user)
          });
        } else {
          name = TS.i18n.t("Direct message with {model_name}", "a11y")({
            model_name: model_ob.name
          });
        }
      } else if (model_ob.is_mpim) {
        name = TS.i18n.t("Direct message with {model_name}", "a11y")({
          model_name: TS.mpims.getDisplayName(model_ob)
        });
      } else if (model_ob.is_group) {
        name = TS.i18n.t("Private Channel {model_name}", "a11y")({
          model_name: model_ob.name
        });
      }
      return name;
    },
    saveUnreadCountMessage: function(model_ob, message) {
      if (!model_ob || !model_ob.name || !message) return;
      TS.ui.a11y.unread_message_strings[model_ob.name] = message;
    },
    annouceCurrentChannelOrImOrGroup: function() {
      var name = TS.ui.a11y.assembleActiveModelName();
      var announce_message = name;
      var model_ob = TS.shared.getActiveModelOb();
      if (!model_ob) return;
      if (TS.model.archive_view_is_showing) {
        TS.ui.a11y.focusAndAddTabindex(_getMessageInputElement());
        return;
      }
      if (TS.ui.a11y.unread_message_strings[model_ob.name]) {
        announce_message += ", " + TS.ui.a11y.unread_message_strings[model_ob.name];
        delete TS.ui.a11y.unread_message_strings[model_ob.name];
      }
      TS.ui.a11y.ariaLiveAnnounce(announce_message, true);
      if (!TS.boot_data.feature_texty) {
        TS.client.ui.$msg_input.attr("aria-label", TS.i18n.t("Message input for {model_name}", "a11y")({
          model_name: name
        }));
      }
    },
    resetMessageInput: function() {
      TS.client.msg_input.reset();
      TS.client.msg_input.$input.trigger("autosize-resizeIncludeStyle");
      TS.client.msg_input.resized();
      TS.view.onResize();
    },
    replaceAnimatedImages: function() {
      TS.ui.a11y.replaceAnimatedFiles();
      TS.ui.a11y.replaceEmoji();
    },
    replaceAnimatedFiles: function() {
      var animations = TS.model.prefs.a11y_animations;
      var file;
      var img_to_replace;
      if (_is_space) {
        _replacePostGif();
        return;
      }
      var msgs = TS.utility.msgs.getDisplayedMsgs(TS.shared.getActiveModelOb().msgs);
      var i;
      if (animations === false) {
        for (i = 0; i < msgs.length; i += 1) {
          if (msgs[i].file) {
            file = msgs[i].file;
            if (file.filetype === "gif") {
              if (file.deanimate_gif) {
                img_to_replace = file.deanimate_gif;
              } else if (file.thumb_160) {
                img_to_replace = file.thumb_160;
              }
              if (img_to_replace) {
                _replaceFileGif(file.id, img_to_replace);
              }
            } else if (file.filetype === "space") {
              _replacePostGif(msgs[i].ts);
            }
          } else if (msgs[i].attachments) {
            _replaceAttachment(msgs[i].ts, msgs[i].attachments[0]);
          }
        }
      } else {
        for (i = 0; i < msgs.length; i += 1) {
          if (msgs[i].file) {
            file = msgs[i].file;
            if (file.filetype === "gif") {
              if (file.thumb_360_gif) {
                img_to_replace = file.thumb_360_gif;
              } else if (file.thumb_360) {
                img_to_replace = file.thumb_360;
              }
              if (img_to_replace) {
                _replaceFileGif(file.id, img_to_replace);
              }
            } else if (file.filetype === "space") {
              _replacePostGif(msgs[i].ts);
            }
          } else if (msgs[i].attachments) {
            _replaceAttachment(msgs[i].ts, msgs[i].attachments[0]);
          }
        }
      }
    },
    replaceEmoji: function() {
      var _emoji = emoji;
      var emoji_list = $(".emoji:not(.stop_animations)");
      var new_emoji_url;
      for (var j = 0; j < emoji_list.length; j += 1) {
        var new_emoji = _emoji.replace_colons(emoji_list[j].innerText);
        if (!new_emoji) {
          var emoji_colons = ":" + emoji_list[j].parentNode.getAttribute("data-emoji") + ":";
          new_emoji = _emoji.replace_colons(emoji_colons);
        }
        if (new_emoji) {
          if (new_emoji.match(/.+background-image:url\((.+)\).*/)) {
            new_emoji_url = new_emoji.match(/.+background-image:url\((.+)\).*/)[1];
          }
        }
        emoji_list[j].style.backgroundImage = 'url("' + new_emoji_url + '")';
      }
      TS.emoji.makeMenuLists();
    },
    getContrastColor: function(hex_color) {
      var contrast_result = false;
      hex_color = hex_color.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function(m, r, g, b) {
        return r + r + g + g + b + b;
      });
      hex_color = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex_color);
      if (hex_color) {
        var r = parseInt(hex_color[1], 16);
        var g = parseInt(hex_color[2], 16);
        var b = parseInt(hex_color[3], 16);
        var yiq = (r * 299 + g * 587 + b * 114) / 1e3;
        contrast_result = yiq >= 128 ? "#000000" : "#FFFFFF";
      }
      return contrast_result;
    },
    test: function() {
      return {
        createAriaLiveElement: _createAriaLiveElement,
        destroyAriaLiveElement: _destroyAriaLiveElement,
        getMessageInputElement: _getMessageInputElement,
        getMessageDivElement: _getMessageDivElement
      };
    }
  });
  var _zoom_percent_to_level = {
    70: "-3",
    80: "-2",
    90: "-1",
    normal: "0",
    110: "1",
    125: "2",
    150: "3"
  };
  var _zoom_level_to_percent = Object.keys(_zoom_percent_to_level).reduce(function(obj, val) {
    obj[_zoom_percent_to_level[val]] = val;
    return obj;
  }, {});
  var _message_element_selectors = ".message, .day_divider, .unread_divider";
  var _is_space = TS.web && TS.web.space;
  var _createAriaLiveElement = function() {
    TS.ui.a11y.$aria_live_div = $('<div id="aria_live_announcer" role="status"></div>');
    $("body").append(TS.ui.a11y.$aria_live_div);
    return TS.ui.a11y.$aria_live_div;
  };
  var _destroyAriaLiveElement = function() {
    TS.ui.a11y.$aria_live_div.remove();
    delete TS.ui.a11y.$aria_live_div;
  };
  var _getMessageInputElement = function() {
    return TS.model.archive_view_is_showing && TS.client.archives.not_member ? $("#footer_archives") : TS.client.ui.$msg_input;
  };
  var _getMessageDivElement = function() {
    return TS.model.archive_view_is_showing ? TS.client.archives.$archives_msgs_div : TS.client.ui.$msgs_div;
  };
  var _replaceFileGif = function(file_id, img_to_replace) {
    var $image = $('.image_gif[data-file-id="' + file_id + '"]');
    $image.attr("data-src", img_to_replace);
    $image.find(".image_bg").attr("data-real-background-image", img_to_replace);
    $image.find(".image_bg").css("backgroundImage", "url(" + img_to_replace + ")");
    $image.find("img").data("real-src", img_to_replace);
    $image.find("img").attr("src", img_to_replace);
  };
  var _replaceAttachment = function(message_ts, attachment) {
    if (!attachment) return;
    if (attachment.is_animated || attachment.image_url && attachment.image_url.match(/\.gifv?$/)) {
      var $message = $('.message[data-ts="' + message_ts + '"]');
      var $gif = $message.find(".msg_inline_img img");
      var img_to_replace = TS.model.prefs.a11y_animations === false ? TS.utility.getImgProxyURL(attachment.image_url, attachment.image_width, attachment.image_height) : attachment.image_url;
      _replaceImg($gif, img_to_replace);
    }
  };
  var _replacePostGif = function(message_ts) {
    var $gifs = _is_space ? $("ts-space .msg_inline_img img") : $('.message[data-ts="' + message_ts + '"] .post_container .msg_inline_img img');
    $.each($gifs, function() {
      var $gif = $(this);
      var img_to_replace = TS.utility.getImgProxyURL($gif.attr("src"));
      _replaceImg($gif, img_to_replace);
    });
  };
  var _replaceImg = function($gif, img_to_replace) {
    $gif.attr({
      "data-real-src": img_to_replace,
      src: img_to_replace
    });
    var $msg_inline_img = $gif.closest(".msg_inline_img");
    $msg_inline_img.attr("data-real-background-image", img_to_replace);
    $msg_inline_img.css("backgroundImage", "url(" + img_to_replace + ")");
  };
  var _current_zoom_level;
  var _bindResizeListener = function() {
    if (!TSSSB.supports_zoom_api) {
      return;
    }
    _current_zoom_level = TSSSB.call("getZoom");
    $(window).on("resize", _onResize);
  };
  var _onResize = function() {
    var zoom_level = TSSSB.call("getZoom");
    if (_current_zoom_level != zoom_level) {
      _current_zoom_level = zoom_level;
      TS.ui.a11y.zoom_level_changed_sig.dispatch({
        zoom_level: zoom_level
      });
    }
  };
  var _createZoomLevelIndicatorUI = function() {
    if (!TSSSB.supports_zoom_api) {
      return;
    }
    $("body").append('<div class="zoom_level_indicator hidden"></div>');
    TS.ui.a11y.zoom_level_changed_sig.add(_showZoomLevel);
  };
  var _updateZoomLevel = function(zoom_level) {
    var value = _zoom_level_to_percent[zoom_level] || "100";
    var percentage = value === "normal" ? "100" : value;
    var html = TS.i18n.t("zoom: <strong>{zoom_percentage}%</strong>", "a11y")({
      zoom_percentage: percentage
    });
    $(".zoom_level_indicator").html(html);
  };
  var _zoom_indicator_timer;
  var _showZoomLevel = function(info) {
    if (TS._incremental_boot || $("body").hasClass("loading")) {
      return;
    }
    var $prefs_modal = $(".prefs_modal.active");
    if ($prefs_modal.length && $prefs_modal.find(".a11y_pref_zoom").length) {
      return;
    }
    if (_zoom_indicator_timer) {
      clearTimeout(_zoom_indicator_timer);
      _zoom_indicator_timer = null;
    }
    _updateZoomLevel(info.zoom_level);
    var $zoom_level_indicator = $(".zoom_level_indicator");
    $zoom_level_indicator.insertAfter(document.body.lastElementChild);
    $zoom_level_indicator.removeClass("hidden").show(0);
    var width = $zoom_level_indicator.outerWidth() / 2;
    var left = "calc(50vw - " + width + "px)";
    $zoom_level_indicator.css("left", left);
    _zoom_indicator_timer = setTimeout(function() {
      $zoom_level_indicator.fadeOut(100);
    }, 1e3);
  };
})();
(function() {
  "use strict";
  TS.registerModule("searcher", {
    search: function(query, options) {
      if (options.limit) {
        options.limit_option = {
          limit: options.limit
        };
      } else {
        options.limit_option = {
          limit: _DEFAULT_LIMIT
        };
      }
      var remote_promise = _searchRemote(query, options);
      if (options.tiered) {
        var local_results = _searchLocal(query, options);
        local_results.promise = remote_promise;
        return Promise.resolve(local_results);
      }
      return remote_promise;
    },
    test: function() {
      return {
        count: _totalCount
      };
    }
  });
  var _DEFAULT_LIMIT = 24;
  var _DEFAULT_SORT_OPTIONS = {
    prefer_exact_match: true,
    frecency: true,
    prefer_channels_user_belongs_to: true,
    search_previous_channel_names: true
  };
  var _DEFAULT_CHANNEL_OPTIONS = {
    include_archived: true
  };
  var _DEFAULT_GROUP_OPTIONS = {
    include_archived: true
  };
  var _DEFAULT_MEMBER_OPTIONS = {
    include_self: false,
    include_slackbot: true,
    include_bots: true
  };
  var _searchLocal = function(query, options) {
    var data = {};
    if (options.members) data.members = _getLocalMembers(options.members);
    if (options.channels) data.channels = _getLocalChannels(options.channels);
    if (options.groups) data.groups = _getLocalGroups(options.groups);
    if (options.mpims) data.mpims = _getLocalMPIMs(options.mpims);
    if (options.teams) data.teams = _getLocalTeams(options.teams);
    if (options.usergroups) data.usergroups = _getLocalUserGroups(options.usergroups);
    if (options.views) data.views = _getLocalViews(options.views);
    if (options.filter) data = options.filter(data);
    if (options.sort) {
      var sort_options = _mergeDefaults(options.sort, options.limit_option, _DEFAULT_SORT_OPTIONS);
      return TS.sorter.search(query, data, sort_options);
    }
    return data;
  };
  var _getLocalMembers = function(options) {
    options = _mergeDefaults(options, _DEFAULT_MEMBER_OPTIONS);
    return TS.members.getMembersWithOptions(options);
  };
  var _getLocalChannels = function(options) {
    options = _mergeDefaults(options, _DEFAULT_CHANNEL_OPTIONS);
    var channels;
    if (options.include_archived) {
      channels = TS.channels.getChannelsForUser().slice();
    } else {
      channels = TS.channels.getUnarchivedChannelsForUser().slice();
    }
    if (options.can_post) {
      channels = _.filter(channels, _.curry(TS.permissions.members.canPostInModelOb)(TS.model.user));
    }
    return channels;
  };
  var _getLocalGroups = function(options) {
    options = _mergeDefaults(options, _DEFAULT_GROUP_OPTIONS);
    if (options.include_archived) {
      return TS.model.groups;
    }
    return TS.groups.getUnarchivedGroups();
  };
  var _getLocalMPIMs = function() {
    return TS.mpims.getVisibleMpims().slice();
  };
  var _getLocalTeams = function() {
    return _.values(TS.boot_data.other_accounts);
  };
  var _getLocalUserGroups = function() {
    return TS.user_groups.getActiveUserGroups().slice();
  };
  var _getLocalViews = function() {
    var views = [];
    if (TS.client.unread.isEnabled()) {
      views.push(_.find(TS.model.NAMED_VIEWS, {
        id: "Vall_unreads"
      }));
    }
    views.push(_.find(TS.model.NAMED_VIEWS, {
      id: "Vall_threads"
    }));
    if (TS.boot_data.feature_app_index) {
      views.push(_.find(TS.model.NAMED_VIEWS, {
        id: "Vapp_index"
      }));
    }
    return views;
  };
  var _searchRemote = function(query, options) {
    if (!TS.lazyLoadMembersAndBots()) return Promise.resolve(_searchLocal(query, options));
    var promises = [];
    if (options.members) promises.push(_promiseRemoteMembers(query, options));
    return Promise.all(promises).then(function() {
      return _searchLocal(query, options);
    });
  };
  var _promiseRemoteMembers = function(query, options) {
    options = _mergeDefaults(options.members, options.limit_option, _DEFAULT_MEMBER_OPTIONS);
    options.max_api_results = options.limit;
    if (query.charAt(0) === "@") query = query.slice(1);
    options.query = query;
    return TS.members.promiseToSearchMembers(options);
  };
  var _mergeDefaults = function(options, defaults) {
    if (options === true) options = {};
    return _.defaultsDeep.apply(null, arguments);
  };
  var _totalCount = function(results) {
    return _.size(_.flatten(_.values(results)));
  };
})();
! function(e) {
  function t(r) {
    if (n[r]) return n[r].exports;
    var o = n[r] = {
      i: r,
      l: !1,
      exports: {}
    };
    return e[r].call(o.exports, o, o.exports, t), o.l = !0, o.exports;
  }
  var n = {};
  t.m = e, t.c = n, t.i = function(e) {
    return e;
  }, t.d = function(e, n, r) {
    t.o(e, n) || Object.defineProperty(e, n, {
      configurable: !1,
      enumerable: !0,
      get: r
    });
  }, t.n = function(e) {
    var n = e && e.__esModule ? function() {
      return e.default;
    } : function() {
      return e;
    };
    return t.d(n, "a", n), n;
  }, t.o = function(e, t) {
    return Object.prototype.hasOwnProperty.call(e, t);
  }, t.p = "/", t(t.s = 355);
}([function(e, t, n) {
  (function(e) {
    ! function(t, r) {
      e.exports = function() {
        "use strict";

        function t() {
          return mr.apply(null, arguments);
        }

        function r(e) {
          return e instanceof Array || "[object Array]" === Object.prototype.toString.call(e);
        }

        function o(e) {
          return null != e && "[object Object]" === Object.prototype.toString.call(e);
        }

        function i(e) {
          var t;
          for (t in e) return !1;
          return !0;
        }

        function a(e) {
          return "number" == typeof e || "[object Number]" === Object.prototype.toString.call(e);
        }

        function s(e) {
          return e instanceof Date || "[object Date]" === Object.prototype.toString.call(e);
        }

        function u(e, t) {
          var n, r = [];
          for (n = 0; n < e.length; ++n) r.push(t(e[n], n));
          return r;
        }

        function l(e, t) {
          return Object.prototype.hasOwnProperty.call(e, t);
        }

        function c(e, t) {
          for (var n in t) l(t, n) && (e[n] = t[n]);
          return l(t, "toString") && (e.toString = t.toString), l(t, "valueOf") && (e.valueOf = t.valueOf), e;
        }

        function d(e, t, n, r) {
          return vt(e, t, n, r, !0).utc();
        }

        function f() {
          return {
            empty: !1,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: !1,
            invalidMonth: null,
            invalidFormat: !1,
            userInvalidated: !1,
            iso: !1,
            parsedDateParts: [],
            meridiem: null
          };
        }

        function h(e) {
          return null == e._pf && (e._pf = f()), e._pf;
        }

        function p(e) {
          if (null == e._isValid) {
            var t = h(e),
              n = vr.call(t.parsedDateParts, function(e) {
                return null != e;
              }),
              r = !isNaN(e._d.getTime()) && t.overflow < 0 && !t.empty && !t.invalidMonth && !t.invalidWeekday && !t.nullInput && !t.invalidFormat && !t.userInvalidated && (!t.meridiem || t.meridiem && n);
            if (e._strict && (r = r && 0 === t.charsLeftOver && 0 === t.unusedTokens.length && void 0 === t.bigHour), null != Object.isFrozen && Object.isFrozen(e)) return r;
            e._isValid = r;
          }
          return e._isValid;
        }

        function _(e) {
          var t = d(NaN);
          return null != e ? c(h(t), e) : h(t).userInvalidated = !0, t;
        }

        function m(e) {
          return void 0 === e;
        }

        function y(e, t) {
          var n, r, o;
          if (m(t._isAMomentObject) || (e._isAMomentObject = t._isAMomentObject), m(t._i) || (e._i = t._i), m(t._f) || (e._f = t._f), m(t._l) || (e._l = t._l), m(t._strict) || (e._strict = t._strict), m(t._tzm) || (e._tzm = t._tzm), m(t._isUTC) || (e._isUTC = t._isUTC), m(t._offset) || (e._offset = t._offset), m(t._pf) || (e._pf = h(t)), m(t._locale) || (e._locale = t._locale), gr.length > 0)
            for (n in gr) r = gr[n], o = t[r], m(o) || (e[r] = o);
          return e;
        }

        function v(e) {
          y(this, e), this._d = new Date(null != e._d ? e._d.getTime() : NaN), this.isValid() || (this._d = new Date(NaN)), !1 === Mr && (Mr = !0, t.updateOffset(this), Mr = !1);
        }

        function g(e) {
          return e instanceof v || null != e && null != e._isAMomentObject;
        }

        function M(e) {
          return e < 0 ? Math.ceil(e) || 0 : Math.floor(e);
        }

        function b(e) {
          var t = +e,
            n = 0;
          return 0 !== t && isFinite(t) && (n = M(t)), n;
        }

        function w(e, t, n) {
          var r, o = Math.min(e.length, t.length),
            i = Math.abs(e.length - t.length),
            a = 0;
          for (r = 0; r < o; r++)(n && e[r] !== t[r] || !n && b(e[r]) !== b(t[r])) && a++;
          return a + i;
        }

        function k(e) {
          !1 === t.suppressDeprecationWarnings && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + e);
        }

        function L(e, n) {
          var r = !0;
          return c(function() {
            if (null != t.deprecationHandler && t.deprecationHandler(null, e), r) {
              for (var o, i = [], a = 0; a < arguments.length; a++) {
                if (o = "", "object" == typeof arguments[a]) {
                  o += "\n[" + a + "] ";
                  for (var s in arguments[0]) o += s + ": " + arguments[0][s] + ", ";
                  o = o.slice(0, -2);
                } else o = arguments[a];
                i.push(o);
              }
              k(e + "\nArguments: " + Array.prototype.slice.call(i).join("") + "\n" + (new Error).stack), r = !1;
            }
            return n.apply(this, arguments);
          }, n);
        }

        function T(e, n) {
          null != t.deprecationHandler && t.deprecationHandler(e, n), br[e] || (k(n), br[e] = !0);
        }

        function S(e) {
          return e instanceof Function || "[object Function]" === Object.prototype.toString.call(e);
        }

        function Y(e) {
          var t, n;
          for (n in e) t = e[n], S(t) ? this[n] = t : this["_" + n] = t;
          this._config = e, this._ordinalParseLenient = new RegExp(this._ordinalParse.source + "|" + /\d{1,2}/.source);
        }

        function D(e, t) {
          var n, r = c({}, e);
          for (n in t) l(t, n) && (o(e[n]) && o(t[n]) ? (r[n] = {}, c(r[n], e[n]), c(r[n], t[n])) : null != t[n] ? r[n] = t[n] : delete r[n]);
          for (n in e) l(e, n) && !l(t, n) && o(e[n]) && (r[n] = c({}, r[n]));
          return r;
        }

        function x(e) {
          null != e && this.set(e);
        }

        function C(e, t, n) {
          var r = this._calendar[e] || this._calendar.sameElse;
          return S(r) ? r.call(t, n) : r;
        }

        function P(e) {
          var t = this._longDateFormat[e],
            n = this._longDateFormat[e.toUpperCase()];
          return t || !n ? t : (this._longDateFormat[e] = n.replace(/MMMM|MM|DD|dddd/g, function(e) {
            return e.slice(1);
          }), this._longDateFormat[e]);
        }

        function E() {
          return this._invalidDate;
        }

        function j(e) {
          return this._ordinal.replace("%d", e);
        }

        function O(e, t, n, r) {
          var o = this._relativeTime[n];
          return S(o) ? o(e, t, n, r) : o.replace(/%d/i, e);
        }

        function R(e, t) {
          var n = this._relativeTime[e > 0 ? "future" : "past"];
          return S(n) ? n(t) : n.replace(/%s/i, t);
        }

        function I(e, t) {
          var n = e.toLowerCase();
          Dr[n] = Dr[n + "s"] = Dr[t] = e;
        }

        function A(e) {
          return "string" == typeof e ? Dr[e] || Dr[e.toLowerCase()] : void 0;
        }

        function H(e) {
          var t, n, r = {};
          for (n in e) l(e, n) && (t = A(n)) && (r[t] = e[n]);
          return r;
        }

        function N(e, t) {
          xr[e] = t;
        }

        function z(e) {
          var t = [];
          for (var n in e) t.push({
            unit: n,
            priority: xr[n]
          });
          return t.sort(function(e, t) {
            return e.priority - t.priority;
          }), t;
        }

        function W(e, n) {
          return function(r) {
            return null != r ? (U(this, e, r), t.updateOffset(this, n), this) : F(this, e);
          };
        }

        function F(e, t) {
          return e.isValid() ? e._d["get" + (e._isUTC ? "UTC" : "") + t]() : NaN;
        }

        function U(e, t, n) {
          e.isValid() && e._d["set" + (e._isUTC ? "UTC" : "") + t](n);
        }

        function G(e) {
          return e = A(e), S(this[e]) ? this[e]() : this;
        }

        function B(e, t) {
          if ("object" == typeof e) {
            e = H(e);
            for (var n = z(e), r = 0; r < n.length; r++) this[n[r].unit](e[n[r].unit]);
          } else if (e = A(e), S(this[e])) return this[e](t);
          return this;
        }

        function V(e, t, n) {
          var r = "" + Math.abs(e),
            o = t - r.length;
          return (e >= 0 ? n ? "+" : "" : "-") + Math.pow(10, Math.max(0, o)).toString().substr(1) + r;
        }

        function q(e, t, n, r) {
          var o = r;
          "string" == typeof r && (o = function() {
            return this[r]();
          }), e && (jr[e] = o), t && (jr[t[0]] = function() {
            return V(o.apply(this, arguments), t[1], t[2]);
          }), n && (jr[n] = function() {
            return this.localeData().ordinal(o.apply(this, arguments), e);
          });
        }

        function J(e) {
          return e.match(/\[[\s\S]/) ? e.replace(/^\[|\]$/g, "") : e.replace(/\\/g, "");
        }

        function K(e) {
          var t, n, r = e.match(Cr);
          for (t = 0, n = r.length; t < n; t++) jr[r[t]] ? r[t] = jr[r[t]] : r[t] = J(r[t]);
          return function(t) {
            var o, i = "";
            for (o = 0; o < n; o++) i += r[o] instanceof Function ? r[o].call(t, e) : r[o];
            return i;
          };
        }

        function $(e, t) {
          return e.isValid() ? (t = Q(t, e.localeData()), Er[t] = Er[t] || K(t), Er[t](e)) : e.localeData().invalidDate();
        }

        function Q(e, t) {
          function n(e) {
            return t.longDateFormat(e) || e;
          }
          var r = 5;
          for (Pr.lastIndex = 0; r >= 0 && Pr.test(e);) e = e.replace(Pr, n), Pr.lastIndex = 0, r -= 1;
          return e;
        }

        function X(e, t, n) {
          Hr[e] = S(t) ? t : function(e, r) {
            return e && n ? n : t;
          };
        }

        function Z(e, t) {
          return l(Hr, e) ? Hr[e](t._strict, t._locale) : new RegExp(ee(e));
        }

        function ee(e) {
          return te(e.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(e, t, n, r, o) {
            return t || n || r || o;
          }));
        }

        function te(e) {
          return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
        }

        function ne(e, t) {
          var n, r = t;
          for ("string" == typeof e && (e = [e]), a(t) && (r = function(e, n) {
              n[t] = b(e);
            }), n = 0; n < e.length; n++) Nr[e[n]] = r;
        }

        function re(e, t) {
          ne(e, function(e, n, r, o) {
            r._w = r._w || {}, t(e, r._w, r, o);
          });
        }

        function oe(e, t, n) {
          null != t && l(Nr, e) && Nr[e](t, n._a, n, e);
        }

        function ie(e, t) {
          return new Date(Date.UTC(e, t + 1, 0)).getUTCDate();
        }

        function ae(e, t) {
          return e ? r(this._months) ? this._months[e.month()] : this._months[(this._months.isFormat || $r).test(t) ? "format" : "standalone"][e.month()] : this._months;
        }

        function se(e, t) {
          return e ? r(this._monthsShort) ? this._monthsShort[e.month()] : this._monthsShort[$r.test(t) ? "format" : "standalone"][e.month()] : this._monthsShort;
        }

        function ue(e, t, n) {
          var r, o, i, a = e.toLocaleLowerCase();
          if (!this._monthsParse)
            for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], r = 0; r < 12; ++r) i = d([2e3, r]), this._shortMonthsParse[r] = this.monthsShort(i, "").toLocaleLowerCase(), this._longMonthsParse[r] = this.months(i, "").toLocaleLowerCase();
          return n ? "MMM" === t ? (o = Kr.call(this._shortMonthsParse, a), -1 !== o ? o : null) : (o = Kr.call(this._longMonthsParse, a), -1 !== o ? o : null) : "MMM" === t ? -1 !== (o = Kr.call(this._shortMonthsParse, a)) ? o : (o = Kr.call(this._longMonthsParse, a), -1 !== o ? o : null) : -1 !== (o = Kr.call(this._longMonthsParse, a)) ? o : (o = Kr.call(this._shortMonthsParse, a), -1 !== o ? o : null);
        }

        function le(e, t, n) {
          var r, o, i;
          if (this._monthsParseExact) return ue.call(this, e, t, n);
          for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), r = 0; r < 12; r++) {
            if (o = d([2e3, r]), n && !this._longMonthsParse[r] && (this._longMonthsParse[r] = new RegExp("^" + this.months(o, "").replace(".", "") + "$", "i"), this._shortMonthsParse[r] = new RegExp("^" + this.monthsShort(o, "").replace(".", "") + "$", "i")), n || this._monthsParse[r] || (i = "^" + this.months(o, "") + "|^" + this.monthsShort(o, ""), this._monthsParse[r] = new RegExp(i.replace(".", ""), "i")), n && "MMMM" === t && this._longMonthsParse[r].test(e)) return r;
            if (n && "MMM" === t && this._shortMonthsParse[r].test(e)) return r;
            if (!n && this._monthsParse[r].test(e)) return r;
          }
        }

        function ce(e, t) {
          var n;
          if (!e.isValid()) return e;
          if ("string" == typeof t)
            if (/^\d+$/.test(t)) t = b(t);
            else if (t = e.localeData().monthsParse(t), !a(t)) return e;
          return n = Math.min(e.date(), ie(e.year(), t)), e._d["set" + (e._isUTC ? "UTC" : "") + "Month"](t, n), e;
        }

        function de(e) {
          return null != e ? (ce(this, e), t.updateOffset(this, !0), this) : F(this, "Month");
        }

        function fe() {
          return ie(this.year(), this.month());
        }

        function he(e) {
          return this._monthsParseExact ? (l(this, "_monthsRegex") || _e.call(this), e ? this._monthsShortStrictRegex : this._monthsShortRegex) : (l(this, "_monthsShortRegex") || (this._monthsShortRegex = Zr), this._monthsShortStrictRegex && e ? this._monthsShortStrictRegex : this._monthsShortRegex);
        }

        function pe(e) {
          return this._monthsParseExact ? (l(this, "_monthsRegex") || _e.call(this), e ? this._monthsStrictRegex : this._monthsRegex) : (l(this, "_monthsRegex") || (this._monthsRegex = eo), this._monthsStrictRegex && e ? this._monthsStrictRegex : this._monthsRegex);
        }

        function _e() {
          function e(e, t) {
            return t.length - e.length;
          }
          var t, n, r = [],
            o = [],
            i = [];
          for (t = 0; t < 12; t++) n = d([2e3, t]), r.push(this.monthsShort(n, "")), o.push(this.months(n, "")), i.push(this.months(n, "")), i.push(this.monthsShort(n, ""));
          for (r.sort(e), o.sort(e), i.sort(e), t = 0; t < 12; t++) r[t] = te(r[t]), o[t] = te(o[t]);
          for (t = 0; t < 24; t++) i[t] = te(i[t]);
          this._monthsRegex = new RegExp("^(" + i.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp("^(" + o.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + r.join("|") + ")", "i");
        }

        function me(e) {
          return ye(e) ? 366 : 365;
        }

        function ye(e) {
          return e % 4 == 0 && e % 100 != 0 || e % 400 == 0;
        }

        function ve() {
          return ye(this.year());
        }

        function ge(e, t, n, r, o, i, a) {
          var s = new Date(e, t, n, r, o, i, a);
          return e < 100 && e >= 0 && isFinite(s.getFullYear()) && s.setFullYear(e), s;
        }

        function Me(e) {
          var t = new Date(Date.UTC.apply(null, arguments));
          return e < 100 && e >= 0 && isFinite(t.getUTCFullYear()) && t.setUTCFullYear(e), t;
        }

        function be(e, t, n) {
          var r = 7 + t - n;
          return -(7 + Me(e, 0, r).getUTCDay() - t) % 7 + r - 1;
        }

        function we(e, t, n, r, o) {
          var i, a, s = (7 + n - r) % 7,
            u = be(e, r, o),
            l = 1 + 7 * (t - 1) + s + u;
          return l <= 0 ? (i = e - 1, a = me(i) + l) : l > me(e) ? (i = e + 1, a = l - me(e)) : (i = e, a = l), {
            year: i,
            dayOfYear: a
          };
        }

        function ke(e, t, n) {
          var r, o, i = be(e.year(), t, n),
            a = Math.floor((e.dayOfYear() - i - 1) / 7) + 1;
          return a < 1 ? (o = e.year() - 1, r = a + Le(o, t, n)) : a > Le(e.year(), t, n) ? (r = a - Le(e.year(), t, n), o = e.year() + 1) : (o = e.year(), r = a), {
            week: r,
            year: o
          };
        }

        function Le(e, t, n) {
          var r = be(e, t, n),
            o = be(e + 1, t, n);
          return (me(e) - r + o) / 7;
        }

        function Te(e) {
          return ke(e, this._week.dow, this._week.doy).week;
        }

        function Se() {
          return this._week.dow;
        }

        function Ye() {
          return this._week.doy;
        }

        function De(e) {
          var t = this.localeData().week(this);
          return null == e ? t : this.add(7 * (e - t), "d");
        }

        function xe(e) {
          var t = ke(this, 1, 4).week;
          return null == e ? t : this.add(7 * (e - t), "d");
        }

        function Ce(e, t) {
          return "string" != typeof e ? e : isNaN(e) ? (e = t.weekdaysParse(e), "number" == typeof e ? e : null) : parseInt(e, 10);
        }

        function Pe(e, t) {
          return "string" == typeof e ? t.weekdaysParse(e) % 7 || 7 : isNaN(e) ? null : e;
        }

        function Ee(e, t) {
          return e ? r(this._weekdays) ? this._weekdays[e.day()] : this._weekdays[this._weekdays.isFormat.test(t) ? "format" : "standalone"][e.day()] : this._weekdays;
        }

        function je(e) {
          return e ? this._weekdaysShort[e.day()] : this._weekdaysShort;
        }

        function Oe(e) {
          return e ? this._weekdaysMin[e.day()] : this._weekdaysMin;
        }

        function Re(e, t, n) {
          var r, o, i, a = e.toLocaleLowerCase();
          if (!this._weekdaysParse)
            for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], r = 0; r < 7; ++r) i = d([2e3, 1]).day(r), this._minWeekdaysParse[r] = this.weekdaysMin(i, "").toLocaleLowerCase(), this._shortWeekdaysParse[r] = this.weekdaysShort(i, "").toLocaleLowerCase(), this._weekdaysParse[r] = this.weekdays(i, "").toLocaleLowerCase();
          return n ? "dddd" === t ? (o = Kr.call(this._weekdaysParse, a), -1 !== o ? o : null) : "ddd" === t ? (o = Kr.call(this._shortWeekdaysParse, a), -1 !== o ? o : null) : (o = Kr.call(this._minWeekdaysParse, a), -1 !== o ? o : null) : "dddd" === t ? -1 !== (o = Kr.call(this._weekdaysParse, a)) ? o : -1 !== (o = Kr.call(this._shortWeekdaysParse, a)) ? o : (o = Kr.call(this._minWeekdaysParse, a), -1 !== o ? o : null) : "ddd" === t ? -1 !== (o = Kr.call(this._shortWeekdaysParse, a)) ? o : -1 !== (o = Kr.call(this._weekdaysParse, a)) ? o : (o = Kr.call(this._minWeekdaysParse, a), -1 !== o ? o : null) : -1 !== (o = Kr.call(this._minWeekdaysParse, a)) ? o : -1 !== (o = Kr.call(this._weekdaysParse, a)) ? o : (o = Kr.call(this._shortWeekdaysParse, a), -1 !== o ? o : null);
        }

        function Ie(e, t, n) {
          var r, o, i;
          if (this._weekdaysParseExact) return Re.call(this, e, t, n);
          for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), r = 0; r < 7; r++) {
            if (o = d([2e3, 1]).day(r), n && !this._fullWeekdaysParse[r] && (this._fullWeekdaysParse[r] = new RegExp("^" + this.weekdays(o, "").replace(".", ".?") + "$", "i"), this._shortWeekdaysParse[r] = new RegExp("^" + this.weekdaysShort(o, "").replace(".", ".?") + "$", "i"), this._minWeekdaysParse[r] = new RegExp("^" + this.weekdaysMin(o, "").replace(".", ".?") + "$", "i")), this._weekdaysParse[r] || (i = "^" + this.weekdays(o, "") + "|^" + this.weekdaysShort(o, "") + "|^" + this.weekdaysMin(o, ""), this._weekdaysParse[r] = new RegExp(i.replace(".", ""), "i")), n && "dddd" === t && this._fullWeekdaysParse[r].test(e)) return r;
            if (n && "ddd" === t && this._shortWeekdaysParse[r].test(e)) return r;
            if (n && "dd" === t && this._minWeekdaysParse[r].test(e)) return r;
            if (!n && this._weekdaysParse[r].test(e)) return r;
          }
        }

        function Ae(e) {
          if (!this.isValid()) return null != e ? this : NaN;
          var t = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
          return null != e ? (e = Ce(e, this.localeData()), this.add(e - t, "d")) : t;
        }

        function He(e) {
          if (!this.isValid()) return null != e ? this : NaN;
          var t = (this.day() + 7 - this.localeData()._week.dow) % 7;
          return null == e ? t : this.add(e - t, "d");
        }

        function Ne(e) {
          if (!this.isValid()) return null != e ? this : NaN;
          if (null != e) {
            var t = Pe(e, this.localeData());
            return this.day(this.day() % 7 ? t : t - 7);
          }
          return this.day() || 7;
        }

        function ze(e) {
          return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Ue.call(this), e ? this._weekdaysStrictRegex : this._weekdaysRegex) : (l(this, "_weekdaysRegex") || (this._weekdaysRegex = ao), this._weekdaysStrictRegex && e ? this._weekdaysStrictRegex : this._weekdaysRegex);
        }

        function We(e) {
          return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Ue.call(this), e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (l(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = so), this._weekdaysShortStrictRegex && e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
        }

        function Fe(e) {
          return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Ue.call(this), e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (l(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = uo), this._weekdaysMinStrictRegex && e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
        }

        function Ue() {
          function e(e, t) {
            return t.length - e.length;
          }
          var t, n, r, o, i, a = [],
            s = [],
            u = [],
            l = [];
          for (t = 0; t < 7; t++) n = d([2e3, 1]).day(t), r = this.weekdaysMin(n, ""), o = this.weekdaysShort(n, ""), i = this.weekdays(n, ""), a.push(r), s.push(o), u.push(i), l.push(r), l.push(o), l.push(i);
          for (a.sort(e), s.sort(e), u.sort(e), l.sort(e), t = 0; t < 7; t++) s[t] = te(s[t]), u[t] = te(u[t]), l[t] = te(l[t]);
          this._weekdaysRegex = new RegExp("^(" + l.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + u.join("|") + ")", "i"), this._weekdaysShortStrictRegex = new RegExp("^(" + s.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + a.join("|") + ")", "i");
        }

        function Ge() {
          return this.hours() % 12 || 12;
        }

        function Be() {
          return this.hours() || 24;
        }

        function Ve(e, t) {
          q(e, 0, 0, function() {
            return this.localeData().meridiem(this.hours(), this.minutes(), t);
          });
        }

        function qe(e, t) {
          return t._meridiemParse;
        }

        function Je(e) {
          return "p" === (e + "").toLowerCase().charAt(0);
        }

        function Ke(e, t, n) {
          return e > 11 ? n ? "pm" : "PM" : n ? "am" : "AM";
        }

        function $e(e) {
          return e ? e.toLowerCase().replace("_", "-") : e;
        }

        function Qe(e) {
          for (var t, n, r, o, i = 0; i < e.length;) {
            for (o = $e(e[i]).split("-"), t = o.length, n = $e(e[i + 1]), n = n ? n.split("-") : null; t > 0;) {
              if (r = Xe(o.slice(0, t).join("-"))) return r;
              if (n && n.length >= t && w(o, n, !0) >= t - 1) break;
              t--;
            }
            i++;
          }
          return null;
        }

        function Xe(t) {
          var r = null;
          if (!ho[t] && void 0 !== e && e && e.exports) try {
            r = lo._abbr, n(457)("./" + t), Ze(r);
          } catch (e) {}
          return ho[t];
        }

        function Ze(e, t) {
          var n;
          return e && (n = m(t) ? nt(e) : et(e, t)) && (lo = n), lo._abbr;
        }

        function et(e, t) {
          if (null !== t) {
            var n = fo;
            if (t.abbr = e, null != ho[e]) T("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), n = ho[e]._config;
            else if (null != t.parentLocale) {
              if (null == ho[t.parentLocale]) return po[t.parentLocale] || (po[t.parentLocale] = []), po[t.parentLocale].push({
                name: e,
                config: t
              }), null;
              n = ho[t.parentLocale]._config;
            }
            return ho[e] = new x(D(n, t)), po[e] && po[e].forEach(function(e) {
              et(e.name, e.config);
            }), Ze(e), ho[e];
          }
          return delete ho[e], null;
        }

        function tt(e, t) {
          if (null != t) {
            var n, r = fo;
            null != ho[e] && (r = ho[e]._config), t = D(r, t), n = new x(t), n.parentLocale = ho[e], ho[e] = n, Ze(e);
          } else null != ho[e] && (null != ho[e].parentLocale ? ho[e] = ho[e].parentLocale : null != ho[e] && delete ho[e]);
          return ho[e];
        }

        function nt(e) {
          var t;
          if (e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e) return lo;
          if (!r(e)) {
            if (t = Xe(e)) return t;
            e = [e];
          }
          return Qe(e);
        }

        function rt() {
          return Lr(ho);
        }

        function ot(e) {
          var t, n = e._a;
          return n && -2 === h(e).overflow && (t = n[Wr] < 0 || n[Wr] > 11 ? Wr : n[Fr] < 1 || n[Fr] > ie(n[zr], n[Wr]) ? Fr : n[Ur] < 0 || n[Ur] > 24 || 24 === n[Ur] && (0 !== n[Gr] || 0 !== n[Br] || 0 !== n[Vr]) ? Ur : n[Gr] < 0 || n[Gr] > 59 ? Gr : n[Br] < 0 || n[Br] > 59 ? Br : n[Vr] < 0 || n[Vr] > 999 ? Vr : -1, h(e)._overflowDayOfYear && (t < zr || t > Fr) && (t = Fr), h(e)._overflowWeeks && -1 === t && (t = qr), h(e)._overflowWeekday && -1 === t && (t = Jr), h(e).overflow = t), e;
        }

        function it(e) {
          var t, n, r, o, i, a, s = e._i,
            u = _o.exec(s) || mo.exec(s);
          if (u) {
            for (h(e).iso = !0, t = 0, n = vo.length; t < n; t++)
              if (vo[t][1].exec(u[1])) {
                o = vo[t][0], r = !1 !== vo[t][2];
                break;
              }
            if (null == o) return void(e._isValid = !1);
            if (u[3]) {
              for (t = 0, n = go.length; t < n; t++)
                if (go[t][1].exec(u[3])) {
                  i = (u[2] || " ") + go[t][0];
                  break;
                }
              if (null == i) return void(e._isValid = !1);
            }
            if (!r && null != i) return void(e._isValid = !1);
            if (u[4]) {
              if (!yo.exec(u[4])) return void(e._isValid = !1);
              a = "Z";
            }
            e._f = o + (i || "") + (a || ""), dt(e);
          } else e._isValid = !1;
        }

        function at(e) {
          var n = Mo.exec(e._i);
          if (null !== n) return void(e._d = new Date(+n[1]));
          it(e), !1 === e._isValid && (delete e._isValid, t.createFromInputFallback(e));
        }

        function st(e, t, n) {
          return null != e ? e : null != t ? t : n;
        }

        function ut(e) {
          var n = new Date(t.now());
          return e._useUTC ? [n.getUTCFullYear(), n.getUTCMonth(), n.getUTCDate()] : [n.getFullYear(), n.getMonth(), n.getDate()];
        }

        function lt(e) {
          var t, n, r, o, i = [];
          if (!e._d) {
            for (r = ut(e), e._w && null == e._a[Fr] && null == e._a[Wr] && ct(e), e._dayOfYear && (o = st(e._a[zr], r[zr]), e._dayOfYear > me(o) && (h(e)._overflowDayOfYear = !0), n = Me(o, 0, e._dayOfYear), e._a[Wr] = n.getUTCMonth(), e._a[Fr] = n.getUTCDate()), t = 0; t < 3 && null == e._a[t]; ++t) e._a[t] = i[t] = r[t];
            for (; t < 7; t++) e._a[t] = i[t] = null == e._a[t] ? 2 === t ? 1 : 0 : e._a[t];
            24 === e._a[Ur] && 0 === e._a[Gr] && 0 === e._a[Br] && 0 === e._a[Vr] && (e._nextDay = !0, e._a[Ur] = 0), e._d = (e._useUTC ? Me : ge).apply(null, i), null != e._tzm && e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), e._nextDay && (e._a[Ur] = 24);
          }
        }

        function ct(e) {
          var t, n, r, o, i, a, s, u;
          if (t = e._w, null != t.GG || null != t.W || null != t.E) i = 1, a = 4, n = st(t.GG, e._a[zr], ke(gt(), 1, 4).year), r = st(t.W, 1), ((o = st(t.E, 1)) < 1 || o > 7) && (u = !0);
          else {
            i = e._locale._week.dow, a = e._locale._week.doy;
            var l = ke(gt(), i, a);
            n = st(t.gg, e._a[zr], l.year), r = st(t.w, l.week), null != t.d ? ((o = t.d) < 0 || o > 6) && (u = !0) : null != t.e ? (o = t.e + i, (t.e < 0 || t.e > 6) && (u = !0)) : o = i;
          }
          r < 1 || r > Le(n, i, a) ? h(e)._overflowWeeks = !0 : null != u ? h(e)._overflowWeekday = !0 : (s = we(n, r, o, i, a), e._a[zr] = s.year, e._dayOfYear = s.dayOfYear);
        }

        function dt(e) {
          if (e._f === t.ISO_8601) return void it(e);
          e._a = [], h(e).empty = !0;
          var n, r, o, i, a, s = "" + e._i,
            u = s.length,
            l = 0;
          for (o = Q(e._f, e._locale).match(Cr) || [], n = 0; n < o.length; n++) i = o[n], r = (s.match(Z(i, e)) || [])[0], r && (a = s.substr(0, s.indexOf(r)), a.length > 0 && h(e).unusedInput.push(a), s = s.slice(s.indexOf(r) + r.length), l += r.length), jr[i] ? (r ? h(e).empty = !1 : h(e).unusedTokens.push(i), oe(i, r, e)) : e._strict && !r && h(e).unusedTokens.push(i);
          h(e).charsLeftOver = u - l, s.length > 0 && h(e).unusedInput.push(s), e._a[Ur] <= 12 && !0 === h(e).bigHour && e._a[Ur] > 0 && (h(e).bigHour = void 0), h(e).parsedDateParts = e._a.slice(0), h(e).meridiem = e._meridiem, e._a[Ur] = ft(e._locale, e._a[Ur], e._meridiem), lt(e), ot(e);
        }

        function ft(e, t, n) {
          var r;
          return null == n ? t : null != e.meridiemHour ? e.meridiemHour(t, n) : null != e.isPM ? (r = e.isPM(n), r && t < 12 && (t += 12), r || 12 !== t || (t = 0), t) : t;
        }

        function ht(e) {
          var t, n, r, o, i;
          if (0 === e._f.length) return h(e).invalidFormat = !0, void(e._d = new Date(NaN));
          for (o = 0; o < e._f.length; o++) i = 0, t = y({}, e), null != e._useUTC && (t._useUTC = e._useUTC), t._f = e._f[o], dt(t), p(t) && (i += h(t).charsLeftOver, i += 10 * h(t).unusedTokens.length, h(t).score = i, (null == r || i < r) && (r = i, n = t));
          c(e, n || t);
        }

        function pt(e) {
          if (!e._d) {
            var t = H(e._i);
            e._a = u([t.year, t.month, t.day || t.date, t.hour, t.minute, t.second, t.millisecond], function(e) {
              return e && parseInt(e, 10);
            }), lt(e);
          }
        }

        function _t(e) {
          var t = new v(ot(mt(e)));
          return t._nextDay && (t.add(1, "d"), t._nextDay = void 0), t;
        }

        function mt(e) {
          var t = e._i,
            n = e._f;
          return e._locale = e._locale || nt(e._l), null === t || void 0 === n && "" === t ? _({
            nullInput: !0
          }) : ("string" == typeof t && (e._i = t = e._locale.preparse(t)), g(t) ? new v(ot(t)) : (s(t) ? e._d = t : r(n) ? ht(e) : n ? dt(e) : yt(e), p(e) || (e._d = null), e));
        }

        function yt(e) {
          var n = e._i;
          void 0 === n ? e._d = new Date(t.now()) : s(n) ? e._d = new Date(n.valueOf()) : "string" == typeof n ? at(e) : r(n) ? (e._a = u(n.slice(0), function(e) {
            return parseInt(e, 10);
          }), lt(e)) : "object" == typeof n ? pt(e) : a(n) ? e._d = new Date(n) : t.createFromInputFallback(e);
        }

        function vt(e, t, n, a, s) {
          var u = {};
          return !0 !== n && !1 !== n || (a = n, n = void 0), (o(e) && i(e) || r(e) && 0 === e.length) && (e = void 0), u._isAMomentObject = !0, u._useUTC = u._isUTC = s, u._l = n, u._i = e, u._f = t, u._strict = a, _t(u);
        }

        function gt(e, t, n, r) {
          return vt(e, t, n, r, !1);
        }

        function Mt(e, t) {
          var n, o;
          if (1 === t.length && r(t[0]) && (t = t[0]), !t.length) return gt();
          for (n = t[0], o = 1; o < t.length; ++o) t[o].isValid() && !t[o][e](n) || (n = t[o]);
          return n;
        }

        function bt() {
          return Mt("isBefore", [].slice.call(arguments, 0));
        }

        function wt() {
          return Mt("isAfter", [].slice.call(arguments, 0));
        }

        function kt(e) {
          var t = H(e),
            n = t.year || 0,
            r = t.quarter || 0,
            o = t.month || 0,
            i = t.week || 0,
            a = t.day || 0,
            s = t.hour || 0,
            u = t.minute || 0,
            l = t.second || 0,
            c = t.millisecond || 0;
          this._milliseconds = +c + 1e3 * l + 6e4 * u + 1e3 * s * 60 * 60, this._days = +a + 7 * i, this._months = +o + 3 * r + 12 * n, this._data = {}, this._locale = nt(), this._bubble();
        }

        function Lt(e) {
          return e instanceof kt;
        }

        function Tt(e) {
          return e < 0 ? -1 * Math.round(-1 * e) : Math.round(e);
        }

        function St(e, t) {
          q(e, 0, 0, function() {
            var e = this.utcOffset(),
              n = "+";
            return e < 0 && (e = -e, n = "-"), n + V(~~(e / 60), 2) + t + V(~~e % 60, 2);
          });
        }

        function Yt(e, t) {
          var n = (t || "").match(e);
          if (null === n) return null;
          var r = n[n.length - 1] || [],
            o = (r + "").match(Lo) || ["-", 0, 0],
            i = 60 * o[1] + b(o[2]);
          return 0 === i ? 0 : "+" === o[0] ? i : -i;
        }

        function Dt(e, n) {
          var r, o;
          return n._isUTC ? (r = n.clone(), o = (g(e) || s(e) ? e.valueOf() : gt(e).valueOf()) - r.valueOf(), r._d.setTime(r._d.valueOf() + o), t.updateOffset(r, !1), r) : gt(e).local();
        }

        function xt(e) {
          return 15 * -Math.round(e._d.getTimezoneOffset() / 15);
        }

        function Ct(e, n) {
          var r, o = this._offset || 0;
          if (!this.isValid()) return null != e ? this : NaN;
          if (null != e) {
            if ("string" == typeof e) {
              if (null === (e = Yt(Ir, e))) return this;
            } else Math.abs(e) < 16 && (e *= 60);
            return !this._isUTC && n && (r = xt(this)), this._offset = e, this._isUTC = !0, null != r && this.add(r, "m"), o !== e && (!n || this._changeInProgress ? Vt(this, Wt(e - o, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, t.updateOffset(this, !0), this._changeInProgress = null)), this;
          }
          return this._isUTC ? o : xt(this);
        }

        function Pt(e, t) {
          return null != e ? ("string" != typeof e && (e = -e), this.utcOffset(e, t), this) : -this.utcOffset();
        }

        function Et(e) {
          return this.utcOffset(0, e);
        }

        function jt(e) {
          return this._isUTC && (this.utcOffset(0, e), this._isUTC = !1, e && this.subtract(xt(this), "m")), this;
        }

        function Ot() {
          if (null != this._tzm) this.utcOffset(this._tzm);
          else if ("string" == typeof this._i) {
            var e = Yt(Rr, this._i);
            null != e ? this.utcOffset(e) : this.utcOffset(0, !0);
          }
          return this;
        }

        function Rt(e) {
          return !!this.isValid() && (e = e ? gt(e).utcOffset() : 0, (this.utcOffset() - e) % 60 == 0);
        }

        function It() {
          return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
        }

        function At() {
          if (!m(this._isDSTShifted)) return this._isDSTShifted;
          var e = {};
          if (y(e, this), e = mt(e), e._a) {
            var t = e._isUTC ? d(e._a) : gt(e._a);
            this._isDSTShifted = this.isValid() && w(e._a, t.toArray()) > 0;
          } else this._isDSTShifted = !1;
          return this._isDSTShifted;
        }

        function Ht() {
          return !!this.isValid() && !this._isUTC;
        }

        function Nt() {
          return !!this.isValid() && this._isUTC;
        }

        function zt() {
          return !!this.isValid() && this._isUTC && 0 === this._offset;
        }

        function Wt(e, t) {
          var n, r, o, i = e,
            s = null;
          return Lt(e) ? i = {
              ms: e._milliseconds,
              d: e._days,
              M: e._months
            } : a(e) ? (i = {}, t ? i[t] = e : i.milliseconds = e) : (s = To.exec(e)) ? (n = "-" === s[1] ? -1 : 1, i = {
              y: 0,
              d: b(s[Fr]) * n,
              h: b(s[Ur]) * n,
              m: b(s[Gr]) * n,
              s: b(s[Br]) * n,
              ms: b(Tt(1e3 * s[Vr])) * n
            }) : (s = So.exec(e)) ? (n = "-" === s[1] ? -1 : 1, i = {
              y: Ft(s[2], n),
              M: Ft(s[3], n),
              w: Ft(s[4], n),
              d: Ft(s[5], n),
              h: Ft(s[6], n),
              m: Ft(s[7], n),
              s: Ft(s[8], n)
            }) : null == i ? i = {} : "object" == typeof i && ("from" in i || "to" in i) && (o = Gt(gt(i.from), gt(i.to)), i = {}, i.ms = o.milliseconds, i.M = o.months), r = new kt(i), Lt(e) && l(e, "_locale") && (r._locale = e._locale),
            r;
        }

        function Ft(e, t) {
          var n = e && parseFloat(e.replace(",", "."));
          return (isNaN(n) ? 0 : n) * t;
        }

        function Ut(e, t) {
          var n = {
            milliseconds: 0,
            months: 0
          };
          return n.months = t.month() - e.month() + 12 * (t.year() - e.year()), e.clone().add(n.months, "M").isAfter(t) && --n.months, n.milliseconds = +t - +e.clone().add(n.months, "M"), n;
        }

        function Gt(e, t) {
          var n;
          return e.isValid() && t.isValid() ? (t = Dt(t, e), e.isBefore(t) ? n = Ut(e, t) : (n = Ut(t, e), n.milliseconds = -n.milliseconds, n.months = -n.months), n) : {
            milliseconds: 0,
            months: 0
          };
        }

        function Bt(e, t) {
          return function(n, r) {
            var o, i;
            return null === r || isNaN(+r) || (T(t, "moment()." + t + "(period, number) is deprecated. Please use moment()." + t + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), i = n, n = r, r = i), n = "string" == typeof n ? +n : n, o = Wt(n, r), Vt(this, o, e), this;
          };
        }

        function Vt(e, n, r, o) {
          var i = n._milliseconds,
            a = Tt(n._days),
            s = Tt(n._months);
          e.isValid() && (o = null == o || o, i && e._d.setTime(e._d.valueOf() + i * r), a && U(e, "Date", F(e, "Date") + a * r), s && ce(e, F(e, "Month") + s * r), o && t.updateOffset(e, a || s));
        }

        function qt(e, t) {
          var n = e.diff(t, "days", !0);
          return n < -6 ? "sameElse" : n < -1 ? "lastWeek" : n < 0 ? "lastDay" : n < 1 ? "sameDay" : n < 2 ? "nextDay" : n < 7 ? "nextWeek" : "sameElse";
        }

        function Jt(e, n) {
          var r = e || gt(),
            o = Dt(r, this).startOf("day"),
            i = t.calendarFormat(this, o) || "sameElse",
            a = n && (S(n[i]) ? n[i].call(this, r) : n[i]);
          return this.format(a || this.localeData().calendar(i, this, gt(r)));
        }

        function Kt() {
          return new v(this);
        }

        function $t(e, t) {
          var n = g(e) ? e : gt(e);
          return !(!this.isValid() || !n.isValid()) && (t = A(m(t) ? "millisecond" : t), "millisecond" === t ? this.valueOf() > n.valueOf() : n.valueOf() < this.clone().startOf(t).valueOf());
        }

        function Qt(e, t) {
          var n = g(e) ? e : gt(e);
          return !(!this.isValid() || !n.isValid()) && (t = A(m(t) ? "millisecond" : t), "millisecond" === t ? this.valueOf() < n.valueOf() : this.clone().endOf(t).valueOf() < n.valueOf());
        }

        function Xt(e, t, n, r) {
          return r = r || "()", ("(" === r[0] ? this.isAfter(e, n) : !this.isBefore(e, n)) && (")" === r[1] ? this.isBefore(t, n) : !this.isAfter(t, n));
        }

        function Zt(e, t) {
          var n, r = g(e) ? e : gt(e);
          return !(!this.isValid() || !r.isValid()) && (t = A(t || "millisecond"), "millisecond" === t ? this.valueOf() === r.valueOf() : (n = r.valueOf(), this.clone().startOf(t).valueOf() <= n && n <= this.clone().endOf(t).valueOf()));
        }

        function en(e, t) {
          return this.isSame(e, t) || this.isAfter(e, t);
        }

        function tn(e, t) {
          return this.isSame(e, t) || this.isBefore(e, t);
        }

        function nn(e, t, n) {
          var r, o, i, a;
          return this.isValid() ? (r = Dt(e, this), r.isValid() ? (o = 6e4 * (r.utcOffset() - this.utcOffset()), t = A(t), "year" === t || "month" === t || "quarter" === t ? (a = rn(this, r), "quarter" === t ? a /= 3 : "year" === t && (a /= 12)) : (i = this - r, a = "second" === t ? i / 1e3 : "minute" === t ? i / 6e4 : "hour" === t ? i / 36e5 : "day" === t ? (i - o) / 864e5 : "week" === t ? (i - o) / 6048e5 : i), n ? a : M(a)) : NaN) : NaN;
        }

        function rn(e, t) {
          var n, r, o = 12 * (t.year() - e.year()) + (t.month() - e.month()),
            i = e.clone().add(o, "months");
          return t - i < 0 ? (n = e.clone().add(o - 1, "months"), r = (t - i) / (i - n)) : (n = e.clone().add(o + 1, "months"), r = (t - i) / (n - i)), -(o + r) || 0;
        }

        function on() {
          return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        }

        function an() {
          var e = this.clone().utc();
          return 0 < e.year() && e.year() <= 9999 ? S(Date.prototype.toISOString) ? this.toDate().toISOString() : $(e, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]") : $(e, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
        }

        function sn() {
          if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
          var e = "moment",
            t = "";
          this.isLocal() || (e = 0 === this.utcOffset() ? "moment.utc" : "moment.parseZone", t = "Z");
          var n = "[" + e + '("]',
            r = 0 < this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY",
            o = t + '[")]';
          return this.format(n + r + "-MM-DD[T]HH:mm:ss.SSS" + o);
        }

        function un(e) {
          e || (e = this.isUtc() ? t.defaultFormatUtc : t.defaultFormat);
          var n = $(this, e);
          return this.localeData().postformat(n);
        }

        function ln(e, t) {
          return this.isValid() && (g(e) && e.isValid() || gt(e).isValid()) ? Wt({
            to: this,
            from: e
          }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate();
        }

        function cn(e) {
          return this.from(gt(), e);
        }

        function dn(e, t) {
          return this.isValid() && (g(e) && e.isValid() || gt(e).isValid()) ? Wt({
            from: this,
            to: e
          }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate();
        }

        function fn(e) {
          return this.to(gt(), e);
        }

        function hn(e) {
          var t;
          return void 0 === e ? this._locale._abbr : (t = nt(e), null != t && (this._locale = t), this);
        }

        function pn() {
          return this._locale;
        }

        function _n(e) {
          switch (e = A(e)) {
            case "year":
              this.month(0);
            case "quarter":
            case "month":
              this.date(1);
            case "week":
            case "isoWeek":
            case "day":
            case "date":
              this.hours(0);
            case "hour":
              this.minutes(0);
            case "minute":
              this.seconds(0);
            case "second":
              this.milliseconds(0);
          }
          return "week" === e && this.weekday(0), "isoWeek" === e && this.isoWeekday(1), "quarter" === e && this.month(3 * Math.floor(this.month() / 3)), this;
        }

        function mn(e) {
          return void 0 === (e = A(e)) || "millisecond" === e ? this : ("date" === e && (e = "day"), this.startOf(e).add(1, "isoWeek" === e ? "week" : e).subtract(1, "ms"));
        }

        function yn() {
          return this._d.valueOf() - 6e4 * (this._offset || 0);
        }

        function vn() {
          return Math.floor(this.valueOf() / 1e3);
        }

        function gn() {
          return new Date(this.valueOf());
        }

        function Mn() {
          var e = this;
          return [e.year(), e.month(), e.date(), e.hour(), e.minute(), e.second(), e.millisecond()];
        }

        function bn() {
          var e = this;
          return {
            years: e.year(),
            months: e.month(),
            date: e.date(),
            hours: e.hours(),
            minutes: e.minutes(),
            seconds: e.seconds(),
            milliseconds: e.milliseconds()
          };
        }

        function wn() {
          return this.isValid() ? this.toISOString() : null;
        }

        function kn() {
          return p(this);
        }

        function Ln() {
          return c({}, h(this));
        }

        function Tn() {
          return h(this).overflow;
        }

        function Sn() {
          return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
          };
        }

        function Yn(e, t) {
          q(0, [e, e.length], 0, t);
        }

        function Dn(e) {
          return En.call(this, e, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
        }

        function xn(e) {
          return En.call(this, e, this.isoWeek(), this.isoWeekday(), 1, 4);
        }

        function Cn() {
          return Le(this.year(), 1, 4);
        }

        function Pn() {
          var e = this.localeData()._week;
          return Le(this.year(), e.dow, e.doy);
        }

        function En(e, t, n, r, o) {
          var i;
          return null == e ? ke(this, r, o).year : (i = Le(e, r, o), t > i && (t = i), jn.call(this, e, t, n, r, o));
        }

        function jn(e, t, n, r, o) {
          var i = we(e, t, n, r, o),
            a = Me(i.year, 0, i.dayOfYear);
          return this.year(a.getUTCFullYear()), this.month(a.getUTCMonth()), this.date(a.getUTCDate()), this;
        }

        function On(e) {
          return null == e ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (e - 1) + this.month() % 3);
        }

        function Rn(e) {
          var t = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
          return null == e ? t : this.add(e - t, "d");
        }

        function In(e, t) {
          t[Vr] = b(1e3 * ("0." + e));
        }

        function An() {
          return this._isUTC ? "UTC" : "";
        }

        function Hn() {
          return this._isUTC ? "Coordinated Universal Time" : "";
        }

        function Nn(e) {
          return gt(1e3 * e);
        }

        function zn() {
          return gt.apply(null, arguments).parseZone();
        }

        function Wn(e) {
          return e;
        }

        function Fn(e, t, n, r) {
          var o = nt(),
            i = d().set(r, t);
          return o[n](i, e);
        }

        function Un(e, t, n) {
          if (a(e) && (t = e, e = void 0), e = e || "", null != t) return Fn(e, t, n, "month");
          var r, o = [];
          for (r = 0; r < 12; r++) o[r] = Fn(e, r, n, "month");
          return o;
        }

        function Gn(e, t, n, r) {
          "boolean" == typeof e ? (a(t) && (n = t, t = void 0), t = t || "") : (t = e, n = t, e = !1, a(t) && (n = t, t = void 0), t = t || "");
          var o = nt(),
            i = e ? o._week.dow : 0;
          if (null != n) return Fn(t, (n + i) % 7, r, "day");
          var s, u = [];
          for (s = 0; s < 7; s++) u[s] = Fn(t, (s + i) % 7, r, "day");
          return u;
        }

        function Bn(e, t) {
          return Un(e, t, "months");
        }

        function Vn(e, t) {
          return Un(e, t, "monthsShort");
        }

        function qn(e, t, n) {
          return Gn(e, t, n, "weekdays");
        }

        function Jn(e, t, n) {
          return Gn(e, t, n, "weekdaysShort");
        }

        function Kn(e, t, n) {
          return Gn(e, t, n, "weekdaysMin");
        }

        function $n() {
          var e = this._data;
          return this._milliseconds = Ao(this._milliseconds), this._days = Ao(this._days), this._months = Ao(this._months), e.milliseconds = Ao(e.milliseconds), e.seconds = Ao(e.seconds), e.minutes = Ao(e.minutes), e.hours = Ao(e.hours), e.months = Ao(e.months), e.years = Ao(e.years), this;
        }

        function Qn(e, t, n, r) {
          var o = Wt(t, n);
          return e._milliseconds += r * o._milliseconds, e._days += r * o._days, e._months += r * o._months, e._bubble();
        }

        function Xn(e, t) {
          return Qn(this, e, t, 1);
        }

        function Zn(e, t) {
          return Qn(this, e, t, -1);
        }

        function er(e) {
          return e < 0 ? Math.floor(e) : Math.ceil(e);
        }

        function tr() {
          var e, t, n, r, o, i = this._milliseconds,
            a = this._days,
            s = this._months,
            u = this._data;
          return i >= 0 && a >= 0 && s >= 0 || i <= 0 && a <= 0 && s <= 0 || (i += 864e5 * er(rr(s) + a), a = 0, s = 0), u.milliseconds = i % 1e3, e = M(i / 1e3), u.seconds = e % 60, t = M(e / 60), u.minutes = t % 60, n = M(t / 60), u.hours = n % 24, a += M(n / 24), o = M(nr(a)), s += o, a -= er(rr(o)), r = M(s / 12), s %= 12, u.days = a, u.months = s, u.years = r, this;
        }

        function nr(e) {
          return 4800 * e / 146097;
        }

        function rr(e) {
          return 146097 * e / 4800;
        }

        function or(e) {
          var t, n, r = this._milliseconds;
          if ("month" === (e = A(e)) || "year" === e) return t = this._days + r / 864e5, n = this._months + nr(t), "month" === e ? n : n / 12;
          switch (t = this._days + Math.round(rr(this._months)), e) {
            case "week":
              return t / 7 + r / 6048e5;
            case "day":
              return t + r / 864e5;
            case "hour":
              return 24 * t + r / 36e5;
            case "minute":
              return 1440 * t + r / 6e4;
            case "second":
              return 86400 * t + r / 1e3;
            case "millisecond":
              return Math.floor(864e5 * t) + r;
            default:
              throw new Error("Unknown unit " + e);
          }
        }

        function ir() {
          return this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * b(this._months / 12);
        }

        function ar(e) {
          return function() {
            return this.as(e);
          };
        }

        function sr(e) {
          return e = A(e), this[e + "s"]();
        }

        function ur(e) {
          return function() {
            return this._data[e];
          };
        }

        function lr() {
          return M(this.days() / 7);
        }

        function cr(e, t, n, r, o) {
          return o.relativeTime(t || 1, !!n, e, r);
        }

        function dr(e, t, n) {
          var r = Wt(e).abs(),
            o = Zo(r.as("s")),
            i = Zo(r.as("m")),
            a = Zo(r.as("h")),
            s = Zo(r.as("d")),
            u = Zo(r.as("M")),
            l = Zo(r.as("y")),
            c = o < ei.s && ["s", o] || i <= 1 && ["m"] || i < ei.m && ["mm", i] || a <= 1 && ["h"] || a < ei.h && ["hh", a] || s <= 1 && ["d"] || s < ei.d && ["dd", s] || u <= 1 && ["M"] || u < ei.M && ["MM", u] || l <= 1 && ["y"] || ["yy", l];
          return c[2] = t, c[3] = +e > 0, c[4] = n, cr.apply(null, c);
        }

        function fr(e) {
          return void 0 === e ? Zo : "function" == typeof e && (Zo = e, !0);
        }

        function hr(e, t) {
          return void 0 !== ei[e] && (void 0 === t ? ei[e] : (ei[e] = t, !0));
        }

        function pr(e) {
          var t = this.localeData(),
            n = dr(this, !e, t);
          return e && (n = t.pastFuture(+this, n)), t.postformat(n);
        }

        function _r() {
          var e, t, n, r = ti(this._milliseconds) / 1e3,
            o = ti(this._days),
            i = ti(this._months);
          e = M(r / 60), t = M(e / 60), r %= 60, e %= 60, n = M(i / 12), i %= 12;
          var a = n,
            s = i,
            u = o,
            l = t,
            c = e,
            d = r,
            f = this.asSeconds();
          return f ? (f < 0 ? "-" : "") + "P" + (a ? a + "Y" : "") + (s ? s + "M" : "") + (u ? u + "D" : "") + (l || c || d ? "T" : "") + (l ? l + "H" : "") + (c ? c + "M" : "") + (d ? d + "S" : "") : "P0D";
        }
        var mr, yr;
        yr = Array.prototype.some ? Array.prototype.some : function(e) {
          for (var t = Object(this), n = t.length >>> 0, r = 0; r < n; r++)
            if (r in t && e.call(this, t[r], r, t)) return !0;
          return !1;
        };
        var vr = yr,
          gr = t.momentProperties = [],
          Mr = !1,
          br = {};
        t.suppressDeprecationWarnings = !1, t.deprecationHandler = null;
        var wr;
        wr = Object.keys ? Object.keys : function(e) {
          var t, n = [];
          for (t in e) l(e, t) && n.push(t);
          return n;
        };
        var kr, Lr = wr,
          Tr = {
            sameDay: "[Today at] LT",
            nextDay: "[Tomorrow at] LT",
            nextWeek: "dddd [at] LT",
            lastDay: "[Yesterday at] LT",
            lastWeek: "[Last] dddd [at] LT",
            sameElse: "L"
          },
          Sr = {
            LTS: "h:mm:ss A",
            LT: "h:mm A",
            L: "MM/DD/YYYY",
            LL: "MMMM D, YYYY",
            LLL: "MMMM D, YYYY h:mm A",
            LLLL: "dddd, MMMM D, YYYY h:mm A"
          },
          Yr = {
            future: "in %s",
            past: "%s ago",
            s: "a few seconds",
            m: "a minute",
            mm: "%d minutes",
            h: "an hour",
            hh: "%d hours",
            d: "a day",
            dd: "%d days",
            M: "a month",
            MM: "%d months",
            y: "a year",
            yy: "%d years"
          },
          Dr = {},
          xr = {},
          Cr = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
          Pr = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
          Er = {},
          jr = {},
          Or = /[+-]?\d{6}/,
          Rr = /Z|[+-]\d\d:?\d\d/gi,
          Ir = /Z|[+-]\d\d(?::?\d\d)?/gi,
          Ar = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,
          Hr = {},
          Nr = {},
          zr = 0,
          Wr = 1,
          Fr = 2,
          Ur = 3,
          Gr = 4,
          Br = 5,
          Vr = 6,
          qr = 7,
          Jr = 8;
        kr = Array.prototype.indexOf ? Array.prototype.indexOf : function(e) {
          var t;
          for (t = 0; t < this.length; ++t)
            if (this[t] === e) return t;
          return -1;
        };
        var Kr = kr;
        q("M", ["MM", 2], "Mo", function() {
          return this.month() + 1;
        }), q("MMM", 0, 0, function(e) {
          return this.localeData().monthsShort(this, e);
        }), q("MMMM", 0, 0, function(e) {
          return this.localeData().months(this, e);
        }), I("month", "M"), N("month", 8), X("M", /\d\d?/), X("MM", /\d\d?/, /\d\d/), X("MMM", function(e, t) {
          return t.monthsShortRegex(e);
        }), X("MMMM", function(e, t) {
          return t.monthsRegex(e);
        }), ne(["M", "MM"], function(e, t) {
          t[Wr] = b(e) - 1;
        }), ne(["MMM", "MMMM"], function(e, t, n, r) {
          var o = n._locale.monthsParse(e, r, n._strict);
          null != o ? t[Wr] = o : h(n).invalidMonth = e;
        });
        var $r = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
          Qr = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
          Xr = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
          Zr = Ar,
          eo = Ar;
        q("Y", 0, 0, function() {
          var e = this.year();
          return e <= 9999 ? "" + e : "+" + e;
        }), q(0, ["YY", 2], 0, function() {
          return this.year() % 100;
        }), q(0, ["YYYY", 4], 0, "year"), q(0, ["YYYYY", 5], 0, "year"), q(0, ["YYYYYY", 6, !0], 0, "year"), I("year", "y"), N("year", 1), X("Y", /[+-]?\d+/), X("YY", /\d\d?/, /\d\d/), X("YYYY", /\d{1,4}/, /\d{4}/), X("YYYYY", /[+-]?\d{1,6}/, Or), X("YYYYYY", /[+-]?\d{1,6}/, Or), ne(["YYYYY", "YYYYYY"], zr), ne("YYYY", function(e, n) {
          n[zr] = 2 === e.length ? t.parseTwoDigitYear(e) : b(e);
        }), ne("YY", function(e, n) {
          n[zr] = t.parseTwoDigitYear(e);
        }), ne("Y", function(e, t) {
          t[zr] = parseInt(e, 10);
        }), t.parseTwoDigitYear = function(e) {
          return b(e) + (b(e) > 68 ? 1900 : 2e3);
        };
        var to = W("FullYear", !0);
        q("w", ["ww", 2], "wo", "week"), q("W", ["WW", 2], "Wo", "isoWeek"), I("week", "w"), I("isoWeek", "W"), N("week", 5), N("isoWeek", 5), X("w", /\d\d?/), X("ww", /\d\d?/, /\d\d/), X("W", /\d\d?/), X("WW", /\d\d?/, /\d\d/), re(["w", "ww", "W", "WW"], function(e, t, n, r) {
          t[r.substr(0, 1)] = b(e);
        });
        var no = {
          dow: 0,
          doy: 6
        };
        q("d", 0, "do", "day"), q("dd", 0, 0, function(e) {
          return this.localeData().weekdaysMin(this, e);
        }), q("ddd", 0, 0, function(e) {
          return this.localeData().weekdaysShort(this, e);
        }), q("dddd", 0, 0, function(e) {
          return this.localeData().weekdays(this, e);
        }), q("e", 0, 0, "weekday"), q("E", 0, 0, "isoWeekday"), I("day", "d"), I("weekday", "e"), I("isoWeekday", "E"), N("day", 11), N("weekday", 11), N("isoWeekday", 11), X("d", /\d\d?/), X("e", /\d\d?/), X("E", /\d\d?/), X("dd", function(e, t) {
          return t.weekdaysMinRegex(e);
        }), X("ddd", function(e, t) {
          return t.weekdaysShortRegex(e);
        }), X("dddd", function(e, t) {
          return t.weekdaysRegex(e);
        }), re(["dd", "ddd", "dddd"], function(e, t, n, r) {
          var o = n._locale.weekdaysParse(e, r, n._strict);
          null != o ? t.d = o : h(n).invalidWeekday = e;
        }), re(["d", "e", "E"], function(e, t, n, r) {
          t[r] = b(e);
        });
        var ro = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
          oo = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
          io = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
          ao = Ar,
          so = Ar,
          uo = Ar;
        q("H", ["HH", 2], 0, "hour"), q("h", ["hh", 2], 0, Ge), q("k", ["kk", 2], 0, Be), q("hmm", 0, 0, function() {
          return "" + Ge.apply(this) + V(this.minutes(), 2);
        }), q("hmmss", 0, 0, function() {
          return "" + Ge.apply(this) + V(this.minutes(), 2) + V(this.seconds(), 2);
        }), q("Hmm", 0, 0, function() {
          return "" + this.hours() + V(this.minutes(), 2);
        }), q("Hmmss", 0, 0, function() {
          return "" + this.hours() + V(this.minutes(), 2) + V(this.seconds(), 2);
        }), Ve("a", !0), Ve("A", !1), I("hour", "h"), N("hour", 13), X("a", qe), X("A", qe), X("H", /\d\d?/), X("h", /\d\d?/), X("HH", /\d\d?/, /\d\d/), X("hh", /\d\d?/, /\d\d/), X("hmm", /\d\d\d\d?/), X("hmmss", /\d\d\d\d\d\d?/), X("Hmm", /\d\d\d\d?/), X("Hmmss", /\d\d\d\d\d\d?/), ne(["H", "HH"], Ur), ne(["a", "A"], function(e, t, n) {
          n._isPm = n._locale.isPM(e), n._meridiem = e;
        }), ne(["h", "hh"], function(e, t, n) {
          t[Ur] = b(e), h(n).bigHour = !0;
        }), ne("hmm", function(e, t, n) {
          var r = e.length - 2;
          t[Ur] = b(e.substr(0, r)), t[Gr] = b(e.substr(r)), h(n).bigHour = !0;
        }), ne("hmmss", function(e, t, n) {
          var r = e.length - 4,
            o = e.length - 2;
          t[Ur] = b(e.substr(0, r)), t[Gr] = b(e.substr(r, 2)), t[Br] = b(e.substr(o)), h(n).bigHour = !0;
        }), ne("Hmm", function(e, t, n) {
          var r = e.length - 2;
          t[Ur] = b(e.substr(0, r)), t[Gr] = b(e.substr(r));
        }), ne("Hmmss", function(e, t, n) {
          var r = e.length - 4,
            o = e.length - 2;
          t[Ur] = b(e.substr(0, r)), t[Gr] = b(e.substr(r, 2)), t[Br] = b(e.substr(o));
        });
        var lo, co = W("Hours", !0),
          fo = {
            calendar: Tr,
            longDateFormat: Sr,
            invalidDate: "Invalid date",
            ordinal: "%d",
            ordinalParse: /\d{1,2}/,
            relativeTime: Yr,
            months: Qr,
            monthsShort: Xr,
            week: no,
            weekdays: ro,
            weekdaysMin: io,
            weekdaysShort: oo,
            meridiemParse: /[ap]\.?m?\.?/i
          },
          ho = {},
          po = {},
          _o = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
          mo = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
          yo = /Z|[+-]\d\d(?::?\d\d)?/,
          vo = [
            ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
            ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
            ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
            ["GGGG-[W]WW", /\d{4}-W\d\d/, !1],
            ["YYYY-DDD", /\d{4}-\d{3}/],
            ["YYYY-MM", /\d{4}-\d\d/, !1],
            ["YYYYYYMMDD", /[+-]\d{10}/],
            ["YYYYMMDD", /\d{8}/],
            ["GGGG[W]WWE", /\d{4}W\d{3}/],
            ["GGGG[W]WW", /\d{4}W\d{2}/, !1],
            ["YYYYDDD", /\d{7}/]
          ],
          go = [
            ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
            ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
            ["HH:mm:ss", /\d\d:\d\d:\d\d/],
            ["HH:mm", /\d\d:\d\d/],
            ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
            ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
            ["HHmmss", /\d\d\d\d\d\d/],
            ["HHmm", /\d\d\d\d/],
            ["HH", /\d\d/]
          ],
          Mo = /^\/?Date\((\-?\d+)/i;
        t.createFromInputFallback = L("value provided is not in a recognized ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function(e) {
          e._d = new Date(e._i + (e._useUTC ? " UTC" : ""));
        }), t.ISO_8601 = function() {};
        var bo = L("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
            var e = gt.apply(null, arguments);
            return this.isValid() && e.isValid() ? e < this ? this : e : _();
          }),
          wo = L("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function() {
            var e = gt.apply(null, arguments);
            return this.isValid() && e.isValid() ? e > this ? this : e : _();
          }),
          ko = function() {
            return Date.now ? Date.now() : +new Date;
          };
        St("Z", ":"), St("ZZ", ""), X("Z", Ir), X("ZZ", Ir), ne(["Z", "ZZ"], function(e, t, n) {
          n._useUTC = !0, n._tzm = Yt(Ir, e);
        });
        var Lo = /([\+\-]|\d\d)/gi;
        t.updateOffset = function() {};
        var To = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,
          So = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
        Wt.fn = kt.prototype;
        var Yo = Bt(1, "add"),
          Do = Bt(-1, "subtract");
        t.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", t.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
        var xo = L("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function(e) {
          return void 0 === e ? this.localeData() : this.locale(e);
        });
        q(0, ["gg", 2], 0, function() {
          return this.weekYear() % 100;
        }), q(0, ["GG", 2], 0, function() {
          return this.isoWeekYear() % 100;
        }), Yn("gggg", "weekYear"), Yn("ggggg", "weekYear"), Yn("GGGG", "isoWeekYear"), Yn("GGGGG", "isoWeekYear"), I("weekYear", "gg"), I("isoWeekYear", "GG"), N("weekYear", 1), N("isoWeekYear", 1), X("G", /[+-]?\d+/), X("g", /[+-]?\d+/), X("GG", /\d\d?/, /\d\d/), X("gg", /\d\d?/, /\d\d/), X("GGGG", /\d{1,4}/, /\d{4}/), X("gggg", /\d{1,4}/, /\d{4}/), X("GGGGG", /[+-]?\d{1,6}/, Or), X("ggggg", /[+-]?\d{1,6}/, Or), re(["gggg", "ggggg", "GGGG", "GGGGG"], function(e, t, n, r) {
          t[r.substr(0, 2)] = b(e);
        }), re(["gg", "GG"], function(e, n, r, o) {
          n[o] = t.parseTwoDigitYear(e);
        }), q("Q", 0, "Qo", "quarter"), I("quarter", "Q"), N("quarter", 7), X("Q", /\d/), ne("Q", function(e, t) {
          t[Wr] = 3 * (b(e) - 1);
        }), q("D", ["DD", 2], "Do", "date"), I("date", "D"), N("date", 9), X("D", /\d\d?/), X("DD", /\d\d?/, /\d\d/), X("Do", function(e, t) {
          return e ? t._ordinalParse : t._ordinalParseLenient;
        }), ne(["D", "DD"], Fr), ne("Do", function(e, t) {
          t[Fr] = b(e.match(/\d\d?/)[0], 10);
        });
        var Co = W("Date", !0);
        q("DDD", ["DDDD", 3], "DDDo", "dayOfYear"), I("dayOfYear", "DDD"), N("dayOfYear", 4), X("DDD", /\d{1,3}/), X("DDDD", /\d{3}/), ne(["DDD", "DDDD"], function(e, t, n) {
          n._dayOfYear = b(e);
        }), q("m", ["mm", 2], 0, "minute"), I("minute", "m"), N("minute", 14), X("m", /\d\d?/), X("mm", /\d\d?/, /\d\d/), ne(["m", "mm"], Gr);
        var Po = W("Minutes", !1);
        q("s", ["ss", 2], 0, "second"), I("second", "s"), N("second", 15), X("s", /\d\d?/), X("ss", /\d\d?/, /\d\d/), ne(["s", "ss"], Br);
        var Eo = W("Seconds", !1);
        q("S", 0, 0, function() {
          return ~~(this.millisecond() / 100);
        }), q(0, ["SS", 2], 0, function() {
          return ~~(this.millisecond() / 10);
        }), q(0, ["SSS", 3], 0, "millisecond"), q(0, ["SSSS", 4], 0, function() {
          return 10 * this.millisecond();
        }), q(0, ["SSSSS", 5], 0, function() {
          return 100 * this.millisecond();
        }), q(0, ["SSSSSS", 6], 0, function() {
          return 1e3 * this.millisecond();
        }), q(0, ["SSSSSSS", 7], 0, function() {
          return 1e4 * this.millisecond();
        }), q(0, ["SSSSSSSS", 8], 0, function() {
          return 1e5 * this.millisecond();
        }), q(0, ["SSSSSSSSS", 9], 0, function() {
          return 1e6 * this.millisecond();
        }), I("millisecond", "ms"), N("millisecond", 16), X("S", /\d{1,3}/, /\d/), X("SS", /\d{1,3}/, /\d\d/), X("SSS", /\d{1,3}/, /\d{3}/);
        var jo;
        for (jo = "SSSS"; jo.length <= 9; jo += "S") X(jo, /\d+/);
        for (jo = "S"; jo.length <= 9; jo += "S") ne(jo, In);
        var Oo = W("Milliseconds", !1);
        q("z", 0, 0, "zoneAbbr"), q("zz", 0, 0, "zoneName");
        var Ro = v.prototype;
        Ro.add = Yo, Ro.calendar = Jt, Ro.clone = Kt, Ro.diff = nn, Ro.endOf = mn, Ro.format = un, Ro.from = ln, Ro.fromNow = cn, Ro.to = dn, Ro.toNow = fn, Ro.get = G, Ro.invalidAt = Tn, Ro.isAfter = $t, Ro.isBefore = Qt, Ro.isBetween = Xt, Ro.isSame = Zt, Ro.isSameOrAfter = en, Ro.isSameOrBefore = tn, Ro.isValid = kn, Ro.lang = xo, Ro.locale = hn, Ro.localeData = pn, Ro.max = wo, Ro.min = bo, Ro.parsingFlags = Ln, Ro.set = B, Ro.startOf = _n, Ro.subtract = Do, Ro.toArray = Mn, Ro.toObject = bn, Ro.toDate = gn, Ro.toISOString = an, Ro.inspect = sn, Ro.toJSON = wn, Ro.toString = on, Ro.unix = vn, Ro.valueOf = yn, Ro.creationData = Sn, Ro.year = to, Ro.isLeapYear = ve, Ro.weekYear = Dn, Ro.isoWeekYear = xn, Ro.quarter = Ro.quarters = On, Ro.month = de, Ro.daysInMonth = fe, Ro.week = Ro.weeks = De, Ro.isoWeek = Ro.isoWeeks = xe, Ro.weeksInYear = Pn, Ro.isoWeeksInYear = Cn, Ro.date = Co, Ro.day = Ro.days = Ae, Ro.weekday = He, Ro.isoWeekday = Ne, Ro.dayOfYear = Rn, Ro.hour = Ro.hours = co, Ro.minute = Ro.minutes = Po, Ro.second = Ro.seconds = Eo, Ro.millisecond = Ro.milliseconds = Oo, Ro.utcOffset = Ct, Ro.utc = Et, Ro.local = jt, Ro.parseZone = Ot, Ro.hasAlignedHourOffset = Rt, Ro.isDST = It, Ro.isLocal = Ht, Ro.isUtcOffset = Nt, Ro.isUtc = zt, Ro.isUTC = zt, Ro.zoneAbbr = An, Ro.zoneName = Hn, Ro.dates = L("dates accessor is deprecated. Use date instead.", Co), Ro.months = L("months accessor is deprecated. Use month instead", de), Ro.years = L("years accessor is deprecated. Use year instead", to), Ro.zone = L("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", Pt), Ro.isDSTShifted = L("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", At);
        var Io = x.prototype;
        Io.calendar = C, Io.longDateFormat = P, Io.invalidDate = E, Io.ordinal = j, Io.preparse = Wn, Io.postformat = Wn, Io.relativeTime = O, Io.pastFuture = R, Io.set = Y, Io.months = ae, Io.monthsShort = se, Io.monthsParse = le, Io.monthsRegex = pe, Io.monthsShortRegex = he, Io.week = Te, Io.firstDayOfYear = Ye, Io.firstDayOfWeek = Se, Io.weekdays = Ee, Io.weekdaysMin = Oe, Io.weekdaysShort = je, Io.weekdaysParse = Ie, Io.weekdaysRegex = ze, Io.weekdaysShortRegex = We, Io.weekdaysMinRegex = Fe, Io.isPM = Je, Io.meridiem = Ke, Ze("en", {
          ordinalParse: /\d{1,2}(th|st|nd|rd)/,
          ordinal: function(e) {
            var t = e % 10;
            return e + (1 === b(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th");
          }
        }), t.lang = L("moment.lang is deprecated. Use moment.locale instead.", Ze), t.langData = L("moment.langData is deprecated. Use moment.localeData instead.", nt);
        var Ao = Math.abs,
          Ho = ar("ms"),
          No = ar("s"),
          zo = ar("m"),
          Wo = ar("h"),
          Fo = ar("d"),
          Uo = ar("w"),
          Go = ar("M"),
          Bo = ar("y"),
          Vo = ur("milliseconds"),
          qo = ur("seconds"),
          Jo = ur("minutes"),
          Ko = ur("hours"),
          $o = ur("days"),
          Qo = ur("months"),
          Xo = ur("years"),
          Zo = Math.round,
          ei = {
            s: 45,
            m: 45,
            h: 22,
            d: 26,
            M: 11
          },
          ti = Math.abs,
          ni = kt.prototype;
        return ni.abs = $n, ni.add = Xn, ni.subtract = Zn, ni.as = or, ni.asMilliseconds = Ho, ni.asSeconds = No, ni.asMinutes = zo, ni.asHours = Wo, ni.asDays = Fo, ni.asWeeks = Uo, ni.asMonths = Go, ni.asYears = Bo, ni.valueOf = ir, ni._bubble = tr, ni.get = sr, ni.milliseconds = Vo, ni.seconds = qo, ni.minutes = Jo, ni.hours = Ko, ni.days = $o, ni.weeks = lr, ni.months = Qo, ni.years = Xo, ni.humanize = pr, ni.toISOString = _r, ni.toString = _r, ni.toJSON = _r, ni.locale = hn, ni.localeData = pn, ni.toIsoString = L("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", _r), ni.lang = xo, q("X", 0, 0, "unix"), q("x", 0, 0, "valueOf"), X("x", /[+-]?\d+/), X("X", /[+-]?\d+(\.\d{1,3})?/), ne("X", function(e, t, n) {
            n._d = new Date(1e3 * parseFloat(e, 10));
          }), ne("x", function(e, t, n) {
            n._d = new Date(b(e));
          }), t.version = "2.17.1",
          function(e) {
            mr = e;
          }(gt), t.fn = Ro, t.min = bt, t.max = wt, t.now = ko, t.utc = d, t.unix = Nn, t.months = Bn, t.isDate = s, t.locale = Ze, t.invalid = _, t.duration = Wt, t.isMoment = g, t.weekdays = qn, t.parseZone = zn, t.localeData = nt, t.isDuration = Lt, t.monthsShort = Vn, t.weekdaysMin = Kn, t.defineLocale = et, t.updateLocale = tt, t.locales = rt, t.weekdaysShort = Jn, t.normalizeUnits = A, t.relativeTimeRounding = fr, t.relativeTimeThreshold = hr, t.calendarFormat = qt, t.prototype = Ro, t;
      }();
    }();
  }).call(t, n(72)(e));
}, function(e, t, n) {
  "use strict";
  e.exports = n(43);
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r, i, a, s, u) {
    if (o(t), !e) {
      var l;
      if (void 0 === t) l = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      else {
        var c = [n, r, i, a, s, u],
          d = 0;
        l = new Error(t.replace(/%s/g, function() {
          return c[d++];
        })), l.name = "Invariant Violation";
      }
      throw l.framesToPop = 1, l;
    }
  }
  var o = function(e) {};
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(17),
    o = r;
  e.exports = o;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    for (var t = arguments.length - 1, n = "Minified React error #" + e + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=" + e, r = 0; r < t; r++) n += "&args[]=" + encodeURIComponent(arguments[r + 1]);
    n += " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    var o = new Error(n);
    throw o.name = "Invariant Violation", o.framesToPop = 1, o;
  }
  e.exports = r;
}, function(e, t, n) {
  (function(e, r) {
    var o;
    (function() {
      function i(e, t) {
        return e.set(t[0], t[1]), e;
      }

      function a(e, t) {
        return e.add(t), e;
      }

      function s(e, t, n) {
        switch (n.length) {
          case 0:
            return e.call(t);
          case 1:
            return e.call(t, n[0]);
          case 2:
            return e.call(t, n[0], n[1]);
          case 3:
            return e.call(t, n[0], n[1], n[2]);
        }
        return e.apply(t, n);
      }

      function u(e, t, n, r) {
        for (var o = -1, i = null == e ? 0 : e.length; ++o < i;) {
          var a = e[o];
          t(r, a, n(a), e);
        }
        return r;
      }

      function l(e, t) {
        for (var n = -1, r = null == e ? 0 : e.length; ++n < r && !1 !== t(e[n], n, e););
        return e;
      }

      function c(e, t) {
        for (var n = null == e ? 0 : e.length; n-- && !1 !== t(e[n], n, e););
        return e;
      }

      function d(e, t) {
        for (var n = -1, r = null == e ? 0 : e.length; ++n < r;)
          if (!t(e[n], n, e)) return !1;
        return !0;
      }

      function f(e, t) {
        for (var n = -1, r = null == e ? 0 : e.length, o = 0, i = []; ++n < r;) {
          var a = e[n];
          t(a, n, e) && (i[o++] = a);
        }
        return i;
      }

      function h(e, t) {
        return !!(null == e ? 0 : e.length) && L(e, t, 0) > -1;
      }

      function p(e, t, n) {
        for (var r = -1, o = null == e ? 0 : e.length; ++r < o;)
          if (n(t, e[r])) return !0;
        return !1;
      }

      function _(e, t) {
        for (var n = -1, r = null == e ? 0 : e.length, o = Array(r); ++n < r;) o[n] = t(e[n], n, e);
        return o;
      }

      function m(e, t) {
        for (var n = -1, r = t.length, o = e.length; ++n < r;) e[o + n] = t[n];
        return e;
      }

      function y(e, t, n, r) {
        var o = -1,
          i = null == e ? 0 : e.length;
        for (r && i && (n = e[++o]); ++o < i;) n = t(n, e[o], o, e);
        return n;
      }

      function v(e, t, n, r) {
        var o = null == e ? 0 : e.length;
        for (r && o && (n = e[--o]); o--;) n = t(n, e[o], o, e);
        return n;
      }

      function g(e, t) {
        for (var n = -1, r = null == e ? 0 : e.length; ++n < r;)
          if (t(e[n], n, e)) return !0;
        return !1;
      }

      function M(e) {
        return e.split("");
      }

      function b(e) {
        return e.match(It) || [];
      }

      function w(e, t, n) {
        var r;
        return n(e, function(e, n, o) {
          if (t(e, n, o)) return r = n, !1;
        }), r;
      }

      function k(e, t, n, r) {
        for (var o = e.length, i = n + (r ? 1 : -1); r ? i-- : ++i < o;)
          if (t(e[i], i, e)) return i;
        return -1;
      }

      function L(e, t, n) {
        return t === t ? Q(e, t, n) : k(e, S, n);
      }

      function T(e, t, n, r) {
        for (var o = n - 1, i = e.length; ++o < i;)
          if (r(e[o], t)) return o;
        return -1;
      }

      function S(e) {
        return e !== e;
      }

      function Y(e, t) {
        var n = null == e ? 0 : e.length;
        return n ? E(e, t) / n : Oe;
      }

      function D(e) {
        return function(t) {
          return null == t ? oe : t[e];
        };
      }

      function x(e) {
        return function(t) {
          return null == e ? oe : e[t];
        };
      }

      function C(e, t, n, r, o) {
        return o(e, function(e, o, i) {
          n = r ? (r = !1, e) : t(n, e, o, i);
        }), n;
      }

      function P(e, t) {
        var n = e.length;
        for (e.sort(t); n--;) e[n] = e[n].value;
        return e;
      }

      function E(e, t) {
        for (var n, r = -1, o = e.length; ++r < o;) {
          var i = t(e[r]);
          i !== oe && (n = n === oe ? i : n + i);
        }
        return n;
      }

      function j(e, t) {
        for (var n = -1, r = Array(e); ++n < e;) r[n] = t(n);
        return r;
      }

      function O(e, t) {
        return _(t, function(t) {
          return [t, e[t]];
        });
      }

      function R(e) {
        return function(t) {
          return e(t);
        };
      }

      function I(e, t) {
        return _(t, function(t) {
          return e[t];
        });
      }

      function A(e, t) {
        return e.has(t);
      }

      function H(e, t) {
        for (var n = -1, r = e.length; ++n < r && L(t, e[n], 0) > -1;);
        return n;
      }

      function N(e, t) {
        for (var n = e.length; n-- && L(t, e[n], 0) > -1;);
        return n;
      }

      function z(e, t) {
        for (var n = e.length, r = 0; n--;) e[n] === t && ++r;
        return r;
      }

      function W(e) {
        return "\\" + bn[e];
      }

      function F(e, t) {
        return null == e ? oe : e[t];
      }

      function U(e) {
        return fn.test(e);
      }

      function G(e) {
        return hn.test(e);
      }

      function B(e) {
        for (var t, n = []; !(t = e.next()).done;) n.push(t.value);
        return n;
      }

      function V(e) {
        var t = -1,
          n = Array(e.size);
        return e.forEach(function(e, r) {
          n[++t] = [r, e];
        }), n;
      }

      function q(e, t) {
        return function(n) {
          return e(t(n));
        };
      }

      function J(e, t) {
        for (var n = -1, r = e.length, o = 0, i = []; ++n < r;) {
          var a = e[n];
          a !== t && a !== le || (e[n] = le, i[o++] = n);
        }
        return i;
      }

      function K(e) {
        var t = -1,
          n = Array(e.size);
        return e.forEach(function(e) {
          n[++t] = e;
        }), n;
      }

      function $(e) {
        var t = -1,
          n = Array(e.size);
        return e.forEach(function(e) {
          n[++t] = [e, e];
        }), n;
      }

      function Q(e, t, n) {
        for (var r = n - 1, o = e.length; ++r < o;)
          if (e[r] === t) return r;
        return -1;
      }

      function X(e, t, n) {
        for (var r = n + 1; r--;)
          if (e[r] === t) return r;
        return r;
      }

      function Z(e) {
        return U(e) ? te(e) : Hn(e);
      }

      function ee(e) {
        return U(e) ? ne(e) : M(e);
      }

      function te(e) {
        for (var t = cn.lastIndex = 0; cn.test(e);) ++t;
        return t;
      }

      function ne(e) {
        return e.match(cn) || [];
      }

      function re(e) {
        return e.match(dn) || [];
      }
      var oe, ie = 200,
        ae = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.",
        se = "Expected a function",
        ue = "__lodash_hash_undefined__",
        le = "__lodash_placeholder__",
        ce = 1,
        de = 2,
        fe = 4,
        he = 1,
        pe = 2,
        _e = 1,
        me = 2,
        ye = 4,
        ve = 8,
        ge = 16,
        Me = 32,
        be = 64,
        we = 128,
        ke = 256,
        Le = 512,
        Te = 30,
        Se = "...",
        Ye = 800,
        De = 16,
        xe = 1,
        Ce = 2,
        Pe = 1 / 0,
        Ee = 9007199254740991,
        je = 1.7976931348623157e308,
        Oe = NaN,
        Re = 4294967295,
        Ie = Re - 1,
        Ae = Re >>> 1,
        He = [
          ["ary", we],
          ["bind", _e],
          ["bindKey", me],
          ["curry", ve],
          ["curryRight", ge],
          ["flip", Le],
          ["partial", Me],
          ["partialRight", be],
          ["rearg", ke]
        ],
        Ne = "[object Arguments]",
        ze = "[object Array]",
        We = "[object AsyncFunction]",
        Fe = "[object Boolean]",
        Ue = "[object Date]",
        Ge = "[object DOMException]",
        Be = "[object Error]",
        Ve = "[object Function]",
        qe = "[object GeneratorFunction]",
        Je = "[object Map]",
        Ke = "[object Number]",
        $e = "[object Null]",
        Qe = "[object Object]",
        Xe = "[object Proxy]",
        Ze = "[object RegExp]",
        et = "[object Set]",
        tt = "[object String]",
        nt = "[object Symbol]",
        rt = "[object Undefined]",
        ot = "[object WeakMap]",
        it = "[object WeakSet]",
        at = "[object ArrayBuffer]",
        st = "[object DataView]",
        ut = "[object Float32Array]",
        lt = "[object Float64Array]",
        ct = "[object Int8Array]",
        dt = "[object Int16Array]",
        ft = "[object Int32Array]",
        ht = "[object Uint8Array]",
        pt = "[object Uint8ClampedArray]",
        _t = "[object Uint16Array]",
        mt = "[object Uint32Array]",
        yt = /\b__p \+= '';/g,
        vt = /\b(__p \+=) '' \+/g,
        gt = /(__e\(.*?\)|\b__t\)) \+\n'';/g,
        Mt = /&(?:amp|lt|gt|quot|#39);/g,
        bt = /[&<>"']/g,
        wt = RegExp(Mt.source),
        kt = RegExp(bt.source),
        Lt = /<%=([\s\S]+?)%>/g,
        Tt = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        St = /^\w*$/,
        Yt = /^\./,
        Dt = /[\\^$.*+?()[\]{}|]/g,
        xt = RegExp(Dt.source),
        Ct = /^\s+|\s+$/g,
        Pt = /^\s+/,
        Et = /\s+$/,
        jt = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        Ot = /\{\n\/\* \[wrapped with (.+)\] \*/,
        Rt = /,? & /,
        It = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,
        At = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,
        Ht = /\w*$/,
        Nt = /^[-+]0x[0-9a-f]+$/i,
        zt = /^0b[01]+$/i,
        Wt = /^\[object .+?Constructor\]$/,
        Ft = /^0o[0-7]+$/i,
        Ut = /^(?:0|[1-9]\d*)$/,
        Gt = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
        Bt = /($^)/,
        Vt = /['\n\r\u2028\u2029\\]/g,
        qt = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",
        Jt = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
        Kt = "[" + qt + "]",
        $t = "[a-z\\xdf-\\xf6\\xf8-\\xff]",
        Qt = "[^\\ud800-\\udfff" + Jt + "\\d+\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",
        Xt = "\\ud83c[\\udffb-\\udfff]",
        Zt = "(?:\\ud83c[\\udde6-\\uddff]){2}",
        en = "[\\ud800-\\udbff][\\udc00-\\udfff]",
        tn = "[A-Z\\xc0-\\xd6\\xd8-\\xde]",
        nn = "(?:" + Kt + "|" + Xt + ")?",
        rn = "(?:\\u200d(?:" + ["[^\\ud800-\\udfff]", Zt, en].join("|") + ")[\\ufe0e\\ufe0f]?" + nn + ")*",
        on = "[\\ufe0e\\ufe0f]?" + nn + rn,
        an = "(?:" + ["[\\u2700-\\u27bf]", Zt, en].join("|") + ")" + on,
        sn = "(?:" + ["[^\\ud800-\\udfff]" + Kt + "?", Kt, Zt, en, "[\\ud800-\\udfff]"].join("|") + ")",
        un = RegExp("['’]", "g"),
        ln = RegExp(Kt, "g"),
        cn = RegExp(Xt + "(?=" + Xt + ")|" + sn + on, "g"),
        dn = RegExp([tn + "?" + $t + "+(?:['’](?:d|ll|m|re|s|t|ve))?(?=" + ["[" + Jt + "]", tn, "$"].join("|") + ")", "(?:" + tn + "|" + Qt + ")+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=" + ["[" + Jt + "]", tn + "(?:" + $t + "|" + Qt + ")", "$"].join("|") + ")", tn + "?(?:" + $t + "|" + Qt + ")+(?:['’](?:d|ll|m|re|s|t|ve))?", tn + "+(?:['’](?:D|LL|M|RE|S|T|VE))?", "\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)", "\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)", "\\d+", an].join("|"), "g"),
        fn = RegExp("[\\u200d\\ud800-\\udfff" + qt + "\\ufe0e\\ufe0f]"),
        hn = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
        pn = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"],
        _n = -1,
        mn = {};
      mn[ut] = mn[lt] = mn[ct] = mn[dt] = mn[ft] = mn[ht] = mn[pt] = mn[_t] = mn[mt] = !0, mn[Ne] = mn[ze] = mn[at] = mn[Fe] = mn[st] = mn[Ue] = mn[Be] = mn[Ve] = mn[Je] = mn[Ke] = mn[Qe] = mn[Ze] = mn[et] = mn[tt] = mn[ot] = !1;
      var yn = {};
      yn[Ne] = yn[ze] = yn[at] = yn[st] = yn[Fe] = yn[Ue] = yn[ut] = yn[lt] = yn[ct] = yn[dt] = yn[ft] = yn[Je] = yn[Ke] = yn[Qe] = yn[Ze] = yn[et] = yn[tt] = yn[nt] = yn[ht] = yn[pt] = yn[_t] = yn[mt] = !0, yn[Be] = yn[Ve] = yn[ot] = !1;
      var vn = {
          "À": "A",
          "Á": "A",
          "Â": "A",
          "Ã": "A",
          "Ä": "A",
          "Å": "A",
          "à": "a",
          "á": "a",
          "â": "a",
          "ã": "a",
          "ä": "a",
          "å": "a",
          "Ç": "C",
          "ç": "c",
          "Ð": "D",
          "ð": "d",
          "È": "E",
          "É": "E",
          "Ê": "E",
          "Ë": "E",
          "è": "e",
          "é": "e",
          "ê": "e",
          "ë": "e",
          "Ì": "I",
          "Í": "I",
          "Î": "I",
          "Ï": "I",
          "ì": "i",
          "í": "i",
          "î": "i",
          "ï": "i",
          "Ñ": "N",
          "ñ": "n",
          "Ò": "O",
          "Ó": "O",
          "Ô": "O",
          "Õ": "O",
          "Ö": "O",
          "Ø": "O",
          "ò": "o",
          "ó": "o",
          "ô": "o",
          "õ": "o",
          "ö": "o",
          "ø": "o",
          "Ù": "U",
          "Ú": "U",
          "Û": "U",
          "Ü": "U",
          "ù": "u",
          "ú": "u",
          "û": "u",
          "ü": "u",
          "Ý": "Y",
          "ý": "y",
          "ÿ": "y",
          "Æ": "Ae",
          "æ": "ae",
          "Þ": "Th",
          "þ": "th",
          "ß": "ss",
          "Ā": "A",
          "Ă": "A",
          "Ą": "A",
          "ā": "a",
          "ă": "a",
          "ą": "a",
          "Ć": "C",
          "Ĉ": "C",
          "Ċ": "C",
          "Č": "C",
          "ć": "c",
          "ĉ": "c",
          "ċ": "c",
          "č": "c",
          "Ď": "D",
          "Đ": "D",
          "ď": "d",
          "đ": "d",
          "Ē": "E",
          "Ĕ": "E",
          "Ė": "E",
          "Ę": "E",
          "Ě": "E",
          "ē": "e",
          "ĕ": "e",
          "ė": "e",
          "ę": "e",
          "ě": "e",
          "Ĝ": "G",
          "Ğ": "G",
          "Ġ": "G",
          "Ģ": "G",
          "ĝ": "g",
          "ğ": "g",
          "ġ": "g",
          "ģ": "g",
          "Ĥ": "H",
          "Ħ": "H",
          "ĥ": "h",
          "ħ": "h",
          "Ĩ": "I",
          "Ī": "I",
          "Ĭ": "I",
          "Į": "I",
          "İ": "I",
          "ĩ": "i",
          "ī": "i",
          "ĭ": "i",
          "į": "i",
          "ı": "i",
          "Ĵ": "J",
          "ĵ": "j",
          "Ķ": "K",
          "ķ": "k",
          "ĸ": "k",
          "Ĺ": "L",
          "Ļ": "L",
          "Ľ": "L",
          "Ŀ": "L",
          "Ł": "L",
          "ĺ": "l",
          "ļ": "l",
          "ľ": "l",
          "ŀ": "l",
          "ł": "l",
          "Ń": "N",
          "Ņ": "N",
          "Ň": "N",
          "Ŋ": "N",
          "ń": "n",
          "ņ": "n",
          "ň": "n",
          "ŋ": "n",
          "Ō": "O",
          "Ŏ": "O",
          "Ő": "O",
          "ō": "o",
          "ŏ": "o",
          "ő": "o",
          "Ŕ": "R",
          "Ŗ": "R",
          "Ř": "R",
          "ŕ": "r",
          "ŗ": "r",
          "ř": "r",
          "Ś": "S",
          "Ŝ": "S",
          "Ş": "S",
          "Š": "S",
          "ś": "s",
          "ŝ": "s",
          "ş": "s",
          "š": "s",
          "Ţ": "T",
          "Ť": "T",
          "Ŧ": "T",
          "ţ": "t",
          "ť": "t",
          "ŧ": "t",
          "Ũ": "U",
          "Ū": "U",
          "Ŭ": "U",
          "Ů": "U",
          "Ű": "U",
          "Ų": "U",
          "ũ": "u",
          "ū": "u",
          "ŭ": "u",
          "ů": "u",
          "ű": "u",
          "ų": "u",
          "Ŵ": "W",
          "ŵ": "w",
          "Ŷ": "Y",
          "ŷ": "y",
          "Ÿ": "Y",
          "Ź": "Z",
          "Ż": "Z",
          "Ž": "Z",
          "ź": "z",
          "ż": "z",
          "ž": "z",
          "Ĳ": "IJ",
          "ĳ": "ij",
          "Œ": "Oe",
          "œ": "oe",
          "ŉ": "'n",
          "ſ": "s"
        },
        gn = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        },
        Mn = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        },
        bn = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        },
        wn = parseFloat,
        kn = parseInt,
        Ln = "object" == typeof e && e && e.Object === Object && e,
        Tn = "object" == typeof self && self && self.Object === Object && self,
        Sn = Ln || Tn || Function("return this")(),
        Yn = "object" == typeof t && t && !t.nodeType && t,
        Dn = Yn && "object" == typeof r && r && !r.nodeType && r,
        xn = Dn && Dn.exports === Yn,
        Cn = xn && Ln.process,
        Pn = function() {
          try {
            return Cn && Cn.binding && Cn.binding("util");
          } catch (e) {}
        }(),
        En = Pn && Pn.isArrayBuffer,
        jn = Pn && Pn.isDate,
        On = Pn && Pn.isMap,
        Rn = Pn && Pn.isRegExp,
        In = Pn && Pn.isSet,
        An = Pn && Pn.isTypedArray,
        Hn = D("length"),
        Nn = x(vn),
        zn = x(gn),
        Wn = x(Mn),
        Fn = function e(t) {
          function n(e) {
            if (eu(e) && !ff(e) && !(e instanceof M)) {
              if (e instanceof o) return e;
              if (dc.call(e, "__wrapped__")) return Qi(e);
            }
            return new o(e);
          }

          function r() {}

          function o(e, t) {
            this.__wrapped__ = e, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = oe;
          }

          function M(e) {
            this.__wrapped__ = e, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = Re, this.__views__ = [];
          }

          function x() {
            var e = new M(this.__wrapped__);
            return e.__actions__ = jo(this.__actions__), e.__dir__ = this.__dir__, e.__filtered__ = this.__filtered__, e.__iteratees__ = jo(this.__iteratees__), e.__takeCount__ = this.__takeCount__, e.__views__ = jo(this.__views__), e;
          }

          function Q() {
            if (this.__filtered__) {
              var e = new M(this);
              e.__dir__ = -1, e.__filtered__ = !0;
            } else e = this.clone(), e.__dir__ *= -1;
            return e;
          }

          function te() {
            var e = this.__wrapped__.value(),
              t = this.__dir__,
              n = ff(e),
              r = t < 0,
              o = n ? e.length : 0,
              i = wi(0, o, this.__views__),
              a = i.start,
              s = i.end,
              u = s - a,
              l = r ? s : a - 1,
              c = this.__iteratees__,
              d = c.length,
              f = 0,
              h = Wc(u, this.__takeCount__);
            if (!n || !r && o == u && h == u) return po(e, this.__actions__);
            var p = [];
            e: for (; u-- && f < h;) {
              l += t;
              for (var _ = -1, m = e[l]; ++_ < d;) {
                var y = c[_],
                  v = y.iteratee,
                  g = y.type,
                  M = v(m);
                if (g == Ce) m = M;
                else if (!M) {
                  if (g == xe) continue e;
                  break e;
                }
              }
              p[f++] = m;
            }
            return p;
          }

          function ne(e) {
            var t = -1,
              n = null == e ? 0 : e.length;
            for (this.clear(); ++t < n;) {
              var r = e[t];
              this.set(r[0], r[1]);
            }
          }

          function It() {
            this.__data__ = Qc ? Qc(null) : {}, this.size = 0;
          }

          function qt(e) {
            var t = this.has(e) && delete this.__data__[e];
            return this.size -= t ? 1 : 0, t;
          }

          function Jt(e) {
            var t = this.__data__;
            if (Qc) {
              var n = t[e];
              return n === ue ? oe : n;
            }
            return dc.call(t, e) ? t[e] : oe;
          }

          function Kt(e) {
            var t = this.__data__;
            return Qc ? t[e] !== oe : dc.call(t, e);
          }

          function $t(e, t) {
            var n = this.__data__;
            return this.size += this.has(e) ? 0 : 1, n[e] = Qc && t === oe ? ue : t, this;
          }

          function Qt(e) {
            var t = -1,
              n = null == e ? 0 : e.length;
            for (this.clear(); ++t < n;) {
              var r = e[t];
              this.set(r[0], r[1]);
            }
          }

          function Xt() {
            this.__data__ = [], this.size = 0;
          }

          function Zt(e) {
            var t = this.__data__,
              n = Bn(t, e);
            return !(n < 0 || (n == t.length - 1 ? t.pop() : Tc.call(t, n, 1), --this.size, 0));
          }

          function en(e) {
            var t = this.__data__,
              n = Bn(t, e);
            return n < 0 ? oe : t[n][1];
          }

          function tn(e) {
            return Bn(this.__data__, e) > -1;
          }

          function nn(e, t) {
            var n = this.__data__,
              r = Bn(n, e);
            return r < 0 ? (++this.size, n.push([e, t])) : n[r][1] = t, this;
          }

          function rn(e) {
            var t = -1,
              n = null == e ? 0 : e.length;
            for (this.clear(); ++t < n;) {
              var r = e[t];
              this.set(r[0], r[1]);
            }
          }

          function on() {
            this.size = 0, this.__data__ = {
              hash: new ne,
              map: new(qc || Qt),
              string: new ne
            };
          }

          function an(e) {
            var t = vi(this, e).delete(e);
            return this.size -= t ? 1 : 0, t;
          }

          function sn(e) {
            return vi(this, e).get(e);
          }

          function cn(e) {
            return vi(this, e).has(e);
          }

          function dn(e, t) {
            var n = vi(this, e),
              r = n.size;
            return n.set(e, t), this.size += n.size == r ? 0 : 1, this;
          }

          function fn(e) {
            var t = -1,
              n = null == e ? 0 : e.length;
            for (this.__data__ = new rn; ++t < n;) this.add(e[t]);
          }

          function hn(e) {
            return this.__data__.set(e, ue), this;
          }

          function vn(e) {
            return this.__data__.has(e);
          }

          function gn(e) {
            var t = this.__data__ = new Qt(e);
            this.size = t.size;
          }

          function Mn() {
            this.__data__ = new Qt, this.size = 0;
          }

          function bn(e) {
            var t = this.__data__,
              n = t.delete(e);
            return this.size = t.size, n;
          }

          function Ln(e) {
            return this.__data__.get(e);
          }

          function Tn(e) {
            return this.__data__.has(e);
          }

          function Yn(e, t) {
            var n = this.__data__;
            if (n instanceof Qt) {
              var r = n.__data__;
              if (!qc || r.length < ie - 1) return r.push([e, t]), this.size = ++n.size, this;
              n = this.__data__ = new rn(r);
            }
            return n.set(e, t), this.size = n.size, this;
          }

          function Dn(e, t) {
            var n = ff(e),
              r = !n && df(e),
              o = !n && !r && pf(e),
              i = !n && !r && !o && gf(e),
              a = n || r || o || i,
              s = a ? j(e.length, oc) : [],
              u = s.length;
            for (var l in e) !t && !dc.call(e, l) || a && ("length" == l || o && ("offset" == l || "parent" == l) || i && ("buffer" == l || "byteLength" == l || "byteOffset" == l) || Ci(l, u)) || s.push(l);
            return s;
          }

          function Cn(e) {
            var t = e.length;
            return t ? e[Jr(0, t - 1)] : oe;
          }

          function Pn(e, t) {
            return qi(jo(e), Qn(t, 0, e.length));
          }

          function Hn(e) {
            return qi(jo(e));
          }

          function Un(e, t, n) {
            (n === oe || zs(e[t], n)) && (n !== oe || t in e) || Kn(e, t, n);
          }

          function Gn(e, t, n) {
            var r = e[t];
            dc.call(e, t) && zs(r, n) && (n !== oe || t in e) || Kn(e, t, n);
          }

          function Bn(e, t) {
            for (var n = e.length; n--;)
              if (zs(e[n][0], t)) return n;
            return -1;
          }

          function Vn(e, t, n, r) {
            return ld(e, function(e, o, i) {
              t(r, e, n(e), i);
            }), r;
          }

          function qn(e, t) {
            return e && Oo(t, Ru(t), e);
          }

          function Jn(e, t) {
            return e && Oo(t, Iu(t), e);
          }

          function Kn(e, t, n) {
            "__proto__" == t && xc ? xc(e, t, {
              configurable: !0,
              enumerable: !0,
              value: n,
              writable: !0
            }) : e[t] = n;
          }

          function $n(e, t) {
            for (var n = -1, r = t.length, o = Ql(r), i = null == e; ++n < r;) o[n] = i ? oe : Eu(e, t[n]);
            return o;
          }

          function Qn(e, t, n) {
            return e === e && (n !== oe && (e = e <= n ? e : n), t !== oe && (e = e >= t ? e : t)), e;
          }

          function Xn(e, t, n, r, o, i) {
            var a, s = t & ce,
              u = t & de,
              c = t & fe;
            if (n && (a = o ? n(e, r, o, i) : n(e)), a !== oe) return a;
            if (!Zs(e)) return e;
            var d = ff(e);
            if (d) {
              if (a = Ti(e), !s) return jo(e, a);
            } else {
              var f = bd(e),
                h = f == Ve || f == qe;
              if (pf(e)) return bo(e, s);
              if (f == Qe || f == Ne || h && !o) {
                if (a = u || h ? {} : Si(e), !s) return u ? Io(e, Jn(a, e)) : Ro(e, qn(a, e));
              } else {
                if (!yn[f]) return o ? e : {};
                a = Yi(e, f, Xn, s);
              }
            }
            i || (i = new gn);
            var p = i.get(e);
            if (p) return p;
            i.set(e, a);
            var _ = c ? u ? pi : hi : u ? Iu : Ru,
              m = d ? oe : _(e);
            return l(m || e, function(r, o) {
              m && (o = r, r = e[o]), Gn(a, o, Xn(r, t, n, o, e, i));
            }), a;
          }

          function Zn(e) {
            var t = Ru(e);
            return function(n) {
              return er(n, e, t);
            };
          }

          function er(e, t, n) {
            var r = n.length;
            if (null == e) return !r;
            for (e = nc(e); r--;) {
              var o = n[r],
                i = t[o],
                a = e[o];
              if (a === oe && !(o in e) || !i(a)) return !1;
            }
            return !0;
          }

          function tr(e, t, n) {
            if ("function" != typeof e) throw new ic(se);
            return Ld(function() {
              e.apply(oe, n);
            }, t);
          }

          function nr(e, t, n, r) {
            var o = -1,
              i = h,
              a = !0,
              s = e.length,
              u = [],
              l = t.length;
            if (!s) return u;
            n && (t = _(t, R(n))), r ? (i = p, a = !1) : t.length >= ie && (i = A, a = !1, t = new fn(t));
            e: for (; ++o < s;) {
              var c = e[o],
                d = null == n ? c : n(c);
              if (c = r || 0 !== c ? c : 0, a && d === d) {
                for (var f = l; f--;)
                  if (t[f] === d) continue e;
                u.push(c);
              } else i(t, d, r) || u.push(c);
            }
            return u;
          }

          function rr(e, t) {
            var n = !0;
            return ld(e, function(e, r, o) {
              return n = !!t(e, r, o);
            }), n;
          }

          function or(e, t, n) {
            for (var r = -1, o = e.length; ++r < o;) {
              var i = e[r],
                a = t(i);
              if (null != a && (s === oe ? a === a && !du(a) : n(a, s))) var s = a,
                u = i;
            }
            return u;
          }

          function ir(e, t, n, r) {
            var o = e.length;
            for (n = yu(n), n < 0 && (n = -n > o ? 0 : o + n), r = r === oe || r > o ? o : yu(r), r < 0 && (r += o), r = n > r ? 0 : vu(r); n < r;) e[n++] = t;
            return e;
          }

          function ar(e, t) {
            var n = [];
            return ld(e, function(e, r, o) {
              t(e, r, o) && n.push(e);
            }), n;
          }

          function sr(e, t, n, r, o) {
            var i = -1,
              a = e.length;
            for (n || (n = xi), o || (o = []); ++i < a;) {
              var s = e[i];
              t > 0 && n(s) ? t > 1 ? sr(s, t - 1, n, r, o) : m(o, s) : r || (o[o.length] = s);
            }
            return o;
          }

          function ur(e, t) {
            return e && dd(e, t, Ru);
          }

          function lr(e, t) {
            return e && fd(e, t, Ru);
          }

          function cr(e, t) {
            return f(t, function(t) {
              return $s(e[t]);
            });
          }

          function dr(e, t) {
            t = go(t, e);
            for (var n = 0, r = t.length; null != e && n < r;) e = e[Ji(t[n++])];
            return n && n == r ? e : oe;
          }

          function fr(e, t, n) {
            var r = t(e);
            return ff(e) ? r : m(r, n(e));
          }

          function hr(e) {
            return null == e ? e === oe ? rt : $e : Dc && Dc in nc(e) ? bi(e) : Wi(e);
          }

          function pr(e, t) {
            return e > t;
          }

          function _r(e, t) {
            return null != e && dc.call(e, t);
          }

          function mr(e, t) {
            return null != e && t in nc(e);
          }

          function yr(e, t, n) {
            return e >= Wc(t, n) && e < zc(t, n);
          }

          function vr(e, t, n) {
            for (var r = n ? p : h, o = e[0].length, i = e.length, a = i, s = Ql(i), u = 1 / 0, l = []; a--;) {
              var c = e[a];
              a && t && (c = _(c, R(t))), u = Wc(c.length, u), s[a] = !n && (t || o >= 120 && c.length >= 120) ? new fn(a && c) : oe;
            }
            c = e[0];
            var d = -1,
              f = s[0];
            e: for (; ++d < o && l.length < u;) {
              var m = c[d],
                y = t ? t(m) : m;
              if (m = n || 0 !== m ? m : 0, !(f ? A(f, y) : r(l, y, n))) {
                for (a = i; --a;) {
                  var v = s[a];
                  if (!(v ? A(v, y) : r(e[a], y, n))) continue e;
                }
                f && f.push(y), l.push(m);
              }
            }
            return l;
          }

          function gr(e, t, n, r) {
            return ur(e, function(e, o, i) {
              t(r, n(e), o, i);
            }), r;
          }

          function Mr(e, t, n) {
            t = go(t, e), e = Ui(e, t);
            var r = null == e ? e : e[Ji(ma(t))];
            return null == r ? oe : s(r, e, n);
          }

          function br(e) {
            return eu(e) && hr(e) == Ne;
          }

          function wr(e) {
            return eu(e) && hr(e) == at;
          }

          function kr(e) {
            return eu(e) && hr(e) == Ue;
          }

          function Lr(e, t, n, r, o) {
            return e === t || (null == e || null == t || !eu(e) && !eu(t) ? e !== e && t !== t : Tr(e, t, n, r, Lr, o));
          }

          function Tr(e, t, n, r, o, i) {
            var a = ff(e),
              s = ff(t),
              u = a ? ze : bd(e),
              l = s ? ze : bd(t);
            u = u == Ne ? Qe : u, l = l == Ne ? Qe : l;
            var c = u == Qe,
              d = l == Qe,
              f = u == l;
            if (f && pf(e)) {
              if (!pf(t)) return !1;
              a = !0, c = !1;
            }
            if (f && !c) return i || (i = new gn), a || gf(e) ? li(e, t, n, r, o, i) : ci(e, t, u, n, r, o, i);
            if (!(n & he)) {
              var h = c && dc.call(e, "__wrapped__"),
                p = d && dc.call(t, "__wrapped__");
              if (h || p) {
                var _ = h ? e.value() : e,
                  m = p ? t.value() : t;
                return i || (i = new gn), o(_, m, n, r, i);
              }
            }
            return !!f && (i || (i = new gn), di(e, t, n, r, o, i));
          }

          function Sr(e) {
            return eu(e) && bd(e) == Je;
          }

          function Yr(e, t, n, r) {
            var o = n.length,
              i = o,
              a = !r;
            if (null == e) return !i;
            for (e = nc(e); o--;) {
              var s = n[o];
              if (a && s[2] ? s[1] !== e[s[0]] : !(s[0] in e)) return !1;
            }
            for (; ++o < i;) {
              s = n[o];
              var u = s[0],
                l = e[u],
                c = s[1];
              if (a && s[2]) {
                if (l === oe && !(u in e)) return !1;
              } else {
                var d = new gn;
                if (r) var f = r(l, c, u, e, t, d);
                if (!(f === oe ? Lr(c, l, he | pe, r, d) : f)) return !1;
              }
            }
            return !0;
          }

          function Dr(e) {
            return !(!Zs(e) || Ri(e)) && ($s(e) ? yc : Wt).test(Ki(e));
          }

          function xr(e) {
            return eu(e) && hr(e) == Ze;
          }

          function Cr(e) {
            return eu(e) && bd(e) == et;
          }

          function Pr(e) {
            return eu(e) && Xs(e.length) && !!mn[hr(e)];
          }

          function Er(e) {
            return "function" == typeof e ? e : null == e ? Tl : "object" == typeof e ? ff(e) ? Hr(e[0], e[1]) : Ar(e) : jl(e);
          }

          function jr(e) {
            if (!Ii(e)) return Nc(e);
            var t = [];
            for (var n in nc(e)) dc.call(e, n) && "constructor" != n && t.push(n);
            return t;
          }

          function Or(e) {
            if (!Zs(e)) return zi(e);
            var t = Ii(e),
              n = [];
            for (var r in e)("constructor" != r || !t && dc.call(e, r)) && n.push(r);
            return n;
          }

          function Rr(e, t) {
            return e < t;
          }

          function Ir(e, t) {
            var n = -1,
              r = Ws(e) ? Ql(e.length) : [];
            return ld(e, function(e, o, i) {
              r[++n] = t(e, o, i);
            }), r;
          }

          function Ar(e) {
            var t = gi(e);
            return 1 == t.length && t[0][2] ? Hi(t[0][0], t[0][1]) : function(n) {
              return n === e || Yr(n, e, t);
            };
          }

          function Hr(e, t) {
            return Ei(e) && Ai(t) ? Hi(Ji(e), t) : function(n) {
              var r = Eu(n, e);
              return r === oe && r === t ? Ou(n, e) : Lr(t, r, he | pe);
            };
          }

          function Nr(e, t, n, r, o) {
            e !== t && dd(t, function(i, a) {
              if (Zs(i)) o || (o = new gn), zr(e, t, a, n, Nr, r, o);
              else {
                var s = r ? r(e[a], i, a + "", e, t, o) : oe;
                s === oe && (s = i), Un(e, a, s);
              }
            }, Iu);
          }

          function zr(e, t, n, r, o, i, a) {
            var s = e[n],
              u = t[n],
              l = a.get(u);
            if (l) return void Un(e, n, l);
            var c = i ? i(s, u, n + "", e, t, a) : oe,
              d = c === oe;
            if (d) {
              var f = ff(u),
                h = !f && pf(u),
                p = !f && !h && gf(u);
              c = u, f || h || p ? ff(s) ? c = s : Fs(s) ? c = jo(s) : h ? (d = !1, c = bo(u, !0)) : p ? (d = !1, c = Do(u, !0)) : c = [] : uu(u) || df(u) ? (c = s, df(s) ? c = Mu(s) : (!Zs(s) || r && $s(s)) && (c = Si(u))) : d = !1;
            }
            d && (a.set(u, c), o(c, u, r, i, a), a.delete(u)), Un(e, n, c);
          }

          function Wr(e, t) {
            var n = e.length;
            if (n) return t += t < 0 ? n : 0, Ci(t, n) ? e[t] : oe;
          }

          function Fr(e, t, n) {
            var r = -1;
            return t = _(t.length ? t : [Tl], R(yi())), P(Ir(e, function(e, n, o) {
              return {
                criteria: _(t, function(t) {
                  return t(e);
                }),
                index: ++r,
                value: e
              };
            }), function(e, t) {
              return Co(e, t, n);
            });
          }

          function Ur(e, t) {
            return Gr(e, t, function(t, n) {
              return Ou(e, n);
            });
          }

          function Gr(e, t, n) {
            for (var r = -1, o = t.length, i = {}; ++r < o;) {
              var a = t[r],
                s = dr(e, a);
              n(s, a) && eo(i, go(a, e), s);
            }
            return i;
          }

          function Br(e) {
            return function(t) {
              return dr(t, e);
            };
          }

          function Vr(e, t, n, r) {
            var o = r ? T : L,
              i = -1,
              a = t.length,
              s = e;
            for (e === t && (t = jo(t)), n && (s = _(e, R(n))); ++i < a;)
              for (var u = 0, l = t[i], c = n ? n(l) : l;
                (u = o(s, c, u, r)) > -1;) s !== e && Tc.call(s, u, 1), Tc.call(e, u, 1);
            return e;
          }

          function qr(e, t) {
            for (var n = e ? t.length : 0, r = n - 1; n--;) {
              var o = t[n];
              if (n == r || o !== i) {
                var i = o;
                Ci(o) ? Tc.call(e, o, 1) : co(e, o);
              }
            }
            return e;
          }

          function Jr(e, t) {
            return e + Oc(Gc() * (t - e + 1));
          }

          function Kr(e, t, n, r) {
            for (var o = -1, i = zc(jc((t - e) / (n || 1)), 0), a = Ql(i); i--;) a[r ? i : ++o] = e, e += n;
            return a;
          }

          function $r(e, t) {
            var n = "";
            if (!e || t < 1 || t > Ee) return n;
            do {
              t % 2 && (n += e), (t = Oc(t / 2)) && (e += e);
            } while (t);
            return n;
          }

          function Qr(e, t) {
            return Td(Fi(e, t, Tl), e + "");
          }

          function Xr(e) {
            return Cn(Ju(e));
          }

          function Zr(e, t) {
            var n = Ju(e);
            return qi(n, Qn(t, 0, n.length));
          }

          function eo(e, t, n, r) {
            if (!Zs(e)) return e;
            t = go(t, e);
            for (var o = -1, i = t.length, a = i - 1, s = e; null != s && ++o < i;) {
              var u = Ji(t[o]),
                l = n;
              if (o != a) {
                var c = s[u];
                (l = r ? r(c, u, s) : oe) === oe && (l = Zs(c) ? c : Ci(t[o + 1]) ? [] : {});
              }
              Gn(s, u, l), s = s[u];
            }
            return e;
          }

          function to(e) {
            return qi(Ju(e));
          }

          function no(e, t, n) {
            var r = -1,
              o = e.length;
            t < 0 && (t = -t > o ? 0 : o + t), n = n > o ? o : n, n < 0 && (n += o), o = t > n ? 0 : n - t >>> 0, t >>>= 0;
            for (var i = Ql(o); ++r < o;) i[r] = e[r + t];
            return i;
          }

          function ro(e, t) {
            var n;
            return ld(e, function(e, r, o) {
              return !(n = t(e, r, o));
            }), !!n;
          }

          function oo(e, t, n) {
            var r = 0,
              o = null == e ? r : e.length;
            if ("number" == typeof t && t === t && o <= Ae) {
              for (; r < o;) {
                var i = r + o >>> 1,
                  a = e[i];
                null !== a && !du(a) && (n ? a <= t : a < t) ? r = i + 1 : o = i;
              }
              return o;
            }
            return io(e, t, Tl, n);
          }

          function io(e, t, n, r) {
            t = n(t);
            for (var o = 0, i = null == e ? 0 : e.length, a = t !== t, s = null === t, u = du(t), l = t === oe; o < i;) {
              var c = Oc((o + i) / 2),
                d = n(e[c]),
                f = d !== oe,
                h = null === d,
                p = d === d,
                _ = du(d);
              if (a) var m = r || p;
              else m = l ? p && (r || f) : s ? p && f && (r || !h) : u ? p && f && !h && (r || !_) : !h && !_ && (r ? d <= t : d < t);
              m ? o = c + 1 : i = c;
            }
            return Wc(i, Ie);
          }

          function ao(e, t) {
            for (var n = -1, r = e.length, o = 0, i = []; ++n < r;) {
              var a = e[n],
                s = t ? t(a) : a;
              if (!n || !zs(s, u)) {
                var u = s;
                i[o++] = 0 === a ? 0 : a;
              }
            }
            return i;
          }

          function so(e) {
            return "number" == typeof e ? e : du(e) ? Oe : +e;
          }

          function uo(e) {
            if ("string" == typeof e) return e;
            if (ff(e)) return _(e, uo) + "";
            if (du(e)) return sd ? sd.call(e) : "";
            var t = e + "";
            return "0" == t && 1 / e == -Pe ? "-0" : t;
          }

          function lo(e, t, n) {
            var r = -1,
              o = h,
              i = e.length,
              a = !0,
              s = [],
              u = s;
            if (n) a = !1, o = p;
            else if (i >= ie) {
              var l = t ? null : yd(e);
              if (l) return K(l);
              a = !1, o = A, u = new fn;
            } else u = t ? [] : s;
            e: for (; ++r < i;) {
              var c = e[r],
                d = t ? t(c) : c;
              if (c = n || 0 !== c ? c : 0, a && d === d) {
                for (var f = u.length; f--;)
                  if (u[f] === d) continue e;
                t && u.push(d), s.push(c);
              } else o(u, d, n) || (u !== s && u.push(d), s.push(c));
            }
            return s;
          }

          function co(e, t) {
            return t = go(t, e), null == (e = Ui(e, t)) || delete e[Ji(ma(t))];
          }

          function fo(e, t, n, r) {
            return eo(e, t, n(dr(e, t)), r);
          }

          function ho(e, t, n, r) {
            for (var o = e.length, i = r ? o : -1;
              (r ? i-- : ++i < o) && t(e[i], i, e););
            return n ? no(e, r ? 0 : i, r ? i + 1 : o) : no(e, r ? i + 1 : 0, r ? o : i);
          }

          function po(e, t) {
            var n = e;
            return n instanceof M && (n = n.value()), y(t, function(e, t) {
              return t.func.apply(t.thisArg, m([e], t.args));
            }, n);
          }

          function _o(e, t, n) {
            var r = e.length;
            if (r < 2) return r ? lo(e[0]) : [];
            for (var o = -1, i = Ql(r); ++o < r;)
              for (var a = e[o], s = -1; ++s < r;) s != o && (i[o] = nr(i[o] || a, e[s], t, n));
            return lo(sr(i, 1), t, n);
          }

          function mo(e, t, n) {
            for (var r = -1, o = e.length, i = t.length, a = {}; ++r < o;) {
              var s = r < i ? t[r] : oe;
              n(a, e[r], s);
            }
            return a;
          }

          function yo(e) {
            return Fs(e) ? e : [];
          }

          function vo(e) {
            return "function" == typeof e ? e : Tl;
          }

          function go(e, t) {
            return ff(e) ? e : Ei(e, t) ? [e] : Sd(wu(e));
          }

          function Mo(e, t, n) {
            var r = e.length;
            return n = n === oe ? r : n, !t && n >= r ? e : no(e, t, n);
          }

          function bo(e, t) {
            if (t) return e.slice();
            var n = e.length,
              r = bc ? bc(n) : new e.constructor(n);
            return e.copy(r), r;
          }

          function wo(e) {
            var t = new e.constructor(e.byteLength);
            return new Mc(t).set(new Mc(e)), t;
          }

          function ko(e, t) {
            var n = t ? wo(e.buffer) : e.buffer;
            return new e.constructor(n, e.byteOffset, e.byteLength);
          }

          function Lo(e, t, n) {
            return y(t ? n(V(e), ce) : V(e), i, new e.constructor);
          }

          function To(e) {
            var t = new e.constructor(e.source, Ht.exec(e));
            return t.lastIndex = e.lastIndex, t;
          }

          function So(e, t, n) {
            return y(t ? n(K(e), ce) : K(e), a, new e.constructor);
          }

          function Yo(e) {
            return ad ? nc(ad.call(e)) : {};
          }

          function Do(e, t) {
            var n = t ? wo(e.buffer) : e.buffer;
            return new e.constructor(n, e.byteOffset, e.length);
          }

          function xo(e, t) {
            if (e !== t) {
              var n = e !== oe,
                r = null === e,
                o = e === e,
                i = du(e),
                a = t !== oe,
                s = null === t,
                u = t === t,
                l = du(t);
              if (!s && !l && !i && e > t || i && a && u && !s && !l || r && a && u || !n && u || !o) return 1;
              if (!r && !i && !l && e < t || l && n && o && !r && !i || s && n && o || !a && o || !u) return -1;
            }
            return 0;
          }

          function Co(e, t, n) {
            for (var r = -1, o = e.criteria, i = t.criteria, a = o.length, s = n.length; ++r < a;) {
              var u = xo(o[r], i[r]);
              if (u) return r >= s ? u : u * ("desc" == n[r] ? -1 : 1);
            }
            return e.index - t.index;
          }

          function Po(e, t, n, r) {
            for (var o = -1, i = e.length, a = n.length, s = -1, u = t.length, l = zc(i - a, 0), c = Ql(u + l), d = !r; ++s < u;) c[s] = t[s];
            for (; ++o < a;)(d || o < i) && (c[n[o]] = e[o]);
            for (; l--;) c[s++] = e[o++];
            return c;
          }

          function Eo(e, t, n, r) {
            for (var o = -1, i = e.length, a = -1, s = n.length, u = -1, l = t.length, c = zc(i - s, 0), d = Ql(c + l), f = !r; ++o < c;) d[o] = e[o];
            for (var h = o; ++u < l;) d[h + u] = t[u];
            for (; ++a < s;)(f || o < i) && (d[h + n[a]] = e[o++]);
            return d;
          }

          function jo(e, t) {
            var n = -1,
              r = e.length;
            for (t || (t = Ql(r)); ++n < r;) t[n] = e[n];
            return t;
          }

          function Oo(e, t, n, r) {
            var o = !n;
            n || (n = {});
            for (var i = -1, a = t.length; ++i < a;) {
              var s = t[i],
                u = r ? r(n[s], e[s], s, n, e) : oe;
              u === oe && (u = e[s]), o ? Kn(n, s, u) : Gn(n, s, u);
            }
            return n;
          }

          function Ro(e, t) {
            return Oo(e, gd(e), t);
          }

          function Io(e, t) {
            return Oo(e, Md(e), t);
          }

          function Ao(e, t) {
            return function(n, r) {
              var o = ff(n) ? u : Vn,
                i = t ? t() : {};
              return o(n, e, yi(r, 2), i);
            };
          }

          function Ho(e) {
            return Qr(function(t, n) {
              var r = -1,
                o = n.length,
                i = o > 1 ? n[o - 1] : oe,
                a = o > 2 ? n[2] : oe;
              for (i = e.length > 3 && "function" == typeof i ? (o--, i) : oe, a && Pi(n[0], n[1], a) && (i = o < 3 ? oe : i, o = 1), t = nc(t); ++r < o;) {
                var s = n[r];
                s && e(t, s, r, i);
              }
              return t;
            });
          }

          function No(e, t) {
            return function(n, r) {
              if (null == n) return n;
              if (!Ws(n)) return e(n, r);
              for (var o = n.length, i = t ? o : -1, a = nc(n);
                (t ? i-- : ++i < o) && !1 !== r(a[i], i, a););
              return n;
            };
          }

          function zo(e) {
            return function(t, n, r) {
              for (var o = -1, i = nc(t), a = r(t), s = a.length; s--;) {
                var u = a[e ? s : ++o];
                if (!1 === n(i[u], u, i)) break;
              }
              return t;
            };
          }

          function Wo(e, t, n) {
            function r() {
              return (this && this !== Sn && this instanceof r ? i : e).apply(o ? n : this, arguments);
            }
            var o = t & _e,
              i = Go(e);
            return r;
          }

          function Fo(e) {
            return function(t) {
              t = wu(t);
              var n = U(t) ? ee(t) : oe,
                r = n ? n[0] : t.charAt(0),
                o = n ? Mo(n, 1).join("") : t.slice(1);
              return r[e]() + o;
            };
          }

          function Uo(e) {
            return function(t) {
              return y(Ml(el(t).replace(un, "")), e, "");
            };
          }

          function Go(e) {
            return function() {
              var t = arguments;
              switch (t.length) {
                case 0:
                  return new e;
                case 1:
                  return new e(t[0]);
                case 2:
                  return new e(t[0], t[1]);
                case 3:
                  return new e(t[0], t[1], t[2]);
                case 4:
                  return new e(t[0], t[1], t[2], t[3]);
                case 5:
                  return new e(t[0], t[1], t[2], t[3], t[4]);
                case 6:
                  return new e(t[0], t[1], t[2], t[3], t[4], t[5]);
                case 7:
                  return new e(t[0], t[1], t[2], t[3], t[4], t[5], t[6]);
              }
              var n = ud(e.prototype),
                r = e.apply(n, t);
              return Zs(r) ? r : n;
            };
          }

          function Bo(e, t, n) {
            function r() {
              for (var i = arguments.length, a = Ql(i), u = i, l = mi(r); u--;) a[u] = arguments[u];
              var c = i < 3 && a[0] !== l && a[i - 1] !== l ? [] : J(a, l);
              return (i -= c.length) < n ? ni(e, t, Jo, r.placeholder, oe, a, c, oe, oe, n - i) : s(this && this !== Sn && this instanceof r ? o : e, this, a);
            }
            var o = Go(e);
            return r;
          }

          function Vo(e) {
            return function(t, n, r) {
              var o = nc(t);
              if (!Ws(t)) {
                var i = yi(n, 3);
                t = Ru(t), n = function(e) {
                  return i(o[e], e, o);
                };
              }
              var a = e(t, n, r);
              return a > -1 ? o[i ? t[a] : a] : oe;
            };
          }

          function qo(e) {
            return fi(function(t) {
              var n = t.length,
                r = n,
                i = o.prototype.thru;
              for (e && t.reverse(); r--;) {
                var a = t[r];
                if ("function" != typeof a) throw new ic(se);
                if (i && !s && "wrapper" == _i(a)) var s = new o([], !0);
              }
              for (r = s ? r : n; ++r < n;) {
                a = t[r];
                var u = _i(a),
                  l = "wrapper" == u ? vd(a) : oe;
                s = l && Oi(l[0]) && l[1] == (we | ve | Me | ke) && !l[4].length && 1 == l[9] ? s[_i(l[0])].apply(s, l[3]) : 1 == a.length && Oi(a) ? s[u]() : s.thru(a);
              }
              return function() {
                var e = arguments,
                  r = e[0];
                if (s && 1 == e.length && ff(r)) return s.plant(r).value();
                for (var o = 0, i = n ? t[o].apply(this, e) : r; ++o < n;) i = t[o].call(this, i);
                return i;
              };
            });
          }

          function Jo(e, t, n, r, o, i, a, s, u, l) {
            function c() {
              for (var y = arguments.length, v = Ql(y), g = y; g--;) v[g] = arguments[g];
              if (p) var M = mi(c),
                b = z(v, M);
              if (r && (v = Po(v, r, o, p)), i && (v = Eo(v, i, a, p)), y -= b, p && y < l) {
                var w = J(v, M);
                return ni(e, t, Jo, c.placeholder, n, v, w, s, u, l - y);
              }
              var k = f ? n : this,
                L = h ? k[e] : e;
              return y = v.length, s ? v = Gi(v, s) : _ && y > 1 && v.reverse(), d && u < y && (v.length = u), this && this !== Sn && this instanceof c && (L = m || Go(L)), L.apply(k, v);
            }
            var d = t & we,
              f = t & _e,
              h = t & me,
              p = t & (ve | ge),
              _ = t & Le,
              m = h ? oe : Go(e);
            return c;
          }

          function Ko(e, t) {
            return function(n, r) {
              return gr(n, e, t(r), {});
            };
          }

          function $o(e, t) {
            return function(n, r) {
              var o;
              if (n === oe && r === oe) return t;
              if (n !== oe && (o = n), r !== oe) {
                if (o === oe) return r;
                "string" == typeof n || "string" == typeof r ? (n = uo(n), r = uo(r)) : (n = so(n), r = so(r)), o = e(n, r);
              }
              return o;
            };
          }

          function Qo(e) {
            return fi(function(t) {
              return t = _(t, R(yi())), Qr(function(n) {
                var r = this;
                return e(t, function(e) {
                  return s(e, r, n);
                });
              });
            });
          }

          function Xo(e, t) {
            t = t === oe ? " " : uo(t);
            var n = t.length;
            if (n < 2) return n ? $r(t, e) : t;
            var r = $r(t, jc(e / Z(t)));
            return U(t) ? Mo(ee(r), 0, e).join("") : r.slice(0, e);
          }

          function Zo(e, t, n, r) {
            function o() {
              for (var t = -1, u = arguments.length, l = -1, c = r.length, d = Ql(c + u), f = this && this !== Sn && this instanceof o ? a : e; ++l < c;) d[l] = r[l];
              for (; u--;) d[l++] = arguments[++t];
              return s(f, i ? n : this, d);
            }
            var i = t & _e,
              a = Go(e);
            return o;
          }

          function ei(e) {
            return function(t, n, r) {
              return r && "number" != typeof r && Pi(t, n, r) && (n = r = oe), t = mu(t), n === oe ? (n = t, t = 0) : n = mu(n), r = r === oe ? t < n ? 1 : -1 : mu(r), Kr(t, n, r, e);
            };
          }

          function ti(e) {
            return function(t, n) {
              return "string" == typeof t && "string" == typeof n || (t = gu(t), n = gu(n)), e(t, n);
            };
          }

          function ni(e, t, n, r, o, i, a, s, u, l) {
            var c = t & ve,
              d = c ? a : oe,
              f = c ? oe : a,
              h = c ? i : oe,
              p = c ? oe : i;
            t |= c ? Me : be, (t &= ~(c ? be : Me)) & ye || (t &= ~(_e | me));
            var _ = [e, t, o, h, d, p, f, s, u, l],
              m = n.apply(oe, _);
            return Oi(e) && kd(m, _), m.placeholder = r, Bi(m, e, t);
          }

          function ri(e) {
            var t = tc[e];
            return function(e, n) {
              if (e = gu(e), n = null == n ? 0 : Wc(yu(n), 292)) {
                var r = (wu(e) + "e").split("e");
                return r = (wu(t(r[0] + "e" + (+r[1] + n))) + "e").split("e"), +(r[0] + "e" + (+r[1] - n));
              }
              return t(e);
            };
          }

          function oi(e) {
            return function(t) {
              var n = bd(t);
              return n == Je ? V(t) : n == et ? $(t) : O(t, e(t));
            };
          }

          function ii(e, t, n, r, o, i, a, s) {
            var u = t & me;
            if (!u && "function" != typeof e) throw new ic(se);
            var l = r ? r.length : 0;
            if (l || (t &= ~(Me | be), r = o = oe), a = a === oe ? a : zc(yu(a), 0), s = s === oe ? s : yu(s), l -= o ? o.length : 0, t & be) {
              var c = r,
                d = o;
              r = o = oe;
            }
            var f = u ? oe : vd(e),
              h = [e, t, n, r, o, c, d, i, a, s];
            if (f && Ni(h, f), e = h[0], t = h[1], n = h[2], r = h[3], o = h[4], s = h[9] = h[9] === oe ? u ? 0 : e.length : zc(h[9] - l, 0), !s && t & (ve | ge) && (t &= ~(ve | ge)), t && t != _e) p = t == ve || t == ge ? Bo(e, t, s) : t != Me && t != (_e | Me) || o.length ? Jo.apply(oe, h) : Zo(e, t, n, r);
            else var p = Wo(e, t, n);
            return Bi((f ? hd : kd)(p, h), e, t);
          }

          function ai(e, t, n, r) {
            return e === oe || zs(e, uc[n]) && !dc.call(r, n) ? t : e;
          }

          function si(e, t, n, r, o, i) {
            return Zs(e) && Zs(t) && (i.set(t, e), Nr(e, t, oe, si, i), i.delete(t)), e;
          }

          function ui(e) {
            return uu(e) ? oe : e;
          }

          function li(e, t, n, r, o, i) {
            var a = n & he,
              s = e.length,
              u = t.length;
            if (s != u && !(a && u > s)) return !1;
            var l = i.get(e);
            if (l && i.get(t)) return l == t;
            var c = -1,
              d = !0,
              f = n & pe ? new fn : oe;
            for (i.set(e, t), i.set(t, e); ++c < s;) {
              var h = e[c],
                p = t[c];
              if (r) var _ = a ? r(p, h, c, t, e, i) : r(h, p, c, e, t, i);
              if (_ !== oe) {
                if (_) continue;
                d = !1;
                break;
              }
              if (f) {
                if (!g(t, function(e, t) {
                    if (!A(f, t) && (h === e || o(h, e, n, r, i))) return f.push(t);
                  })) {
                  d = !1;
                  break;
                }
              } else if (h !== p && !o(h, p, n, r, i)) {
                d = !1;
                break;
              }
            }
            return i.delete(e), i.delete(t), d;
          }

          function ci(e, t, n, r, o, i, a) {
            switch (n) {
              case st:
                if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset) return !1;
                e = e.buffer, t = t.buffer;
              case at:
                return !(e.byteLength != t.byteLength || !i(new Mc(e), new Mc(t)));
              case Fe:
              case Ue:
              case Ke:
                return zs(+e, +t);
              case Be:
                return e.name == t.name && e.message == t.message;
              case Ze:
              case tt:
                return e == t + "";
              case Je:
                var s = V;
              case et:
                var u = r & he;
                if (s || (s = K), e.size != t.size && !u) return !1;
                var l = a.get(e);
                if (l) return l == t;
                r |= pe, a.set(e, t);
                var c = li(s(e), s(t), r, o, i, a);
                return a.delete(e), c;
              case nt:
                if (ad) return ad.call(e) == ad.call(t);
            }
            return !1;
          }

          function di(e, t, n, r, o, i) {
            var a = n & he,
              s = hi(e),
              u = s.length;
            if (u != hi(t).length && !a) return !1;
            for (var l = u; l--;) {
              var c = s[l];
              if (!(a ? c in t : dc.call(t, c))) return !1;
            }
            var d = i.get(e);
            if (d && i.get(t)) return d == t;
            var f = !0;
            i.set(e, t), i.set(t, e);
            for (var h = a; ++l < u;) {
              c = s[l];
              var p = e[c],
                _ = t[c];
              if (r) var m = a ? r(_, p, c, t, e, i) : r(p, _, c, e, t, i);
              if (!(m === oe ? p === _ || o(p, _, n, r, i) : m)) {
                f = !1;
                break;
              }
              h || (h = "constructor" == c);
            }
            if (f && !h) {
              var y = e.constructor,
                v = t.constructor;
              y != v && "constructor" in e && "constructor" in t && !("function" == typeof y && y instanceof y && "function" == typeof v && v instanceof v) && (f = !1);
            }
            return i.delete(e), i.delete(t), f;
          }

          function fi(e) {
            return Td(Fi(e, oe, ua), e + "");
          }

          function hi(e) {
            return fr(e, Ru, gd);
          }

          function pi(e) {
            return fr(e, Iu, Md);
          }

          function _i(e) {
            for (var t = e.name + "", n = Zc[t], r = dc.call(Zc, t) ? n.length : 0; r--;) {
              var o = n[r],
                i = o.func;
              if (null == i || i == e) return o.name;
            }
            return t;
          }

          function mi(e) {
            return (dc.call(n, "placeholder") ? n : e).placeholder;
          }

          function yi() {
            var e = n.iteratee || Sl;
            return e = e === Sl ? Er : e, arguments.length ? e(arguments[0], arguments[1]) : e;
          }

          function vi(e, t) {
            var n = e.__data__;
            return ji(t) ? n["string" == typeof t ? "string" : "hash"] : n.map;
          }

          function gi(e) {
            for (var t = Ru(e), n = t.length; n--;) {
              var r = t[n],
                o = e[r];
              t[n] = [r, o, Ai(o)];
            }
            return t;
          }

          function Mi(e, t) {
            var n = F(e, t);
            return Dr(n) ? n : oe;
          }

          function bi(e) {
            var t = dc.call(e, Dc),
              n = e[Dc];
            try {
              e[Dc] = oe;
            } catch (e) {}
            var r = pc.call(e);
            return t ? e[Dc] = n : delete e[Dc], r;
          }

          function wi(e, t, n) {
            for (var r = -1, o = n.length; ++r < o;) {
              var i = n[r],
                a = i.size;
              switch (i.type) {
                case "drop":
                  e += a;
                  break;
                case "dropRight":
                  t -= a;
                  break;
                case "take":
                  t = Wc(t, e + a);
                  break;
                case "takeRight":
                  e = zc(e, t - a);
              }
            }
            return {
              start: e,
              end: t
            };
          }

          function ki(e) {
            var t = e.match(Ot);
            return t ? t[1].split(Rt) : [];
          }

          function Li(e, t, n) {
            t = go(t, e);
            for (var r = -1, o = t.length, i = !1; ++r < o;) {
              var a = Ji(t[r]);
              if (!(i = null != e && n(e, a))) break;
              e = e[a];
            }
            return i || ++r != o ? i : !!(o = null == e ? 0 : e.length) && Xs(o) && Ci(a, o) && (ff(e) || df(e));
          }

          function Ti(e) {
            var t = e.length,
              n = e.constructor(t);
            return t && "string" == typeof e[0] && dc.call(e, "index") && (n.index = e.index, n.input = e.input), n;
          }

          function Si(e) {
            return "function" != typeof e.constructor || Ii(e) ? {} : ud(wc(e));
          }

          function Yi(e, t, n, r) {
            var o = e.constructor;
            switch (t) {
              case at:
                return wo(e);
              case Fe:
              case Ue:
                return new o(+e);
              case st:
                return ko(e, r);
              case ut:
              case lt:
              case ct:
              case dt:
              case ft:
              case ht:
              case pt:
              case _t:
              case mt:
                return Do(e, r);
              case Je:
                return Lo(e, r, n);
              case Ke:
              case tt:
                return new o(e);
              case Ze:
                return To(e);
              case et:
                return So(e, r, n);
              case nt:
                return Yo(e);
            }
          }

          function Di(e, t) {
            var n = t.length;
            if (!n) return e;
            var r = n - 1;
            return t[r] = (n > 1 ? "& " : "") + t[r], t = t.join(n > 2 ? ", " : " "), e.replace(jt, "{\n/* [wrapped with " + t + "] */\n");
          }

          function xi(e) {
            return ff(e) || df(e) || !!(Sc && e && e[Sc]);
          }

          function Ci(e, t) {
            return !!(t = null == t ? Ee : t) && ("number" == typeof e || Ut.test(e)) && e > -1 && e % 1 == 0 && e < t;
          }

          function Pi(e, t, n) {
            if (!Zs(n)) return !1;
            var r = typeof t;
            return !!("number" == r ? Ws(n) && Ci(t, n.length) : "string" == r && t in n) && zs(n[t], e);
          }

          function Ei(e, t) {
            if (ff(e)) return !1;
            var n = typeof e;
            return !("number" != n && "symbol" != n && "boolean" != n && null != e && !du(e)) || St.test(e) || !Tt.test(e) || null != t && e in nc(t);
          }

          function ji(e) {
            var t = typeof e;
            return "string" == t || "number" == t || "symbol" == t || "boolean" == t ? "__proto__" !== e : null === e;
          }

          function Oi(e) {
            var t = _i(e),
              r = n[t];
            if ("function" != typeof r || !(t in M.prototype)) return !1;
            if (e === r) return !0;
            var o = vd(r);
            return !!o && e === o[0];
          }

          function Ri(e) {
            return !!hc && hc in e;
          }

          function Ii(e) {
            var t = e && e.constructor;
            return e === ("function" == typeof t && t.prototype || uc);
          }

          function Ai(e) {
            return e === e && !Zs(e);
          }

          function Hi(e, t) {
            return function(n) {
              return null != n && n[e] === t && (t !== oe || e in nc(n));
            };
          }

          function Ni(e, t) {
            var n = e[1],
              r = t[1],
              o = n | r,
              i = o < (_e | me | we),
              a = r == we && n == ve || r == we && n == ke && e[7].length <= t[8] || r == (we | ke) && t[7].length <= t[8] && n == ve;
            if (!i && !a) return e;
            r & _e && (e[2] = t[2], o |= n & _e ? 0 : ye);
            var s = t[3];
            if (s) {
              var u = e[3];
              e[3] = u ? Po(u, s, t[4]) : s, e[4] = u ? J(e[3], le) : t[4];
            }
            return s = t[5], s && (u = e[5], e[5] = u ? Eo(u, s, t[6]) : s, e[6] = u ? J(e[5], le) : t[6]), s = t[7], s && (e[7] = s), r & we && (e[8] = null == e[8] ? t[8] : Wc(e[8], t[8])), null == e[9] && (e[9] = t[9]), e[0] = t[0], e[1] = o, e;
          }

          function zi(e) {
            var t = [];
            if (null != e)
              for (var n in nc(e)) t.push(n);
            return t;
          }

          function Wi(e) {
            return pc.call(e);
          }

          function Fi(e, t, n) {
            return t = zc(t === oe ? e.length - 1 : t, 0),
              function() {
                for (var r = arguments, o = -1, i = zc(r.length - t, 0), a = Ql(i); ++o < i;) a[o] = r[t + o];
                o = -1;
                for (var u = Ql(t + 1); ++o < t;) u[o] = r[o];
                return u[t] = n(a), s(e, this, u);
              };
          }

          function Ui(e, t) {
            return t.length < 2 ? e : dr(e, no(t, 0, -1));
          }

          function Gi(e, t) {
            for (var n = e.length, r = Wc(t.length, n), o = jo(e); r--;) {
              var i = t[r];
              e[r] = Ci(i, n) ? o[i] : oe;
            }
            return e;
          }

          function Bi(e, t, n) {
            var r = t + "";
            return Td(e, Di(r, $i(ki(r), n)));
          }

          function Vi(e) {
            var t = 0,
              n = 0;
            return function() {
              var r = Fc(),
                o = De - (r - n);
              if (n = r, o > 0) {
                if (++t >= Ye) return arguments[0];
              } else t = 0;
              return e.apply(oe, arguments);
            };
          }

          function qi(e, t) {
            var n = -1,
              r = e.length,
              o = r - 1;
            for (t = t === oe ? r : t; ++n < t;) {
              var i = Jr(n, o),
                a = e[i];
              e[i] = e[n], e[n] = a;
            }
            return e.length = t, e;
          }

          function Ji(e) {
            if ("string" == typeof e || du(e)) return e;
            var t = e + "";
            return "0" == t && 1 / e == -Pe ? "-0" : t;
          }

          function Ki(e) {
            if (null != e) {
              try {
                return cc.call(e);
              } catch (e) {}
              try {
                return e + "";
              } catch (e) {}
            }
            return "";
          }

          function $i(e, t) {
            return l(He, function(n) {
              var r = "_." + n[0];
              t & n[1] && !h(e, r) && e.push(r);
            }), e.sort();
          }

          function Qi(e) {
            if (e instanceof M) return e.clone();
            var t = new o(e.__wrapped__, e.__chain__);
            return t.__actions__ = jo(e.__actions__), t.__index__ = e.__index__, t.__values__ = e.__values__, t;
          }

          function Xi(e, t, n) {
            t = (n ? Pi(e, t, n) : t === oe) ? 1 : zc(yu(t), 0);
            var r = null == e ? 0 : e.length;
            if (!r || t < 1) return [];
            for (var o = 0, i = 0, a = Ql(jc(r / t)); o < r;) a[i++] = no(e, o, o += t);
            return a;
          }

          function Zi(e) {
            for (var t = -1, n = null == e ? 0 : e.length, r = 0, o = []; ++t < n;) {
              var i = e[t];
              i && (o[r++] = i);
            }
            return o;
          }

          function ea() {
            var e = arguments.length;
            if (!e) return [];
            for (var t = Ql(e - 1), n = arguments[0], r = e; r--;) t[r - 1] = arguments[r];
            return m(ff(n) ? jo(n) : [n], sr(t, 1));
          }

          function ta(e, t, n) {
            var r = null == e ? 0 : e.length;
            return r ? (t = n || t === oe ? 1 : yu(t), no(e, t < 0 ? 0 : t, r)) : [];
          }

          function na(e, t, n) {
            var r = null == e ? 0 : e.length;
            return r ? (t = n || t === oe ? 1 : yu(t), t = r - t, no(e, 0, t < 0 ? 0 : t)) : [];
          }

          function ra(e, t) {
            return e && e.length ? ho(e, yi(t, 3), !0, !0) : [];
          }

          function oa(e, t) {
            return e && e.length ? ho(e, yi(t, 3), !0) : [];
          }

          function ia(e, t, n, r) {
            var o = null == e ? 0 : e.length;
            return o ? (n && "number" != typeof n && Pi(e, t, n) && (n = 0, r = o), ir(e, t, n, r)) : [];
          }

          function aa(e, t, n) {
            var r = null == e ? 0 : e.length;
            if (!r) return -1;
            var o = null == n ? 0 : yu(n);
            return o < 0 && (o = zc(r + o, 0)), k(e, yi(t, 3), o);
          }

          function sa(e, t, n) {
            var r = null == e ? 0 : e.length;
            if (!r) return -1;
            var o = r - 1;
            return n !== oe && (o = yu(n), o = n < 0 ? zc(r + o, 0) : Wc(o, r - 1)), k(e, yi(t, 3), o, !0);
          }

          function ua(e) {
            return (null == e ? 0 : e.length) ? sr(e, 1) : [];
          }

          function la(e) {
            return (null == e ? 0 : e.length) ? sr(e, Pe) : [];
          }

          function ca(e, t) {
            return (null == e ? 0 : e.length) ? (t = t === oe ? 1 : yu(t), sr(e, t)) : [];
          }

          function da(e) {
            for (var t = -1, n = null == e ? 0 : e.length, r = {}; ++t < n;) {
              var o = e[t];
              r[o[0]] = o[1];
            }
            return r;
          }

          function fa(e) {
            return e && e.length ? e[0] : oe;
          }

          function ha(e, t, n) {
            var r = null == e ? 0 : e.length;
            if (!r) return -1;
            var o = null == n ? 0 : yu(n);
            return o < 0 && (o = zc(r + o, 0)), L(e, t, o);
          }

          function pa(e) {
            return (null == e ? 0 : e.length) ? no(e, 0, -1) : [];
          }

          function _a(e, t) {
            return null == e ? "" : Hc.call(e, t);
          }

          function ma(e) {
            var t = null == e ? 0 : e.length;
            return t ? e[t - 1] : oe;
          }

          function ya(e, t, n) {
            var r = null == e ? 0 : e.length;
            if (!r) return -1;
            var o = r;
            return n !== oe && (o = yu(n), o = o < 0 ? zc(r + o, 0) : Wc(o, r - 1)), t === t ? X(e, t, o) : k(e, S, o, !0);
          }

          function va(e, t) {
            return e && e.length ? Wr(e, yu(t)) : oe;
          }

          function ga(e, t) {
            return e && e.length && t && t.length ? Vr(e, t) : e;
          }

          function Ma(e, t, n) {
            return e && e.length && t && t.length ? Vr(e, t, yi(n, 2)) : e;
          }

          function ba(e, t, n) {
            return e && e.length && t && t.length ? Vr(e, t, oe, n) : e;
          }

          function wa(e, t) {
            var n = [];
            if (!e || !e.length) return n;
            var r = -1,
              o = [],
              i = e.length;
            for (t = yi(t, 3); ++r < i;) {
              var a = e[r];
              t(a, r, e) && (n.push(a), o.push(r));
            }
            return qr(e, o), n;
          }

          function ka(e) {
            return null == e ? e : Bc.call(e);
          }

          function La(e, t, n) {
            var r = null == e ? 0 : e.length;
            return r ? (n && "number" != typeof n && Pi(e, t, n) ? (t = 0, n = r) : (t = null == t ? 0 : yu(t), n = n === oe ? r : yu(n)), no(e, t, n)) : [];
          }

          function Ta(e, t) {
            return oo(e, t);
          }

          function Sa(e, t, n) {
            return io(e, t, yi(n, 2));
          }

          function Ya(e, t) {
            var n = null == e ? 0 : e.length;
            if (n) {
              var r = oo(e, t);
              if (r < n && zs(e[r], t)) return r;
            }
            return -1;
          }

          function Da(e, t) {
            return oo(e, t, !0);
          }

          function xa(e, t, n) {
            return io(e, t, yi(n, 2), !0);
          }

          function Ca(e, t) {
            if (null == e ? 0 : e.length) {
              var n = oo(e, t, !0) - 1;
              if (zs(e[n], t)) return n;
            }
            return -1;
          }

          function Pa(e) {
            return e && e.length ? ao(e) : [];
          }

          function Ea(e, t) {
            return e && e.length ? ao(e, yi(t, 2)) : [];
          }

          function ja(e) {
            var t = null == e ? 0 : e.length;
            return t ? no(e, 1, t) : [];
          }

          function Oa(e, t, n) {
            return e && e.length ? (t = n || t === oe ? 1 : yu(t), no(e, 0, t < 0 ? 0 : t)) : [];
          }

          function Ra(e, t, n) {
            var r = null == e ? 0 : e.length;
            return r ? (t = n || t === oe ? 1 : yu(t), t = r - t, no(e, t < 0 ? 0 : t, r)) : [];
          }

          function Ia(e, t) {
            return e && e.length ? ho(e, yi(t, 3), !1, !0) : [];
          }

          function Aa(e, t) {
            return e && e.length ? ho(e, yi(t, 3)) : [];
          }

          function Ha(e) {
            return e && e.length ? lo(e) : [];
          }

          function Na(e, t) {
            return e && e.length ? lo(e, yi(t, 2)) : [];
          }

          function za(e, t) {
            return t = "function" == typeof t ? t : oe, e && e.length ? lo(e, oe, t) : [];
          }

          function Wa(e) {
            if (!e || !e.length) return [];
            var t = 0;
            return e = f(e, function(e) {
              if (Fs(e)) return t = zc(e.length, t), !0;
            }), j(t, function(t) {
              return _(e, D(t));
            });
          }

          function Fa(e, t) {
            if (!e || !e.length) return [];
            var n = Wa(e);
            return null == t ? n : _(n, function(e) {
              return s(t, oe, e);
            });
          }

          function Ua(e, t) {
            return mo(e || [], t || [], Gn);
          }

          function Ga(e, t) {
            return mo(e || [], t || [], eo);
          }

          function Ba(e) {
            var t = n(e);
            return t.__chain__ = !0, t;
          }

          function Va(e, t) {
            return t(e), e;
          }

          function qa(e, t) {
            return t(e);
          }

          function Ja() {
            return Ba(this);
          }

          function Ka() {
            return new o(this.value(), this.__chain__);
          }

          function $a() {
            this.__values__ === oe && (this.__values__ = _u(this.value()));
            var e = this.__index__ >= this.__values__.length;
            return {
              done: e,
              value: e ? oe : this.__values__[this.__index__++]
            };
          }

          function Qa() {
            return this;
          }

          function Xa(e) {
            for (var t, n = this; n instanceof r;) {
              var o = Qi(n);
              o.__index__ = 0, o.__values__ = oe, t ? i.__wrapped__ = o : t = o;
              var i = o;
              n = n.__wrapped__;
            }
            return i.__wrapped__ = e, t;
          }

          function Za() {
            var e = this.__wrapped__;
            if (e instanceof M) {
              var t = e;
              return this.__actions__.length && (t = new M(this)), t = t.reverse(), t.__actions__.push({
                func: qa,
                args: [ka],
                thisArg: oe
              }), new o(t, this.__chain__);
            }
            return this.thru(ka);
          }

          function es() {
            return po(this.__wrapped__, this.__actions__);
          }

          function ts(e, t, n) {
            var r = ff(e) ? d : rr;
            return n && Pi(e, t, n) && (t = oe), r(e, yi(t, 3));
          }

          function ns(e, t) {
            return (ff(e) ? f : ar)(e, yi(t, 3));
          }

          function rs(e, t) {
            return sr(ls(e, t), 1);
          }

          function os(e, t) {
            return sr(ls(e, t), Pe);
          }

          function is(e, t, n) {
            return n = n === oe ? 1 : yu(n), sr(ls(e, t), n);
          }

          function as(e, t) {
            return (ff(e) ? l : ld)(e, yi(t, 3));
          }

          function ss(e, t) {
            return (ff(e) ? c : cd)(e, yi(t, 3));
          }

          function us(e, t, n, r) {
            e = Ws(e) ? e : Ju(e), n = n && !r ? yu(n) : 0;
            var o = e.length;
            return n < 0 && (n = zc(o + n, 0)), cu(e) ? n <= o && e.indexOf(t, n) > -1 : !!o && L(e, t, n) > -1;
          }

          function ls(e, t) {
            return (ff(e) ? _ : Ir)(e, yi(t, 3));
          }

          function cs(e, t, n, r) {
            return null == e ? [] : (ff(t) || (t = null == t ? [] : [t]), n = r ? oe : n, ff(n) || (n = null == n ? [] : [n]), Fr(e, t, n));
          }

          function ds(e, t, n) {
            var r = ff(e) ? y : C,
              o = arguments.length < 3;
            return r(e, yi(t, 4), n, o, ld);
          }

          function fs(e, t, n) {
            var r = ff(e) ? v : C,
              o = arguments.length < 3;
            return r(e, yi(t, 4), n, o, cd);
          }

          function hs(e, t) {
            return (ff(e) ? f : ar)(e, Ys(yi(t, 3)));
          }

          function ps(e) {
            return (ff(e) ? Cn : Xr)(e);
          }

          function _s(e, t, n) {
            return t = (n ? Pi(e, t, n) : t === oe) ? 1 : yu(t), (ff(e) ? Pn : Zr)(e, t);
          }

          function ms(e) {
            return (ff(e) ? Hn : to)(e);
          }

          function ys(e) {
            if (null == e) return 0;
            if (Ws(e)) return cu(e) ? Z(e) : e.length;
            var t = bd(e);
            return t == Je || t == et ? e.size : jr(e).length;
          }

          function vs(e, t, n) {
            var r = ff(e) ? g : ro;
            return n && Pi(e, t, n) && (t = oe), r(e, yi(t, 3));
          }

          function gs(e, t) {
            if ("function" != typeof t) throw new ic(se);
            return e = yu(e),
              function() {
                if (--e < 1) return t.apply(this, arguments);
              };
          }

          function Ms(e, t, n) {
            return t = n ? oe : t, t = e && null == t ? e.length : t, ii(e, we, oe, oe, oe, oe, t);
          }

          function bs(e, t) {
            var n;
            if ("function" != typeof t) throw new ic(se);
            return e = yu(e),
              function() {
                return --e > 0 && (n = t.apply(this, arguments)), e <= 1 && (t = oe), n;
              };
          }

          function ws(e, t, n) {
            t = n ? oe : t;
            var r = ii(e, ve, oe, oe, oe, oe, oe, t);
            return r.placeholder = ws.placeholder, r;
          }

          function ks(e, t, n) {
            t = n ? oe : t;
            var r = ii(e, ge, oe, oe, oe, oe, oe, t);
            return r.placeholder = ks.placeholder, r;
          }

          function Ls(e, t, n) {
            function r(t) {
              var n = f,
                r = h;
              return f = h = oe, v = t, _ = e.apply(r, n);
            }

            function o(e) {
              return v = e, m = Ld(s, t), g ? r(e) : _;
            }

            function i(e) {
              var n = e - y,
                r = e - v,
                o = t - n;
              return M ? Wc(o, p - r) : o;
            }

            function a(e) {
              var n = e - y,
                r = e - v;
              return y === oe || n >= t || n < 0 || M && r >= p;
            }

            function s() {
              var e = Zd();
              if (a(e)) return u(e);
              m = Ld(s, i(e));
            }

            function u(e) {
              return m = oe, b && f ? r(e) : (f = h = oe, _);
            }

            function l() {
              m !== oe && md(m), v = 0, f = y = h = m = oe;
            }

            function c() {
              return m === oe ? _ : u(Zd());
            }

            function d() {
              var e = Zd(),
                n = a(e);
              if (f = arguments, h = this, y = e, n) {
                if (m === oe) return o(y);
                if (M) return m = Ld(s, t), r(y);
              }
              return m === oe && (m = Ld(s, t)), _;
            }
            var f, h, p, _, m, y, v = 0,
              g = !1,
              M = !1,
              b = !0;
            if ("function" != typeof e) throw new ic(se);
            return t = gu(t) || 0, Zs(n) && (g = !!n.leading, M = "maxWait" in n, p = M ? zc(gu(n.maxWait) || 0, t) : p, b = "trailing" in n ? !!n.trailing : b), d.cancel = l, d.flush = c, d;
          }

          function Ts(e) {
            return ii(e, Le);
          }

          function Ss(e, t) {
            if ("function" != typeof e || null != t && "function" != typeof t) throw new ic(se);
            var n = function() {
              var r = arguments,
                o = t ? t.apply(this, r) : r[0],
                i = n.cache;
              if (i.has(o)) return i.get(o);
              var a = e.apply(this, r);
              return n.cache = i.set(o, a) || i, a;
            };
            return n.cache = new(Ss.Cache || rn), n;
          }

          function Ys(e) {
            if ("function" != typeof e) throw new ic(se);
            return function() {
              var t = arguments;
              switch (t.length) {
                case 0:
                  return !e.call(this);
                case 1:
                  return !e.call(this, t[0]);
                case 2:
                  return !e.call(this, t[0], t[1]);
                case 3:
                  return !e.call(this, t[0], t[1], t[2]);
              }
              return !e.apply(this, t);
            };
          }

          function Ds(e) {
            return bs(2, e);
          }

          function xs(e, t) {
            if ("function" != typeof e) throw new ic(se);
            return t = t === oe ? t : yu(t), Qr(e, t);
          }

          function Cs(e, t) {
            if ("function" != typeof e) throw new ic(se);
            return t = null == t ? 0 : zc(yu(t), 0), Qr(function(n) {
              var r = n[t],
                o = Mo(n, 0, t);
              return r && m(o, r), s(e, this, o);
            });
          }

          function Ps(e, t, n) {
            var r = !0,
              o = !0;
            if ("function" != typeof e) throw new ic(se);
            return Zs(n) && (r = "leading" in n ? !!n.leading : r, o = "trailing" in n ? !!n.trailing : o), Ls(e, t, {
              leading: r,
              maxWait: t,
              trailing: o
            });
          }

          function Es(e) {
            return Ms(e, 1);
          }

          function js(e, t) {
            return af(vo(t), e);
          }

          function Os() {
            if (!arguments.length) return [];
            var e = arguments[0];
            return ff(e) ? e : [e];
          }

          function Rs(e) {
            return Xn(e, fe);
          }

          function Is(e, t) {
            return t = "function" == typeof t ? t : oe, Xn(e, fe, t);
          }

          function As(e) {
            return Xn(e, ce | fe);
          }

          function Hs(e, t) {
            return t = "function" == typeof t ? t : oe, Xn(e, ce | fe, t);
          }

          function Ns(e, t) {
            return null == t || er(e, t, Ru(t));
          }

          function zs(e, t) {
            return e === t || e !== e && t !== t;
          }

          function Ws(e) {
            return null != e && Xs(e.length) && !$s(e);
          }

          function Fs(e) {
            return eu(e) && Ws(e);
          }

          function Us(e) {
            return !0 === e || !1 === e || eu(e) && hr(e) == Fe;
          }

          function Gs(e) {
            return eu(e) && 1 === e.nodeType && !uu(e);
          }

          function Bs(e) {
            if (null == e) return !0;
            if (Ws(e) && (ff(e) || "string" == typeof e || "function" == typeof e.splice || pf(e) || gf(e) || df(e))) return !e.length;
            var t = bd(e);
            if (t == Je || t == et) return !e.size;
            if (Ii(e)) return !jr(e).length;
            for (var n in e)
              if (dc.call(e, n)) return !1;
            return !0;
          }

          function Vs(e, t) {
            return Lr(e, t);
          }

          function qs(e, t, n) {
            n = "function" == typeof n ? n : oe;
            var r = n ? n(e, t) : oe;
            return r === oe ? Lr(e, t, oe, n) : !!r;
          }

          function Js(e) {
            if (!eu(e)) return !1;
            var t = hr(e);
            return t == Be || t == Ge || "string" == typeof e.message && "string" == typeof e.name && !uu(e);
          }

          function Ks(e) {
            return "number" == typeof e && Ac(e);
          }

          function $s(e) {
            if (!Zs(e)) return !1;
            var t = hr(e);
            return t == Ve || t == qe || t == We || t == Xe;
          }

          function Qs(e) {
            return "number" == typeof e && e == yu(e);
          }

          function Xs(e) {
            return "number" == typeof e && e > -1 && e % 1 == 0 && e <= Ee;
          }

          function Zs(e) {
            var t = typeof e;
            return null != e && ("object" == t || "function" == t);
          }

          function eu(e) {
            return null != e && "object" == typeof e;
          }

          function tu(e, t) {
            return e === t || Yr(e, t, gi(t));
          }

          function nu(e, t, n) {
            return n = "function" == typeof n ? n : oe, Yr(e, t, gi(t), n);
          }

          function ru(e) {
            return su(e) && e != +e;
          }

          function ou(e) {
            if (wd(e)) throw new Zl(ae);
            return Dr(e);
          }

          function iu(e) {
            return null === e;
          }

          function au(e) {
            return null == e;
          }

          function su(e) {
            return "number" == typeof e || eu(e) && hr(e) == Ke;
          }

          function uu(e) {
            if (!eu(e) || hr(e) != Qe) return !1;
            var t = wc(e);
            if (null === t) return !0;
            var n = dc.call(t, "constructor") && t.constructor;
            return "function" == typeof n && n instanceof n && cc.call(n) == _c;
          }

          function lu(e) {
            return Qs(e) && e >= -Ee && e <= Ee;
          }

          function cu(e) {
            return "string" == typeof e || !ff(e) && eu(e) && hr(e) == tt;
          }

          function du(e) {
            return "symbol" == typeof e || eu(e) && hr(e) == nt;
          }

          function fu(e) {
            return e === oe;
          }

          function hu(e) {
            return eu(e) && bd(e) == ot;
          }

          function pu(e) {
            return eu(e) && hr(e) == it;
          }

          function _u(e) {
            if (!e) return [];
            if (Ws(e)) return cu(e) ? ee(e) : jo(e);
            if (Yc && e[Yc]) return B(e[Yc]());
            var t = bd(e);
            return (t == Je ? V : t == et ? K : Ju)(e);
          }

          function mu(e) {
            return e ? (e = gu(e)) === Pe || e === -Pe ? (e < 0 ? -1 : 1) * je : e === e ? e : 0 : 0 === e ? e : 0;
          }

          function yu(e) {
            var t = mu(e),
              n = t % 1;
            return t === t ? n ? t - n : t : 0;
          }

          function vu(e) {
            return e ? Qn(yu(e), 0, Re) : 0;
          }

          function gu(e) {
            if ("number" == typeof e) return e;
            if (du(e)) return Oe;
            if (Zs(e)) {
              var t = "function" == typeof e.valueOf ? e.valueOf() : e;
              e = Zs(t) ? t + "" : t;
            }
            if ("string" != typeof e) return 0 === e ? e : +e;
            e = e.replace(Ct, "");
            var n = zt.test(e);
            return n || Ft.test(e) ? kn(e.slice(2), n ? 2 : 8) : Nt.test(e) ? Oe : +e;
          }

          function Mu(e) {
            return Oo(e, Iu(e));
          }

          function bu(e) {
            return e ? Qn(yu(e), -Ee, Ee) : 0 === e ? e : 0;
          }

          function wu(e) {
            return null == e ? "" : uo(e);
          }

          function ku(e, t) {
            var n = ud(e);
            return null == t ? n : qn(n, t);
          }

          function Lu(e, t) {
            return w(e, yi(t, 3), ur);
          }

          function Tu(e, t) {
            return w(e, yi(t, 3), lr);
          }

          function Su(e, t) {
            return null == e ? e : dd(e, yi(t, 3), Iu);
          }

          function Yu(e, t) {
            return null == e ? e : fd(e, yi(t, 3), Iu);
          }

          function Du(e, t) {
            return e && ur(e, yi(t, 3));
          }

          function xu(e, t) {
            return e && lr(e, yi(t, 3));
          }

          function Cu(e) {
            return null == e ? [] : cr(e, Ru(e));
          }

          function Pu(e) {
            return null == e ? [] : cr(e, Iu(e));
          }

          function Eu(e, t, n) {
            var r = null == e ? oe : dr(e, t);
            return r === oe ? n : r;
          }

          function ju(e, t) {
            return null != e && Li(e, t, _r);
          }

          function Ou(e, t) {
            return null != e && Li(e, t, mr);
          }

          function Ru(e) {
            return Ws(e) ? Dn(e) : jr(e);
          }

          function Iu(e) {
            return Ws(e) ? Dn(e, !0) : Or(e);
          }

          function Au(e, t) {
            var n = {};
            return t = yi(t, 3), ur(e, function(e, r, o) {
              Kn(n, t(e, r, o), e);
            }), n;
          }

          function Hu(e, t) {
            var n = {};
            return t = yi(t, 3), ur(e, function(e, r, o) {
              Kn(n, r, t(e, r, o));
            }), n;
          }

          function Nu(e, t) {
            return zu(e, Ys(yi(t)));
          }

          function zu(e, t) {
            if (null == e) return {};
            var n = _(pi(e), function(e) {
              return [e];
            });
            return t = yi(t), Gr(e, n, function(e, n) {
              return t(e, n[0]);
            });
          }

          function Wu(e, t, n) {
            t = go(t, e);
            var r = -1,
              o = t.length;
            for (o || (o = 1, e = oe); ++r < o;) {
              var i = null == e ? oe : e[Ji(t[r])];
              i === oe && (r = o, i = n), e = $s(i) ? i.call(e) : i;
            }
            return e;
          }

          function Fu(e, t, n) {
            return null == e ? e : eo(e, t, n);
          }

          function Uu(e, t, n, r) {
            return r = "function" == typeof r ? r : oe, null == e ? e : eo(e, t, n, r);
          }

          function Gu(e, t, n) {
            var r = ff(e),
              o = r || pf(e) || gf(e);
            if (t = yi(t, 4), null == n) {
              var i = e && e.constructor;
              n = o ? r ? new i : [] : Zs(e) && $s(i) ? ud(wc(e)) : {};
            }
            return (o ? l : ur)(e, function(e, r, o) {
              return t(n, e, r, o);
            }), n;
          }

          function Bu(e, t) {
            return null == e || co(e, t);
          }

          function Vu(e, t, n) {
            return null == e ? e : fo(e, t, vo(n));
          }

          function qu(e, t, n, r) {
            return r = "function" == typeof r ? r : oe, null == e ? e : fo(e, t, vo(n), r);
          }

          function Ju(e) {
            return null == e ? [] : I(e, Ru(e));
          }

          function Ku(e) {
            return null == e ? [] : I(e, Iu(e));
          }

          function $u(e, t, n) {
            return n === oe && (n = t, t = oe), n !== oe && (n = gu(n), n = n === n ? n : 0), t !== oe && (t = gu(t), t = t === t ? t : 0), Qn(gu(e), t, n);
          }

          function Qu(e, t, n) {
            return t = mu(t), n === oe ? (n = t, t = 0) : n = mu(n), e = gu(e), yr(e, t, n);
          }

          function Xu(e, t, n) {
            if (n && "boolean" != typeof n && Pi(e, t, n) && (t = n = oe), n === oe && ("boolean" == typeof t ? (n = t, t = oe) : "boolean" == typeof e && (n = e, e = oe)), e === oe && t === oe ? (e = 0, t = 1) : (e = mu(e), t === oe ? (t = e, e = 0) : t = mu(t)), e > t) {
              var r = e;
              e = t, t = r;
            }
            if (n || e % 1 || t % 1) {
              var o = Gc();
              return Wc(e + o * (t - e + wn("1e-" + ((o + "").length - 1))), t);
            }
            return Jr(e, t);
          }

          function Zu(e) {
            return Bf(wu(e).toLowerCase());
          }

          function el(e) {
            return (e = wu(e)) && e.replace(Gt, Nn).replace(ln, "");
          }

          function tl(e, t, n) {
            e = wu(e), t = uo(t);
            var r = e.length;
            n = n === oe ? r : Qn(yu(n), 0, r);
            var o = n;
            return (n -= t.length) >= 0 && e.slice(n, o) == t;
          }

          function nl(e) {
            return e = wu(e), e && kt.test(e) ? e.replace(bt, zn) : e;
          }

          function rl(e) {
            return e = wu(e), e && xt.test(e) ? e.replace(Dt, "\\$&") : e;
          }

          function ol(e, t, n) {
            e = wu(e), t = yu(t);
            var r = t ? Z(e) : 0;
            if (!t || r >= t) return e;
            var o = (t - r) / 2;
            return Xo(Oc(o), n) + e + Xo(jc(o), n);
          }

          function il(e, t, n) {
            e = wu(e), t = yu(t);
            var r = t ? Z(e) : 0;
            return t && r < t ? e + Xo(t - r, n) : e;
          }

          function al(e, t, n) {
            e = wu(e), t = yu(t);
            var r = t ? Z(e) : 0;
            return t && r < t ? Xo(t - r, n) + e : e;
          }

          function sl(e, t, n) {
            return n || null == t ? t = 0 : t && (t = +t), Uc(wu(e).replace(Pt, ""), t || 0);
          }

          function ul(e, t, n) {
            return t = (n ? Pi(e, t, n) : t === oe) ? 1 : yu(t), $r(wu(e), t);
          }

          function ll() {
            var e = arguments,
              t = wu(e[0]);
            return e.length < 3 ? t : t.replace(e[1], e[2]);
          }

          function cl(e, t, n) {
            return n && "number" != typeof n && Pi(e, t, n) && (t = n = oe), (n = n === oe ? Re : n >>> 0) ? (e = wu(e), e && ("string" == typeof t || null != t && !yf(t)) && !(t = uo(t)) && U(e) ? Mo(ee(e), 0, n) : e.split(t, n)) : [];
          }

          function dl(e, t, n) {
            return e = wu(e), n = null == n ? 0 : Qn(yu(n), 0, e.length), t = uo(t), e.slice(n, n + t.length) == t;
          }

          function fl(e, t, r) {
            var o = n.templateSettings;
            r && Pi(e, t, r) && (t = oe), e = wu(e), t = Lf({}, t, o, ai);
            var i, a, s = Lf({}, t.imports, o.imports, ai),
              u = Ru(s),
              l = I(s, u),
              c = 0,
              d = t.interpolate || Bt,
              f = "__p += '",
              h = rc((t.escape || Bt).source + "|" + d.source + "|" + (d === Lt ? At : Bt).source + "|" + (t.evaluate || Bt).source + "|$", "g"),
              p = "//# sourceURL=" + ("sourceURL" in t ? t.sourceURL : "lodash.templateSources[" + ++_n + "]") + "\n";
            e.replace(h, function(t, n, r, o, s, u) {
              return r || (r = o), f += e.slice(c, u).replace(Vt, W), n && (i = !0, f += "' +\n__e(" + n + ") +\n'"), s && (a = !0, f += "';\n" + s + ";\n__p += '"), r && (f += "' +\n((__t = (" + r + ")) == null ? '' : __t) +\n'"), c = u + t.length, t;
            }), f += "';\n";
            var _ = t.variable;
            _ || (f = "with (obj) {\n" + f + "\n}\n"), f = (a ? f.replace(yt, "") : f).replace(vt, "$1").replace(gt, "$1;"), f = "function(" + (_ || "obj") + ") {\n" + (_ ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (i ? ", __e = _.escape" : "") + (a ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + f + "return __p\n}";
            var m = Vf(function() {
              return ec(u, p + "return " + f).apply(oe, l);
            });
            if (m.source = f, Js(m)) throw m;
            return m;
          }

          function hl(e) {
            return wu(e).toLowerCase();
          }

          function pl(e) {
            return wu(e).toUpperCase();
          }

          function _l(e, t, n) {
            if ((e = wu(e)) && (n || t === oe)) return e.replace(Ct, "");
            if (!e || !(t = uo(t))) return e;
            var r = ee(e),
              o = ee(t);
            return Mo(r, H(r, o), N(r, o) + 1).join("");
          }

          function ml(e, t, n) {
            if ((e = wu(e)) && (n || t === oe)) return e.replace(Et, "");
            if (!e || !(t = uo(t))) return e;
            var r = ee(e);
            return Mo(r, 0, N(r, ee(t)) + 1).join("");
          }

          function yl(e, t, n) {
            if ((e = wu(e)) && (n || t === oe)) return e.replace(Pt, "");
            if (!e || !(t = uo(t))) return e;
            var r = ee(e);
            return Mo(r, H(r, ee(t))).join("");
          }

          function vl(e, t) {
            var n = Te,
              r = Se;
            if (Zs(t)) {
              var o = "separator" in t ? t.separator : o;
              n = "length" in t ? yu(t.length) : n, r = "omission" in t ? uo(t.omission) : r;
            }
            e = wu(e);
            var i = e.length;
            if (U(e)) {
              var a = ee(e);
              i = a.length;
            }
            if (n >= i) return e;
            var s = n - Z(r);
            if (s < 1) return r;
            var u = a ? Mo(a, 0, s).join("") : e.slice(0, s);
            if (o === oe) return u + r;
            if (a && (s += u.length - s), yf(o)) {
              if (e.slice(s).search(o)) {
                var l, c = u;
                for (o.global || (o = rc(o.source, wu(Ht.exec(o)) + "g")), o.lastIndex = 0; l = o.exec(c);) var d = l.index;
                u = u.slice(0, d === oe ? s : d);
              }
            } else if (e.indexOf(uo(o), s) != s) {
              var f = u.lastIndexOf(o);
              f > -1 && (u = u.slice(0, f));
            }
            return u + r;
          }

          function gl(e) {
            return e = wu(e), e && wt.test(e) ? e.replace(Mt, Wn) : e;
          }

          function Ml(e, t, n) {
            return e = wu(e), t = n ? oe : t, t === oe ? G(e) ? re(e) : b(e) : e.match(t) || [];
          }

          function bl(e) {
            var t = null == e ? 0 : e.length,
              n = yi();
            return e = t ? _(e, function(e) {
              if ("function" != typeof e[1]) throw new ic(se);
              return [n(e[0]), e[1]];
            }) : [], Qr(function(n) {
              for (var r = -1; ++r < t;) {
                var o = e[r];
                if (s(o[0], this, n)) return s(o[1], this, n);
              }
            });
          }

          function wl(e) {
            return Zn(Xn(e, ce));
          }

          function kl(e) {
            return function() {
              return e;
            };
          }

          function Ll(e, t) {
            return null == e || e !== e ? t : e;
          }

          function Tl(e) {
            return e;
          }

          function Sl(e) {
            return Er("function" == typeof e ? e : Xn(e, ce));
          }

          function Yl(e) {
            return Ar(Xn(e, ce));
          }

          function Dl(e, t) {
            return Hr(e, Xn(t, ce));
          }

          function xl(e, t, n) {
            var r = Ru(t),
              o = cr(t, r);
            null != n || Zs(t) && (o.length || !r.length) || (n = t, t = e, e = this, o = cr(t, Ru(t)));
            var i = !(Zs(n) && "chain" in n && !n.chain),
              a = $s(e);
            return l(o, function(n) {
              var r = t[n];
              e[n] = r, a && (e.prototype[n] = function() {
                var t = this.__chain__;
                if (i || t) {
                  var n = e(this.__wrapped__);
                  return (n.__actions__ = jo(this.__actions__)).push({
                    func: r,
                    args: arguments,
                    thisArg: e
                  }), n.__chain__ = t, n;
                }
                return r.apply(e, m([this.value()], arguments));
              });
            }), e;
          }

          function Cl() {
            return Sn._ === this && (Sn._ = mc), this;
          }

          function Pl() {}

          function El(e) {
            return e = yu(e), Qr(function(t) {
              return Wr(t, e);
            });
          }

          function jl(e) {
            return Ei(e) ? D(Ji(e)) : Br(e);
          }

          function Ol(e) {
            return function(t) {
              return null == e ? oe : dr(e, t);
            };
          }

          function Rl() {
            return [];
          }

          function Il() {
            return !1;
          }

          function Al() {
            return {};
          }

          function Hl() {
            return "";
          }

          function Nl() {
            return !0;
          }

          function zl(e, t) {
            if ((e = yu(e)) < 1 || e > Ee) return [];
            var n = Re,
              r = Wc(e, Re);
            t = yi(t), e -= Re;
            for (var o = j(r, t); ++n < e;) t(n);
            return o;
          }

          function Wl(e) {
            return ff(e) ? _(e, Ji) : du(e) ? [e] : jo(Sd(wu(e)));
          }

          function Fl(e) {
            var t = ++fc;
            return wu(e) + t;
          }

          function Ul(e) {
            return e && e.length ? or(e, Tl, pr) : oe;
          }

          function Gl(e, t) {
            return e && e.length ? or(e, yi(t, 2), pr) : oe;
          }

          function Bl(e) {
            return Y(e, Tl);
          }

          function Vl(e, t) {
            return Y(e, yi(t, 2));
          }

          function ql(e) {
            return e && e.length ? or(e, Tl, Rr) : oe;
          }

          function Jl(e, t) {
            return e && e.length ? or(e, yi(t, 2), Rr) : oe;
          }

          function Kl(e) {
            return e && e.length ? E(e, Tl) : 0;
          }

          function $l(e, t) {
            return e && e.length ? E(e, yi(t, 2)) : 0;
          }
          t = null == t ? Sn : Fn.defaults(Sn.Object(), t, Fn.pick(Sn, pn));
          var Ql = t.Array,
            Xl = t.Date,
            Zl = t.Error,
            ec = t.Function,
            tc = t.Math,
            nc = t.Object,
            rc = t.RegExp,
            oc = t.String,
            ic = t.TypeError,
            ac = Ql.prototype,
            sc = ec.prototype,
            uc = nc.prototype,
            lc = t["__core-js_shared__"],
            cc = sc.toString,
            dc = uc.hasOwnProperty,
            fc = 0,
            hc = function() {
              var e = /[^.]+$/.exec(lc && lc.keys && lc.keys.IE_PROTO || "");
              return e ? "Symbol(src)_1." + e : "";
            }(),
            pc = uc.toString,
            _c = cc.call(nc),
            mc = Sn._,
            yc = rc("^" + cc.call(dc).replace(Dt, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
            vc = xn ? t.Buffer : oe,
            gc = t.Symbol,
            Mc = t.Uint8Array,
            bc = vc ? vc.allocUnsafe : oe,
            wc = q(nc.getPrototypeOf, nc),
            kc = nc.create,
            Lc = uc.propertyIsEnumerable,
            Tc = ac.splice,
            Sc = gc ? gc.isConcatSpreadable : oe,
            Yc = gc ? gc.iterator : oe,
            Dc = gc ? gc.toStringTag : oe,
            xc = function() {
              try {
                var e = Mi(nc, "defineProperty");
                return e({}, "", {}), e;
              } catch (e) {}
            }(),
            Cc = t.clearTimeout !== Sn.clearTimeout && t.clearTimeout,
            Pc = Xl && Xl.now !== Sn.Date.now && Xl.now,
            Ec = t.setTimeout !== Sn.setTimeout && t.setTimeout,
            jc = tc.ceil,
            Oc = tc.floor,
            Rc = nc.getOwnPropertySymbols,
            Ic = vc ? vc.isBuffer : oe,
            Ac = t.isFinite,
            Hc = ac.join,
            Nc = q(nc.keys, nc),
            zc = tc.max,
            Wc = tc.min,
            Fc = Xl.now,
            Uc = t.parseInt,
            Gc = tc.random,
            Bc = ac.reverse,
            Vc = Mi(t, "DataView"),
            qc = Mi(t, "Map"),
            Jc = Mi(t, "Promise"),
            Kc = Mi(t, "Set"),
            $c = Mi(t, "WeakMap"),
            Qc = Mi(nc, "create"),
            Xc = $c && new $c,
            Zc = {},
            ed = Ki(Vc),
            td = Ki(qc),
            nd = Ki(Jc),
            rd = Ki(Kc),
            od = Ki($c),
            id = gc ? gc.prototype : oe,
            ad = id ? id.valueOf : oe,
            sd = id ? id.toString : oe,
            ud = function() {
              function e() {}
              return function(t) {
                if (!Zs(t)) return {};
                if (kc) return kc(t);
                e.prototype = t;
                var n = new e;
                return e.prototype = oe, n;
              };
            }();
          n.templateSettings = {
            escape: /<%-([\s\S]+?)%>/g,
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: Lt,
            variable: "",
            imports: {
              _: n
            }
          }, n.prototype = r.prototype, n.prototype.constructor = n, o.prototype = ud(r.prototype), o.prototype.constructor = o, M.prototype = ud(r.prototype), M.prototype.constructor = M, ne.prototype.clear = It, ne.prototype.delete = qt, ne.prototype.get = Jt, ne.prototype.has = Kt, ne.prototype.set = $t, Qt.prototype.clear = Xt, Qt.prototype.delete = Zt, Qt.prototype.get = en, Qt.prototype.has = tn, Qt.prototype.set = nn, rn.prototype.clear = on, rn.prototype.delete = an, rn.prototype.get = sn, rn.prototype.has = cn, rn.prototype.set = dn, fn.prototype.add = fn.prototype.push = hn, fn.prototype.has = vn, gn.prototype.clear = Mn, gn.prototype.delete = bn, gn.prototype.get = Ln, gn.prototype.has = Tn, gn.prototype.set = Yn;
          var ld = No(ur),
            cd = No(lr, !0),
            dd = zo(),
            fd = zo(!0),
            hd = Xc ? function(e, t) {
              return Xc.set(e, t), e;
            } : Tl,
            pd = xc ? function(e, t) {
              return xc(e, "toString", {
                configurable: !0,
                enumerable: !1,
                value: kl(t),
                writable: !0
              });
            } : Tl,
            _d = Qr,
            md = Cc || function(e) {
              return Sn.clearTimeout(e);
            },
            yd = Kc && 1 / K(new Kc([, -0]))[1] == Pe ? function(e) {
              return new Kc(e);
            } : Pl,
            vd = Xc ? function(e) {
              return Xc.get(e);
            } : Pl,
            gd = Rc ? function(e) {
              return null == e ? [] : (e = nc(e), f(Rc(e), function(t) {
                return Lc.call(e, t);
              }));
            } : Rl,
            Md = Rc ? function(e) {
              for (var t = []; e;) m(t, gd(e)), e = wc(e);
              return t;
            } : Rl,
            bd = hr;
          (Vc && bd(new Vc(new ArrayBuffer(1))) != st || qc && bd(new qc) != Je || Jc && "[object Promise]" != bd(Jc.resolve()) || Kc && bd(new Kc) != et || $c && bd(new $c) != ot) && (bd = function(e) {
            var t = hr(e),
              n = t == Qe ? e.constructor : oe,
              r = n ? Ki(n) : "";
            if (r) switch (r) {
              case ed:
                return st;
              case td:
                return Je;
              case nd:
                return "[object Promise]";
              case rd:
                return et;
              case od:
                return ot;
            }
            return t;
          });
          var wd = lc ? $s : Il,
            kd = Vi(hd),
            Ld = Ec || function(e, t) {
              return Sn.setTimeout(e, t);
            },
            Td = Vi(pd),
            Sd = function(e) {
              var t = Ss(e, function(e) {
                  return 500 === n.size && n.clear(), e;
                }),
                n = t.cache;
              return t;
            }(function(e) {
              var t = [];
              return Yt.test(e) && t.push(""), e.replace(/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, function(e, n, r, o) {
                t.push(r ? o.replace(/\\(\\)?/g, "$1") : n || e);
              }), t;
            }),
            Yd = Qr(function(e, t) {
              return Fs(e) ? nr(e, sr(t, 1, Fs, !0)) : [];
            }),
            Dd = Qr(function(e, t) {
              var n = ma(t);
              return Fs(n) && (n = oe), Fs(e) ? nr(e, sr(t, 1, Fs, !0), yi(n, 2)) : [];
            }),
            xd = Qr(function(e, t) {
              var n = ma(t);
              return Fs(n) && (n = oe), Fs(e) ? nr(e, sr(t, 1, Fs, !0), oe, n) : [];
            }),
            Cd = Qr(function(e) {
              var t = _(e, yo);
              return t.length && t[0] === e[0] ? vr(t) : [];
            }),
            Pd = Qr(function(e) {
              var t = ma(e),
                n = _(e, yo);
              return t === ma(n) ? t = oe : n.pop(), n.length && n[0] === e[0] ? vr(n, yi(t, 2)) : [];
            }),
            Ed = Qr(function(e) {
              var t = ma(e),
                n = _(e, yo);
              return t = "function" == typeof t ? t : oe, t && n.pop(), n.length && n[0] === e[0] ? vr(n, oe, t) : [];
            }),
            jd = Qr(ga),
            Od = fi(function(e, t) {
              var n = null == e ? 0 : e.length,
                r = $n(e, t);
              return qr(e, _(t, function(e) {
                return Ci(e, n) ? +e : e;
              }).sort(xo)), r;
            }),
            Rd = Qr(function(e) {
              return lo(sr(e, 1, Fs, !0));
            }),
            Id = Qr(function(e) {
              var t = ma(e);
              return Fs(t) && (t = oe), lo(sr(e, 1, Fs, !0), yi(t, 2));
            }),
            Ad = Qr(function(e) {
              var t = ma(e);
              return t = "function" == typeof t ? t : oe, lo(sr(e, 1, Fs, !0), oe, t);
            }),
            Hd = Qr(function(e, t) {
              return Fs(e) ? nr(e, t) : [];
            }),
            Nd = Qr(function(e) {
              return _o(f(e, Fs));
            }),
            zd = Qr(function(e) {
              var t = ma(e);
              return Fs(t) && (t = oe), _o(f(e, Fs), yi(t, 2));
            }),
            Wd = Qr(function(e) {
              var t = ma(e);
              return t = "function" == typeof t ? t : oe, _o(f(e, Fs), oe, t);
            }),
            Fd = Qr(Wa),
            Ud = Qr(function(e) {
              var t = e.length,
                n = t > 1 ? e[t - 1] : oe;
              return n = "function" == typeof n ? (e.pop(), n) : oe, Fa(e, n);
            }),
            Gd = fi(function(e) {
              var t = e.length,
                n = t ? e[0] : 0,
                r = this.__wrapped__,
                i = function(t) {
                  return $n(t, e);
                };
              return !(t > 1 || this.__actions__.length) && r instanceof M && Ci(n) ? (r = r.slice(n, +n + (t ? 1 : 0)), r.__actions__.push({
                func: qa,
                args: [i],
                thisArg: oe
              }), new o(r, this.__chain__).thru(function(e) {
                return t && !e.length && e.push(oe), e;
              })) : this.thru(i);
            }),
            Bd = Ao(function(e, t, n) {
              dc.call(e, n) ? ++e[n] : Kn(e, n, 1);
            }),
            Vd = Vo(aa),
            qd = Vo(sa),
            Jd = Ao(function(e, t, n) {
              dc.call(e, n) ? e[n].push(t) : Kn(e, n, [t]);
            }),
            Kd = Qr(function(e, t, n) {
              var r = -1,
                o = "function" == typeof t,
                i = Ws(e) ? Ql(e.length) : [];
              return ld(e, function(e) {
                i[++r] = o ? s(t, e, n) : Mr(e, t, n);
              }), i;
            }),
            $d = Ao(function(e, t, n) {
              Kn(e, n, t);
            }),
            Qd = Ao(function(e, t, n) {
              e[n ? 0 : 1].push(t);
            }, function() {
              return [
                [],
                []
              ];
            }),
            Xd = Qr(function(e, t) {
              if (null == e) return [];
              var n = t.length;
              return n > 1 && Pi(e, t[0], t[1]) ? t = [] : n > 2 && Pi(t[0], t[1], t[2]) && (t = [t[0]]), Fr(e, sr(t, 1), []);
            }),
            Zd = Pc || function() {
              return Sn.Date.now();
            },
            ef = Qr(function(e, t, n) {
              var r = _e;
              if (n.length) {
                var o = J(n, mi(ef));
                r |= Me;
              }
              return ii(e, r, t, n, o);
            }),
            tf = Qr(function(e, t, n) {
              var r = _e | me;
              if (n.length) {
                var o = J(n, mi(tf));
                r |= Me;
              }
              return ii(t, r, e, n, o);
            }),
            nf = Qr(function(e, t) {
              return tr(e, 1, t);
            }),
            rf = Qr(function(e, t, n) {
              return tr(e, gu(t) || 0, n);
            });
          Ss.Cache = rn;
          var of = _d(function(e, t) {
            t = 1 == t.length && ff(t[0]) ? _(t[0], R(yi())) : _(sr(t, 1), R(yi()));
            var n = t.length;
            return Qr(function(r) {
              for (var o = -1, i = Wc(r.length, n); ++o < i;) r[o] = t[o].call(this, r[o]);
              return s(e, this, r);
            });
          }), af = Qr(function(e, t) {
            var n = J(t, mi(af));
            return ii(e, Me, oe, t, n);
          }), sf = Qr(function(e, t) {
            var n = J(t, mi(sf));
            return ii(e, be, oe, t, n);
          }), uf = fi(function(e, t) {
            return ii(e, ke, oe, oe, oe, t);
          }), lf = ti(pr), cf = ti(function(e, t) {
            return e >= t;
          }), df = br(function() {
            return arguments;
          }()) ? br : function(e) {
            return eu(e) && dc.call(e, "callee") && !Lc.call(e, "callee");
          }, ff = Ql.isArray, hf = En ? R(En) : wr, pf = Ic || Il, _f = jn ? R(jn) : kr, mf = On ? R(On) : Sr, yf = Rn ? R(Rn) : xr, vf = In ? R(In) : Cr, gf = An ? R(An) : Pr, Mf = ti(Rr), bf = ti(function(e, t) {
            return e <= t;
          }), wf = Ho(function(e, t) {
            if (Ii(t) || Ws(t)) return void Oo(t, Ru(t), e);
            for (var n in t) dc.call(t, n) && Gn(e, n, t[n]);
          }), kf = Ho(function(e, t) {
            Oo(t, Iu(t), e);
          }), Lf = Ho(function(e, t, n, r) {
            Oo(t, Iu(t), e, r);
          }), Tf = Ho(function(e, t, n, r) {
            Oo(t, Ru(t), e, r);
          }), Sf = fi($n), Yf = Qr(function(e) {
            return e.push(oe, ai), s(Lf, oe, e);
          }), Df = Qr(function(e) {
            return e.push(oe, si), s(jf, oe, e);
          }), xf = Ko(function(e, t, n) {
            e[t] = n;
          }, kl(Tl)), Cf = Ko(function(e, t, n) {
            dc.call(e, t) ? e[t].push(n) : e[t] = [n];
          }, yi), Pf = Qr(Mr), Ef = Ho(function(e, t, n) {
            Nr(e, t, n);
          }), jf = Ho(function(e, t, n, r) {
            Nr(e, t, n, r);
          }), Of = fi(function(e, t) {
            var n = {};
            if (null == e) return n;
            var r = !1;
            t = _(t, function(t) {
              return t = go(t, e), r || (r = t.length > 1), t;
            }), Oo(e, pi(e), n), r && (n = Xn(n, ce | de | fe, ui));
            for (var o = t.length; o--;) co(n, t[o]);
            return n;
          }), Rf = fi(function(e, t) {
            return null == e ? {} : Ur(e, t);
          }), If = oi(Ru), Af = oi(Iu), Hf = Uo(function(e, t, n) {
            return t = t.toLowerCase(), e + (n ? Zu(t) : t);
          }), Nf = Uo(function(e, t, n) {
            return e + (n ? "-" : "") + t.toLowerCase();
          }), zf = Uo(function(e, t, n) {
            return e + (n ? " " : "") + t.toLowerCase();
          }), Wf = Fo("toLowerCase"), Ff = Uo(function(e, t, n) {
            return e + (n ? "_" : "") + t.toLowerCase();
          }), Uf = Uo(function(e, t, n) {
            return e + (n ? " " : "") + Bf(t);
          }), Gf = Uo(function(e, t, n) {
            return e + (n ? " " : "") + t.toUpperCase();
          }), Bf = Fo("toUpperCase"), Vf = Qr(function(e, t) {
            try {
              return s(e, oe, t);
            } catch (e) {
              return Js(e) ? e : new Zl(e);
            }
          }), qf = fi(function(e, t) {
            return l(t, function(t) {
              t = Ji(t), Kn(e, t, ef(e[t], e));
            }), e;
          }), Jf = qo(), Kf = qo(!0), $f = Qr(function(e, t) {
            return function(n) {
              return Mr(n, e, t);
            };
          }), Qf = Qr(function(e, t) {
            return function(n) {
              return Mr(e, n, t);
            };
          }), Xf = Qo(_), Zf = Qo(d), eh = Qo(g), th = ei(), nh = ei(!0), rh = $o(function(e, t) {
            return e + t;
          }, 0), oh = ri("ceil"), ih = $o(function(e, t) {
            return e / t;
          }, 1), ah = ri("floor"), sh = $o(function(e, t) {
            return e * t;
          }, 1), uh = ri("round"), lh = $o(function(e, t) {
            return e - t;
          }, 0);
          return n.after = gs, n.ary = Ms, n.assign = wf, n.assignIn = kf, n.assignInWith = Lf, n.assignWith = Tf, n.at = Sf, n.before = bs, n.bind = ef, n.bindAll = qf, n.bindKey = tf, n.castArray = Os, n.chain = Ba, n.chunk = Xi, n.compact = Zi, n.concat = ea, n.cond = bl, n.conforms = wl, n.constant = kl, n.countBy = Bd, n.create = ku, n.curry = ws, n.curryRight = ks, n.debounce = Ls, n.defaults = Yf, n.defaultsDeep = Df, n.defer = nf, n.delay = rf, n.difference = Yd, n.differenceBy = Dd, n.differenceWith = xd, n.drop = ta, n.dropRight = na, n.dropRightWhile = ra, n.dropWhile = oa, n.fill = ia, n.filter = ns, n.flatMap = rs, n.flatMapDeep = os, n.flatMapDepth = is, n.flatten = ua, n.flattenDeep = la, n.flattenDepth = ca, n.flip = Ts, n.flow = Jf, n.flowRight = Kf, n.fromPairs = da, n.functions = Cu, n.functionsIn = Pu, n.groupBy = Jd, n.initial = pa, n.intersection = Cd, n.intersectionBy = Pd, n.intersectionWith = Ed, n.invert = xf, n.invertBy = Cf, n.invokeMap = Kd, n.iteratee = Sl, n.keyBy = $d, n.keys = Ru, n.keysIn = Iu, n.map = ls, n.mapKeys = Au, n.mapValues = Hu, n.matches = Yl, n.matchesProperty = Dl, n.memoize = Ss, n.merge = Ef, n.mergeWith = jf, n.method = $f, n.methodOf = Qf, n.mixin = xl, n.negate = Ys, n.nthArg = El, n.omit = Of, n.omitBy = Nu, n.once = Ds, n.orderBy = cs, n.over = Xf, n.overArgs = of , n.overEvery = Zf, n.overSome = eh, n.partial = af, n.partialRight = sf, n.partition = Qd, n.pick = Rf, n.pickBy = zu, n.property = jl, n.propertyOf = Ol, n.pull = jd, n.pullAll = ga, n.pullAllBy = Ma, n.pullAllWith = ba, n.pullAt = Od, n.range = th, n.rangeRight = nh, n.rearg = uf, n.reject = hs, n.remove = wa, n.rest = xs, n.reverse = ka, n.sampleSize = _s, n.set = Fu, n.setWith = Uu, n.shuffle = ms, n.slice = La, n.sortBy = Xd, n.sortedUniq = Pa, n.sortedUniqBy = Ea, n.split = cl, n.spread = Cs, n.tail = ja, n.take = Oa, n.takeRight = Ra, n.takeRightWhile = Ia, n.takeWhile = Aa, n.tap = Va, n.throttle = Ps, n.thru = qa, n.toArray = _u, n.toPairs = If, n.toPairsIn = Af, n.toPath = Wl, n.toPlainObject = Mu, n.transform = Gu, n.unary = Es, n.union = Rd, n.unionBy = Id, n.unionWith = Ad, n.uniq = Ha, n.uniqBy = Na, n.uniqWith = za, n.unset = Bu, n.unzip = Wa, n.unzipWith = Fa, n.update = Vu, n.updateWith = qu, n.values = Ju, n.valuesIn = Ku, n.without = Hd, n.words = Ml, n.wrap = js, n.xor = Nd, n.xorBy = zd, n.xorWith = Wd, n.zip = Fd, n.zipObject = Ua, n.zipObjectDeep = Ga, n.zipWith = Ud, n.entries = If, n.entriesIn = Af, n.extend = kf, n.extendWith = Lf, xl(n, n), n.add = rh, n.attempt = Vf, n.camelCase = Hf, n.capitalize = Zu, n.ceil = oh, n.clamp = $u, n.clone = Rs, n.cloneDeep = As, n.cloneDeepWith = Hs, n.cloneWith = Is, n.conformsTo = Ns, n.deburr = el, n.defaultTo = Ll, n.divide = ih, n.endsWith = tl, n.eq = zs, n.escape = nl, n.escapeRegExp = rl, n.every = ts, n.find = Vd, n.findIndex = aa, n.findKey = Lu, n.findLast = qd, n.findLastIndex = sa, n.findLastKey = Tu, n.floor = ah, n.forEach = as, n.forEachRight = ss, n.forIn = Su, n.forInRight = Yu, n.forOwn = Du, n.forOwnRight = xu, n.get = Eu, n.gt = lf, n.gte = cf, n.has = ju, n.hasIn = Ou, n.head = fa, n.identity = Tl, n.includes = us, n.indexOf = ha, n.inRange = Qu, n.invoke = Pf, n.isArguments = df, n.isArray = ff, n.isArrayBuffer = hf, n.isArrayLike = Ws, n.isArrayLikeObject = Fs, n.isBoolean = Us, n.isBuffer = pf, n.isDate = _f, n.isElement = Gs, n.isEmpty = Bs, n.isEqual = Vs, n.isEqualWith = qs, n.isError = Js, n.isFinite = Ks, n.isFunction = $s, n.isInteger = Qs, n.isLength = Xs, n.isMap = mf, n.isMatch = tu, n.isMatchWith = nu, n.isNaN = ru, n.isNative = ou, n.isNil = au, n.isNull = iu, n.isNumber = su, n.isObject = Zs, n.isObjectLike = eu, n.isPlainObject = uu, n.isRegExp = yf, n.isSafeInteger = lu, n.isSet = vf, n.isString = cu, n.isSymbol = du, n.isTypedArray = gf, n.isUndefined = fu, n.isWeakMap = hu, n.isWeakSet = pu, n.join = _a, n.kebabCase = Nf, n.last = ma, n.lastIndexOf = ya, n.lowerCase = zf, n.lowerFirst = Wf, n.lt = Mf, n.lte = bf, n.max = Ul, n.maxBy = Gl, n.mean = Bl, n.meanBy = Vl, n.min = ql, n.minBy = Jl, n.stubArray = Rl, n.stubFalse = Il, n.stubObject = Al, n.stubString = Hl, n.stubTrue = Nl, n.multiply = sh, n.nth = va, n.noConflict = Cl, n.noop = Pl, n.now = Zd, n.pad = ol, n.padEnd = il, n.padStart = al, n.parseInt = sl, n.random = Xu, n.reduce = ds, n.reduceRight = fs, n.repeat = ul, n.replace = ll, n.result = Wu, n.round = uh, n.runInContext = e, n.sample = ps, n.size = ys, n.snakeCase = Ff, n.some = vs, n.sortedIndex = Ta, n.sortedIndexBy = Sa, n.sortedIndexOf = Ya, n.sortedLastIndex = Da, n.sortedLastIndexBy = xa, n.sortedLastIndexOf = Ca, n.startCase = Uf, n.startsWith = dl, n.subtract = lh, n.sum = Kl, n.sumBy = $l, n.template = fl, n.times = zl, n.toFinite = mu, n.toInteger = yu, n.toLength = vu, n.toLower = hl, n.toNumber = gu, n.toSafeInteger = bu, n.toString = wu, n.toUpper = pl, n.trim = _l, n.trimEnd = ml, n.trimStart = yl, n.truncate = vl, n.unescape = gl, n.uniqueId = Fl, n.upperCase = Gf, n.upperFirst = Bf, n.each = as, n.eachRight = ss, n.first = fa, xl(n, function() {
            var e = {};
            return ur(n, function(t, r) {
              dc.call(n.prototype, r) || (e[r] = t);
            }), e;
          }(), {
            chain: !1
          }), n.VERSION = "4.17.4", l(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(e) {
            n[e].placeholder = n;
          }), l(["drop", "take"], function(e, t) {
            M.prototype[e] = function(n) {
              n = n === oe ? 1 : zc(yu(n), 0);
              var r = this.__filtered__ && !t ? new M(this) : this.clone();
              return r.__filtered__ ? r.__takeCount__ = Wc(n, r.__takeCount__) : r.__views__.push({
                size: Wc(n, Re),
                type: e + (r.__dir__ < 0 ? "Right" : "")
              }), r;
            }, M.prototype[e + "Right"] = function(t) {
              return this.reverse()[e](t).reverse();
            };
          }), l(["filter", "map", "takeWhile"], function(e, t) {
            var n = t + 1,
              r = n == xe || 3 == n;
            M.prototype[e] = function(e) {
              var t = this.clone();
              return t.__iteratees__.push({
                iteratee: yi(e, 3),
                type: n
              }), t.__filtered__ = t.__filtered__ || r, t;
            };
          }), l(["head", "last"], function(e, t) {
            var n = "take" + (t ? "Right" : "");
            M.prototype[e] = function() {
              return this[n](1).value()[0];
            };
          }), l(["initial", "tail"], function(e, t) {
            var n = "drop" + (t ? "" : "Right");
            M.prototype[e] = function() {
              return this.__filtered__ ? new M(this) : this[n](1);
            };
          }), M.prototype.compact = function() {
            return this.filter(Tl);
          }, M.prototype.find = function(e) {
            return this.filter(e).head();
          }, M.prototype.findLast = function(e) {
            return this.reverse().find(e);
          }, M.prototype.invokeMap = Qr(function(e, t) {
            return "function" == typeof e ? new M(this) : this.map(function(n) {
              return Mr(n, e, t);
            });
          }), M.prototype.reject = function(e) {
            return this.filter(Ys(yi(e)));
          }, M.prototype.slice = function(e, t) {
            e = yu(e);
            var n = this;
            return n.__filtered__ && (e > 0 || t < 0) ? new M(n) : (e < 0 ? n = n.takeRight(-e) : e && (n = n.drop(e)), t !== oe && (t = yu(t), n = t < 0 ? n.dropRight(-t) : n.take(t - e)), n);
          }, M.prototype.takeRightWhile = function(e) {
            return this.reverse().takeWhile(e).reverse();
          }, M.prototype.toArray = function() {
            return this.take(Re);
          }, ur(M.prototype, function(e, t) {
            var r = /^(?:filter|find|map|reject)|While$/.test(t),
              i = /^(?:head|last)$/.test(t),
              a = n[i ? "take" + ("last" == t ? "Right" : "") : t],
              s = i || /^find/.test(t);
            a && (n.prototype[t] = function() {
              var t = this.__wrapped__,
                u = i ? [1] : arguments,
                l = t instanceof M,
                c = u[0],
                d = l || ff(t),
                f = function(e) {
                  var t = a.apply(n, m([e], u));
                  return i && h ? t[0] : t;
                };
              d && r && "function" == typeof c && 1 != c.length && (l = d = !1);
              var h = this.__chain__,
                p = !!this.__actions__.length,
                _ = s && !h,
                y = l && !p;
              if (!s && d) {
                t = y ? t : new M(this);
                var v = e.apply(t, u);
                return v.__actions__.push({
                  func: qa,
                  args: [f],
                  thisArg: oe
                }), new o(v, h);
              }
              return _ && y ? e.apply(this, u) : (v = this.thru(f), _ ? i ? v.value()[0] : v.value() : v);
            });
          }), l(["pop", "push", "shift", "sort", "splice", "unshift"], function(e) {
            var t = ac[e],
              r = /^(?:push|sort|unshift)$/.test(e) ? "tap" : "thru",
              o = /^(?:pop|shift)$/.test(e);
            n.prototype[e] = function() {
              var e = arguments;
              if (o && !this.__chain__) {
                var n = this.value();
                return t.apply(ff(n) ? n : [], e);
              }
              return this[r](function(n) {
                return t.apply(ff(n) ? n : [], e);
              });
            };
          }), ur(M.prototype, function(e, t) {
            var r = n[t];
            if (r) {
              var o = r.name + "";
              (Zc[o] || (Zc[o] = [])).push({
                name: t,
                func: r
              });
            }
          }), Zc[Jo(oe, me).name] = [{
            name: "wrapper",
            func: oe
          }], M.prototype.clone = x, M.prototype.reverse = Q, M.prototype.value = te, n.prototype.at = Gd, n.prototype.chain = Ja, n.prototype.commit = Ka, n.prototype.next = $a, n.prototype.plant = Xa, n.prototype.reverse = Za, n.prototype.toJSON = n.prototype.valueOf = n.prototype.value = es, n.prototype.first = n.prototype.head, Yc && (n.prototype[Yc] = Qa), n;
        }();
      Sn._ = Fn, (o = function() {
        return Fn;
      }.call(t, n, t, r)) !== oe && (r.exports = o);
    }).call(this);
  }).call(t, n(55), n(72)(e));
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if (null === e || void 0 === e) throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(e);
  }
  var o = Object.getOwnPropertySymbols,
    i = Object.prototype.hasOwnProperty,
    a = Object.prototype.propertyIsEnumerable;
  e.exports = function() {
    try {
      if (!Object.assign) return !1;
      var e = new String("abc");
      if (e[5] = "de", "5" === Object.getOwnPropertyNames(e)[0]) return !1;
      for (var t = {}, n = 0; n < 10; n++) t["_" + String.fromCharCode(n)] = n;
      if ("0123456789" !== Object.getOwnPropertyNames(t).map(function(e) {
          return t[e];
        }).join("")) return !1;
      var r = {};
      return "abcdefghijklmnopqrst".split("").forEach(function(e) {
        r[e] = e;
      }), "abcdefghijklmnopqrst" === Object.keys(Object.assign({}, r)).join("");
    } catch (e) {
      return !1;
    }
  }() ? Object.assign : function(e, t) {
    for (var n, s, u = r(e), l = 1; l < arguments.length; l++) {
      n = Object(arguments[l]);
      for (var c in n) i.call(n, c) && (u[c] = n[c]);
      if (o) {
        s = o(n);
        for (var d = 0; d < s.length; d++) a.call(n, s[d]) && (u[s[d]] = n[s[d]]);
      }
    }
    return u;
  };
}, function(e, t, n) {
  "use strict";
  t.__esModule = !0, t.default = function(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  };
}, function(e, t, n) {
  var r, o;
  ! function() {
    "use strict";

    function n() {
      for (var e = [], t = 0; t < arguments.length; t++) {
        var r = arguments[t];
        if (r) {
          var o = typeof r;
          if ("string" === o || "number" === o) e.push(r);
          else if (Array.isArray(r)) e.push(n.apply(null, r));
          else if ("object" === o)
            for (var a in r) i.call(r, a) && r[a] && e.push(a);
        }
      }
      return e.join(" ");
    }
    var i = {}.hasOwnProperty;
    void 0 !== e && e.exports ? e.exports = n : (r = [], void 0 !== (o = function() {
      return n;
    }.apply(t, r)) && (e.exports = o));
  }();
}, function(e, t, n) {
  "use strict";
  t.__esModule = !0;
  var r = n(375),
    o = function(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }(r);
  t.default = function() {
    function e(e, t) {
      for (var n = 0; n < t.length; n++) {
        var r = t[n];
        r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), (0, o.default)(e, r.key, r);
      }
    }
    return function(t, n, r) {
      return n && e(t.prototype, n), r && e(t, r), t;
    };
  }();
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return 1 === e.nodeType && e.getAttribute(p) === String(t) || 8 === e.nodeType && e.nodeValue === " react-text: " + t + " " || 8 === e.nodeType && e.nodeValue === " react-empty: " + t + " ";
  }

  function o(e) {
    for (var t; t = e._renderedComponent;) e = t;
    return e;
  }

  function i(e, t) {
    var n = o(e);
    n._hostNode = t, t[m] = n;
  }

  function a(e) {
    var t = e._hostNode;
    t && (delete t[m], e._hostNode = null);
  }

  function s(e, t) {
    if (!(e._flags & _.hasCachedChildNodes)) {
      var n = e._renderedChildren,
        a = t.firstChild;
      e: for (var s in n)
        if (n.hasOwnProperty(s)) {
          var u = n[s],
            l = o(u)._domID;
          if (0 !== l) {
            for (; null !== a; a = a.nextSibling)
              if (r(a, l)) {
                i(u, a);
                continue e;
              }
            d("32", l);
          }
        }
      e._flags |= _.hasCachedChildNodes;
    }
  }

  function u(e) {
    if (e[m]) return e[m];
    for (var t = []; !e[m];) {
      if (t.push(e), !e.parentNode) return null;
      e = e.parentNode;
    }
    for (var n, r; e && (r = e[m]); e = t.pop()) n = r, t.length && s(r, e);
    return n;
  }

  function l(e) {
    var t = u(e);
    return null != t && t._hostNode === e ? t : null;
  }

  function c(e) {
    if (void 0 === e._hostNode && d("33"), e._hostNode) return e._hostNode;
    for (var t = []; !e._hostNode;) t.push(e), e._hostParent || d("34"), e = e._hostParent;
    for (; t.length; e = t.pop()) s(e, e._hostNode);
    return e._hostNode;
  }
  var d = n(4),
    f = n(41),
    h = n(268),
    p = (n(2), f.ID_ATTRIBUTE_NAME),
    _ = h,
    m = "__reactInternalInstance$" + Math.random().toString(36).slice(2),
    y = {
      getClosestInstanceFromNode: u,
      getInstanceFromNode: l,
      getNodeFromInstance: c,
      precacheChildNodes: s,
      precacheNode: i,
      uncacheNode: a
    };
  e.exports = y;
}, function(e, t, n) {
  e.exports = {
    "default": n(387),
    __esModule: !0
  };
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e && e.__esModule ? e : {
      "default": e
    };
  }
  t.__esModule = !0;
  var o = n(377),
    i = r(o),
    a = n(374),
    s = r(a),
    u = n(139),
    l = r(u);
  t.default = function(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + (void 0 === t ? "undefined" : (0, l.default)(t)));
    e.prototype = (0, s.default)(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (i.default ? (0, i.default)(e, t) : e.__proto__ = t);
  };
}, function(e, t, n) {
  "use strict";
  t.__esModule = !0;
  var r = n(139),
    o = function(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }(r);
  t.default = function(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" !== (void 0 === t ? "undefined" : (0, o.default)(t)) && "function" != typeof t ? e : t;
  };
}, function(e, t) {
  var n = e.exports = {
    version: "2.4.0"
  };
  "number" == typeof __e && (__e = n);
}, function(e, t, n) {
  "use strict";
  var r = !("undefined" == typeof window || !window.document || !window.document.createElement),
    o = {
      canUseDOM: r,
      canUseWorkers: "undefined" != typeof Worker,
      canUseEventListeners: r && !(!window.addEventListener && !window.attachEvent),
      canUseViewport: r && !!window.screen,
      isInWorker: !r
    };
  e.exports = o;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e && e.__esModule ? e : {
      "default": e
    };
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.types = t.loggers = t.disbatch = t.batch = t.bindAll = t.assignAll = t.createReducer = t.createAction = void 0;
  var o = n(319);
  Object.defineProperty(t, "createAction", {
    enumerable: !0,
    get: function() {
      return r(o).default;
    }
  });
  var i = n(584);
  Object.defineProperty(t, "createReducer", {
    enumerable: !0,
    get: function() {
      return r(i).default;
    }
  });
  var a = n(582);
  Object.defineProperty(t, "assignAll", {
    enumerable: !0,
    get: function() {
      return r(a).default;
    }
  });
  var s = n(583);
  Object.defineProperty(t, "bindAll", {
    enumerable: !0,
    get: function() {
      return r(s).default;
    }
  });
  var u = n(70);
  Object.defineProperty(t, "batch", {
    enumerable: !0,
    get: function() {
      return r(u).default;
    }
  });
  var l = n(585);
  Object.defineProperty(t, "disbatch", {
    enumerable: !0,
    get: function() {
      return r(l).default;
    }
  });
  var c = n(586);
  Object.defineProperty(t, "loggers", {
    enumerable: !0,
    get: function() {
      return r(c).default;
    }
  });
  var d = n(320),
    f = function(e) {
      if (e && e.__esModule) return e;
      var t = {};
      if (null != e)
        for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
      return t.default = e, t;
    }(d);
  t.types = f;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return function() {
      return e;
    };
  }
  var o = function() {};
  o.thatReturns = r, o.thatReturnsFalse = r(!1), o.thatReturnsTrue = r(!0), o.thatReturnsNull = r(null), o.thatReturnsThis = function() {
    return this;
  }, o.thatReturnsArgument = function(e) {
    return e;
  }, e.exports = o;
}, function(e, t, n) {
  "use strict";
  e.exports = {
    debugTool: null
  };
}, function(e, t, n) {
  "use strict";
  e.exports = n(472);
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return function() {
      if (!i.a.hasIn(window, e)) return t.apply(void 0, arguments);
      var n = i.a.get(window, e);
      return i.a.isFunction(n) ? n.apply(void 0, arguments) : n;
    };
  }
  var o = n(5),
    i = n.n(o);
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r() {
    Y.ReactReconcileTransaction && b || c("123");
  }

  function o() {
    this.reinitializeTransaction(), this.dirtyComponentsLength = null, this.callbackQueue = f.getPooled(), this.reconcileTransaction = Y.ReactReconcileTransaction.getPooled(!0);
  }

  function i(e, t, n, o, i, a) {
    return r(), b.batchedUpdates(e, t, n, o, i, a);
  }

  function a(e, t) {
    return e._mountOrder - t._mountOrder;
  }

  function s(e) {
    var t = e.dirtyComponentsLength;
    t !== y.length && c("124", t, y.length), y.sort(a), v++;
    for (var n = 0; n < t; n++) {
      var r = y[n],
        o = r._pendingCallbacks;
      r._pendingCallbacks = null;
      var i;
      if (p.logTopLevelRenders) {
        var s = r;
        r._currentElement.type.isReactTopLevelWrapper && (s = r._renderedComponent), i = "React update: " + s.getName(), console.time(i);
      }
      if (_.performUpdateIfNecessary(r, e.reconcileTransaction, v), i && console.timeEnd(i), o)
        for (var u = 0; u < o.length; u++) e.callbackQueue.enqueue(o[u], r.getPublicInstance());
    }
  }

  function u(e) {
    if (r(), !b.isBatchingUpdates) return void b.batchedUpdates(u, e);
    y.push(e), null == e._updateBatchNumber && (e._updateBatchNumber = v + 1);
  }

  function l(e, t) {
    b.isBatchingUpdates || c("125"), g.enqueue(e, t), M = !0;
  }
  var c = n(4),
    d = n(6),
    f = n(266),
    h = n(35),
    p = n(271),
    _ = n(42),
    m = n(66),
    y = (n(2), []),
    v = 0,
    g = f.getPooled(),
    M = !1,
    b = null,
    w = {
      initialize: function() {
        this.dirtyComponentsLength = y.length;
      },
      close: function() {
        this.dirtyComponentsLength !== y.length ? (y.splice(0, this.dirtyComponentsLength), T()) : y.length = 0;
      }
    },
    k = {
      initialize: function() {
        this.callbackQueue.reset();
      },
      close: function() {
        this.callbackQueue.notifyAll();
      }
    },
    L = [w, k];
  d(o.prototype, m, {
    getTransactionWrappers: function() {
      return L;
    },
    destructor: function() {
      this.dirtyComponentsLength = null, f.release(this.callbackQueue), this.callbackQueue = null, Y.ReactReconcileTransaction.release(this.reconcileTransaction), this.reconcileTransaction = null;
    },
    perform: function(e, t, n) {
      return m.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, e, t, n);
    }
  }), h.addPoolingTo(o);
  var T = function() {
      for (; y.length || M;) {
        if (y.length) {
          var e = o.getPooled();
          e.perform(s, null, e), o.release(e);
        }
        if (M) {
          M = !1;
          var t = g;
          g = f.getPooled(), t.notifyAll(), f.release(t);
        }
      }
    },
    S = {
      injectReconcileTransaction: function(e) {
        e || c("126"), Y.ReactReconcileTransaction = e;
      },
      injectBatchingStrategy: function(e) {
        e || c("127"), "function" != typeof e.batchedUpdates && c("128"), "boolean" != typeof e.isBatchingUpdates && c("129"), b = e;
      }
    },
    Y = {
      ReactReconcileTransaction: null,
      batchedUpdates: i,
      enqueueUpdate: u,
      flushBatchedUpdates: T,
      injection: S,
      asap: l
    };
  e.exports = Y;
}, function(e, t, n) {
  var r = n(88)("wks"),
    o = n(63),
    i = n(27).Symbol,
    a = "function" == typeof i;
  (e.exports = function(e) {
    return r[e] || (r[e] = a && i[e] || (a ? i : o)("Symbol." + e));
  }).store = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    this.dispatchConfig = e, this._targetInst = t, this.nativeEvent = n;
    var o = this.constructor.Interface;
    for (var i in o)
      if (o.hasOwnProperty(i)) {
        var s = o[i];
        s ? this[i] = s(n) : "target" === i ? this.target = r : this[i] = n[i];
      }
    var u = null != n.defaultPrevented ? n.defaultPrevented : !1 === n.returnValue;
    return this.isDefaultPrevented = u ? a.thatReturnsTrue : a.thatReturnsFalse, this.isPropagationStopped = a.thatReturnsFalse, this;
  }
  var o = n(6),
    i = n(35),
    a = n(17),
    s = (n(3), ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"]),
    u = {
      type: null,
      target: null,
      currentTarget: a.thatReturnsNull,
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function(e) {
        return e.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null
    };
  o(r.prototype, {
    preventDefault: function() {
      this.defaultPrevented = !0;
      var e = this.nativeEvent;
      e && (e.preventDefault ? e.preventDefault() : "unknown" != typeof e.returnValue && (e.returnValue = !1), this.isDefaultPrevented = a.thatReturnsTrue);
    },
    stopPropagation: function() {
      var e = this.nativeEvent;
      e && (e.stopPropagation ? e.stopPropagation() : "unknown" != typeof e.cancelBubble && (e.cancelBubble = !0), this.isPropagationStopped = a.thatReturnsTrue);
    },
    persist: function() {
      this.isPersistent = a.thatReturnsTrue;
    },
    isPersistent: a.thatReturnsFalse,
    destructor: function() {
      var e = this.constructor.Interface;
      for (var t in e) this[t] = null;
      for (var n = 0; n < s.length; n++) this[s[n]] = null;
    }
  }), r.Interface = u, r.augmentClass = function(e, t) {
    var n = this,
      r = function() {};
    r.prototype = n.prototype;
    var a = new r;
    o(a, e.prototype), e.prototype = a, e.prototype.constructor = e, e.Interface = o({}, n.Interface, t), e.augmentClass = n.augmentClass, i.addPoolingTo(e, i.fourArgumentPooler);
  }, i.addPoolingTo(r, i.fourArgumentPooler), e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = {
    current: null
  };
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(346);
  t.a = r.a;
}, function(e, t, n) {
  "use strict";
  t.__esModule = !0;
  var r = n(373),
    o = function(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }(r);
  t.default = o.default || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  };
}, function(e, t) {
  var n = e.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
  "number" == typeof __g && (__g = n);
}, function(e, t, n) {
  var r = n(144),
    o = n(79);
  e.exports = function(e) {
    return r(o(e));
  };
}, function(e, t, n) {
  "use strict";
  var r = n(529),
    o = (n(286), n(530));
  n.d(t, "a", function() {
    return r.a;
  }), n.d(t, "b", function() {
    return o.a;
  });
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }

  function i(e, t) {
    var r = u.a.get(t, "ns"),
      o = u.a.omit(t, "ns");
    return n.i(d.a)(e, r)(o);
  }

  function a(e, t, n) {
    return c()(o({}, t.toString(), {
      pattern: t,
      matcherFn: n
    }))(e);
  }
  var s = n(5),
    u = n.n(s),
    l = n(538),
    c = n.n(l),
    d = n(359);
  t.b = a;
  var f = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    h = function() {
      function e(t) {
        return r(this, e),
          function(e, n) {
            return i(e, u.a.defaults(n, t));
          };
      }
      return f(e, null, [{
        key: "ns",
        value: function(t) {
          return new e({
            ns: t
          });
        }
      }, {
        key: "t",
        value: function(e, t) {
          return i(e, t);
        }
      }, {
        key: "locale",
        value: function() {
          return n.i(d.b)();
        }
      }]), e;
    }();
  t.a = h;
}, function(e, t, n) {
  e.exports = !n(37)(function() {
    return 7 != Object.defineProperty({}, "a", {
      get: function() {
        return 7;
      }
    }).a;
  });
}, function(e, t, n) {
  var r = n(27),
    o = n(14),
    i = n(141),
    a = n(38),
    s = function(e, t, n) {
      var u, l, c, d = e & s.F,
        f = e & s.G,
        h = e & s.S,
        p = e & s.P,
        _ = e & s.B,
        m = e & s.W,
        y = f ? o : o[t] || (o[t] = {}),
        v = y.prototype,
        g = f ? r : h ? r[t] : (r[t] || {}).prototype;
      f && (n = t);
      for (u in n)(l = !d && g && void 0 !== g[u]) && u in y || (c = l ? g[u] : n[u], y[u] = f && "function" != typeof g[u] ? n[u] : _ && l ? i(c, r) : m && g[u] == c ? function(e) {
        var t = function(t, n, r) {
          if (this instanceof e) {
            switch (arguments.length) {
              case 0:
                return new e;
              case 1:
                return new e(t);
              case 2:
                return new e(t, n);
            }
            return new e(t, n, r);
          }
          return e.apply(this, arguments);
        };
        return t.prototype = e.prototype, t;
      }(c) : p && "function" == typeof c ? i(Function.call, c) : c, p && ((y.virtual || (y.virtual = {}))[u] = c, e & s.R && v && !v[u] && a(v, u, c)));
    };
  s.F = 1, s.G = 2, s.S = 4, s.P = 8, s.B = 16, s.W = 32, s.U = 64, s.R = 128, e.exports = s;
}, function(e, t) {
  var n = {}.hasOwnProperty;
  e.exports = function(e, t) {
    return n.call(e, t);
  };
}, function(e, t, n) {
  var r = n(36),
    o = n(143),
    i = n(90),
    a = Object.defineProperty;
  t.f = n(31) ? Object.defineProperty : function(e, t, n) {
    if (r(e), t = i(t, !0), r(n), o) try {
      return a(e, t, n);
    } catch (e) {}
    if ("get" in n || "set" in n) throw TypeError("Accessors not supported!");
    return "value" in n && (e[t] = n.value), e;
  };
}, function(e, t, n) {
  "use strict";
  var r = n(4),
    o = (n(2), function(e) {
      var t = this;
      if (t.instancePool.length) {
        var n = t.instancePool.pop();
        return t.call(n, e), n;
      }
      return new t(e);
    }),
    i = function(e, t) {
      var n = this;
      if (n.instancePool.length) {
        var r = n.instancePool.pop();
        return n.call(r, e, t), r;
      }
      return new n(e, t);
    },
    a = function(e, t, n) {
      var r = this;
      if (r.instancePool.length) {
        var o = r.instancePool.pop();
        return r.call(o, e, t, n), o;
      }
      return new r(e, t, n);
    },
    s = function(e, t, n, r) {
      var o = this;
      if (o.instancePool.length) {
        var i = o.instancePool.pop();
        return o.call(i, e, t, n, r), i;
      }
      return new o(e, t, n, r);
    },
    u = function(e) {
      var t = this;
      e instanceof t || r("25"), e.destructor(), t.instancePool.length < t.poolSize && t.instancePool.push(e);
    },
    l = o,
    c = function(e, t) {
      var n = e;
      return n.instancePool = [], n.getPooled = t || l, n.poolSize || (n.poolSize = 10), n.release = u, n;
    },
    d = {
      addPoolingTo: c,
      oneArgumentPooler: o,
      twoArgumentPooler: i,
      threeArgumentPooler: a,
      fourArgumentPooler: s
    };
  e.exports = d;
}, function(e, t, n) {
  var r = n(47);
  e.exports = function(e) {
    if (!r(e)) throw TypeError(e + " is not an object!");
    return e;
  };
}, function(e, t) {
  e.exports = function(e) {
    try {
      return !!e();
    } catch (e) {
      return !0;
    }
  };
}, function(e, t, n) {
  var r = n(34),
    o = n(61);
  e.exports = n(31) ? function(e, t, n) {
    return r.f(e, t, o(1, n));
  } : function(e, t, n) {
    return e[t] = n, e;
  };
}, function(e, t, n) {
  var r = n(148),
    o = n(80);
  e.exports = Object.keys || function(e) {
    return r(e, o);
  };
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if (p) {
      var t = e.node,
        n = e.children;
      if (n.length)
        for (var r = 0; r < n.length; r++) _(t, n[r], null);
      else null != e.html ? d(t, e.html) : null != e.text && h(t, e.text);
    }
  }

  function o(e, t) {
    e.parentNode.replaceChild(t.node, e), r(t);
  }

  function i(e, t) {
    p ? e.children.push(t) : e.node.appendChild(t.node);
  }

  function a(e, t) {
    p ? e.html = t : d(e.node, t);
  }

  function s(e, t) {
    p ? e.text = t : h(e.node, t);
  }

  function u() {
    return this.node.nodeName;
  }

  function l(e) {
    return {
      node: e,
      children: [],
      html: null,
      text: null,
      toString: u
    };
  }
  var c = n(100),
    d = n(68),
    f = n(108),
    h = n(283),
    p = "undefined" != typeof document && "number" == typeof document.documentMode || "undefined" != typeof navigator && "string" == typeof navigator.userAgent && /\bEdge\/\d/.test(navigator.userAgent),
    _ = f(function(e, t, n) {
      11 === t.node.nodeType || 1 === t.node.nodeType && "object" === t.node.nodeName.toLowerCase() && (null == t.node.namespaceURI || t.node.namespaceURI === c.html) ? (r(t), e.insertBefore(t.node, n)) : (e.insertBefore(t.node, n), r(t));
    });
  l.insertTreeBefore = _, l.replaceChildWithTree = o, l.queueChild = i, l.queueHTML = a, l.queueText = s, e.exports = l;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return (e & t) === t;
  }
  var o = n(4),
    i = (n(2), {
      MUST_USE_PROPERTY: 1,
      HAS_BOOLEAN_VALUE: 4,
      HAS_NUMERIC_VALUE: 8,
      HAS_POSITIVE_NUMERIC_VALUE: 24,
      HAS_OVERLOADED_BOOLEAN_VALUE: 32,
      injectDOMPropertyConfig: function(e) {
        var t = i,
          n = e.Properties || {},
          a = e.DOMAttributeNamespaces || {},
          u = e.DOMAttributeNames || {},
          l = e.DOMPropertyNames || {},
          c = e.DOMMutationMethods || {};
        e.isCustomAttribute && s._isCustomAttributeFunctions.push(e.isCustomAttribute);
        for (var d in n) {
          s.properties.hasOwnProperty(d) && o("48", d);
          var f = d.toLowerCase(),
            h = n[d],
            p = {
              attributeName: f,
              attributeNamespace: null,
              propertyName: d,
              mutationMethod: null,
              mustUseProperty: r(h, t.MUST_USE_PROPERTY),
              hasBooleanValue: r(h, t.HAS_BOOLEAN_VALUE),
              hasNumericValue: r(h, t.HAS_NUMERIC_VALUE),
              hasPositiveNumericValue: r(h, t.HAS_POSITIVE_NUMERIC_VALUE),
              hasOverloadedBooleanValue: r(h, t.HAS_OVERLOADED_BOOLEAN_VALUE)
            };
          if (p.hasBooleanValue + p.hasNumericValue + p.hasOverloadedBooleanValue <= 1 || o("50", d), u.hasOwnProperty(d)) {
            var _ = u[d];
            p.attributeName = _;
          }
          a.hasOwnProperty(d) && (p.attributeNamespace = a[d]), l.hasOwnProperty(d) && (p.propertyName = l[d]), c.hasOwnProperty(d) && (p.mutationMethod = c[d]), s.properties[d] = p;
        }
      }
    }),
    a = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",
    s = {
      ID_ATTRIBUTE_NAME: "data-reactid",
      ROOT_ATTRIBUTE_NAME: "data-reactroot",
      ATTRIBUTE_NAME_START_CHAR: a,
      ATTRIBUTE_NAME_CHAR: a + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",
      properties: {},
      getPossibleStandardName: null,
      _isCustomAttributeFunctions: [],
      isCustomAttribute: function(e) {
        for (var t = 0; t < s._isCustomAttributeFunctions.length; t++)
          if ((0, s._isCustomAttributeFunctions[t])(e)) return !0;
        return !1;
      },
      injection: i
    };
  e.exports = s;
}, function(e, t, n) {
  "use strict";

  function r() {
    o.attachRefs(this, this._currentElement);
  }
  var o = n(495),
    i = (n(18), n(3), {
      mountComponent: function(e, t, n, o, i, a) {
        var s = e.mountComponent(t, n, o, i, a);
        return e._currentElement && null != e._currentElement.ref && t.getReactMountReady().enqueue(r, e), s;
      },
      getHostNode: function(e) {
        return e.getHostNode();
      },
      unmountComponent: function(e, t) {
        o.detachRefs(e, e._currentElement), e.unmountComponent(t);
      },
      receiveComponent: function(e, t, n, i) {
        var a = e._currentElement;
        if (t !== a || i !== e._context) {
          var s = o.shouldUpdateRefs(a, t);
          s && o.detachRefs(e, a), e.receiveComponent(t, n, i), s && e._currentElement && null != e._currentElement.ref && n.getReactMountReady().enqueue(r, e);
        }
      },
      performUpdateIfNecessary: function(e, t, n) {
        e._updateBatchNumber === n && e.performUpdateIfNecessary(t);
      }
    });
  e.exports = i;
}, function(e, t, n) {
  "use strict";
  var r = n(6),
    o = n(573),
    i = n(118),
    a = n(578),
    s = n(574),
    u = n(575),
    l = n(44),
    c = n(576),
    d = n(579),
    f = n(580),
    h = (n(3), l.createElement),
    p = l.createFactory,
    _ = l.cloneElement,
    m = r,
    y = {
      Children: {
        map: o.map,
        forEach: o.forEach,
        count: o.count,
        toArray: o.toArray,
        only: f
      },
      Component: i,
      PureComponent: a,
      createElement: h,
      cloneElement: _,
      isValidElement: l.isValidElement,
      PropTypes: c,
      createClass: s.createClass,
      createFactory: p,
      createMixin: function(e) {
        return e;
      },
      DOM: u,
      version: d,
      __spread: m
    };
  e.exports = y;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return void 0 !== e.ref;
  }

  function o(e) {
    return void 0 !== e.key;
  }
  var i = n(6),
    a = n(24),
    s = (n(3), n(317), Object.prototype.hasOwnProperty),
    u = n(315),
    l = {
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    },
    c = function(e, t, n, r, o, i, a) {
      return {
        $$typeof: u,
        type: e,
        key: t,
        ref: n,
        props: a,
        _owner: i
      };
    };
  c.createElement = function(e, t, n) {
    var i, u = {},
      d = null,
      f = null;
    if (null != t) {
      r(t) && (f = t.ref), o(t) && (d = "" + t.key), void 0 === t.__self || t.__self, void 0 === t.__source || t.__source;
      for (i in t) s.call(t, i) && !l.hasOwnProperty(i) && (u[i] = t[i]);
    }
    var h = arguments.length - 2;
    if (1 === h) u.children = n;
    else if (h > 1) {
      for (var p = Array(h), _ = 0; _ < h; _++) p[_] = arguments[_ + 2];
      u.children = p;
    }
    if (e && e.defaultProps) {
      var m = e.defaultProps;
      for (i in m) void 0 === u[i] && (u[i] = m[i]);
    }
    return c(e, d, f, 0, 0, a.current, u);
  }, c.createFactory = function(e) {
    var t = c.createElement.bind(null, e);
    return t.type = e, t;
  }, c.cloneAndReplaceKey = function(e, t) {
    return c(e.type, t, e.ref, e._self, e._source, e._owner, e.props);
  }, c.cloneElement = function(e, t, n) {
    var u, d = i({}, e.props),
      f = e.key,
      h = e.ref,
      p = (e._self, e._source, e._owner);
    if (null != t) {
      r(t) && (h = t.ref, p = a.current), o(t) && (f = "" + t.key);
      var _;
      e.type && e.type.defaultProps && (_ = e.type.defaultProps);
      for (u in t) s.call(t, u) && !l.hasOwnProperty(u) && (void 0 === t[u] && void 0 !== _ ? d[u] = _[u] : d[u] = t[u]);
    }
    var m = arguments.length - 2;
    if (1 === m) d.children = n;
    else if (m > 1) {
      for (var y = Array(m), v = 0; v < m; v++) y[v] = arguments[v + 2];
      d.children = y;
    }
    return c(e.type, f, h, 0, 0, p, d);
  }, c.isValidElement = function(e) {
    return "object" == typeof e && null !== e && e.$$typeof === u;
  }, e.exports = c;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    for (var t = arguments.length - 1, n = "Minified React error #" + e + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=" + e, r = 0; r < t; r++) n += "&args[]=" + encodeURIComponent(arguments[r + 1]);
    n += " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    var o = new Error(n);
    throw o.name = "Invariant Violation", o.framesToPop = 1, o;
  }
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var o = n(5),
    i = n.n(o),
    a = n(16);
  n.n(a), n.d(t, "bulkAddChannels", function() {
    return l;
  }), n.d(t, "addChannel", function() {
    return c;
  }), n.d(t, "removeChannel", function() {
    return d;
  }), n.d(t, "forceUpdateOfChannelById", function() {
    return f;
  }), n.d(t, "getChannelById", function() {
    return p;
  }), n.d(t, "getAllChannels", function() {
    return _;
  }), n.d(t, "isGroup", function() {
    return m;
  }), n.d(t, "isChannel", function() {
    return y;
  }), n.d(t, "isMpim", function() {
    return v;
  }), n.d(t, "isIm", function() {
    return g;
  }), n.d(t, "getChannelType", function() {
    return M;
  });
  var s, u = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    l = n.i(a.createAction)("Bulk add channels, overwriting anything previously stored with the same id"),
    c = n.i(a.createAction)("Add a channel, overwriting anything previously stored with the same id"),
    d = n.i(a.createAction)("Remove a channel"),
    f = n.i(a.createAction)("Legacy hack: Force an update of a channel, because it broke immutability and updated in place"),
    h = n.i(a.createReducer)((s = {}, r(s, l, function(e, t) {
      if (!t || !t.length || !i.a.isArray(t)) return e;
      var n = i.a.filter(t, "id");
      if (!n.length) return e;
      var r = u({}, e);
      return n.forEach(function(e) {
        r[e.id] = e;
      }), r;
    }), r(s, c, function(e, t) {
      return t && t.id ? u({}, e, r({}, t.id, t)) : e;
    }), r(s, d, function(e, t) {
      return t && t.id && e[t.id] ? i.a.omit(e, t.id) : e;
    }), r(s, f, function(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        n = t.id;
      if (!n || !e[n]) return e;
      var r = u({}, e);
      return r[n] = u({}, r[n]), r;
    }), s), {});
  t.default = h;
  var p = function(e, t) {
      return e && e.channels && e.channels[t];
    },
    _ = function(e) {
      return e.channels;
    },
    m = function(e) {
      return e && e.is_group && !e.is_mpim;
    },
    y = function(e) {
      return e && e.is_channel;
    },
    v = function(e) {
      return e && e.is_mpim;
    },
    g = function(e) {
      return e && e.is_im;
    },
    M = function(e) {
      return m(e) ? "group" : v(e) ? "mpim" : g(e) ? "im" : "channel";
    };
}, function(e, t) {
  e.exports = function(e) {
    return "object" == typeof e ? null !== e : "function" == typeof e;
  };
}, function(e, t) {
  e.exports = {};
}, function(e, t, n) {
  "use strict";
  var r = {};
  e.exports = r;
}, , function(e, t, n) {
  "use strict";

  function r(e) {
    return "button" === e || "input" === e || "select" === e || "textarea" === e;
  }

  function o(e, t, n) {
    switch (e) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
        return !(!n.disabled || !r(t));
      default:
        return !1;
    }
  }
  var i = n(4),
    a = n(101),
    s = n(102),
    u = n(106),
    l = n(277),
    c = n(278),
    d = (n(2), {}),
    f = null,
    h = function(e, t) {
      e && (s.executeDispatchesInOrder(e, t), e.isPersistent() || e.constructor.release(e));
    },
    p = function(e) {
      return h(e, !0);
    },
    _ = function(e) {
      return h(e, !1);
    },
    m = function(e) {
      return "." + e._rootNodeID;
    },
    y = {
      injection: {
        injectEventPluginOrder: a.injectEventPluginOrder,
        injectEventPluginsByName: a.injectEventPluginsByName
      },
      putListener: function(e, t, n) {
        "function" != typeof n && i("94", t, typeof n);
        var r = m(e);
        (d[t] || (d[t] = {}))[r] = n;
        var o = a.registrationNameModules[t];
        o && o.didPutListener && o.didPutListener(e, t, n);
      },
      getListener: function(e, t) {
        var n = d[t];
        if (o(t, e._currentElement.type, e._currentElement.props)) return null;
        var r = m(e);
        return n && n[r];
      },
      deleteListener: function(e, t) {
        var n = a.registrationNameModules[t];
        n && n.willDeleteListener && n.willDeleteListener(e, t);
        var r = d[t];
        r && delete r[m(e)];
      },
      deleteAllListeners: function(e) {
        var t = m(e);
        for (var n in d)
          if (d.hasOwnProperty(n) && d[n][t]) {
            var r = a.registrationNameModules[n];
            r && r.willDeleteListener && r.willDeleteListener(e, n), delete d[n][t];
          }
      },
      extractEvents: function(e, t, n, r) {
        for (var o, i = a.plugins, s = 0; s < i.length; s++) {
          var u = i[s];
          if (u) {
            var c = u.extractEvents(e, t, n, r);
            c && (o = l(o, c));
          }
        }
        return o;
      },
      enqueueEvents: function(e) {
        e && (f = l(f, e));
      },
      processEventQueue: function(e) {
        var t = f;
        f = null, e ? c(t, p) : c(t, _), f && i("95"), u.rethrowCaughtError();
      },
      __purge: function() {
        d = {};
      },
      __getListenerBank: function() {
        return d;
      }
    };
  e.exports = y;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    var r = t.dispatchConfig.phasedRegistrationNames[n];
    return y(e, r);
  }

  function o(e, t, n) {
    var o = r(e, n, t);
    o && (n._dispatchListeners = _(n._dispatchListeners, o), n._dispatchInstances = _(n._dispatchInstances, e));
  }

  function i(e) {
    e && e.dispatchConfig.phasedRegistrationNames && p.traverseTwoPhase(e._targetInst, o, e);
  }

  function a(e) {
    if (e && e.dispatchConfig.phasedRegistrationNames) {
      var t = e._targetInst,
        n = t ? p.getParentInstance(t) : null;
      p.traverseTwoPhase(n, o, e);
    }
  }

  function s(e, t, n) {
    if (n && n.dispatchConfig.registrationName) {
      var r = n.dispatchConfig.registrationName,
        o = y(e, r);
      o && (n._dispatchListeners = _(n._dispatchListeners, o), n._dispatchInstances = _(n._dispatchInstances, e));
    }
  }

  function u(e) {
    e && e.dispatchConfig.registrationName && s(e._targetInst, null, e);
  }

  function l(e) {
    m(e, i);
  }

  function c(e) {
    m(e, a);
  }

  function d(e, t, n, r) {
    p.traverseEnterLeave(n, r, s, e, t);
  }

  function f(e) {
    m(e, u);
  }
  var h = n(51),
    p = n(102),
    _ = n(277),
    m = n(278),
    y = (n(3), h.getListener),
    v = {
      accumulateTwoPhaseDispatches: l,
      accumulateTwoPhaseDispatchesSkipTarget: c,
      accumulateDirectDispatches: f,
      accumulateEnterLeaveDispatches: d
    };
  e.exports = v;
}, function(e, t, n) {
  "use strict";
  var r = {
    remove: function(e) {
      e._reactInternalInstance = void 0;
    },
    get: function(e) {
      return e._reactInternalInstance;
    },
    has: function(e) {
      return void 0 !== e._reactInternalInstance;
    },
    set: function(e, t) {
      e._reactInternalInstance = t;
    }
  };
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(23),
    i = n(111),
    a = {
      view: function(e) {
        if (e.view) return e.view;
        var t = i(e);
        if (t.window === t) return t;
        var n = t.ownerDocument;
        return n ? n.defaultView || n.parentWindow : window;
      },
      detail: function(e) {
        return e.detail || 0;
      }
    };
  o.augmentClass(r, a), e.exports = r;
}, function(e, t) {
  var n;
  n = function() {
    return this;
  }();
  try {
    n = n || Function("return this")() || (0, eval)("this");
  } catch (e) {
    "object" == typeof window && (n = window);
  }
  e.exports = n;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    l = {
      emoji: a.PropTypes.shape({
        html: a.PropTypes.string
      })
    },
    c = {
      emoji: {
        html: null
      }
    },
    d = function(e) {
      function t() {
        return r(this, t), o(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));
      }
      return i(t, e), u(t, [{
        key: "render",
        value: function() {
          var e = this.props.emoji;
          return s.a.createElement("span", {
            dangerouslySetInnerHTML: {
              __html: e.html
            }
          });
        }
      }]), t;
    }(a.PureComponent);
  t.a = d, d.propTypes = l, d.defaultProps = c;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }
  var o = n(16),
    i = (n.n(o), n(5)),
    a = n.n(i);
  n.d(t, "e", function() {
    return l;
  }), n.d(t, "f", function() {
    return c;
  }), n.d(t, "g", function() {
    return d;
  }), n.d(t, "h", function() {
    return f;
  }), n.d(t, "c", function() {
    return y;
  }), n.d(t, "a", function() {
    return v;
  }), n.d(t, "b", function() {
    return g;
  }), n.d(t, "d", function() {
    return M;
  }), n.d(t, "i", function() {
    return b;
  });
  var s, u = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    l = n.i(o.createAction)("Select an item"),
    c = n.i(o.createAction)("Open an invite people dialog"),
    d = n.i(o.createAction)("Open a create channel dialog"),
    f = n.i(o.createAction)("Open a direct message"),
    h = n.i(o.createAction)("Set the channel ordering"),
    p = n.i(o.createAction)("Set the channel ordering"),
    _ = {
      hasAllUnreadsLink: !0,
      hasAllThreadsLink: !0,
      hasInvitePeopleLink: !0,
      selectedItemId: void 0,
      channelGroupsOrdered: ["channels", "ims"],
      channelGroups: {
        channels: {
          displayName: "Channels",
          tooltip: "Browse all channels",
          count: 0,
          createChannelBtn: !0,
          channelsOrdered: []
        },
        ims: {
          displayName: "Direct Messages",
          tooltip: "Open a Direct Message",
          createDmBtn: !0,
          channelsOrdered: []
        }
      },
      links: {
        Vall_threads: {
          label: "All Threads",
          labelUnread: "New Threads",
          selectable: !0,
          hasUnreads: !1
        },
        Vall_unreads: {
          label: "All Unreads",
          selectable: !0,
          hasUnreads: !1
        },
        Vinvites: {
          label: "Invite People",
          selectable: !1
        }
      }
    },
    m = n.i(o.createReducer)((s = {}, r(s, l, function(e, t) {
      return u({}, e, {
        selectedItemId: t
      });
    }), r(s, h, function(e, t) {
      return u({}, e, {
        channelGroups: u({}, e.channelGroups, {
          channels: u({}, e.channelGroups.channels, {
            channelsOrdered: t
          })
        })
      });
    }), r(s, p, function(e, t) {
      return u({}, e, {
        channelGroups: u({}, e.channelGroups, {
          ims: u({}, e.channelGroups.ims, {
            channelsOrdered: t
          })
        })
      });
    }), s), _);
  t.j = m;
  var y = function(e) {
      return a.a.get(e, "channelSidebar.selectedItemId");
    },
    v = function(e) {
      return a.a.get(e, "channelSidebar.channelGroupsOrdered");
    },
    g = function(e) {
      return a.a.get(e, "channelSidebar.channelGroups");
    },
    M = function(e) {
      return a.a.get(e, "channelSidebar.links");
    },
    b = function(e, t) {
      return a.a.get(e, "channelSidebar.links." + t);
    };
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
      n = t.unitsIn,
      r = void 0 === n ? "milliseconds" : n,
      o = t.unitsOut,
      a = void 0 === o ? "milliseconds" : o;
    return "milliseconds" === a ? i.a.duration(e, r).as(a) : i.a.duration(e, r).get(a);
  }
  var o = n(0),
    i = n.n(o);
  t.a = r;
}, function(e, t, n) {
  "use strict";
  t.__esModule = !0, t.default = function(e, t) {
    var n = {};
    for (var r in e) t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);
    return n;
  };
}, function(e, t) {
  t.f = {}.propertyIsEnumerable;
}, function(e, t) {
  e.exports = function(e, t) {
    return {
      enumerable: !(1 & e),
      configurable: !(2 & e),
      writable: !(4 & e),
      value: t
    };
  };
}, function(e, t, n) {
  var r = n(79);
  e.exports = function(e) {
    return Object(r(e));
  };
}, function(e, t) {
  var n = 0,
    r = Math.random();
  e.exports = function(e) {
    return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++n + r).toString(36));
  };
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return Object.prototype.hasOwnProperty.call(e, _) || (e[_] = h++, d[e[_]] = {}), d[e[_]];
  }
  var o, i = n(6),
    a = n(101),
    s = n(487),
    u = n(276),
    l = n(520),
    c = n(112),
    d = {},
    f = !1,
    h = 0,
    p = {
      topAbort: "abort",
      topAnimationEnd: l("animationend") || "animationend",
      topAnimationIteration: l("animationiteration") || "animationiteration",
      topAnimationStart: l("animationstart") || "animationstart",
      topBlur: "blur",
      topCanPlay: "canplay",
      topCanPlayThrough: "canplaythrough",
      topChange: "change",
      topClick: "click",
      topCompositionEnd: "compositionend",
      topCompositionStart: "compositionstart",
      topCompositionUpdate: "compositionupdate",
      topContextMenu: "contextmenu",
      topCopy: "copy",
      topCut: "cut",
      topDoubleClick: "dblclick",
      topDrag: "drag",
      topDragEnd: "dragend",
      topDragEnter: "dragenter",
      topDragExit: "dragexit",
      topDragLeave: "dragleave",
      topDragOver: "dragover",
      topDragStart: "dragstart",
      topDrop: "drop",
      topDurationChange: "durationchange",
      topEmptied: "emptied",
      topEncrypted: "encrypted",
      topEnded: "ended",
      topError: "error",
      topFocus: "focus",
      topInput: "input",
      topKeyDown: "keydown",
      topKeyPress: "keypress",
      topKeyUp: "keyup",
      topLoadedData: "loadeddata",
      topLoadedMetadata: "loadedmetadata",
      topLoadStart: "loadstart",
      topMouseDown: "mousedown",
      topMouseMove: "mousemove",
      topMouseOut: "mouseout",
      topMouseOver: "mouseover",
      topMouseUp: "mouseup",
      topPaste: "paste",
      topPause: "pause",
      topPlay: "play",
      topPlaying: "playing",
      topProgress: "progress",
      topRateChange: "ratechange",
      topScroll: "scroll",
      topSeeked: "seeked",
      topSeeking: "seeking",
      topSelectionChange: "selectionchange",
      topStalled: "stalled",
      topSuspend: "suspend",
      topTextInput: "textInput",
      topTimeUpdate: "timeupdate",
      topTouchCancel: "touchcancel",
      topTouchEnd: "touchend",
      topTouchMove: "touchmove",
      topTouchStart: "touchstart",
      topTransitionEnd: l("transitionend") || "transitionend",
      topVolumeChange: "volumechange",
      topWaiting: "waiting",
      topWheel: "wheel"
    },
    _ = "_reactListenersID" + String(Math.random()).slice(2),
    m = i({}, s, {
      ReactEventListener: null,
      injection: {
        injectReactEventListener: function(e) {
          e.setHandleTopLevel(m.handleTopLevel), m.ReactEventListener = e;
        }
      },
      setEnabled: function(e) {
        m.ReactEventListener && m.ReactEventListener.setEnabled(e);
      },
      isEnabled: function() {
        return !(!m.ReactEventListener || !m.ReactEventListener.isEnabled());
      },
      listenTo: function(e, t) {
        for (var n = t, o = r(n), i = a.registrationNameDependencies[e], s = 0; s < i.length; s++) {
          var u = i[s];
          o.hasOwnProperty(u) && o[u] || ("topWheel" === u ? c("wheel") ? m.ReactEventListener.trapBubbledEvent("topWheel", "wheel", n) : c("mousewheel") ? m.ReactEventListener.trapBubbledEvent("topWheel", "mousewheel", n) : m.ReactEventListener.trapBubbledEvent("topWheel", "DOMMouseScroll", n) : "topScroll" === u ? c("scroll", !0) ? m.ReactEventListener.trapCapturedEvent("topScroll", "scroll", n) : m.ReactEventListener.trapBubbledEvent("topScroll", "scroll", m.ReactEventListener.WINDOW_HANDLE) : "topFocus" === u || "topBlur" === u ? (c("focus", !0) ? (m.ReactEventListener.trapCapturedEvent("topFocus", "focus", n), m.ReactEventListener.trapCapturedEvent("topBlur", "blur", n)) : c("focusin") && (m.ReactEventListener.trapBubbledEvent("topFocus", "focusin", n), m.ReactEventListener.trapBubbledEvent("topBlur", "focusout", n)), o.topBlur = !0, o.topFocus = !0) : p.hasOwnProperty(u) && m.ReactEventListener.trapBubbledEvent(u, p[u], n), o[u] = !0);
        }
      },
      trapBubbledEvent: function(e, t, n) {
        return m.ReactEventListener.trapBubbledEvent(e, t, n);
      },
      trapCapturedEvent: function(e, t, n) {
        return m.ReactEventListener.trapCapturedEvent(e, t, n);
      },
      supportsEventPageXY: function() {
        if (!document.createEvent) return !1;
        var e = document.createEvent("MouseEvent");
        return null != e && "pageX" in e;
      },
      ensureScrollValueMonitoring: function() {
        if (void 0 === o && (o = m.supportsEventPageXY()), !o && !f) {
          var e = u.refreshScrollValues;
          m.ReactEventListener.monitorScrollValue(e), f = !0;
        }
      }
    });
  e.exports = m;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(54),
    i = n(276),
    a = n(110),
    s = {
      screenX: null,
      screenY: null,
      clientX: null,
      clientY: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      getModifierState: a,
      button: function(e) {
        var t = e.button;
        return "which" in e ? t : 2 === t ? 2 : 4 === t ? 1 : 0;
      },
      buttons: null,
      relatedTarget: function(e) {
        return e.relatedTarget || (e.fromElement === e.srcElement ? e.toElement : e.fromElement);
      },
      pageX: function(e) {
        return "pageX" in e ? e.pageX : e.clientX + i.currentScrollLeft;
      },
      pageY: function(e) {
        return "pageY" in e ? e.pageY : e.clientY + i.currentScrollTop;
      }
    };
  o.augmentClass(r, s), e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(4),
    o = (n(2), {}),
    i = {
      reinitializeTransaction: function() {
        this.transactionWrappers = this.getTransactionWrappers(), this.wrapperInitData ? this.wrapperInitData.length = 0 : this.wrapperInitData = [], this._isInTransaction = !1;
      },
      _isInTransaction: !1,
      getTransactionWrappers: null,
      isInTransaction: function() {
        return !!this._isInTransaction;
      },
      perform: function(e, t, n, o, i, a, s, u) {
        this.isInTransaction() && r("27");
        var l, c;
        try {
          this._isInTransaction = !0, l = !0, this.initializeAll(0), c = e.call(t, n, o, i, a, s, u), l = !1;
        } finally {
          try {
            if (l) try {
              this.closeAll(0);
            } catch (e) {} else this.closeAll(0);
          } finally {
            this._isInTransaction = !1;
          }
        }
        return c;
      },
      initializeAll: function(e) {
        for (var t = this.transactionWrappers, n = e; n < t.length; n++) {
          var r = t[n];
          try {
            this.wrapperInitData[n] = o, this.wrapperInitData[n] = r.initialize ? r.initialize.call(this) : null;
          } finally {
            if (this.wrapperInitData[n] === o) try {
              this.initializeAll(n + 1);
            } catch (e) {}
          }
        }
      },
      closeAll: function(e) {
        this.isInTransaction() || r("28");
        for (var t = this.transactionWrappers, n = e; n < t.length; n++) {
          var i, a = t[n],
            s = this.wrapperInitData[n];
          try {
            i = !0, s !== o && a.close && a.close.call(this, s), i = !1;
          } finally {
            if (i) try {
              this.closeAll(n + 1);
            } catch (e) {}
          }
        }
        this.wrapperInitData.length = 0;
      }
    };
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = "" + e,
      n = i.exec(t);
    if (!n) return t;
    var r, o = "",
      a = 0,
      s = 0;
    for (a = n.index; a < t.length; a++) {
      switch (t.charCodeAt(a)) {
        case 34:
          r = "&quot;";
          break;
        case 38:
          r = "&amp;";
          break;
        case 39:
          r = "&#x27;";
          break;
        case 60:
          r = "&lt;";
          break;
        case 62:
          r = "&gt;";
          break;
        default:
          continue;
      }
      s !== a && (o += t.substring(s, a)), s = a + 1, o += r;
    }
    return s !== a ? o + t.substring(s, a) : o;
  }

  function o(e) {
    return "boolean" == typeof e || "number" == typeof e ? "" + e : r(e);
  }
  var i = /["'&<>]/;
  e.exports = o;
}, function(e, t, n) {
  "use strict";
  var r, o = n(15),
    i = n(100),
    a = /^[ \r\n\t\f]/,
    s = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,
    u = n(108),
    l = u(function(e, t) {
      if (e.namespaceURI !== i.svg || "innerHTML" in e) e.innerHTML = t;
      else {
        r = r || document.createElement("div"), r.innerHTML = "<svg>" + t + "</svg>";
        for (var n = r.firstChild; n.firstChild;) e.appendChild(n.firstChild);
      }
    });
  if (o.canUseDOM) {
    var c = document.createElement("div");
    c.innerHTML = " ", "" === c.innerHTML && (l = function(e, t) {
      if (e.parentNode && e.parentNode.replaceChild(e, e), a.test(t) || "<" === t[0] && s.test(t)) {
        e.innerHTML = String.fromCharCode(65279) + t;
        var n = e.firstChild;
        1 === n.data.length ? e.removeChild(n) : n.deleteData(0, 1);
      } else e.innerHTML = t;
    }), c = null;
  }
  e.exports = l;
}, function(e, t, n) {
  "use strict";
  var r = n(295);
  n.d(t, "a", function() {
    return r.a;
  });
  var o = n(552);
  n.d(t, "b", function() {
    return o.a;
  }), n(296), n(297);
}, function(e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var r = n(319),
    o = function(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }(r);
  t.default = (0, o.default)("Batch", function() {
    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
    return 1 === t.length && Array.isArray(t[0]) ? t[0] : t;
  });
}, function(e, t, n) {
  "use strict";
  var r = n(322),
    o = n(591),
    i = n(590),
    a = n(589),
    s = n(321);
  n(323), n.d(t, "d", function() {
    return r.b;
  }), n.d(t, "e", function() {
    return o.a;
  }), n.d(t, "a", function() {
    return i.a;
  }), n.d(t, "c", function() {
    return a.a;
  }), n.d(t, "b", function() {
    return s.a;
  });
}, function(e, t) {
  e.exports = function(e) {
    return e.webpackPolyfill || (e.deprecate = function() {}, e.paths = [], e.children || (e.children = []), Object.defineProperty(e, "loaded", {
      enumerable: !0,
      get: function() {
        return e.l;
      }
    }), Object.defineProperty(e, "id", {
      enumerable: !0,
      get: function() {
        return e.i;
      }
    }), e.webpackPolyfill = 1), e;
  };
}, function(e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var r = n(16);
  n.n(r), n.d(t, "setMutedChannels", function() {
    return o;
  }), n.d(t, "isChannelMutedById", function() {
    return s;
  });
  var o = n.i(r.createAction)("Rebuild muted channel list"),
    i = {},
    a = n.i(r.createReducer)(function(e, t, n) {
      return t in e ? Object.defineProperty(e, t, {
        value: n,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = n, e;
    }({}, o, function(e, t) {
      return t;
    }), i);
  t.default = a;
  var s = function(e, t) {
    return e && e.channelsMeta && e.channelsMeta.mutedChannels && !!e.channelsMeta.mutedChannels[t];
  };
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var o = n(5),
    i = n.n(o),
    a = n(16);
  n.n(a), n.d(t, "updateMemberType", function() {
    return l;
  }), n.d(t, "bulkUpdateMemberType", function() {
    return c;
  }), n.d(t, "getMemberTypeById", function() {
    return p;
  });
  var s, u = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    l = n.i(a.createAction)("Store a member's type by id"),
    c = n.i(a.createAction)("Store multiple member's type by id"),
    d = {},
    f = function(e) {
      var t = "member";
      return e && e.id ? (e.is_external ? t = "external" : e.is_restricted && !e.is_ultra_restricted ? t = "ra" : e.is_ultra_restricted && (t = "ura"), t) : t;
    },
    h = n.i(a.createReducer)((s = {}, r(s, l, function(e, t) {
      if (!t || !t.id) return e;
      var n = f(t);
      return e[t.id] === n ? e : u({}, e, r({}, t.id, n));
    }), r(s, c, function(e, t) {
      if (!i.a.isArray(t)) return e;
      var n = i.a.filter(t, function(e) {
        return !(!e || !e.id);
      });
      return n.length ? i.a.reduce(n, function(e, t) {
        var n = f(t);
        return e[t.id] = n, e;
      }, u({}, e)) : e;
    }), s), d);
  t.default = h;
  var p = function(e, t) {
    var n = e && e.memberTypesById && e.memberTypesById[t];
    return n || (n = "member"), n;
  };
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var o = n(16);
  n.n(o), n.d(t, "updateDnd", function() {
    return a;
  }), n.d(t, "getDndByMemberId", function() {
    return l;
  });
  var i = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    a = n.i(o.createAction)("Update the DND status of a user"),
    s = {},
    u = n.i(o.createReducer)(r({}, a, function(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        n = t.memberId,
        o = t.isInDnd;
      return n && e[n] !== o ? i({}, e, r({}, n, o)) : e;
    }), s);
  t.default = u;
  var l = function(e, t) {
    return e && e.dnd && e.dnd[t];
  };
}, function(e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var r = n(5),
    o = n.n(r),
    i = n(16);
  n.n(i), n.d(t, "syncDownloads", function() {
    return a;
  }), n.d(t, "getDownloads", function() {
    return l;
  });
  var a = n.i(i.createAction)("Sync downloads from desktop"),
    s = {},
    u = n.i(i.createReducer)(function(e, t, n) {
      return t in e ? Object.defineProperty(e, t, {
        value: n,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }) : e[t] = n, e;
    }({}, a, function(e) {
      return arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    }), s);
  t.default = u;
  var l = function(e) {
    return o.a.values(e.downloads);
  };
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var o = n(5),
    i = n.n(o),
    a = n(16);
  n.n(a), n.d(t, "updatePresence", function() {
    return l;
  }), n.d(t, "bulkUpdatePresence", function() {
    return c;
  }), n.d(t, "getPresenceByMemberId", function() {
    return h;
  });
  var s, u = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    l = n.i(a.createAction)("Update the presence status of a user"),
    c = n.i(a.createAction)("bulk update presence for users"),
    d = {},
    f = n.i(a.createReducer)((s = {}, r(s, l, function(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        n = t.memberId,
        o = t.presence;
      return n && o ? u({}, e, r({}, n, o)) : e;
    }), r(s, c, function(e, t) {
      if (!i.a.isArray(t)) return e;
      var n = i.a.filter(t, function(e) {
        return !!(e && e.id && e.presence);
      });
      return n.length ? i.a.reduce(n, function(e, t) {
        return e[t.id] = t.presence, e;
      }, u({}, e)) : e;
    }), s), d);
  t.default = f;
  var h = function(e, t) {
    return e.presence[t];
  };
}, function(e, t) {
  var n = {}.toString;
  e.exports = function(e) {
    return n.call(e).slice(8, -1);
  };
}, function(e, t) {
  e.exports = function(e) {
    if (void 0 == e) throw TypeError("Can't call method on  " + e);
    return e;
  };
}, function(e, t) {
  e.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
}, function(e, t) {
  e.exports = !0;
}, function(e, t, n) {
  var r = n(36),
    o = n(403),
    i = n(80),
    a = n(87)("IE_PROTO"),
    s = function() {},
    u = function() {
      var e, t = n(142)("iframe"),
        r = i.length;
      for (t.style.display = "none", n(396).appendChild(t), t.src = "javascript:", e = t.contentWindow.document, e.open(), e.write("<script>document.F=Object</script>"), e.close(), u = e.F; r--;) delete u.prototype[i[r]];
      return u();
    };
  e.exports = Object.create || function(e, t) {
    var n;
    return null !== e ? (s.prototype = r(e), n = new s, s.prototype = null, n[a] = e) : n = u(), void 0 === t ? n : o(n, t);
  };
}, function(e, t, n) {
  var r = n(60),
    o = n(61),
    i = n(28),
    a = n(90),
    s = n(33),
    u = n(143),
    l = Object.getOwnPropertyDescriptor;
  t.f = n(31) ? l : function(e, t) {
    if (e = i(e), t = a(t, !0), u) try {
      return l(e, t);
    } catch (e) {}
    if (s(e, t)) return o(!r.f.call(e, t), e[t]);
  };
}, function(e, t) {
  t.f = Object.getOwnPropertySymbols;
}, function(e, t, n) {
  var r = n(32),
    o = n(14),
    i = n(37);
  e.exports = function(e, t) {
    var n = (o.Object || {})[e] || Object[e],
      a = {};
    a[e] = t(n), r(r.S + r.F * i(function() {
      n(1);
    }), "Object", a);
  };
}, function(e, t, n) {
  var r = n(34).f,
    o = n(33),
    i = n(22)("toStringTag");
  e.exports = function(e, t, n) {
    e && !o(e = n ? e : e.prototype, i) && r(e, i, {
      configurable: !0,
      value: t
    });
  };
}, function(e, t, n) {
  var r = n(88)("keys"),
    o = n(63);
  e.exports = function(e) {
    return r[e] || (r[e] = o(e));
  };
}, function(e, t, n) {
  var r = n(27),
    o = r["__core-js_shared__"] || (r["__core-js_shared__"] = {});
  e.exports = function(e) {
    return o[e] || (o[e] = {});
  };
}, function(e, t) {
  var n = Math.ceil,
    r = Math.floor;
  e.exports = function(e) {
    return isNaN(e = +e) ? 0 : (e > 0 ? r : n)(e);
  };
}, function(e, t, n) {
  var r = n(47);
  e.exports = function(e, t) {
    if (!r(e)) return e;
    var n, o;
    if (t && "function" == typeof(n = e.toString) && !r(o = n.call(e))) return o;
    if ("function" == typeof(n = e.valueOf) && !r(o = n.call(e))) return o;
    if (!t && "function" == typeof(n = e.toString) && !r(o = n.call(e))) return o;
    throw TypeError("Can't convert object to primitive value");
  };
}, function(e, t, n) {
  var r = n(27),
    o = n(14),
    i = n(81),
    a = n(92),
    s = n(34).f;
  e.exports = function(e) {
    var t = o.Symbol || (o.Symbol = i ? {} : r.Symbol || {});
    "_" == e.charAt(0) || e in t || s(t, e, {
      value: a.f(e)
    });
  };
}, function(e, t, n) {
  t.f = n(22);
}, function(e, t, n) {
  "use strict";
  var r = n(406)(!0);
  n(145)(String, "String", function(e) {
    this._t = String(e), this._i = 0;
  }, function() {
    var e, t = this._t,
      n = this._i;
    return n >= t.length ? {
      value: void 0,
      done: !0
    } : (e = r(t, n), this._i += e.length, {
      value: e,
      done: !1
    });
  });
}, function(e, t, n) {
  n(412);
  for (var r = n(27), o = n(38), i = n(48), a = n(22)("toStringTag"), s = ["NodeList", "DOMTokenList", "MediaList", "StyleSheetList", "CSSRuleList"], u = 0; u < 5; u++) {
    var l = s[u],
      c = r[l],
      d = c && c.prototype;
    d && !d[a] && o(d, a, l), i[l] = i.Array;
  }
}, function(e, t) {
  e.exports = function() {
    var e = [];
    return e.toString = function() {
      for (var e = [], t = 0; t < this.length; t++) {
        var n = this[t];
        n[2] ? e.push("@media " + n[2] + "{" + n[1] + "}") : e.push(n[1]);
      }
      return e.join("");
    }, e.i = function(t, n) {
      "string" == typeof t && (t = [
        [null, t, ""]
      ]);
      for (var r = {}, o = 0; o < this.length; o++) {
        var i = this[o][0];
        "number" == typeof i && (r[i] = !0);
      }
      for (o = 0; o < t.length; o++) {
        var a = t[o];
        "number" == typeof a[0] && r[a[0]] || (n && !a[2] ? a[2] = n : n && (a[2] = "(" + a[2] + ") and (" + n + ")"), e.push(a));
      }
    }, e;
  };
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return e === t ? 0 !== e || 0 !== t || 1 / e == 1 / t : e !== e && t !== t;
  }

  function o(e, t) {
    if (r(e, t)) return !0;
    if ("object" != typeof e || null === e || "object" != typeof t || null === t) return !1;
    var n = Object.keys(e),
      o = Object.keys(t);
    if (n.length !== o.length) return !1;
    for (var a = 0; a < n.length; a++)
      if (!i.call(t, n[a]) || !r(e[n[a]], t[n[a]])) return !1;
    return !0;
  }
  var i = Object.prototype.hasOwnProperty;
  e.exports = o;
}, , function(e, t, n) {
  "use strict";

  function r(e) {
    if (!n.i(a.a)(e) || n.i(o.a)(e) != s) return !1;
    var t = n.i(i.a)(e);
    if (null === t) return !0;
    var r = d.call(t, "constructor") && t.constructor;
    return "function" == typeof r && r instanceof r && c.call(r) == f;
  }
  var o = n(446),
    i = n(448),
    a = n(453),
    s = "[object Object]",
    u = Function.prototype,
    l = Object.prototype,
    c = u.toString,
    d = l.hasOwnProperty,
    f = c.call(Object);
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return Array.isArray(t) && (t = t[1]), t ? t.nextSibling : e.firstChild;
  }

  function o(e, t, n) {
    c.insertTreeBefore(e, t, n);
  }

  function i(e, t, n) {
    Array.isArray(t) ? s(e, t[0], t[1], n) : _(e, t, n);
  }

  function a(e, t) {
    if (Array.isArray(t)) {
      var n = t[1];
      t = t[0], u(e, t, n), e.removeChild(n);
    }
    e.removeChild(t);
  }

  function s(e, t, n, r) {
    for (var o = t;;) {
      var i = o.nextSibling;
      if (_(e, o, r), o === n) break;
      o = i;
    }
  }

  function u(e, t, n) {
    for (;;) {
      var r = t.nextSibling;
      if (r === n) break;
      e.removeChild(r);
    }
  }

  function l(e, t, n) {
    var r = e.parentNode,
      o = e.nextSibling;
    o === t ? n && _(r, document.createTextNode(n), o) : n ? (p(o, n), u(r, o, t)) : u(r, e, t);
  }
  var c = n(40),
    d = n(464),
    f = (n(10), n(18), n(108)),
    h = n(68),
    p = n(283),
    _ = f(function(e, t, n) {
      e.insertBefore(t, n);
    }),
    m = d.dangerouslyReplaceNodeWithMarkup,
    y = {
      dangerouslyReplaceNodeWithMarkup: m,
      replaceDelimitedText: l,
      processUpdates: function(e, t) {
        for (var n = 0; n < t.length; n++) {
          var s = t[n];
          switch (s.type) {
            case "INSERT_MARKUP":
              o(e, s.content, r(e, s.afterNode));
              break;
            case "MOVE_EXISTING":
              i(e, s.fromNode, r(e, s.afterNode));
              break;
            case "SET_MARKUP":
              h(e, s.content);
              break;
            case "TEXT_CONTENT":
              p(e, s.content);
              break;
            case "REMOVE_NODE":
              a(e, s.fromNode);
          }
        }
      }
    };
  e.exports = y;
}, function(e, t, n) {
  "use strict";
  var r = {
    html: "http://www.w3.org/1999/xhtml",
    mathml: "http://www.w3.org/1998/Math/MathML",
    svg: "http://www.w3.org/2000/svg"
  };
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r() {
    if (s)
      for (var e in u) {
        var t = u[e],
          n = s.indexOf(e);
        if (n > -1 || a("96", e), !l.plugins[n]) {
          t.extractEvents || a("97", e), l.plugins[n] = t;
          var r = t.eventTypes;
          for (var i in r) o(r[i], t, i) || a("98", i, e);
        }
      }
  }

  function o(e, t, n) {
    l.eventNameDispatchConfigs.hasOwnProperty(n) && a("99", n), l.eventNameDispatchConfigs[n] = e;
    var r = e.phasedRegistrationNames;
    if (r) {
      for (var o in r)
        if (r.hasOwnProperty(o)) {
          var s = r[o];
          i(s, t, n);
        }
      return !0;
    }
    return !!e.registrationName && (i(e.registrationName, t, n), !0);
  }

  function i(e, t, n) {
    l.registrationNameModules[e] && a("100", e), l.registrationNameModules[e] = t, l.registrationNameDependencies[e] = t.eventTypes[n].dependencies;
  }
  var a = n(4),
    s = (n(2), null),
    u = {},
    l = {
      plugins: [],
      eventNameDispatchConfigs: {},
      registrationNameModules: {},
      registrationNameDependencies: {},
      possibleRegistrationNames: null,
      injectEventPluginOrder: function(e) {
        s && a("101"), s = Array.prototype.slice.call(e), r();
      },
      injectEventPluginsByName: function(e) {
        var t = !1;
        for (var n in e)
          if (e.hasOwnProperty(n)) {
            var o = e[n];
            u.hasOwnProperty(n) && u[n] === o || (u[n] && a("102", n), u[n] = o, t = !0);
          }
        t && r();
      },
      getPluginModuleForEvent: function(e) {
        var t = e.dispatchConfig;
        if (t.registrationName) return l.registrationNameModules[t.registrationName] || null;
        if (void 0 !== t.phasedRegistrationNames) {
          var n = t.phasedRegistrationNames;
          for (var r in n)
            if (n.hasOwnProperty(r)) {
              var o = l.registrationNameModules[n[r]];
              if (o) return o;
            }
        }
        return null;
      },
      _resetEventPlugins: function() {
        s = null;
        for (var e in u) u.hasOwnProperty(e) && delete u[e];
        l.plugins.length = 0;
        var t = l.eventNameDispatchConfigs;
        for (var n in t) t.hasOwnProperty(n) && delete t[n];
        var r = l.registrationNameModules;
        for (var o in r) r.hasOwnProperty(o) && delete r[o];
      }
    };
  e.exports = l;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return "topMouseUp" === e || "topTouchEnd" === e || "topTouchCancel" === e;
  }

  function o(e) {
    return "topMouseMove" === e || "topTouchMove" === e;
  }

  function i(e) {
    return "topMouseDown" === e || "topTouchStart" === e;
  }

  function a(e, t, n, r) {
    var o = e.type || "unknown-event";
    e.currentTarget = y.getNodeFromInstance(r), t ? _.invokeGuardedCallbackWithCatch(o, n, e) : _.invokeGuardedCallback(o, n, e), e.currentTarget = null;
  }

  function s(e, t) {
    var n = e._dispatchListeners,
      r = e._dispatchInstances;
    if (Array.isArray(n))
      for (var o = 0; o < n.length && !e.isPropagationStopped(); o++) a(e, t, n[o], r[o]);
    else n && a(e, t, n, r);
    e._dispatchListeners = null, e._dispatchInstances = null;
  }

  function u(e) {
    var t = e._dispatchListeners,
      n = e._dispatchInstances;
    if (Array.isArray(t)) {
      for (var r = 0; r < t.length && !e.isPropagationStopped(); r++)
        if (t[r](e, n[r])) return n[r];
    } else if (t && t(e, n)) return n;
    return null;
  }

  function l(e) {
    var t = u(e);
    return e._dispatchInstances = null, e._dispatchListeners = null, t;
  }

  function c(e) {
    var t = e._dispatchListeners,
      n = e._dispatchInstances;
    Array.isArray(t) && p("103"), e.currentTarget = t ? y.getNodeFromInstance(n) : null;
    var r = t ? t(e) : null;
    return e.currentTarget = null, e._dispatchListeners = null, e._dispatchInstances = null, r;
  }

  function d(e) {
    return !!e._dispatchListeners;
  }
  var f, h, p = n(4),
    _ = n(106),
    m = (n(2), n(3), {
      injectComponentTree: function(e) {
        f = e;
      },
      injectTreeTraversal: function(e) {
        h = e;
      }
    }),
    y = {
      isEndish: r,
      isMoveish: o,
      isStartish: i,
      executeDirectDispatch: c,
      executeDispatchesInOrder: s,
      executeDispatchesInOrderStopAtTrue: l,
      hasDispatches: d,
      getInstanceFromNode: function(e) {
        return f.getInstanceFromNode(e);
      },
      getNodeFromInstance: function(e) {
        return f.getNodeFromInstance(e);
      },
      isAncestor: function(e, t) {
        return h.isAncestor(e, t);
      },
      getLowestCommonAncestor: function(e, t) {
        return h.getLowestCommonAncestor(e, t);
      },
      getParentInstance: function(e) {
        return h.getParentInstance(e);
      },
      traverseTwoPhase: function(e, t, n) {
        return h.traverseTwoPhase(e, t, n);
      },
      traverseEnterLeave: function(e, t, n, r, o) {
        return h.traverseEnterLeave(e, t, n, r, o);
      },
      injection: m
    };
  e.exports = y;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = {
      "=": "=0",
      ":": "=2"
    };
    return "$" + ("" + e).replace(/[=:]/g, function(e) {
      return t[e];
    });
  }

  function o(e) {
    var t = {
      "=0": "=",
      "=2": ":"
    };
    return ("" + ("." === e[0] && "$" === e[1] ? e.substring(2) : e.substring(1))).replace(/(=0|=2)/g, function(e) {
      return t[e];
    });
  }
  var i = {
    escape: r,
    unescape: o
  };
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    null != e.checkedLink && null != e.valueLink && s("87");
  }

  function o(e) {
    r(e), (null != e.value || null != e.onChange) && s("88");
  }

  function i(e) {
    r(e), (null != e.checked || null != e.onChange) && s("89");
  }

  function a(e) {
    if (e) {
      var t = e.getName();
      if (t) return " Check the render method of `" + t + "`.";
    }
    return "";
  }
  var s = n(4),
    u = n(43),
    l = n(493),
    c = (n(2), n(3), {
      button: !0,
      checkbox: !0,
      image: !0,
      hidden: !0,
      radio: !0,
      reset: !0,
      submit: !0
    }),
    d = {
      value: function(e, t, n) {
        return !e[t] || c[e.type] || e.onChange || e.readOnly || e.disabled ? null : new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
      },
      checked: function(e, t, n) {
        return !e[t] || e.onChange || e.readOnly || e.disabled ? null : new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
      },
      onChange: u.PropTypes.func
    },
    f = {},
    h = {
      checkPropTypes: function(e, t, n) {
        for (var r in d) {
          if (d.hasOwnProperty(r)) var o = d[r](t, r, e, "prop", null, l);
          o instanceof Error && !(o.message in f) && (f[o.message] = !0, a(n));
        }
      },
      getValue: function(e) {
        return e.valueLink ? (o(e), e.valueLink.value) : e.value;
      },
      getChecked: function(e) {
        return e.checkedLink ? (i(e), e.checkedLink.value) : e.checked;
      },
      executeOnChange: function(e, t) {
        return e.valueLink ? (o(e), e.valueLink.requestChange(t.target.value)) : e.checkedLink ? (i(e), e.checkedLink.requestChange(t.target.checked)) : e.onChange ? e.onChange.call(void 0, t) : void 0;
      }
    };
  e.exports = h;
}, function(e, t, n) {
  "use strict";
  var r = n(4),
    o = (n(2), !1),
    i = {
      replaceNodeWithMarkup: null,
      processChildrenUpdates: null,
      injection: {
        injectEnvironment: function(e) {
          o && r("104"), i.replaceNodeWithMarkup = e.replaceNodeWithMarkup, i.processChildrenUpdates = e.processChildrenUpdates, o = !0;
        }
      }
    };
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    try {
      t(n);
    } catch (e) {
      null === o && (o = e);
    }
  }
  var o = null,
    i = {
      invokeGuardedCallback: r,
      invokeGuardedCallbackWithCatch: r,
      rethrowCaughtError: function() {
        if (o) {
          var e = o;
          throw o = null, e;
        }
      }
    };
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    u.enqueueUpdate(e);
  }

  function o(e) {
    var t = typeof e;
    if ("object" !== t) return t;
    var n = e.constructor && e.constructor.name || t,
      r = Object.keys(e);
    return r.length > 0 && r.length < 20 ? n + " (keys: " + r.join(", ") + ")" : n;
  }

  function i(e, t) {
    var n = s.get(e);
    return n || null;
  }
  var a = n(4),
    s = (n(24), n(53)),
    u = (n(18), n(21)),
    l = (n(2), n(3), {
      isMounted: function(e) {
        var t = s.get(e);
        return !!t && !!t._renderedComponent;
      },
      enqueueCallback: function(e, t, n) {
        l.validateCallback(t, n);
        var o = i(e);
        if (!o) return null;
        o._pendingCallbacks ? o._pendingCallbacks.push(t) : o._pendingCallbacks = [t], r(o);
      },
      enqueueCallbackInternal: function(e, t) {
        e._pendingCallbacks ? e._pendingCallbacks.push(t) : e._pendingCallbacks = [t], r(e);
      },
      enqueueForceUpdate: function(e) {
        var t = i(e, "forceUpdate");
        t && (t._pendingForceUpdate = !0, r(t));
      },
      enqueueReplaceState: function(e, t) {
        var n = i(e, "replaceState");
        n && (n._pendingStateQueue = [t], n._pendingReplaceState = !0, r(n));
      },
      enqueueSetState: function(e, t) {
        var n = i(e, "setState");
        n && ((n._pendingStateQueue || (n._pendingStateQueue = [])).push(t), r(n));
      },
      enqueueElementInternal: function(e, t, n) {
        e._pendingElement = t, e._context = n, r(e);
      },
      validateCallback: function(e, t) {
        e && "function" != typeof e && a("122", t, o(e));
      }
    });
  e.exports = l;
}, function(e, t, n) {
  "use strict";
  var r = function(e) {
    return "undefined" != typeof MSApp && MSApp.execUnsafeLocalFunction ? function(t, n, r, o) {
      MSApp.execUnsafeLocalFunction(function() {
        return e(t, n, r, o);
      });
    } : e;
  };
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t, n = e.keyCode;
    return "charCode" in e ? 0 === (t = e.charCode) && 13 === n && (t = 13) : t = n, t >= 32 || 13 === t ? t : 0;
  }
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = this,
      n = t.nativeEvent;
    if (n.getModifierState) return n.getModifierState(e);
    var r = i[e];
    return !!r && !!n[r];
  }

  function o(e) {
    return r;
  }
  var i = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
  };
  e.exports = o;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.target || e.srcElement || window;
    return t.correspondingUseElement && (t = t.correspondingUseElement), 3 === t.nodeType ? t.parentNode : t;
  }
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!i.canUseDOM || t && !("addEventListener" in document)) return !1;
    var n = "on" + e,
      r = n in document;
    if (!r) {
      var a = document.createElement("div");
      a.setAttribute(n, "return;"), r = "function" == typeof a[n];
    }
    return !r && o && "wheel" === e && (r = document.implementation.hasFeature("Events.wheel", "3.0")), r;
  }
  var o, i = n(15);
  i.canUseDOM && (o = document.implementation && document.implementation.hasFeature && !0 !== document.implementation.hasFeature("", "")), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    var n = null === e || !1 === e,
      r = null === t || !1 === t;
    if (n || r) return n === r;
    var o = typeof e,
      i = typeof t;
    return "string" === o || "number" === o ? "string" === i || "number" === i : "object" === i && e.type === t.type && e.key === t.key;
  }
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = (n(6), n(17)),
    o = (n(3), r);
  e.exports = o;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    "undefined" != typeof console && "function" == typeof console.error && console.error(e);
    try {
      throw new Error(e);
    } catch (e) {}
  }
  t.a = r;
}, function(e, t, n) {
  "use strict";
  var r = {
    ASC: "ASC",
    DESC: "DESC"
  };
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r() {
    var e = !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0],
      t = {};
    return function(n) {
      var r = n.callback,
        o = n.indices,
        a = i()(o),
        s = !e || a.every(function(e) {
          var t = o[e];
          return Array.isArray(t) ? t.length > 0 : t >= 0;
        }),
        u = a.length !== i()(t).length || a.some(function(e) {
          var n = t[e],
            r = o[e];
          return Array.isArray(r) ? n.join(",") !== r.join(",") : n !== r;
        });
      t = o, s && u && r(o);
    };
  }
  var o = n(138),
    i = n.n(o);
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    this.props = e, this.context = t, this.refs = a, this.updater = n || i;
  }
  var o = n(45),
    i = n(119),
    a = (n(317), n(49));
  n(2), n(3), r.prototype.isReactComponent = {}, r.prototype.setState = function(e, t) {
    "object" != typeof e && "function" != typeof e && null != e && o("85"), this.updater.enqueueSetState(this, e), t && this.updater.enqueueCallback(this, t, "setState");
  }, r.prototype.forceUpdate = function(e) {
    this.updater.enqueueForceUpdate(this), e && this.updater.enqueueCallback(this, e, "forceUpdate");
  }, e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = (n(3), {
    isMounted: function(e) {
      return !1;
    },
    enqueueCallback: function(e, t) {},
    enqueueForceUpdate: function(e) {},
    enqueueReplaceState: function(e, t) {},
    enqueueSetState: function(e, t) {}
  });
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if (Array.isArray(e)) {
      for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
      return n;
    }
    return Array.from(e);
  }

  function o(e, t) {
    return e === t;
  }

  function i(e) {
    var t = arguments.length <= 1 || void 0 === arguments[1] ? o : arguments[1],
      n = null,
      r = null;
    return function() {
      for (var o = arguments.length, i = Array(o), a = 0; a < o; a++) i[a] = arguments[a];
      return null !== n && n.length === i.length && i.every(function(e, r) {
        return t(e, n[r]);
      }) || (r = e.apply(void 0, i)), n = i, r;
    };
  }

  function a(e) {
    var t = Array.isArray(e[0]) ? e[0] : e;
    if (!t.every(function(e) {
        return "function" == typeof e;
      })) {
      var n = t.map(function(e) {
        return typeof e;
      }).join(", ");
      throw new Error("Selector creators expect all input-selectors to be functions, instead received the following types: [" + n + "]");
    }
    return t;
  }

  function s(e) {
    for (var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), o = 1; o < t; o++) n[o - 1] = arguments[o];
    return function() {
      for (var t = arguments.length, o = Array(t), i = 0; i < t; i++) o[i] = arguments[i];
      var s = 0,
        u = o.pop(),
        l = a(o),
        c = e.apply(void 0, [function() {
          return s++, u.apply(void 0, arguments);
        }].concat(n)),
        d = function(e, t) {
          for (var n = arguments.length, o = Array(n > 2 ? n - 2 : 0), i = 2; i < n; i++) o[i - 2] = arguments[i];
          var a = l.map(function(n) {
            return n.apply(void 0, [e, t].concat(o));
          });
          return c.apply(void 0, r(a));
        };
      return d.resultFunc = u, d.recomputations = function() {
        return s;
      }, d.resetRecomputations = function() {
        return s = 0;
      }, d;
    };
  }

  function u(e) {
    var t = arguments.length <= 1 || void 0 === arguments[1] ? l : arguments[1];
    if ("object" != typeof e) throw new Error("createStructuredSelector expects first argument to be an object where each property is a selector, instead received a " + typeof e);
    var n = Object.keys(e);
    return t(n.map(function(t) {
      return e[t];
    }), function() {
      for (var e = arguments.length, t = Array(e), r = 0; r < e; r++) t[r] = arguments[r];
      return t.reduce(function(e, t, r) {
        return e[n[r]] = t, e;
      }, {});
    });
  }
  t.__esModule = !0, t.defaultMemoize = i, t.createSelectorCreator = s, t.createStructuredSelector = u;
  var l = t.createSelector = s(i);
}, function(e, t) {
  function n(e, t) {
    for (var n = 0; n < e.length; n++) {
      var r = e[n],
        o = f[r.id];
      if (o) {
        o.refs++;
        for (var i = 0; i < o.parts.length; i++) o.parts[i](r.parts[i]);
        for (; i < r.parts.length; i++) o.parts.push(u(r.parts[i], t));
      } else {
        for (var a = [], i = 0; i < r.parts.length; i++) a.push(u(r.parts[i], t));
        f[r.id] = {
          id: r.id,
          refs: 1,
          parts: a
        };
      }
    }
  }

  function r(e) {
    for (var t = [], n = {}, r = 0; r < e.length; r++) {
      var o = e[r],
        i = o[0],
        a = o[1],
        s = o[2],
        u = o[3],
        l = {
          css: a,
          media: s,
          sourceMap: u
        };
      n[i] ? n[i].parts.push(l) : t.push(n[i] = {
        id: i,
        parts: [l]
      });
    }
    return t;
  }

  function o(e, t) {
    var n = _(),
      r = v[v.length - 1];
    if ("top" === e.insertAt) r ? r.nextSibling ? n.insertBefore(t, r.nextSibling) : n.appendChild(t) : n.insertBefore(t, n.firstChild), v.push(t);
    else {
      if ("bottom" !== e.insertAt) throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
      n.appendChild(t);
    }
  }

  function i(e) {
    e.parentNode.removeChild(e);
    var t = v.indexOf(e);
    t >= 0 && v.splice(t, 1);
  }

  function a(e) {
    var t = document.createElement("style");
    return t.type = "text/css", o(e, t), t;
  }

  function s(e) {
    var t = document.createElement("link");
    return t.rel = "stylesheet", o(e, t), t;
  }

  function u(e, t) {
    var n, r, o;
    if (t.singleton) {
      var u = y++;
      n = m || (m = a(t)), r = l.bind(null, n, u, !1), o = l.bind(null, n, u, !0);
    } else e.sourceMap && "function" == typeof URL && "function" == typeof URL.createObjectURL && "function" == typeof URL.revokeObjectURL && "function" == typeof Blob && "function" == typeof btoa ? (n = s(t), r = d.bind(null, n), o = function() {
      i(n), n.href && URL.revokeObjectURL(n.href);
    }) : (n = a(t), r = c.bind(null, n), o = function() {
      i(n);
    });
    return r(e),
      function(t) {
        if (t) {
          if (t.css === e.css && t.media === e.media && t.sourceMap === e.sourceMap) return;
          r(e = t);
        } else o();
      };
  }

  function l(e, t, n, r) {
    var o = n ? "" : r.css;
    if (e.styleSheet) e.styleSheet.cssText = g(t, o);
    else {
      var i = document.createTextNode(o),
        a = e.childNodes;
      a[t] && e.removeChild(a[t]), a.length ? e.insertBefore(i, a[t]) : e.appendChild(i);
    }
  }

  function c(e, t) {
    var n = t.css,
      r = t.media;
    if (r && e.setAttribute("media", r), e.styleSheet) e.styleSheet.cssText = n;
    else {
      for (; e.firstChild;) e.removeChild(e.firstChild);
      e.appendChild(document.createTextNode(n));
    }
  }

  function d(e, t) {
    var n = t.css,
      r = t.sourceMap;
    r && (n += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(r)))) + " */");
    var o = new Blob([n], {
        type: "text/css"
      }),
      i = e.href;
    e.href = URL.createObjectURL(o), i && URL.revokeObjectURL(i);
  }
  var f = {},
    h = function(e) {
      var t;
      return function() {
        return void 0 === t && (t = e.apply(this, arguments)), t;
      };
    },
    p = h(function() {
      return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
    }),
    _ = h(function() {
      return document.head || document.getElementsByTagName("head")[0];
    }),
    m = null,
    y = 0,
    v = [];
  e.exports = function(e, t) {
    if ("undefined" != typeof DEBUG && DEBUG && "object" != typeof document) throw new Error("The style-loader cannot be used in a non-browser environment");
    t = t || {}, void 0 === t.singleton && (t.singleton = p()), void 0 === t.insertAt && (t.insertAt = "bottom");
    var o = r(e);
    return n(o, t),
      function(e) {
        for (var i = [], a = 0; a < o.length; a++) {
          var s = o[a],
            u = f[s.id];
          u.refs--, i.push(u);
        }
        e && n(r(e), t);
        for (var a = 0; a < i.length; a++) {
          var u = i[a];
          if (0 === u.refs) {
            for (var l = 0; l < u.parts.length; l++) u.parts[l]();
            delete f[u.id];
          }
        }
      };
  };
  var g = function() {
    var e = [];
    return function(t, n) {
      return e[t] = n, e.filter(Boolean).join("\n");
    };
  }();
}, function(e, t, n) {
  "use strict";
  var r = n(333);
  t.a = r.a;
}, function(e, t, n) {
  "use strict";
  var r = n(348),
    o = n(347);
  n.d(t, "a", function() {
    return r.a;
  }), n.d(t, "b", function() {
    return o.a;
  }), t.c = r.a;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var o = n(5),
    i = n.n(o),
    a = n(16),
    s = (n.n(a), n(46));
  n.d(t, "removeChannelFromNameMap", function() {
    return c;
  }), n.d(t, "addChannelToNameMap", function() {
    return d;
  }), n.d(t, "getChannelIdByName", function() {
    return m;
  });
  var u, l = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    c = n.i(a.createAction)("Remove a channel from the name map, usually when a name is recalculated"),
    d = n.i(a.createAction)("Add a channel to the name map, usually when the name is recalculated"),
    f = function(e) {
      return !(!e || !e.id || (n.i(s.isIm)(e) ? !e.user : n.i(s.isMpim)(e) && !e.name && !e._internal_name || !e.name));
    },
    h = function(e, t) {
      return n.i(s.isIm)(t) ? e[t.user] = t.id : e[i.a.toLower(t.name)] = t.id, n.i(s.isMpim)(t) && t._internal_name && (e[t._internal_name] = t.id), e;
    },
    p = function(e, t) {
      var n = l({}, e);
      return f(t) ? h(n, t) : e;
    },
    _ = n.i(a.createReducer)((u = {}, r(u, s.bulkAddChannels, function(e, t) {
      if (!t || !t.length || !i.a.isArray(t)) return e;
      var n = i.a.filter(t, f);
      if (!n.length) return e;
      var r = l({}, e);
      return n.forEach(function(e) {
        h(r, e);
      }), r;
    }), r(u, s.addChannel, p), r(u, d, p), r(u, s.removeChannel, function(e, t) {
      if (!f(t)) return e;
      var r = l({}, e);
      return n.i(s.isIm)(t) && t.user ? delete r[t.user] : delete r[i.a.toLower(t.name)], n.i(s.isMpim)(t) && t._internal_name && delete r[t._internal_name], r;
    }), r(u, c, function(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        n = t.name;
      return n && e[n] ? i.a.omit(e, n) : e;
    }), u), {});
  t.default = _;
  var m = function(e, t) {
    var n = e && e.channelsMeta && e.channelsMeta.channelNamesToIds;
    if (n) {
      var r = i.a.toLower(t);
      r && "#" === r[0] && (r = r.slice(1));
      return n[r] || n[t];
    }
  };
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var o = n(5),
    i = n.n(o),
    a = n(16);
  n.n(a), n.d(t, "setMarkingState", function() {
    return l;
  }), n.d(t, "clearAllMarkingFlags", function() {
    return c;
  }), n.d(t, "getAllIdsNeedingMarking", function() {
    return h;
  });
  var s, u = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    l = n.i(a.createAction)("Update the apiNeedsMarking flag for a channel"),
    c = n.i(a.createAction)("Wipe out all API needs marking flags when they are all completed"),
    d = {},
    f = n.i(a.createReducer)((s = {}, r(s, l, function(e, t) {
      return t.needsApiMarking ? u({}, e, r({}, t.id, t.needsApiMarking)) : i.a.omit(e, t.id);
    }), r(s, c, function(e) {
      return i.a.isEqual(e, d) ? e : d;
    }), s), d);
  t.default = f;
  var h = function(e) {
    var t = e && e.channelsMeta && e.channelsMeta.needsApiMarking;
    return t ? i.a.keys(t) : [];
  };
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }

  function o(e, t) {
    var n = {};
    for (var r in e) t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);
    return n;
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var i = n(5),
    a = n.n(i),
    s = n(16);
  n.n(s), n.d(t, "updateTyping", function() {
    return c;
  }), n.d(t, "clearTyping", function() {
    return d;
  }), n.d(t, "bulkClearTyping", function() {
    return f;
  }), n.d(t, "removeOldTypingRecords", function() {
    return h;
  }), n.d(t, "getAllTyping", function() {
    return m;
  }), n.d(t, "getTypingByKey", function() {
    return y;
  }), n.d(t, "getNumberOfRecords", function() {
    return v;
  }), n.d(t, "getTyperIdsInChannel", function() {
    return g;
  });
  var u, l = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    c = n.i(s.createAction)("Update typing timestamp for a given key"),
    d = n.i(s.createAction)("Remove typing activity for a given key"),
    f = n.i(s.createAction)("Remove typing activity for multiple keys"),
    h = function(e) {
      var t = e.maxDurationForSelf,
        n = e.maxDurationForOthers,
        r = e.now;
      return function(e, o) {
        var i = m(o()),
          s = a.a.map(i, function(e, o) {
            var i = e.member_is_self ? t : n;
            return r - e.started >= i ? o : null;
          });
        s = a.a.compact(s), s.length && e(f(s));
      };
    },
    p = {},
    _ = n.i(s.createReducer)((u = {}, r(u, c, function(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        n = t.key,
        i = o(t, ["key"]);
      return n ? e[n] ? l({}, e, r({}, n, l({}, e[n], {
        started: i.started
      }))) : l({}, e, r({}, n, l({}, i))) : e;
    }), r(u, d, function(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        n = t.key;
      return n && e[n] ? a.a.omit(e, n) : e;
    }), r(u, f, function(e, t) {
      if (!t || !t.length || !a.a.isArray(t)) return e;
      var n = a.a.omit(e, t);
      return Object.keys(n).length === Object.keys(e).length ? e : n;
    }), u), p);
  t.default = _;
  var m = function(e) {
      return e.typing;
    },
    y = function(e, t) {
      return e.typing[t];
    },
    v = function(e) {
      return Object.keys(e.typing).length;
    },
    g = function(e, t) {
      var n = a.a.filter(e.typing, function(e) {
        return e.model_ob_id === t && !e.member_is_self;
      });
      return a.a.map(n, "member_id");
    };
}, function(e, t, n) {
  "use strict";
  var r = n(5),
    o = (n.n(r), n(1)),
    i = n.n(o),
    a = n(8),
    s = n.n(a),
    u = n(324),
    l = (n.n(u), {
      children: o.PropTypes.node.isRequired,
      position: o.PropTypes.string,
      status: o.PropTypes.oneOf(["success"])
    }),
    c = {
      position: "top",
      status: null
    },
    d = function(e) {
      var t = e.children,
        n = e.position,
        r = e.status,
        o = s()("c-tooltip__tip", "c-tooltip__tip--" + n, {
          "c-tooltip__tip--success": "success" === r
        });
      return i.a.createElement("div", {
        className: o
      }, t);
    };
  d.propTypes = l, d.defaultProps = c, t.a = d;
}, function(e, t, n) {
  "use strict";
  var r = n(20),
    o = n.i(r.a)("TS.exportToLegacy", function() {});
  t.a = o;
}, function(e, t, n) {
  "use strict";
  var r = n(20);
  n.d(t, "a", function() {
    return o;
  }), n.d(t, "b", function() {
    return i;
  });
  var o = n.i(r.a)("TS.metrics.mark", function() {
      return null;
    }),
    i = n.i(r.a)("TS.metrics.measureAndClear", function() {
      return null;
    });
}, function(e, t, n) {
  "use strict";
  var r = n(20);
  n.d(t, "a", function() {
    return o;
  }), n.d(t, "b", function() {
    return i;
  }), n.d(t, "c", function() {
    return a;
  });
  var o = n.i(r.a)("TS.model.isMac", function() {
      return !1;
    }),
    i = n.i(r.a)("TS.model.getUserModel", function() {}),
    a = n.i(r.a)("TS.model.getUserPrefs", function() {});
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = {
      linear: function(e) {
        return e;
      },
      easeInQuad: function(e) {
        return e * e;
      },
      easeOutQuad: function(e) {
        return e * (2 - e);
      },
      easeInOutQuad: function(e) {
        return e < .5 ? 2 * e * e : (4 - 2 * e) * e - 1;
      },
      easeInCubic: function(e) {
        return e * e * e;
      },
      easeOutCubic: function(e) {
        return --e * e * e + 1;
      },
      easeInOutCubic: function(e) {
        return e < .5 ? 4 * e * e * e : (e - 1) * (2 * e - 2) * (2 * e - 2) + 1;
      },
      easeInQuart: function(e) {
        return e * e * e * e;
      },
      easeOutQuart: function(e) {
        return 1 - --e * e * e * e;
      },
      easeInOutQuart: function(e) {
        return e < .5 ? 8 * e * e * e * e : 1 - 8 * --e * e * e * e;
      },
      easeInQuint: function(e) {
        return e * e * e * e * e;
      },
      easeOutQuint: function(e) {
        return 1 + --e * e * e * e * e;
      },
      easeInOutQuint: function(e) {
        return e < .5 ? 16 * e * e * e * e * e : 1 + 16 * --e * e * e * e * e;
      }
    };
    return a.a.get(t, e, t[s]);
  }

  function o(e) {
    var t = e.fromValue,
      n = e.toValue,
      o = e.duration,
      i = void 0 === o ? 500 : o,
      u = e.easing,
      l = void 0 === u ? s : u,
      c = e.onTick,
      d = e.onComplete,
      f = performance.now(),
      h = a.a.isFunction(l) ? l : r(l),
      p = function(e) {
        return e > i ? n : t + (n - t) * h(e / i);
      },
      _ = function() {
        var e = performance.now() - f;
        c({
          value: p(e),
          nextTick: e <= i ? m : d
        });
      },
      m = function() {
        return window.requestAnimationFrame(_);
      };
    m();
  }
  var i = n(5),
    a = n.n(i);
  t.a = o;
  var s = "easeInOutQuad";
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
      n = t.parseFormat,
      r = void 0 === n ? "unix" : n,
      o = t.returnMoment,
      a = void 0 !== o && o,
      s = "unix" !== r,
      u = s ? e : parseFloat(e),
      l = s ? i()(u, r) : i.a.unix(u);
    return a ? l : l.toDate();
  }
  var o = n(0),
    i = n.n(o);
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
      r = t.units,
      i = void 0 === r ? "minutes" : r;
    return n.i(o.a)(e, {
      unitsIn: i,
      unitsOut: "days"
    });
  }
  var o = n(58);
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
      r = t.units,
      i = void 0 === r ? "minutes" : r;
    return n.i(o.a)(e, {
      unitsIn: i,
      unitsOut: "hours"
    });
  }
  var o = n(58);
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
      r = t.units,
      i = void 0 === r ? "minutes" : r;
    return n.i(o.a)(e, {
      unitsIn: i,
      unitsOut: "weeks"
    });
  }
  var o = n(58);
  t.a = r;
}, function(e, t, n) {
  "use strict";
  var r = n(5),
    o = n.n(r),
    i = n(20);
  n.d(t, "c", function() {
    return a;
  }), n.d(t, "b", function() {
    return s;
  }), n.d(t, "e", function() {
    return u;
  }), n.d(t, "d", function() {
    return l;
  }), n.d(t, "f", function() {
    return c;
  }), n.d(t, "g", function() {
    return d;
  }), n.d(t, "h", function() {
    return f;
  }), n.d(t, "a", function() {
    return h;
  });
  var a = (n.i(i.a)("desktop.downloads.startDownload", o.a.noop), n.i(i.a)("desktop.downloads.showDownload", o.a.noop)),
    s = n.i(i.a)("desktop.downloads.openDownload", o.a.noop),
    u = n.i(i.a)("desktop.downloads.cancelDownload", o.a.noop),
    l = n.i(i.a)("desktop.downloads.retryDownload", o.a.noop),
    c = n.i(i.a)("desktop.downloads.removeDownload", o.a.noop),
    d = n.i(i.a)("desktop.downloads.pauseDownload", o.a.noop),
    f = n.i(i.a)("desktop.downloads.resumeDownload", o.a.noop),
    h = n.i(i.a)("desktop.downloads.clearDownloads", o.a.noop);
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }
  var o = n(458),
    i = n.n(o),
    a = n(5),
    s = n.n(a),
    u = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    l = function() {
      function e(t) {
        r(this, e), i.a.prototype.stopCallback = e.stopCallback, this.mousetrap = new i.a(t);
      }
      return u(e, [{
        key: "bindAll",
        value: function(e) {
          var t = this;
          e.forEach(function(e) {
            t.mousetrap.bind(e.keys, e.handler, e.action);
          });
        }
      }, {
        key: "reset",
        value: function() {
          this.mousetrap.reset();
        }
      }, {
        key: "unbindAll",
        value: function(e) {
          this.mousetrap.unbind(s.a.flatMap(e, "keys"));
        }
      }], [{
        key: "stopCallback",
        value: function(e, t) {
          return t.hasAttribute("data-no-key-commands");
        }
      }]), e;
    }();
  t.a = l;
}, function(e, t, n) {
  e.exports = {
    "default": n(388),
    __esModule: !0
  };
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e && e.__esModule ? e : {
      "default": e
    };
  }
  t.__esModule = !0;
  var o = n(379),
    i = r(o),
    a = n(378),
    s = r(a),
    u = "function" == typeof s.default && "symbol" == typeof i.default ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof s.default && e.constructor === s.default && e !== s.default.prototype ? "symbol" : typeof e;
    };
  t.default = "function" == typeof s.default && "symbol" === u(i.default) ? function(e) {
    return void 0 === e ? "undefined" : u(e);
  } : function(e) {
    return e && "function" == typeof s.default && e.constructor === s.default && e !== s.default.prototype ? "symbol" : void 0 === e ? "undefined" : u(e);
  };
}, function(e, t, n) {
  var r = n(78),
    o = n(22)("toStringTag"),
    i = "Arguments" == r(function() {
      return arguments;
    }()),
    a = function(e, t) {
      try {
        return e[t];
      } catch (e) {}
    };
  e.exports = function(e) {
    var t, n, s;
    return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof(n = a(t = Object(e), o)) ? n : i ? r(t) : "Object" == (s = r(t)) && "function" == typeof t.callee ? "Arguments" : s;
  };
}, function(e, t, n) {
  var r = n(392);
  e.exports = function(e, t, n) {
    if (r(e), void 0 === t) return e;
    switch (n) {
      case 1:
        return function(n) {
          return e.call(t, n);
        };
      case 2:
        return function(n, r) {
          return e.call(t, n, r);
        };
      case 3:
        return function(n, r, o) {
          return e.call(t, n, r, o);
        };
    }
    return function() {
      return e.apply(t, arguments);
    };
  };
}, function(e, t, n) {
  var r = n(47),
    o = n(27).document,
    i = r(o) && r(o.createElement);
  e.exports = function(e) {
    return i ? o.createElement(e) : {};
  };
}, function(e, t, n) {
  e.exports = !n(31) && !n(37)(function() {
    return 7 != Object.defineProperty(n(142)("div"), "a", {
      get: function() {
        return 7;
      }
    }).a;
  });
}, function(e, t, n) {
  var r = n(78);
  e.exports = Object("z").propertyIsEnumerable(0) ? Object : function(e) {
    return "String" == r(e) ? e.split("") : Object(e);
  };
}, function(e, t, n) {
  "use strict";
  var r = n(81),
    o = n(32),
    i = n(149),
    a = n(38),
    s = n(33),
    u = n(48),
    l = n(398),
    c = n(86),
    d = n(147),
    f = n(22)("iterator"),
    h = !([].keys && "next" in [].keys()),
    p = function() {
      return this;
    };
  e.exports = function(e, t, n, _, m, y, v) {
    l(n, t, _);
    var g, M, b, w = function(e) {
        if (!h && e in S) return S[e];
        switch (e) {
          case "keys":
          case "values":
            return function() {
              return new n(this, e);
            };
        }
        return function() {
          return new n(this, e);
        };
      },
      k = t + " Iterator",
      L = "values" == m,
      T = !1,
      S = e.prototype,
      Y = S[f] || S["@@iterator"] || m && S[m],
      D = Y || w(m),
      x = m ? L ? w("entries") : D : void 0,
      C = "Array" == t ? S.entries || Y : Y;
    if (C && (b = d(C.call(new e))) !== Object.prototype && (c(b, k, !0), r || s(b, f) || a(b, f, p)), L && Y && "values" !== Y.name && (T = !0, D = function() {
        return Y.call(this);
      }), r && !v || !h && !T && S[f] || a(S, f, D), u[t] = D, u[k] = p, m)
      if (g = {
          values: L ? D : w("values"),
          keys: y ? D : w("keys"),
          entries: x
        }, v)
        for (M in g) M in S || i(S, M, g[M]);
      else o(o.P + o.F * (h || T), t, g);
    return g;
  };
}, function(e, t, n) {
  var r = n(148),
    o = n(80).concat("length", "prototype");
  t.f = Object.getOwnPropertyNames || function(e) {
    return r(e, o);
  };
}, function(e, t, n) {
  var r = n(33),
    o = n(62),
    i = n(87)("IE_PROTO"),
    a = Object.prototype;
  e.exports = Object.getPrototypeOf || function(e) {
    return e = o(e), r(e, i) ? e[i] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? a : null;
  };
}, function(e, t, n) {
  var r = n(33),
    o = n(28),
    i = n(394)(!1),
    a = n(87)("IE_PROTO");
  e.exports = function(e, t) {
    var n, s = o(e),
      u = 0,
      l = [];
    for (n in s) n != a && r(s, n) && l.push(n);
    for (; t.length > u;) r(s, n = t[u++]) && (~i(l, n) || l.push(n));
    return l;
  };
}, function(e, t, n) {
  e.exports = n(38);
}, function(e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = function(e) {
    if ((!i || e) && o.default) {
      var t = document.createElement("div");
      t.style.position = "absolute", t.style.top = "-9999px", t.style.width = "50px", t.style.height = "50px", t.style.overflow = "scroll", document.body.appendChild(t), i = t.offsetWidth - t.clientWidth, document.body.removeChild(t);
    }
    return i;
  };
  var r = n(427),
    o = function(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }(r),
    i = void 0;
  e.exports = t.default;
}, function(e, t, n) {
  "use strict";
  var r = n(17),
    o = {
      listen: function(e, t, n) {
        return e.addEventListener ? (e.addEventListener(t, n, !1), {
          remove: function() {
            e.removeEventListener(t, n, !1);
          }
        }) : e.attachEvent ? (e.attachEvent("on" + t, n), {
          remove: function() {
            e.detachEvent("on" + t, n);
          }
        }) : void 0;
      },
      capture: function(e, t, n) {
        return e.addEventListener ? (e.addEventListener(t, n, !0), {
          remove: function() {
            e.removeEventListener(t, n, !0);
          }
        }) : {
          remove: r
        };
      },
      registerDefault: function() {}
    };
  e.exports = o;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    try {
      e.focus();
    } catch (e) {}
  }
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r() {
    if ("undefined" == typeof document) return null;
    try {
      return document.activeElement || document.body;
    } catch (e) {
      return document.body;
    }
  }
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(452),
    o = r.a.Symbol;
  t.a = o;
}, function(e, t) {
  function n(e, t, n) {
    switch (n.length) {
      case 0:
        return e.call(t);
      case 1:
        return e.call(t, n[0]);
      case 2:
        return e.call(t, n[0], n[1]);
      case 3:
        return e.call(t, n[0], n[1], n[2]);
    }
    return e.apply(t, n);
  }

  function r(e, t) {
    for (var n = -1, r = Array(e); ++n < e;) r[n] = t(n);
    return r;
  }

  function o(e, t) {
    var n = j(e) || h(e) ? r(e.length, String) : [],
      o = n.length,
      i = !!o;
    for (var a in e) !t && !Y.call(e, a) || i && ("length" == a || l(a, o)) || n.push(a);
    return n;
  }

  function i(e, t, n) {
    var r = e[t];
    Y.call(e, t) && f(r, n) && (void 0 !== n || t in e) || (e[t] = n);
  }

  function a(e) {
    if (!d(e)) return C(e);
    var t = [];
    for (var n in Object(e)) Y.call(e, n) && "constructor" != n && t.push(n);
    return t;
  }

  function s(e, t) {
    return t = P(void 0 === t ? e.length - 1 : t, 0),
      function() {
        for (var r = arguments, o = -1, i = P(r.length - t, 0), a = Array(i); ++o < i;) a[o] = r[t + o];
        o = -1;
        for (var s = Array(t + 1); ++o < t;) s[o] = r[o];
        return s[t] = a, n(e, this, s);
      };
  }

  function u(e, t, n, r) {
    n || (n = {});
    for (var o = -1, a = t.length; ++o < a;) {
      var s = t[o],
        u = r ? r(n[s], e[s], s, n, e) : void 0;
      i(n, s, void 0 === u ? e[s] : u);
    }
    return n;
  }

  function l(e, t) {
    return !!(t = null == t ? b : t) && ("number" == typeof e || T.test(e)) && e > -1 && e % 1 == 0 && e < t;
  }

  function c(e, t, n) {
    if (!v(n)) return !1;
    var r = typeof t;
    return !!("number" == r ? p(n) && l(t, n.length) : "string" == r && t in n) && f(n[t], e);
  }

  function d(e) {
    var t = e && e.constructor;
    return e === ("function" == typeof t && t.prototype || S);
  }

  function f(e, t) {
    return e === t || e !== e && t !== t;
  }

  function h(e) {
    return _(e) && Y.call(e, "callee") && (!x.call(e, "callee") || D.call(e) == w);
  }

  function p(e) {
    return null != e && y(e.length) && !m(e);
  }

  function _(e) {
    return g(e) && p(e);
  }

  function m(e) {
    var t = v(e) ? D.call(e) : "";
    return t == k || t == L;
  }

  function y(e) {
    return "number" == typeof e && e > -1 && e % 1 == 0 && e <= b;
  }

  function v(e) {
    var t = typeof e;
    return !!e && ("object" == t || "function" == t);
  }

  function g(e) {
    return !!e && "object" == typeof e;
  }

  function M(e) {
    return p(e) ? o(e) : a(e);
  }
  var b = 9007199254740991,
    w = "[object Arguments]",
    k = "[object Function]",
    L = "[object GeneratorFunction]",
    T = /^(?:0|[1-9]\d*)$/,
    S = Object.prototype,
    Y = S.hasOwnProperty,
    D = S.toString,
    x = S.propertyIsEnumerable,
    C = function(e, t) {
      return function(n) {
        return e(t(n));
      };
    }(Object.keys, Object),
    P = Math.max,
    E = !x.call({
      valueOf: 1
    }, "valueOf"),
    j = Array.isArray,
    O = function(e) {
      return s(function(t, n) {
        var r = -1,
          o = n.length,
          i = o > 1 ? n[o - 1] : void 0,
          a = o > 2 ? n[2] : void 0;
        for (i = e.length > 3 && "function" == typeof i ? (o--, i) : void 0, a && c(n[0], n[1], a) && (i = o < 3 ? void 0 : i, o = 1), t = Object(t); ++r < o;) {
          var s = n[r];
          s && e(t, s);
        }
        return t;
      });
    }(function(e, t) {
      if (E || d(t) || p(t)) return void u(t, M(t), e);
      for (var n in t) Y.call(t, n) && i(e, n, t[n]);
    });
  e.exports = O;
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("af", {
        months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),
        monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),
        weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),
        weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),
        weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"),
        meridiemParse: /vm|nm/i,
        isPM: function(e) {
          return /^nm$/i.test(e);
        },
        meridiem: function(e, t, n) {
          return e < 12 ? n ? "vm" : "VM" : n ? "nm" : "NM";
        },
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Vandag om] LT",
          nextDay: "[Môre om] LT",
          nextWeek: "dddd [om] LT",
          lastDay: "[Gister om] LT",
          lastWeek: "[Laas] dddd [om] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "oor %s",
          past: "%s gelede",
          s: "'n paar sekondes",
          m: "'n minuut",
          mm: "%d minute",
          h: "'n uur",
          hh: "%d ure",
          d: "'n dag",
          dd: "%d dae",
          M: "'n maand",
          MM: "%d maande",
          y: "'n jaar",
          yy: "%d jaar"
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(e) {
          return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ar-dz", {
        months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "أح_إث_ثلا_أر_خم_جم_سب".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[اليوم على الساعة] LT",
          nextDay: "[غدا على الساعة] LT",
          nextWeek: "dddd [على الساعة] LT",
          lastDay: "[أمس على الساعة] LT",
          lastWeek: "dddd [على الساعة] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "في %s",
          past: "منذ %s",
          s: "ثوان",
          m: "دقيقة",
          mm: "%d دقائق",
          h: "ساعة",
          hh: "%d ساعات",
          d: "يوم",
          dd: "%d أيام",
          M: "شهر",
          MM: "%d أشهر",
          y: "سنة",
          yy: "%d سنوات"
        },
        week: {
          dow: 0,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "1",
          2: "2",
          3: "3",
          4: "4",
          5: "5",
          6: "6",
          7: "7",
          8: "8",
          9: "9",
          0: "0"
        },
        n = function(e) {
          return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5;
        },
        r = {
          s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"],
          m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"],
          h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"],
          d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"],
          M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"],
          y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"]
        },
        o = function(e) {
          return function(t, o, i, a) {
            var s = n(t),
              u = r[e][n(t)];
            return 2 === s && (u = u[o ? 0 : 1]), u.replace(/%d/i, t);
          };
        },
        i = ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"];
      e.defineLocale("ar-ly", {
        months: i,
        monthsShort: i,
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "D/‏M/‏YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        meridiemParse: /ص|م/,
        isPM: function(e) {
          return "م" === e;
        },
        meridiem: function(e, t, n) {
          return e < 12 ? "ص" : "م";
        },
        calendar: {
          sameDay: "[اليوم عند الساعة] LT",
          nextDay: "[غدًا عند الساعة] LT",
          nextWeek: "dddd [عند الساعة] LT",
          lastDay: "[أمس عند الساعة] LT",
          lastWeek: "dddd [عند الساعة] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "بعد %s",
          past: "منذ %s",
          s: o("s"),
          m: o("m"),
          mm: o("m"),
          h: o("h"),
          hh: o("h"),
          d: o("d"),
          dd: o("d"),
          M: o("M"),
          MM: o("M"),
          y: o("y"),
          yy: o("y")
        },
        preparse: function(e) {
          return e.replace(/\u200f/g, "").replace(/،/g, ",");
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          }).replace(/,/g, "،");
        },
        week: {
          dow: 6,
          doy: 12
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ar-ma", {
        months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[اليوم على الساعة] LT",
          nextDay: "[غدا على الساعة] LT",
          nextWeek: "dddd [على الساعة] LT",
          lastDay: "[أمس على الساعة] LT",
          lastWeek: "dddd [على الساعة] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "في %s",
          past: "منذ %s",
          s: "ثوان",
          m: "دقيقة",
          mm: "%d دقائق",
          h: "ساعة",
          hh: "%d ساعات",
          d: "يوم",
          dd: "%d أيام",
          M: "شهر",
          MM: "%d أشهر",
          y: "سنة",
          yy: "%d سنوات"
        },
        week: {
          dow: 6,
          doy: 12
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "١",
          2: "٢",
          3: "٣",
          4: "٤",
          5: "٥",
          6: "٦",
          7: "٧",
          8: "٨",
          9: "٩",
          0: "٠"
        },
        n = {
          "١": "1",
          "٢": "2",
          "٣": "3",
          "٤": "4",
          "٥": "5",
          "٦": "6",
          "٧": "7",
          "٨": "8",
          "٩": "9",
          "٠": "0"
        };
      e.defineLocale("ar-sa", {
        months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        meridiemParse: /ص|م/,
        isPM: function(e) {
          return "م" === e;
        },
        meridiem: function(e, t, n) {
          return e < 12 ? "ص" : "م";
        },
        calendar: {
          sameDay: "[اليوم على الساعة] LT",
          nextDay: "[غدا على الساعة] LT",
          nextWeek: "dddd [على الساعة] LT",
          lastDay: "[أمس على الساعة] LT",
          lastWeek: "dddd [على الساعة] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "في %s",
          past: "منذ %s",
          s: "ثوان",
          m: "دقيقة",
          mm: "%d دقائق",
          h: "ساعة",
          hh: "%d ساعات",
          d: "يوم",
          dd: "%d أيام",
          M: "شهر",
          MM: "%d أشهر",
          y: "سنة",
          yy: "%d سنوات"
        },
        preparse: function(e) {
          return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(e) {
            return n[e];
          }).replace(/،/g, ",");
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          }).replace(/,/g, "،");
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ar-tn", {
        months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[اليوم على الساعة] LT",
          nextDay: "[غدا على الساعة] LT",
          nextWeek: "dddd [على الساعة] LT",
          lastDay: "[أمس على الساعة] LT",
          lastWeek: "dddd [على الساعة] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "في %s",
          past: "منذ %s",
          s: "ثوان",
          m: "دقيقة",
          mm: "%d دقائق",
          h: "ساعة",
          hh: "%d ساعات",
          d: "يوم",
          dd: "%d أيام",
          M: "شهر",
          MM: "%d أشهر",
          y: "سنة",
          yy: "%d سنوات"
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "١",
          2: "٢",
          3: "٣",
          4: "٤",
          5: "٥",
          6: "٦",
          7: "٧",
          8: "٨",
          9: "٩",
          0: "٠"
        },
        n = {
          "١": "1",
          "٢": "2",
          "٣": "3",
          "٤": "4",
          "٥": "5",
          "٦": "6",
          "٧": "7",
          "٨": "8",
          "٩": "9",
          "٠": "0"
        },
        r = function(e) {
          return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5;
        },
        o = {
          s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"],
          m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"],
          h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"],
          d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"],
          M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"],
          y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"]
        },
        i = function(e) {
          return function(t, n, i, a) {
            var s = r(t),
              u = o[e][r(t)];
            return 2 === s && (u = u[n ? 0 : 1]), u.replace(/%d/i, t);
          };
        },
        a = ["كانون الثاني يناير", "شباط فبراير", "آذار مارس", "نيسان أبريل", "أيار مايو", "حزيران يونيو", "تموز يوليو", "آب أغسطس", "أيلول سبتمبر", "تشرين الأول أكتوبر", "تشرين الثاني نوفمبر", "كانون الأول ديسمبر"];
      e.defineLocale("ar", {
        months: a,
        monthsShort: a,
        weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "D/‏M/‏YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        meridiemParse: /ص|م/,
        isPM: function(e) {
          return "م" === e;
        },
        meridiem: function(e, t, n) {
          return e < 12 ? "ص" : "م";
        },
        calendar: {
          sameDay: "[اليوم عند الساعة] LT",
          nextDay: "[غدًا عند الساعة] LT",
          nextWeek: "dddd [عند الساعة] LT",
          lastDay: "[أمس عند الساعة] LT",
          lastWeek: "dddd [عند الساعة] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "بعد %s",
          past: "منذ %s",
          s: i("s"),
          m: i("m"),
          mm: i("m"),
          h: i("h"),
          hh: i("h"),
          d: i("d"),
          dd: i("d"),
          M: i("M"),
          MM: i("M"),
          y: i("y"),
          yy: i("y")
        },
        preparse: function(e) {
          return e.replace(/\u200f/g, "").replace(/[١٢٣٤٥٦٧٨٩٠]/g, function(e) {
            return n[e];
          }).replace(/،/g, ",");
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          }).replace(/,/g, "،");
        },
        week: {
          dow: 6,
          doy: 12
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
        1: "-inci",
        5: "-inci",
        8: "-inci",
        70: "-inci",
        80: "-inci",
        2: "-nci",
        7: "-nci",
        20: "-nci",
        50: "-nci",
        3: "-üncü",
        4: "-üncü",
        100: "-üncü",
        6: "-ncı",
        9: "-uncu",
        10: "-uncu",
        30: "-uncu",
        60: "-ıncı",
        90: "-ıncı"
      };
      e.defineLocale("az", {
        months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),
        monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),
        weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),
        weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),
        weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[bugün saat] LT",
          nextDay: "[sabah saat] LT",
          nextWeek: "[gələn həftə] dddd [saat] LT",
          lastDay: "[dünən] LT",
          lastWeek: "[keçən həftə] dddd [saat] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s sonra",
          past: "%s əvvəl",
          s: "birneçə saniyyə",
          m: "bir dəqiqə",
          mm: "%d dəqiqə",
          h: "bir saat",
          hh: "%d saat",
          d: "bir gün",
          dd: "%d gün",
          M: "bir ay",
          MM: "%d ay",
          y: "bir il",
          yy: "%d il"
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM: function(e) {
          return /^(gündüz|axşam)$/.test(e);
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "gecə" : e < 12 ? "səhər" : e < 17 ? "gündüz" : "axşam";
        },
        ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal: function(e) {
          if (0 === e) return e + "-ıncı";
          var n = e % 10,
            r = e % 100 - n,
            o = e >= 100 ? 100 : null;
          return e + (t[n] || t[r] || t[o]);
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t) {
        var n = e.split("_");
        return t % 10 == 1 && t % 100 != 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2];
      }

      function n(e, n, r) {
        var o = {
          mm: n ? "хвіліна_хвіліны_хвілін" : "хвіліну_хвіліны_хвілін",
          hh: n ? "гадзіна_гадзіны_гадзін" : "гадзіну_гадзіны_гадзін",
          dd: "дзень_дні_дзён",
          MM: "месяц_месяцы_месяцаў",
          yy: "год_гады_гадоў"
        };
        return "m" === r ? n ? "хвіліна" : "хвіліну" : "h" === r ? n ? "гадзіна" : "гадзіну" : e + " " + t(o[r], +e);
      }
      e.defineLocale("be", {
        months: {
          format: "студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),
          standalone: "студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")
        },
        monthsShort: "студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),
        weekdays: {
          format: "нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),
          standalone: "нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),
          isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/
        },
        weekdaysShort: "нд_пн_ат_ср_чц_пт_сб".split("_"),
        weekdaysMin: "нд_пн_ат_ср_чц_пт_сб".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY г.",
          LLL: "D MMMM YYYY г., HH:mm",
          LLLL: "dddd, D MMMM YYYY г., HH:mm"
        },
        calendar: {
          sameDay: "[Сёння ў] LT",
          nextDay: "[Заўтра ў] LT",
          lastDay: "[Учора ў] LT",
          nextWeek: function() {
            return "[У] dddd [ў] LT";
          },
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
              case 5:
              case 6:
                return "[У мінулую] dddd [ў] LT";
              case 1:
              case 2:
              case 4:
                return "[У мінулы] dddd [ў] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "праз %s",
          past: "%s таму",
          s: "некалькі секунд",
          m: n,
          mm: n,
          h: n,
          hh: n,
          d: "дзень",
          dd: n,
          M: "месяц",
          MM: n,
          y: "год",
          yy: n
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM: function(e) {
          return /^(дня|вечара)$/.test(e);
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "ночы" : e < 12 ? "раніцы" : e < 17 ? "дня" : "вечара";
        },
        ordinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function(e, t) {
          switch (t) {
            case "M":
            case "d":
            case "DDD":
            case "w":
            case "W":
              return e % 10 != 2 && e % 10 != 3 || e % 100 == 12 || e % 100 == 13 ? e + "-ы" : e + "-і";
            case "D":
              return e + "-га";
            default:
              return e;
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("bg", {
        months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),
        monthsShort: "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),
        weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),
        weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"),
        weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "D.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY H:mm",
          LLLL: "dddd, D MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[Днес в] LT",
          nextDay: "[Утре в] LT",
          nextWeek: "dddd [в] LT",
          lastDay: "[Вчера в] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
              case 6:
                return "[В изминалата] dddd [в] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[В изминалия] dddd [в] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "след %s",
          past: "преди %s",
          s: "няколко секунди",
          m: "минута",
          mm: "%d минути",
          h: "час",
          hh: "%d часа",
          d: "ден",
          dd: "%d дни",
          M: "месец",
          MM: "%d месеца",
          y: "година",
          yy: "%d години"
        },
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function(e) {
          var t = e % 10,
            n = e % 100;
          return 0 === e ? e + "-ев" : 0 === n ? e + "-ен" : n > 10 && n < 20 ? e + "-ти" : 1 === t ? e + "-ви" : 2 === t ? e + "-ри" : 7 === t || 8 === t ? e + "-ми" : e + "-ти";
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "১",
          2: "২",
          3: "৩",
          4: "৪",
          5: "৫",
          6: "৬",
          7: "৭",
          8: "৮",
          9: "৯",
          0: "০"
        },
        n = {
          "১": "1",
          "২": "2",
          "৩": "3",
          "৪": "4",
          "৫": "5",
          "৬": "6",
          "৭": "7",
          "৮": "8",
          "৯": "9",
          "০": "0"
        };
      e.defineLocale("bn", {
        months: "জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),
        monthsShort: "জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),
        weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),
        weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),
        weekdaysMin: "রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),
        longDateFormat: {
          LT: "A h:mm সময়",
          LTS: "A h:mm:ss সময়",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, A h:mm সময়",
          LLLL: "dddd, D MMMM YYYY, A h:mm সময়"
        },
        calendar: {
          sameDay: "[আজ] LT",
          nextDay: "[আগামীকাল] LT",
          nextWeek: "dddd, LT",
          lastDay: "[গতকাল] LT",
          lastWeek: "[গত] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s পরে",
          past: "%s আগে",
          s: "কয়েক সেকেন্ড",
          m: "এক মিনিট",
          mm: "%d মিনিট",
          h: "এক ঘন্টা",
          hh: "%d ঘন্টা",
          d: "এক দিন",
          dd: "%d দিন",
          M: "এক মাস",
          MM: "%d মাস",
          y: "এক বছর",
          yy: "%d বছর"
        },
        preparse: function(e) {
          return e.replace(/[১২৩৪৫৬৭৮৯০]/g, function(e) {
            return n[e];
          });
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "রাত" === t && e >= 4 || "দুপুর" === t && e < 5 || "বিকাল" === t ? e + 12 : e;
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "রাত" : e < 10 ? "সকাল" : e < 17 ? "দুপুর" : e < 20 ? "বিকাল" : "রাত";
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "༡",
          2: "༢",
          3: "༣",
          4: "༤",
          5: "༥",
          6: "༦",
          7: "༧",
          8: "༨",
          9: "༩",
          0: "༠"
        },
        n = {
          "༡": "1",
          "༢": "2",
          "༣": "3",
          "༤": "4",
          "༥": "5",
          "༦": "6",
          "༧": "7",
          "༨": "8",
          "༩": "9",
          "༠": "0"
        };
      e.defineLocale("bo", {
        months: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),
        monthsShort: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),
        weekdays: "གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),
        weekdaysShort: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),
        weekdaysMin: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),
        longDateFormat: {
          LT: "A h:mm",
          LTS: "A h:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, A h:mm",
          LLLL: "dddd, D MMMM YYYY, A h:mm"
        },
        calendar: {
          sameDay: "[དི་རིང] LT",
          nextDay: "[སང་ཉིན] LT",
          nextWeek: "[བདུན་ཕྲག་རྗེས་མ], LT",
          lastDay: "[ཁ་སང] LT",
          lastWeek: "[བདུན་ཕྲག་མཐའ་མ] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s ལ་",
          past: "%s སྔན་ལ",
          s: "ལམ་སང",
          m: "སྐར་མ་གཅིག",
          mm: "%d སྐར་མ",
          h: "ཆུ་ཚོད་གཅིག",
          hh: "%d ཆུ་ཚོད",
          d: "ཉིན་གཅིག",
          dd: "%d ཉིན་",
          M: "ཟླ་བ་གཅིག",
          MM: "%d ཟླ་བ",
          y: "ལོ་གཅིག",
          yy: "%d ལོ"
        },
        preparse: function(e) {
          return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function(e) {
            return n[e];
          });
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "མཚན་མོ" === t && e >= 4 || "ཉིན་གུང" === t && e < 5 || "དགོང་དག" === t ? e + 12 : e;
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "མཚན་མོ" : e < 10 ? "ཞོགས་ཀས" : e < 17 ? "ཉིན་གུང" : e < 20 ? "དགོང་དག" : "མཚན་མོ";
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n) {
        return e + " " + o({
          mm: "munutenn",
          MM: "miz",
          dd: "devezh"
        }[n], e);
      }

      function n(e) {
        switch (r(e)) {
          case 1:
          case 3:
          case 4:
          case 5:
          case 9:
            return e + " bloaz";
          default:
            return e + " vloaz";
        }
      }

      function r(e) {
        return e > 9 ? r(e % 10) : e;
      }

      function o(e, t) {
        return 2 === t ? i(e) : e;
      }

      function i(e) {
        var t = {
          m: "v",
          b: "v",
          d: "z"
        };
        return void 0 === t[e.charAt(0)] ? e : t[e.charAt(0)] + e.substring(1);
      }
      e.defineLocale("br", {
        months: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
        monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
        weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
        weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
        weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "h[e]mm A",
          LTS: "h[e]mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D [a viz] MMMM YYYY",
          LLL: "D [a viz] MMMM YYYY h[e]mm A",
          LLLL: "dddd, D [a viz] MMMM YYYY h[e]mm A"
        },
        calendar: {
          sameDay: "[Hiziv da] LT",
          nextDay: "[Warc'hoazh da] LT",
          nextWeek: "dddd [da] LT",
          lastDay: "[Dec'h da] LT",
          lastWeek: "dddd [paset da] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "a-benn %s",
          past: "%s 'zo",
          s: "un nebeud segondennoù",
          m: "ur vunutenn",
          mm: t,
          h: "un eur",
          hh: "%d eur",
          d: "un devezh",
          dd: t,
          M: "ur miz",
          MM: t,
          y: "ur bloaz",
          yy: n
        },
        ordinalParse: /\d{1,2}(añ|vet)/,
        ordinal: function(e) {
          return e + (1 === e ? "añ" : "vet");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n) {
        var r = e + " ";
        switch (n) {
          case "m":
            return t ? "jedna minuta" : "jedne minute";
          case "mm":
            return r += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta";
          case "h":
            return t ? "jedan sat" : "jednog sata";
          case "hh":
            return r += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";
          case "dd":
            return r += 1 === e ? "dan" : "dana";
          case "MM":
            return r += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";
          case "yy":
            return r += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina";
        }
      }
      e.defineLocale("bs", {
        months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),
        monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),
        monthsParseExact: !0,
        weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY H:mm",
          LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[danas u] LT",
          nextDay: "[sutra u] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[u] [nedjelju] [u] LT";
              case 3:
                return "[u] [srijedu] [u] LT";
              case 6:
                return "[u] [subotu] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[u] dddd [u] LT";
            }
          },
          lastDay: "[jučer u] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
                return "[prošlu] dddd [u] LT";
              case 6:
                return "[prošle] [subote] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[prošli] dddd [u] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "prije %s",
          s: "par sekundi",
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: "dan",
          dd: t,
          M: "mjesec",
          MM: t,
          y: "godinu",
          yy: t
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ca", {
        months: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
        monthsShort: "gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),
        monthsParseExact: !0,
        weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
        weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"),
        weekdaysMin: "Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY H:mm",
          LLLL: "dddd D MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: function() {
            return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT";
          },
          nextDay: function() {
            return "[demà a " + (1 !== this.hours() ? "les" : "la") + "] LT";
          },
          nextWeek: function() {
            return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT";
          },
          lastDay: function() {
            return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT";
          },
          lastWeek: function() {
            return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT";
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "d'aquí %s",
          past: "fa %s",
          s: "uns segons",
          m: "un minut",
          mm: "%d minuts",
          h: "una hora",
          hh: "%d hores",
          d: "un dia",
          dd: "%d dies",
          M: "un mes",
          MM: "%d mesos",
          y: "un any",
          yy: "%d anys"
        },
        ordinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal: function(e, t) {
          var n = 1 === e ? "r" : 2 === e ? "n" : 3 === e ? "r" : 4 === e ? "t" : "è";
          return "w" !== t && "W" !== t || (n = "a"), e + n;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e) {
        return e > 1 && e < 5 && 1 != ~~(e / 10);
      }

      function n(e, n, r, o) {
        var i = e + " ";
        switch (r) {
          case "s":
            return n || o ? "pár sekund" : "pár sekundami";
          case "m":
            return n ? "minuta" : o ? "minutu" : "minutou";
          case "mm":
            return n || o ? i + (t(e) ? "minuty" : "minut") : i + "minutami";
          case "h":
            return n ? "hodina" : o ? "hodinu" : "hodinou";
          case "hh":
            return n || o ? i + (t(e) ? "hodiny" : "hodin") : i + "hodinami";
          case "d":
            return n || o ? "den" : "dnem";
          case "dd":
            return n || o ? i + (t(e) ? "dny" : "dní") : i + "dny";
          case "M":
            return n || o ? "měsíc" : "měsícem";
          case "MM":
            return n || o ? i + (t(e) ? "měsíce" : "měsíců") : i + "měsíci";
          case "y":
            return n || o ? "rok" : "rokem";
          case "yy":
            return n || o ? i + (t(e) ? "roky" : "let") : i + "lety";
        }
      }
      var r = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),
        o = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");
      e.defineLocale("cs", {
        months: r,
        monthsShort: o,
        monthsParse: function(e, t) {
          var n, r = [];
          for (n = 0; n < 12; n++) r[n] = new RegExp("^" + e[n] + "$|^" + t[n] + "$", "i");
          return r;
        }(r, o),
        shortMonthsParse: function(e) {
          var t, n = [];
          for (t = 0; t < 12; t++) n[t] = new RegExp("^" + e[t] + "$", "i");
          return n;
        }(o),
        longMonthsParse: function(e) {
          var t, n = [];
          for (t = 0; t < 12; t++) n[t] = new RegExp("^" + e[t] + "$", "i");
          return n;
        }(r),
        weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),
        weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"),
        weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"),
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY H:mm",
          LLLL: "dddd D. MMMM YYYY H:mm",
          l: "D. M. YYYY"
        },
        calendar: {
          sameDay: "[dnes v] LT",
          nextDay: "[zítra v] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[v neděli v] LT";
              case 1:
              case 2:
                return "[v] dddd [v] LT";
              case 3:
                return "[ve středu v] LT";
              case 4:
                return "[ve čtvrtek v] LT";
              case 5:
                return "[v pátek v] LT";
              case 6:
                return "[v sobotu v] LT";
            }
          },
          lastDay: "[včera v] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[minulou neděli v] LT";
              case 1:
              case 2:
                return "[minulé] dddd [v] LT";
              case 3:
                return "[minulou středu v] LT";
              case 4:
              case 5:
                return "[minulý] dddd [v] LT";
              case 6:
                return "[minulou sobotu v] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "před %s",
          s: n,
          m: n,
          mm: n,
          h: n,
          hh: n,
          d: n,
          dd: n,
          M: n,
          MM: n,
          y: n,
          yy: n
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("cv", {
        months: "кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),
        monthsShort: "кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),
        weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),
        weekdaysShort: "выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),
        weekdaysMin: "вр_тн_ыт_юн_кҫ_эр_шм".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD-MM-YYYY",
          LL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",
          LLL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",
          LLLL: "dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"
        },
        calendar: {
          sameDay: "[Паян] LT [сехетре]",
          nextDay: "[Ыран] LT [сехетре]",
          lastDay: "[Ӗнер] LT [сехетре]",
          nextWeek: "[Ҫитес] dddd LT [сехетре]",
          lastWeek: "[Иртнӗ] dddd LT [сехетре]",
          sameElse: "L"
        },
        relativeTime: {
          future: function(e) {
            return e + (/сехет$/i.exec(e) ? "рен" : /ҫул$/i.exec(e) ? "тан" : "ран");
          },
          past: "%s каялла",
          s: "пӗр-ик ҫеккунт",
          m: "пӗр минут",
          mm: "%d минут",
          h: "пӗр сехет",
          hh: "%d сехет",
          d: "пӗр кун",
          dd: "%d кун",
          M: "пӗр уйӑх",
          MM: "%d уйӑх",
          y: "пӗр ҫул",
          yy: "%d ҫул"
        },
        ordinalParse: /\d{1,2}-мӗш/,
        ordinal: "%d-мӗш",
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("cy", {
        months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
        monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
        weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
        weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
        weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Heddiw am] LT",
          nextDay: "[Yfory am] LT",
          nextWeek: "dddd [am] LT",
          lastDay: "[Ddoe am] LT",
          lastWeek: "dddd [diwethaf am] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "mewn %s",
          past: "%s yn ôl",
          s: "ychydig eiliadau",
          m: "munud",
          mm: "%d munud",
          h: "awr",
          hh: "%d awr",
          d: "diwrnod",
          dd: "%d diwrnod",
          M: "mis",
          MM: "%d mis",
          y: "blwyddyn",
          yy: "%d flynedd"
        },
        ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        ordinal: function(e) {
          var t = e,
            n = "",
            r = ["", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed"];
          return t > 20 ? n = 40 === t || 50 === t || 60 === t || 80 === t || 100 === t ? "fed" : "ain" : t > 0 && (n = r[t]), e + n;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("da", {
        months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
        monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"),
        weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY HH:mm",
          LLLL: "dddd [d.] D. MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[I dag kl.] LT",
          nextDay: "[I morgen kl.] LT",
          nextWeek: "dddd [kl.] LT",
          lastDay: "[I går kl.] LT",
          lastWeek: "[sidste] dddd [kl] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "om %s",
          past: "%s siden",
          s: "få sekunder",
          m: "et minut",
          mm: "%d minutter",
          h: "en time",
          hh: "%d timer",
          d: "en dag",
          dd: "%d dage",
          M: "en måned",
          MM: "%d måneder",
          y: "et år",
          yy: "%d år"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n, r) {
        var o = {
          m: ["eine Minute", "einer Minute"],
          h: ["eine Stunde", "einer Stunde"],
          d: ["ein Tag", "einem Tag"],
          dd: [e + " Tage", e + " Tagen"],
          M: ["ein Monat", "einem Monat"],
          MM: [e + " Monate", e + " Monaten"],
          y: ["ein Jahr", "einem Jahr"],
          yy: [e + " Jahre", e + " Jahren"]
        };
        return t ? o[n][0] : o[n][1];
      }
      e.defineLocale("de-at", {
        months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        monthsParseExact: !0,
        weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY HH:mm",
          LLLL: "dddd, D. MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[heute um] LT [Uhr]",
          sameElse: "L",
          nextDay: "[morgen um] LT [Uhr]",
          nextWeek: "dddd [um] LT [Uhr]",
          lastDay: "[gestern um] LT [Uhr]",
          lastWeek: "[letzten] dddd [um] LT [Uhr]"
        },
        relativeTime: {
          future: "in %s",
          past: "vor %s",
          s: "ein paar Sekunden",
          m: t,
          mm: "%d Minuten",
          h: t,
          hh: "%d Stunden",
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n, r) {
        var o = {
          m: ["eine Minute", "einer Minute"],
          h: ["eine Stunde", "einer Stunde"],
          d: ["ein Tag", "einem Tag"],
          dd: [e + " Tage", e + " Tagen"],
          M: ["ein Monat", "einem Monat"],
          MM: [e + " Monate", e + " Monaten"],
          y: ["ein Jahr", "einem Jahr"],
          yy: [e + " Jahre", e + " Jahren"]
        };
        return t ? o[n][0] : o[n][1];
      }
      e.defineLocale("de", {
        months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        monthsParseExact: !0,
        weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY HH:mm",
          LLLL: "dddd, D. MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[heute um] LT [Uhr]",
          sameElse: "L",
          nextDay: "[morgen um] LT [Uhr]",
          nextWeek: "dddd [um] LT [Uhr]",
          lastDay: "[gestern um] LT [Uhr]",
          lastWeek: "[letzten] dddd [um] LT [Uhr]"
        },
        relativeTime: {
          future: "in %s",
          past: "vor %s",
          s: "ein paar Sekunden",
          m: t,
          mm: "%d Minuten",
          h: t,
          hh: "%d Stunden",
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = ["ޖެނުއަރީ", "ފެބްރުއަރީ", "މާރިޗު", "އޭޕްރީލު", "މޭ", "ޖޫން", "ޖުލައި", "އޯގަސްޓު", "ސެޕްޓެމްބަރު", "އޮކްޓޯބަރު", "ނޮވެމްބަރު", "ޑިސެމްބަރު"],
        n = ["އާދިއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"];
      e.defineLocale("dv", {
        months: t,
        monthsShort: t,
        weekdays: n,
        weekdaysShort: n,
        weekdaysMin: "އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "D/M/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        meridiemParse: /މކ|މފ/,
        isPM: function(e) {
          return "މފ" === e;
        },
        meridiem: function(e, t, n) {
          return e < 12 ? "މކ" : "މފ";
        },
        calendar: {
          sameDay: "[މިއަދު] LT",
          nextDay: "[މާދަމާ] LT",
          nextWeek: "dddd LT",
          lastDay: "[އިއްޔެ] LT",
          lastWeek: "[ފާއިތުވި] dddd LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "ތެރޭގައި %s",
          past: "ކުރިން %s",
          s: "ސިކުންތުކޮޅެއް",
          m: "މިނިޓެއް",
          mm: "މިނިޓު %d",
          h: "ގަޑިއިރެއް",
          hh: "ގަޑިއިރު %d",
          d: "ދުވަހެއް",
          dd: "ދުވަސް %d",
          M: "މަހެއް",
          MM: "މަސް %d",
          y: "އަހަރެއް",
          yy: "އަހަރު %d"
        },
        preparse: function(e) {
          return e.replace(/،/g, ",");
        },
        postformat: function(e) {
          return e.replace(/,/g, "،");
        },
        week: {
          dow: 7,
          doy: 12
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e) {
        return e instanceof Function || "[object Function]" === Object.prototype.toString.call(e);
      }
      e.defineLocale("el", {
        monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),
        monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),
        months: function(e, t) {
          return /D/.test(t.substring(0, t.indexOf("MMMM"))) ? this._monthsGenitiveEl[e.month()] : this._monthsNominativeEl[e.month()];
        },
        monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),
        weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),
        weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
        weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
        meridiem: function(e, t, n) {
          return e > 11 ? n ? "μμ" : "ΜΜ" : n ? "πμ" : "ΠΜ";
        },
        isPM: function(e) {
          return "μ" === (e + "").toLowerCase()[0];
        },
        meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat: {
          LT: "h:mm A",
          LTS: "h:mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY h:mm A",
          LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendarEl: {
          sameDay: "[Σήμερα {}] LT",
          nextDay: "[Αύριο {}] LT",
          nextWeek: "dddd [{}] LT",
          lastDay: "[Χθες {}] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 6:
                return "[το προηγούμενο] dddd [{}] LT";
              default:
                return "[την προηγούμενη] dddd [{}] LT";
            }
          },
          sameElse: "L"
        },
        calendar: function(e, n) {
          var r = this._calendarEl[e],
            o = n && n.hours();
          return t(r) && (r = r.apply(n)), r.replace("{}", o % 12 == 1 ? "στη" : "στις");
        },
        relativeTime: {
          future: "σε %s",
          past: "%s πριν",
          s: "λίγα δευτερόλεπτα",
          m: "ένα λεπτό",
          mm: "%d λεπτά",
          h: "μία ώρα",
          hh: "%d ώρες",
          d: "μία μέρα",
          dd: "%d μέρες",
          M: "ένας μήνας",
          MM: "%d μήνες",
          y: "ένας χρόνος",
          yy: "%d χρόνια"
        },
        ordinalParse: /\d{1,2}η/,
        ordinal: "%dη",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("en-au", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "h:mm A",
          LTS: "h:mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY h:mm A",
          LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendar: {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(e) {
          var t = e % 10;
          return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("en-ca", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "h:mm A",
          LTS: "h:mm:ss A",
          L: "YYYY-MM-DD",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY h:mm A",
          LLLL: "dddd, MMMM D, YYYY h:mm A"
        },
        calendar: {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(e) {
          var t = e % 10;
          return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th");
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("en-gb", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(e) {
          var t = e % 10;
          return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("en-ie", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD-MM-YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(e) {
          var t = e % 10;
          return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("en-nz", {
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat: {
          LT: "h:mm A",
          LTS: "h:mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY h:mm A",
          LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendar: {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(e) {
          var t = e % 10;
          return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("eo", {
        months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),
        monthsShort: "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),
        weekdays: "Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),
        weekdaysShort: "Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "YYYY-MM-DD",
          LL: "D[-an de] MMMM, YYYY",
          LLL: "D[-an de] MMMM, YYYY HH:mm",
          LLLL: "dddd, [la] D[-an de] MMMM, YYYY HH:mm"
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function(e) {
          return "p" === e.charAt(0).toLowerCase();
        },
        meridiem: function(e, t, n) {
          return e > 11 ? n ? "p.t.m." : "P.T.M." : n ? "a.t.m." : "A.T.M.";
        },
        calendar: {
          sameDay: "[Hodiaŭ je] LT",
          nextDay: "[Morgaŭ je] LT",
          nextWeek: "dddd [je] LT",
          lastDay: "[Hieraŭ je] LT",
          lastWeek: "[pasinta] dddd [je] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "je %s",
          past: "antaŭ %s",
          s: "sekundoj",
          m: "minuto",
          mm: "%d minutoj",
          h: "horo",
          hh: "%d horoj",
          d: "tago",
          dd: "%d tagoj",
          M: "monato",
          MM: "%d monatoj",
          y: "jaro",
          yy: "%d jaroj"
        },
        ordinalParse: /\d{1,2}a/,
        ordinal: "%da",
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
        n = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");
      e.defineLocale("es-do", {
        months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
        monthsShort: function(e, r) {
          return /-MMM-/.test(r) ? n[e.month()] : t[e.month()];
        },
        monthsParseExact: !0,
        weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
        weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
        weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "h:mm A",
          LTS: "h:mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D [de] MMMM [de] YYYY",
          LLL: "D [de] MMMM [de] YYYY h:mm A",
          LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A"
        },
        calendar: {
          sameDay: function() {
            return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
          },
          nextDay: function() {
            return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
          },
          nextWeek: function() {
            return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
          },
          lastDay: function() {
            return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
          },
          lastWeek: function() {
            return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "en %s",
          past: "hace %s",
          s: "unos segundos",
          m: "un minuto",
          mm: "%d minutos",
          h: "una hora",
          hh: "%d horas",
          d: "un día",
          dd: "%d días",
          M: "un mes",
          MM: "%d meses",
          y: "un año",
          yy: "%d años"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
        n = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");
      e.defineLocale("es", {
        months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
        monthsShort: function(e, r) {
          return /-MMM-/.test(r) ? n[e.month()] : t[e.month()];
        },
        monthsParseExact: !0,
        weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
        weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
        weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D [de] MMMM [de] YYYY",
          LLL: "D [de] MMMM [de] YYYY H:mm",
          LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
        },
        calendar: {
          sameDay: function() {
            return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
          },
          nextDay: function() {
            return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
          },
          nextWeek: function() {
            return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
          },
          lastDay: function() {
            return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
          },
          lastWeek: function() {
            return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "en %s",
          past: "hace %s",
          s: "unos segundos",
          m: "un minuto",
          mm: "%d minutos",
          h: "una hora",
          hh: "%d horas",
          d: "un día",
          dd: "%d días",
          M: "un mes",
          MM: "%d meses",
          y: "un año",
          yy: "%d años"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n, r) {
        var o = {
          s: ["mõne sekundi", "mõni sekund", "paar sekundit"],
          m: ["ühe minuti", "üks minut"],
          mm: [e + " minuti", e + " minutit"],
          h: ["ühe tunni", "tund aega", "üks tund"],
          hh: [e + " tunni", e + " tundi"],
          d: ["ühe päeva", "üks päev"],
          M: ["kuu aja", "kuu aega", "üks kuu"],
          MM: [e + " kuu", e + " kuud"],
          y: ["ühe aasta", "aasta", "üks aasta"],
          yy: [e + " aasta", e + " aastat"]
        };
        return t ? o[n][2] ? o[n][2] : o[n][1] : r ? o[n][0] : o[n][1];
      }
      e.defineLocale("et", {
        months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
        monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
        weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),
        weekdaysShort: "P_E_T_K_N_R_L".split("_"),
        weekdaysMin: "P_E_T_K_N_R_L".split("_"),
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY H:mm",
          LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[Täna,] LT",
          nextDay: "[Homme,] LT",
          nextWeek: "[Järgmine] dddd LT",
          lastDay: "[Eile,] LT",
          lastWeek: "[Eelmine] dddd LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s pärast",
          past: "%s tagasi",
          s: t,
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: t,
          dd: "%d päeva",
          M: t,
          MM: t,
          y: t,
          yy: t
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("eu", {
        months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
        monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
        monthsParseExact: !0,
        weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
        weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"),
        weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "YYYY-MM-DD",
          LL: "YYYY[ko] MMMM[ren] D[a]",
          LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm",
          LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",
          l: "YYYY-M-D",
          ll: "YYYY[ko] MMM D[a]",
          lll: "YYYY[ko] MMM D[a] HH:mm",
          llll: "ddd, YYYY[ko] MMM D[a] HH:mm"
        },
        calendar: {
          sameDay: "[gaur] LT[etan]",
          nextDay: "[bihar] LT[etan]",
          nextWeek: "dddd LT[etan]",
          lastDay: "[atzo] LT[etan]",
          lastWeek: "[aurreko] dddd LT[etan]",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s barru",
          past: "duela %s",
          s: "segundo batzuk",
          m: "minutu bat",
          mm: "%d minutu",
          h: "ordu bat",
          hh: "%d ordu",
          d: "egun bat",
          dd: "%d egun",
          M: "hilabete bat",
          MM: "%d hilabete",
          y: "urte bat",
          yy: "%d urte"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "۱",
          2: "۲",
          3: "۳",
          4: "۴",
          5: "۵",
          6: "۶",
          7: "۷",
          8: "۸",
          9: "۹",
          0: "۰"
        },
        n = {
          "۱": "1",
          "۲": "2",
          "۳": "3",
          "۴": "4",
          "۵": "5",
          "۶": "6",
          "۷": "7",
          "۸": "8",
          "۹": "9",
          "۰": "0"
        };
      e.defineLocale("fa", {
        months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
        monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
        weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
        weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
        weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function(e) {
          return /بعد از ظهر/.test(e);
        },
        meridiem: function(e, t, n) {
          return e < 12 ? "قبل از ظهر" : "بعد از ظهر";
        },
        calendar: {
          sameDay: "[امروز ساعت] LT",
          nextDay: "[فردا ساعت] LT",
          nextWeek: "dddd [ساعت] LT",
          lastDay: "[دیروز ساعت] LT",
          lastWeek: "dddd [پیش] [ساعت] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "در %s",
          past: "%s پیش",
          s: "چندین ثانیه",
          m: "یک دقیقه",
          mm: "%d دقیقه",
          h: "یک ساعت",
          hh: "%d ساعت",
          d: "یک روز",
          dd: "%d روز",
          M: "یک ماه",
          MM: "%d ماه",
          y: "یک سال",
          yy: "%d سال"
        },
        preparse: function(e) {
          return e.replace(/[۰-۹]/g, function(e) {
            return n[e];
          }).replace(/،/g, ",");
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          }).replace(/,/g, "،");
        },
        ordinalParse: /\d{1,2}م/,
        ordinal: "%dم",
        week: {
          dow: 6,
          doy: 12
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, r, o) {
        var i = "";
        switch (r) {
          case "s":
            return o ? "muutaman sekunnin" : "muutama sekunti";
          case "m":
            return o ? "minuutin" : "minuutti";
          case "mm":
            i = o ? "minuutin" : "minuuttia";
            break;
          case "h":
            return o ? "tunnin" : "tunti";
          case "hh":
            i = o ? "tunnin" : "tuntia";
            break;
          case "d":
            return o ? "päivän" : "päivä";
          case "dd":
            i = o ? "päivän" : "päivää";
            break;
          case "M":
            return o ? "kuukauden" : "kuukausi";
          case "MM":
            i = o ? "kuukauden" : "kuukautta";
            break;
          case "y":
            return o ? "vuoden" : "vuosi";
          case "yy":
            i = o ? "vuoden" : "vuotta";
        }
        return i = n(e, o) + " " + i;
      }

      function n(e, t) {
        return e < 10 ? t ? o[e] : r[e] : e;
      }
      var r = "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),
        o = ["nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", r[7], r[8], r[9]];
      e.defineLocale("fi", {
        months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
        monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),
        weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
        weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"),
        weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"),
        longDateFormat: {
          LT: "HH.mm",
          LTS: "HH.mm.ss",
          L: "DD.MM.YYYY",
          LL: "Do MMMM[ta] YYYY",
          LLL: "Do MMMM[ta] YYYY, [klo] HH.mm",
          LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm",
          l: "D.M.YYYY",
          ll: "Do MMM YYYY",
          lll: "Do MMM YYYY, [klo] HH.mm",
          llll: "ddd, Do MMM YYYY, [klo] HH.mm"
        },
        calendar: {
          sameDay: "[tänään] [klo] LT",
          nextDay: "[huomenna] [klo] LT",
          nextWeek: "dddd [klo] LT",
          lastDay: "[eilen] [klo] LT",
          lastWeek: "[viime] dddd[na] [klo] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s päästä",
          past: "%s sitten",
          s: t,
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("fo", {
        months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),
        weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"),
        weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D. MMMM, YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Í dag kl.] LT",
          nextDay: "[Í morgin kl.] LT",
          nextWeek: "dddd [kl.] LT",
          lastDay: "[Í gjár kl.] LT",
          lastWeek: "[síðstu] dddd [kl] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "um %s",
          past: "%s síðani",
          s: "fá sekund",
          m: "ein minutt",
          mm: "%d minuttir",
          h: "ein tími",
          hh: "%d tímar",
          d: "ein dagur",
          dd: "%d dagar",
          M: "ein mánaði",
          MM: "%d mánaðir",
          y: "eitt ár",
          yy: "%d ár"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("fr-ca", {
        months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        monthsParseExact: !0,
        weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "YYYY-MM-DD",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Aujourd'hui à] LT",
          nextDay: "[Demain à] LT",
          nextWeek: "dddd [à] LT",
          lastDay: "[Hier à] LT",
          lastWeek: "dddd [dernier à] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dans %s",
          past: "il y a %s",
          s: "quelques secondes",
          m: "une minute",
          mm: "%d minutes",
          h: "une heure",
          hh: "%d heures",
          d: "un jour",
          dd: "%d jours",
          M: "un mois",
          MM: "%d mois",
          y: "un an",
          yy: "%d ans"
        },
        ordinalParse: /\d{1,2}(er|e)/,
        ordinal: function(e) {
          return e + (1 === e ? "er" : "e");
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("fr-ch", {
        months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        monthsParseExact: !0,
        weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Aujourd'hui à] LT",
          nextDay: "[Demain à] LT",
          nextWeek: "dddd [à] LT",
          lastDay: "[Hier à] LT",
          lastWeek: "dddd [dernier à] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dans %s",
          past: "il y a %s",
          s: "quelques secondes",
          m: "une minute",
          mm: "%d minutes",
          h: "une heure",
          hh: "%d heures",
          d: "un jour",
          dd: "%d jours",
          M: "un mois",
          MM: "%d mois",
          y: "un an",
          yy: "%d ans"
        },
        ordinalParse: /\d{1,2}(er|e)/,
        ordinal: function(e) {
          return e + (1 === e ? "er" : "e");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("fr", {
        months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        monthsParseExact: !0,
        weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Aujourd'hui à] LT",
          nextDay: "[Demain à] LT",
          nextWeek: "dddd [à] LT",
          lastDay: "[Hier à] LT",
          lastWeek: "dddd [dernier à] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dans %s",
          past: "il y a %s",
          s: "quelques secondes",
          m: "une minute",
          mm: "%d minutes",
          h: "une heure",
          hh: "%d heures",
          d: "un jour",
          dd: "%d jours",
          M: "un mois",
          MM: "%d mois",
          y: "un an",
          yy: "%d ans"
        },
        ordinalParse: /\d{1,2}(er|)/,
        ordinal: function(e) {
          return e + (1 === e ? "er" : "");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),
        n = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");
      e.defineLocale("fy", {
        months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),
        monthsShort: function(e, r) {
          return /-MMM-/.test(r) ? n[e.month()] : t[e.month()];
        },
        monthsParseExact: !0,
        weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),
        weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"),
        weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD-MM-YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[hjoed om] LT",
          nextDay: "[moarn om] LT",
          nextWeek: "dddd [om] LT",
          lastDay: "[juster om] LT",
          lastWeek: "[ôfrûne] dddd [om] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "oer %s",
          past: "%s lyn",
          s: "in pear sekonden",
          m: "ien minút",
          mm: "%d minuten",
          h: "ien oere",
          hh: "%d oeren",
          d: "ien dei",
          dd: "%d dagen",
          M: "ien moanne",
          MM: "%d moannen",
          y: "ien jier",
          yy: "%d jierren"
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(e) {
          return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd"],
        n = ["Faoi", "Gear", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùn", "Sult", "Dàmh", "Samh", "Dùbh"],
        r = ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"],
        o = ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"],
        i = ["Dò", "Lu", "Mà", "Ci", "Ar", "Ha", "Sa"];
      e.defineLocale("gd", {
        months: t,
        monthsShort: n,
        monthsParseExact: !0,
        weekdays: r,
        weekdaysShort: o,
        weekdaysMin: i,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[An-diugh aig] LT",
          nextDay: "[A-màireach aig] LT",
          nextWeek: "dddd [aig] LT",
          lastDay: "[An-dè aig] LT",
          lastWeek: "dddd [seo chaidh] [aig] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "ann an %s",
          past: "bho chionn %s",
          s: "beagan diogan",
          m: "mionaid",
          mm: "%d mionaidean",
          h: "uair",
          hh: "%d uairean",
          d: "latha",
          dd: "%d latha",
          M: "mìos",
          MM: "%d mìosan",
          y: "bliadhna",
          yy: "%d bliadhna"
        },
        ordinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function(e) {
          return e + (1 === e ? "d" : e % 10 == 2 ? "na" : "mh");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("gl", {
        months: "xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),
        monthsShort: "xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),
        monthsParseExact: !0,
        weekdays: "domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),
        weekdaysShort: "dom._lun._mar._mér._xov._ven._sáb.".split("_"),
        weekdaysMin: "do_lu_ma_mé_xo_ve_sá".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D [de] MMMM [de] YYYY",
          LLL: "D [de] MMMM [de] YYYY H:mm",
          LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
        },
        calendar: {
          sameDay: function() {
            return "[hoxe " + (1 !== this.hours() ? "ás" : "á") + "] LT";
          },
          nextDay: function() {
            return "[mañá " + (1 !== this.hours() ? "ás" : "á") + "] LT";
          },
          nextWeek: function() {
            return "dddd [" + (1 !== this.hours() ? "ás" : "a") + "] LT";
          },
          lastDay: function() {
            return "[onte " + (1 !== this.hours() ? "á" : "a") + "] LT";
          },
          lastWeek: function() {
            return "[o] dddd [pasado " + (1 !== this.hours() ? "ás" : "a") + "] LT";
          },
          sameElse: "L"
        },
        relativeTime: {
          future: function(e) {
            return 0 === e.indexOf("un") ? "n" + e : "en " + e;
          },
          past: "hai %s",
          s: "uns segundos",
          m: "un minuto",
          mm: "%d minutos",
          h: "unha hora",
          hh: "%d horas",
          d: "un día",
          dd: "%d días",
          M: "un mes",
          MM: "%d meses",
          y: "un ano",
          yy: "%d anos"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("he", {
        months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),
        monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),
        weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
        weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
        weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D [ב]MMMM YYYY",
          LLL: "D [ב]MMMM YYYY HH:mm",
          LLLL: "dddd, D [ב]MMMM YYYY HH:mm",
          l: "D/M/YYYY",
          ll: "D MMM YYYY",
          lll: "D MMM YYYY HH:mm",
          llll: "ddd, D MMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[היום ב־]LT",
          nextDay: "[מחר ב־]LT",
          nextWeek: "dddd [בשעה] LT",
          lastDay: "[אתמול ב־]LT",
          lastWeek: "[ביום] dddd [האחרון בשעה] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "בעוד %s",
          past: "לפני %s",
          s: "מספר שניות",
          m: "דקה",
          mm: "%d דקות",
          h: "שעה",
          hh: function(e) {
            return 2 === e ? "שעתיים" : e + " שעות";
          },
          d: "יום",
          dd: function(e) {
            return 2 === e ? "יומיים" : e + " ימים";
          },
          M: "חודש",
          MM: function(e) {
            return 2 === e ? "חודשיים" : e + " חודשים";
          },
          y: "שנה",
          yy: function(e) {
            return 2 === e ? "שנתיים" : e % 10 == 0 && 10 !== e ? e + " שנה" : e + " שנים";
          }
        },
        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
        isPM: function(e) {
          return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(e);
        },
        meridiem: function(e, t, n) {
          return e < 5 ? "לפנות בוקר" : e < 10 ? "בבוקר" : e < 12 ? n ? 'לפנה"צ' : "לפני הצהריים" : e < 18 ? n ? 'אחה"צ' : "אחרי הצהריים" : "בערב";
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "१",
          2: "२",
          3: "३",
          4: "४",
          5: "५",
          6: "६",
          7: "७",
          8: "८",
          9: "९",
          0: "०"
        },
        n = {
          "१": "1",
          "२": "2",
          "३": "3",
          "४": "4",
          "५": "5",
          "६": "6",
          "७": "7",
          "८": "8",
          "९": "9",
          "०": "0"
        };
      e.defineLocale("hi", {
        months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),
        monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),
        monthsParseExact: !0,
        weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
        weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),
        weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
        longDateFormat: {
          LT: "A h:mm बजे",
          LTS: "A h:mm:ss बजे",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, A h:mm बजे",
          LLLL: "dddd, D MMMM YYYY, A h:mm बजे"
        },
        calendar: {
          sameDay: "[आज] LT",
          nextDay: "[कल] LT",
          nextWeek: "dddd, LT",
          lastDay: "[कल] LT",
          lastWeek: "[पिछले] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s में",
          past: "%s पहले",
          s: "कुछ ही क्षण",
          m: "एक मिनट",
          mm: "%d मिनट",
          h: "एक घंटा",
          hh: "%d घंटे",
          d: "एक दिन",
          dd: "%d दिन",
          M: "एक महीने",
          MM: "%d महीने",
          y: "एक वर्ष",
          yy: "%d वर्ष"
        },
        preparse: function(e) {
          return e.replace(/[१२३४५६७८९०]/g, function(e) {
            return n[e];
          });
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          });
        },
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "रात" === t ? e < 4 ? e : e + 12 : "सुबह" === t ? e : "दोपहर" === t ? e >= 10 ? e : e + 12 : "शाम" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "रात" : e < 10 ? "सुबह" : e < 17 ? "दोपहर" : e < 20 ? "शाम" : "रात";
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n) {
        var r = e + " ";
        switch (n) {
          case "m":
            return t ? "jedna minuta" : "jedne minute";
          case "mm":
            return r += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta";
          case "h":
            return t ? "jedan sat" : "jednog sata";
          case "hh":
            return r += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";
          case "dd":
            return r += 1 === e ? "dan" : "dana";
          case "MM":
            return r += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";
          case "yy":
            return r += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina";
        }
      }
      e.defineLocale("hr", {
        months: {
          format: "siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),
          standalone: "siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")
        },
        monthsShort: "sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
        monthsParseExact: !0,
        weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY H:mm",
          LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[danas u] LT",
          nextDay: "[sutra u] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[u] [nedjelju] [u] LT";
              case 3:
                return "[u] [srijedu] [u] LT";
              case 6:
                return "[u] [subotu] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[u] dddd [u] LT";
            }
          },
          lastDay: "[jučer u] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
                return "[prošlu] dddd [u] LT";
              case 6:
                return "[prošle] [subote] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[prošli] dddd [u] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "prije %s",
          s: "par sekundi",
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: "dan",
          dd: t,
          M: "mjesec",
          MM: t,
          y: "godinu",
          yy: t
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n, r) {
        var o = e;
        switch (n) {
          case "s":
            return r || t ? "néhány másodperc" : "néhány másodperce";
          case "m":
            return "egy" + (r || t ? " perc" : " perce");
          case "mm":
            return o + (r || t ? " perc" : " perce");
          case "h":
            return "egy" + (r || t ? " óra" : " órája");
          case "hh":
            return o + (r || t ? " óra" : " órája");
          case "d":
            return "egy" + (r || t ? " nap" : " napja");
          case "dd":
            return o + (r || t ? " nap" : " napja");
          case "M":
            return "egy" + (r || t ? " hónap" : " hónapja");
          case "MM":
            return o + (r || t ? " hónap" : " hónapja");
          case "y":
            return "egy" + (r || t ? " év" : " éve");
          case "yy":
            return o + (r || t ? " év" : " éve");
        }
        return "";
      }

      function n(e) {
        return (e ? "" : "[múlt] ") + "[" + r[this.day()] + "] LT[-kor]";
      }
      var r = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");
      e.defineLocale("hu", {
        months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),
        monthsShort: "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),
        weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),
        weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
        weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"),
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "YYYY.MM.DD.",
          LL: "YYYY. MMMM D.",
          LLL: "YYYY. MMMM D. H:mm",
          LLLL: "YYYY. MMMM D., dddd H:mm"
        },
        meridiemParse: /de|du/i,
        isPM: function(e) {
          return "u" === e.charAt(1).toLowerCase();
        },
        meridiem: function(e, t, n) {
          return e < 12 ? !0 === n ? "de" : "DE" : !0 === n ? "du" : "DU";
        },
        calendar: {
          sameDay: "[ma] LT[-kor]",
          nextDay: "[holnap] LT[-kor]",
          nextWeek: function() {
            return n.call(this, !0);
          },
          lastDay: "[tegnap] LT[-kor]",
          lastWeek: function() {
            return n.call(this, !1);
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "%s múlva",
          past: "%s",
          s: t,
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("hy-am", {
        months: {
          format: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),
          standalone: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")
        },
        monthsShort: "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),
        weekdays: "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),
        weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
        weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY թ.",
          LLL: "D MMMM YYYY թ., HH:mm",
          LLLL: "dddd, D MMMM YYYY թ., HH:mm"
        },
        calendar: {
          sameDay: "[այսօր] LT",
          nextDay: "[վաղը] LT",
          lastDay: "[երեկ] LT",
          nextWeek: function() {
            return "dddd [օրը ժամը] LT";
          },
          lastWeek: function() {
            return "[անցած] dddd [օրը ժամը] LT";
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "%s հետո",
          past: "%s առաջ",
          s: "մի քանի վայրկյան",
          m: "րոպե",
          mm: "%d րոպե",
          h: "ժամ",
          hh: "%d ժամ",
          d: "օր",
          dd: "%d օր",
          M: "ամիս",
          MM: "%d ամիս",
          y: "տարի",
          yy: "%d տարի"
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function(e) {
          return /^(ցերեկվա|երեկոյան)$/.test(e);
        },
        meridiem: function(e) {
          return e < 4 ? "գիշերվա" : e < 12 ? "առավոտվա" : e < 17 ? "ցերեկվա" : "երեկոյան";
        },
        ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function(e, t) {
          switch (t) {
            case "DDD":
            case "w":
            case "W":
            case "DDDo":
              return 1 === e ? e + "-ին" : e + "-րդ";
            default:
              return e;
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("id", {
        months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),
        weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
        weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
        weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat: {
          LT: "HH.mm",
          LTS: "HH.mm.ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY [pukul] HH.mm",
          LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "pagi" === t ? e : "siang" === t ? e >= 11 ? e : e + 12 : "sore" === t || "malam" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          return e < 11 ? "pagi" : e < 15 ? "siang" : e < 19 ? "sore" : "malam";
        },
        calendar: {
          sameDay: "[Hari ini pukul] LT",
          nextDay: "[Besok pukul] LT",
          nextWeek: "dddd [pukul] LT",
          lastDay: "[Kemarin pukul] LT",
          lastWeek: "dddd [lalu pukul] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dalam %s",
          past: "%s yang lalu",
          s: "beberapa detik",
          m: "semenit",
          mm: "%d menit",
          h: "sejam",
          hh: "%d jam",
          d: "sehari",
          dd: "%d hari",
          M: "sebulan",
          MM: "%d bulan",
          y: "setahun",
          yy: "%d tahun"
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e) {
        return e % 100 == 11 || e % 10 != 1;
      }

      function n(e, n, r, o) {
        var i = e + " ";
        switch (r) {
          case "s":
            return n || o ? "nokkrar sekúndur" : "nokkrum sekúndum";
          case "m":
            return n ? "mínúta" : "mínútu";
          case "mm":
            return t(e) ? i + (n || o ? "mínútur" : "mínútum") : n ? i + "mínúta" : i + "mínútu";
          case "hh":
            return t(e) ? i + (n || o ? "klukkustundir" : "klukkustundum") : i + "klukkustund";
          case "d":
            return n ? "dagur" : o ? "dag" : "degi";
          case "dd":
            return t(e) ? n ? i + "dagar" : i + (o ? "daga" : "dögum") : n ? i + "dagur" : i + (o ? "dag" : "degi");
          case "M":
            return n ? "mánuður" : o ? "mánuð" : "mánuði";
          case "MM":
            return t(e) ? n ? i + "mánuðir" : i + (o ? "mánuði" : "mánuðum") : n ? i + "mánuður" : i + (o ? "mánuð" : "mánuði");
          case "y":
            return n || o ? "ár" : "ári";
          case "yy":
            return t(e) ? i + (n || o ? "ár" : "árum") : i + (n || o ? "ár" : "ári");
        }
      }
      e.defineLocale("is", {
        months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),
        monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),
        weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),
        weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"),
        weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY [kl.] H:mm",
          LLLL: "dddd, D. MMMM YYYY [kl.] H:mm"
        },
        calendar: {
          sameDay: "[í dag kl.] LT",
          nextDay: "[á morgun kl.] LT",
          nextWeek: "dddd [kl.] LT",
          lastDay: "[í gær kl.] LT",
          lastWeek: "[síðasta] dddd [kl.] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "eftir %s",
          past: "fyrir %s síðan",
          s: n,
          m: n,
          mm: n,
          h: "klukkustund",
          hh: n,
          d: n,
          dd: n,
          M: n,
          MM: n,
          y: n,
          yy: n
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("it", {
        months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
        monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
        weekdays: "Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),
        weekdaysShort: "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),
        weekdaysMin: "Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Oggi alle] LT",
          nextDay: "[Domani alle] LT",
          nextWeek: "dddd [alle] LT",
          lastDay: "[Ieri alle] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[la scorsa] dddd [alle] LT";
              default:
                return "[lo scorso] dddd [alle] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: function(e) {
            return (/^[0-9].+$/.test(e) ? "tra" : "in") + " " + e;
          },
          past: "%s fa",
          s: "alcuni secondi",
          m: "un minuto",
          mm: "%d minuti",
          h: "un'ora",
          hh: "%d ore",
          d: "un giorno",
          dd: "%d giorni",
          M: "un mese",
          MM: "%d mesi",
          y: "un anno",
          yy: "%d anni"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ja", {
        months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),
        weekdaysShort: "日_月_火_水_木_金_土".split("_"),
        weekdaysMin: "日_月_火_水_木_金_土".split("_"),
        longDateFormat: {
          LT: "Ah時m分",
          LTS: "Ah時m分s秒",
          L: "YYYY/MM/DD",
          LL: "YYYY年M月D日",
          LLL: "YYYY年M月D日Ah時m分",
          LLLL: "YYYY年M月D日Ah時m分 dddd"
        },
        meridiemParse: /午前|午後/i,
        isPM: function(e) {
          return "午後" === e;
        },
        meridiem: function(e, t, n) {
          return e < 12 ? "午前" : "午後";
        },
        calendar: {
          sameDay: "[今日] LT",
          nextDay: "[明日] LT",
          nextWeek: "[来週]dddd LT",
          lastDay: "[昨日] LT",
          lastWeek: "[前週]dddd LT",
          sameElse: "L"
        },
        ordinalParse: /\d{1,2}日/,
        ordinal: function(e, t) {
          switch (t) {
            case "d":
            case "D":
            case "DDD":
              return e + "日";
            default:
              return e;
          }
        },
        relativeTime: {
          future: "%s後",
          past: "%s前",
          s: "数秒",
          m: "1分",
          mm: "%d分",
          h: "1時間",
          hh: "%d時間",
          d: "1日",
          dd: "%d日",
          M: "1ヶ月",
          MM: "%dヶ月",
          y: "1年",
          yy: "%d年"
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("jv", {
        months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),
        monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),
        weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),
        weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),
        weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),
        longDateFormat: {
          LT: "HH.mm",
          LTS: "HH.mm.ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY [pukul] HH.mm",
          LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "enjing" === t ? e : "siyang" === t ? e >= 11 ? e : e + 12 : "sonten" === t || "ndalu" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          return e < 11 ? "enjing" : e < 15 ? "siyang" : e < 19 ? "sonten" : "ndalu";
        },
        calendar: {
          sameDay: "[Dinten puniko pukul] LT",
          nextDay: "[Mbenjang pukul] LT",
          nextWeek: "dddd [pukul] LT",
          lastDay: "[Kala wingi pukul] LT",
          lastWeek: "dddd [kepengker pukul] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "wonten ing %s",
          past: "%s ingkang kepengker",
          s: "sawetawis detik",
          m: "setunggal menit",
          mm: "%d menit",
          h: "setunggal jam",
          hh: "%d jam",
          d: "sedinten",
          dd: "%d dinten",
          M: "sewulan",
          MM: "%d wulan",
          y: "setaun",
          yy: "%d taun"
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ka", {
        months: {
          standalone: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),
          format: "იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")
        },
        monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),
        weekdays: {
          standalone: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),
          format: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),
          isFormat: /(წინა|შემდეგ)/
        },
        weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
        weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
        longDateFormat: {
          LT: "h:mm A",
          LTS: "h:mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY h:mm A",
          LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendar: {
          sameDay: "[დღეს] LT[-ზე]",
          nextDay: "[ხვალ] LT[-ზე]",
          lastDay: "[გუშინ] LT[-ზე]",
          nextWeek: "[შემდეგ] dddd LT[-ზე]",
          lastWeek: "[წინა] dddd LT-ზე",
          sameElse: "L"
        },
        relativeTime: {
          future: function(e) {
            return /(წამი|წუთი|საათი|წელი)/.test(e) ? e.replace(/ი$/, "ში") : e + "ში";
          },
          past: function(e) {
            return /(წამი|წუთი|საათი|დღე|თვე)/.test(e) ? e.replace(/(ი|ე)$/, "ის წინ") : /წელი/.test(e) ? e.replace(/წელი$/, "წლის წინ") : void 0;
          },
          s: "რამდენიმე წამი",
          m: "წუთი",
          mm: "%d წუთი",
          h: "საათი",
          hh: "%d საათი",
          d: "დღე",
          dd: "%d დღე",
          M: "თვე",
          MM: "%d თვე",
          y: "წელი",
          yy: "%d წელი"
        },
        ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal: function(e) {
          return 0 === e ? e : 1 === e ? e + "-ლი" : e < 20 || e <= 100 && e % 20 == 0 || e % 100 == 0 ? "მე-" + e : e + "-ე";
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
        0: "-ші",
        1: "-ші",
        2: "-ші",
        3: "-ші",
        4: "-ші",
        5: "-ші",
        6: "-шы",
        7: "-ші",
        8: "-ші",
        9: "-шы",
        10: "-шы",
        20: "-шы",
        30: "-шы",
        40: "-шы",
        50: "-ші",
        60: "-шы",
        70: "-ші",
        80: "-ші",
        90: "-шы",
        100: "-ші"
      };
      e.defineLocale("kk", {
        months: "қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),
        monthsShort: "қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),
        weekdays: "жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),
        weekdaysShort: "жек_дүй_сей_сәр_бей_жұм_сен".split("_"),
        weekdaysMin: "жк_дй_сй_ср_бй_жм_сн".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Бүгін сағат] LT",
          nextDay: "[Ертең сағат] LT",
          nextWeek: "dddd [сағат] LT",
          lastDay: "[Кеше сағат] LT",
          lastWeek: "[Өткен аптаның] dddd [сағат] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s ішінде",
          past: "%s бұрын",
          s: "бірнеше секунд",
          m: "бір минут",
          mm: "%d минут",
          h: "бір сағат",
          hh: "%d сағат",
          d: "бір күн",
          dd: "%d күн",
          M: "бір ай",
          MM: "%d ай",
          y: "бір жыл",
          yy: "%d жыл"
        },
        ordinalParse: /\d{1,2}-(ші|шы)/,
        ordinal: function(e) {
          var n = e % 10,
            r = e >= 100 ? 100 : null;
          return e + (t[e] || t[n] || t[r]);
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("km", {
        months: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        monthsShort: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysShort: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysMin: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[ថ្ងៃនេះ ម៉ោង] LT",
          nextDay: "[ស្អែក ម៉ោង] LT",
          nextWeek: "dddd [ម៉ោង] LT",
          lastDay: "[ម្សិលមិញ ម៉ោង] LT",
          lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%sទៀត",
          past: "%sមុន",
          s: "ប៉ុន្មានវិនាទី",
          m: "មួយនាទី",
          mm: "%d នាទី",
          h: "មួយម៉ោង",
          hh: "%d ម៉ោង",
          d: "មួយថ្ងៃ",
          dd: "%d ថ្ងៃ",
          M: "មួយខែ",
          MM: "%d ខែ",
          y: "មួយឆ្នាំ",
          yy: "%d ឆ្នាំ"
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ko", {
        months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),
        weekdaysShort: "일_월_화_수_목_금_토".split("_"),
        weekdaysMin: "일_월_화_수_목_금_토".split("_"),
        longDateFormat: {
          LT: "A h시 m분",
          LTS: "A h시 m분 s초",
          L: "YYYY.MM.DD",
          LL: "YYYY년 MMMM D일",
          LLL: "YYYY년 MMMM D일 A h시 m분",
          LLLL: "YYYY년 MMMM D일 dddd A h시 m분"
        },
        calendar: {
          sameDay: "오늘 LT",
          nextDay: "내일 LT",
          nextWeek: "dddd LT",
          lastDay: "어제 LT",
          lastWeek: "지난주 dddd LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s 후",
          past: "%s 전",
          s: "몇 초",
          ss: "%d초",
          m: "일분",
          mm: "%d분",
          h: "한 시간",
          hh: "%d시간",
          d: "하루",
          dd: "%d일",
          M: "한 달",
          MM: "%d달",
          y: "일 년",
          yy: "%d년"
        },
        ordinalParse: /\d{1,2}일/,
        ordinal: "%d일",
        meridiemParse: /오전|오후/,
        isPM: function(e) {
          return "오후" === e;
        },
        meridiem: function(e, t, n) {
          return e < 12 ? "오전" : "오후";
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
        0: "-чү",
        1: "-чи",
        2: "-чи",
        3: "-чү",
        4: "-чү",
        5: "-чи",
        6: "-чы",
        7: "-чи",
        8: "-чи",
        9: "-чу",
        10: "-чу",
        20: "-чы",
        30: "-чу",
        40: "-чы",
        50: "-чү",
        60: "-чы",
        70: "-чи",
        80: "-чи",
        90: "-чу",
        100: "-чү"
      };
      e.defineLocale("ky", {
        months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
        monthsShort: "янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),
        weekdays: "Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),
        weekdaysShort: "Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),
        weekdaysMin: "Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Бүгүн саат] LT",
          nextDay: "[Эртең саат] LT",
          nextWeek: "dddd [саат] LT",
          lastDay: "[Кече саат] LT",
          lastWeek: "[Өткен аптанын] dddd [күнү] [саат] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s ичинде",
          past: "%s мурун",
          s: "бирнече секунд",
          m: "бир мүнөт",
          mm: "%d мүнөт",
          h: "бир саат",
          hh: "%d саат",
          d: "бир күн",
          dd: "%d күн",
          M: "бир ай",
          MM: "%d ай",
          y: "бир жыл",
          yy: "%d жыл"
        },
        ordinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
        ordinal: function(e) {
          var n = e % 10,
            r = e >= 100 ? 100 : null;
          return e + (t[e] || t[n] || t[r]);
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n, r) {
        var o = {
          m: ["eng Minutt", "enger Minutt"],
          h: ["eng Stonn", "enger Stonn"],
          d: ["een Dag", "engem Dag"],
          M: ["ee Mount", "engem Mount"],
          y: ["ee Joer", "engem Joer"]
        };
        return t ? o[n][0] : o[n][1];
      }

      function n(e) {
        return o(e.substr(0, e.indexOf(" "))) ? "a " + e : "an " + e;
      }

      function r(e) {
        return o(e.substr(0, e.indexOf(" "))) ? "viru " + e : "virun " + e;
      }

      function o(e) {
        if (e = parseInt(e, 10), isNaN(e)) return !1;
        if (e < 0) return !0;
        if (e < 10) return 4 <= e && e <= 7;
        if (e < 100) {
          var t = e % 10,
            n = e / 10;
          return o(0 === t ? n : t);
        }
        if (e < 1e4) {
          for (; e >= 10;) e /= 10;
          return o(e);
        }
        return e /= 1e3, o(e);
      }
      e.defineLocale("lb", {
        months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        monthsParseExact: !0,
        weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
        weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm [Auer]",
          LTS: "H:mm:ss [Auer]",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY H:mm [Auer]",
          LLLL: "dddd, D. MMMM YYYY H:mm [Auer]"
        },
        calendar: {
          sameDay: "[Haut um] LT",
          sameElse: "L",
          nextDay: "[Muer um] LT",
          nextWeek: "dddd [um] LT",
          lastDay: "[Gëschter um] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 2:
              case 4:
                return "[Leschten] dddd [um] LT";
              default:
                return "[Leschte] dddd [um] LT";
            }
          }
        },
        relativeTime: {
          future: n,
          past: r,
          s: "e puer Sekonnen",
          m: t,
          mm: "%d Minutten",
          h: t,
          hh: "%d Stonnen",
          d: t,
          dd: "%d Deeg",
          M: t,
          MM: "%d Méint",
          y: t,
          yy: "%d Joer"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("lo", {
        months: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),
        monthsShort: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),
        weekdays: "ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
        weekdaysShort: "ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
        weekdaysMin: "ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "ວັນdddd D MMMM YYYY HH:mm"
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function(e) {
          return "ຕອນແລງ" === e;
        },
        meridiem: function(e, t, n) {
          return e < 12 ? "ຕອນເຊົ້າ" : "ຕອນແລງ";
        },
        calendar: {
          sameDay: "[ມື້ນີ້ເວລາ] LT",
          nextDay: "[ມື້ອື່ນເວລາ] LT",
          nextWeek: "[ວັນ]dddd[ໜ້າເວລາ] LT",
          lastDay: "[ມື້ວານນີ້ເວລາ] LT",
          lastWeek: "[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "ອີກ %s",
          past: "%sຜ່ານມາ",
          s: "ບໍ່ເທົ່າໃດວິນາທີ",
          m: "1 ນາທີ",
          mm: "%d ນາທີ",
          h: "1 ຊົ່ວໂມງ",
          hh: "%d ຊົ່ວໂມງ",
          d: "1 ມື້",
          dd: "%d ມື້",
          M: "1 ເດືອນ",
          MM: "%d ເດືອນ",
          y: "1 ປີ",
          yy: "%d ປີ"
        },
        ordinalParse: /(ທີ່)\d{1,2}/,
        ordinal: function(e) {
          return "ທີ່" + e;
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n, r) {
        return t ? "kelios sekundės" : r ? "kelių sekundžių" : "kelias sekundes";
      }

      function n(e, t, n, r) {
        return t ? o(n)[0] : r ? o(n)[1] : o(n)[2];
      }

      function r(e) {
        return e % 10 == 0 || e > 10 && e < 20;
      }

      function o(e) {
        return a[e].split("_");
      }

      function i(e, t, i, a) {
        var s = e + " ";
        return 1 === e ? s + n(e, t, i[0], a) : t ? s + (r(e) ? o(i)[1] : o(i)[0]) : a ? s + o(i)[1] : s + (r(e) ? o(i)[1] : o(i)[2]);
      }
      var a = {
        m: "minutė_minutės_minutę",
        mm: "minutės_minučių_minutes",
        h: "valanda_valandos_valandą",
        hh: "valandos_valandų_valandas",
        d: "diena_dienos_dieną",
        dd: "dienos_dienų_dienas",
        M: "mėnuo_mėnesio_mėnesį",
        MM: "mėnesiai_mėnesių_mėnesius",
        y: "metai_metų_metus",
        yy: "metai_metų_metus"
      };
      e.defineLocale("lt", {
        months: {
          format: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),
          standalone: "sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),
          isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
        },
        monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
        weekdays: {
          format: "sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),
          standalone: "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),
          isFormat: /dddd HH:mm/
        },
        weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
        weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "YYYY-MM-DD",
          LL: "YYYY [m.] MMMM D [d.]",
          LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
          LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",
          l: "YYYY-MM-DD",
          ll: "YYYY [m.] MMMM D [d.]",
          lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
          llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"
        },
        calendar: {
          sameDay: "[Šiandien] LT",
          nextDay: "[Rytoj] LT",
          nextWeek: "dddd LT",
          lastDay: "[Vakar] LT",
          lastWeek: "[Praėjusį] dddd LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "po %s",
          past: "prieš %s",
          s: t,
          m: n,
          mm: i,
          h: n,
          hh: i,
          d: n,
          dd: i,
          M: n,
          MM: i,
          y: n,
          yy: i
        },
        ordinalParse: /\d{1,2}-oji/,
        ordinal: function(e) {
          return e + "-oji";
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n) {
        return n ? t % 10 == 1 && t % 100 != 11 ? e[2] : e[3] : t % 10 == 1 && t % 100 != 11 ? e[0] : e[1];
      }

      function n(e, n, r) {
        return e + " " + t(i[r], e, n);
      }

      function r(e, n, r) {
        return t(i[r], e, n);
      }

      function o(e, t) {
        return t ? "dažas sekundes" : "dažām sekundēm";
      }
      var i = {
        m: "minūtes_minūtēm_minūte_minūtes".split("_"),
        mm: "minūtes_minūtēm_minūte_minūtes".split("_"),
        h: "stundas_stundām_stunda_stundas".split("_"),
        hh: "stundas_stundām_stunda_stundas".split("_"),
        d: "dienas_dienām_diena_dienas".split("_"),
        dd: "dienas_dienām_diena_dienas".split("_"),
        M: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
        MM: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
        y: "gada_gadiem_gads_gadi".split("_"),
        yy: "gada_gadiem_gads_gadi".split("_")
      };
      e.defineLocale("lv", {
        months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
        monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),
        weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),
        weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"),
        weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY.",
          LL: "YYYY. [gada] D. MMMM",
          LLL: "YYYY. [gada] D. MMMM, HH:mm",
          LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm"
        },
        calendar: {
          sameDay: "[Šodien pulksten] LT",
          nextDay: "[Rīt pulksten] LT",
          nextWeek: "dddd [pulksten] LT",
          lastDay: "[Vakar pulksten] LT",
          lastWeek: "[Pagājušā] dddd [pulksten] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "pēc %s",
          past: "pirms %s",
          s: o,
          m: r,
          mm: n,
          h: r,
          hh: n,
          d: r,
          dd: n,
          M: r,
          MM: n,
          y: r,
          yy: n
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
        words: {
          m: ["jedan minut", "jednog minuta"],
          mm: ["minut", "minuta", "minuta"],
          h: ["jedan sat", "jednog sata"],
          hh: ["sat", "sata", "sati"],
          dd: ["dan", "dana", "dana"],
          MM: ["mjesec", "mjeseca", "mjeseci"],
          yy: ["godina", "godine", "godina"]
        },
        correctGrammaticalCase: function(e, t) {
          return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2];
        },
        translate: function(e, n, r) {
          var o = t.words[r];
          return 1 === r.length ? n ? o[0] : o[1] : e + " " + t.correctGrammaticalCase(e, o);
        }
      };
      e.defineLocale("me", {
        months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
        monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
        monthsParseExact: !0,
        weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY H:mm",
          LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[danas u] LT",
          nextDay: "[sjutra u] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[u] [nedjelju] [u] LT";
              case 3:
                return "[u] [srijedu] [u] LT";
              case 6:
                return "[u] [subotu] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[u] dddd [u] LT";
            }
          },
          lastDay: "[juče u] LT",
          lastWeek: function() {
            return ["[prošle] [nedjelje] [u] LT", "[prošlog] [ponedjeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srijede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"][this.day()];
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "prije %s",
          s: "nekoliko sekundi",
          m: t.translate,
          mm: t.translate,
          h: t.translate,
          hh: t.translate,
          d: "dan",
          dd: t.translate,
          M: "mjesec",
          MM: t.translate,
          y: "godinu",
          yy: t.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("mi", {
        months: "Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),
        monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: "Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),
        weekdaysShort: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
        weekdaysMin: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY [i] HH:mm",
          LLLL: "dddd, D MMMM YYYY [i] HH:mm"
        },
        calendar: {
          sameDay: "[i teie mahana, i] LT",
          nextDay: "[apopo i] LT",
          nextWeek: "dddd [i] LT",
          lastDay: "[inanahi i] LT",
          lastWeek: "dddd [whakamutunga i] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "i roto i %s",
          past: "%s i mua",
          s: "te hēkona ruarua",
          m: "he meneti",
          mm: "%d meneti",
          h: "te haora",
          hh: "%d haora",
          d: "he ra",
          dd: "%d ra",
          M: "he marama",
          MM: "%d marama",
          y: "he tau",
          yy: "%d tau"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("mk", {
        months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),
        monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),
        weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),
        weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"),
        weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"),
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "D.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY H:mm",
          LLLL: "dddd, D MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[Денес во] LT",
          nextDay: "[Утре во] LT",
          nextWeek: "[Во] dddd [во] LT",
          lastDay: "[Вчера во] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
              case 6:
                return "[Изминатата] dddd [во] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[Изминатиот] dddd [во] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "после %s",
          past: "пред %s",
          s: "неколку секунди",
          m: "минута",
          mm: "%d минути",
          h: "час",
          hh: "%d часа",
          d: "ден",
          dd: "%d дена",
          M: "месец",
          MM: "%d месеци",
          y: "година",
          yy: "%d години"
        },
        ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal: function(e) {
          var t = e % 10,
            n = e % 100;
          return 0 === e ? e + "-ев" : 0 === n ? e + "-ен" : n > 10 && n < 20 ? e + "-ти" : 1 === t ? e + "-ви" : 2 === t ? e + "-ри" : 7 === t || 8 === t ? e + "-ми" : e + "-ти";
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ml", {
        months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),
        monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),
        monthsParseExact: !0,
        weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),
        weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),
        weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),
        longDateFormat: {
          LT: "A h:mm -നു",
          LTS: "A h:mm:ss -നു",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, A h:mm -നു",
          LLLL: "dddd, D MMMM YYYY, A h:mm -നു"
        },
        calendar: {
          sameDay: "[ഇന്ന്] LT",
          nextDay: "[നാളെ] LT",
          nextWeek: "dddd, LT",
          lastDay: "[ഇന്നലെ] LT",
          lastWeek: "[കഴിഞ്ഞ] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s കഴിഞ്ഞ്",
          past: "%s മുൻപ്",
          s: "അൽപ നിമിഷങ്ങൾ",
          m: "ഒരു മിനിറ്റ്",
          mm: "%d മിനിറ്റ്",
          h: "ഒരു മണിക്കൂർ",
          hh: "%d മണിക്കൂർ",
          d: "ഒരു ദിവസം",
          dd: "%d ദിവസം",
          M: "ഒരു മാസം",
          MM: "%d മാസം",
          y: "ഒരു വർഷം",
          yy: "%d വർഷം"
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "രാത്രി" === t && e >= 4 || "ഉച്ച കഴിഞ്ഞ്" === t || "വൈകുന്നേരം" === t ? e + 12 : e;
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "രാത്രി" : e < 12 ? "രാവിലെ" : e < 17 ? "ഉച്ച കഴിഞ്ഞ്" : e < 20 ? "വൈകുന്നേരം" : "രാത്രി";
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n, r) {
        var o = "";
        if (t) switch (n) {
          case "s":
            o = "काही सेकंद";
            break;
          case "m":
            o = "एक मिनिट";
            break;
          case "mm":
            o = "%d मिनिटे";
            break;
          case "h":
            o = "एक तास";
            break;
          case "hh":
            o = "%d तास";
            break;
          case "d":
            o = "एक दिवस";
            break;
          case "dd":
            o = "%d दिवस";
            break;
          case "M":
            o = "एक महिना";
            break;
          case "MM":
            o = "%d महिने";
            break;
          case "y":
            o = "एक वर्ष";
            break;
          case "yy":
            o = "%d वर्षे";
        } else switch (n) {
          case "s":
            o = "काही सेकंदां";
            break;
          case "m":
            o = "एका मिनिटा";
            break;
          case "mm":
            o = "%d मिनिटां";
            break;
          case "h":
            o = "एका तासा";
            break;
          case "hh":
            o = "%d तासां";
            break;
          case "d":
            o = "एका दिवसा";
            break;
          case "dd":
            o = "%d दिवसां";
            break;
          case "M":
            o = "एका महिन्या";
            break;
          case "MM":
            o = "%d महिन्यां";
            break;
          case "y":
            o = "एका वर्षा";
            break;
          case "yy":
            o = "%d वर्षां";
        }
        return o.replace(/%d/i, e);
      }
      var n = {
          1: "१",
          2: "२",
          3: "३",
          4: "४",
          5: "५",
          6: "६",
          7: "७",
          8: "८",
          9: "९",
          0: "०"
        },
        r = {
          "१": "1",
          "२": "2",
          "३": "3",
          "४": "4",
          "५": "5",
          "६": "6",
          "७": "7",
          "८": "8",
          "९": "9",
          "०": "0"
        };
      e.defineLocale("mr", {
        months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),
        monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),
        monthsParseExact: !0,
        weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
        weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),
        weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
        longDateFormat: {
          LT: "A h:mm वाजता",
          LTS: "A h:mm:ss वाजता",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, A h:mm वाजता",
          LLLL: "dddd, D MMMM YYYY, A h:mm वाजता"
        },
        calendar: {
          sameDay: "[आज] LT",
          nextDay: "[उद्या] LT",
          nextWeek: "dddd, LT",
          lastDay: "[काल] LT",
          lastWeek: "[मागील] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%sमध्ये",
          past: "%sपूर्वी",
          s: t,
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t
        },
        preparse: function(e) {
          return e.replace(/[१२३४५६७८९०]/g, function(e) {
            return r[e];
          });
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return n[e];
          });
        },
        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "रात्री" === t ? e < 4 ? e : e + 12 : "सकाळी" === t ? e : "दुपारी" === t ? e >= 10 ? e : e + 12 : "सायंकाळी" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "रात्री" : e < 10 ? "सकाळी" : e < 17 ? "दुपारी" : e < 20 ? "सायंकाळी" : "रात्री";
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ms-my", {
        months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
        monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
        weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
        weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
        weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat: {
          LT: "HH.mm",
          LTS: "HH.mm.ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY [pukul] HH.mm",
          LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "pagi" === t ? e : "tengahari" === t ? e >= 11 ? e : e + 12 : "petang" === t || "malam" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam";
        },
        calendar: {
          sameDay: "[Hari ini pukul] LT",
          nextDay: "[Esok pukul] LT",
          nextWeek: "dddd [pukul] LT",
          lastDay: "[Kelmarin pukul] LT",
          lastWeek: "dddd [lepas pukul] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dalam %s",
          past: "%s yang lepas",
          s: "beberapa saat",
          m: "seminit",
          mm: "%d minit",
          h: "sejam",
          hh: "%d jam",
          d: "sehari",
          dd: "%d hari",
          M: "sebulan",
          MM: "%d bulan",
          y: "setahun",
          yy: "%d tahun"
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ms", {
        months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
        monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
        weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
        weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
        weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat: {
          LT: "HH.mm",
          LTS: "HH.mm.ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY [pukul] HH.mm",
          LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "pagi" === t ? e : "tengahari" === t ? e >= 11 ? e : e + 12 : "petang" === t || "malam" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam";
        },
        calendar: {
          sameDay: "[Hari ini pukul] LT",
          nextDay: "[Esok pukul] LT",
          nextWeek: "dddd [pukul] LT",
          lastDay: "[Kelmarin pukul] LT",
          lastWeek: "dddd [lepas pukul] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dalam %s",
          past: "%s yang lepas",
          s: "beberapa saat",
          m: "seminit",
          mm: "%d minit",
          h: "sejam",
          hh: "%d jam",
          d: "sehari",
          dd: "%d hari",
          M: "sebulan",
          MM: "%d bulan",
          y: "setahun",
          yy: "%d tahun"
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "၁",
          2: "၂",
          3: "၃",
          4: "၄",
          5: "၅",
          6: "၆",
          7: "၇",
          8: "၈",
          9: "၉",
          0: "၀"
        },
        n = {
          "၁": "1",
          "၂": "2",
          "၃": "3",
          "၄": "4",
          "၅": "5",
          "၆": "6",
          "၇": "7",
          "၈": "8",
          "၉": "9",
          "၀": "0"
        };
      e.defineLocale("my", {
        months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),
        monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),
        weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),
        weekdaysShort: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
        weekdaysMin: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[ယနေ.] LT [မှာ]",
          nextDay: "[မနက်ဖြန်] LT [မှာ]",
          nextWeek: "dddd LT [မှာ]",
          lastDay: "[မနေ.က] LT [မှာ]",
          lastWeek: "[ပြီးခဲ့သော] dddd LT [မှာ]",
          sameElse: "L"
        },
        relativeTime: {
          future: "လာမည့် %s မှာ",
          past: "လွန်ခဲ့သော %s က",
          s: "စက္ကန်.အနည်းငယ်",
          m: "တစ်မိနစ်",
          mm: "%d မိနစ်",
          h: "တစ်နာရီ",
          hh: "%d နာရီ",
          d: "တစ်ရက်",
          dd: "%d ရက်",
          M: "တစ်လ",
          MM: "%d လ",
          y: "တစ်နှစ်",
          yy: "%d နှစ်"
        },
        preparse: function(e) {
          return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function(e) {
            return n[e];
          });
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          });
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("nb", {
        months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort: "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
        monthsParseExact: !0,
        weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"),
        weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY [kl.] HH:mm",
          LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
        },
        calendar: {
          sameDay: "[i dag kl.] LT",
          nextDay: "[i morgen kl.] LT",
          nextWeek: "dddd [kl.] LT",
          lastDay: "[i går kl.] LT",
          lastWeek: "[forrige] dddd [kl.] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "om %s",
          past: "%s siden",
          s: "noen sekunder",
          m: "ett minutt",
          mm: "%d minutter",
          h: "en time",
          hh: "%d timer",
          d: "en dag",
          dd: "%d dager",
          M: "en måned",
          MM: "%d måneder",
          y: "ett år",
          yy: "%d år"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "१",
          2: "२",
          3: "३",
          4: "४",
          5: "५",
          6: "६",
          7: "७",
          8: "८",
          9: "९",
          0: "०"
        },
        n = {
          "१": "1",
          "२": "2",
          "३": "3",
          "४": "4",
          "५": "5",
          "६": "6",
          "७": "7",
          "८": "8",
          "९": "9",
          "०": "0"
        };
      e.defineLocale("ne", {
        months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),
        monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),
        monthsParseExact: !0,
        weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),
        weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),
        weekdaysMin: "आ._सो._मं._बु._बि._शु._श.".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "Aको h:mm बजे",
          LTS: "Aको h:mm:ss बजे",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, Aको h:mm बजे",
          LLLL: "dddd, D MMMM YYYY, Aको h:mm बजे"
        },
        preparse: function(e) {
          return e.replace(/[१२३४५६७८९०]/g, function(e) {
            return n[e];
          });
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          });
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "राति" === t ? e < 4 ? e : e + 12 : "बिहान" === t ? e : "दिउँसो" === t ? e >= 10 ? e : e + 12 : "साँझ" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          return e < 3 ? "राति" : e < 12 ? "बिहान" : e < 16 ? "दिउँसो" : e < 20 ? "साँझ" : "राति";
        },
        calendar: {
          sameDay: "[आज] LT",
          nextDay: "[भोलि] LT",
          nextWeek: "[आउँदो] dddd[,] LT",
          lastDay: "[हिजो] LT",
          lastWeek: "[गएको] dddd[,] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%sमा",
          past: "%s अगाडि",
          s: "केही क्षण",
          m: "एक मिनेट",
          mm: "%d मिनेट",
          h: "एक घण्टा",
          hh: "%d घण्टा",
          d: "एक दिन",
          dd: "%d दिन",
          M: "एक महिना",
          MM: "%d महिना",
          y: "एक बर्ष",
          yy: "%d बर्ष"
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
        n = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),
        r = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
        o = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
      e.defineLocale("nl-be", {
        months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
        monthsShort: function(e, r) {
          return /-MMM-/.test(r) ? n[e.month()] : t[e.month()];
        },
        monthsRegex: o,
        monthsShortRegex: o,
        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
        monthsParse: r,
        longMonthsParse: r,
        shortMonthsParse: r,
        weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
        weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
        weekdaysMin: "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[vandaag om] LT",
          nextDay: "[morgen om] LT",
          nextWeek: "dddd [om] LT",
          lastDay: "[gisteren om] LT",
          lastWeek: "[afgelopen] dddd [om] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "over %s",
          past: "%s geleden",
          s: "een paar seconden",
          m: "één minuut",
          mm: "%d minuten",
          h: "één uur",
          hh: "%d uur",
          d: "één dag",
          dd: "%d dagen",
          M: "één maand",
          MM: "%d maanden",
          y: "één jaar",
          yy: "%d jaar"
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(e) {
          return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
        n = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),
        r = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
        o = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
      e.defineLocale("nl", {
        months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
        monthsShort: function(e, r) {
          return /-MMM-/.test(r) ? n[e.month()] : t[e.month()];
        },
        monthsRegex: o,
        monthsShortRegex: o,
        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
        monthsParse: r,
        longMonthsParse: r,
        shortMonthsParse: r,
        weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
        weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
        weekdaysMin: "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD-MM-YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[vandaag om] LT",
          nextDay: "[morgen om] LT",
          nextWeek: "dddd [om] LT",
          lastDay: "[gisteren om] LT",
          lastWeek: "[afgelopen] dddd [om] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "over %s",
          past: "%s geleden",
          s: "een paar seconden",
          m: "één minuut",
          mm: "%d minuten",
          h: "één uur",
          hh: "%d uur",
          d: "één dag",
          dd: "%d dagen",
          M: "één maand",
          MM: "%d maanden",
          y: "één jaar",
          yy: "%d jaar"
        },
        ordinalParse: /\d{1,2}(ste|de)/,
        ordinal: function(e) {
          return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("nn", {
        months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
        weekdaysShort: "sun_mån_tys_ons_tor_fre_lau".split("_"),
        weekdaysMin: "su_må_ty_on_to_fr_lø".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY [kl.] H:mm",
          LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
        },
        calendar: {
          sameDay: "[I dag klokka] LT",
          nextDay: "[I morgon klokka] LT",
          nextWeek: "dddd [klokka] LT",
          lastDay: "[I går klokka] LT",
          lastWeek: "[Føregåande] dddd [klokka] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "om %s",
          past: "%s sidan",
          s: "nokre sekund",
          m: "eit minutt",
          mm: "%d minutt",
          h: "ein time",
          hh: "%d timar",
          d: "ein dag",
          dd: "%d dagar",
          M: "ein månad",
          MM: "%d månader",
          y: "eit år",
          yy: "%d år"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "੧",
          2: "੨",
          3: "੩",
          4: "੪",
          5: "੫",
          6: "੬",
          7: "੭",
          8: "੮",
          9: "੯",
          0: "੦"
        },
        n = {
          "੧": "1",
          "੨": "2",
          "੩": "3",
          "੪": "4",
          "੫": "5",
          "੬": "6",
          "੭": "7",
          "੮": "8",
          "੯": "9",
          "੦": "0"
        };
      e.defineLocale("pa-in", {
        months: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
        monthsShort: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
        weekdays: "ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),
        weekdaysShort: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
        weekdaysMin: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
        longDateFormat: {
          LT: "A h:mm ਵਜੇ",
          LTS: "A h:mm:ss ਵਜੇ",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, A h:mm ਵਜੇ",
          LLLL: "dddd, D MMMM YYYY, A h:mm ਵਜੇ"
        },
        calendar: {
          sameDay: "[ਅਜ] LT",
          nextDay: "[ਕਲ] LT",
          nextWeek: "dddd, LT",
          lastDay: "[ਕਲ] LT",
          lastWeek: "[ਪਿਛਲੇ] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s ਵਿੱਚ",
          past: "%s ਪਿਛਲੇ",
          s: "ਕੁਝ ਸਕਿੰਟ",
          m: "ਇਕ ਮਿੰਟ",
          mm: "%d ਮਿੰਟ",
          h: "ਇੱਕ ਘੰਟਾ",
          hh: "%d ਘੰਟੇ",
          d: "ਇੱਕ ਦਿਨ",
          dd: "%d ਦਿਨ",
          M: "ਇੱਕ ਮਹੀਨਾ",
          MM: "%d ਮਹੀਨੇ",
          y: "ਇੱਕ ਸਾਲ",
          yy: "%d ਸਾਲ"
        },
        preparse: function(e) {
          return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function(e) {
            return n[e];
          });
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          });
        },
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "ਰਾਤ" === t ? e < 4 ? e : e + 12 : "ਸਵੇਰ" === t ? e : "ਦੁਪਹਿਰ" === t ? e >= 10 ? e : e + 12 : "ਸ਼ਾਮ" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "ਰਾਤ" : e < 10 ? "ਸਵੇਰ" : e < 17 ? "ਦੁਪਹਿਰ" : e < 20 ? "ਸ਼ਾਮ" : "ਰਾਤ";
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e) {
        return e % 10 < 5 && e % 10 > 1 && ~~(e / 10) % 10 != 1;
      }

      function n(e, n, r) {
        var o = e + " ";
        switch (r) {
          case "m":
            return n ? "minuta" : "minutę";
          case "mm":
            return o + (t(e) ? "minuty" : "minut");
          case "h":
            return n ? "godzina" : "godzinę";
          case "hh":
            return o + (t(e) ? "godziny" : "godzin");
          case "MM":
            return o + (t(e) ? "miesiące" : "miesięcy");
          case "yy":
            return o + (t(e) ? "lata" : "lat");
        }
      }
      var r = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),
        o = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");
      e.defineLocale("pl", {
        months: function(e, t) {
          return "" === t ? "(" + o[e.month()] + "|" + r[e.month()] + ")" : /D MMMM/.test(t) ? o[e.month()] : r[e.month()];
        },
        monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),
        weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),
        weekdaysShort: "ndz_pon_wt_śr_czw_pt_sob".split("_"),
        weekdaysMin: "Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Dziś o] LT",
          nextDay: "[Jutro o] LT",
          nextWeek: "[W] dddd [o] LT",
          lastDay: "[Wczoraj o] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[W zeszłą niedzielę o] LT";
              case 3:
                return "[W zeszłą środę o] LT";
              case 6:
                return "[W zeszłą sobotę o] LT";
              default:
                return "[W zeszły] dddd [o] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "%s temu",
          s: "kilka sekund",
          m: n,
          mm: n,
          h: n,
          hh: n,
          d: "1 dzień",
          dd: "%d dni",
          M: "miesiąc",
          MM: n,
          y: "rok",
          yy: n
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("pt-br", {
        months: "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),
        monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
        weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),
        weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
        weekdaysMin: "Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D [de] MMMM [de] YYYY",
          LLL: "D [de] MMMM [de] YYYY [às] HH:mm",
          LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm"
        },
        calendar: {
          sameDay: "[Hoje às] LT",
          nextDay: "[Amanhã às] LT",
          nextWeek: "dddd [às] LT",
          lastDay: "[Ontem às] LT",
          lastWeek: function() {
            return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT";
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "em %s",
          past: "%s atrás",
          s: "poucos segundos",
          m: "um minuto",
          mm: "%d minutos",
          h: "uma hora",
          hh: "%d horas",
          d: "um dia",
          dd: "%d dias",
          M: "um mês",
          MM: "%d meses",
          y: "um ano",
          yy: "%d anos"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº"
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("pt", {
        months: "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),
        monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
        weekdays: "Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"),
        weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
        weekdaysMin: "Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D [de] MMMM [de] YYYY",
          LLL: "D [de] MMMM [de] YYYY HH:mm",
          LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Hoje às] LT",
          nextDay: "[Amanhã às] LT",
          nextWeek: "dddd [às] LT",
          lastDay: "[Ontem às] LT",
          lastWeek: function() {
            return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT";
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "em %s",
          past: "há %s",
          s: "segundos",
          m: "um minuto",
          mm: "%d minutos",
          h: "uma hora",
          hh: "%d horas",
          d: "um dia",
          dd: "%d dias",
          M: "um mês",
          MM: "%d meses",
          y: "um ano",
          yy: "%d anos"
        },
        ordinalParse: /\d{1,2}º/,
        ordinal: "%dº",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n) {
        var r = {
            mm: "minute",
            hh: "ore",
            dd: "zile",
            MM: "luni",
            yy: "ani"
          },
          o = " ";
        return (e % 100 >= 20 || e >= 100 && e % 100 == 0) && (o = " de "), e + o + r[n];
      }
      e.defineLocale("ro", {
        months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
        monthsShort: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
        monthsParseExact: !0,
        weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),
        weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
        weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY H:mm",
          LLLL: "dddd, D MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[azi la] LT",
          nextDay: "[mâine la] LT",
          nextWeek: "dddd [la] LT",
          lastDay: "[ieri la] LT",
          lastWeek: "[fosta] dddd [la] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "peste %s",
          past: "%s în urmă",
          s: "câteva secunde",
          m: "un minut",
          mm: t,
          h: "o oră",
          hh: t,
          d: "o zi",
          dd: t,
          M: "o lună",
          MM: t,
          y: "un an",
          yy: t
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t) {
        var n = e.split("_");
        return t % 10 == 1 && t % 100 != 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2];
      }

      function n(e, n, r) {
        var o = {
          mm: n ? "минута_минуты_минут" : "минуту_минуты_минут",
          hh: "час_часа_часов",
          dd: "день_дня_дней",
          MM: "месяц_месяца_месяцев",
          yy: "год_года_лет"
        };
        return "m" === r ? n ? "минута" : "минуту" : e + " " + t(o[r], +e);
      }
      var r = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];
      e.defineLocale("ru", {
        months: {
          format: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),
          standalone: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")
        },
        monthsShort: {
          format: "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),
          standalone: "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")
        },
        weekdays: {
          standalone: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),
          format: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),
          isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
        },
        weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"),
        monthsParse: r,
        longMonthsParse: r,
        shortMonthsParse: r,
        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY г.",
          LLL: "D MMMM YYYY г., HH:mm",
          LLLL: "dddd, D MMMM YYYY г., HH:mm"
        },
        calendar: {
          sameDay: "[Сегодня в] LT",
          nextDay: "[Завтра в] LT",
          lastDay: "[Вчера в] LT",
          nextWeek: function(e) {
            if (e.week() === this.week()) return 2 === this.day() ? "[Во] dddd [в] LT" : "[В] dddd [в] LT";
            switch (this.day()) {
              case 0:
                return "[В следующее] dddd [в] LT";
              case 1:
              case 2:
              case 4:
                return "[В следующий] dddd [в] LT";
              case 3:
              case 5:
              case 6:
                return "[В следующую] dddd [в] LT";
            }
          },
          lastWeek: function(e) {
            if (e.week() === this.week()) return 2 === this.day() ? "[Во] dddd [в] LT" : "[В] dddd [в] LT";
            switch (this.day()) {
              case 0:
                return "[В прошлое] dddd [в] LT";
              case 1:
              case 2:
              case 4:
                return "[В прошлый] dddd [в] LT";
              case 3:
              case 5:
              case 6:
                return "[В прошлую] dddd [в] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "через %s",
          past: "%s назад",
          s: "несколько секунд",
          m: n,
          mm: n,
          h: "час",
          hh: n,
          d: "день",
          dd: n,
          M: "месяц",
          MM: n,
          y: "год",
          yy: n
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM: function(e) {
          return /^(дня|вечера)$/.test(e);
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "ночи" : e < 12 ? "утра" : e < 17 ? "дня" : "вечера";
        },
        ordinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function(e, t) {
          switch (t) {
            case "M":
            case "d":
            case "DDD":
              return e + "-й";
            case "D":
              return e + "-го";
            case "w":
            case "W":
              return e + "-я";
            default:
              return e;
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("se", {
        months: "ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),
        monthsShort: "ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),
        weekdays: "sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),
        weekdaysShort: "sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),
        weekdaysMin: "s_v_m_g_d_b_L".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "MMMM D. [b.] YYYY",
          LLL: "MMMM D. [b.] YYYY [ti.] HH:mm",
          LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm"
        },
        calendar: {
          sameDay: "[otne ti] LT",
          nextDay: "[ihttin ti] LT",
          nextWeek: "dddd [ti] LT",
          lastDay: "[ikte ti] LT",
          lastWeek: "[ovddit] dddd [ti] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s geažes",
          past: "maŋit %s",
          s: "moadde sekunddat",
          m: "okta minuhta",
          mm: "%d minuhtat",
          h: "okta diimmu",
          hh: "%d diimmut",
          d: "okta beaivi",
          dd: "%d beaivvit",
          M: "okta mánnu",
          MM: "%d mánut",
          y: "okta jahki",
          yy: "%d jagit"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("si", {
        months: "ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),
        monthsShort: "ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),
        weekdays: "ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),
        weekdaysShort: "ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),
        weekdaysMin: "ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "a h:mm",
          LTS: "a h:mm:ss",
          L: "YYYY/MM/DD",
          LL: "YYYY MMMM D",
          LLL: "YYYY MMMM D, a h:mm",
          LLLL: "YYYY MMMM D [වැනි] dddd, a h:mm:ss"
        },
        calendar: {
          sameDay: "[අද] LT[ට]",
          nextDay: "[හෙට] LT[ට]",
          nextWeek: "dddd LT[ට]",
          lastDay: "[ඊයේ] LT[ට]",
          lastWeek: "[පසුගිය] dddd LT[ට]",
          sameElse: "L"
        },
        relativeTime: {
          future: "%sකින්",
          past: "%sකට පෙර",
          s: "තත්පර කිහිපය",
          m: "මිනිත්තුව",
          mm: "මිනිත්තු %d",
          h: "පැය",
          hh: "පැය %d",
          d: "දිනය",
          dd: "දින %d",
          M: "මාසය",
          MM: "මාස %d",
          y: "වසර",
          yy: "වසර %d"
        },
        ordinalParse: /\d{1,2} වැනි/,
        ordinal: function(e) {
          return e + " වැනි";
        },
        meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
        isPM: function(e) {
          return "ප.ව." === e || "පස් වරු" === e;
        },
        meridiem: function(e, t, n) {
          return e > 11 ? n ? "ප.ව." : "පස් වරු" : n ? "පෙ.ව." : "පෙර වරු";
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e) {
        return e > 1 && e < 5;
      }

      function n(e, n, r, o) {
        var i = e + " ";
        switch (r) {
          case "s":
            return n || o ? "pár sekúnd" : "pár sekundami";
          case "m":
            return n ? "minúta" : o ? "minútu" : "minútou";
          case "mm":
            return n || o ? i + (t(e) ? "minúty" : "minút") : i + "minútami";
          case "h":
            return n ? "hodina" : o ? "hodinu" : "hodinou";
          case "hh":
            return n || o ? i + (t(e) ? "hodiny" : "hodín") : i + "hodinami";
          case "d":
            return n || o ? "deň" : "dňom";
          case "dd":
            return n || o ? i + (t(e) ? "dni" : "dní") : i + "dňami";
          case "M":
            return n || o ? "mesiac" : "mesiacom";
          case "MM":
            return n || o ? i + (t(e) ? "mesiace" : "mesiacov") : i + "mesiacmi";
          case "y":
            return n || o ? "rok" : "rokom";
          case "yy":
            return n || o ? i + (t(e) ? "roky" : "rokov") : i + "rokmi";
        }
      }
      var r = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),
        o = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");
      e.defineLocale("sk", {
        months: r,
        monthsShort: o,
        weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),
        weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"),
        weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"),
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY H:mm",
          LLLL: "dddd D. MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[dnes o] LT",
          nextDay: "[zajtra o] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[v nedeľu o] LT";
              case 1:
              case 2:
                return "[v] dddd [o] LT";
              case 3:
                return "[v stredu o] LT";
              case 4:
                return "[vo štvrtok o] LT";
              case 5:
                return "[v piatok o] LT";
              case 6:
                return "[v sobotu o] LT";
            }
          },
          lastDay: "[včera o] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[minulú nedeľu o] LT";
              case 1:
              case 2:
                return "[minulý] dddd [o] LT";
              case 3:
                return "[minulú stredu o] LT";
              case 4:
              case 5:
                return "[minulý] dddd [o] LT";
              case 6:
                return "[minulú sobotu o] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "pred %s",
          s: n,
          m: n,
          mm: n,
          h: n,
          hh: n,
          d: n,
          dd: n,
          M: n,
          MM: n,
          y: n,
          yy: n
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n, r) {
        var o = e + " ";
        switch (n) {
          case "s":
            return t || r ? "nekaj sekund" : "nekaj sekundami";
          case "m":
            return t ? "ena minuta" : "eno minuto";
          case "mm":
            return o += 1 === e ? t ? "minuta" : "minuto" : 2 === e ? t || r ? "minuti" : "minutama" : e < 5 ? t || r ? "minute" : "minutami" : t || r ? "minut" : "minutami";
          case "h":
            return t ? "ena ura" : "eno uro";
          case "hh":
            return o += 1 === e ? t ? "ura" : "uro" : 2 === e ? t || r ? "uri" : "urama" : e < 5 ? t || r ? "ure" : "urami" : t || r ? "ur" : "urami";
          case "d":
            return t || r ? "en dan" : "enim dnem";
          case "dd":
            return o += 1 === e ? t || r ? "dan" : "dnem" : 2 === e ? t || r ? "dni" : "dnevoma" : t || r ? "dni" : "dnevi";
          case "M":
            return t || r ? "en mesec" : "enim mesecem";
          case "MM":
            return o += 1 === e ? t || r ? "mesec" : "mesecem" : 2 === e ? t || r ? "meseca" : "mesecema" : e < 5 ? t || r ? "mesece" : "meseci" : t || r ? "mesecev" : "meseci";
          case "y":
            return t || r ? "eno leto" : "enim letom";
          case "yy":
            return o += 1 === e ? t || r ? "leto" : "letom" : 2 === e ? t || r ? "leti" : "letoma" : e < 5 ? t || r ? "leta" : "leti" : t || r ? "let" : "leti";
        }
      }
      e.defineLocale("sl", {
        months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
        monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
        monthsParseExact: !0,
        weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),
        weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"),
        weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY H:mm",
          LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[danes ob] LT",
          nextDay: "[jutri ob] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[v] [nedeljo] [ob] LT";
              case 3:
                return "[v] [sredo] [ob] LT";
              case 6:
                return "[v] [soboto] [ob] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[v] dddd [ob] LT";
            }
          },
          lastDay: "[včeraj ob] LT",
          lastWeek: function() {
            switch (this.day()) {
              case 0:
                return "[prejšnjo] [nedeljo] [ob] LT";
              case 3:
                return "[prejšnjo] [sredo] [ob] LT";
              case 6:
                return "[prejšnjo] [soboto] [ob] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[prejšnji] dddd [ob] LT";
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "čez %s",
          past: "pred %s",
          s: t,
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("sq", {
        months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),
        monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),
        weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),
        weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
        weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"),
        weekdaysParseExact: !0,
        meridiemParse: /PD|MD/,
        isPM: function(e) {
          return "M" === e.charAt(0);
        },
        meridiem: function(e, t, n) {
          return e < 12 ? "PD" : "MD";
        },
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Sot në] LT",
          nextDay: "[Nesër në] LT",
          nextWeek: "dddd [në] LT",
          lastDay: "[Dje në] LT",
          lastWeek: "dddd [e kaluar në] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "në %s",
          past: "%s më parë",
          s: "disa sekonda",
          m: "një minutë",
          mm: "%d minuta",
          h: "një orë",
          hh: "%d orë",
          d: "një ditë",
          dd: "%d ditë",
          M: "një muaj",
          MM: "%d muaj",
          y: "një vit",
          yy: "%d vite"
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
        words: {
          m: ["један минут", "једне минуте"],
          mm: ["минут", "минуте", "минута"],
          h: ["један сат", "једног сата"],
          hh: ["сат", "сата", "сати"],
          dd: ["дан", "дана", "дана"],
          MM: ["месец", "месеца", "месеци"],
          yy: ["година", "године", "година"]
        },
        correctGrammaticalCase: function(e, t) {
          return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2];
        },
        translate: function(e, n, r) {
          var o = t.words[r];
          return 1 === r.length ? n ? o[0] : o[1] : e + " " + t.correctGrammaticalCase(e, o);
        }
      };
      e.defineLocale("sr-cyrl", {
        months: "јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),
        monthsShort: "јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),
        monthsParseExact: !0,
        weekdays: "недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),
        weekdaysShort: "нед._пон._уто._сре._чет._пет._суб.".split("_"),
        weekdaysMin: "не_по_ут_ср_че_пе_су".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY H:mm",
          LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[данас у] LT",
          nextDay: "[сутра у] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[у] [недељу] [у] LT";
              case 3:
                return "[у] [среду] [у] LT";
              case 6:
                return "[у] [суботу] [у] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[у] dddd [у] LT";
            }
          },
          lastDay: "[јуче у] LT",
          lastWeek: function() {
            return ["[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT"][this.day()];
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "за %s",
          past: "пре %s",
          s: "неколико секунди",
          m: t.translate,
          mm: t.translate,
          h: t.translate,
          hh: t.translate,
          d: "дан",
          dd: t.translate,
          M: "месец",
          MM: t.translate,
          y: "годину",
          yy: t.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
        words: {
          m: ["jedan minut", "jedne minute"],
          mm: ["minut", "minute", "minuta"],
          h: ["jedan sat", "jednog sata"],
          hh: ["sat", "sata", "sati"],
          dd: ["dan", "dana", "dana"],
          MM: ["mesec", "meseca", "meseci"],
          yy: ["godina", "godine", "godina"]
        },
        correctGrammaticalCase: function(e, t) {
          return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2];
        },
        translate: function(e, n, r) {
          var o = t.words[r];
          return 1 === r.length ? n ? o[0] : o[1] : e + " " + t.correctGrammaticalCase(e, o);
        }
      };
      e.defineLocale("sr", {
        months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
        monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
        monthsParseExact: !0,
        weekdays: "nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),
        weekdaysShort: "ned._pon._uto._sre._čet._pet._sub.".split("_"),
        weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM YYYY",
          LLL: "D. MMMM YYYY H:mm",
          LLLL: "dddd, D. MMMM YYYY H:mm"
        },
        calendar: {
          sameDay: "[danas u] LT",
          nextDay: "[sutra u] LT",
          nextWeek: function() {
            switch (this.day()) {
              case 0:
                return "[u] [nedelju] [u] LT";
              case 3:
                return "[u] [sredu] [u] LT";
              case 6:
                return "[u] [subotu] [u] LT";
              case 1:
              case 2:
              case 4:
              case 5:
                return "[u] dddd [u] LT";
            }
          },
          lastDay: "[juče u] LT",
          lastWeek: function() {
            return ["[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"][this.day()];
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "za %s",
          past: "pre %s",
          s: "nekoliko sekundi",
          m: t.translate,
          mm: t.translate,
          h: t.translate,
          hh: t.translate,
          d: "dan",
          dd: t.translate,
          M: "mesec",
          MM: t.translate,
          y: "godinu",
          yy: t.translate
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("ss", {
        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),
        monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),
        weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),
        weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),
        weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "h:mm A",
          LTS: "h:mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY h:mm A",
          LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendar: {
          sameDay: "[Namuhla nga] LT",
          nextDay: "[Kusasa nga] LT",
          nextWeek: "dddd [nga] LT",
          lastDay: "[Itolo nga] LT",
          lastWeek: "dddd [leliphelile] [nga] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "nga %s",
          past: "wenteka nga %s",
          s: "emizuzwana lomcane",
          m: "umzuzu",
          mm: "%d emizuzu",
          h: "lihora",
          hh: "%d emahora",
          d: "lilanga",
          dd: "%d emalanga",
          M: "inyanga",
          MM: "%d tinyanga",
          y: "umnyaka",
          yy: "%d iminyaka"
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem: function(e, t, n) {
          return e < 11 ? "ekuseni" : e < 15 ? "emini" : e < 19 ? "entsambama" : "ebusuku";
        },
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "ekuseni" === t ? e : "emini" === t ? e >= 11 ? e : e + 12 : "entsambama" === t || "ebusuku" === t ? 0 === e ? 0 : e + 12 : void 0;
        },
        ordinalParse: /\d{1,2}/,
        ordinal: "%d",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("sv", {
        months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
        monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),
        weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"),
        weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "YYYY-MM-DD",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY [kl.] HH:mm",
          LLLL: "dddd D MMMM YYYY [kl.] HH:mm",
          lll: "D MMM YYYY HH:mm",
          llll: "ddd D MMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Idag] LT",
          nextDay: "[Imorgon] LT",
          lastDay: "[Igår] LT",
          nextWeek: "[På] dddd LT",
          lastWeek: "[I] dddd[s] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "om %s",
          past: "för %s sedan",
          s: "några sekunder",
          m: "en minut",
          mm: "%d minuter",
          h: "en timme",
          hh: "%d timmar",
          d: "en dag",
          dd: "%d dagar",
          M: "en månad",
          MM: "%d månader",
          y: "ett år",
          yy: "%d år"
        },
        ordinalParse: /\d{1,2}(e|a)/,
        ordinal: function(e) {
          var t = e % 10;
          return e + (1 == ~~(e % 100 / 10) ? "e" : 1 === t ? "a" : 2 === t ? "a" : "e");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("sw", {
        months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),
        monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),
        weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),
        weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),
        weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[leo saa] LT",
          nextDay: "[kesho saa] LT",
          nextWeek: "[wiki ijayo] dddd [saat] LT",
          lastDay: "[jana] LT",
          lastWeek: "[wiki iliyopita] dddd [saat] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s baadaye",
          past: "tokea %s",
          s: "hivi punde",
          m: "dakika moja",
          mm: "dakika %d",
          h: "saa limoja",
          hh: "masaa %d",
          d: "siku moja",
          dd: "masiku %d",
          M: "mwezi mmoja",
          MM: "miezi %d",
          y: "mwaka mmoja",
          yy: "miaka %d"
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
          1: "௧",
          2: "௨",
          3: "௩",
          4: "௪",
          5: "௫",
          6: "௬",
          7: "௭",
          8: "௮",
          9: "௯",
          0: "௦"
        },
        n = {
          "௧": "1",
          "௨": "2",
          "௩": "3",
          "௪": "4",
          "௫": "5",
          "௬": "6",
          "௭": "7",
          "௮": "8",
          "௯": "9",
          "௦": "0"
        };
      e.defineLocale("ta", {
        months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
        monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
        weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),
        weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),
        weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, HH:mm",
          LLLL: "dddd, D MMMM YYYY, HH:mm"
        },
        calendar: {
          sameDay: "[இன்று] LT",
          nextDay: "[நாளை] LT",
          nextWeek: "dddd, LT",
          lastDay: "[நேற்று] LT",
          lastWeek: "[கடந்த வாரம்] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s இல்",
          past: "%s முன்",
          s: "ஒரு சில விநாடிகள்",
          m: "ஒரு நிமிடம்",
          mm: "%d நிமிடங்கள்",
          h: "ஒரு மணி நேரம்",
          hh: "%d மணி நேரம்",
          d: "ஒரு நாள்",
          dd: "%d நாட்கள்",
          M: "ஒரு மாதம்",
          MM: "%d மாதங்கள்",
          y: "ஒரு வருடம்",
          yy: "%d ஆண்டுகள்"
        },
        ordinalParse: /\d{1,2}வது/,
        ordinal: function(e) {
          return e + "வது";
        },
        preparse: function(e) {
          return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function(e) {
            return n[e];
          });
        },
        postformat: function(e) {
          return e.replace(/\d/g, function(e) {
            return t[e];
          });
        },
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem: function(e, t, n) {
          return e < 2 ? " யாமம்" : e < 6 ? " வைகறை" : e < 10 ? " காலை" : e < 14 ? " நண்பகல்" : e < 18 ? " எற்பாடு" : e < 22 ? " மாலை" : " யாமம்";
        },
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "யாமம்" === t ? e < 2 ? e : e + 12 : "வைகறை" === t || "காலை" === t ? e : "நண்பகல்" === t && e >= 10 ? e : e + 12;
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("te", {
        months: "జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),
        monthsShort: "జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),
        monthsParseExact: !0,
        weekdays: "ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),
        weekdaysShort: "ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),
        weekdaysMin: "ఆ_సో_మం_బు_గు_శు_శ".split("_"),
        longDateFormat: {
          LT: "A h:mm",
          LTS: "A h:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY, A h:mm",
          LLLL: "dddd, D MMMM YYYY, A h:mm"
        },
        calendar: {
          sameDay: "[నేడు] LT",
          nextDay: "[రేపు] LT",
          nextWeek: "dddd, LT",
          lastDay: "[నిన్న] LT",
          lastWeek: "[గత] dddd, LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s లో",
          past: "%s క్రితం",
          s: "కొన్ని క్షణాలు",
          m: "ఒక నిమిషం",
          mm: "%d నిమిషాలు",
          h: "ఒక గంట",
          hh: "%d గంటలు",
          d: "ఒక రోజు",
          dd: "%d రోజులు",
          M: "ఒక నెల",
          MM: "%d నెలలు",
          y: "ఒక సంవత్సరం",
          yy: "%d సంవత్సరాలు"
        },
        ordinalParse: /\d{1,2}వ/,
        ordinal: "%dవ",
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "రాత్రి" === t ? e < 4 ? e : e + 12 : "ఉదయం" === t ? e : "మధ్యాహ్నం" === t ? e >= 10 ? e : e + 12 : "సాయంత్రం" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "రాత్రి" : e < 10 ? "ఉదయం" : e < 17 ? "మధ్యాహ్నం" : e < 20 ? "సాయంత్రం" : "రాత్రి";
        },
        week: {
          dow: 0,
          doy: 6
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("tet", {
        months: "Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru".split("_"),
        monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez".split("_"),
        weekdays: "Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu".split("_"),
        weekdaysShort: "Dom_Seg_Ters_Kua_Kint_Sext_Sab".split("_"),
        weekdaysMin: "Do_Seg_Te_Ku_Ki_Sex_Sa".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Ohin iha] LT",
          nextDay: "[Aban iha] LT",
          nextWeek: "dddd [iha] LT",
          lastDay: "[Horiseik iha] LT",
          lastWeek: "dddd [semana kotuk] [iha] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "iha %s",
          past: "%s liuba",
          s: "minutu balun",
          m: "minutu ida",
          mm: "minutus %d",
          h: "horas ida",
          hh: "horas %d",
          d: "loron ida",
          dd: "loron %d",
          M: "fulan ida",
          MM: "fulan %d",
          y: "tinan ida",
          yy: "tinan %d"
        },
        ordinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function(e) {
          var t = e % 10;
          return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("th", {
        months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),
        monthsShort: "ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),
        monthsParseExact: !0,
        weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),
        weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),
        weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "H:mm",
          LTS: "H:mm:ss",
          L: "YYYY/MM/DD",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY เวลา H:mm",
          LLLL: "วันddddที่ D MMMM YYYY เวลา H:mm"
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function(e) {
          return "หลังเที่ยง" === e;
        },
        meridiem: function(e, t, n) {
          return e < 12 ? "ก่อนเที่ยง" : "หลังเที่ยง";
        },
        calendar: {
          sameDay: "[วันนี้ เวลา] LT",
          nextDay: "[พรุ่งนี้ เวลา] LT",
          nextWeek: "dddd[หน้า เวลา] LT",
          lastDay: "[เมื่อวานนี้ เวลา] LT",
          lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "อีก %s",
          past: "%sที่แล้ว",
          s: "ไม่กี่วินาที",
          m: "1 นาที",
          mm: "%d นาที",
          h: "1 ชั่วโมง",
          hh: "%d ชั่วโมง",
          d: "1 วัน",
          dd: "%d วัน",
          M: "1 เดือน",
          MM: "%d เดือน",
          y: "1 ปี",
          yy: "%d ปี"
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("tl-ph", {
        months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
        monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
        weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
        weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
        weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "MM/D/YYYY",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY HH:mm",
          LLLL: "dddd, MMMM DD, YYYY HH:mm"
        },
        calendar: {
          sameDay: "LT [ngayong araw]",
          nextDay: "[Bukas ng] LT",
          nextWeek: "LT [sa susunod na] dddd",
          lastDay: "LT [kahapon]",
          lastWeek: "LT [noong nakaraang] dddd",
          sameElse: "L"
        },
        relativeTime: {
          future: "sa loob ng %s",
          past: "%s ang nakalipas",
          s: "ilang segundo",
          m: "isang minuto",
          mm: "%d minuto",
          h: "isang oras",
          hh: "%d oras",
          d: "isang araw",
          dd: "%d araw",
          M: "isang buwan",
          MM: "%d buwan",
          y: "isang taon",
          yy: "%d taon"
        },
        ordinalParse: /\d{1,2}/,
        ordinal: function(e) {
          return e;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e) {
        var t = e;
        return t = -1 !== e.indexOf("jaj") ? t.slice(0, -3) + "leS" : -1 !== e.indexOf("jar") ? t.slice(0, -3) + "waQ" : -1 !== e.indexOf("DIS") ? t.slice(0, -3) + "nem" : t + " pIq";
      }

      function n(e) {
        var t = e;
        return t = -1 !== e.indexOf("jaj") ? t.slice(0, -3) + "Hu’" : -1 !== e.indexOf("jar") ? t.slice(0, -3) + "wen" : -1 !== e.indexOf("DIS") ? t.slice(0, -3) + "ben" : t + " ret";
      }

      function r(e, t, n, r) {
        var i = o(e);
        switch (n) {
          case "mm":
            return i + " tup";
          case "hh":
            return i + " rep";
          case "dd":
            return i + " jaj";
          case "MM":
            return i + " jar";
          case "yy":
            return i + " DIS";
        }
      }

      function o(e) {
        var t = Math.floor(e % 1e3 / 100),
          n = Math.floor(e % 100 / 10),
          r = e % 10,
          o = "";
        return t > 0 && (o += i[t] + "vatlh"), n > 0 && (o += ("" !== o ? " " : "") + i[n] + "maH"), r > 0 && (o += ("" !== o ? " " : "") + i[r]), "" === o ? "pagh" : o;
      }
      var i = "pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");
      e.defineLocale("tlh", {
        months: "tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),
        monthsShort: "jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),
        monthsParseExact: !0,
        weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
        weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
        weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[DaHjaj] LT",
          nextDay: "[wa’leS] LT",
          nextWeek: "LLL",
          lastDay: "[wa’Hu’] LT",
          lastWeek: "LLL",
          sameElse: "L"
        },
        relativeTime: {
          future: t,
          past: n,
          s: "puS lup",
          m: "wa’ tup",
          mm: r,
          h: "wa’ rep",
          hh: r,
          d: "wa’ jaj",
          dd: r,
          M: "wa’ jar",
          MM: r,
          y: "wa’ DIS",
          yy: r
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      var t = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",
        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",
        3: "'üncü",
        4: "'üncü",
        100: "'üncü",
        6: "'ncı",
        9: "'uncu",
        10: "'uncu",
        30: "'uncu",
        60: "'ıncı",
        90: "'ıncı"
      };
      e.defineLocale("tr", {
        months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),
        monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),
        weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),
        weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),
        weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[bugün saat] LT",
          nextDay: "[yarın saat] LT",
          nextWeek: "[haftaya] dddd [saat] LT",
          lastDay: "[dün] LT",
          lastWeek: "[geçen hafta] dddd [saat] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s sonra",
          past: "%s önce",
          s: "birkaç saniye",
          m: "bir dakika",
          mm: "%d dakika",
          h: "bir saat",
          hh: "%d saat",
          d: "bir gün",
          dd: "%d gün",
          M: "bir ay",
          MM: "%d ay",
          y: "bir yıl",
          yy: "%d yıl"
        },
        ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,
        ordinal: function(e) {
          if (0 === e) return e + "'ıncı";
          var n = e % 10,
            r = e % 100 - n,
            o = e >= 100 ? 100 : null;
          return e + (t[n] || t[r] || t[o]);
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t, n, r) {
        var o = {
          s: ["viensas secunds", "'iensas secunds"],
          m: ["'n míut", "'iens míut"],
          mm: [e + " míuts", e + " míuts"],
          h: ["'n þora", "'iensa þora"],
          hh: [e + " þoras", e + " þoras"],
          d: ["'n ziua", "'iensa ziua"],
          dd: [e + " ziuas", e + " ziuas"],
          M: ["'n mes", "'iens mes"],
          MM: [e + " mesen", e + " mesen"],
          y: ["'n ar", "'iens ar"],
          yy: [e + " ars", e + " ars"]
        };
        return r ? o[n][0] : t ? o[n][0] : o[n][1];
      }
      e.defineLocale("tzl", {
        months: "Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),
        monthsShort: "Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),
        weekdays: "Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),
        weekdaysShort: "Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),
        weekdaysMin: "Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),
        longDateFormat: {
          LT: "HH.mm",
          LTS: "HH.mm.ss",
          L: "DD.MM.YYYY",
          LL: "D. MMMM [dallas] YYYY",
          LLL: "D. MMMM [dallas] YYYY HH.mm",
          LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm"
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM: function(e) {
          return "d'o" === e.toLowerCase();
        },
        meridiem: function(e, t, n) {
          return e > 11 ? n ? "d'o" : "D'O" : n ? "d'a" : "D'A";
        },
        calendar: {
          sameDay: "[oxhi à] LT",
          nextDay: "[demà à] LT",
          nextWeek: "dddd [à] LT",
          lastDay: "[ieiri à] LT",
          lastWeek: "[sür el] dddd [lasteu à] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "osprei %s",
          past: "ja%s",
          s: t,
          m: t,
          mm: t,
          h: t,
          hh: t,
          d: t,
          dd: t,
          M: t,
          MM: t,
          y: t,
          yy: t
        },
        ordinalParse: /\d{1,2}\./,
        ordinal: "%d.",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("tzm-latn", {
        months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[asdkh g] LT",
          nextDay: "[aska g] LT",
          nextWeek: "dddd [g] LT",
          lastDay: "[assant g] LT",
          lastWeek: "dddd [g] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "dadkh s yan %s",
          past: "yan %s",
          s: "imik",
          m: "minuḍ",
          mm: "%d minuḍ",
          h: "saɛa",
          hh: "%d tassaɛin",
          d: "ass",
          dd: "%d ossan",
          M: "ayowr",
          MM: "%d iyyirn",
          y: "asgas",
          yy: "%d isgasn"
        },
        week: {
          dow: 6,
          doy: 12
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("tzm", {
        months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
          nextDay: "[ⴰⵙⴽⴰ ⴴ] LT",
          nextWeek: "dddd [ⴴ] LT",
          lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT",
          lastWeek: "dddd [ⴴ] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
          past: "ⵢⴰⵏ %s",
          s: "ⵉⵎⵉⴽ",
          m: "ⵎⵉⵏⵓⴺ",
          mm: "%d ⵎⵉⵏⵓⴺ",
          h: "ⵙⴰⵄⴰ",
          hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
          d: "ⴰⵙⵙ",
          dd: "%d oⵙⵙⴰⵏ",
          M: "ⴰⵢoⵓⵔ",
          MM: "%d ⵉⵢⵢⵉⵔⵏ",
          y: "ⴰⵙⴳⴰⵙ",
          yy: "%d ⵉⵙⴳⴰⵙⵏ"
        },
        week: {
          dow: 6,
          doy: 12
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";

      function t(e, t) {
        var n = e.split("_");
        return t % 10 == 1 && t % 100 != 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2];
      }

      function n(e, n, r) {
        var o = {
          mm: n ? "хвилина_хвилини_хвилин" : "хвилину_хвилини_хвилин",
          hh: n ? "година_години_годин" : "годину_години_годин",
          dd: "день_дні_днів",
          MM: "місяць_місяці_місяців",
          yy: "рік_роки_років"
        };
        return "m" === r ? n ? "хвилина" : "хвилину" : "h" === r ? n ? "година" : "годину" : e + " " + t(o[r], +e);
      }

      function r(e, t) {
        return {
          nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),
          accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),
          genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")
        }[/(\[[ВвУу]\]) ?dddd/.test(t) ? "accusative" : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(t) ? "genitive" : "nominative"][e.day()];
      }

      function o(e) {
        return function() {
          return e + "о" + (11 === this.hours() ? "б" : "") + "] LT";
        };
      }
      e.defineLocale("uk", {
        months: {
          format: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),
          standalone: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")
        },
        monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),
        weekdays: r,
        weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD.MM.YYYY",
          LL: "D MMMM YYYY р.",
          LLL: "D MMMM YYYY р., HH:mm",
          LLLL: "dddd, D MMMM YYYY р., HH:mm"
        },
        calendar: {
          sameDay: o("[Сьогодні "),
          nextDay: o("[Завтра "),
          lastDay: o("[Вчора "),
          nextWeek: o("[У] dddd ["),
          lastWeek: function() {
            switch (this.day()) {
              case 0:
              case 3:
              case 5:
              case 6:
                return o("[Минулої] dddd [").call(this);
              case 1:
              case 2:
              case 4:
                return o("[Минулого] dddd [").call(this);
            }
          },
          sameElse: "L"
        },
        relativeTime: {
          future: "за %s",
          past: "%s тому",
          s: "декілька секунд",
          m: n,
          mm: n,
          h: "годину",
          hh: n,
          d: "день",
          dd: n,
          M: "місяць",
          MM: n,
          y: "рік",
          yy: n
        },
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function(e) {
          return /^(дня|вечора)$/.test(e);
        },
        meridiem: function(e, t, n) {
          return e < 4 ? "ночі" : e < 12 ? "ранку" : e < 17 ? "дня" : "вечора";
        },
        ordinalParse: /\d{1,2}-(й|го)/,
        ordinal: function(e, t) {
          switch (t) {
            case "M":
            case "d":
            case "DDD":
            case "w":
            case "W":
              return e + "-й";
            case "D":
              return e + "-го";
            default:
              return e;
          }
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("uz", {
        months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),
        monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
        weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),
        weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
        weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "D MMMM YYYY, dddd HH:mm"
        },
        calendar: {
          sameDay: "[Бугун соат] LT [да]",
          nextDay: "[Эртага] LT [да]",
          nextWeek: "dddd [куни соат] LT [да]",
          lastDay: "[Кеча соат] LT [да]",
          lastWeek: "[Утган] dddd [куни соат] LT [да]",
          sameElse: "L"
        },
        relativeTime: {
          future: "Якин %s ичида",
          past: "Бир неча %s олдин",
          s: "фурсат",
          m: "бир дакика",
          mm: "%d дакика",
          h: "бир соат",
          hh: "%d соат",
          d: "бир кун",
          dd: "%d кун",
          M: "бир ой",
          MM: "%d ой",
          y: "бир йил",
          yy: "%d йил"
        },
        week: {
          dow: 1,
          doy: 7
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("vi", {
        months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
        monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
        monthsParseExact: !0,
        weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
        weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"),
        weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"),
        weekdaysParseExact: !0,
        meridiemParse: /sa|ch/i,
        isPM: function(e) {
          return /^ch$/i.test(e);
        },
        meridiem: function(e, t, n) {
          return e < 12 ? n ? "sa" : "SA" : n ? "ch" : "CH";
        },
        longDateFormat: {
          LT: "HH:mm",
          LTS: "HH:mm:ss",
          L: "DD/MM/YYYY",
          LL: "D MMMM [năm] YYYY",
          LLL: "D MMMM [năm] YYYY HH:mm",
          LLLL: "dddd, D MMMM [năm] YYYY HH:mm",
          l: "DD/M/YYYY",
          ll: "D MMM YYYY",
          lll: "D MMM YYYY HH:mm",
          llll: "ddd, D MMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[Hôm nay lúc] LT",
          nextDay: "[Ngày mai lúc] LT",
          nextWeek: "dddd [tuần tới lúc] LT",
          lastDay: "[Hôm qua lúc] LT",
          lastWeek: "dddd [tuần rồi lúc] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "%s tới",
          past: "%s trước",
          s: "vài giây",
          m: "một phút",
          mm: "%d phút",
          h: "một giờ",
          hh: "%d giờ",
          d: "một ngày",
          dd: "%d ngày",
          M: "một tháng",
          MM: "%d tháng",
          y: "một năm",
          yy: "%d năm"
        },
        ordinalParse: /\d{1,2}/,
        ordinal: function(e) {
          return e;
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("x-pseudo", {
        months: "J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),
        monthsShort: "J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),
        monthsParseExact: !0,
        weekdays: "S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),
        weekdaysShort: "S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),
        weekdaysMin: "S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),
        weekdaysParseExact: !0,
        longDateFormat: {
          LT: "HH:mm",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY HH:mm",
          LLLL: "dddd, D MMMM YYYY HH:mm"
        },
        calendar: {
          sameDay: "[T~ódá~ý át] LT",
          nextDay: "[T~ómó~rró~w át] LT",
          nextWeek: "dddd [át] LT",
          lastDay: "[Ý~ést~érdá~ý át] LT",
          lastWeek: "[L~ást] dddd [át] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "í~ñ %s",
          past: "%s á~gó",
          s: "á ~féw ~sécó~ñds",
          m: "á ~míñ~úté",
          mm: "%d m~íñú~tés",
          h: "á~ñ hó~úr",
          hh: "%d h~óúrs",
          d: "á ~dáý",
          dd: "%d d~áýs",
          M: "á ~móñ~th",
          MM: "%d m~óñt~hs",
          y: "á ~ýéár",
          yy: "%d ý~éárs"
        },
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(e) {
          var t = e % 10;
          return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th");
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("yo", {
        months: "Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),
        monthsShort: "Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),
        weekdays: "Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),
        weekdaysShort: "Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),
        weekdaysMin: "Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),
        longDateFormat: {
          LT: "h:mm A",
          LTS: "h:mm:ss A",
          L: "DD/MM/YYYY",
          LL: "D MMMM YYYY",
          LLL: "D MMMM YYYY h:mm A",
          LLLL: "dddd, D MMMM YYYY h:mm A"
        },
        calendar: {
          sameDay: "[Ònì ni] LT",
          nextDay: "[Ọ̀la ni] LT",
          nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
          lastDay: "[Àna ni] LT",
          lastWeek: "dddd [Ọsẹ̀ tólọ́] [ni] LT",
          sameElse: "L"
        },
        relativeTime: {
          future: "ní %s",
          past: "%s kọjá",
          s: "ìsẹjú aayá die",
          m: "ìsẹjú kan",
          mm: "ìsẹjú %d",
          h: "wákati kan",
          hh: "wákati %d",
          d: "ọjọ́ kan",
          dd: "ọjọ́ %d",
          M: "osù kan",
          MM: "osù %d",
          y: "ọdún kan",
          yy: "ọdún %d"
        },
        ordinalParse: /ọjọ́\s\d{1,2}/,
        ordinal: "ọjọ́ %d",
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("zh-cn", {
        months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"),
        weekdaysMin: "日_一_二_三_四_五_六".split("_"),
        longDateFormat: {
          LT: "Ah点mm分",
          LTS: "Ah点m分s秒",
          L: "YYYY-MM-DD",
          LL: "YYYY年MMMD日",
          LLL: "YYYY年MMMD日Ah点mm分",
          LLLL: "YYYY年MMMD日ddddAh点mm分",
          l: "YYYY-MM-DD",
          ll: "YYYY年MMMD日",
          lll: "YYYY年MMMD日Ah点mm分",
          llll: "YYYY年MMMD日ddddAh点mm分"
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "下午" === t || "晚上" === t ? e + 12 : e >= 11 ? e : e + 12;
        },
        meridiem: function(e, t, n) {
          var r = 100 * e + t;
          return r < 600 ? "凌晨" : r < 900 ? "早上" : r < 1130 ? "上午" : r < 1230 ? "中午" : r < 1800 ? "下午" : "晚上";
        },
        calendar: {
          sameDay: function() {
            return 0 === this.minutes() ? "[今天]Ah[点整]" : "[今天]LT";
          },
          nextDay: function() {
            return 0 === this.minutes() ? "[明天]Ah[点整]" : "[明天]LT";
          },
          lastDay: function() {
            return 0 === this.minutes() ? "[昨天]Ah[点整]" : "[昨天]LT";
          },
          nextWeek: function() {
            var t, n;
            return t = e().startOf("week"), n = this.diff(t, "days") >= 7 ? "[下]" : "[本]", 0 === this.minutes() ? n + "dddAh点整" : n + "dddAh点mm";
          },
          lastWeek: function() {
            var t, n;
            return t = e().startOf("week"), n = this.unix() < t.unix() ? "[上]" : "[本]", 0 === this.minutes() ? n + "dddAh点整" : n + "dddAh点mm";
          },
          sameElse: "LL"
        },
        ordinalParse: /\d{1,2}(日|月|周)/,
        ordinal: function(e, t) {
          switch (t) {
            case "d":
            case "D":
            case "DDD":
              return e + "日";
            case "M":
              return e + "月";
            case "w":
            case "W":
              return e + "周";
            default:
              return e;
          }
        },
        relativeTime: {
          future: "%s内",
          past: "%s前",
          s: "几秒",
          m: "1 分钟",
          mm: "%d 分钟",
          h: "1 小时",
          hh: "%d 小时",
          d: "1 天",
          dd: "%d 天",
          M: "1 个月",
          MM: "%d 个月",
          y: "1 年",
          yy: "%d 年"
        },
        week: {
          dow: 1,
          doy: 4
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("zh-hk", {
        months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
        weekdaysMin: "日_一_二_三_四_五_六".split("_"),
        longDateFormat: {
          LT: "Ah點mm分",
          LTS: "Ah點m分s秒",
          L: "YYYY年MMMD日",
          LL: "YYYY年MMMD日",
          LLL: "YYYY年MMMD日Ah點mm分",
          LLLL: "YYYY年MMMD日ddddAh點mm分",
          l: "YYYY年MMMD日",
          ll: "YYYY年MMMD日",
          lll: "YYYY年MMMD日Ah點mm分",
          llll: "YYYY年MMMD日ddddAh點mm分"
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          var r = 100 * e + t;
          return r < 600 ? "凌晨" : r < 900 ? "早上" : r < 1130 ? "上午" : r < 1230 ? "中午" : r < 1800 ? "下午" : "晚上";
        },
        calendar: {
          sameDay: "[今天]LT",
          nextDay: "[明天]LT",
          nextWeek: "[下]ddddLT",
          lastDay: "[昨天]LT",
          lastWeek: "[上]ddddLT",
          sameElse: "L"
        },
        ordinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function(e, t) {
          switch (t) {
            case "d":
            case "D":
            case "DDD":
              return e + "日";
            case "M":
              return e + "月";
            case "w":
            case "W":
              return e + "週";
            default:
              return e;
          }
        },
        relativeTime: {
          future: "%s內",
          past: "%s前",
          s: "幾秒",
          m: "1 分鐘",
          mm: "%d 分鐘",
          h: "1 小時",
          hh: "%d 小時",
          d: "1 天",
          dd: "%d 天",
          M: "1 個月",
          MM: "%d 個月",
          y: "1 年",
          yy: "%d 年"
        }
      });
    }(n(0));
  }();
}, function(e, t, n) {
  ! function(e, t) {
    ! function(e) {
      "use strict";
      e.defineLocale("zh-tw", {
        months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
        weekdaysMin: "日_一_二_三_四_五_六".split("_"),
        longDateFormat: {
          LT: "Ah點mm分",
          LTS: "Ah點m分s秒",
          L: "YYYY年MMMD日",
          LL: "YYYY年MMMD日",
          LLL: "YYYY年MMMD日Ah點mm分",
          LLLL: "YYYY年MMMD日ddddAh點mm分",
          l: "YYYY年MMMD日",
          ll: "YYYY年MMMD日",
          lll: "YYYY年MMMD日Ah點mm分",
          llll: "YYYY年MMMD日ddddAh點mm分"
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function(e, t) {
          return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0;
        },
        meridiem: function(e, t, n) {
          var r = 100 * e + t;
          return r < 600 ? "凌晨" : r < 900 ? "早上" : r < 1130 ? "上午" : r < 1230 ? "中午" : r < 1800 ? "下午" : "晚上";
        },
        calendar: {
          sameDay: "[今天]LT",
          nextDay: "[明天]LT",
          nextWeek: "[下]ddddLT",
          lastDay: "[昨天]LT",
          lastWeek: "[上]ddddLT",
          sameElse: "L"
        },
        ordinalParse: /\d{1,2}(日|月|週)/,
        ordinal: function(e, t) {
          switch (t) {
            case "d":
            case "D":
            case "DDD":
              return e + "日";
            case "M":
              return e + "月";
            case "w":
            case "W":
              return e + "週";
            default:
              return e;
          }
        },
        relativeTime: {
          future: "%s內",
          past: "%s前",
          s: "幾秒",
          m: "1 分鐘",
          mm: "%d 分鐘",
          h: "1 小時",
          hh: "%d 小時",
          d: "1 天",
          dd: "%d 天",
          M: "1 個月",
          MM: "%d 個月",
          y: "1 年",
          yy: "%d 年"
        }
      });
    }(n(0));
  }();
}, function(e, t) {
  function n() {
    throw new Error("setTimeout has not been defined");
  }

  function r() {
    throw new Error("clearTimeout has not been defined");
  }

  function o(e) {
    if (c === setTimeout) return setTimeout(e, 0);
    if ((c === n || !c) && setTimeout) return c = setTimeout, setTimeout(e, 0);
    try {
      return c(e, 0);
    } catch (t) {
      try {
        return c.call(null, e, 0);
      } catch (t) {
        return c.call(this, e, 0);
      }
    }
  }

  function i(e) {
    if (d === clearTimeout) return clearTimeout(e);
    if ((d === r || !d) && clearTimeout) return d = clearTimeout, clearTimeout(e);
    try {
      return d(e);
    } catch (t) {
      try {
        return d.call(null, e);
      } catch (t) {
        return d.call(this, e);
      }
    }
  }

  function a() {
    _ && h && (_ = !1, h.length ? p = h.concat(p) : m = -1, p.length && s());
  }

  function s() {
    if (!_) {
      var e = o(a);
      _ = !0;
      for (var t = p.length; t;) {
        for (h = p, p = []; ++m < t;) h && h[m].run();
        m = -1, t = p.length;
      }
      h = null, _ = !1, i(e);
    }
  }

  function u(e, t) {
    this.fun = e, this.array = t;
  }

  function l() {}
  var c, d, f = e.exports = {};
  ! function() {
    try {
      c = "function" == typeof setTimeout ? setTimeout : n;
    } catch (e) {
      c = n;
    }
    try {
      d = "function" == typeof clearTimeout ? clearTimeout : r;
    } catch (e) {
      d = r;
    }
  }();
  var h, p = [],
    _ = !1,
    m = -1;
  f.nextTick = function(e) {
    var t = new Array(arguments.length - 1);
    if (arguments.length > 1)
      for (var n = 1; n < arguments.length; n++) t[n - 1] = arguments[n];
    p.push(new u(e, t)), 1 !== p.length || _ || o(s);
  }, u.prototype.run = function() {
    this.fun.apply(null, this.array);
  }, f.title = "browser", f.browser = !0, f.env = {}, f.argv = [], f.version = "", f.versions = {}, f.on = l, f.addListener = l, f.once = l, f.off = l, f.removeListener = l, f.removeAllListeners = l, f.emit = l, f.binding = function(e) {
    throw new Error("process.binding is not supported");
  }, f.cwd = function() {
    return "/";
  }, f.chdir = function(e) {
    throw new Error("process.chdir is not supported");
  }, f.umask = function() {
    return 0;
  };
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return e + t.charAt(0).toUpperCase() + t.substring(1);
  }
  var o = {
      animationIterationCount: !0,
      borderImageOutset: !0,
      borderImageSlice: !0,
      borderImageWidth: !0,
      boxFlex: !0,
      boxFlexGroup: !0,
      boxOrdinalGroup: !0,
      columnCount: !0,
      flex: !0,
      flexGrow: !0,
      flexPositive: !0,
      flexShrink: !0,
      flexNegative: !0,
      flexOrder: !0,
      gridRow: !0,
      gridColumn: !0,
      fontWeight: !0,
      lineClamp: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      tabSize: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
      fillOpacity: !0,
      floodOpacity: !0,
      stopOpacity: !0,
      strokeDasharray: !0,
      strokeDashoffset: !0,
      strokeMiterlimit: !0,
      strokeOpacity: !0,
      strokeWidth: !0
    },
    i = ["Webkit", "ms", "Moz", "O"];
  Object.keys(o).forEach(function(e) {
    i.forEach(function(t) {
      o[r(t, e)] = o[e];
    });
  });
  var a = {
      background: {
        backgroundAttachment: !0,
        backgroundColor: !0,
        backgroundImage: !0,
        backgroundPositionX: !0,
        backgroundPositionY: !0,
        backgroundRepeat: !0
      },
      backgroundPosition: {
        backgroundPositionX: !0,
        backgroundPositionY: !0
      },
      border: {
        borderWidth: !0,
        borderStyle: !0,
        borderColor: !0
      },
      borderBottom: {
        borderBottomWidth: !0,
        borderBottomStyle: !0,
        borderBottomColor: !0
      },
      borderLeft: {
        borderLeftWidth: !0,
        borderLeftStyle: !0,
        borderLeftColor: !0
      },
      borderRight: {
        borderRightWidth: !0,
        borderRightStyle: !0,
        borderRightColor: !0
      },
      borderTop: {
        borderTopWidth: !0,
        borderTopStyle: !0,
        borderTopColor: !0
      },
      font: {
        fontStyle: !0,
        fontVariant: !0,
        fontWeight: !0,
        fontSize: !0,
        lineHeight: !0,
        fontFamily: !0
      },
      outline: {
        outlineWidth: !0,
        outlineStyle: !0,
        outlineColor: !0
      }
    },
    s = {
      isUnitlessNumber: o,
      shorthandPropertyExpansions: a
    };
  e.exports = s;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }
  var o = n(4),
    i = n(35),
    a = (n(2), function() {
      function e(t) {
        r(this, e), this._callbacks = null, this._contexts = null, this._arg = t;
      }
      return e.prototype.enqueue = function(e, t) {
        this._callbacks = this._callbacks || [], this._callbacks.push(e), this._contexts = this._contexts || [], this._contexts.push(t);
      }, e.prototype.notifyAll = function() {
        var e = this._callbacks,
          t = this._contexts,
          n = this._arg;
        if (e && t) {
          e.length !== t.length && o("24"), this._callbacks = null, this._contexts = null;
          for (var r = 0; r < e.length; r++) e[r].call(t[r], n);
          e.length = 0, t.length = 0;
        }
      }, e.prototype.checkpoint = function() {
        return this._callbacks ? this._callbacks.length : 0;
      }, e.prototype.rollback = function(e) {
        this._callbacks && this._contexts && (this._callbacks.length = e, this._contexts.length = e);
      }, e.prototype.reset = function() {
        this._callbacks = null, this._contexts = null;
      }, e.prototype.destructor = function() {
        this.reset();
      }, e;
    }());
  e.exports = i.addPoolingTo(a);
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return !!l.hasOwnProperty(e) || !u.hasOwnProperty(e) && (s.test(e) ? (l[e] = !0, !0) : (u[e] = !0, !1));
  }

  function o(e, t) {
    return null == t || e.hasBooleanValue && !t || e.hasNumericValue && isNaN(t) || e.hasPositiveNumericValue && t < 1 || e.hasOverloadedBooleanValue && !1 === t;
  }
  var i = n(41),
    a = (n(10), n(18), n(521)),
    s = (n(3), new RegExp("^[" + i.ATTRIBUTE_NAME_START_CHAR + "][" + i.ATTRIBUTE_NAME_CHAR + "]*$")),
    u = {},
    l = {},
    c = {
      createMarkupForID: function(e) {
        return i.ID_ATTRIBUTE_NAME + "=" + a(e);
      },
      setAttributeForID: function(e, t) {
        e.setAttribute(i.ID_ATTRIBUTE_NAME, t);
      },
      createMarkupForRoot: function() {
        return i.ROOT_ATTRIBUTE_NAME + '=""';
      },
      setAttributeForRoot: function(e) {
        e.setAttribute(i.ROOT_ATTRIBUTE_NAME, "");
      },
      createMarkupForProperty: function(e, t) {
        var n = i.properties.hasOwnProperty(e) ? i.properties[e] : null;
        if (n) {
          if (o(n, t)) return "";
          var r = n.attributeName;
          return n.hasBooleanValue || n.hasOverloadedBooleanValue && !0 === t ? r + '=""' : r + "=" + a(t);
        }
        return i.isCustomAttribute(e) ? null == t ? "" : e + "=" + a(t) : null;
      },
      createMarkupForCustomAttribute: function(e, t) {
        return r(e) && null != t ? e + "=" + a(t) : "";
      },
      setValueForProperty: function(e, t, n) {
        var r = i.properties.hasOwnProperty(t) ? i.properties[t] : null;
        if (r) {
          var a = r.mutationMethod;
          if (a) a(e, n);
          else {
            if (o(r, n)) return void this.deleteValueForProperty(e, t);
            if (r.mustUseProperty) e[r.propertyName] = n;
            else {
              var s = r.attributeName,
                u = r.attributeNamespace;
              u ? e.setAttributeNS(u, s, "" + n) : r.hasBooleanValue || r.hasOverloadedBooleanValue && !0 === n ? e.setAttribute(s, "") : e.setAttribute(s, "" + n);
            }
          }
        } else if (i.isCustomAttribute(t)) return void c.setValueForAttribute(e, t, n);
      },
      setValueForAttribute: function(e, t, n) {
        r(t) && (null == n ? e.removeAttribute(t) : e.setAttribute(t, "" + n));
      },
      deleteValueForAttribute: function(e, t) {
        e.removeAttribute(t);
      },
      deleteValueForProperty: function(e, t) {
        var n = i.properties.hasOwnProperty(t) ? i.properties[t] : null;
        if (n) {
          var r = n.mutationMethod;
          if (r) r(e, void 0);
          else if (n.mustUseProperty) {
            var o = n.propertyName;
            n.hasBooleanValue ? e[o] = !1 : e[o] = "";
          } else e.removeAttribute(n.attributeName);
        } else i.isCustomAttribute(t) && e.removeAttribute(t);
      }
    };
  e.exports = c;
}, function(e, t, n) {
  "use strict";
  var r = {
    hasCachedChildNodes: 1
  };
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r() {
    if (this._rootNodeID && this._wrapperState.pendingUpdate) {
      this._wrapperState.pendingUpdate = !1;
      var e = this._currentElement.props,
        t = s.getValue(e);
      null != t && o(this, Boolean(e.multiple), t);
    }
  }

  function o(e, t, n) {
    var r, o, i = u.getNodeFromInstance(e).options;
    if (t) {
      for (r = {}, o = 0; o < n.length; o++) r["" + n[o]] = !0;
      for (o = 0; o < i.length; o++) {
        var a = r.hasOwnProperty(i[o].value);
        i[o].selected !== a && (i[o].selected = a);
      }
    } else {
      for (r = "" + n, o = 0; o < i.length; o++)
        if (i[o].value === r) return void(i[o].selected = !0);
      i.length && (i[0].selected = !0);
    }
  }

  function i(e) {
    var t = this._currentElement.props,
      n = s.executeOnChange(t, e);
    return this._rootNodeID && (this._wrapperState.pendingUpdate = !0), l.asap(r, this), n;
  }
  var a = n(6),
    s = n(104),
    u = n(10),
    l = n(21),
    c = (n(3), !1),
    d = {
      getHostProps: function(e, t) {
        return a({}, t, {
          onChange: e._wrapperState.onChange,
          value: void 0
        });
      },
      mountWrapper: function(e, t) {
        var n = s.getValue(t);
        e._wrapperState = {
          pendingUpdate: !1,
          initialValue: null != n ? n : t.defaultValue,
          listeners: null,
          onChange: i.bind(e),
          wasMultiple: Boolean(t.multiple)
        }, void 0 === t.value || void 0 === t.defaultValue || c || (c = !0);
      },
      getSelectValueContext: function(e) {
        return e._wrapperState.initialValue;
      },
      postUpdateWrapper: function(e) {
        var t = e._currentElement.props;
        e._wrapperState.initialValue = void 0;
        var n = e._wrapperState.wasMultiple;
        e._wrapperState.wasMultiple = Boolean(t.multiple);
        var r = s.getValue(t);
        null != r ? (e._wrapperState.pendingUpdate = !1, o(e, Boolean(t.multiple), r)) : n !== Boolean(t.multiple) && (null != t.defaultValue ? o(e, Boolean(t.multiple), t.defaultValue) : o(e, Boolean(t.multiple), t.multiple ? [] : ""));
      }
    };
  e.exports = d;
}, function(e, t, n) {
  "use strict";
  var r, o = {
      injectEmptyComponentFactory: function(e) {
        r = e;
      }
    },
    i = {
      create: function(e) {
        return r(e);
      }
    };
  i.injection = o, e.exports = i;
}, function(e, t, n) {
  "use strict";
  var r = {
    logTopLevelRenders: !1
  };
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return s || a("111", e.type), new s(e);
  }

  function o(e) {
    return new u(e);
  }

  function i(e) {
    return e instanceof u;
  }
  var a = n(4),
    s = (n(2), null),
    u = null,
    l = {
      injectGenericComponentClass: function(e) {
        s = e;
      },
      injectTextComponentClass: function(e) {
        u = e;
      }
    },
    c = {
      createInternalComponent: r,
      createInstanceForText: o,
      isTextComponent: i,
      injection: l
    };
  e.exports = c;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return i(document.documentElement, e);
  }
  var o = n(480),
    i = n(432),
    a = n(152),
    s = n(153),
    u = {
      hasSelectionCapabilities: function(e) {
        var t = e && e.nodeName && e.nodeName.toLowerCase();
        return t && ("input" === t && "text" === e.type || "textarea" === t || "true" === e.contentEditable);
      },
      getSelectionInformation: function() {
        var e = s();
        return {
          focusedElem: e,
          selectionRange: u.hasSelectionCapabilities(e) ? u.getSelection(e) : null
        };
      },
      restoreSelection: function(e) {
        var t = s(),
          n = e.focusedElem,
          o = e.selectionRange;
        t !== n && r(n) && (u.hasSelectionCapabilities(n) && u.setSelection(n, o), a(n));
      },
      getSelection: function(e) {
        var t;
        if ("selectionStart" in e) t = {
          start: e.selectionStart,
          end: e.selectionEnd
        };
        else if (document.selection && e.nodeName && "input" === e.nodeName.toLowerCase()) {
          var n = document.selection.createRange();
          n.parentElement() === e && (t = {
            start: -n.moveStart("character", -e.value.length),
            end: -n.moveEnd("character", -e.value.length)
          });
        } else t = o.getOffsets(e);
        return t || {
          start: 0,
          end: 0
        };
      },
      setSelection: function(e, t) {
        var n = t.start,
          r = t.end;
        if (void 0 === r && (r = n), "selectionStart" in e) e.selectionStart = n, e.selectionEnd = Math.min(r, e.value.length);
        else if (document.selection && e.nodeName && "input" === e.nodeName.toLowerCase()) {
          var i = e.createTextRange();
          i.collapse(!0), i.moveStart("character", n), i.moveEnd("character", r - n), i.select();
        } else o.setOffsets(e, t);
      }
    };
  e.exports = u;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    for (var n = Math.min(e.length, t.length), r = 0; r < n; r++)
      if (e.charAt(r) !== t.charAt(r)) return r;
    return e.length === t.length ? -1 : n;
  }

  function o(e) {
    return e ? e.nodeType === O ? e.documentElement : e.firstChild : null;
  }

  function i(e) {
    return e.getAttribute && e.getAttribute(P) || "";
  }

  function a(e, t, n, r, o) {
    var i;
    if (b.logTopLevelRenders) {
      var a = e._currentElement.props.child,
        s = a.type;
      i = "React mount: " + ("string" == typeof s ? s : s.displayName || s.name), console.time(i);
    }
    var u = L.mountComponent(e, n, null, g(e, t), o, 0);
    i && console.timeEnd(i), e._renderedComponent._topLevelWrapper = e, N._mountImageIntoNode(u, t, e, r, n);
  }

  function s(e, t, n, r) {
    var o = S.ReactReconcileTransaction.getPooled(!n && M.useCreateElement);
    o.perform(a, null, e, t, o, n, r), S.ReactReconcileTransaction.release(o);
  }

  function u(e, t, n) {
    for (L.unmountComponent(e, n), t.nodeType === O && (t = t.documentElement); t.lastChild;) t.removeChild(t.lastChild);
  }

  function l(e) {
    var t = o(e);
    if (t) {
      var n = v.getInstanceFromNode(t);
      return !(!n || !n._hostParent);
    }
  }

  function c(e) {
    return !(!e || e.nodeType !== j && e.nodeType !== O && e.nodeType !== R);
  }

  function d(e) {
    var t = o(e),
      n = t && v.getInstanceFromNode(t);
    return n && !n._hostParent ? n : null;
  }

  function f(e) {
    var t = d(e);
    return t ? t._hostContainerInfo._topLevelWrapper : null;
  }
  var h = n(4),
    p = n(40),
    _ = n(41),
    m = n(43),
    y = n(64),
    v = (n(24), n(10)),
    g = n(474),
    M = n(476),
    b = n(271),
    w = n(53),
    k = (n(18), n(490)),
    L = n(42),
    T = n(107),
    S = n(21),
    Y = n(49),
    D = n(281),
    x = (n(2), n(68)),
    C = n(113),
    P = (n(3), _.ID_ATTRIBUTE_NAME),
    E = _.ROOT_ATTRIBUTE_NAME,
    j = 1,
    O = 9,
    R = 11,
    I = {},
    A = 1,
    H = function() {
      this.rootID = A++;
    };
  H.prototype.isReactComponent = {}, H.prototype.render = function() {
    return this.props.child;
  }, H.isReactTopLevelWrapper = !0;
  var N = {
    TopLevelWrapper: H,
    _instancesByReactRootID: I,
    scrollMonitor: function(e, t) {
      t();
    },
    _updateRootComponent: function(e, t, n, r, o) {
      return N.scrollMonitor(r, function() {
        T.enqueueElementInternal(e, t, n), o && T.enqueueCallbackInternal(e, o);
      }), e;
    },
    _renderNewRootComponent: function(e, t, n, r) {
      c(t) || h("37"), y.ensureScrollValueMonitoring();
      var o = D(e, !1);
      S.batchedUpdates(s, o, t, n, r);
      var i = o._instance.rootID;
      return I[i] = o, o;
    },
    renderSubtreeIntoContainer: function(e, t, n, r) {
      return null != e && w.has(e) || h("38"), N._renderSubtreeIntoContainer(e, t, n, r);
    },
    _renderSubtreeIntoContainer: function(e, t, n, r) {
      T.validateCallback(r, "ReactDOM.render"), m.isValidElement(t) || h("39", "string" == typeof t ? " Instead of passing a string like 'div', pass React.createElement('div') or <div />." : "function" == typeof t ? " Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />." : null != t && void 0 !== t.props ? " This may be caused by unintentionally loading two independent copies of React." : "");
      var a, s = m.createElement(H, {
        child: t
      });
      if (e) {
        var u = w.get(e);
        a = u._processChildContext(u._context);
      } else a = Y;
      var c = f(n);
      if (c) {
        var d = c._currentElement,
          p = d.props.child;
        if (C(p, t)) {
          var _ = c._renderedComponent.getPublicInstance(),
            y = r && function() {
              r.call(_);
            };
          return N._updateRootComponent(c, s, a, n, y), _;
        }
        N.unmountComponentAtNode(n);
      }
      var v = o(n),
        g = v && !!i(v),
        M = l(n),
        b = g && !c && !M,
        k = N._renderNewRootComponent(s, n, b, a)._renderedComponent.getPublicInstance();
      return r && r.call(k), k;
    },
    render: function(e, t, n) {
      return N._renderSubtreeIntoContainer(null, e, t, n);
    },
    unmountComponentAtNode: function(e) {
      c(e) || h("40");
      var t = f(e);
      return t ? (delete I[t._instance.rootID], S.batchedUpdates(u, t, e, !1), !0) : (l(e), 1 === e.nodeType && e.hasAttribute(E), !1);
    },
    _mountImageIntoNode: function(e, t, n, i, a) {
      if (c(t) || h("41"), i) {
        var s = o(t);
        if (k.canReuseMarkup(e, s)) return void v.precacheNode(n, s);
        var u = s.getAttribute(k.CHECKSUM_ATTR_NAME);
        s.removeAttribute(k.CHECKSUM_ATTR_NAME);
        var l = s.outerHTML;
        s.setAttribute(k.CHECKSUM_ATTR_NAME, u);
        var d = e,
          f = r(d, l),
          _ = " (client) " + d.substring(f - 20, f + 20) + "\n (server) " + l.substring(f - 20, f + 20);
        t.nodeType === O && h("42", _);
      }
      if (t.nodeType === O && h("43"), a.useCreateElement) {
        for (; t.lastChild;) t.removeChild(t.lastChild);
        p.insertTreeBefore(t, e, null);
      } else x(t, e), v.precacheNode(n, t.firstChild);
    }
  };
  e.exports = N;
}, function(e, t, n) {
  "use strict";
  var r = n(4),
    o = n(43),
    i = (n(2), {
      HOST: 0,
      COMPOSITE: 1,
      EMPTY: 2,
      getType: function(e) {
        return null === e || !1 === e ? i.EMPTY : o.isValidElement(e) ? "function" == typeof e.type ? i.COMPOSITE : i.HOST : void r("26", e);
      }
    });
  e.exports = i;
}, function(e, t, n) {
  "use strict";
  var r = {
    currentScrollLeft: 0,
    currentScrollTop: 0,
    refreshScrollValues: function(e) {
      r.currentScrollLeft = e.x, r.currentScrollTop = e.y;
    }
  };
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return null == t && o("30"), null == e ? t : Array.isArray(e) ? Array.isArray(t) ? (e.push.apply(e, t), e) : (e.push(t), e) : Array.isArray(t) ? [e].concat(t) : [e, t];
  }
  var o = n(4);
  n(2), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    Array.isArray(e) ? e.forEach(t, n) : e && t.call(n, e);
  }
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    for (var t;
      (t = e._renderedNodeType) === o.COMPOSITE;) e = e._renderedComponent;
    return t === o.HOST ? e._renderedComponent : t === o.EMPTY ? null : void 0;
  }
  var o = n(275);
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r() {
    return !i && o.canUseDOM && (i = "textContent" in document.documentElement ? "textContent" : "innerText"), i;
  }
  var o = n(15),
    i = null;
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if (e) {
      var t = e.getName();
      if (t) return " Check the render method of `" + t + "`.";
    }
    return "";
  }

  function o(e) {
    return "function" == typeof e && void 0 !== e.prototype && "function" == typeof e.prototype.mountComponent && "function" == typeof e.prototype.receiveComponent;
  }

  function i(e, t) {
    var n;
    if (null === e || !1 === e) n = l.create(i);
    else if ("object" == typeof e) {
      var s = e,
        u = s.type;
      if ("function" != typeof u && "string" != typeof u) {
        var f = "";
        f += r(s._owner), a("130", null == u ? u : typeof u, f);
      }
      "string" == typeof s.type ? n = c.createInternalComponent(s) : o(s.type) ? (n = new s.type(s), n.getHostNode || (n.getHostNode = n.getNativeNode)) : n = new d(s);
    } else "string" == typeof e || "number" == typeof e ? n = c.createInstanceForText(e) : a("131", typeof e);
    return n._mountIndex = 0, n._mountImage = null, n;
  }
  var a = n(4),
    s = n(6),
    u = n(471),
    l = n(270),
    c = n(272),
    d = (n(518), n(2), n(3), function(e) {
      this.construct(e);
    });
  s(d.prototype, u, {
    _instantiateReactComponent: i
  }), e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e && e.nodeName && e.nodeName.toLowerCase();
    return "input" === t ? !!o[e.type] : "textarea" === t;
  }
  var o = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0
  };
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(15),
    o = n(67),
    i = n(68),
    a = function(e, t) {
      if (t) {
        var n = e.firstChild;
        if (n && n === e.lastChild && 3 === n.nodeType) return void(n.nodeValue = t);
      }
      e.textContent = t;
    };
  r.canUseDOM && ("textContent" in document.documentElement || (a = function(e, t) {
    if (3 === e.nodeType) return void(e.nodeValue = t);
    i(e, o(t));
  })), e.exports = a;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return e && "object" == typeof e && null != e.key ? l.escape(e.key) : t.toString(36);
  }

  function o(e, t, n, i) {
    var f = typeof e;
    if ("undefined" !== f && "boolean" !== f || (e = null), null === e || "string" === f || "number" === f || "object" === f && e.$$typeof === s) return n(i, e, "" === t ? c + r(e, 0) : t), 1;
    var h, p, _ = 0,
      m = "" === t ? c : t + d;
    if (Array.isArray(e))
      for (var y = 0; y < e.length; y++) h = e[y], p = m + r(h, y), _ += o(h, p, n, i);
    else {
      var v = u(e);
      if (v) {
        var g, M = v.call(e);
        if (v !== e.entries)
          for (var b = 0; !(g = M.next()).done;) h = g.value, p = m + r(h, b++), _ += o(h, p, n, i);
        else
          for (; !(g = M.next()).done;) {
            var w = g.value;
            w && (h = w[1], p = m + l.escape(w[0]) + d + r(h, 0), _ += o(h, p, n, i));
          }
      } else if ("object" === f) {
        var k = String(e);
        a("31", "[object Object]" === k ? "object with keys {" + Object.keys(e).join(", ") + "}" : k, "");
      }
    }
    return _;
  }

  function i(e, t, n) {
    return null == e ? 0 : o(e, "", t, n);
  }
  var a = n(4),
    s = (n(24), n(486)),
    u = n(517),
    l = (n(2), n(103)),
    c = (n(3), "."),
    d = ":";
  e.exports = i;
}, function(e, t) {
  function n(e, t) {
    var n = e.nodeName.toLowerCase();
    return (/input|select|textarea|button|object/.test(n) ? !e.disabled : "a" === n ? e.href || t : t) && o(e);
  }

  function r(e) {
    return e.offsetWidth <= 0 && e.offsetHeight <= 0 || "none" === e.style.display;
  }

  function o(e) {
    for (; e && e !== document.body;) {
      if (r(e)) return !1;
      e = e.parentNode;
    }
    return !0;
  }

  function i(e) {
    var t = e.getAttribute("tabindex");
    null === t && (t = void 0);
    var r = isNaN(t);
    return (r || t >= 0) && n(e, !r);
  }

  function a(e) {
    return [].slice.call(e.querySelectorAll("*"), 0).filter(function(e) {
      return i(e);
    });
  }
  e.exports = a;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }

  function a(e, t) {
    var n = {};
    for (var r in e) t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);
    return n;
  }

  function s() {}

  function u(e, t) {
    var n = {
      run: function(r) {
        try {
          var o = e(t.getState(), r);
          (o !== n.props || n.error) && (n.shouldComponentUpdate = !0, n.props = o, n.error = null);
        } catch (e) {
          n.shouldComponentUpdate = !0, n.error = e;
        }
      }
    };
    return n;
  }

  function l(e) {
    var t, l, c = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
      f = c.getDisplayName,
      M = void 0 === f ? function(e) {
        return "ConnectAdvanced(" + e + ")";
      } : f,
      b = c.methodName,
      w = void 0 === b ? "connectAdvanced" : b,
      k = c.renderCountProp,
      L = void 0 === k ? void 0 : k,
      T = c.shouldHandleStateChanges,
      S = void 0 === T || T,
      Y = c.storeKey,
      D = void 0 === Y ? "store" : Y,
      x = c.withRef,
      C = void 0 !== x && x,
      P = a(c, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef"]),
      E = D + "Subscription",
      j = v++,
      O = (t = {}, t[D] = m.a, t[E] = m.b, t),
      R = (l = {}, l[E] = m.b, l);
    return function(t) {
      h()("function" == typeof t, "You must pass a component to the function returned by connect. Instead received " + JSON.stringify(t));
      var a = t.displayName || t.name || "Component",
        l = M(a),
        c = y({}, P, {
          getDisplayName: M,
          methodName: w,
          renderCountProp: L,
          shouldHandleStateChanges: S,
          storeKey: D,
          withRef: C,
          displayName: l,
          wrappedComponentName: a,
          WrappedComponent: t
        }),
        f = function(a) {
          function d(e, t) {
            r(this, d);
            var n = o(this, a.call(this, e, t));
            return n.version = j, n.state = {}, n.renderCount = 0, n.store = e[D] || t[D], n.propsMode = Boolean(e[D]), n.setWrappedInstance = n.setWrappedInstance.bind(n), h()(n.store, 'Could not find "' + D + '" in either the context or props of "' + l + '". Either wrap the root component in a <Provider>, or explicitly pass "' + D + '" as a prop to "' + l + '".'), n.initSelector(), n.initSubscription(), n;
          }
          return i(d, a), d.prototype.getChildContext = function() {
            var e, t = this.propsMode ? null : this.subscription;
            return e = {}, e[E] = t || this.context[E], e;
          }, d.prototype.componentDidMount = function() {
            S && (this.subscription.trySubscribe(), this.selector.run(this.props), this.selector.shouldComponentUpdate && this.forceUpdate());
          }, d.prototype.componentWillReceiveProps = function(e) {
            this.selector.run(e);
          }, d.prototype.shouldComponentUpdate = function() {
            return this.selector.shouldComponentUpdate;
          }, d.prototype.componentWillUnmount = function() {
            this.subscription && this.subscription.tryUnsubscribe(), this.subscription = null, this.notifyNestedSubs = s, this.store = null, this.selector.run = s, this.selector.shouldComponentUpdate = !1;
          }, d.prototype.getWrappedInstance = function() {
            return h()(C, "To access the wrapped instance, you need to specify { withRef: true } in the options argument of the " + w + "() call."), this.wrappedInstance;
          }, d.prototype.setWrappedInstance = function(e) {
            this.wrappedInstance = e;
          }, d.prototype.initSelector = function() {
            var t = e(this.store.dispatch, c);
            this.selector = u(t, this.store), this.selector.run(this.props);
          }, d.prototype.initSubscription = function() {
            if (S) {
              var e = (this.propsMode ? this.props : this.context)[E];
              this.subscription = new _.a(this.store, e, this.onStateChange.bind(this)), this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
            }
          }, d.prototype.onStateChange = function() {
            this.selector.run(this.props), this.selector.shouldComponentUpdate ? (this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate, this.setState(g)) : this.notifyNestedSubs();
          }, d.prototype.notifyNestedSubsOnComponentDidUpdate = function() {
            this.componentDidUpdate = void 0, this.notifyNestedSubs();
          }, d.prototype.isSubscribed = function() {
            return Boolean(this.subscription) && this.subscription.isSubscribed();
          }, d.prototype.addExtraProps = function(e) {
            if (!(C || L || this.propsMode && this.subscription)) return e;
            var t = y({}, e);
            return C && (t.ref = this.setWrappedInstance), L && (t[L] = this.renderCount++), this.propsMode && this.subscription && (t[E] = this.subscription), t;
          }, d.prototype.render = function() {
            var e = this.selector;
            if (e.shouldComponentUpdate = !1, e.error) throw e.error;
            return n.i(p.createElement)(t, this.addExtraProps(e.props));
          }, d;
        }(p.Component);
      return f.WrappedComponent = t, f.displayName = l, f.childContextTypes = R, f.contextTypes = O, f.propTypes = O, d()(f, t);
    };
  }
  var c = n(442),
    d = n.n(c),
    f = n(443),
    h = n.n(f),
    p = n(1),
    _ = (n.n(p), n(536)),
    m = n(288);
  t.a = l;
  var y = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    v = 0,
    g = {};
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return function(t, n) {
      function r() {
        return o;
      }
      var o = e(t, n);
      return r.dependsOnOwnProps = !1, r;
    };
  }

  function o(e) {
    return null !== e.dependsOnOwnProps && void 0 !== e.dependsOnOwnProps ? Boolean(e.dependsOnOwnProps) : 1 !== e.length;
  }

  function i(e, t) {
    return function(t, n) {
      var r = (n.displayName, function(e, t) {
        return r.dependsOnOwnProps ? r.mapToProps(e, t) : r.mapToProps(e);
      });
      return r.dependsOnOwnProps = !0, r.mapToProps = function(t, n) {
        r.mapToProps = e, r.dependsOnOwnProps = o(e);
        var i = r(t, n);
        return "function" == typeof i && (r.mapToProps = i, r.dependsOnOwnProps = o(i), i = r(t, n)), i;
      }, r;
    };
  }
  n(289), t.b = r, t.a = i;
}, function(e, t, n) {
  "use strict";
  var r = n(1);
  n.n(r), n.d(t, "b", function() {
    return o;
  }), n.d(t, "a", function() {
    return i;
  });
  var o = r.PropTypes.shape({
      trySubscribe: r.PropTypes.func.isRequired,
      tryUnsubscribe: r.PropTypes.func.isRequired,
      notifyNestedSubs: r.PropTypes.func.isRequired,
      isSubscribed: r.PropTypes.func.isRequired
    }),
    i = r.PropTypes.shape({
      subscribe: r.PropTypes.func.isRequired,
      dispatch: r.PropTypes.func.isRequired,
      getState: r.PropTypes.func.isRequired
    });
}, function(e, t, n) {
  "use strict";
  n(98), n(115);
}, function(e, t, n) {
  "use strict";
  var r = n(11),
    o = n.n(r),
    i = n(7),
    a = n.n(i),
    s = n(9),
    u = n.n(s),
    l = n(13),
    c = n.n(l),
    d = n(12),
    f = n.n(d),
    h = n(1),
    p = n.n(h);
  ((function(e) {
    function t(e, n) {
      a()(this, t);
      var r = c()(this, (t.__proto__ || o()(t)).call(this, e, n));
      return r.state = {
        scrollToColumn: e.scrollToColumn,
        scrollToRow: e.scrollToRow
      }, r._columnStartIndex = 0, r._columnStopIndex = 0, r._rowStartIndex = 0, r._rowStopIndex = 0, r._onKeyDown = r._onKeyDown.bind(r), r._onSectionRendered = r._onSectionRendered.bind(r), r;
    }
    return f()(t, e), u()(t, [{
      key: "componentWillReceiveProps",
      value: function(e) {
        var t = e.scrollToColumn,
          n = e.scrollToRow,
          r = this.props,
          o = r.scrollToColumn,
          i = r.scrollToRow;
        o !== t && i !== n ? this.setState({
          scrollToColumn: t,
          scrollToRow: n
        }) : o !== t ? this.setState({
          scrollToColumn: t
        }) : i !== n && this.setState({
          scrollToRow: n
        });
      }
    }, {
      key: "setScrollIndexes",
      value: function(e) {
        var t = e.scrollToColumn,
          n = e.scrollToRow;
        this.setState({
          scrollToRow: n,
          scrollToColumn: t
        });
      }
    }, {
      key: "render",
      value: function() {
        var e = this.props,
          t = e.className,
          n = e.children,
          r = this.state,
          o = r.scrollToColumn,
          i = r.scrollToRow;
        return p.a.createElement("div", {
          className: t,
          onKeyDown: this._onKeyDown
        }, n({
          onSectionRendered: this._onSectionRendered,
          scrollToColumn: o,
          scrollToRow: i
        }));
      }
    }, {
      key: "_onKeyDown",
      value: function(e) {
        var t = this.props,
          n = t.columnCount,
          r = t.disabled,
          o = t.mode,
          i = t.rowCount;
        if (!r) {
          var a = this.state,
            s = a.scrollToColumn,
            u = a.scrollToRow,
            l = this.state,
            c = l.scrollToColumn,
            d = l.scrollToRow;
          switch (e.key) {
            case "ArrowDown":
              d = "cells" === o ? Math.min(d + 1, i - 1) : Math.min(this._rowStopIndex + 1, i - 1);
              break;
            case "ArrowLeft":
              c = "cells" === o ? Math.max(c - 1, 0) : Math.max(this._columnStartIndex - 1, 0);
              break;
            case "ArrowRight":
              c = "cells" === o ? Math.min(c + 1, n - 1) : Math.min(this._columnStopIndex + 1, n - 1);
              break;
            case "ArrowUp":
              d = "cells" === o ? Math.max(d - 1, 0) : Math.max(this._rowStartIndex - 1, 0);
          }
          c === s && d === u || (e.preventDefault(), this.setState({
            scrollToColumn: c,
            scrollToRow: d
          }));
        }
      }
    }, {
      key: "_onSectionRendered",
      value: function(e) {
        var t = e.columnStartIndex,
          n = e.columnStopIndex,
          r = e.rowStartIndex,
          o = e.rowStopIndex;
        this._columnStartIndex = t, this._columnStopIndex = n, this._rowStartIndex = r, this._rowStopIndex = o;
      }
    }]), t;
  })(h.PureComponent)).defaultProps = {
    disabled: !1,
    mode: "edges",
    scrollToColumn: 0,
    scrollToRow: 0
  };
}, function(e, t, n) {
  "use strict";
  var r = n(11),
    o = n.n(r),
    i = n(7),
    a = n.n(i),
    s = n(9),
    u = n.n(s),
    l = n(13),
    c = n.n(l),
    d = n(12),
    f = n.n(d),
    h = n(1),
    p = n.n(h),
    _ = n(569),
    m = function(e) {
      function t(e) {
        a()(this, t);
        var n = c()(this, (t.__proto__ || o()(t)).call(this, e));
        return n.state = {
          height: 0,
          width: 0
        }, n._onResize = n._onResize.bind(n), n._setRef = n._setRef.bind(n), n;
      }
      return f()(t, e), u()(t, [{
        key: "componentDidMount",
        value: function() {
          this._parentNode = this._autoSizer.parentNode, this._detectElementResize = n.i(_.a)(), this._detectElementResize.addResizeListener(this._parentNode, this._onResize), this._onResize();
        }
      }, {
        key: "componentWillUnmount",
        value: function() {
          this._detectElementResize && this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props,
            t = e.children,
            n = e.disableHeight,
            r = e.disableWidth,
            o = this.state,
            i = o.height,
            a = o.width,
            s = {
              overflow: "visible"
            };
          return n || (s.height = 0), r || (s.width = 0), p.a.createElement("div", {
            ref: this._setRef,
            style: s
          }, t({
            height: i,
            width: a
          }));
        }
      }, {
        key: "_onResize",
        value: function() {
          var e = this.props,
            t = e.disableHeight,
            n = e.disableWidth,
            r = e.onResize,
            o = this._parentNode.offsetHeight || 0,
            i = this._parentNode.offsetWidth || 0,
            a = window.getComputedStyle(this._parentNode) || {},
            s = parseInt(a.paddingLeft, 10) || 0,
            u = parseInt(a.paddingRight, 10) || 0,
            l = parseInt(a.paddingTop, 10) || 0,
            c = parseInt(a.paddingBottom, 10) || 0,
            d = o - l - c,
            f = i - s - u;
          (!t && this.state.height !== d || !n && this.state.width !== f) && (this.setState({
            height: o - l - c,
            width: i - s - u
          }), r({
            height: o,
            width: i
          }));
        }
      }, {
        key: "_setRef",
        value: function(e) {
          this._autoSizer = e;
        }
      }]), t;
    }(h.PureComponent);
  m.defaultProps = {
    onResize: function() {}
  }, t.a = m;
}, function(e, t, n) {
  "use strict";
  var r = n(11),
    o = n.n(r),
    i = n(7),
    a = n.n(i),
    s = n(9),
    u = n.n(s),
    l = n(13),
    c = n.n(l),
    d = n(12),
    f = n.n(d),
    h = n(1),
    p = (n.n(h), n(19));
  n.n(p),
    function(e) {
      function t(e, n) {
        a()(this, t);
        var r = c()(this, (t.__proto__ || o()(t)).call(this, e, n));
        return r._measure = r._measure.bind(r), r;
      }
      f()(t, e), u()(t, [{
        key: "componentDidMount",
        value: function() {
          this._maybeMeasureCell();
        }
      }, {
        key: "componentDidUpdate",
        value: function(e, t) {
          this._maybeMeasureCell();
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props.children;
          return "function" == typeof e ? e({
            measure: this._measure
          }) : e;
        }
      }, {
        key: "_maybeMeasureCell",
        value: function() {
          var e = this.props,
            t = e.cache,
            r = e.columnIndex,
            o = void 0 === r ? 0 : r,
            i = e.parent,
            a = e.rowIndex,
            s = void 0 === a ? this.props.index : a;
          if (!t.has(s, o)) {
            var u = n.i(p.findDOMNode)(this);
            t.hasFixedWidth() || (u.style.width = "auto"), t.hasFixedHeight() || (u.style.height = "auto");
            var l = Math.ceil(u.offsetHeight),
              c = Math.ceil(u.offsetWidth);
            t.set(s, o, c, l), i && "function" == typeof i.invalidateCellSizeAfterRender && i.invalidateCellSizeAfterRender({
              columnIndex: o,
              rowIndex: s
            });
          }
        }
      }, {
        key: "_measure",
        value: function() {
          var e = this.props,
            t = e.cache,
            r = e.columnIndex,
            o = void 0 === r ? 0 : r,
            i = e.parent,
            a = e.rowIndex,
            s = void 0 === a ? this.props.index : a,
            u = n.i(p.findDOMNode)(this);
          t.hasFixedWidth() || (u.style.width = "auto"), t.hasFixedHeight() || (u.style.height = "auto");
          var l = Math.ceil(u.offsetHeight),
            c = Math.ceil(u.offsetWidth);
          l === t.getHeight(s, o) && c === t.getWidth(s, o) || (t.set(s, o, c, l), i && "function" == typeof i.recomputeGridSize && i.recomputeGridSize({
            columnIndex: o,
            rowIndex: s
          }));
        }
      }]);
    }(h.PureComponent);
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.cellCache,
      n = e.cellRenderer,
      r = e.cellSizeAndPositionGetter,
      o = e.indices,
      i = e.isScrolling;
    return o.map(function(e) {
      var o = r({
          index: e
        }),
        a = {
          index: e,
          isScrolling: i,
          key: e,
          style: {
            height: o.height,
            left: o.x,
            position: "absolute",
            top: o.y,
            width: o.width
          }
        };
      return i ? (e in t || (t[e] = n(a)), t[e]) : n(a);
    }).filter(function(e) {
      return !!e;
    });
  }
  var o = n(26),
    i = n.n(o),
    a = n(59),
    s = n.n(a),
    u = n(11),
    l = n.n(u),
    c = n(7),
    d = n.n(c),
    f = n(9),
    h = n.n(f),
    p = n(13),
    _ = n.n(p),
    m = n(12),
    y = n.n(m),
    v = n(1),
    g = n.n(v),
    M = n(546),
    b = n(550),
    w = n(567);
  ((function(e) {
    function t(e, n) {
      d()(this, t);
      var r = _()(this, (t.__proto__ || l()(t)).call(this, e, n));
      return r._cellMetadata = [], r._lastRenderedCellIndices = [], r._cellCache = [], r._isScrollingChange = r._isScrollingChange.bind(r), r._setCollectionViewRef = r._setCollectionViewRef.bind(r), r;
    }
    return y()(t, e), h()(t, [{
      key: "forceUpdate",
      value: function() {
        void 0 !== this._collectionView && this._collectionView.forceUpdate();
      }
    }, {
      key: "recomputeCellSizesAndPositions",
      value: function() {
        this._cellCache = [], this._collectionView.recomputeCellSizesAndPositions();
      }
    }, {
      key: "render",
      value: function() {
        var e = s()(this.props, []);
        return g.a.createElement(M.a, i()({
          cellLayoutManager: this,
          isScrollingChange: this._isScrollingChange,
          ref: this._setCollectionViewRef
        }, e));
      }
    }, {
      key: "calculateSizeAndPositionData",
      value: function() {
        var e = this.props,
          t = e.cellCount,
          r = e.cellSizeAndPositionGetter,
          o = e.sectionSize,
          i = n.i(b.a)({
            cellCount: t,
            cellSizeAndPositionGetter: r,
            sectionSize: o
          });
        this._cellMetadata = i.cellMetadata, this._sectionManager = i.sectionManager, this._height = i.height, this._width = i.width;
      }
    }, {
      key: "getLastRenderedIndices",
      value: function() {
        return this._lastRenderedCellIndices;
      }
    }, {
      key: "getScrollPositionForCell",
      value: function(e) {
        var t = e.align,
          r = e.cellIndex,
          o = e.height,
          i = e.scrollLeft,
          a = e.scrollTop,
          s = e.width,
          u = this.props.cellCount;
        if (r >= 0 && r < u) {
          var l = this._cellMetadata[r];
          i = n.i(w.a)({
            align: t,
            cellOffset: l.x,
            cellSize: l.width,
            containerSize: s,
            currentOffset: i,
            targetIndex: r
          }), a = n.i(w.a)({
            align: t,
            cellOffset: l.y,
            cellSize: l.height,
            containerSize: o,
            currentOffset: a,
            targetIndex: r
          });
        }
        return {
          scrollLeft: i,
          scrollTop: a
        };
      }
    }, {
      key: "getTotalSize",
      value: function() {
        return {
          height: this._height,
          width: this._width
        };
      }
    }, {
      key: "cellRenderers",
      value: function(e) {
        var t = this,
          n = e.height,
          r = e.isScrolling,
          o = e.width,
          i = e.x,
          a = e.y,
          s = this.props,
          u = s.cellGroupRenderer,
          l = s.cellRenderer;
        return this._lastRenderedCellIndices = this._sectionManager.getCellIndices({
          height: n,
          width: o,
          x: i,
          y: a
        }), u({
          cellCache: this._cellCache,
          cellRenderer: l,
          cellSizeAndPositionGetter: function(e) {
            var n = e.index;
            return t._sectionManager.getCellMetadata({
              index: n
            });
          },
          indices: this._lastRenderedCellIndices,
          isScrolling: r
        });
      }
    }, {
      key: "_isScrollingChange",
      value: function(e) {
        e || (this._cellCache = []);
      }
    }, {
      key: "_setCollectionViewRef",
      value: function(e) {
        this._collectionView = e;
      }
    }]), t;
  })(v.PureComponent)).defaultProps = {
    "aria-label": "grid",
    cellGroupRenderer: r
  };
}, function(e, t, n) {
  "use strict";
  var r = n(11),
    o = n.n(r),
    i = n(7),
    a = n.n(i),
    s = n(9),
    u = n.n(s),
    l = n(13),
    c = n.n(l),
    d = n(12),
    f = n.n(d),
    h = n(1);
  n.n(h),
    function(e) {
      function t(e, n) {
        a()(this, t);
        var r = c()(this, (t.__proto__ || o()(t)).call(this, e, n));
        return r._registerChild = r._registerChild.bind(r), r;
      }
      f()(t, e), u()(t, [{
        key: "componentDidUpdate",
        value: function(e, t) {
          var n = this.props,
            r = n.columnMaxWidth,
            o = n.columnMinWidth,
            i = n.columnCount,
            a = n.width;
          r === e.columnMaxWidth && o === e.columnMinWidth && i === e.columnCount && a === e.width || this._registeredChild && this._registeredChild.recomputeGridSize();
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props,
            t = e.children,
            n = e.columnMaxWidth,
            r = e.columnMinWidth,
            o = e.columnCount,
            i = e.width,
            a = r || 1,
            s = n ? Math.min(n, i) : i,
            u = i / o;
          return u = Math.max(a, u), u = Math.min(s, u), u = Math.floor(u), t({
            adjustedWidth: Math.min(i, u * o),
            columnWidth: u,
            getColumnWidth: function() {
              return u;
            },
            registerChild: this._registerChild
          });
        }
      }, {
        key: "_registerChild",
        value: function(e) {
          if (e && "function" != typeof e.recomputeGridSize) throw Error("Unexpected child type registered; only Grid/MultiGrid children are supported.");
          this._registeredChild = e, this._registeredChild && this._registeredChild.recomputeGridSize();
        }
      }]);
    }(h.PureComponent);
}, function(e, t, n) {
  "use strict";
  var r = n(26),
    o = n.n(r),
    i = n(11),
    a = n.n(i),
    s = n(7),
    u = n.n(s),
    l = n(9),
    c = n.n(l),
    d = n(13),
    f = n.n(d),
    h = n(12),
    p = n.n(h),
    _ = n(1),
    m = n.n(_),
    y = n(8),
    v = n.n(y),
    g = n(555),
    M = n(554),
    b = n(117),
    w = n(297),
    k = n(556),
    L = n(296),
    T = n(150),
    S = n.n(T),
    Y = {
      OBSERVED: "observed",
      REQUESTED: "requested"
    },
    D = function(e) {
      function t(e, r) {
        u()(this, t);
        var o = f()(this, (t.__proto__ || a()(t)).call(this, e, r));
        o.state = {
          isScrolling: !1,
          scrollDirectionHorizontal: w.a,
          scrollDirectionVertical: w.a,
          scrollLeft: 0,
          scrollTop: 0
        }, o._onGridRenderedMemoizer = n.i(b.a)(), o._onScrollMemoizer = n.i(b.a)(!1), o._debounceScrollEndedCallback = o._debounceScrollEndedCallback.bind(o), o._invokeOnGridRenderedHelper = o._invokeOnGridRenderedHelper.bind(o), o._onScroll = o._onScroll.bind(o), o._setScrollingContainerRef = o._setScrollingContainerRef.bind(o), o._columnWidthGetter = o._wrapSizeGetter(e.columnWidth), o._rowHeightGetter = o._wrapSizeGetter(e.rowHeight), o._deferredInvalidateColumnIndex = null, o._deferredInvalidateRowIndex = null, o._recomputeScrollLeftFlag = !1, o._recomputeScrollTopFlag = !1;
        var i = e.deferredMeasurementCache,
          s = void 0 !== i;
        return o._columnSizeAndPositionManager = new M.a({
          batchAllCells: s && !i.hasFixedHeight(),
          cellCount: e.columnCount,
          cellSizeGetter: function(e) {
            return o._columnWidthGetter(e);
          },
          estimatedCellSize: o._getEstimatedColumnSize(e)
        }), o._rowSizeAndPositionManager = new M.a({
          batchAllCells: s && !i.hasFixedWidth(),
          cellCount: e.rowCount,
          cellSizeGetter: function(e) {
            return o._rowHeightGetter(e);
          },
          estimatedCellSize: o._getEstimatedRowSize(e)
        }), o._cellCache = {}, o._styleCache = {}, o;
      }
      return p()(t, e), c()(t, [{
        key: "getOffsetForCell",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            t = e.alignment,
            n = void 0 === t ? this.props.scrollToAlignment : t,
            r = e.columnIndex,
            i = void 0 === r ? this.props.scrollToColumn : r,
            a = e.rowIndex,
            s = void 0 === a ? this.props.scrollToRow : a,
            u = o()({}, this.props, {
              scrollToAlignment: n,
              scrollToColumn: i,
              scrollToRow: s
            });
          return {
            scrollLeft: this._getCalculatedScrollLeft(u),
            scrollTop: this._getCalculatedScrollTop(u)
          };
        }
      }, {
        key: "invalidateCellSizeAfterRender",
        value: function(e) {
          var t = e.columnIndex,
            n = e.rowIndex;
          this._deferredInvalidateColumnIndex = "number" == typeof this._deferredInvalidateColumnIndex ? Math.min(this._deferredInvalidateColumnIndex, t) : t, this._deferredInvalidateRowIndex = "number" == typeof this._deferredInvalidateRowIndex ? Math.min(this._deferredInvalidateRowIndex, n) : n;
        }
      }, {
        key: "measureAllCells",
        value: function() {
          var e = this.props,
            t = e.columnCount,
            n = e.rowCount;
          this._columnSizeAndPositionManager.getSizeAndPositionOfCell(t - 1), this._rowSizeAndPositionManager.getSizeAndPositionOfCell(n - 1);
        }
      }, {
        key: "recomputeGridSize",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            t = e.columnIndex,
            n = void 0 === t ? 0 : t,
            r = e.rowIndex,
            o = void 0 === r ? 0 : r,
            i = this.props,
            a = i.scrollToColumn,
            s = i.scrollToRow;
          this._columnSizeAndPositionManager.resetCell(n), this._rowSizeAndPositionManager.resetCell(o), this._recomputeScrollLeftFlag = a >= 0 && n <= a, this._recomputeScrollTopFlag = s >= 0 && o <= s, this._cellCache = {}, this._styleCache = {}, this.forceUpdate();
        }
      }, {
        key: "scrollToCell",
        value: function(e) {
          var t = e.columnIndex,
            n = e.rowIndex,
            r = this.props.columnCount,
            i = this.props;
          r > 1 && this._updateScrollLeftForScrollToColumn(o()({}, i, {
            scrollToColumn: t
          })), this._updateScrollTopForScrollToRow(o()({}, i, {
            scrollToRow: n
          }));
        }
      }, {
        key: "scrollToPosition",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
            t = e.scrollLeft,
            n = e.scrollTop;
          this._setScrollPosition({
            scrollLeft: t,
            scrollTop: n
          });
        }
      }, {
        key: "componentDidMount",
        value: function() {
          var e = this.props,
            t = e.getScrollbarSize,
            n = e.scrollLeft,
            r = e.scrollToColumn,
            o = e.scrollTop,
            i = e.scrollToRow;
          this._handleInvalidatedGridSize(), this._scrollbarSizeMeasured || (this._scrollbarSize = t(), this._scrollbarSizeMeasured = !0, this.setState({})), (n >= 0 || o >= 0) && this._setScrollPosition({
            scrollLeft: n,
            scrollTop: o
          }), (r >= 0 || i >= 0) && (this._updateScrollLeftForScrollToColumn(), this._updateScrollTopForScrollToRow()), this._invokeOnGridRenderedHelper(), this._invokeOnScrollMemoizer({
            scrollLeft: n || 0,
            scrollTop: o || 0,
            totalColumnsWidth: this._columnSizeAndPositionManager.getTotalSize(),
            totalRowsHeight: this._rowSizeAndPositionManager.getTotalSize()
          });
        }
      }, {
        key: "componentDidUpdate",
        value: function(e, t) {
          var r = this,
            o = this.props,
            i = o.autoHeight,
            a = o.autoWidth,
            s = o.columnCount,
            u = o.height,
            l = o.rowCount,
            c = o.scrollToAlignment,
            d = o.scrollToColumn,
            f = o.scrollToRow,
            h = o.width,
            p = this.state,
            _ = p.scrollLeft,
            m = p.scrollPositionChangeReason,
            y = p.scrollTop;
          this._handleInvalidatedGridSize();
          var v = s > 0 && 0 === e.columnCount || l > 0 && 0 === e.rowCount;
          if (m === Y.REQUESTED && (!a && _ >= 0 && (_ !== t.scrollLeft && _ !== this._scrollingContainer.scrollLeft || v) && (this._scrollingContainer.scrollLeft = _), !i && y >= 0 && (y !== t.scrollTop && y !== this._scrollingContainer.scrollTop || v) && (this._scrollingContainer.scrollTop = y)), this._recomputeScrollLeftFlag ? (this._recomputeScrollLeftFlag = !1, this._updateScrollLeftForScrollToColumn(this.props)) : n.i(k.a)({
              cellSizeAndPositionManager: this._columnSizeAndPositionManager,
              previousCellsCount: e.columnCount,
              previousCellSize: e.columnWidth,
              previousScrollToAlignment: e.scrollToAlignment,
              previousScrollToIndex: e.scrollToColumn,
              previousSize: e.width,
              scrollOffset: _,
              scrollToAlignment: c,
              scrollToIndex: d,
              size: h,
              updateScrollIndexCallback: function(e) {
                return r._updateScrollLeftForScrollToColumn(r.props);
              }
            }), this._recomputeScrollTopFlag ? (this._recomputeScrollTopFlag = !1, this._updateScrollTopForScrollToRow(this.props)) : n.i(k.a)({
              cellSizeAndPositionManager: this._rowSizeAndPositionManager,
              previousCellsCount: e.rowCount,
              previousCellSize: e.rowHeight,
              previousScrollToAlignment: e.scrollToAlignment,
              previousScrollToIndex: e.scrollToRow,
              previousSize: e.height,
              scrollOffset: y,
              scrollToAlignment: c,
              scrollToIndex: f,
              size: u,
              updateScrollIndexCallback: function(e) {
                return r._updateScrollTopForScrollToRow(r.props);
              }
            }), this._invokeOnGridRenderedHelper(), _ !== t.scrollLeft || y !== t.scrollTop) {
            var g = this._rowSizeAndPositionManager.getTotalSize(),
              M = this._columnSizeAndPositionManager.getTotalSize();
            this._invokeOnScrollMemoizer({
              scrollLeft: _,
              scrollTop: y,
              totalColumnsWidth: M,
              totalRowsHeight: g
            });
          }
        }
      }, {
        key: "componentWillMount",
        value: function() {
          var e = this.props.getScrollbarSize;
          this._scrollbarSize = e(), void 0 === this._scrollbarSize ? (this._scrollbarSizeMeasured = !1, this._scrollbarSize = 0) : this._scrollbarSizeMeasured = !0, this._calculateChildrenToRender();
        }
      }, {
        key: "componentWillUnmount",
        value: function() {
          this._disablePointerEventsTimeoutId && clearTimeout(this._disablePointerEventsTimeoutId);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function(e) {
          var t = this,
            r = this.state,
            o = r.scrollLeft,
            i = r.scrollTop;
          if (0 === e.columnCount && 0 !== o || 0 === e.rowCount && 0 !== i) this._setScrollPosition({
            scrollLeft: 0,
            scrollTop: 0
          });
          else if (e.scrollLeft !== this.props.scrollLeft || e.scrollTop !== this.props.scrollTop) {
            var a = {};
            null != e.scrollLeft && (a.scrollLeft = e.scrollLeft), null != e.scrollTop && (a.scrollTop = e.scrollTop), this._setScrollPosition(a);
          }
          e.columnWidth === this.props.columnWidth && e.rowHeight === this.props.rowHeight || (this._styleCache = {}), this._columnWidthGetter = this._wrapSizeGetter(e.columnWidth), this._rowHeightGetter = this._wrapSizeGetter(e.rowHeight), this._columnSizeAndPositionManager.configure({
            cellCount: e.columnCount,
            estimatedCellSize: this._getEstimatedColumnSize(e)
          }), this._rowSizeAndPositionManager.configure({
            cellCount: e.rowCount,
            estimatedCellSize: this._getEstimatedRowSize(e)
          });
          var s = this.props,
            u = s.columnCount,
            l = s.rowCount;
          0 !== u && 0 !== l || (u = 0, l = 0), n.i(g.a)({
            cellCount: u,
            cellSize: this.props.columnWidth,
            computeMetadataCallback: function() {
              return t._columnSizeAndPositionManager.resetCell(0);
            },
            computeMetadataCallbackProps: e,
            nextCellsCount: e.columnCount,
            nextCellSize: e.columnWidth,
            nextScrollToIndex: e.scrollToColumn,
            scrollToIndex: this.props.scrollToColumn,
            updateScrollOffsetForScrollToIndex: function() {
              return t._updateScrollLeftForScrollToColumn(e, t.state);
            }
          }), n.i(g.a)({
            cellCount: l,
            cellSize: this.props.rowHeight,
            computeMetadataCallback: function() {
              return t._rowSizeAndPositionManager.resetCell(0);
            },
            computeMetadataCallbackProps: e,
            nextCellsCount: e.rowCount,
            nextCellSize: e.rowHeight,
            nextScrollToIndex: e.scrollToRow,
            scrollToIndex: this.props.scrollToRow,
            updateScrollOffsetForScrollToIndex: function() {
              return t._updateScrollTopForScrollToRow(e, t.state);
            }
          });
        }
      }, {
        key: "componentWillUpdate",
        value: function(e, t) {
          this._calculateChildrenToRender(e, t);
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props,
            t = e.autoContainerWidth,
            n = e.autoHeight,
            r = e.autoWidth,
            i = e.className,
            a = e.containerStyle,
            s = e.height,
            u = e.id,
            l = e.noContentRenderer,
            c = e.role,
            d = e.style,
            f = e.tabIndex,
            h = e.width,
            p = this._isScrolling(),
            _ = {
              boxSizing: "border-box",
              direction: "ltr",
              height: n ? "auto" : s,
              position: "relative",
              width: r ? "auto" : h,
              WebkitOverflowScrolling: "touch",
              willChange: "transform"
            },
            y = this._columnSizeAndPositionManager.getTotalSize(),
            g = this._rowSizeAndPositionManager.getTotalSize(),
            M = g > s ? this._scrollbarSize : 0,
            b = y > h ? this._scrollbarSize : 0;
          _.overflowX = y + M <= h ? "hidden" : "auto", _.overflowY = g + b <= s ? "hidden" : "auto";
          var w = this._childrenToDisplay,
            k = 0 === w.length && s > 0 && h > 0;
          return m.a.createElement("div", {
            ref: this._setScrollingContainerRef,
            "aria-label": this.props["aria-label"],
            className: v()("ReactVirtualized__Grid", i),
            id: u,
            onScroll: this._onScroll,
            role: c,
            style: o()({}, _, d),
            tabIndex: f
          }, w.length > 0 && m.a.createElement("div", {
            className: "ReactVirtualized__Grid__innerScrollContainer",
            style: o()({
              width: t ? "auto" : y,
              height: g,
              maxWidth: y,
              maxHeight: g,
              overflow: "hidden",
              pointerEvents: p ? "none" : "",
              position: "relative"
            }, a)
          }, w), k && l());
        }
      }, {
        key: "_calculateChildrenToRender",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props,
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.state,
            n = e.cellRenderer,
            r = e.cellRangeRenderer,
            o = e.columnCount,
            i = e.deferredMeasurementCache,
            a = e.height,
            s = e.overscanColumnCount,
            u = e.overscanIndicesGetter,
            l = e.overscanRowCount,
            c = e.rowCount,
            d = e.width,
            f = t.scrollDirectionHorizontal,
            h = t.scrollDirectionVertical,
            p = t.scrollLeft,
            _ = t.scrollTop,
            m = this._isScrolling(e, t);
          if (this._childrenToDisplay = [], a > 0 && d > 0) {
            var y = this._columnSizeAndPositionManager.getVisibleCellRange({
                containerSize: d,
                offset: p
              }),
              v = this._rowSizeAndPositionManager.getVisibleCellRange({
                containerSize: a,
                offset: _
              }),
              g = this._columnSizeAndPositionManager.getOffsetAdjustment({
                containerSize: d,
                offset: p
              }),
              M = this._rowSizeAndPositionManager.getOffsetAdjustment({
                containerSize: a,
                offset: _
              });
            this._renderedColumnStartIndex = y.start, this._renderedColumnStopIndex = y.stop, this._renderedRowStartIndex = v.start, this._renderedRowStopIndex = v.stop;
            var b = u({
                direction: "horizontal",
                cellCount: o,
                overscanCellsCount: s,
                scrollDirection: f,
                startIndex: this._renderedColumnStartIndex,
                stopIndex: this._renderedColumnStopIndex
              }),
              w = u({
                direction: "vertical",
                cellCount: c,
                overscanCellsCount: l,
                scrollDirection: h,
                startIndex: this._renderedRowStartIndex,
                stopIndex: this._renderedRowStopIndex
              });
            this._columnStartIndex = b.overscanStartIndex, this._columnStopIndex = b.overscanStopIndex, this._rowStartIndex = w.overscanStartIndex, this._rowStopIndex = w.overscanStopIndex, this._childrenToDisplay = r({
              cellCache: this._cellCache,
              cellRenderer: n,
              columnSizeAndPositionManager: this._columnSizeAndPositionManager,
              columnStartIndex: this._columnStartIndex,
              columnStopIndex: this._columnStopIndex,
              deferredMeasurementCache: i,
              horizontalOffsetAdjustment: g,
              isScrolling: m,
              parent: this,
              rowSizeAndPositionManager: this._rowSizeAndPositionManager,
              rowStartIndex: this._rowStartIndex,
              rowStopIndex: this._rowStopIndex,
              scrollLeft: p,
              scrollTop: _,
              styleCache: this._styleCache,
              verticalOffsetAdjustment: M,
              visibleColumnIndices: y,
              visibleRowIndices: v
            });
          }
        }
      }, {
        key: "_debounceScrollEnded",
        value: function() {
          var e = this.props.scrollingResetTimeInterval;
          this._disablePointerEventsTimeoutId && clearTimeout(this._disablePointerEventsTimeoutId), this._disablePointerEventsTimeoutId = setTimeout(this._debounceScrollEndedCallback, e);
        }
      }, {
        key: "_debounceScrollEndedCallback",
        value: function() {
          this._disablePointerEventsTimeoutId = null;
          var e = this._styleCache;
          this._cellCache = {}, this._styleCache = {};
          for (var t = this._rowStartIndex; t <= this._rowStopIndex; t++)
            for (var n = this._columnStartIndex; n <= this._columnStopIndex; n++) {
              var r = t + "-" + n;
              this._styleCache[r] = e[r];
            }
          this.setState({
            isScrolling: !1
          });
        }
      }, {
        key: "_getEstimatedColumnSize",
        value: function(e) {
          return "number" == typeof e.columnWidth ? e.columnWidth : e.estimatedColumnSize;
        }
      }, {
        key: "_getEstimatedRowSize",
        value: function(e) {
          return "number" == typeof e.rowHeight ? e.rowHeight : e.estimatedRowSize;
        }
      }, {
        key: "_handleInvalidatedGridSize",
        value: function() {
          if ("number" == typeof this._deferredInvalidateColumnIndex) {
            var e = this._deferredInvalidateColumnIndex,
              t = this._deferredInvalidateRowIndex;
            this._deferredInvalidateColumnIndex = null, this._deferredInvalidateRowIndex = null, this.recomputeGridSize({
              columnIndex: e,
              rowIndex: t
            });
          }
        }
      }, {
        key: "_invokeOnGridRenderedHelper",
        value: function() {
          var e = this.props.onSectionRendered;
          this._onGridRenderedMemoizer({
            callback: e,
            indices: {
              columnOverscanStartIndex: this._columnStartIndex,
              columnOverscanStopIndex: this._columnStopIndex,
              columnStartIndex: this._renderedColumnStartIndex,
              columnStopIndex: this._renderedColumnStopIndex,
              rowOverscanStartIndex: this._rowStartIndex,
              rowOverscanStopIndex: this._rowStopIndex,
              rowStartIndex: this._renderedRowStartIndex,
              rowStopIndex: this._renderedRowStopIndex
            }
          });
        }
      }, {
        key: "_invokeOnScrollMemoizer",
        value: function(e) {
          var t = this,
            n = e.scrollLeft,
            r = e.scrollTop,
            o = e.totalColumnsWidth,
            i = e.totalRowsHeight;
          this._onScrollMemoizer({
            callback: function(e) {
              var n = e.scrollLeft,
                r = e.scrollTop,
                a = t.props,
                s = a.height;
              (0, a.onScroll)({
                clientHeight: s,
                clientWidth: a.width,
                scrollHeight: i,
                scrollLeft: n,
                scrollTop: r,
                scrollWidth: o
              });
            },
            indices: {
              scrollLeft: n,
              scrollTop: r
            }
          });
        }
      }, {
        key: "_isScrolling",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props,
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.state;
          return Object.hasOwnProperty.call(e, "isScrolling") ? e.isScrolling : t.isScrolling;
        }
      }, {
        key: "_setScrollingContainerRef",
        value: function(e) {
          this._scrollingContainer = e;
        }
      }, {
        key: "_setScrollPosition",
        value: function(e) {
          var t = e.scrollLeft,
            n = e.scrollTop,
            r = {
              scrollPositionChangeReason: Y.REQUESTED
            };
          t >= 0 && (r.scrollDirectionHorizontal = t > this.state.scrollLeft ? w.a : w.b, r.scrollLeft = t), n >= 0 && (r.scrollDirectionVertical = n > this.state.scrollTop ? w.a : w.b, r.scrollTop = n), (t >= 0 && t !== this.state.scrollLeft || n >= 0 && n !== this.state.scrollTop) && this.setState(r);
        }
      }, {
        key: "_wrapPropertyGetter",
        value: function(e) {
          return "function" == typeof e ? e : function() {
            return e;
          };
        }
      }, {
        key: "_wrapSizeGetter",
        value: function(e) {
          return this._wrapPropertyGetter(e);
        }
      }, {
        key: "_getCalculatedScrollLeft",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props,
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.state,
            n = e.columnCount,
            r = e.height,
            o = e.scrollToAlignment,
            i = e.scrollToColumn,
            a = e.width,
            s = t.scrollLeft;
          if (i >= 0 && n > 0) {
            var u = Math.max(0, Math.min(n - 1, i)),
              l = this._rowSizeAndPositionManager.getTotalSize(),
              c = l > r ? this._scrollbarSize : 0;
            return this._columnSizeAndPositionManager.getUpdatedOffsetForIndex({
              align: o,
              containerSize: a - c,
              currentOffset: s,
              targetIndex: u
            });
          }
        }
      }, {
        key: "_updateScrollLeftForScrollToColumn",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props,
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.state,
            n = t.scrollLeft,
            r = this._getCalculatedScrollLeft(e, t);
          r >= 0 && n !== r && this._setScrollPosition({
            scrollLeft: r
          });
        }
      }, {
        key: "_getCalculatedScrollTop",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props,
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.state,
            n = e.height,
            r = e.rowCount,
            o = e.scrollToAlignment,
            i = e.scrollToRow,
            a = e.width,
            s = t.scrollTop;
          if (i >= 0 && r > 0) {
            var u = Math.max(0, Math.min(r - 1, i)),
              l = this._columnSizeAndPositionManager.getTotalSize(),
              c = l > a ? this._scrollbarSize : 0;
            return this._rowSizeAndPositionManager.getUpdatedOffsetForIndex({
              align: o,
              containerSize: n - c,
              currentOffset: s,
              targetIndex: u
            });
          }
        }
      }, {
        key: "_updateScrollTopForScrollToRow",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.props,
            t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : this.state,
            n = t.scrollTop,
            r = this._getCalculatedScrollTop(e, t);
          r >= 0 && n !== r && this._setScrollPosition({
            scrollTop: r
          });
        }
      }, {
        key: "_onScroll",
        value: function(e) {
          if (e.target === this._scrollingContainer && !(e.target.scrollTop < 0)) {
            this._debounceScrollEnded();
            var t = this.props,
              n = t.autoHeight,
              r = t.autoWidth,
              o = t.height,
              i = t.width,
              a = e.target,
              s = a.scrollLeft,
              u = a.scrollTop,
              l = this._scrollbarSize,
              c = this._rowSizeAndPositionManager.getTotalSize(),
              d = this._columnSizeAndPositionManager.getTotalSize(),
              f = Math.min(Math.max(0, d - i + l), s),
              h = Math.min(Math.max(0, c - o + l), u);
            if (this.state.scrollLeft !== f || this.state.scrollTop !== h) {
              var p = f !== this.state.scrollLeft ? f > this.state.scrollLeft ? w.a : w.b : this.state.scrollDirectionHorizontal,
                _ = h !== this.state.scrollTop ? h > this.state.scrollTop ? w.a : w.b : this.state.scrollDirectionVertical,
                m = {
                  isScrolling: !0,
                  scrollDirectionHorizontal: p,
                  scrollDirectionVertical: _,
                  scrollPositionChangeReason: Y.OBSERVED
                };
              n || (m.scrollTop = h), r || (m.scrollLeft = f), this.setState(m);
            }
            this._invokeOnScrollMemoizer({
              scrollLeft: f,
              scrollTop: h,
              totalColumnsWidth: d,
              totalRowsHeight: c
            });
          }
        }
      }]), t;
    }(_.PureComponent);
  D.defaultProps = {
    "aria-label": "grid",
    cellRangeRenderer: L.a,
    estimatedColumnSize: 100,
    estimatedRowSize: 30,
    getScrollbarSize: S.a,
    noContentRenderer: function() {
      return null;
    },
    onScroll: function() {
      return null;
    },
    onSectionRendered: function() {
      return null;
    },
    overscanColumnCount: 0,
    overscanIndicesGetter: w.c,
    overscanRowCount: 10,
    role: "grid",
    scrollingResetTimeInterval: 150,
    scrollToAlignment: "auto",
    scrollToColumn: -1,
    scrollToRow: -1,
    style: {},
    tabIndex: 0
  }, t.a = D;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    for (var t = e.cellCache, n = e.cellRenderer, r = e.columnSizeAndPositionManager, o = e.columnStartIndex, i = e.columnStopIndex, a = e.deferredMeasurementCache, s = e.horizontalOffsetAdjustment, u = e.isScrolling, l = e.parent, c = e.rowSizeAndPositionManager, d = e.rowStartIndex, f = e.rowStopIndex, h = (e.scrollLeft, e.scrollTop, e.styleCache), p = e.verticalOffsetAdjustment, _ = e.visibleColumnIndices, m = e.visibleRowIndices, y = void 0 !== a, v = [], g = r.areOffsetsAdjusted() || c.areOffsetsAdjusted(), M = !u || !g, b = d; b <= f; b++)
      for (var w = c.getSizeAndPositionOfCell(b), k = o; k <= i; k++) {
        var L = r.getSizeAndPositionOfCell(k),
          T = k >= _.start && k <= _.stop && b >= m.start && b <= m.stop,
          S = b + "-" + k,
          Y = void 0;
        M && h[S] ? Y = h[S] : y && !a.has(b, k) ? Y = {
          height: "auto",
          left: 0,
          position: "absolute",
          top: 0,
          width: "auto"
        } : (Y = {
          height: w.size,
          left: L.offset + s,
          position: "absolute",
          top: w.offset + p,
          width: L.size
        }, h[S] = Y);
        var D = {
            columnIndex: k,
            isScrolling: u,
            isVisible: T,
            key: S,
            parent: l,
            rowIndex: b,
            style: Y
          },
          x = void 0;
        !u || s || p ? x = n(D) : (t[S] || (t[S] = n(D)), x = t[S]), null != x && !1 !== x && v.push(x);
      }
    return v;
  }
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = (e.direction, e.cellCount),
      n = e.overscanCellsCount,
      r = e.scrollDirection,
      a = e.startIndex,
      s = e.stopIndex,
      u = void 0,
      l = void 0;
    switch (r) {
      case i:
        u = a, l = s + n;
        break;
      case o:
        u = a - n, l = s;
    }
    return {
      overscanStartIndex: Math.max(0, u),
      overscanStopIndex: Math.min(t - 1, l)
    };
  }
  n.d(t, "b", function() {
    return o;
  }), n.d(t, "a", function() {
    return i;
  }), t.c = r;
  var o = -1,
    i = 1;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.lastRenderedStartIndex,
      n = e.lastRenderedStopIndex,
      r = e.startIndex,
      o = e.stopIndex;
    return !(r > n || o < t);
  }

  function o(e) {
    for (var t = e.isRowLoaded, n = e.minimumBatchSize, r = e.rowCount, o = e.startIndex, i = e.stopIndex, a = [], s = null, u = null, l = o; l <= i; l++) t({
      index: l
    }) ? null !== u && (a.push({
      startIndex: s,
      stopIndex: u
    }), s = u = null) : (u = l, null === s && (s = l));
    if (null !== u) {
      for (var c = Math.min(Math.max(u, s + n - 1), r - 1), d = u + 1; d <= c && !t({
          index: d
        }); d++) u = d;
      a.push({
        startIndex: s,
        stopIndex: u
      });
    }
    if (a.length)
      for (var f = a[0]; f.stopIndex - f.startIndex + 1 < n && f.startIndex > 0;) {
        var h = f.startIndex - 1;
        if (t({
            index: h
          })) break;
        f.startIndex = h;
      }
    return a;
  }

  function i(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
      n = "function" == typeof e.recomputeGridSize ? e.recomputeGridSize : e.recomputeRowHeights;
    n ? n.call(e, t) : e.forceUpdate();
  }
  var a = n(11),
    s = n.n(a),
    u = n(7),
    l = n.n(u),
    c = n(9),
    d = n.n(c),
    f = n(13),
    h = n.n(f),
    p = n(12),
    _ = n.n(p),
    m = n(1),
    y = (n.n(m), n(117));
  ((function(e) {
    function t(e, r) {
      l()(this, t);
      var o = h()(this, (t.__proto__ || s()(t)).call(this, e, r));
      return o._loadMoreRowsMemoizer = n.i(y.a)(), o._onRowsRendered = o._onRowsRendered.bind(o), o._registerChild = o._registerChild.bind(o), o;
    }
    return _()(t, e), d()(t, [{
      key: "resetLoadMoreRowsCache",
      value: function() {
        this._loadMoreRowsMemoizer = n.i(y.a)();
      }
    }, {
      key: "render",
      value: function() {
        return (0, this.props.children)({
          onRowsRendered: this._onRowsRendered,
          registerChild: this._registerChild
        });
      }
    }, {
      key: "_loadUnloadedRanges",
      value: function(e) {
        var t = this,
          n = this.props.loadMoreRows;
        e.forEach(function(e) {
          var o = n(e);
          o && o.then(function() {
            r({
              lastRenderedStartIndex: t._lastRenderedStartIndex,
              lastRenderedStopIndex: t._lastRenderedStopIndex,
              startIndex: e.startIndex,
              stopIndex: e.stopIndex
            }) && t._registeredChild && i(t._registeredChild, t._lastRenderedStartIndex);
          });
        });
      }
    }, {
      key: "_onRowsRendered",
      value: function(e) {
        var t = this,
          n = e.startIndex,
          r = e.stopIndex,
          i = this.props,
          a = i.isRowLoaded,
          s = i.minimumBatchSize,
          u = i.rowCount,
          l = i.threshold;
        this._lastRenderedStartIndex = n, this._lastRenderedStopIndex = r;
        var c = o({
            isRowLoaded: a,
            minimumBatchSize: s,
            rowCount: u,
            startIndex: Math.max(0, n - l),
            stopIndex: Math.min(u - 1, r + l)
          }),
          d = c.reduce(function(e, t) {
            return e.concat([t.startIndex, t.stopIndex]);
          }, []);
        this._loadMoreRowsMemoizer({
          callback: function() {
            t._loadUnloadedRanges(c);
          },
          indices: {
            squashedUnloadedRanges: d
          }
        });
      }
    }, {
      key: "_registerChild",
      value: function(e) {
        this._registeredChild = e;
      }
    }]), t;
  })(m.PureComponent)).defaultProps = {
    minimumBatchSize: 10,
    rowCount: 0,
    threshold: 15
  };
}, function(e, t, n) {
  "use strict";
  var r = n(376),
    o = n.n(r),
    i = n(59),
    a = n.n(i),
    s = n(26),
    u = n.n(s),
    l = n(11),
    c = n.n(l),
    d = n(7),
    f = n.n(d),
    h = n(9),
    p = n.n(h),
    _ = n(13),
    m = n.n(_),
    y = n(12),
    v = n.n(y),
    g = n(69),
    M = n(1),
    b = n.n(M),
    w = n(8),
    k = n.n(w),
    L = function(e) {
      function t(e, n) {
        f()(this, t);
        var r = m()(this, (t.__proto__ || c()(t)).call(this, e, n));
        return r._cellRenderer = r._cellRenderer.bind(r), r._onScroll = r._onScroll.bind(r), r._onSectionRendered = r._onSectionRendered.bind(r), r._setRef = r._setRef.bind(r), r;
      }
      return v()(t, e), p()(t, [{
        key: "forceUpdateGrid",
        value: function() {
          this.Grid.forceUpdate();
        }
      }, {
        key: "measureAllRows",
        value: function() {
          this.Grid.measureAllCells();
        }
      }, {
        key: "recomputeRowHeights",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          this.Grid.recomputeGridSize({
            rowIndex: e
          });
        }
      }, {
        key: "getOffsetForRow",
        value: function(e) {
          var t = e.alignment,
            n = e.index;
          return this.Grid.getOffsetForCell({
            alignment: t,
            rowIndex: n
          }).scrollTop;
        }
      }, {
        key: "scrollToPosition",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          this.Grid.scrollToPosition({
            scrollTop: e
          });
        }
      }, {
        key: "scrollToRow",
        value: function() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
          this.Grid.scrollToCell({
            columnIndex: 0,
            rowIndex: e
          });
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props,
            t = e.className,
            n = e.noRowsRenderer,
            r = e.scrollToIndex,
            o = e.width,
            i = k()("ReactVirtualized__List", t);
          return b.a.createElement(g.a, u()({}, this.props, {
            autoContainerWidth: !0,
            cellRenderer: this._cellRenderer,
            className: i,
            columnWidth: o,
            columnCount: 1,
            noContentRenderer: n,
            onScroll: this._onScroll,
            onSectionRendered: this._onSectionRendered,
            ref: this._setRef,
            scrollToRow: r
          }));
        }
      }, {
        key: "_cellRenderer",
        value: function(e) {
          var t = e.rowIndex,
            n = e.style,
            r = a()(e, ["rowIndex", "style"]),
            i = this.props.rowRenderer;
          return o()(n, "width").writable && (n.width = "100%"), i(u()({
            index: t,
            style: n
          }, r));
        }
      }, {
        key: "_setRef",
        value: function(e) {
          this.Grid = e;
        }
      }, {
        key: "_onScroll",
        value: function(e) {
          var t = e.clientHeight,
            n = e.scrollHeight,
            r = e.scrollTop;
          (0, this.props.onScroll)({
            clientHeight: t,
            scrollHeight: n,
            scrollTop: r
          });
        }
      }, {
        key: "_onSectionRendered",
        value: function(e) {
          var t = e.rowOverscanStartIndex,
            n = e.rowOverscanStopIndex,
            r = e.rowStartIndex,
            o = e.rowStopIndex;
          (0, this.props.onRowsRendered)({
            overscanStartIndex: t,
            overscanStopIndex: n,
            startIndex: r,
            stopIndex: o
          });
        }
      }]), t;
    }(M.PureComponent);
  L.defaultProps = {
    estimatedRowSize: 30,
    noRowsRenderer: function() {
      return null;
    },
    onRowsRendered: function() {
      return null;
    },
    onScroll: function() {
      return null;
    },
    overscanIndicesGetter: g.b,
    overscanRowCount: 10,
    scrollToAlignment: "auto",
    scrollToIndex: -1,
    style: {}
  }, t.a = L;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e;
  }

  function o() {}
  var i = n(26),
    a = n.n(i),
    s = n(11),
    u = n.n(s),
    l = n(7),
    c = n.n(l),
    d = n(9),
    f = n.n(d),
    h = n(13),
    p = n.n(h),
    _ = n(12),
    m = n.n(_),
    y = n(1),
    v = n.n(y),
    g = n(8),
    M = n.n(g),
    b = n(559);
  ((function(e) {
    function t(e, n) {
      c()(this, t);
      var r = p()(this, (t.__proto__ || u()(t)).call(this, e, n));
      return r._invalidateOnUpdateStartIndex = null, r._invalidateOnUpdateStopIndex = null, r._positionCache = new b.a, r._startIndex = null, r._startIndexMemoized = null, r._stopIndex = null, r._stopIndexMemoized = null, r.state = {
        isScrolling: !1,
        scrollTop: 0
      }, r._debounceResetIsScrollingCallback = r._debounceResetIsScrollingCallback.bind(r), r._setScrollingContainerRef = r._setScrollingContainerRef.bind(r), r._onScroll = r._onScroll.bind(r), r;
    }
    return m()(t, e), f()(t, [{
      key: "clearCellPositions",
      value: function() {
        this._positionCache = new b.a, this.forceUpdate();
      }
    }, {
      key: "invalidateCellSizeAfterRender",
      value: function(e) {
        var t = e.rowIndex;
        null === this._invalidateOnUpdateStartIndex ? (this._invalidateOnUpdateStartIndex = t, this._invalidateOnUpdateStopIndex = t) : (this._invalidateOnUpdateStartIndex = Math.min(this._invalidateOnUpdateStartIndex, t), this._invalidateOnUpdateStopIndex = Math.max(this._invalidateOnUpdateStopIndex, t));
      }
    }, {
      key: "recomputeCellPositions",
      value: function() {
        var e = this._positionCache.count - 1;
        this._positionCache = new b.a, this._populatePositionCache(0, e), this.forceUpdate();
      }
    }, {
      key: "componentDidMount",
      value: function() {
        this._checkInvalidateOnUpdate(), this._invokeOnScrollCallback(), this._invokeOnCellsRenderedCallback();
      }
    }, {
      key: "componentDidUpdate",
      value: function(e, t) {
        this._checkInvalidateOnUpdate(), this._invokeOnScrollCallback(), this._invokeOnCellsRenderedCallback();
      }
    }, {
      key: "componentWillUnmount",
      value: function() {
        this._debounceResetIsScrollingId && clearTimeout(this._debounceResetIsScrollingId);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function(e) {
        this.props.scrollTop !== e.scrollTop && (this._debounceResetIsScrolling(), this.setState({
          isScrolling: !0,
          scrollTop: e.scrollTop
        }));
      }
    }, {
      key: "render",
      value: function() {
        var e = this,
          t = this.props,
          n = t.autoHeight,
          r = t.cellCount,
          o = t.cellMeasurerCache,
          i = t.cellRenderer,
          s = t.className,
          u = t.height,
          l = t.id,
          c = t.keyMapper,
          d = t.overscanByPixels,
          f = t.role,
          h = t.style,
          p = t.tabIndex,
          _ = t.width,
          m = this.state,
          y = m.isScrolling,
          g = m.scrollTop,
          b = [],
          w = this._getEstimatedTotalHeight(),
          k = this._positionCache.shortestColumnSize,
          L = this._positionCache.count;
        if (k < g + u + d && L < r)
          for (var T = Math.min(r - L, Math.ceil((g + u + d - k) / o.defaultHeight * _ / o.defaultWidth)), S = L; S < L + T; S++) b.push(i({
            index: S,
            isScrolling: y,
            key: c(S),
            parent: this,
            style: {
              width: o.getWidth(S)
            }
          }));
        else ! function() {
          var t = void 0,
            n = void 0;
          e._positionCache.range(g - d, u + d, function(r, a, s) {
            void 0 === n ? (n = r, t = r) : (n = Math.min(n, r), t = Math.max(t, r)), b.push(i({
              index: r,
              isScrolling: y,
              key: c(r),
              parent: e,
              style: {
                height: o.getHeight(r),
                left: a,
                position: "absolute",
                top: s,
                width: o.getWidth(r)
              }
            })), e._startIndex = n, e._stopIndex = t;
          });
        }();
        return v.a.createElement("div", {
          ref: this._setScrollingContainerRef,
          "aria-label": this.props["aria-label"],
          className: M()("ReactVirtualized__Masonry", s),
          id: l,
          onScroll: this._onScroll,
          role: f,
          style: a()({
            boxSizing: "border-box",
            direction: "ltr",
            height: n ? "auto" : u,
            overflowX: "hidden",
            overflowY: w < u ? "hidden" : "auto",
            position: "relative",
            width: _,
            WebkitOverflowScrolling: "touch",
            willChange: "transform"
          }, h),
          tabIndex: p
        }, v.a.createElement("div", {
          className: "ReactVirtualized__Masonry__innerScrollContainer",
          style: {
            width: "100%",
            height: w,
            maxWidth: "100%",
            maxHeight: w,
            overflow: "hidden",
            pointerEvents: y ? "none" : "",
            position: "relative"
          }
        }, b));
      }
    }, {
      key: "_checkInvalidateOnUpdate",
      value: function() {
        if ("number" == typeof this._invalidateOnUpdateStartIndex) {
          var e = this._invalidateOnUpdateStartIndex,
            t = this._invalidateOnUpdateStopIndex;
          this._invalidateOnUpdateStartIndex = null, this._invalidateOnUpdateStopIndex = null, this._populatePositionCache(e, t), this.forceUpdate();
        }
      }
    }, {
      key: "_debounceResetIsScrolling",
      value: function() {
        var e = this.props.scrollingResetTimeInterval;
        this._debounceResetIsScrollingId && clearTimeout(this._debounceResetIsScrollingId), this._debounceResetIsScrollingId = setTimeout(this._debounceResetIsScrollingCallback, e);
      }
    }, {
      key: "_debounceResetIsScrollingCallback",
      value: function() {
        this.setState({
          isScrolling: !1
        });
      }
    }, {
      key: "_getEstimatedTotalHeight",
      value: function() {
        var e = this.props,
          t = e.cellCount,
          n = e.cellMeasurerCache,
          r = e.width,
          o = Math.floor(r / n.defaultWidth);
        return this._positionCache.estimateTotalHeight(t, o, n.defaultHeight);
      }
    }, {
      key: "_invokeOnScrollCallback",
      value: function() {
        var e = this.props,
          t = e.height,
          n = e.onScroll,
          r = this.state.scrollTop;
        this._onScrollMemoized !== r && (n({
          clientHeight: t,
          scrollHeight: this._getEstimatedTotalHeight(),
          scrollTop: r
        }), this._onScrollMemoized = r);
      }
    }, {
      key: "_invokeOnCellsRenderedCallback",
      value: function() {
        this._startIndexMemoized === this._startIndex && this._stopIndexMemoized === this._stopIndex || ((0, this.props.onCellsRendered)({
          startIndex: this._startIndex,
          stopIndex: this._stopIndex
        }), this._startIndexMemoized = this._startIndex, this._stopIndexMemoized = this._stopIndex);
      }
    }, {
      key: "_populatePositionCache",
      value: function(e, t) {
        for (var n = this.props, r = n.cellMeasurerCache, o = n.cellPositioner, i = e; i <= t; i++) {
          var a = o(i),
            s = a.left,
            u = a.top;
          this._positionCache.setPosition(i, s, u, r.getHeight(i));
        }
      }
    }, {
      key: "_setScrollingContainerRef",
      value: function(e) {
        this._scrollingContainer = e;
      }
    }, {
      key: "_onScroll",
      value: function(e) {
        var t = this.props.height,
          n = e.target.scrollTop,
          r = Math.min(Math.max(0, this._getEstimatedTotalHeight() - t), n);
        n === r && (this._debounceResetIsScrolling(), this.state.scrollTop !== r && this.setState({
          isScrolling: !0,
          scrollTop: r
        }));
      }
    }]), t;
  })(y.PureComponent)).defaultProps = {
    autoHeight: !1,
    keyMapper: r,
    onCellsRendered: o,
    onScroll: o,
    overscanByPixels: 20,
    role: "grid",
    scrollingResetTimeInterval: 150,
    style: w,
    tabIndex: 0
  };
  var w = {};
}, function(e, t, n) {
  "use strict";
  var r = n(26),
    o = n.n(r),
    i = n(59),
    a = n.n(i),
    s = n(11),
    u = n.n(s),
    l = n(7),
    c = n.n(l),
    d = n(9),
    f = n.n(d),
    h = n(13),
    p = n.n(h),
    _ = n(12),
    m = n.n(_),
    y = n(1),
    v = n.n(y),
    g = n(69);
  ((function(e) {
    function t(e, n) {
      c()(this, t);
      var r = p()(this, (t.__proto__ || u()(t)).call(this, e, n));
      return r.state = {
        scrollLeft: 0,
        scrollTop: 0
      }, r._deferredInvalidateColumnIndex = null, r._deferredInvalidateRowIndex = null, r._bottomLeftGridRef = r._bottomLeftGridRef.bind(r), r._bottomRightGridRef = r._bottomRightGridRef.bind(r), r._cellRendererBottomLeftGrid = r._cellRendererBottomLeftGrid.bind(r), r._cellRendererBottomRightGrid = r._cellRendererBottomRightGrid.bind(r), r._cellRendererTopRightGrid = r._cellRendererTopRightGrid.bind(r), r._columnWidthRightGrid = r._columnWidthRightGrid.bind(r), r._onScroll = r._onScroll.bind(r), r._rowHeightBottomGrid = r._rowHeightBottomGrid.bind(r), r._topLeftGridRef = r._topLeftGridRef.bind(r), r._topRightGridRef = r._topRightGridRef.bind(r), r;
    }
    return m()(t, e), f()(t, [{
      key: "forceUpdateGrids",
      value: function() {
        this._bottomLeftGrid && this._bottomLeftGrid.forceUpdate(), this._bottomRightGrid && this._bottomRightGrid.forceUpdate(), this._topLeftGrid && this._topLeftGrid.forceUpdate(), this._topRightGrid && this._topRightGrid.forceUpdate();
      }
    }, {
      key: "invalidateCellSizeAfterRender",
      value: function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          t = e.columnIndex,
          n = void 0 === t ? 0 : t,
          r = e.rowIndex,
          o = void 0 === r ? 0 : r;
        this._deferredInvalidateColumnIndex = "number" == typeof this._deferredInvalidateColumnIndex ? Math.min(this._deferredInvalidateColumnIndex, n) : n, this._deferredInvalidateRowIndex = "number" == typeof this._deferredInvalidateRowIndex ? Math.min(this._deferredInvalidateRowIndex, o) : o;
      }
    }, {
      key: "measureAllCells",
      value: function() {
        this._bottomLeftGrid && this._bottomLeftGrid.measureAllCells(), this._bottomRightGrid && this._bottomRightGrid.measureAllCells(), this._topLeftGrid && this._topLeftGrid.measureAllCells(), this._topRightGrid && this._topRightGrid.measureAllCells();
      }
    }, {
      key: "recomputeGridSize",
      value: function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          t = e.columnIndex,
          n = void 0 === t ? 0 : t,
          r = e.rowIndex,
          o = void 0 === r ? 0 : r,
          i = this.props,
          a = i.fixedColumnCount,
          s = i.fixedRowCount,
          u = Math.max(0, n - a),
          l = Math.max(0, o - s);
        this._bottomLeftGrid && this._bottomLeftGrid.recomputeGridSize({
          columnIndex: n,
          rowIndex: l
        }), this._bottomRightGrid && this._bottomRightGrid.recomputeGridSize({
          columnIndex: u,
          rowIndex: l
        }), this._topLeftGrid && this._topLeftGrid.recomputeGridSize({
          columnIndex: n,
          rowIndex: o
        }), this._topRightGrid && this._topRightGrid.recomputeGridSize({
          columnIndex: u,
          rowIndex: o
        }), this._leftGridWidth = null, this._topGridHeight = null, this._maybeCalculateCachedStyles(null, this.props, null, this.state);
      }
    }, {
      key: "componentDidMount",
      value: function() {
        var e = this.props,
          t = e.scrollLeft,
          n = e.scrollTop;
        if (t > 0 || n > 0) {
          var r = {};
          t > 0 && (r.scrollLeft = t), n > 0 && (r.scrollTop = n), this.setState(r);
        }
        this._handleInvalidatedGridSize();
      }
    }, {
      key: "componentDidUpdate",
      value: function(e, t) {
        this._handleInvalidatedGridSize();
      }
    }, {
      key: "componentWillMount",
      value: function() {
        this._maybeCalculateCachedStyles(null, this.props, null, this.state);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function(e, t) {
        var n = this.props,
          r = n.columnWidth,
          o = n.fixedColumnCount,
          i = n.fixedRowCount,
          a = n.rowHeight;
        if (r === e.columnWidth && o === e.fixedColumnCount || (this._leftGridWidth = null), i === e.fixedRowCount && a === e.rowHeight || (this._topGridHeight = null), e.scrollLeft !== this.props.scrollLeft || e.scrollTop !== this.props.scrollTop) {
          var s = {};
          null != e.scrollLeft && e.scrollLeft >= 0 && (s.scrollLeft = e.scrollLeft), null != e.scrollTop && e.scrollTop >= 0 && (s.scrollTop = e.scrollTop), this.setState(s);
        }
        this._maybeCalculateCachedStyles(this.props, e, this.state, t);
      }
    }, {
      key: "render",
      value: function() {
        var e = this.props,
          t = e.onScroll,
          n = e.onSectionRendered,
          r = (e.scrollLeft, e.scrollToColumn),
          i = (e.scrollTop, e.scrollToRow),
          s = a()(e, ["onScroll", "onSectionRendered", "scrollLeft", "scrollToColumn", "scrollTop", "scrollToRow"]);
        if (0 === this.props.width || 0 === this.props.height) return null;
        var u = this.state,
          l = u.scrollLeft,
          c = u.scrollTop;
        return v.a.createElement("div", {
          style: this._containerOuterStyle
        }, v.a.createElement("div", {
          style: this._containerTopStyle
        }, this._renderTopLeftGrid(s), this._renderTopRightGrid(o()({}, s, {
          scrollLeft: l
        }))), v.a.createElement("div", {
          style: this._containerBottomStyle
        }, this._renderBottomLeftGrid(o()({}, s, {
          scrollTop: c
        })), this._renderBottomRightGrid(o()({}, s, {
          onScroll: t,
          onSectionRendered: n,
          scrollLeft: l,
          scrollToColumn: r,
          scrollToRow: i,
          scrollTop: c
        }))));
      }
    }, {
      key: "_bottomLeftGridRef",
      value: function(e) {
        this._bottomLeftGrid = e;
      }
    }, {
      key: "_bottomRightGridRef",
      value: function(e) {
        this._bottomRightGrid = e;
      }
    }, {
      key: "_cellRendererBottomLeftGrid",
      value: function(e) {
        var t = e.rowIndex,
          n = a()(e, ["rowIndex"]),
          r = this.props,
          i = r.cellRenderer,
          s = r.fixedRowCount;
        return t === r.rowCount - s ? v.a.createElement("div", {
          key: n.key,
          style: o()({}, n.style, {
            height: 20
          })
        }) : i(o()({}, n, {
          parent: this,
          rowIndex: t + s
        }));
      }
    }, {
      key: "_cellRendererBottomRightGrid",
      value: function(e) {
        var t = e.columnIndex,
          n = e.rowIndex,
          r = a()(e, ["columnIndex", "rowIndex"]),
          i = this.props,
          s = i.cellRenderer,
          u = i.fixedColumnCount,
          l = i.fixedRowCount;
        return s(o()({}, r, {
          columnIndex: t + u,
          parent: this,
          rowIndex: n + l
        }));
      }
    }, {
      key: "_cellRendererTopRightGrid",
      value: function(e) {
        var t = e.columnIndex,
          n = a()(e, ["columnIndex"]),
          r = this.props,
          i = r.cellRenderer,
          s = r.columnCount,
          u = r.fixedColumnCount;
        return t === s - u ? v.a.createElement("div", {
          key: n.key,
          style: o()({}, n.style, {
            width: 20
          })
        }) : i(o()({}, n, {
          columnIndex: t + u,
          parent: this
        }));
      }
    }, {
      key: "_columnWidthRightGrid",
      value: function(e) {
        var t = e.index,
          n = this.props,
          r = n.columnCount,
          o = n.fixedColumnCount,
          i = n.columnWidth;
        return t === r - o ? 20 : "function" == typeof i ? i({
          index: t + o
        }) : i;
      }
    }, {
      key: "_getBottomGridHeight",
      value: function(e) {
        return e.height - this._getTopGridHeight(e);
      }
    }, {
      key: "_getLeftGridWidth",
      value: function(e) {
        var t = e.fixedColumnCount,
          n = e.columnWidth;
        if (null == this._leftGridWidth)
          if ("function" == typeof n) {
            for (var r = 0, o = 0; o < t; o++) r += n({
              index: o
            });
            this._leftGridWidth = r;
          } else this._leftGridWidth = n * t;
        return this._leftGridWidth;
      }
    }, {
      key: "_getRightGridWidth",
      value: function(e) {
        return e.width - this._getLeftGridWidth(e);
      }
    }, {
      key: "_getTopGridHeight",
      value: function(e) {
        var t = e.fixedRowCount,
          n = e.rowHeight;
        if (null == this._topGridHeight)
          if ("function" == typeof n) {
            for (var r = 0, o = 0; o < t; o++) r += n({
              index: o
            });
            this._topGridHeight = r;
          } else this._topGridHeight = n * t;
        return this._topGridHeight;
      }
    }, {
      key: "_handleInvalidatedGridSize",
      value: function() {
        if ("number" == typeof this._deferredInvalidateColumnIndex) {
          var e = this._deferredInvalidateColumnIndex,
            t = this._deferredInvalidateRowIndex;
          this._deferredInvalidateColumnIndex = null, this._deferredInvalidateRowIndex = null, this.recomputeGridSize({
            columnIndex: e,
            rowIndex: t
          }), this.forceUpdate();
        }
      }
    }, {
      key: "_maybeCalculateCachedStyles",
      value: function(e, t, n, r) {
        var i = t.columnWidth,
          a = t.height,
          s = t.fixedColumnCount,
          u = t.fixedRowCount,
          l = t.rowHeight,
          c = t.style,
          d = t.styleBottomLeftGrid,
          f = t.styleBottomRightGrid,
          h = t.styleTopLeftGrid,
          p = t.styleTopRightGrid,
          _ = t.width,
          m = !e,
          y = m || a !== e.height || _ !== e.width,
          v = m || i !== e.columnWidth || s !== e.fixedColumnCount,
          g = m || u !== e.fixedRowCount || l !== e.rowHeight;
        (m || y || c !== e.style) && (this._containerOuterStyle = o()({
          height: a,
          overflow: "visible",
          width: _
        }, c)), (m || y || g) && (this._containerTopStyle = {
          height: this._getTopGridHeight(t),
          position: "relative",
          width: _
        }, this._containerBottomStyle = {
          height: a - this._getTopGridHeight(t),
          overflow: "visible",
          position: "relative",
          width: _
        }), (m || d !== e.styleBottomLeftGrid) && (this._bottomLeftGridStyle = o()({
          left: 0,
          overflowX: "hidden",
          overflowY: "hidden",
          position: "absolute"
        }, d)), (m || v || f !== e.styleBottomRightGrid) && (this._bottomRightGridStyle = o()({
          left: this._getLeftGridWidth(t),
          position: "absolute"
        }, f)), (m || h !== e.styleTopLeftGrid) && (this._topLeftGridStyle = o()({
          left: 0,
          overflowX: "hidden",
          overflowY: "hidden",
          position: "absolute",
          top: 0
        }, h)), (m || v || p !== e.styleTopRightGrid) && (this._topRightGridStyle = o()({
          left: this._getLeftGridWidth(t),
          overflowX: "hidden",
          overflowY: "hidden",
          position: "absolute",
          top: 0
        }, p));
      }
    }, {
      key: "_onScroll",
      value: function(e) {
        var t = e.scrollLeft,
          n = e.scrollTop;
        this.setState({
          scrollLeft: t,
          scrollTop: n
        });
        var r = this.props.onScroll;
        r && r(e);
      }
    }, {
      key: "_renderBottomLeftGrid",
      value: function(e) {
        var t = e.fixedColumnCount,
          n = e.fixedRowCount,
          r = e.rowCount,
          i = e.scrollTop;
        return t ? v.a.createElement(g.a, o()({}, e, {
          cellRenderer: this._cellRendererBottomLeftGrid,
          columnCount: t,
          height: this._getBottomGridHeight(e),
          ref: this._bottomLeftGridRef,
          rowCount: Math.max(0, r - n) + 1,
          rowHeight: this._rowHeightBottomGrid,
          scrollTop: i,
          style: this._bottomLeftGridStyle,
          tabIndex: null,
          width: this._getLeftGridWidth(e)
        })) : null;
      }
    }, {
      key: "_renderBottomRightGrid",
      value: function(e) {
        var t = e.columnCount,
          n = e.fixedColumnCount,
          r = e.fixedRowCount,
          i = e.rowCount,
          a = e.scrollToColumn,
          s = e.scrollToRow;
        return v.a.createElement(g.a, o()({}, e, {
          cellRenderer: this._cellRendererBottomRightGrid,
          columnCount: Math.max(0, t - n),
          columnWidth: this._columnWidthRightGrid,
          height: this._getBottomGridHeight(e),
          onScroll: this._onScroll,
          ref: this._bottomRightGridRef,
          rowCount: Math.max(0, i - r),
          rowHeight: this._rowHeightBottomGrid,
          scrollToColumn: a - n,
          scrollToRow: s - r,
          style: this._bottomRightGridStyle,
          width: this._getRightGridWidth(e)
        }));
      }
    }, {
      key: "_renderTopLeftGrid",
      value: function(e) {
        var t = e.fixedColumnCount,
          n = e.fixedRowCount;
        return t && n ? v.a.createElement(g.a, o()({}, e, {
          columnCount: t,
          height: this._getTopGridHeight(e),
          ref: this._topLeftGridRef,
          rowCount: n,
          style: this._topLeftGridStyle,
          tabIndex: null,
          width: this._getLeftGridWidth(e)
        })) : null;
      }
    }, {
      key: "_renderTopRightGrid",
      value: function(e) {
        var t = e.columnCount,
          n = e.fixedColumnCount,
          r = e.fixedRowCount,
          i = e.scrollLeft;
        return r ? v.a.createElement(g.a, o()({}, e, {
          cellRenderer: this._cellRendererTopRightGrid,
          columnCount: Math.max(0, t - n) + 1,
          columnWidth: this._columnWidthRightGrid,
          height: this._getTopGridHeight(e),
          ref: this._topRightGridRef,
          rowCount: r,
          scrollLeft: i,
          style: this._topRightGridStyle,
          tabIndex: null,
          width: this._getRightGridWidth(e)
        })) : null;
      }
    }, {
      key: "_rowHeightBottomGrid",
      value: function(e) {
        var t = e.index,
          n = this.props,
          r = n.fixedRowCount,
          o = n.rowCount,
          i = n.rowHeight;
        return t === o - r ? 20 : "function" == typeof i ? i({
          index: t + r
        }) : i;
      }
    }, {
      key: "_topLeftGridRef",
      value: function(e) {
        this._topLeftGrid = e;
      }
    }, {
      key: "_topRightGridRef",
      value: function(e) {
        this._topRightGrid = e;
      }
    }]), t;
  })(y.PureComponent)).defaultProps = {
    fixedColumnCount: 0,
    fixedRowCount: 0,
    style: {},
    styleBottomLeftGrid: {},
    styleBottomRightGrid: {},
    styleTopLeftGrid: {},
    styleTopRightGrid: {}
  };
}, function(e, t, n) {
  "use strict";
  var r = n(11),
    o = n.n(r),
    i = n(7),
    a = n.n(i),
    s = n(9),
    u = n.n(s),
    l = n(13),
    c = n.n(l),
    d = n(12),
    f = n.n(d),
    h = n(1);
  n.n(h),
    function(e) {
      function t(e, n) {
        a()(this, t);
        var r = c()(this, (t.__proto__ || o()(t)).call(this, e, n));
        return r.state = {
          clientHeight: 0,
          clientWidth: 0,
          scrollHeight: 0,
          scrollLeft: 0,
          scrollTop: 0,
          scrollWidth: 0
        }, r._onScroll = r._onScroll.bind(r), r;
      }
      f()(t, e), u()(t, [{
        key: "render",
        value: function() {
          var e = this.props.children,
            t = this.state,
            n = t.clientHeight,
            r = t.clientWidth,
            o = t.scrollHeight,
            i = t.scrollLeft,
            a = t.scrollTop,
            s = t.scrollWidth;
          return e({
            clientHeight: n,
            clientWidth: r,
            onScroll: this._onScroll,
            scrollHeight: o,
            scrollLeft: i,
            scrollTop: a,
            scrollWidth: s
          });
        }
      }, {
        key: "_onScroll",
        value: function(e) {
          var t = e.clientHeight,
            n = e.clientWidth,
            r = e.scrollHeight,
            o = e.scrollLeft,
            i = e.scrollTop,
            a = e.scrollWidth;
          this.setState({
            clientHeight: t,
            clientWidth: n,
            scrollHeight: r,
            scrollLeft: o,
            scrollTop: i,
            scrollWidth: a
          });
        }
      }]);
    }(h.PureComponent);
}, function(e, t, n) {
  "use strict";
  var r = n(11),
    o = n.n(r),
    i = n(7),
    a = n.n(i),
    s = n(13),
    u = n.n(s),
    l = n(12),
    c = n.n(l),
    d = n(1),
    f = (n.n(d), n(308)),
    h = n(307),
    p = n(306);
  ((function(e) {
    function t() {
      return a()(this, t), u()(this, (t.__proto__ || o()(t)).apply(this, arguments));
    }
    return c()(t, e), t;
  })(d.Component)).defaultProps = {
    cellDataGetter: p.a,
    cellRenderer: h.a,
    flexGrow: 0,
    flexShrink: 1,
    headerRenderer: f.a,
    style: {}
  };
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.sortDirection,
      n = s()("ReactVirtualized__Table__sortableHeaderIcon", {
        "ReactVirtualized__Table__sortableHeaderIcon--ASC": t === u.a.ASC,
        "ReactVirtualized__Table__sortableHeaderIcon--DESC": t === u.a.DESC
      });
    return i.a.createElement("svg", {
      className: n,
      width: 18,
      height: 18,
      viewBox: "0 0 24 24"
    }, t === u.a.ASC ? i.a.createElement("path", {
      d: "M7 14l5-5 5 5z"
    }) : i.a.createElement("path", {
      d: "M7 10l5 5 5-5z"
    }), i.a.createElement("path", {
      d: "M0 0h24v24H0z",
      fill: "none"
    }));
  }
  var o = n(1),
    i = n.n(o),
    a = n(8),
    s = n.n(a),
    u = n(116);
  t.a = r;
}, function(e, t, n) {
  "use strict";
  var r = n(26),
    o = n.n(r),
    i = n(11),
    a = n.n(i),
    s = n(7),
    u = n.n(s),
    l = n(9),
    c = n.n(l),
    d = n(13),
    f = n.n(d),
    h = n(12),
    p = n.n(h),
    _ = n(8),
    m = n.n(_),
    y = (n(303), n(1)),
    v = n.n(y),
    g = n(19),
    M = (n.n(g), n(69)),
    b = n(310),
    w = n(309),
    k = n(116);
  ((function(e) {
    function t(e) {
      u()(this, t);
      var n = f()(this, (t.__proto__ || a()(t)).call(this, e));
      return n.state = {
        scrollbarWidth: 0
      }, n._createColumn = n._createColumn.bind(n), n._createRow = n._createRow.bind(n), n._onScroll = n._onScroll.bind(n), n._onSectionRendered = n._onSectionRendered.bind(n), n._setRef = n._setRef.bind(n), n;
    }
    return p()(t, e), c()(t, [{
      key: "forceUpdateGrid",
      value: function() {
        this.Grid.forceUpdate();
      }
    }, {
      key: "getOffsetForRow",
      value: function(e) {
        var t = e.alignment,
          n = e.index;
        return this.Grid.getOffsetForCell({
          alignment: t,
          rowIndex: n
        }).scrollTop;
      }
    }, {
      key: "measureAllRows",
      value: function() {
        this.Grid.measureAllCells();
      }
    }, {
      key: "recomputeRowHeights",
      value: function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        this.Grid.recomputeGridSize({
          rowIndex: e
        });
      }
    }, {
      key: "scrollToPosition",
      value: function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        this.Grid.scrollToPosition({
          scrollTop: e
        });
      }
    }, {
      key: "scrollToRow",
      value: function() {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
        this.Grid.scrollToCell({
          columnIndex: 0,
          rowIndex: e
        });
      }
    }, {
      key: "componentDidMount",
      value: function() {
        this._setScrollbarWidth();
      }
    }, {
      key: "componentDidUpdate",
      value: function() {
        this._setScrollbarWidth();
      }
    }, {
      key: "render",
      value: function() {
        var e = this,
          t = this.props,
          n = t.children,
          r = t.className,
          i = t.disableHeader,
          a = t.gridClassName,
          s = t.gridStyle,
          u = t.headerHeight,
          l = t.headerRowRenderer,
          c = t.height,
          d = t.id,
          f = t.noRowsRenderer,
          h = t.rowClassName,
          p = t.rowStyle,
          _ = t.scrollToIndex,
          y = t.style,
          g = t.width,
          b = this.state.scrollbarWidth,
          w = i ? c : c - u,
          k = "function" == typeof h ? h({
            index: -1
          }) : h,
          L = "function" == typeof p ? p({
            index: -1
          }) : p;
        return this._cachedColumnStyles = [], v.a.Children.toArray(n).forEach(function(t, n) {
          var r = e._getFlexStyleForColumn(t, t.props.style);
          e._cachedColumnStyles[n] = o()({}, r, {
            overflow: "hidden"
          });
        }), v.a.createElement("div", {
          className: m()("ReactVirtualized__Table", r),
          id: d,
          role: "grid",
          style: y
        }, !i && l({
          className: m()("ReactVirtualized__Table__headerRow", k),
          columns: this._getHeaderColumns(),
          style: o()({}, L, {
            height: u,
            overflow: "hidden",
            paddingRight: b,
            width: g
          })
        }), v.a.createElement(M.a, o()({}, this.props, {
          autoContainerWidth: !0,
          className: m()("ReactVirtualized__Table__Grid", a),
          cellRenderer: this._createRow,
          columnWidth: g,
          columnCount: 1,
          height: w,
          id: void 0,
          noContentRenderer: f,
          onScroll: this._onScroll,
          onSectionRendered: this._onSectionRendered,
          ref: this._setRef,
          role: "rowgroup",
          scrollbarWidth: b,
          scrollToRow: _,
          style: o()({}, s, {
            overflowX: "hidden"
          })
        })));
      }
    }, {
      key: "_createColumn",
      value: function(e) {
        var t = e.column,
          n = e.columnIndex,
          r = e.isScrolling,
          o = e.parent,
          i = e.rowData,
          a = e.rowIndex,
          s = t.props,
          u = s.cellDataGetter,
          l = s.cellRenderer,
          c = s.className,
          d = s.columnData,
          f = s.dataKey,
          h = u({
            columnData: d,
            dataKey: f,
            rowData: i
          }),
          p = l({
            cellData: h,
            columnData: d,
            dataKey: f,
            isScrolling: r,
            parent: o,
            rowData: i,
            rowIndex: a
          }),
          _ = this._cachedColumnStyles[n],
          y = "string" == typeof p ? p : null;
        return v.a.createElement("div", {
          key: "Row" + a + "-Col" + n,
          className: m()("ReactVirtualized__Table__rowColumn", c),
          style: _,
          title: y
        }, p);
      }
    }, {
      key: "_createHeader",
      value: function(e) {
        var t = e.column,
          n = e.index,
          r = this.props,
          i = r.headerClassName,
          a = r.headerStyle,
          s = r.onHeaderClick,
          u = r.sort,
          l = r.sortBy,
          c = r.sortDirection,
          d = t.props,
          f = d.dataKey,
          h = d.disableSort,
          p = d.headerRenderer,
          _ = d.label,
          y = d.columnData,
          g = !h && u,
          M = m()("ReactVirtualized__Table__headerColumn", i, t.props.headerClassName, {
            ReactVirtualized__Table__sortableHeaderColumn: g
          }),
          b = this._getFlexStyleForColumn(t, a),
          w = p({
            columnData: y,
            dataKey: f,
            disableSort: h,
            label: _,
            sortBy: l,
            sortDirection: c
          }),
          L = {};
        return (g || s) && function() {
          var e = l !== f || c === k.a.DESC ? k.a.ASC : k.a.DESC,
            n = function(t) {
              g && u({
                sortBy: f,
                sortDirection: e
              }), s && s({
                columnData: y,
                dataKey: f,
                event: t
              });
            },
            r = function(e) {
              "Enter" !== e.key && " " !== e.key || n(e);
            };
          L["aria-label"] = t.props["aria-label"] || _ || f, L.role = "rowheader", L.tabIndex = 0, L.onClick = n, L.onKeyDown = r;
        }(), v.a.createElement("div", o()({}, L, {
          key: "Header-Col" + n,
          className: M,
          style: b
        }), w);
      }
    }, {
      key: "_createRow",
      value: function(e) {
        var t = this,
          n = e.rowIndex,
          r = e.isScrolling,
          i = e.key,
          a = e.parent,
          s = e.style,
          u = this.props,
          l = u.children,
          c = u.onRowClick,
          d = u.onRowDoubleClick,
          f = u.onRowMouseOver,
          h = u.onRowMouseOut,
          p = u.rowClassName,
          _ = u.rowGetter,
          y = u.rowRenderer,
          g = u.rowStyle,
          M = this.state.scrollbarWidth,
          b = "function" == typeof p ? p({
            index: n
          }) : p,
          w = "function" == typeof g ? g({
            index: n
          }) : g,
          k = _({
            index: n
          }),
          L = v.a.Children.toArray(l).map(function(e, o) {
            return t._createColumn({
              column: e,
              columnIndex: o,
              isScrolling: r,
              parent: a,
              rowData: k,
              rowIndex: n,
              scrollbarWidth: M
            });
          }),
          T = m()("ReactVirtualized__Table__row", b),
          S = o()({}, s, w, {
            height: this._getRowHeight(n),
            overflow: "hidden",
            paddingRight: M
          });
        return y({
          className: T,
          columns: L,
          index: n,
          isScrolling: r,
          key: i,
          onRowClick: c,
          onRowDoubleClick: d,
          onRowMouseOver: f,
          onRowMouseOut: h,
          rowData: k,
          style: S
        });
      }
    }, {
      key: "_getFlexStyleForColumn",
      value: function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
          n = e.props.flexGrow + " " + e.props.flexShrink + " " + e.props.width + "px",
          r = o()({}, t, {
            flex: n,
            msFlex: n,
            WebkitFlex: n
          });
        return e.props.maxWidth && (r.maxWidth = e.props.maxWidth), e.props.minWidth && (r.minWidth = e.props.minWidth), r;
      }
    }, {
      key: "_getHeaderColumns",
      value: function() {
        var e = this,
          t = this.props,
          n = t.children;
        return (t.disableHeader ? [] : v.a.Children.toArray(n)).map(function(t, n) {
          return e._createHeader({
            column: t,
            index: n
          });
        });
      }
    }, {
      key: "_getRowHeight",
      value: function(e) {
        var t = this.props.rowHeight;
        return "function" == typeof t ? t({
          index: e
        }) : t;
      }
    }, {
      key: "_onScroll",
      value: function(e) {
        var t = e.clientHeight,
          n = e.scrollHeight,
          r = e.scrollTop;
        (0, this.props.onScroll)({
          clientHeight: t,
          scrollHeight: n,
          scrollTop: r
        });
      }
    }, {
      key: "_onSectionRendered",
      value: function(e) {
        var t = e.rowOverscanStartIndex,
          n = e.rowOverscanStopIndex,
          r = e.rowStartIndex,
          o = e.rowStopIndex;
        (0, this.props.onRowsRendered)({
          overscanStartIndex: t,
          overscanStopIndex: n,
          startIndex: r,
          stopIndex: o
        });
      }
    }, {
      key: "_setRef",
      value: function(e) {
        this.Grid = e;
      }
    }, {
      key: "_setScrollbarWidth",
      value: function() {
        var e = n.i(g.findDOMNode)(this.Grid),
          t = e.clientWidth || 0,
          r = e.offsetWidth || 0,
          o = r - t;
        this.setState({
          scrollbarWidth: o
        });
      }
    }]), t;
  })(y.PureComponent)).defaultProps = {
    disableHeader: !1,
    estimatedRowSize: 30,
    headerHeight: 0,
    headerStyle: {},
    noRowsRenderer: function() {
      return null;
    },
    onRowsRendered: function() {
      return null;
    },
    onScroll: function() {
      return null;
    },
    overscanIndicesGetter: M.b,
    overscanRowCount: 10,
    rowRenderer: b.a,
    headerRowRenderer: w.a,
    rowStyle: {},
    scrollToAlignment: "auto",
    scrollToIndex: -1,
    style: {}
  };
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = (e.columnData, e.dataKey),
      n = e.rowData;
    return "function" == typeof n.get ? n.get(t) : n[t];
  }
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.cellData;
    return e.columnData, e.dataKey, e.rowData, e.rowIndex, null == t ? "" : String(t);
  }
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = (e.columnData, e.dataKey),
      n = (e.disableSort, e.label),
      r = e.sortBy,
      o = e.sortDirection,
      s = r === t,
      u = [i.a.createElement("span", {
        className: "ReactVirtualized__Table__headerTruncatedText",
        key: "label",
        title: n
      }, n)];
    return s && u.push(i.a.createElement(a.a, {
      key: "SortIndicator",
      sortDirection: o
    })), u;
  }
  var o = n(1),
    i = n.n(o),
    a = n(304);
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.className,
      n = e.columns,
      r = e.style;
    return i.a.createElement("div", {
      className: t,
      role: "row",
      style: r
    }, n);
  }
  var o = n(1),
    i = n.n(o);
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.className,
      n = e.columns,
      r = e.index,
      o = (e.isScrolling, e.key),
      a = e.onRowClick,
      u = e.onRowDoubleClick,
      l = e.onRowMouseOver,
      c = e.onRowMouseOut,
      d = e.rowData,
      f = e.style,
      h = {};
    return (a || u || l || c) && (h["aria-label"] = "row", h.tabIndex = 0, a && (h.onClick = function(e) {
      return a({
        event: e,
        index: r,
        rowData: d
      });
    }), u && (h.onDoubleClick = function(e) {
      return u({
        event: e,
        index: r,
        rowData: d
      });
    }), c && (h.onMouseOut = function(e) {
      return c({
        event: e,
        index: r,
        rowData: d
      });
    }), l && (h.onMouseOver = function(e) {
      return l({
        event: e,
        index: r,
        rowData: d
      });
    })), s.a.createElement("div", i()({}, h, {
      className: t,
      key: o,
      role: "row",
      style: f
    }), n);
  }
  var o = n(26),
    i = n.n(o),
    a = n(1),
    s = n.n(a);
  t.a = r;
}, function(e, t, n) {
  "use strict";
  var r = n(11),
    o = n.n(r),
    i = n(7),
    a = n.n(i),
    s = n(9),
    u = n.n(s),
    l = n(13),
    c = n.n(l),
    d = n(12),
    f = n.n(d),
    h = n(1),
    p = (n.n(h), n(19)),
    _ = n.n(p),
    m = n(312),
    y = n(566);
  ((function(e) {
    function t(e) {
      a()(this, t);
      var r = c()(this, (t.__proto__ || o()(t)).call(this, e)),
        i = "undefined" != typeof window ? n.i(y.a)(e.scrollElement || window) : {
          width: 0,
          height: 0
        },
        s = i.width,
        u = i.height;
      return r.state = {
        height: u,
        width: s,
        isScrolling: !1,
        scrollLeft: 0,
        scrollTop: 0
      }, r._onResize = r._onResize.bind(r), r.__handleWindowScrollEvent = r.__handleWindowScrollEvent.bind(r), r.__resetIsScrolling = r.__resetIsScrolling.bind(r), r;
    }
    return f()(t, e), u()(t, [{
      key: "updatePosition",
      value: function(e) {
        var t = this.props.onResize,
          r = this.state,
          o = r.height,
          i = r.width;
        e = e || this.props.scrollElement || window;
        var a = n.i(y.b)(_.a.findDOMNode(this), e);
        this._positionFromTop = a.top, this._positionFromLeft = a.left;
        var s = n.i(y.a)(e);
        o === s.height && i === s.width || (this.setState({
          height: s.height,
          width: s.width
        }), t({
          height: s.height,
          width: s.width
        }));
      }
    }, {
      key: "componentDidMount",
      value: function() {
        var e = this.props.scrollElement || window;
        this.updatePosition(e), n.i(m.a)(this, e), window.addEventListener("resize", this._onResize, !1);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function(e) {
        var t = this.props.scrollElement || window,
          r = e.scrollElement || window;
        t !== r && (this.updatePosition(r), n.i(m.b)(this, t), n.i(m.a)(this, r));
      }
    }, {
      key: "componentWillUnmount",
      value: function() {
        n.i(m.b)(this, this.props.scrollElement || window), window.removeEventListener("resize", this._onResize, !1);
      }
    }, {
      key: "render",
      value: function() {
        var e = this.props.children,
          t = this.state,
          n = t.isScrolling,
          r = t.scrollTop,
          o = t.scrollLeft,
          i = t.height;
        return e({
          width: t.width,
          height: i,
          isScrolling: n,
          scrollLeft: o,
          scrollTop: r
        });
      }
    }, {
      key: "_onResize",
      value: function(e) {
        this.updatePosition();
      }
    }, {
      key: "__handleWindowScrollEvent",
      value: function(e) {
        var t = this.props.onScroll,
          r = this.props.scrollElement || window,
          o = n.i(y.c)(r),
          i = Math.max(0, o.left - this._positionFromLeft),
          a = Math.max(0, o.top - this._positionFromTop);
        this.setState({
          isScrolling: !0,
          scrollLeft: i,
          scrollTop: a
        }), t({
          scrollLeft: i,
          scrollTop: a
        });
      }
    }, {
      key: "__resetIsScrolling",
      value: function() {
        this.setState({
          isScrolling: !1
        });
      }
    }, {
      key: "scrollElement",
      get: function() {
        return this.props.scrollElement || window;
      }
    }]), t;
  })(h.PureComponent)).defaultProps = {
    onResize: function() {},
    onScroll: function() {}
  };
}, function(e, t, n) {
  "use strict";

  function r() {
    d && (d = null, document.body.style.pointerEvents = c, c = null);
  }

  function o() {
    r(), l.forEach(function(e) {
      return e.__resetIsScrolling();
    });
  }

  function i() {
    d && clearTimeout(d), d = setTimeout(o, f);
  }

  function a(e) {
    e.currentTarget === window && null == c && (c = document.body.style.pointerEvents, document.body.style.pointerEvents = "none"), i(), l.forEach(function(t) {
      t.scrollElement === e.currentTarget && t.__handleWindowScrollEvent(e);
    });
  }

  function s(e, t) {
    l.some(function(e) {
      return e.scrollElement === t;
    }) || t.addEventListener("scroll", a), l.push(e);
  }

  function u(e, t) {
    l = l.filter(function(t) {
      return t !== e;
    }), l.length || (t.removeEventListener("scroll", a), d && (clearTimeout(d), r()));
  }
  t.a = s, t.b = u;
  var l = [],
    c = null,
    d = null,
    f = 150;
}, function(e, t, n) {
  "use strict";
  var r = (n(542), n(543));
  n.d(t, "a", function() {
    return r.a;
  });
  var o = (n(545), n(549), n(551), n(69), n(557), n(558));
  n.d(t, "b", function() {
    return o.a;
  }), n(561), n(562), n(563), n(564), n(565);
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = Function.prototype.toString,
      n = Object.prototype.hasOwnProperty,
      r = RegExp("^" + t.call(n).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    try {
      var o = t.call(e);
      return r.test(o);
    } catch (e) {
      return !1;
    }
  }

  function o(e) {
    var t = l(e);
    if (t) {
      var n = t.childIDs;
      c(e), n.forEach(o);
    }
  }

  function i(e, t, n) {
    return "\n    in " + (e || "Unknown") + (t ? " (at " + t.fileName.replace(/^.*[\\\/]/, "") + ":" + t.lineNumber + ")" : n ? " (created by " + n + ")" : "");
  }

  function a(e) {
    return null == e ? "#empty" : "string" == typeof e || "number" == typeof e ? "#text" : "string" == typeof e.type ? e.type : e.type.displayName || e.type.name || "Unknown";
  }

  function s(e) {
    var t, n = L.getDisplayName(e),
      r = L.getElement(e),
      o = L.getOwnerID(e);
    return o && (t = L.getDisplayName(o)), i(n, r && r._source, t);
  }
  var u, l, c, d, f, h, p, _ = n(45),
    m = n(24);
  if (n(2), n(3), "function" == typeof Array.from && "function" == typeof Map && r(Map) && null != Map.prototype && "function" == typeof Map.prototype.keys && r(Map.prototype.keys) && "function" == typeof Set && r(Set) && null != Set.prototype && "function" == typeof Set.prototype.keys && r(Set.prototype.keys)) {
    var y = new Map,
      v = new Set;
    u = function(e, t) {
      y.set(e, t);
    }, l = function(e) {
      return y.get(e);
    }, c = function(e) {
      y.delete(e);
    }, d = function() {
      return Array.from(y.keys());
    }, f = function(e) {
      v.add(e);
    }, h = function(e) {
      v.delete(e);
    }, p = function() {
      return Array.from(v.keys());
    };
  } else {
    var g = {},
      M = {},
      b = function(e) {
        return "." + e;
      },
      w = function(e) {
        return parseInt(e.substr(1), 10);
      };
    u = function(e, t) {
      var n = b(e);
      g[n] = t;
    }, l = function(e) {
      var t = b(e);
      return g[t];
    }, c = function(e) {
      var t = b(e);
      delete g[t];
    }, d = function() {
      return Object.keys(g).map(w);
    }, f = function(e) {
      var t = b(e);
      M[t] = !0;
    }, h = function(e) {
      var t = b(e);
      delete M[t];
    }, p = function() {
      return Object.keys(M).map(w);
    };
  }
  var k = [],
    L = {
      onSetChildren: function(e, t) {
        var n = l(e);
        n || _("144"), n.childIDs = t;
        for (var r = 0; r < t.length; r++) {
          var o = t[r],
            i = l(o);
          i || _("140"), null == i.childIDs && "object" == typeof i.element && null != i.element && _("141"), i.isMounted || _("71"), null == i.parentID && (i.parentID = e), i.parentID !== e && _("142", o, i.parentID, e);
        }
      },
      onBeforeMountComponent: function(e, t, n) {
        u(e, {
          element: t,
          parentID: n,
          text: null,
          childIDs: [],
          isMounted: !1,
          updateCount: 0
        });
      },
      onBeforeUpdateComponent: function(e, t) {
        var n = l(e);
        n && n.isMounted && (n.element = t);
      },
      onMountComponent: function(e) {
        var t = l(e);
        t || _("144"), t.isMounted = !0, 0 === t.parentID && f(e);
      },
      onUpdateComponent: function(e) {
        var t = l(e);
        t && t.isMounted && t.updateCount++;
      },
      onUnmountComponent: function(e) {
        var t = l(e);
        t && (t.isMounted = !1, 0 === t.parentID && h(e)), k.push(e);
      },
      purgeUnmountedComponents: function() {
        if (!L._preventPurging) {
          for (var e = 0; e < k.length; e++) o(k[e]);
          k.length = 0;
        }
      },
      isMounted: function(e) {
        var t = l(e);
        return !!t && t.isMounted;
      },
      getCurrentStackAddendum: function(e) {
        var t = "";
        if (e) {
          var n = a(e),
            r = e._owner;
          t += i(n, e._source, r && r.getName());
        }
        var o = m.current,
          s = o && o._debugID;
        return t += L.getStackAddendumByID(s);
      },
      getStackAddendumByID: function(e) {
        for (var t = ""; e;) t += s(e), e = L.getParentID(e);
        return t;
      },
      getChildIDs: function(e) {
        var t = l(e);
        return t ? t.childIDs : [];
      },
      getDisplayName: function(e) {
        var t = L.getElement(e);
        return t ? a(t) : null;
      },
      getElement: function(e) {
        var t = l(e);
        return t ? t.element : null;
      },
      getOwnerID: function(e) {
        var t = L.getElement(e);
        return t && t._owner ? t._owner._debugID : null;
      },
      getParentID: function(e) {
        var t = l(e);
        return t ? t.parentID : null;
      },
      getSource: function(e) {
        var t = l(e),
          n = t ? t.element : null;
        return null != n ? n._source : null;
      },
      getText: function(e) {
        var t = L.getElement(e);
        return "string" == typeof t ? t : "number" == typeof t ? "" + t : null;
      },
      getUpdateCount: function(e) {
        var t = l(e);
        return t ? t.updateCount : 0;
      },
      getRootIDs: p,
      getRegisteredIDs: d
    };
  e.exports = L;
}, function(e, t, n) {
  "use strict";
  var r = "function" == typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = {};
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  e.exports = !1;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e && (o && e[o] || e[i]);
    if ("function" == typeof t) return t;
  }
  var o = "function" == typeof Symbol && Symbol.iterator,
    i = "@@iterator";
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    function r() {
      return n ? {
        type: f,
        payload: t.apply(void 0, arguments),
        meta: n.apply(void 0, arguments)
      } : {
        type: f,
        payload: t.apply(void 0, arguments)
      };
    }

    function u() {
      return p(h).apply(void 0, arguments);
    }
    var c = arguments;
    "function" == typeof e && (n = t, t = e, e = void 0), "function" != typeof t && (t = s), "function" != typeof n && (n = void 0);
    var d = "string" == typeof e && /^[0-9A-Z_]+$/.test(e);
    if (d) {
      if ((0, i.has)(e)) throw new TypeError("Duplicate action type: " + e);
      (0, i.add)(e);
    } else ++a;
    var f = d ? e : "[" + a + "]" + (e ? " " + e : ""),
      h = void 0,
      p = function(e) {
        return function() {
          var t = c;
          if (!Array.isArray(e)) return e ? e(r.apply(void 0, arguments)) : r.apply(void 0, arguments);
          var n = function() {
            var n = r.apply(void 0, t);
            return {
              v: e.map(function(e) {
                return e(n);
              })
            };
          }();
          return "object" === (void 0 === n ? "undefined" : o(n)) ? n.v : void 0;
        };
      };
    return u.getType = function() {
      return f;
    }, u.toString = function() {
      return f;
    }, u.raw = r, u.assignTo = function(e) {
      return h = l(e), u;
    }, u.assigned = function() {
      return !!h;
    }, u.bound = function() {
      return !1;
    }, u.dispatched = u.assigned, u.bindTo = function(e) {
      var t = p(l(e));
      return t.raw = r, t.getType = u.getType, t.toString = u.toString, t.assignTo = function() {
        return t;
      }, t.bindTo = function() {
        return t;
      }, t.assigned = function() {
        return !1;
      }, t.bound = function() {
        return !0;
      }, t.dispatched = t.bound, t;
    }, u;
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
    return typeof e;
  } : function(e) {
    return e && "function" == typeof Symbol && e.constructor === Symbol ? "symbol" : typeof e;
  };
  t.default = r;
  var i = n(320),
    a = 0,
    s = function(e) {
      return e;
    },
    u = function(e) {
      return e && "function" == typeof e.dispatch ? e.dispatch : e;
    },
    l = function(e) {
      return Array.isArray(e) ? e.map(u) : u(e);
    };
}, function(e, t, n) {
  "use strict";

  function r(e) {
    u[e] = !0;
  }

  function o(e) {
    u[e] = !1;
  }

  function i(e) {
    return !!u[e];
  }

  function a() {
    return Object.keys(u).filter(i);
  }

  function s() {
    a().forEach(o);
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.add = r, t.remove = o, t.has = i, t.all = a, t.clear = s;
  var u = {};
}, function(e, t, n) {
  "use strict";

  function r() {
    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
    if (0 === t.length) return function(e) {
      return e;
    };
    if (1 === t.length) return t[0];
    var r = t[t.length - 1],
      o = t.slice(0, -1);
    return function() {
      return o.reduceRight(function(e, t) {
        return t(e);
      }, r.apply(void 0, arguments));
    };
  }
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, i) {
    function u() {
      v === y && (v = y.slice());
    }

    function l() {
      return m;
    }

    function c(e) {
      if ("function" != typeof e) throw new Error("Expected listener to be a function.");
      var t = !0;
      return u(), v.push(e),
        function() {
          if (t) {
            t = !1, u();
            var n = v.indexOf(e);
            v.splice(n, 1);
          }
        };
    }

    function d(e) {
      if (!n.i(o.a)(e)) throw new Error("Actions must be plain objects. Use custom middleware for async actions.");
      if (void 0 === e.type) throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');
      if (g) throw new Error("Reducers may not dispatch actions.");
      try {
        g = !0, m = _(m, e);
      } finally {
        g = !1;
      }
      for (var t = y = v, r = 0; r < t.length; r++) t[r]();
      return e;
    }

    function f(e) {
      if ("function" != typeof e) throw new Error("Expected the nextReducer to be a function.");
      _ = e, d({
        type: s.INIT
      });
    }

    function h() {
      var e, t = c;
      return e = {
        subscribe: function(e) {
          function n() {
            e.next && e.next(l());
          }
          if ("object" != typeof e) throw new TypeError("Expected the observer to be an object.");
          return n(), {
            unsubscribe: t(n)
          };
        }
      }, e[a.a] = function() {
        return this;
      }, e;
    }
    var p;
    if ("function" == typeof t && void 0 === i && (i = t, t = void 0), void 0 !== i) {
      if ("function" != typeof i) throw new Error("Expected the enhancer to be a function.");
      return i(r)(e, t);
    }
    if ("function" != typeof e) throw new Error("Expected the reducer to be a function.");
    var _ = e,
      m = t,
      y = [],
      v = y,
      g = !1;
    return d({
      type: s.INIT
    }), p = {
      dispatch: d,
      subscribe: c,
      getState: l,
      replaceReducer: f
    }, p[a.a] = h, p;
  }
  var o = n(98),
    i = n(594),
    a = n.n(i);
  n.d(t, "a", function() {
    return s;
  }), t.b = r;
  var s = {
    INIT: "@@redux/INIT"
  };
}, function(e, t, n) {}, function(e, t, n) {
  var r = n(425);
  "string" == typeof r && (r = [
    [e.i, r, ""]
  ]), n(121)(r, {}), r.locals && (e.exports = r.locals);
}, function(e, t, n) {
  "use strict";
  var r = n(339);
  t.a = r.a;
}, function(e, t, n) {
  "use strict";
  var r = n(342);
  t.a = r.a;
}, function(e, t, n) {
  "use strict";
  var r = n(1),
    o = n.n(r),
    i = n(19),
    a = n.n(i),
    s = n(128),
    u = n(129),
    l = n(361),
    c = n(29),
    d = n(122);
  n.i(s.a)("ui.react_channel_sidebar", {
    render: function(e) {
      var t = "react_channel_sidebar_render";
      n.i(u.a)(t + "_mark"), a.a.render(o.a.createElement(c.a, {
        store: n.i(l.a)()
      }, o.a.createElement(d.a, null)), e, function() {
        return n.i(u.b)(t, t + "_mark");
      });
    }
  });
}, function(e, t, n) {
  "use strict";
  var r = n(128),
    o = n(132),
    i = n(369),
    a = n(134),
    s = n(133),
    u = n(135),
    l = n(368),
    c = n(58);
  n.i(r.a)("utility.datetime", {
    toDateObject: o.a,
    toTime: i.a,
    toHourAmount: a.a,
    toDayAmount: s.a,
    toWeekAmount: u.a,
    toTimeAmount: l.a,
    timeDurationConverter: c.a
  });
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if (Array.isArray(e)) {
      for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
      return n;
    }
    return Array.from(e);
  }

  function o() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [s.a],
      t = p(i.c.apply(void 0, r(e)));
    return n.i(i.d)(u.a, t);
  }
  var i = n(71),
    a = n(588),
    s = n.n(a),
    u = n(365),
    l = n(46);
  t.a = o;
  var c = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    d = function(e) {
      switch (e.type) {
        case l.bulkAddChannels.getType():
          return c({}, e, {
            payload: "Channel bulk add payload is too big to output to redux devtools"
          });
        default:
          return e;
      }
    },
    f = function(e) {
      return c({}, e, {
        channels: "Too Big To Output to redux devtools, use TS.redux.getState() to output state to the console"
      });
    },
    h = {
      autoPause: !0,
      actionSanitizer: d,
      stateSanitizer: f,
      maxAge: 1e3,
      features: {
        pause: !0
      }
    },
    p = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(h) : i.b;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(5),
    s = n.n(a),
    u = n(1),
    l = n.n(u),
    c = n(8),
    d = (n.n(c), n(313)),
    f = n(352),
    h = n(332),
    p = n(334),
    _ = n(131),
    m = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    y = {
      rows: l.a.PropTypes.arrayOf(l.a.PropTypes.shape({
        type: l.a.PropTypes.string
      })).isRequired,
      unreadRows: l.a.PropTypes.arrayOf(l.a.PropTypes.number),
      selectedItemId: l.a.PropTypes.string,
      onItemSelect: l.a.PropTypes.func.isRequired,
      onInviteClick: l.a.PropTypes.func,
      onUnreadsOffscreen: l.a.PropTypes.func,
      scrollToIndex: l.a.PropTypes.number,
      scrollToAlignment: l.a.PropTypes.string,
      reportOffscreenIds: l.a.PropTypes.func
    },
    v = {
      rows: [],
      selectedItemId: "",
      onItemClick: s.a.noop,
      onInviteClick: s.a.noop,
      onUnreadsOffscreen: s.a.noop,
      scrollToIndex: void 0,
      scrollToAlignment: "start",
      reportOffscreenIds: s.a.noop
    },
    g = function(e) {
      function t(e) {
        r(this, t);
        var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        return n.setRef = n.setRef.bind(n), n.onScroll = n.onScroll.bind(n), n.onItemClick = n.onItemClick.bind(n), n.onInviteClick = n.onInviteClick.bind(n), n.renderRow = n.renderRow.bind(n), n.onRowsRendered = n.onRowsRendered.bind(n), n;
      }
      return i(t, e), m(t, [{
        key: "setRef",
        value: function(e) {
          this.List = e;
        }
      }, {
        key: "onScroll",
        value: function(e) {
          var t = e.scrollTop;
          this.currentScrollTop = t;
        }
      }, {
        key: "scrollToChannel",
        value: function(e) {
          var t = this,
            r = e.channelId,
            o = e.position,
            i = this.props,
            a = i.rows,
            u = (i.scrollToAlignment, i.scrollToIndex, s.a.findIndex(this.props.rows, {
              channelId: r
            })),
            l = "top" === o ? -2 : 2,
            c = s.a.clamp(u + l, 0, a.length),
            d = "top" === o ? "start" : "end",
            f = this.List.getOffsetForRow({
              index: c,
              alignment: d
            });
          n.i(_.a)({
            fromValue: this.currentScrollTop,
            toValue: f,
            duration: 500,
            easing: "easeInOutQuad",
            onTick: function(e) {
              var n = e.value,
                r = e.nextTick;
              t.List.scrollToPosition(n), r();
            },
            onComplete: function() {
              t.currentScrollTop = f;
            }
          });
        }
      }, {
        key: "onRowsRendered",
        value: function(e) {
          var t = e.startIndex,
            n = e.stopIndex,
            r = this.props,
            o = r.reportOffscreenIds,
            i = r.rows;
          o({
            idsAboveViewport: s.a.chain(i).slice(0, t).filter({
              type: "channel"
            }).flatMap("channelId").value(),
            idsBelowViewport: s.a.chain(i).slice(n).filter({
              type: "channel"
            }).flatMap("channelId").value()
          });
        }
      }, {
        key: "onItemClick",
        value: function(e, t) {
          e.preventDefault(), this.props.onItemSelect(t);
        }
      }, {
        key: "onInviteClick",
        value: function(e) {
          e.preventDefault(), this.props.onInviteClick();
        }
      }, {
        key: "renderRow",
        value: function(e) {
          var t = e.index,
            n = e.key,
            r = e.style,
            o = s.a.get(this.props.rows, t),
            i = void 0;
          switch (o.type) {
            case "allUnreadsLink":
              i = this.renderLink("Vall_unreads");
              break;
            case "allThreadsLink":
              i = this.renderLink("Vall_threads");
              break;
            case "channelGroupHeader":
              i = this.renderChannelGroupHeader(o);
              break;
            case "channel":
              i = this.renderChannel(o.channelId);
              break;
            case "invitePeopleLink":
              i = this.renderLink("Vinvites");
              break;
            case "spacer":
              i = null;
              break;
            default:
              console.warn("Row type " + o.type + " not implemented", o);
          }
          return l.a.createElement("div", {
            key: n,
            style: r
          }, i);
        }
      }, {
        key: "renderChannelGroupHeader",
        value: function(e) {
          var t = e.displayName,
            n = e.tooltip,
            r = l.a.createElement("h5", {
              className: "p-channel_sidebar__header"
            }, t);
          return n ? l.a.createElement(f.a, {
            tip: n,
            position: "top-left",
            offsetY: 4
          }, r) : r;
        }
      }, {
        key: "renderChannel",
        value: function(e) {
          return l.a.createElement(h.a, {
            key: e,
            id: e
          });
        }
      }, {
        key: "renderLink",
        value: function(e) {
          return l.a.createElement(p.a, {
            key: e,
            id: e
          });
        }
      }, {
        key: "render",
        value: function() {
          var e = this;
          return l.a.createElement(d.a, null, function(t) {
            var n = t.height;
            return l.a.createElement(d.b, {
              height: n,
              rowCount: e.props.rows.length,
              rowHeight: 26,
              rowRenderer: e.renderRow,
              width: 220,
              onRowsRendered: e.onRowsRendered,
              onScroll: e.onScroll,
              ref: e.setRef
            });
          });
        }
      }]), t;
    }(l.a.PureComponent);
  g.propTypes = y, g.defaultProps = v, t.a = g;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(5),
    s = n.n(a),
    u = n(1),
    l = n.n(u),
    c = n(120),
    d = (n.n(c), n(330)),
    f = n(335),
    h = n(593),
    p = (n.n(h), Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    }),
    _ = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    m = {
      hasAllUnreadsLink: l.a.PropTypes.bool,
      hasAllThreadsLink: l.a.PropTypes.bool,
      hasInvitePeopleLink: l.a.PropTypes.bool,
      selectedItemId: l.a.PropTypes.string,
      channelGroupsOrdered: l.a.PropTypes.arrayOf(l.a.PropTypes.string),
      channelGroups: l.a.PropTypes.object,
      unreadChannelIds: l.a.PropTypes.arrayOf(l.a.PropTypes.string),
      mentionChannelIds: l.a.PropTypes.arrayOf(l.a.PropTypes.string),
      onItemSelect: l.a.PropTypes.func,
      onInviteClick: l.a.PropTypes.func,
      onCreateChannelClick: l.a.PropTypes.func,
      onOpenDMClick: l.a.PropTypes.func,
      links: l.a.PropTypes.object
    },
    y = {
      hasAllUnreadsLink: !1,
      hasUnreadUnreads: !1,
      hasAllThreadsLink: !1,
      hasUnreadThreads: !1,
      hasInvitePeopleLink: !0,
      selectedItemId: null,
      channelGroupsOrdered: [],
      channelGroups: {},
      isShowing: !0,
      onItemSelect: s.a.noop,
      onInviteClick: s.a.noop,
      onCreateChannelClick: s.a.noop,
      onOpenDMClick: s.a.noop,
      unreadChannelIds: [],
      mentionChannelIds: [],
      links: {}
    },
    v = function(e) {
      return function(t) {
        return t[e];
      };
    },
    g = n.i(c.createSelector)([v("hasAllUnreadsLink"), v("hasAllThreadsLink"), v("hasInvitePeopleLink"), v("channelGroupsOrdered"), v("channelGroups")], function(e, t, n, r, o) {
      var i = [];
      return e && i.push({
        type: "allUnreadsLink"
      }), t && i.push({
        type: "allThreadsLink"
      }), r.forEach(function(e) {
        var t = s.a.get(o, e, []);
        if (i.length > 0 && i.push({
            type: "spacer"
          }), t.displayName) {
          var n = t.displayName,
            r = t.tooltip;
          i.push({
            type: "channelGroupHeader",
            displayName: n,
            tooltip: r
          });
        }
        t.channelsOrdered.forEach(function(e) {
          i.push({
            type: "channel",
            channelId: e
          });
        });
      }), n && (i.push({
        type: "spacer"
      }), i.push({
        type: "invitePeopleLink"
      })), i;
    }),
    M = function(e) {
      function t(e) {
        r(this, t);
        var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        return n.setRef = n.setRef.bind(n), n.getOnBannerClick = n.getOnBannerClick.bind(n), n.reportOffscreenIds = n.reportOffscreenIds.bind(n), n.renderUnreadBannerMaybe = n.renderUnreadBannerMaybe.bind(n), n.state = {
          idsAboveViewport: [],
          idsBelowViewport: [],
          scrollToIndex: null,
          scrollToAlignment: "start"
        }, n;
      }
      return i(t, e), _(t, [{
        key: "setRef",
        value: function(e) {
          this.ChannelList = e;
        }
      }, {
        key: "getOnBannerClick",
        value: function(e) {
          var t = this,
            n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            r = "top" === e ? s.a.first : s.a.last,
            o = n ? this.props.mentionChannelIds : this.props.unreadChannelIds,
            i = r(o);
          return function(n) {
            n.preventDefault(), t.ChannelList.scrollToChannel({
              channelId: i,
              position: e
            });
          };
        }
      }, {
        key: "reportOffscreenIds",
        value: function(e) {
          this.setState(function(t) {
            return p({}, t, e);
          });
        }
      }, {
        key: "renderUnreadBannerMaybe",
        value: function(e) {
          var t = this.props,
            n = t.mentionChannelIds,
            r = t.unreadChannelIds,
            o = this.state,
            i = o.idsAboveViewport,
            a = o.idsBelowViewport,
            u = "top" === e ? i : a;
          return s.a.intersection(n, u).length ? l.a.createElement(f.a, {
            position: e,
            isMention: !0,
            onClick: this.getOnBannerClick(e, !0)
          }) : s.a.intersection(r, u).length ? l.a.createElement(f.a, {
            position: e,
            onClick: this.getOnBannerClick(e)
          }) : null;
        }
      }, {
        key: "render",
        value: function() {
          return l.a.createElement("nav", {
            className: "p-channel_sidebar"
          }, this.renderUnreadBannerMaybe("top"), l.a.createElement(d.a, {
            rows: g(this.props),
            selectedItemId: this.props.selectedItemId,
            onItemSelect: this.props.onItemSelect,
            onInviteClick: this.props.onInviteClick,
            scrollToIndex: this.state.scrollToIndex,
            scrollToAlignment: this.state.scrollToAlignment,
            reportOffscreenIds: this.reportOffscreenIds,
            ref: this.setRef
          }), this.renderUnreadBannerMaybe("bottom"));
        }
      }]), t;
    }(l.a.Component);
  M.propTypes = m, M.defaultProps = y, t.a = M;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = n(5),
    l = n.n(u),
    c = n(29),
    d = n(8),
    f = n.n(d),
    h = n(57),
    p = n(46),
    _ = n(73),
    m = n(350),
    y = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    v = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    g = {
      isShared: a.PropTypes.bool,
      isOrgShared: a.PropTypes.bool,
      type: a.PropTypes.oneOf(["channel", "group", "im", "mpim"]),
      isSlackbot: a.PropTypes.bool,
      isYou: a.PropTypes.bool,
      isMuted: a.PropTypes.bool,
      isStarred: a.PropTypes.bool,
      hasUnreads: a.PropTypes.bool,
      hasDraft: a.PropTypes.bool,
      displayName: a.PropTypes.string,
      isSelected: a.PropTypes.bool,
      badgeCount: a.PropTypes.number,
      userCount: a.PropTypes.number,
      statusEmoji: a.PropTypes.string,
      id: a.PropTypes.string.isRequired,
      selectItem: a.PropTypes.func
    },
    M = {
      isSelected: !1,
      isShared: !1,
      isOrgShared: !1,
      type: "channel",
      isSlackbot: !1,
      isYou: !1,
      isMuted: !1,
      isStarred: !1,
      hasUnreads: !1,
      hasDraft: !1,
      displayName: "",
      badgeCount: 0,
      userCount: 0,
      statusEmoji: void 0,
      selectItem: l.a.noop
    },
    b = function(e) {
      function t(e) {
        r(this, t);
        var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        return n.selectItem = n.selectItem.bind(n), n.state = {}, n;
      }
      return i(t, e), v(t, [{
        key: "selectItem",
        value: function() {
          this.props.selectItem(this.props.id);
        }
      }, {
        key: "renderPresence",
        value: function(e) {
          return s.a.createElement(m.a, {
            memberId: e
          });
        }
      }, {
        key: "renderBadge",
        value: function(e) {
          var t = e > 9 ? "9+" : e;
          return s.a.createElement("span", {
            className: "p-channel_sidebar__badge"
          }, t);
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props,
            t = e.type,
            n = e.isShared,
            r = e.isOrgShared,
            o = e.isSlackbot,
            i = e.isYou,
            a = e.isMuted,
            u = e.hasUnreads,
            l = e.hasDraft,
            c = e.badgeCount,
            d = e.isSelected,
            h = e.userCount,
            p = e.displayName,
            _ = e.statusEmoji,
            m = e.isStarred,
            v = e.id,
            g = f()("p-channel_sidebar__channel", {
              "p-channel_sidebar__channel--private": "group" === t,
              "p-channel_sidebar__channel--shared": n,
              "p-channel_sidebar__channel--ent-shared": n && r,
              "p-channel_sidebar__channel--mpim": "mpim" === t,
              "p-channel_sidebar__channel--im": "im" === t,
              "p-channel_sidebar__channel--im-slackbot": o,
              "p-channel_sidebar__channel--im-you": i,
              "p-channel_sidebar__channel--selected": d,
              "p-channel_sidebar__channel--muted": a,
              "p-channel_sidebar__channel--starred": m,
              "p-channel_sidebar__channel--unread": u,
              "p-channel_sidebar__channel--draft": l
            }),
            M = c > 0 && this.renderBadge(c),
            b = {
              "data-user-count": h
            },
            w = "im" === t && !o && !l && this.renderPresence(v),
            k = i && s.a.createElement("span", {
              className: "p-channel_sidebar__you_label"
            }, "(you)"),
            L = _ && s.a.createElement("span", {
              className: "p-channel_sidebar__status"
            }, _);
          return s.a.createElement("a", y({
            className: g,
            onClick: this.selectItem
          }, b), w, p, k, L, M);
        }
      }]), t;
    }(s.a.Component);
  b.propTypes = g, b.defaultProps = M;
  var w = function(e, t) {
      var r = t.id,
        o = n.i(p.getChannelById)(e, r);
      if (!o) return {
        id: r
      };
      var i = n.i(p.isMpim)(o) ? Math.min(Math.max(l.a.get(o, "members.length", 1) - 1, 2), 9) : 0;
      return {
        isSelected: n.i(h.c)(e) === r,
        isShared: o.is_shared,
        isOrgShared: o.is_org_shared,
        isSlackbot: o.is_slackbot_im,
        isYou: o.is_self_im,
        isMuted: n.i(_.isChannelMutedById)(e, r),
        isStarred: o.is_starred,
        hasUnreads: !!o.unread_cnt,
        hasDraft: !!o.last_msg_input,
        displayName: o.name,
        badgeCount: o.badge_count,
        statusEmoji: l.a.get(o, "status.emoji"),
        userCount: i,
        type: n.i(p.getChannelType)(o),
        id: r
      };
    },
    k = {
      selectItem: h.e
    };
  t.a = n.i(c.b)(w, k)(b);
}, function(e, t, n) {
  "use strict";
  var r = n(5),
    o = n.n(r),
    i = n(29),
    a = n(120),
    s = (n.n(a), n(57)),
    u = n(331),
    l = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    c = function(e) {
      return function(t) {
        return t[e];
      };
    },
    d = n.i(a.createSelector)([s.a, s.b], function(e, t) {
      var n = o.a.map(e, function(e) {
        return o.a.get(t, e, {}).channelsOrdered;
      });
      return n = o.a.flatten(n);
    }),
    f = n.i(a.createSelector)([c("ids"), c("channels")], function(e, t) {
      return o.a.map(e, function(e) {
        return t[e];
      });
    }),
    h = function(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
        r = e.channelSidebar,
        i = d(e),
        a = f({
          ids: i,
          channels: e.channels
        });
      return l({}, t, {
        selectedItemId: n.i(s.c)(e),
        channelGroupsOrdered: n.i(s.a)(e),
        channelGroups: n.i(s.b)(e),
        unreadChannelIds: o.a.chain(a).filter("has_unreads").map("id").value(),
        mentionChannelIds: o.a.chain(a).filter("badge_count").map("id").value(),
        hasAllUnreadsLink: r.hasAllUnreadsLink,
        hasAllThreadsLink: r.hasAllThreadsLink,
        hasInvitePeopleLink: r.hasInvitePeopleLink,
        links: n.i(s.d)(e)
      });
    },
    p = {
      onItemSelect: s.e,
      onInviteClick: s.f,
      onCreateChannelClick: s.g,
      onOpenDMClick: s.h
    };
  t.a = n.i(i.b)(h, p)(u.a);
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = n(5),
    l = (n.n(u), n(29)),
    c = n(8),
    d = n.n(c),
    f = n(57),
    h = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    p = {
      id: s.a.PropTypes.string.isRequired,
      label: s.a.PropTypes.string.isRequired,
      labelUnread: s.a.PropTypes.string,
      hasUnreads: s.a.PropTypes.bool,
      selectable: s.a.PropTypes.bool.isRequired,
      isSelected: s.a.PropTypes.bool
    },
    _ = {
      isSelected: !1,
      selectable: !0,
      label: "",
      labelUnread: "",
      hasUnreads: !1
    },
    m = function(e) {
      function t(e) {
        r(this, t);
        var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        return n.selectItem = n.selectItem.bind(n), n.state = {}, n;
      }
      return i(t, e), h(t, [{
        key: "selectItem",
        value: function() {
          this.props.selectItem(this.props.id);
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props,
            t = e.id,
            n = e.label,
            r = (e.labelUnread, e.selectable, e.hasUnreads, e.isSelected),
            o = d()("p-channel_sidebar__link", {
              "p-channel_sidebar__link--unreads": "Vall_unreads" === t,
              "p-channel_sidebar__link--threads": "Vall_threads" === t,
              "p-channel_sidebar__link--invites": "Vinvites" === t,
              "p-channel_sidebar__link--selected": r
            });
          return s.a.createElement("a", {
            className: o,
            onClick: this.selectItem
          }, n);
        }
      }]), t;
    }(s.a.Component);
  m.propTypes = p, m.defaultProps = _;
  var y = function(e, t) {
      var r = t.id,
        o = n.i(f.i)(e, r);
      return o ? {
        isSelected: n.i(f.c)(e) === r,
        label: o.label,
        labelUnread: o.labelUnread,
        selectable: o.selectable,
        hasUnreads: o.hasUnreads,
        id: r
      } : {
        id: r
      };
    },
    v = {
      selectItem: f.e
    };
  t.a = n.i(l.b)(y, v)(m);
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.position,
      n = e.isMention,
      r = u()("p-channel_sidebar__banner", {
        "p-channel_sidebar__banner--mentions": n,
        "p-channel_sidebar__banner--unreads": !n,
        "p-channel_sidebar__banner--top": "top" === t,
        "p-channel_sidebar__banner--bottom": "bottom" === t
      }),
      o = l({}, e);
    delete o.position, delete o.isMention;
    var s = "top" === t ? "up" : "down",
      c = n ? "Unread Mentions" : "More Unreads";
    return i.a.createElement("div", l({
      className: r
    }, o), c, " ", i.a.createElement(a.a, {
      type: "arrow_" + s
    }));
  }
  var o = n(1),
    i = n.n(o),
    a = n(25),
    s = n(8),
    u = n.n(s);
  t.a = r;
  var l = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    c = {
      position: i.a.PropTypes.oneOf(["top", "bottom"]),
      isMention: i.a.PropTypes.bool
    },
    d = {
      position: "top",
      isMention: !1
    };
  r.propTypes = c, r.defaultProps = d;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = n(8),
    l = n.n(u),
    c = n(25),
    d = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    f = {
      groups: a.PropTypes.array.isRequired,
      activeGroup: a.PropTypes.object,
      onGroupTabClick: a.PropTypes.func
    },
    h = {
      activeGroup: {},
      onGroupTabClick: function() {}
    },
    p = function(e) {
      function t() {
        return r(this, t), o(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));
      }
      return i(t, e), d(t, [{
        key: "renderEmojiGroupTab",
        value: function(e) {
          var t = this,
            n = l()("emoji_grouping_tab", {
              active: this.props.activeGroup === e
            }),
            r = function() {
              return t.props.onGroupTabClick(e);
            };
          return s.a.createElement("a", {
            key: e.name,
            className: n,
            onClick: r
          }, s.a.createElement("span", {
            className: "emoji-sizer",
            title: e.display_name
          }, s.a.createElement(c.a, {
            type: e.tab_icon_name
          })));
        }
      }, {
        key: "render",
        value: function() {
          var e = this;
          return s.a.createElement("div", {
            id: "emoji_menu_header"
          }, this.props.groups.map(function(t) {
            return e.renderEmojiGroupTab(t);
          }));
        }
      }]), t;
    }(a.PureComponent);
  t.a = p, p.propTypes = f, p.defaultProps = h;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = n(30),
    l = n(56),
    c = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    d = u.a.ns("emoji_picker"),
    f = {
      handyRxns: a.PropTypes.array,
      numBackgroundColors: a.PropTypes.number.isRequired,
      onSelected: a.PropTypes.func,
      onMouseEnter: a.PropTypes.func,
      onMouseLeave: a.PropTypes.func
    },
    h = {
      handyRxns: [],
      onSelected: function() {},
      onMouseEnter: function() {},
      onMouseLeave: function() {}
    },
    p = function(e) {
      function t() {
        return r(this, t), o(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));
      }
      return i(t, e), c(t, [{
        key: "onClick",
        value: function(e, t) {
          e.preventDefault(), this.props.onSelected(e, t);
        }
      }, {
        key: "renderRxn",
        value: function(e, t) {
          var n = this;
          return s.a.createElement("a", {
            key: e.name,
            className: "emoji_li",
            onClick: function(t) {
              return n.onClick(t, e);
            },
            onMouseEnter: function() {
              return n.props.onMouseEnter(e);
            },
            onMouseLeave: function() {
              return n.props.onMouseLeave();
            },
            "data-color-index": t % this.props.numBackgroundColors
          }, s.a.createElement(l.a, {
            emoji: e
          }));
        }
      }, {
        key: "render",
        value: function() {
          var e = this;
          return s.a.createElement("div", {
            id: "emoji_div_handy_rxns"
          }, s.a.createElement("h3", {
            id: "emoji_h3_handy_rxns"
          }, d("Handy Reactions")), s.a.createElement("div", {
            className: "emoji_ul",
            id: "emoji_ul_handy_rxns",
            role: "menu"
          }, this.props.handyRxns.map(function(t, n) {
            return e.renderRxn(t, n);
          })));
        }
      }]), t;
    }(a.PureComponent);
  t.a = p, p.propTypes = f, p.defaultProps = h;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(5),
    s = n.n(a),
    u = n(8),
    l = n.n(u),
    c = n(1),
    d = n.n(c),
    f = n(313),
    h = n(56),
    p = n(25),
    _ = n(30),
    m = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    y = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    v = _.a.ns("emoji_picker"),
    g = {
      onSelected: c.PropTypes.func,
      onMouseEnter: c.PropTypes.func,
      onMouseLeave: c.PropTypes.func,
      onScroll: c.PropTypes.func,
      scrollToIndex: c.PropTypes.number,
      numBackgroundColors: c.PropTypes.number.isRequired,
      screenRows: c.PropTypes.array,
      numEmojiPerRow: c.PropTypes.number.isRequired,
      currentSelection: c.PropTypes.object,
      cursorPosition: c.PropTypes.array
    },
    M = {
      onSelected: function() {},
      onMouseEnter: function() {},
      onMouseLeave: function() {},
      onScroll: function() {},
      scrollToIndex: null,
      screenRows: [],
      currentSelection: {},
      cursorPosition: []
    },
    b = function(e) {
      function t(e) {
        r(this, t);
        var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        return n.getRowHeight = n.getRowHeight.bind(n), n.renderRow = n.renderRow.bind(n), n.setListRef = n.setListRef.bind(n), n.virtualList = null, n;
      }
      return i(t, e), y(t, null, [{
        key: "renderGroupItem",
        value: function(e) {
          return d.a.createElement("h3", {
            id: "emoji_h3_" + e.name
          }, e.display_name);
        }
      }, {
        key: "renderEmptyState",
        value: function() {
          return d.a.createElement("div", null, d.a.createElement("h3", {
            id: "emoji_h3_search_results"
          }, v("Search Results")), d.a.createElement("div", {
            id: "emoji_zero_results"
          }, v("No emoji found")));
        }
      }]), y(t, [{
        key: "componentWillReceiveProps",
        value: function(e) {
          s.a.isNumber(e.scrollToIndex) && this.virtualList.scrollToRow(e.scrollToIndex);
        }
      }, {
        key: "onEmojiClick",
        value: function(e, t) {
          e.preventDefault(), this.props.onSelected(e, t);
        }
      }, {
        key: "getRowHeight",
        value: function(e) {
          var t = e.index;
          switch (this.props.screenRows[t].type) {
            case "search":
              return 54;
            case "group":
              return 28;
            default:
              return 33;
          }
        }
      }, {
        key: "isEmojiSelected",
        value: function(e, t) {
          var n = this.props,
            r = n.cursorPosition,
            o = n.numEmojiPerRow,
            i = e.name === s.a.get(this.props.currentSelection, "name"),
            a = r[1] * o + r[0],
            u = t === a;
          return i && u;
        }
      }, {
        key: "usingKeyboard",
        value: function() {
          return -1 !== this.props.cursorPosition[1];
        }
      }, {
        key: "renderTabTip",
        value: function() {
          return d.a.createElement("div", {
            className: "emoji_tip"
          }, d.a.createElement("span", {
            dangerouslySetInnerHTML: {
              __html: v('Type <b>":"</b> and hit TAB key for autocomplete')
            }
          }));
        }
      }, {
        key: "renderCanAddEmojiTip",
        value: function() {
          return d.a.createElement("div", {
            className: "emoji_tip can_add_emoji_tip"
          }, d.a.createElement(p.a, {
            type: "plus",
            className: "ts_icon_inherit tiny_right_margin"
          }), d.a.createElement("span", {
            dangerouslySetInnerHTML: {
              __html: v('You can <a href="/admin/emoji" target="_blank">add custom emoji here</a>')
            }
          }));
        }
      }, {
        key: "renderEmojiItem",
        value: function(e, t) {
          var n = this;
          return d.a.createElement("a", {
            key: e.name,
            onClick: function(t) {
              return n.onEmojiClick(t, e);
            },
            onMouseEnter: function() {
              return n.props.onMouseEnter(e);
            },
            onMouseLeave: function() {
              return n.props.onMouseLeave(e);
            },
            className: l()("emoji_li", {
              key_selection: this.usingKeyboard() && this.isEmojiSelected(e, t)
            }),
            "data-color-index": t % this.props.numBackgroundColors,
            "data-name": e.name,
            "data-names": e.names
          }, d.a.createElement(h.a, {
            emoji: e
          }));
        }
      }, {
        key: "renderRow",
        value: function(e) {
          var n = this,
            r = e.index,
            o = e.key,
            i = e.style,
            a = this.props.screenRows[r],
            s = r;
          if (0 === s) return null;
          var u = void 0;
          switch (a.type) {
            case "group":
              u = t.renderGroupItem(a.group);
              break;
            case "tabTip":
              u = this.renderTabTip();
              break;
            case "canAddEmojiTip":
              u = this.renderCanAddEmojiTip();
              break;
            case "emoji":
              u = a.items.map(function(e, t) {
                var r = s * n.props.numEmojiPerRow + t;
                return n.renderEmojiItem(e, r);
              });
          }
          return d.a.createElement("div", {
            key: o,
            style: i
          }, u);
        }
      }, {
        key: "setListRef",
        value: function(e) {
          this.virtualList = e;
        }
      }, {
        key: "render",
        value: function() {
          var e = this,
            t = this.props,
            n = t.screenRows,
            r = t.numBackgroundColors,
            o = t.numEmojiPerRow,
            i = {
              screenRows: n,
              numBackgroundColors: r,
              numEmojiPerRow: o
            };
          return d.a.createElement(f.a, null, function(t) {
            var n = t.height,
              r = t.width;
            return d.a.createElement(f.b, m({}, i, {
              className: "emoji_menu_items_scroller",
              height: n,
              rowCount: e.props.screenRows.length,
              rowHeight: e.getRowHeight,
              rowRenderer: e.renderRow,
              scrollToAlignment: e.usingKeyboard() ? "auto" : "start",
              width: r,
              onRowsRendered: e.props.onScroll,
              noRowsRenderer: e.renderEmptyState,
              cursorPosition: e.props.cursorPosition,
              ref: e.setListRef
            }));
          });
        }
      }]), t;
    }(c.PureComponent);
  t.a = b, b.propTypes = g, b.defaultProps = M;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(5),
    s = n.n(a),
    u = n(1),
    l = n.n(u),
    c = n(8),
    d = n.n(c),
    f = n(56),
    h = n(338),
    p = n(336),
    _ = n(340),
    m = n(337),
    y = n(25),
    v = n(30),
    g = n(137),
    M = n(354),
    b = n(356),
    w = function() {
      function e(e, t) {
        var n = [],
          r = !0,
          o = !1,
          i = void 0;
        try {
          for (var a, s = e[Symbol.iterator](); !(r = (a = s.next()).done) && (n.push(a.value), !t || n.length !== t); r = !0);
        } catch (e) {
          o = !0, i = e;
        } finally {
          try {
            !r && s.return && s.return();
          } finally {
            if (o) throw i;
          }
        }
        return n;
      }
      return function(t, n) {
        if (Array.isArray(t)) return t;
        if (Symbol.iterator in Object(t)) return e(t, n);
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      };
    }(),
    k = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    L = v.a.ns("emoji_picker"),
    T = [0, -1],
    S = [0, 1],
    Y = {
      handyRxnNames: u.PropTypes.array,
      skinToneChoiceNames: u.PropTypes.array,
      searchQuery: u.PropTypes.string,
      activeSkinToneId: u.PropTypes.string,
      groups: u.PropTypes.array,
      numBackgroundColors: u.PropTypes.number,
      onSelected: u.PropTypes.func,
      onClosed: u.PropTypes.func,
      onSkinToneChanged: u.PropTypes.func,
      canAddEmoji: u.PropTypes.bool
    },
    D = {
      numBackgroundColors: 6,
      canAddEmoji: !0,
      onSkinToneChanged: s.a.noop,
      handyRxnNames: [],
      skinToneChoiceNames: [],
      searchQuery: "",
      activeSkinToneId: "",
      groups: [],
      onSelected: s.a.noop,
      onClosed: s.a.noop
    },
    x = function(e) {
      function t(e) {
        r(this, t);
        var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        n.onEmojiMouseEnter = n.onEmojiMouseEnter.bind(n), n.onEmojiMouseLeave = n.onEmojiMouseLeave.bind(n), n.onMouseWhileUsingKeyboard = n.onMouseWhileUsingKeyboard.bind(n), n.onListScroll = n.onListScroll.bind(n), n.onSearch = n.onSearch.bind(n), n.onEmojiPickerClick = n.onEmojiPickerClick.bind(n), n.onGroupTabClick = n.onGroupTabClick.bind(n), n.onSkinToneChanged = n.onSkinToneChanged.bind(n), n.onSkinTonePickerOpened = n.onSkinTonePickerOpened.bind(n), n.triggerSelect = n.triggerSelect.bind(n), n.triggerClose = n.triggerClose.bind(n), n.resetSelection = n.resetSelection.bind(n), n.getRowsForGroup = n.getRowsForGroup.bind(n), n.setMenuRef = n.setMenuRef.bind(n), n.setSearchInputRef = n.setSearchInputRef.bind(n), n.onSearchInputChange = n.onSearchInputChange.bind(n);
        var i = t.getAllEmoji(n.props.groups);
        return n.state = {
          currentSelection: {},
          isPreviewing: !1,
          isSkinTonePickerOpen: !1,
          searchQuery: e.searchQuery,
          scrollToIndex: null,
          activeGroup: n.getFirstTab(),
          isScrolledToBottom: !1,
          screenRows: n.getAllRows(e.groups, e.activeSkinToneId, e.searchQuery),
          handyRxns: n.filterEmojiByName(i, e.handyRxnNames),
          skinToneChoices: n.filterEmojiByName(i, e.skinToneChoiceNames),
          cursorPosition: T,
          usingKeyboard: !1,
          mousePosition: null
        }, n.commands = [{
          keys: ["enter", "shift+enter"],
          handler: function(e) {
            n.state.isPreviewing && n.state.currentSelection && (e.preventDefault(), n.triggerSelect(e, n.state.currentSelection));
          }
        }, {
          keys: ["esc", "tab"],
          handler: function(e) {
            e.preventDefault(), n.triggerClose(e);
          }
        }, {
          keys: ["up", "shift+up"],
          handler: n.onArrowKey.bind(n, "up")
        }, {
          keys: ["down", "shift+down"],
          handler: n.onArrowKey.bind(n, "down")
        }, {
          keys: ["left", "shift+left"],
          handler: n.onArrowKey.bind(n, "left")
        }, {
          keys: ["right", "shift+right"],
          handler: n.onArrowKey.bind(n, "right")
        }], n;
      }
      return i(t, e), k(t, null, [{
        key: "getAllEmoji",
        value: function(e) {
          return s.a.chain(e).flatMap("items").compact().uniqBy("name").value();
        }
      }, {
        key: "getSearchResults",
        value: function(e, t) {
          var n = s.a.chain(e).reject(function(e) {
            return "mine" === e.name;
          }).flatMap("items").compact().value();
          if (":" === t) return n;
          var r = s.a.compact(t.split(" "));
          return s.a.chain(r).flatMap(function(e) {
            if (":" === e.charAt(0) && ":" === e.slice(-1)) {
              var t = e.slice(1, -1);
              return n.filter(function(e) {
                return M.a(e.display_name || e.name) === t;
              });
            }
            var r = [];
            return ":" !== e.substr(0, 1) && ":" !== e.slice(-1) && (r = M.b(e)), n.filter(function(t) {
              return M.c(t, e, r);
            });
          }).uniqBy("name").value();
        }
      }, {
        key: "emojiMatchesSkinTone",
        value: function(e, t) {
          return !e.is_skin || e.skin_tone_id === (t || "1");
        }
      }]), k(t, [{
        key: "componentWillMount",
        value: function() {
          this.props.searchQuery && this.onSearch(this.props.searchQuery), b.a("react_emoji_menu_mount_mark");
        }
      }, {
        key: "componentDidMount",
        value: function() {
          this.keyCommands = new g.a(this.element), this.keyCommands.bindAll(this.commands), this.searchInput.focus(), b.b("react_emoji_menu_mount", "react_emoji_menu_mount_mark");
        }
      }, {
        key: "componentWillReceiveProps",
        value: function(e) {
          var n = !s.a.isEqual(this.props.groups, e.groups),
            r = this.props.activeSkinToneId !== e.activeSkinToneId,
            o = this.state.searchQuery !== e.searchQuery,
            i = o ? e.searchQuery : this.state.searchQuery;
          if (o && this.onSearch(i), n || r) {
            var a = t.getAllEmoji(e.groups);
            this.setState({
              handyRxns: this.filterEmojiByName(a, e.handyRxnNames),
              skinToneChoices: this.filterEmojiByName(a, e.skinToneChoiceNames),
              screenRows: this.getAllRows(e.groups, e.activeSkinToneId, i)
            });
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function() {
          this.keyCommands.reset();
        }
      }, {
        key: "setMenuRef",
        value: function(e) {
          this.element = e;
        }
      }, {
        key: "setSearchInputRef",
        value: function(e) {
          this.searchInput = e;
        }
      }, {
        key: "onArrowKey",
        value: function(e, t) {
          var n = e;
          if (t.target === this.searchInput)
            if ("right" === e && this.searchInput.selectionEnd === this.searchInput.value.length);
            else if ("left" === e || "right" === e) return;
          t.preventDefault(), this.element.focus();
          var r = this.moveCursor(n),
            o = void 0;
          o = r[1] < this.state.cursorPosition[1] || 1 === r[1] ? r[1] - 1 : r[1], this.setState({
            cursorPosition: r,
            currentSelection: this.getCell(r),
            scrollToIndex: o,
            isPreviewing: !0,
            usingKeyboard: !0,
            mousePosition: null
          });
        }
      }, {
        key: "onEmojiMouseEnter",
        value: function(e) {
          this.state.usingKeyboard || this.setState({
            currentSelection: e,
            cursorPosition: T,
            isPreviewing: !0,
            isSkinTonePickerOpen: !1
          });
        }
      }, {
        key: "onEmojiMouseLeave",
        value: function() {
          this.state.usingKeyboard || this.resetSelection();
        }
      }, {
        key: "onMouseWhileUsingKeyboard",
        value: function(e) {
          if (this.state.usingKeyboard) {
            var t = [e.clientX, e.clientY];
            if (!this.state.mousePosition) return void this.setState({
              mousePosition: t
            });
            s.a.isEqual(t, this.state.mousePosition) || this.setState({
              mousePosition: null,
              usingKeyboard: !1,
              scrollToIndex: null,
              cursorPosition: T
            });
          }
        }
      }, {
        key: "onEmojiPickerClick",
        value: function() {
          this.setState({
            isSkinTonePickerOpen: !1
          });
        }
      }, {
        key: "onSkinToneChanged",
        value: function(e) {
          this.props.onSkinToneChanged(e.skin_tone_id), this.setState({
            isSkinTonePickerOpen: !1
          });
        }
      }, {
        key: "onSkinTonePickerOpened",
        value: function() {
          this.setState({
            isSkinTonePickerOpen: !0
          });
        }
      }, {
        key: "onSearchInputChange",
        value: function(e) {
          this.onSearch(e.target.value);
        }
      }, {
        key: "onSearch",
        value: function(e) {
          b.a("react_emoji_menu_search_mark");
          var t = this.getAllRows(this.props.groups, this.props.activeSkinToneId, e),
            n = t.length >= 2 && s.a.get(t, "[1].items.length") >= 1,
            r = e && n ? S : T,
            o = e && n && s.a.get(t, "[1].items[0]") || {},
            i = !(!e || !n);
          this.setState({
            activeGroup: this.getFirstTab(),
            cursorPosition: r,
            searchQuery: e,
            screenRows: t,
            currentSelection: o,
            isPreviewing: i
          }, function() {
            return b.b("react_emoji_menu_search", "react_emoji_menu_search_mark");
          });
        }
      }, {
        key: "onListScroll",
        value: function(e) {
          var t = e.startIndex,
            n = e.stopIndex;
          if (!this.state.searchQuery) {
            var r = this.state.screenRows[t];
            this.setState({
              activeGroup: r.group,
              isScrolledToBottom: n === this.state.screenRows.length - 1,
              scrollToIndex: null
            });
          }
        }
      }, {
        key: "onGroupTabClick",
        value: function(e) {
          var t = this.state.searchQuery ? this.getAllRows(this.props.groups, this.props.activeSkinToneId, "") : this.state.screenRows,
            n = s.a.findIndex(t, function(t) {
              return "group" === t.type && t.group === e;
            });
          this.setState({
            activeGroup: e,
            scrollToIndex: n || 0,
            cursorPosition: T,
            searchQuery: "",
            screenRows: t
          });
        }
      }, {
        key: "getRow",
        value: function(e) {
          return s.a.get(this.state.screenRows, "[" + e + "]");
        }
      }, {
        key: "getCell",
        value: function(e) {
          var t = w(e, 2),
            n = t[0],
            r = t[1];
          return s.a.get(this.state.screenRows, "[" + r + "].items[" + n + "]");
        }
      }, {
        key: "getFirstTab",
        value: function() {
          return s.a.get(this.props, "groups[0]");
        }
      }, {
        key: "getRowsForGroup",
        value: function(e, n) {
          var r = s.a.chain(e.items).compact().filter(function(e) {
            return t.emojiMatchesSkinTone(e, n);
          }).chunk(9).map(function(t) {
            return {
              type: "emoji",
              group: e,
              items: t
            };
          }).value();
          return r.unshift({
            type: "group",
            group: e
          }), r;
        }
      }, {
        key: "getAllRows",
        value: function(e, t, n) {
          var r = this,
            o = this.getActiveGroups(e, n),
            i = s.a.flatMap(o, function(e) {
              return r.getRowsForGroup(e, t);
            });
          return n || (i.push({
            type: "tabTip"
          }), this.props.canAddEmoji && i.push({
            type: "canAddEmojiTip"
          })), i;
        }
      }, {
        key: "getActiveGroups",
        value: function(e, n) {
          if (!n) return e;
          var r = t.getSearchResults(e, n);
          return r.length > 0 ? [{
            display_name: "Search Results",
            items: r,
            name: "search_results"
          }] : [];
        }
      }, {
        key: "getEmojiPreviewData",
        value: function(e) {
          var t = M.a(e.display_name || e.name),
            n = e.display_names || e.names || "";
          return n = M.d(n), {
            name: t,
            aliases: n
          };
        }
      }, {
        key: "triggerSelect",
        value: function(e, t) {
          this.props.onSelected(e, t), e.shiftKey || this.triggerClose(e);
        }
      }, {
        key: "triggerClose",
        value: function(e) {
          this.resetSelection(), this.props.onClosed(), e.stopPropagation();
        }
      }, {
        key: "moveCursor",
        value: function(e, t) {
          var n = t;
          if (this.state.screenRows.length < 2) return null;
          n || (n = this.state.cursorPosition);
          var r = n,
            o = w(r, 2),
            i = o[0],
            a = o[1],
            u = i,
            l = a;
          switch (e) {
            case "down":
              if (-1 === a) return [0, 1];
              if (2 === this.state.screenRows.length) return this.moveCursor("right", [i, a]);
              (l = a + 1) >= this.state.screenRows.length && (l = 1);
              break;
            case "up":
              if (-1 === a) return [0, 1];
              if (2 === this.state.screenRows.length) return this.moveCursor("left", [i, a]);
              (l = a - 1) < 0 && (l = this.state.screenRows.length - 1);
              break;
            case "left":
              if ((u = i - 1) < 0) {
                if (2 === this.state.screenRows.length) {
                  u = this.getRow(a).items.length;
                  break;
                }
                l = a - 1, "emoji" !== this.getRow(l).type && (l -= 1), l < 0 && (l = s.a.findLastIndex(this.state.screenRows, {
                  type: "emoji"
                })), u = this.getRow(l).items.length - 1;
              }
              break;
            case "right":
              if ((u = i + 1) >= this.getRow(a).items.length) {
                if (2 === this.state.screenRows.length) {
                  u = 0;
                  break;
                }
                l = a + 1, l > s.a.findLastIndex(this.state.screenRows, {
                  type: "emoji"
                }) && (l = 0), "emoji" !== this.getRow(l).type && (l += 1), u = 0;
              }
          }
          return "emoji" !== this.getRow(l).type ? this.moveCursor(e, [u, l]) : (this.getCell([u, l]) || (u = this.getRow(l).items.length - 1), [u, l]);
        }
      }, {
        key: "resetSelection",
        value: function() {
          this.setState({
            currentSelection: {},
            isPreviewing: !1,
            scrollToIndex: null,
            cursorPosition: T
          });
        }
      }, {
        key: "filterEmojiByName",
        value: function(e, t) {
          return s.a.chain(e).filter(function(e) {
            return s.a.includes(t, e.name);
          }).sortBy(function(e) {
            return t.indexOf(e.name);
          }).value();
        }
      }, {
        key: "maybeRenderHandyRxns",
        value: function() {
          return this.state.handyRxns.length ? l.a.createElement(m.a, {
            handyRxns: this.state.handyRxns,
            numBackgroundColors: this.props.numBackgroundColors,
            onSelected: this.triggerSelect,
            onMouseEnter: this.onEmojiMouseEnter,
            onMouseLeave: this.onEmojiMouseLeave
          }) : null;
        }
      }, {
        key: "maybeRenderSkinTonePicker",
        value: function() {
          return this.props.skinToneChoiceNames.length ? l.a.createElement(_.a, {
            activeSkinToneId: this.props.activeSkinToneId,
            choices: this.state.skinToneChoices,
            isOpen: this.state.isSkinTonePickerOpen,
            onOpen: this.onSkinTonePickerOpened,
            onSkinToneChanged: this.onSkinToneChanged
          }) : null;
        }
      }, {
        key: "renderEmojiPreview",
        value: function() {
          var e = 0 === this.state.screenRows.length,
            n = this.state.currentSelection,
            r = this.getEmojiPreviewData(n);
          if (e) {
            var o = t.getAllEmoji(this.props.groups);
            n = this.filterEmojiByName(o, ":cry:")[0], r = this.getEmojiPreviewData(n);
          }
          var i = d()("overflow_ellipsis", "float_left", {
            is_shortened: !this.props.activeSkinToneId
          });
          return l.a.createElement("div", {
            id: "emoji_preview"
          }, l.a.createElement("span", {
            id: "emoji_preview_img"
          }, l.a.createElement(f.a, {
            emoji: n
          })), l.a.createElement("div", {
            id: "emoji_preview_text",
            className: i
          }, l.a.createElement("span", {
            id: "emoji_name"
          }, e ? L("Oh no!") : r.name), l.a.createElement("br", null), l.a.createElement("span", {
            id: "emoji_aliases"
          }, e ? L("We couldn't find that emoji") : r.aliases)));
        }
      }, {
        key: "renderStickyHeader",
        value: function() {
          var e = this.state.searchQuery ? "Search Results" : this.state.activeGroup.display_name;
          return l.a.createElement("div", {
            className: "emoji_sticky_header"
          }, l.a.createElement("h3", null, e));
        }
      }, {
        key: "render",
        value: function() {
          var e = this.state,
            t = e.screenRows,
            n = e.isScrolledToBottom,
            r = e.activeGroup,
            o = 0 === t.length,
            i = n ? s.a.last(this.props.groups) : r;
          return l.a.createElement("div", {
            id: "emoji_menu",
            className: "menu emoji_menu_ng",
            "data-using-keyboard": this.state.usingKeyboard,
            tabIndex: "1",
            onClick: this.onEmojiPickerClick,
            onMouseMove: this.onMouseWhileUsingKeyboard,
            ref: this.setMenuRef
          }, l.a.createElement("div", {
            id: "emoji_menu_content"
          }, l.a.createElement(p.a, {
            groups: this.props.groups,
            activeGroup: i,
            onGroupTabClick: this.onGroupTabClick
          }), l.a.createElement("div", {
            id: "emoji_input_container"
          }, l.a.createElement("input", {
            ref: this.setSearchInputRef,
            id: "emoji_input",
            type: "text",
            placeholder: L("Search"),
            onChange: this.onSearchInputChange,
            value: this.state.searchQuery
          }), l.a.createElement(y.a, {
            type: "search",
            className: "icon_search subtle_silver"
          })), l.a.createElement("div", {
            id: "emoji_menu_items_scroller"
          }, this.renderStickyHeader(), l.a.createElement("div", {
            id: "emoji_menu_items_div"
          }, l.a.createElement(h.a, {
            screenRows: this.state.screenRows,
            numBackgroundColors: this.props.numBackgroundColors,
            onSelected: this.triggerSelect,
            onMouseEnter: this.onEmojiMouseEnter,
            onMouseLeave: this.onEmojiMouseLeave,
            scrollToIndex: this.state.scrollToIndex,
            onScroll: this.onListScroll,
            numEmojiPerRow: 9,
            currentSelection: this.state.currentSelection,
            cursorPosition: this.state.cursorPosition
          }))), l.a.createElement("div", {
            id: "emoji_menu_footer",
            className: this.state.isPreviewing || o ? "previewing" : ""
          }, this.maybeRenderHandyRxns(), this.renderEmojiPreview(), l.a.createElement("div", {
            id: "emoji_preview_deluxe"
          }, l.a.createElement("span", {
            className: "bold"
          }, L("Emoji Deluxe")), "™"), this.maybeRenderSkinTonePicker())));
        }
      }]), t;
    }(u.Component);
  t.a = x, x.propTypes = Y, x.defaultProps = D;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(5),
    s = n.n(a),
    u = n(1),
    l = n.n(u),
    c = n(8),
    d = n.n(c),
    f = n(56),
    h = n(30),
    p = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    _ = h.a.ns("emoji_picker"),
    m = {
      activeSkinToneId: u.PropTypes.string,
      choices: u.PropTypes.array,
      isOpen: u.PropTypes.bool,
      onSkinToneChanged: u.PropTypes.func,
      onOpen: u.PropTypes.func
    },
    y = {
      activeSkinToneId: "",
      choices: [],
      isOpen: !1,
      onSkinToneChanged: function() {},
      onOpen: function() {}
    },
    v = function(e) {
      function t() {
        return r(this, t), o(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));
      }
      return i(t, e), p(t, [{
        key: "renderToneChoices",
        value: function(e) {
          var t = this;
          return e.map(function(e) {
            return l.a.createElement("span", {
              key: e.skin_tone_id,
              onClick: function() {
                return t.props.onSkinToneChanged(e);
              }
            }, l.a.createElement(f.a, {
              emoji: e
            }));
          });
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props.activeSkinToneId || "1",
            t = s.a.find(this.props.choices, {
              skin_tone_id: e
            }),
            n = this.props.choices;
          this.props.activeSkinToneId && (n = s.a.reject(n, {
            skin_tone_id: t.skin_tone_id
          }), n.push(t));
          var r = d()({
              hidden: this.props.isOpen
            }),
            o = d()({
              hidden: this.props.activeSkinToneId
            }),
            i = d()({
              shown: this.props.isOpen
            }),
            a = d()({
              shown: this.props.isOpen
            });
          return l.a.createElement("div", {
            className: "emoji_skin_tone_picker",
            onClick: function(e) {
              return e.stopPropagation();
            }
          }, l.a.createElement("div", {
            id: "emoji_skin_button_container",
            onClick: this.props.onOpen,
            className: r
          }, l.a.createElement("div", {
            id: "emoji_skin_button"
          }, l.a.createElement(f.a, {
            emoji: t
          })), l.a.createElement("span", {
            id: "emoji_skin_picker_label",
            className: o
          }, _("Skin Tone"))), l.a.createElement("div", {
            id: "emoji_skin_tip",
            className: i
          }, _("Choose your default skin tone")), l.a.createElement("div", {
            id: "emoji_skin_picker",
            className: a
          }, this.renderToneChoices(n)));
        }
      }]), t;
    }(u.PureComponent);
  t.a = v, v.propTypes = m, v.defaultProps = y;
}, function(e, t, n) {
  "use strict";

  function r() {
    var e = u("Close Right Sidebar");
    return i.a.createElement("button", {
      type: "button",
      title: e,
      "aria-label": e,
      className: "btn_basic close_flexpane"
    }, i.a.createElement(a.a, {
      type: "times"
    }));
  }
  var o = n(1),
    i = n.n(o),
    a = n(25),
    s = n(30);
  t.a = r;
  var u = s.a.ns("includes_flexpane");
}, function(e, t, n) {
  "use strict";
  var r = n(29),
    o = n(120),
    i = (n.n(o), n(76)),
    a = n(358),
    s = n(344),
    u = n(345),
    l = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    c = function(e) {
      return e.files;
    },
    d = n.i(o.createSelector)([i.getDownloads, c], function(e, t) {
      return e.map(function(e) {
        var r = t[e.id] ? t[e.id] : n.i(a.a)(e.id) || {};
        return n.i(s.a)(e, r);
      });
    }),
    f = function(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      return l({}, t, {
        downloads: d(e)
      });
    };
  t.a = n.i(r.b)(f)(u.a);
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = n(8),
    l = n.n(u),
    c = n(0),
    d = n.n(c),
    f = n(367),
    h = n(30),
    p = n(25),
    _ = n(130),
    m = n(362),
    y = n(136),
    v = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    g = h.a.ns("downloads");
  d.a.locale(h.a.locale());
  var M = {
      id: s.a.PropTypes.string.isRequired,
      downloadPath: s.a.PropTypes.string,
      downloadState: s.a.PropTypes.string,
      startTime: s.a.PropTypes.number,
      progress: s.a.PropTypes.number,
      isPaused: s.a.PropTypes.bool,
      fileName: s.a.PropTypes.string,
      imageSource: s.a.PropTypes.string,
      fileType: s.a.PropTypes.string,
      prettyType: s.a.PropTypes.string,
      fileSize: s.a.PropTypes.number
    },
    b = {
      id: "",
      downloadPath: "",
      downloadState: "",
      startTime: 0,
      progress: 0,
      isPaused: !1,
      fileName: "",
      imageSource: "",
      fileType: "",
      prettyType: "",
      fileSize: 0
    },
    w = function(e) {
      function t(e) {
        r(this, t);
        var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        return n.state = {}, n.onRootDivClick = n.onRootDivClick.bind(n), n.onCancel = n.onCancel.bind(n), n.onRetry = n.onRetry.bind(n), n.onRemove = n.onRemove.bind(n), n.onPause = n.onPause.bind(n), n.onResume = n.onResume.bind(n), n;
      }
      return i(t, e), v(t, null, [{
        key: "getEstimatedTimeRemaining",
        value: function(e) {
          var t = e.downloadState,
            n = e.progress,
            r = e.startTime;
          if ("progressing" !== t) return "";
          if (n >= 1) return "";
          if (-1 === n) return "";
          if (!n) return "";
          var o = Date.now() - r,
            i = o * (1 / n),
            a = i - o;
          return g("{duration} remaining", {
            duration: d.a.duration(a, "milliseconds").humanize()
          });
        }
      }, {
        key: "mapStateToClassName",
        value: function(e) {
          switch (e) {
            case "progressing":
              return "in_progress";
            case "interrupted":
              return "failed";
            case "cancelled":
              return "canceled";
            default:
              return e;
          }
        }
      }]), v(t, [{
        key: "onRootDivClick",
        value: function(e) {
          var t = this.props,
            r = t.id,
            o = t.downloadState;
          "completed" === o ? (e.stopPropagation(), e.shiftKey ? n.i(y.b)(r) : n.i(y.c)(r)) : "cancelled" !== o && "interrupted" !== o || (e.stopPropagation(), n.i(y.d)(r));
        }
      }, {
        key: "onCancel",
        value: function(e) {
          e.stopPropagation(), n.i(y.e)(this.props.id);
        }
      }, {
        key: "onRetry",
        value: function(e) {
          e.stopPropagation(), n.i(y.d)(this.props.id);
        }
      }, {
        key: "onRemove",
        value: function(e) {
          e.stopPropagation(), n.i(y.f)(this.props.id);
        }
      }, {
        key: "onPause",
        value: function(e) {
          e.stopPropagation(), n.i(y.g)(this.props.id);
        }
      }, {
        key: "onResume",
        value: function(e) {
          e.stopPropagation(), n.i(y.h)(this.props.id);
        }
      }, {
        key: "renderDownloadIcon",
        value: function() {
          var e = this.props,
            t = e.fileType,
            n = e.imageSource,
            r = function() {
              return s.a.createElement(p.a, {
                className: "filetype_icon " + t + " s48 download_icon download_filetype"
              });
            };
          return n ? s.a.createElement(f.a, {
            src: n,
            renderPending: r,
            width: "32",
            height: "32",
            className: "download_icon download_img",
            alt: "icon"
          }) : r();
        }
      }, {
        key: "renderExtraActions",
        value: function() {
          var e = this.props.isPaused ? s.a.createElement("a", {
            className: "download_resume_link",
            onClick: this.onResume,
            role: "button"
          }, g("Resume")) : s.a.createElement("a", {
            className: "download_pause_link",
            onClick: this.onPause,
            role: "button"
          }, g("Pause"));
          return s.a.createElement("span", {
            className: "download_extra_actions"
          }, e, s.a.createElement("a", {
            className: "download_cancel_link",
            onClick: this.onCancel,
            role: "button"
          }, g("Cancel")));
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props,
            r = e.downloadPath,
            o = e.downloadState,
            i = e.progress,
            a = e.fileName,
            u = e.imageSource,
            c = e.fileType,
            d = e.prettyType,
            f = e.fileSize,
            h = a || r.split(/\/|\\/).reverse()[0],
            y = "completed" === o ? 100 : 100 * i,
            v = "progressing" === o && i ? i * f : void 0,
            M = void 0;
          M = v ? g("{partialSize} of {size} {prettyType}", {
            partialSize: n.i(m.a)(v, 2),
            size: n.i(m.a)(f, 2),
            prettyType: d
          }) : n.i(m.a)(f, 2) + " " + d;
          var b = t.getEstimatedTimeRemaining(this.props),
            w = l()("download_item", "clearfix", t.mapStateToClassName(o)),
            k = g(n.i(_.a)() ? "Show in Finder" : "Open containing folder"),
            L = {
              width: y + "%",
              backgroundColor: "#57B1E7"
            };
          return s.a.createElement("div", {
            className: w,
            onClick: this.onRootDivClick,
            role: "presentation"
          }, s.a.createElement("div", {
            className: "icon_actions"
          }, this.renderDownloadIcon(), s.a.createElement(p.a, {
            className: "action_icon " + c + " " + (u ? "image" : "")
          })), s.a.createElement(p.a, {
            type: "times_circle",
            className: "download_remove_link",
            onClick: this.onRemove
          }), s.a.createElement("div", {
            className: "download_data"
          }, s.a.createElement("div", {
            className: "download_name_row"
          }, s.a.createElement("span", {
            className: "download_name overflow_ellipsis"
          }, h), this.renderExtraActions()), s.a.createElement("div", {
            className: "download_size_row"
          }, s.a.createElement("span", {
            className: "download_size overflow_ellipsis"
          }, s.a.createElement("span", {
            className: "partial_size"
          }, M)), s.a.createElement("span", {
            className: "download_actions"
          }, s.a.createElement("a", {
            className: "download_show_link"
          }, k), s.a.createElement("a", {
            className: "download_open_link"
          }, g("Click to open")), s.a.createElement("a", {
            className: "download_retry_link",
            onClick: this.onRetry,
            role: "button"
          }, g("Retry"))), s.a.createElement("span", {
            className: "download_estimate"
          }, b)), s.a.createElement("div", {
            className: "download_progress_row progress_bar"
          }, s.a.createElement("div", {
            className: "progress_bar_progress",
            style: L
          }))));
        }
      }]), t;
    }(s.a.Component);
  w.propTypes = M, w.defaultProps = b, t.a = w;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return o({}, e, {
      fileName: t.name,
      imageSource: t.thumb_160 || t.thumb_80,
      fileType: t.filetype,
      prettyType: t.pretty_type,
      fileSize: t.size
    });
  }
  t.a = r;
  var o = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  };
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = n(19),
    l = n.n(u),
    c = n(8),
    d = n.n(c),
    f = n(341),
    h = n(343),
    p = n(30),
    _ = n(25),
    m = n(137),
    y = n(136),
    v = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    g = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    M = {
      downloads: s.a.PropTypes.array.isRequired
    },
    b = {
      downloads: []
    },
    w = p.a.ns("page_client"),
    k = function(e) {
      function t(e) {
        r(this, t);
        var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        return n.state = {}, n;
      }
      return i(t, e), g(t, null, [{
        key: "renderEmptyView",
        value: function() {
          var e = void 0;
          try {
            e = s.a.createElement("img", {
              src: cdn_url + "/0180/img/downloads_empty.png",
              alt: ""
            });
          } catch (t) {
            e = null;
          }
          var t = n.i(p.b)(w("You can download files by clicking the {download_icon} button."), /(\{download_icon\})/g, function() {
            return s.a.createElement(_.a, {
              type: "cloud_download"
            });
          });
          return s.a.createElement("div", {
            id: "downloads_empty"
          }, e, t);
        }
      }, {
        key: "renderShiftHint",
        value: function() {
          var e = n.i(p.b)(w("Hold {shift_key} to open the file."), /(\{shift_key\})/g, function() {
            return s.a.createElement("span", {
              className: "key"
            }, "Shift");
          });
          return s.a.createElement("div", {
            id: "downloads_shift_hint"
          }, e);
        }
      }, {
        key: "renderClearAllButton",
        value: function() {
          return s.a.createElement("button", {
            type: "button",
            id: "downloads_tab_clear",
            className: "btn_basic right_padding",
            onClick: y.a
          }, w("Clear all"));
        }
      }]), g(t, [{
        key: "componentDidMount",
        value: function() {
          var e = this,
            t = function(t, n) {
              t && t.preventDefault(), e.setState(function() {
                return {
                  isShiftDown: n
                };
              });
            };
          this.keyCommands = new m.a, this.keyCommands.bindAll([{
            keys: "shift",
            action: "keydown",
            handler: function(e) {
              return t(e, !0);
            }
          }, {
            keys: "shift",
            action: "keyup",
            handler: function(e) {
              return t(e, !1);
            }
          }]), l.a.findDOMNode(this.element).focus();
        }
      }, {
        key: "componentWillUnmount",
        value: function() {
          this.keyCommands && this.keyCommands.reset();
        }
      }, {
        key: "renderDownloadItems",
        value: function() {
          return s.a.createElement("div", {
            id: "downloads_scroller",
            className: "flex_content_scroller"
          }, this.props.downloads.map(function(e) {
            return s.a.createElement(h.a, v({
              key: e.id
            }, e));
          }));
        }
      }, {
        key: "render",
        value: function() {
          var e = this,
            n = this.props.downloads.length > 0 ? t.renderShiftHint() : t.renderEmptyView(),
            r = this.props.downloads.length >= 2 ? t.renderClearAllButton() : null,
            o = d()({
              shift_key: this.state.isShiftDown,
              supports_open_file: !0
            });
          return s.a.createElement("div", {
            id: "downloads_tab",
            className: o,
            ref: function(t) {
              e.element = t;
            },
            tabIndex: "-1"
          }, s.a.createElement("div", {
            className: "heading"
          }, s.a.createElement("div", {
            className: "heading_row"
          }, s.a.createElement("h2", {
            id: "downloads_tab_header",
            className: "heading_text overflow_ellipsis"
          }, w("Downloads")), r, s.a.createElement(f.a, null))), this.renderDownloadItems(), n);
        }
      }]), t;
    }(s.a.Component);
  k.propTypes = M, k.defaultProps = b, t.a = k;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = s.a.omit(e, "type");
    return t.className = e.type ? l()("ts_icon ts_icon_" + e.type, e.className) : l()("ts_icon", e.className), i.a.createElement("i", t);
  }
  var o = n(1),
    i = n.n(o),
    a = n(5),
    s = n.n(a),
    u = n(8),
    l = n.n(u);
  t.a = r, r.propTypes = {
    type: i.a.PropTypes.string,
    className: i.a.PropTypes.string
  }, r.defaultProps = {
    type: null,
    className: null
  };
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = n(8),
    l = n.n(u),
    c = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    d = {
      renderPopover: a.PropTypes.func.isRequired,
      children: a.PropTypes.node.isRequired,
      startsOpen: a.PropTypes.bool
    },
    f = {
      startsOpen: !1
    },
    h = function(e) {
      function t(e) {
        r(this, t);
        var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        return n.state = {
          isOpen: n.props.startsOpen
        }, n.closePopover = n.closePopover.bind(n), n.onTrigger = n.onTrigger.bind(n), n;
      }
      return i(t, e), c(t, [{
        key: "onTrigger",
        value: function() {
          this.setState({
            isOpen: !this.state.isOpen
          });
        }
      }, {
        key: "closePopover",
        value: function() {
          this.setState({
            isOpen: !1
          });
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props.children,
            t = s.a.cloneElement(e, {
              onClick: this.onTrigger,
              className: l()(e.props.className, {
                active: this.state.isOpen
              })
            }),
            n = this.props.renderPopover({
              isOpen: this.state.isOpen,
              onClose: this.closePopover
            });
          return s.a.createElement("div", null, t, n);
        }
      }]), t;
    }(a.Component);
  t.a = h, h.propTypes = d, h.defaultProps = f;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = n(19),
    l = (n.n(u), n(528)),
    c = n.n(l),
    d = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    f = {
      children: a.PropTypes.node.isRequired,
      isOpen: a.PropTypes.bool,
      onOpen: a.PropTypes.func,
      onClose: a.PropTypes.func,
      position: a.PropTypes.string,
      allowanceX: a.PropTypes.number,
      allowanceY: a.PropTypes.number,
      offsetX: a.PropTypes.number,
      offsetY: a.PropTypes.number,
      targetBounds: a.PropTypes.shape({
        top: a.PropTypes.number,
        left: a.PropTypes.number,
        right: a.PropTypes.number,
        bottom: a.PropTypes.number,
        height: a.PropTypes.number,
        width: a.PropTypes.number
      }),
      overlayClassName: a.PropTypes.string
    },
    h = {
      allowanceX: 16,
      allowanceY: 10,
      offsetX: 0,
      offsetY: 0,
      isOpen: !1,
      onOpen: function() {},
      onClose: function() {},
      position: null,
      targetBounds: {
        top: 0,
        left: 0,
        right: 20,
        bottom: 20
      },
      overlayClassName: "popover_mask react_popover_mask"
    },
    p = function(e) {
      function t(e) {
        r(this, t);
        var n = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this, e));
        return n.onResize = n.onResize.bind(n), n.onOpen = n.onOpen.bind(n), n.onClose = n.onClose.bind(n), n.state = {
          contentBounds: {}
        }, n;
      }
      return i(t, e), d(t, [{
        key: "componentDidMount",
        value: function() {
          window.addEventListener("resize", this.onResize);
        }
      }, {
        key: "componentWillUnmount",
        value: function() {
          window.removeEventListener("resize", this.onResize);
        }
      }, {
        key: "onResize",
        value: function() {
          this.props.isOpen && this.measureContents();
        }
      }, {
        key: "onOpen",
        value: function() {
          this.props.onOpen(), this.measureContents();
        }
      }, {
        key: "onClose",
        value: function() {
          this.props.onClose(), this.setState({
            contentBounds: {}
          });
        }
      }, {
        key: "getInitialPosition",
        value: function(e) {
          var t = this.props,
            n = t.position,
            r = t.targetBounds,
            o = t.offsetX,
            i = t.offsetY;
          switch (n) {
            case "top":
              return {
                width: e.width,
                height: e.height,
                top: r.top - e.height + i,
                bottom: r.top + i,
                right: r.right + (r.width - e.width) / 2 + o,
                left: r.left + (r.width - e.width) / 2 + o
              };
            case "top-left":
              return {
                width: e.width,
                height: e.height,
                top: r.top - e.height + i,
                bottom: r.top + i,
                right: r.left + e.width + o,
                left: r.left + o
              };
            case "top-right":
              return {
                width: e.width,
                height: e.height,
                top: r.top - e.height + i,
                bottom: r.top + i,
                right: r.right + o,
                left: r.right - e.width + o
              };
            case "left":
              return {
                width: e.width,
                height: e.height,
                top: r.top + (r.height - e.height) / 2 + i,
                bottom: r.bottom + (r.height - e.heigh) / 2 + i,
                right: r.left + o,
                left: r.left - e.width + o
              };
            case "right":
              return {
                width: e.width,
                height: e.height,
                top: r.top + (r.height - e.height) / 2 + i,
                bottom: r.bottom + (r.height - e.heigh) / 2 + i,
                right: r.right + r.width + o,
                left: r.right + o
              };
            case "bottom":
              return {
                width: e.width,
                height: e.height,
                top: r.bottom + i,
                bottom: r.bottom + e.height + i,
                right: r.right + (r.width - e.width) / 2 + o,
                left: r.left + (r.width - e.width) / 2 + o
              };
            case "bottom-left":
              return {
                width: e.width,
                height: e.height,
                top: r.bottom + i,
                bottom: r.bottom + e.height + i,
                right: r.left + e.width + o,
                left: r.left + o
              };
            case "bottom-right":
              return {
                width: e.width,
                height: e.height,
                top: r.bottom + i,
                bottom: r.bottom + e.height + i,
                right: r.right + o,
                left: r.right - e.width + o
              };
            default:
              return e;
          }
        }
      }, {
        key: "getBoundaries",
        value: function() {
          var e = window,
            t = e.pageYOffset,
            n = e.innerWidth,
            r = e.innerHeight;
          return {
            top: t + this.props.allowanceY,
            right: n - this.props.allowanceX,
            bottom: t + r - this.props.allowanceY,
            left: this.props.allowanceX
          };
        }
      }, {
        key: "getContentStyle",
        value: function() {
          var e = this.state.contentBounds || {},
            t = this.getBoundaries();
          return {
            content: {
              position: "absolute",
              left: e.left || t.left,
              top: e.top || t.top,
              outline: "none"
            }
          };
        }
      }, {
        key: "keepInBounds",
        value: function(e) {
          var t = this.getBoundaries(),
            n = this.getInitialPosition(e),
            r = n.left,
            o = n.top;
          return n.left < t.left ? r = t.left : n.right > t.right && (r = Math.max(t.left, t.right - n.width)), n.top < t.top ? o = t.top : n.bottom > t.bottom && (o = Math.max(t.top, t.bottom - n.height)), {
            left: r,
            top: o
          };
        }
      }, {
        key: "measureContents",
        value: function() {
          if (this.popoverContent) {
            var e = n.i(u.findDOMNode)(this.popoverContent).getBoundingClientRect(),
              t = this.keepInBounds(e);
            this.setState({
              contentBounds: t
            });
          }
        }
      }, {
        key: "render",
        value: function() {
          var e = this,
            t = s.a.cloneElement(this.props.children, {
              ref: function(t) {
                e.popoverContent = t;
              }
            });
          return s.a.createElement(c.a, {
            isOpen: this.props.isOpen,
            contentLabel: "popover",
            className: "popover",
            overlayClassName: this.props.overlayClassName,
            style: this.getContentStyle(),
            onAfterOpen: this.onOpen,
            onRequestClose: this.onClose
          }, t);
        }
      }]), t;
    }(a.PureComponent);
  t.a = p, p.propTypes = f, p.defaultProps = h;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = n(5),
    l = n.n(u),
    c = n(29),
    d = n(77),
    f = n(75),
    h = n(74),
    p = n(360),
    _ = n(351),
    m = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    y = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    v = {
      memberId: a.PropTypes.string.isRequired,
      children: a.PropTypes.oneOfType([a.PropTypes.element, a.PropTypes.func]),
      userType: a.PropTypes.oneOf(["member", "ra", "ura", "external"]).isRequired,
      isActive: a.PropTypes.bool.isRequired,
      isDnd: a.PropTypes.bool
    },
    g = {
      children: _.a,
      isDnd: !1
    },
    M = function(e) {
      function t() {
        return r(this, t), o(this, (t.__proto__ || Object.getPrototypeOf(t)).apply(this, arguments));
      }
      return i(t, e), y(t, [{
        key: "componentDidMount",
        value: function() {
          this.presence_list = n.i(p.a)([this.props.memberId]);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function(e) {
          this.props.memberId !== e.memberId && this.presence_list && l.a.isFunction(this.presence_list.clear) && l.a.isFunction(this.presence_list.add) && (this.presence_list.clear(), this.presence_list.add(e.memberId));
        }
      }, {
        key: "componentWillUnmount",
        value: function() {
          this.presence_list && l.a.isFunction(this.presence_list.destroy) && this.presence_list.destroy();
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props.children;
          return s.a.createElement(e, {
            userType: this.props.userType,
            isActive: this.props.isActive,
            isDnd: this.props.isDnd
          });
        }
      }]), t;
    }(s.a.Component);
  M.propTypes = v, M.defaultProps = g;
  var b = function(e, t) {
    var r = n.i(d.getPresenceByMemberId)(e, t.memberId),
      o = n.i(h.getMemberTypeById)(e, t.memberId),
      i = n.i(f.getDndByMemberId)(e, t.memberId);
    return m({}, t, {
      userType: o,
      isDnd: i,
      isActive: "active" === r
    });
  };
  t.a = n.i(c.b)(b)(M);
}, function(e, t, n) {
  "use strict";
  var r = n(349);
  t.a = r.a;
}, function(e, t, n) {
  "use strict";
  var r = n(1),
    o = n.n(r),
    i = n(8),
    a = n.n(i),
    s = n(25),
    u = n(592),
    l = (n.n(u), function(e) {
      var t = e.isActive,
        n = e.isDnd,
        r = e.userType,
        i = t ? "presence_online" : "presence_offline",
        u = a()("c-presence", {
          "c-presence--active": t,
          "c-presence--away": !t
        });
      return "member" === r ? n && (i = t ? "presence_dnd" : "presence_dnd_offline") : "ra" === r ? i = n ? t ? "presence_ra_dnd" : "presence_ra_dnd_offline" : t ? "presence_ra_online" : "presence_ra_offline" : "ura" === r ? i = n ? t ? "presence_ura_dnd" : "presence_ura_dnd_offline" : t ? "presence_ura_online" : "presence_ura_offline" : "external" === r && (i = n ? t ? "presence_external_dnd" : "presence_external_dnd_offline" : t ? "presence_external_online" : "presence_external_offline"), o.a.createElement(s.a, {
        type: i,
        className: u,
        "aria-hidden": !0
      });
    });
  l.propTypes = {
    isActive: r.PropTypes.bool,
    isDnd: r.PropTypes.bool,
    userType: r.PropTypes.oneOf(["member", "ra", "ura", "external"])
  }, l.defaultProps = {
    isActive: !1,
    isDnd: !1,
    userType: "member"
  }, t.a = l;
}, function(e, t, n) {
  "use strict";
  var r = n(353);
  n(127), t.a = r.a;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(5),
    s = n.n(a),
    u = n(1),
    l = n.n(u),
    c = n(8),
    d = (n.n(c), n(127)),
    f = n(123),
    h = n(19),
    p = (n.n(h), n(131)),
    _ = n(324),
    m = (n.n(_), Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    }),
    y = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    v = {
      children: u.PropTypes.node,
      position: u.PropTypes.string,
      delay: u.PropTypes.number,
      transitionDuration: u.PropTypes.number,
      tip: u.PropTypes.node,
      status: u.PropTypes.oneOf(["success"]),
      offsetX: u.PropTypes.number,
      offsetY: u.PropTypes.number
    },
    g = {
      position: "top",
      delay: 150,
      transitionDuration: 120,
      tip: "",
      status: null,
      offsetX: 0,
      offsetY: 0
    },
    M = function(e) {
      function t() {
        r(this, t);
        var e = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
        return e.state = {
          isShowing: !1,
          tipOpacity: 0,
          contentsRect: null
        }, e.delayTimer = null, e.tooltipContent = null, e.setRef = e.setRef.bind(e), e.onMouseEnter = e.onMouseEnter.bind(e), e.onMouseLeave = e.onMouseLeave.bind(e), e.showTip = e.showTip.bind(e), e.hideTip = e.hideTip.bind(e), e.fadeTip = e.fadeTip.bind(e), e.measureContents = e.measureContents.bind(e), e;
      }
      return i(t, e), y(t, [{
        key: "setRef",
        value: function(e) {
          this.tooltipContent = e;
        }
      }, {
        key: "measureContents",
        value: function() {
          if (this.tooltipContent) return n.i(h.findDOMNode)(this.tooltipContent).getBoundingClientRect();
        }
      }, {
        key: "onMouseEnter",
        value: function(e) {
          this.delayTimer = window.setTimeout(this.showTip, this.props.delay);
        }
      }, {
        key: "onMouseLeave",
        value: function(e) {
          this.hideTip(), window.clearTimeout(this.delayTimer);
        }
      }, {
        key: "showTip",
        value: function() {
          var e = this;
          this.setState(function(t) {
            return m({}, t, {
              isShowing: !0,
              contentsRect: e.measureContents()
            });
          }, function() {
            return e.fadeTip({
              toValue: 1
            });
          });
        }
      }, {
        key: "hideTip",
        value: function() {
          var e = this;
          this.fadeTip({
            toValue: 0,
            onComplete: function() {
              e.setState(function(e) {
                return m({}, e, {
                  isShowing: !1,
                  contentsRect: null
                });
              });
            }
          });
        }
      }, {
        key: "fadeTip",
        value: function(e) {
          var t = this,
            r = e.toValue,
            o = e.onComplete,
            i = void 0 === o ? s.a.noop : o;
          n.i(p.a)({
            fromValue: this.state.tipOpacity,
            toValue: r,
            duration: this.props.transitionDuration,
            onTick: function(e) {
              var n = e.value,
                r = e.nextTick;
              t.setState(function(e) {
                return m({}, e, {
                  tipOpacity: n
                });
              }, r);
            },
            onComplete: i
          });
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props,
            t = e.children,
            n = e.position,
            r = e.tip,
            o = e.status,
            i = e.offsetX,
            a = e.offsetY,
            s = this.state,
            u = s.isShowing,
            c = s.tipOpacity,
            h = s.contentsRect;
          return l.a.createElement("div", {
            className: "c-tooltip",
            onMouseEnter: this.onMouseEnter,
            onMouseLeave: this.onMouseLeave,
            ref: this.setRef
          }, t, l.a.createElement(f.c, {
            isOpen: u,
            position: n,
            targetBounds: h,
            overlayClassName: "popover_mask react_popover_mask no_pointer_events",
            offsetX: i,
            offsetY: a,
            allowanceX: 0,
            allowanceY: 0
          }, l.a.createElement("div", {
            style: {
              opacity: c
            }
          }, l.a.createElement(d.a, {
            position: n,
            status: o
          }, r))));
        }
      }]), t;
    }(u.Component);
  M.propTypes = v, M.defaultProps = g, t.a = M;
}, function(e, t, n) {
  "use strict";
  var r = n(357);
  n.d(t, "a", function() {
    return o;
  }), n.d(t, "b", function() {
    return i;
  }), n.d(t, "c", function() {
    return a;
  }), n.d(t, "d", function() {
    return s;
  });
  var o = r.a,
    i = r.b,
    a = r.c,
    s = r.d;
}, function(e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var r = n(1),
    o = n.n(r),
    i = n(19),
    a = n.n(i),
    s = n(29),
    u = n(0),
    l = n.n(u),
    c = n(325),
    d = n(326),
    f = n(123),
    h = n(329),
    p = n(46),
    _ = n(124),
    m = n(73),
    y = n(74),
    v = n(77),
    g = n(75),
    M = n(126),
    b = n(76),
    w = n(125),
    k = n(122);
  n(327), n(328), window.ReactComponents = {}, window.ReactComponents.EmojiPicker = c.a, window.ReactComponents.Popover = f.a, window.ReactComponents.PopoverTrigger = f.b, window.React = o.a, window.ReactDOM = a.a, window.Redux = {
    ConfigureStore: h.a,
    Entities: {
      Channels: p,
      MemberTypesById: y,
      ChannelsMeta: {
        ChannelNamesToIds: _,
        MutedChannels: m,
        NeedsApiMarking: w
      }
    },
    Features: {
      Presence: v,
      Dnd: g,
      Typing: M,
      Downloads: b
    },
    ChannelSidebar: k.a,
    DownloadsView: d.a,
    Provider: s.a
  }, window.Moment = l.a;
}, function(e, t, n) {
  "use strict";
  var r = n(129);
  n.d(t, "a", function() {
    return o;
  }), n.d(t, "b", function() {
    return i;
  });
  var o = r.a,
    i = r.b;
}, function(e, t, n) {
  "use strict";
  var r = n(20);
  n.d(t, "c", function() {
    return o;
  }), n.d(t, "b", function() {
    return i;
  }), n.d(t, "a", function() {
    return a;
  }), n.d(t, "d", function() {
    return s;
  });
  var o = n.i(r.a)("TS.emoji.emojiMatchesTerm", function() {
      return !1;
    }),
    i = n.i(r.a)("TS.emoji.findByKeyword", function() {
      return [];
    }),
    a = n.i(r.a)("TS.emoji.nameToBaseName", function() {
      return "";
    }),
    s = n.i(r.a)("TS.emoji.stripLocalizedSkinTone", function() {
      return "";
    });
}, function(e, t, n) {
  "use strict";
  var r = n(20);
  n.d(t, "a", function() {
    return o;
  });
  var o = n.i(r.a)("TS.files.getFileById", function() {});
}, function(e, t, n) {
  "use strict";
  var r = n(5),
    o = n.n(r),
    i = n(20);
  n.d(t, "a", function() {
    return a;
  }), n.d(t, "b", function() {
    return s;
  });
  var a = n.i(i.a)("TS.i18n.t", function(e) {
      return function(t) {
        var n = o.a.keys(t);
        return o.a.reduce(n, function(e, n) {
          var r = new RegExp("{" + n + "}");
          return e.replace(r, t[n]);
        }, e);
      };
    }),
    s = n.i(i.a)("TS.i18n.locale", function() {
      return "en-US";
    });
}, function(e, t, n) {
  "use strict";
  var r = n(20),
    o = n.i(r.a)("TS.PresenceList.createNewPresenceList", function() {});
  t.a = o;
}, function(e, t, n) {
  "use strict";
  var r = n(20),
    o = n.i(r.a)("TS.redux.getStoreInstance", function() {});
  t.a = o;
}, function(e, t, n) {
  "use strict";
  var r = n(20),
    o = n.i(r.a)("TS.utility.convertFilesize", function() {
      return "0 bytes";
    });
  t.a = o;
}, function(e, t, n) {
  "use strict";
  var r = n(71),
    o = n(124),
    i = n(73),
    a = n(125),
    s = n.i(r.e)({
      channelNamesToIds: o.default,
      mutedChannels: i.default,
      needsApiMarking: a.default
    });
  t.a = s;
}, function(e, t, n) {
  "use strict";
  var r = n(16),
    o = (n.n(r), n(370)),
    i = n.i(r.createAction)("Upsert a file"),
    a = n.i(r.createAction)("Upsert multiple files"),
    s = n.i(r.createAction)("Remove a file by ID"),
    u = n.i(r.createAction)("Remove multiple files by IDs"),
    l = n.i(r.createAction)("Clear all files");
  t.a = n.i(o.a)({
    upsert: i,
    bulkUpsert: a,
    remove: s,
    bulkRemove: u,
    clear: l
  }, {});
}, function(e, t, n) {
  "use strict";
  var r = n(71),
    o = n(57),
    i = n(77),
    a = n(75),
    s = n(126),
    u = n(76),
    l = n(46),
    c = n(363),
    d = n(364),
    f = n(74),
    h = n.i(r.e)({
      channelSidebar: o.j,
      channels: l.default,
      channelsMeta: c.a,
      presence: i.default,
      dnd: a.default,
      files: d.a,
      downloads: u.default,
      typing: s.default,
      memberTypesById: f.default
    });
  t.a = h;
}, , function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = n.n(a),
    u = n(5),
    l = n.n(u),
    c = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    },
    d = function() {
      function e(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
        }
      }
      return function(t, n, r) {
        return n && e(t.prototype, n), r && e(t, r), t;
      };
    }(),
    f = {
      PENDING: "pending",
      LOADED: "loaded",
      LOADING: "loading",
      ERROR: "error"
    },
    h = {
      onError: s.a.PropTypes.func,
      onLoad: s.a.PropTypes.func,
      renderPending: s.a.PropTypes.func,
      srcSet: s.a.PropTypes.string,
      src: s.a.PropTypes.string
    },
    p = {
      onError: null,
      onLoad: null,
      renderPending: null,
      srcSet: "",
      src: ""
    },
    _ = function(e) {
      function t() {
        r(this, t);
        var e = o(this, (t.__proto__ || Object.getPrototypeOf(t)).call(this));
        return e.state = {
          status: f.PENDING
        }, e;
      }
      return i(t, e), d(t, [{
        key: "componentDidMount",
        value: function() {
          var e = this.props,
            t = e.srcSet,
            n = e.src;
          this.fetchImage(n, t);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function(e) {
          e.src === this.props.src && e.srcSet === this.props.srcSet || this.setState(function() {
            return {
              status: f.LOADING
            };
          });
        }
      }, {
        key: "shouldComponentUpdate",
        value: function(e, t) {
          return this.props !== e && t.status !== f.LOADING || this.state !== t;
        }
      }, {
        key: "componentDidUpdate",
        value: function(e) {
          var t = this.props,
            n = t.srcSet,
            r = t.src;
          e.src === r && e.srcSet === n || this.fetchImage(r, n);
        }
      }, {
        key: "fetchImage",
        value: function(e, t) {
          var n = this;
          return new Promise(function(n, r) {
            var o = new Image;
            o.src = e, t && (o.srcset = t), o.onerror = r, o.onload = n;
          }).then(function() {
            n.setState(function() {
              return {
                status: f.LOADED
              };
            }), n.props.onLoad && n.props.onLoad();
          }).catch(function() {
            n.setState(function() {
              return {
                status: f.ERROR
              };
            }), n.props.onError && n.props.onError();
          });
        }
      }, {
        key: "render",
        value: function() {
          var e = this.state.status;
          if (e === f.LOADED || e === f.LOADING) {
            var t = l.a.omit(this.props, "renderPending");
            return s.a.createElement("img", c({
              alt: ""
            }, t));
          }
          return this.props.renderPending();
        }
      }]), t;
    }(s.a.Component);
  _.propTypes = h, _.defaultProps = p, t.a = _;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
      r = t.units,
      s = void 0 === r ? "minutes" : r,
      u = n.i(o.a)(e, {
        units: s
      }),
      l = n.i(i.a)(e, {
        units: s
      }),
      c = n.i(a.a)(e, {
        units: s
      });
    return {
      w: u,
      d: l >= 7 ? l % 7 : l,
      h: c >= 24 ? c % 24 : c,
      mi: e % 60
    };
  }
  var o = n(135),
    i = n(133),
    a = n(134);
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {},
      r = t.includeMeridiem,
      a = void 0 !== r && r,
      s = t.includeSeconds,
      u = void 0 !== s && s,
      l = t.timeFormat,
      c = void 0 === l ? void 0 : l,
      d = n.i(o.a)(e, {
        returnMoment: !0
      }),
      f = n.i(i.b)() && n.i(i.c)() && n.i(i.c)().time24;
    return c ? d.format(c) : f ? a ? u ? d.format("hh:mm:ss A") : d.format("hh:mm A") : u ? d.format("HH:mm:ss") : d.format("HH:mm") : a ? u ? d.format("h:mm:ss A") : d.format("h:mm A") : u ? d.format("h:mm:ss") : d.format("h:mm");
  }
  var o = n(132),
    i = n(130);
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }

  function o(e, t) {
    var o, i = ["upsert", "bulkUpsert", "remove", "bulkRemove", "clear"],
      l = a.a.pick(e, i),
      c = l.upsert,
      d = l.bulkUpsert,
      f = l.remove,
      h = l.bulkRemove,
      p = l.clear,
      _ = a.a.omit(e, i);
    return n.i(s.createReducer)(u((o = {}, r(o, c, function(e, t) {
      return t && t.id ? u({}, e, r({}, t.id, t)) : e;
    }), r(o, d, function(e, t) {
      return t && t.length && a.a.isArray(t) ? a.a.reduce(t, function(e, t) {
        return t && t.id && (e[t.id] = t), e;
      }, u({}, e)) : e;
    }), r(o, f, function(e, t) {
      return a.a.omit(e, t);
    }), r(o, h, function(e, t) {
      return a.a.omit(e, t);
    }), r(o, p, function() {
      return {};
    }), o), _), t);
  }
  var i = n(5),
    a = n.n(i),
    s = n(16);
  n.n(s), t.a = o;
  var u = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  };
}, function(e, t, n) {
  e.exports = {
    "default": n(381),
    __esModule: !0
  };
}, function(e, t, n) {
  e.exports = {
    "default": n(382),
    __esModule: !0
  };
}, function(e, t, n) {
  e.exports = {
    "default": n(383),
    __esModule: !0
  };
}, function(e, t, n) {
  e.exports = {
    "default": n(384),
    __esModule: !0
  };
}, function(e, t, n) {
  e.exports = {
    "default": n(385),
    __esModule: !0
  };
}, function(e, t, n) {
  e.exports = {
    "default": n(386),
    __esModule: !0
  };
}, function(e, t, n) {
  e.exports = {
    "default": n(389),
    __esModule: !0
  };
}, function(e, t, n) {
  e.exports = {
    "default": n(390),
    __esModule: !0
  };
}, function(e, t, n) {
  e.exports = {
    "default": n(391),
    __esModule: !0
  };
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e && e.__esModule ? e : {
      "default": e
    };
  }
  t.__esModule = !0;
  var o = n(372),
    i = r(o),
    a = n(371),
    s = r(a);
  t.default = function() {
    function e(e, t) {
      var n = [],
        r = !0,
        o = !1,
        i = void 0;
      try {
        for (var a, u = (0, s.default)(e); !(r = (a = u.next()).done) && (n.push(a.value), !t || n.length !== t); r = !0);
      } catch (e) {
        o = !0, i = e;
      } finally {
        try {
          !r && u.return && u.return();
        } finally {
          if (o) throw i;
        }
      }
      return n;
    }
    return function(t, n) {
      if (Array.isArray(t)) return t;
      if ((0, i.default)(Object(t))) return e(t, n);
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    };
  }();
}, function(e, t, n) {
  n(94), n(93), e.exports = n(410);
}, function(e, t, n) {
  n(94), n(93), e.exports = n(411);
}, function(e, t, n) {
  n(413), e.exports = n(14).Object.assign;
}, function(e, t, n) {
  n(414);
  var r = n(14).Object;
  e.exports = function(e, t) {
    return r.create(e, t);
  };
}, function(e, t, n) {
  n(415);
  var r = n(14).Object;
  e.exports = function(e, t, n) {
    return r.defineProperty(e, t, n);
  };
}, function(e, t, n) {
  n(416);
  var r = n(14).Object;
  e.exports = function(e, t) {
    return r.getOwnPropertyDescriptor(e, t);
  };
}, function(e, t, n) {
  n(417), e.exports = n(14).Object.getPrototypeOf;
}, function(e, t, n) {
  n(418), e.exports = n(14).Object.keys;
}, function(e, t, n) {
  n(419), e.exports = n(14).Object.setPrototypeOf;
}, function(e, t, n) {
  n(421), n(420), n(422), n(423), e.exports = n(14).Symbol;
}, function(e, t, n) {
  n(93), n(94), e.exports = n(92).f("iterator");
}, function(e, t) {
  e.exports = function(e) {
    if ("function" != typeof e) throw TypeError(e + " is not a function!");
    return e;
  };
}, function(e, t) {
  e.exports = function() {};
}, function(e, t, n) {
  var r = n(28),
    o = n(408),
    i = n(407);
  e.exports = function(e) {
    return function(t, n, a) {
      var s, u = r(t),
        l = o(u.length),
        c = i(a, l);
      if (e && n != n) {
        for (; l > c;)
          if ((s = u[c++]) != s) return !0;
      } else
        for (; l > c; c++)
          if ((e || c in u) && u[c] === n) return e || c || 0;
      return !e && -1;
    };
  };
}, function(e, t, n) {
  var r = n(39),
    o = n(84),
    i = n(60);
  e.exports = function(e) {
    var t = r(e),
      n = o.f;
    if (n)
      for (var a, s = n(e), u = i.f, l = 0; s.length > l;) u.call(e, a = s[l++]) && t.push(a);
    return t;
  };
}, function(e, t, n) {
  e.exports = n(27).document && document.documentElement;
}, function(e, t, n) {
  var r = n(78);
  e.exports = Array.isArray || function(e) {
    return "Array" == r(e);
  };
}, function(e, t, n) {
  "use strict";
  var r = n(82),
    o = n(61),
    i = n(86),
    a = {};
  n(38)(a, n(22)("iterator"), function() {
    return this;
  }), e.exports = function(e, t, n) {
    e.prototype = r(a, {
      next: o(1, n)
    }), i(e, t + " Iterator");
  };
}, function(e, t) {
  e.exports = function(e, t) {
    return {
      value: t,
      done: !!e
    };
  };
}, function(e, t, n) {
  var r = n(39),
    o = n(28);
  e.exports = function(e, t) {
    for (var n, i = o(e), a = r(i), s = a.length, u = 0; s > u;)
      if (i[n = a[u++]] === t) return n;
  };
}, function(e, t, n) {
  var r = n(63)("meta"),
    o = n(47),
    i = n(33),
    a = n(34).f,
    s = 0,
    u = Object.isExtensible || function() {
      return !0;
    },
    l = !n(37)(function() {
      return u(Object.preventExtensions({}));
    }),
    c = function(e) {
      a(e, r, {
        value: {
          i: "O" + ++s,
          w: {}
        }
      });
    },
    d = function(e, t) {
      if (!o(e)) return "symbol" == typeof e ? e : ("string" == typeof e ? "S" : "P") + e;
      if (!i(e, r)) {
        if (!u(e)) return "F";
        if (!t) return "E";
        c(e);
      }
      return e[r].i;
    },
    f = function(e, t) {
      if (!i(e, r)) {
        if (!u(e)) return !0;
        if (!t) return !1;
        c(e);
      }
      return e[r].w;
    },
    h = function(e) {
      return l && p.NEED && u(e) && !i(e, r) && c(e), e;
    },
    p = e.exports = {
      KEY: r,
      NEED: !1,
      fastKey: d,
      getWeak: f,
      onFreeze: h
    };
}, function(e, t, n) {
  "use strict";
  var r = n(39),
    o = n(84),
    i = n(60),
    a = n(62),
    s = n(144),
    u = Object.assign;
  e.exports = !u || n(37)(function() {
    var e = {},
      t = {},
      n = Symbol(),
      r = "abcdefghijklmnopqrst";
    return e[n] = 7, r.split("").forEach(function(e) {
      t[e] = e;
    }), 7 != u({}, e)[n] || Object.keys(u({}, t)).join("") != r;
  }) ? function(e, t) {
    for (var n = a(e), u = arguments.length, l = 1, c = o.f, d = i.f; u > l;)
      for (var f, h = s(arguments[l++]), p = c ? r(h).concat(c(h)) : r(h), _ = p.length, m = 0; _ > m;) d.call(h, f = p[m++]) && (n[f] = h[f]);
    return n;
  } : u;
}, function(e, t, n) {
  var r = n(34),
    o = n(36),
    i = n(39);
  e.exports = n(31) ? Object.defineProperties : function(e, t) {
    o(e);
    for (var n, a = i(t), s = a.length, u = 0; s > u;) r.f(e, n = a[u++], t[n]);
    return e;
  };
}, function(e, t, n) {
  var r = n(28),
    o = n(146).f,
    i = {}.toString,
    a = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [],
    s = function(e) {
      try {
        return o(e);
      } catch (e) {
        return a.slice();
      }
    };
  e.exports.f = function(e) {
    return a && "[object Window]" == i.call(e) ? s(e) : o(r(e));
  };
}, function(e, t, n) {
  var r = n(47),
    o = n(36),
    i = function(e, t) {
      if (o(e), !r(t) && null !== t) throw TypeError(t + ": can't set as prototype!");
    };
  e.exports = {
    set: Object.setPrototypeOf || ("__proto__" in {} ? function(e, t, r) {
      try {
        r = n(141)(Function.call, n(83).f(Object.prototype, "__proto__").set, 2), r(e, []), t = !(e instanceof Array);
      } catch (e) {
        t = !0;
      }
      return function(e, n) {
        return i(e, n), t ? e.__proto__ = n : r(e, n), e;
      };
    }({}, !1) : void 0),
    check: i
  };
}, function(e, t, n) {
  var r = n(89),
    o = n(79);
  e.exports = function(e) {
    return function(t, n) {
      var i, a, s = String(o(t)),
        u = r(n),
        l = s.length;
      return u < 0 || u >= l ? e ? "" : void 0 : (i = s.charCodeAt(u), i < 55296 || i > 56319 || u + 1 === l || (a = s.charCodeAt(u + 1)) < 56320 || a > 57343 ? e ? s.charAt(u) : i : e ? s.slice(u, u + 2) : a - 56320 + (i - 55296 << 10) + 65536);
    };
  };
}, function(e, t, n) {
  var r = n(89),
    o = Math.max,
    i = Math.min;
  e.exports = function(e, t) {
    return e = r(e), e < 0 ? o(e + t, 0) : i(e, t);
  };
}, function(e, t, n) {
  var r = n(89),
    o = Math.min;
  e.exports = function(e) {
    return e > 0 ? o(r(e), 9007199254740991) : 0;
  };
}, function(e, t, n) {
  var r = n(140),
    o = n(22)("iterator"),
    i = n(48);
  e.exports = n(14).getIteratorMethod = function(e) {
    if (void 0 != e) return e[o] || e["@@iterator"] || i[r(e)];
  };
}, function(e, t, n) {
  var r = n(36),
    o = n(409);
  e.exports = n(14).getIterator = function(e) {
    var t = o(e);
    if ("function" != typeof t) throw TypeError(e + " is not iterable!");
    return r(t.call(e));
  };
}, function(e, t, n) {
  var r = n(140),
    o = n(22)("iterator"),
    i = n(48);
  e.exports = n(14).isIterable = function(e) {
    var t = Object(e);
    return void 0 !== t[o] || "@@iterator" in t || i.hasOwnProperty(r(t));
  };
}, function(e, t, n) {
  "use strict";
  var r = n(393),
    o = n(399),
    i = n(48),
    a = n(28);
  e.exports = n(145)(Array, "Array", function(e, t) {
    this._t = a(e), this._i = 0, this._k = t;
  }, function() {
    var e = this._t,
      t = this._k,
      n = this._i++;
    return !e || n >= e.length ? (this._t = void 0, o(1)) : "keys" == t ? o(0, n) : "values" == t ? o(0, e[n]) : o(0, [n, e[n]]);
  }, "values"), i.Arguments = i.Array, r("keys"), r("values"), r("entries");
}, function(e, t, n) {
  var r = n(32);
  r(r.S + r.F, "Object", {
    assign: n(402)
  });
}, function(e, t, n) {
  var r = n(32);
  r(r.S, "Object", {
    create: n(82)
  });
}, function(e, t, n) {
  var r = n(32);
  r(r.S + r.F * !n(31), "Object", {
    defineProperty: n(34).f
  });
}, function(e, t, n) {
  var r = n(28),
    o = n(83).f;
  n(85)("getOwnPropertyDescriptor", function() {
    return function(e, t) {
      return o(r(e), t);
    };
  });
}, function(e, t, n) {
  var r = n(62),
    o = n(147);
  n(85)("getPrototypeOf", function() {
    return function(e) {
      return o(r(e));
    };
  });
}, function(e, t, n) {
  var r = n(62),
    o = n(39);
  n(85)("keys", function() {
    return function(e) {
      return o(r(e));
    };
  });
}, function(e, t, n) {
  var r = n(32);
  r(r.S, "Object", {
    setPrototypeOf: n(405).set
  });
}, function(e, t) {}, function(e, t, n) {
  "use strict";
  var r = n(27),
    o = n(33),
    i = n(31),
    a = n(32),
    s = n(149),
    u = n(401).KEY,
    l = n(37),
    c = n(88),
    d = n(86),
    f = n(63),
    h = n(22),
    p = n(92),
    _ = n(91),
    m = n(400),
    y = n(395),
    v = n(397),
    g = n(36),
    M = n(28),
    b = n(90),
    w = n(61),
    k = n(82),
    L = n(404),
    T = n(83),
    S = n(34),
    Y = n(39),
    D = T.f,
    x = S.f,
    C = L.f,
    P = r.Symbol,
    E = r.JSON,
    j = E && E.stringify,
    O = h("_hidden"),
    R = h("toPrimitive"),
    I = {}.propertyIsEnumerable,
    A = c("symbol-registry"),
    H = c("symbols"),
    N = c("op-symbols"),
    z = Object.prototype,
    W = "function" == typeof P,
    F = r.QObject,
    U = !F || !F.prototype || !F.prototype.findChild,
    G = i && l(function() {
      return 7 != k(x({}, "a", {
        get: function() {
          return x(this, "a", {
            value: 7
          }).a;
        }
      })).a;
    }) ? function(e, t, n) {
      var r = D(z, t);
      r && delete z[t], x(e, t, n), r && e !== z && x(z, t, r);
    } : x,
    B = function(e) {
      var t = H[e] = k(P.prototype);
      return t._k = e, t;
    },
    V = W && "symbol" == typeof P.iterator ? function(e) {
      return "symbol" == typeof e;
    } : function(e) {
      return e instanceof P;
    },
    q = function(e, t, n) {
      return e === z && q(N, t, n), g(e), t = b(t, !0), g(n), o(H, t) ? (n.enumerable ? (o(e, O) && e[O][t] && (e[O][t] = !1), n = k(n, {
        enumerable: w(0, !1)
      })) : (o(e, O) || x(e, O, w(1, {})), e[O][t] = !0), G(e, t, n)) : x(e, t, n);
    },
    J = function(e, t) {
      g(e);
      for (var n, r = y(t = M(t)), o = 0, i = r.length; i > o;) q(e, n = r[o++], t[n]);
      return e;
    },
    K = function(e, t) {
      return void 0 === t ? k(e) : J(k(e), t);
    },
    $ = function(e) {
      var t = I.call(this, e = b(e, !0));
      return !(this === z && o(H, e) && !o(N, e)) && (!(t || !o(this, e) || !o(H, e) || o(this, O) && this[O][e]) || t);
    },
    Q = function(e, t) {
      if (e = M(e), t = b(t, !0), e !== z || !o(H, t) || o(N, t)) {
        var n = D(e, t);
        return !n || !o(H, t) || o(e, O) && e[O][t] || (n.enumerable = !0), n;
      }
    },
    X = function(e) {
      for (var t, n = C(M(e)), r = [], i = 0; n.length > i;) o(H, t = n[i++]) || t == O || t == u || r.push(t);
      return r;
    },
    Z = function(e) {
      for (var t, n = e === z, r = C(n ? N : M(e)), i = [], a = 0; r.length > a;) !o(H, t = r[a++]) || n && !o(z, t) || i.push(H[t]);
      return i;
    };
  W || (P = function() {
    if (this instanceof P) throw TypeError("Symbol is not a constructor!");
    var e = f(arguments.length > 0 ? arguments[0] : void 0),
      t = function(n) {
        this === z && t.call(N, n), o(this, O) && o(this[O], e) && (this[O][e] = !1), G(this, e, w(1, n));
      };
    return i && U && G(z, e, {
      configurable: !0,
      set: t
    }), B(e);
  }, s(P.prototype, "toString", function() {
    return this._k;
  }), T.f = Q, S.f = q, n(146).f = L.f = X, n(60).f = $, n(84).f = Z, i && !n(81) && s(z, "propertyIsEnumerable", $, !0), p.f = function(e) {
    return B(h(e));
  }), a(a.G + a.W + a.F * !W, {
    Symbol: P
  });
  for (var ee = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), te = 0; ee.length > te;) h(ee[te++]);
  for (var ee = Y(h.store), te = 0; ee.length > te;) _(ee[te++]);
  a(a.S + a.F * !W, "Symbol", {
    "for": function(e) {
      return o(A, e += "") ? A[e] : A[e] = P(e);
    },
    keyFor: function(e) {
      if (V(e)) return m(A, e);
      throw TypeError(e + " is not a symbol!");
    },
    useSetter: function() {
      U = !0;
    },
    useSimple: function() {
      U = !1;
    }
  }), a(a.S + a.F * !W, "Object", {
    create: K,
    defineProperty: q,
    defineProperties: J,
    getOwnPropertyDescriptor: Q,
    getOwnPropertyNames: X,
    getOwnPropertySymbols: Z
  }), E && a(a.S + a.F * (!W || l(function() {
    var e = P();
    return "[null]" != j([e]) || "{}" != j({
      a: e
    }) || "{}" != j(Object(e));
  })), "JSON", {
    stringify: function(e) {
      if (void 0 !== e && !V(e)) {
        for (var t, n, r = [e], o = 1; arguments.length > o;) r.push(arguments[o++]);
        return t = r[1], "function" == typeof t && (n = t), !n && v(t) || (t = function(e, t) {
          if (n && (t = n.call(this, e, t)), !V(t)) return t;
        }), r[1] = t, j.apply(E, r);
      }
    }
  }), P.prototype[R] || n(38)(P.prototype, R, P.prototype.valueOf), d(P, "Symbol"), d(Math, "Math", !0), d(r.JSON, "JSON", !0);
}, function(e, t, n) {
  n(91)("asyncIterator");
}, function(e, t, n) {
  n(91)("observable");
}, function(e, t, n) {
  t = e.exports = n(95)(), t.push([e.i, ".c-presence--active{color:#93cc93}.c-presence--away{color:#717274}", ""]);
}, function(e, t, n) {
  t = e.exports = n(95)(), t.push([e.i, '.c-tooltip,.c-tooltip__tip{display:inline-block}.c-tooltip__tip{color:#fff;background-color:#2c2d30;max-width:250px;padding:.5rem;border-radius:4px;position:relative;font-size:.8125rem;font-weight:700;text-align:center}.c-tooltip__tip:after{position:absolute;content:"";width:0;height:0;margin:-5px;border:6px solid transparent}.c-tooltip__tip--left{margin-right:.5rem}.c-tooltip__tip--left:after{border-left-color:#2c2d30;right:-6px;top:50%}.c-tooltip__tip--right{margin-left:.5rem}.c-tooltip__tip--right:after{border-right-color:#2c2d30;left:-6px;top:50%}.c-tooltip__tip--top{margin-bottom:.5rem}.c-tooltip__tip--top:after{border-top-color:#2c2d30;bottom:-6px;left:50%}.c-tooltip__tip--top-left{margin-bottom:.5rem}.c-tooltip__tip--top-left:after{border-top-color:#2c2d30;bottom:-6px;left:50%;left:25%}.c-tooltip__tip--top-right{margin-bottom:.5rem}.c-tooltip__tip--top-right:after{border-top-color:#2c2d30;bottom:-6px;left:50%;left:75%}.c-tooltip__tip--bottom{margin-top:.5rem}.c-tooltip__tip--bottom:after{border-bottom-color:#2c2d30;top:-6px;left:50%}.c-tooltip__tip--bottom-left{margin-top:.5rem}.c-tooltip__tip--bottom-left:after{border-bottom-color:#2c2d30;top:-6px;left:50%;left:25%}.c-tooltip__tip--bottom-right{margin-top:.5rem}.c-tooltip__tip--bottom-right:after{border-bottom-color:#2c2d30;top:-6px;left:50%;left:75%}.c-tooltip__tip--success{background-color:#2ab27b}.c-tooltip__tip--success.c-tooltip__tip--left:after{border-left-color:#2ab27b}.c-tooltip__tip--success.c-tooltip__tip--right:after{border-right-color:#2ab27b}.c-tooltip__tip--success.c-tooltip__tip--top-left:after,.c-tooltip__tip--success.c-tooltip__tip--top-right:after,.c-tooltip__tip--success.c-tooltip__tip--top:after{border-top-color:#2ab27b}.c-tooltip__tip--success.c-tooltip__tip--bottom-left:after,.c-tooltip__tip--success.c-tooltip__tip--bottom-right:after,.c-tooltip__tip--success.c-tooltip__tip--bottom:after{border-bottom-color:#2ab27b}', ""]);
}, function(e, t, n) {
  t = e.exports = n(95)(), t.push([e.i, '.p-channel_sidebar{width:220px;height:100vh;position:relative;background:#4d394b;padding:0;color:#fff}.p-channel_sidebar__header{padding:0 .5rem;color:hsla(0,0%,100%,.7);margin:0}.p-channel_sidebar__banner{text-align:center;position:absolute;display:block;z-index:2;color:#fff;left:.5rem;right:.5rem;font-weight:700;text-transform:uppercase;font-size:.75rem;line-height:1.5rem}.p-channel_sidebar__banner--top{border-top-right-radius:0;border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem;border-top-left-radius:0;background-clip:padding-box;top:0}.p-channel_sidebar__banner--bottom{border-top-right-radius:.25rem;border-bottom-right-radius:0;border-bottom-left-radius:0;border-top-left-radius:.25rem;background-clip:padding-box;bottom:0}.p-channel_sidebar__banner--mentions{background:#eb4d5c}.p-channel_sidebar__banner--unreads{background:#2d9ee0}.p-channel_sidebar__channel,.p-channel_sidebar__link{display:block;height:26px;line-height:1.625rem;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;color:#fff;border-top-right-radius:.25rem;border-bottom-right-radius:.25rem;border-bottom-left-radius:0;border-top-left-radius:0;background-clip:padding-box;padding:0 .25rem 0 .5rem;margin-right:.5rem}.p-channel_sidebar__channel:after,.p-channel_sidebar__channel:before,.p-channel_sidebar__link:after,.p-channel_sidebar__link:before{font-family:Slack;font-style:normal;font-weight:400;display:inline-block;width:20px;color:hsla(0,0%,100%,.7)}.p-channel_sidebar__channel:before,.p-channel_sidebar__link:before{font-size:1rem;float:left}.p-channel_sidebar__channel:after,.p-channel_sidebar__link:after{float:right}.p-channel_sidebar__channel:hover,.p-channel_sidebar__link:hover{color:#fff;background:#3e313c;text-decoration:none}.p-channel_sidebar__channel:before{content:"\\E104"}.p-channel_sidebar__channel--private:before{content:"\\E503";margin-top:-2px}.p-channel_sidebar__channel--shared:after{content:"\\E165"}.p-channel_sidebar__channel--ent-shared:after{content:"\\E166"}.p-channel_sidebar__channel--mpim:before{font-size:1.25rem;margin:-3px 2px 0 -2px}.p-channel_sidebar__channel--mpim[data-user-count="2"]:before{content:"\\E521"}.p-channel_sidebar__channel--mpim[data-user-count="3"]:before{content:"\\E522"}.p-channel_sidebar__channel--mpim[data-user-count="4"]:before{content:"\\E523"}.p-channel_sidebar__channel--mpim[data-user-count="5"]:before{content:"\\E524"}.p-channel_sidebar__channel--mpim[data-user-count="6"]:before{content:"\\E525"}.p-channel_sidebar__channel--mpim[data-user-count="7"]:before{content:"\\E526"}.p-channel_sidebar__channel--mpim[data-user-count="8"]:before{content:"\\E527"}.p-channel_sidebar__channel--mpim[data-user-count="9"]:before{content:"\\E528"}.p-channel_sidebar__channel--im:before{content:""}.p-channel_sidebar__channel--im .c-presence{margin:-4px 1px 0 -1px;float:left}.p-channel_sidebar__channel--im .c-presence--active{color:#38978d}.p-channel_sidebar__channel--im .c-presence--away{color:hsla(0,0%,100%,.7)}.p-channel_sidebar__channel--im.p-channel_sidebar__channel--selected .c-presence--active{color:#fff}.p-channel_sidebar__channel--im-slackbot:before{content:"\\E515";font-size:1.125rem;margin-top:-3px}.p-channel_sidebar__channel--selected,.p-channel_sidebar__channel--selected:hover,.p-channel_sidebar__link--selected,.p-channel_sidebar__link--selected:hover{background:#4c9689}.p-channel_sidebar__channel--selected:after,.p-channel_sidebar__channel--selected:before,.p-channel_sidebar__channel--selected:hover:after,.p-channel_sidebar__channel--selected:hover:before,.p-channel_sidebar__link--selected:after,.p-channel_sidebar__link--selected:before,.p-channel_sidebar__link--selected:hover:after,.p-channel_sidebar__link--selected:hover:before{color:#fff}.p-channel_sidebar__channel--muted:not(.p-channel_sidebar__channel--selected),.p-channel_sidebar__channel--muted:not(.p-channel_sidebar__channel--selected):after,.p-channel_sidebar__channel--muted:not(.p-channel_sidebar__channel--selected):before{color:hsla(0,0%,100%,.25)}.p-channel_sidebar__channel--unread{font-weight:900}.p-channel_sidebar__channel--draft:before{content:"\\E024";color:#fff;font-size:.875rem;margin:1px -1px 0 1px}.p-channel_sidebar__badge{float:right;background:#eb4d5c;padding:.1rem .6rem;border-radius:1rem;line-height:1rem;margin:3px 0;font-size:.75rem;font-weight:700;color:#fff}.p-channel_sidebar__status{margin-left:.5rem}.p-channel_sidebar__you_label{margin-left:.5rem;font-weight:400;color:hsla(0,0%,100%,.7)}.p-channel_sidebar__link--unreads:before{content:"\\E103"}.p-channel_sidebar__link--threads:before{content:"\\E004"}.p-channel_sidebar__link--invites:before{content:"\\E281"}', ""]);
}, function(e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = !("undefined" == typeof window || !window.document || !window.document.createElement), e.exports = t.default;
}, function(e, t) {
  function n(e, t) {
    if (e.indexOf) return e.indexOf(t);
    for (var n = 0, r = e.length; n < r; n++)
      if (e[n] === t) return n;
    return -1;
  }

  function r(e) {
    if (!(this instanceof r)) return new r(e);
    e || (e = {}), e.nodeType && (e = {
      el: e
    }), this.opts = e, this.el = e.el || document.body, "object" != typeof this.el && (this.el = document.querySelector(this.el));
  }
  e.exports = function(e) {
    return new r(e);
  }, r.prototype.add = function(e) {
    var t = this.el;
    if (t) {
      if ("" === t.className) return t.className = e;
      var r = t.className.split(" ");
      return n(r, e) > -1 ? r : (r.push(e), t.className = r.join(" "), r);
    }
  }, r.prototype.remove = function(e) {
    var t = this.el;
    if (t && "" !== t.className) {
      var r = t.className.split(" "),
        o = n(r, e);
      return o > -1 && r.splice(o, 1), t.className = r.join(" "), r;
    }
  }, r.prototype.has = function(e) {
    var t = this.el;
    if (t) return n(t.className.split(" "), e) > -1;
  }, r.prototype.toggle = function(e) {
    this.el && (this.has(e) ? this.remove(e) : this.add(e));
  };
}, function(e, t, n) {
  var r;
  ! function() {
    "use strict";
    var o = !("undefined" == typeof window || !window.document || !window.document.createElement),
      i = {
        canUseDOM: o,
        canUseWorkers: "undefined" != typeof Worker,
        canUseEventListeners: o && !(!window.addEventListener && !window.attachEvent),
        canUseViewport: o && !!window.screen
      };
    void 0 !== (r = function() {
      return i;
    }.call(t, n, t, e)) && (e.exports = r);
  }();
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e.replace(o, function(e, t) {
      return t.toUpperCase();
    });
  }
  var o = /-(.)/g;
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return o(e.replace(i, "ms-"));
  }
  var o = n(430),
    i = /^-ms-/;
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return !(!e || !t) && (e === t || !o(e) && (o(t) ? r(e, t.parentNode) : "contains" in e ? e.contains(t) : !!e.compareDocumentPosition && !!(16 & e.compareDocumentPosition(t))));
  }
  var o = n(440);
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.length;
    if ((Array.isArray(e) || "object" != typeof e && "function" != typeof e) && a(!1), "number" != typeof t && a(!1), 0 === t || t - 1 in e || a(!1), "function" == typeof e.callee && a(!1), e.hasOwnProperty) try {
      return Array.prototype.slice.call(e);
    } catch (e) {}
    for (var n = Array(t), r = 0; r < t; r++) n[r] = e[r];
    return n;
  }

  function o(e) {
    return !!e && ("object" == typeof e || "function" == typeof e) && "length" in e && !("setInterval" in e) && "number" != typeof e.nodeType && (Array.isArray(e) || "callee" in e || "item" in e);
  }

  function i(e) {
    return o(e) ? Array.isArray(e) ? e.slice() : r(e) : [e];
  }
  var a = n(2);
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.match(c);
    return t && t[1].toLowerCase();
  }

  function o(e, t) {
    var n = l;
    l || u(!1);
    var o = r(e),
      i = o && s(o);
    if (i) {
      n.innerHTML = i[1] + e + i[2];
      for (var c = i[0]; c--;) n = n.lastChild;
    } else n.innerHTML = e;
    var d = n.getElementsByTagName("script");
    d.length && (t || u(!1), a(d).forEach(t));
    for (var f = Array.from(n.childNodes); n.lastChild;) n.removeChild(n.lastChild);
    return f;
  }
  var i = n(15),
    a = n(433),
    s = n(435),
    u = n(2),
    l = i.canUseDOM ? document.createElement("div") : null,
    c = /^\s*<(\w+)/;
  e.exports = o;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return a || i(!1), f.hasOwnProperty(e) || (e = "*"), s.hasOwnProperty(e) || (a.innerHTML = "*" === e ? "<link />" : "<" + e + "></" + e + ">", s[e] = !a.firstChild), s[e] ? f[e] : null;
  }
  var o = n(15),
    i = n(2),
    a = o.canUseDOM ? document.createElement("div") : null,
    s = {},
    u = [1, '<select multiple="true">', "</select>"],
    l = [1, "<table>", "</table>"],
    c = [3, "<table><tbody><tr>", "</tr></tbody></table>"],
    d = [1, '<svg xmlns="http://www.w3.org/2000/svg">', "</svg>"],
    f = {
      "*": [1, "?<div>", "</div>"],
      area: [1, "<map>", "</map>"],
      col: [2, "<table><tbody></tbody><colgroup>", "</colgroup></table>"],
      legend: [1, "<fieldset>", "</fieldset>"],
      param: [1, "<object>", "</object>"],
      tr: [2, "<table><tbody>", "</tbody></table>"],
      optgroup: u,
      option: u,
      caption: l,
      colgroup: l,
      tbody: l,
      tfoot: l,
      thead: l,
      td: c,
      th: c
    };
  ["circle", "clipPath", "defs", "ellipse", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "text", "tspan"].forEach(function(e) {
    f[e] = d, s[e] = !0;
  }), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e === window ? {
      x: window.pageXOffset || document.documentElement.scrollLeft,
      y: window.pageYOffset || document.documentElement.scrollTop
    } : {
      x: e.scrollLeft,
      y: e.scrollTop
    };
  }
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e.replace(o, "-$1").toLowerCase();
  }
  var o = /([A-Z])/g;
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return o(e).replace(i, "-ms-");
  }
  var o = n(437),
    i = /^ms-/;
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return !(!e || !("function" == typeof Node ? e instanceof Node : "object" == typeof e && "number" == typeof e.nodeType && "string" == typeof e.nodeName));
  }
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return o(e) && 3 == e.nodeType;
  }
  var o = n(439);
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = {};
    return function(n) {
      return t.hasOwnProperty(n) || (t[n] = e.call(this, n)), t[n];
    };
  }
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = {
      childContextTypes: !0,
      contextTypes: !0,
      defaultProps: !0,
      displayName: !0,
      getDefaultProps: !0,
      mixins: !0,
      propTypes: !0,
      type: !0
    },
    o = {
      name: !0,
      length: !0,
      prototype: !0,
      caller: !0,
      arguments: !0,
      arity: !0
    },
    i = "function" == typeof Object.getOwnPropertySymbols;
  e.exports = function(e, t, n) {
    if ("string" != typeof t) {
      var a = Object.getOwnPropertyNames(t);
      i && (a = a.concat(Object.getOwnPropertySymbols(t)));
      for (var s = 0; s < a.length; ++s)
        if (!(r[a[s]] || o[a[s]] || n && n[a[s]])) try {
          e[a[s]] = t[a[s]];
        } catch (e) {}
    }
    return e;
  };
}, function(e, t, n) {
  "use strict";
  var r = function(e, t, n, r, o, i, a, s) {
    if (!e) {
      var u;
      if (void 0 === t) u = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      else {
        var l = [n, r, o, i, a, s],
          c = 0;
        u = new Error(t.replace(/%s/g, function() {
          return l[c++];
        })), u.name = "Invariant Violation";
      }
      throw u.framesToPop = 1, u;
    }
  };
  e.exports = r;
}, , , function(e, t, n) {
  "use strict";

  function r(e) {
    return null == e ? void 0 === e ? u : s : l && l in Object(e) ? n.i(i.a)(e) : n.i(a.a)(e);
  }
  var o = n(154),
    i = n(449),
    a = n(450),
    s = "[object Null]",
    u = "[object Undefined]",
    l = o.a ? o.a.toStringTag : void 0;
  t.a = r;
}, function(e, t, n) {
  "use strict";
  (function(e) {
    var n = "object" == typeof e && e && e.Object === Object && e;
    t.a = n;
  }).call(t, n(55));
}, function(e, t, n) {
  "use strict";
  var r = n(451),
    o = n.i(r.a)(Object.getPrototypeOf, Object);
  t.a = o;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = a.call(e, u),
      n = e[u];
    try {
      e[u] = void 0;
    } catch (e) {}
    var r = s.call(e);
    return t ? e[u] = n : delete e[u], r;
  }
  var o = n(154),
    i = Object.prototype,
    a = i.hasOwnProperty,
    s = i.toString,
    u = o.a ? o.a.toStringTag : void 0;
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return i.call(e);
  }
  var o = Object.prototype,
    i = o.toString;
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return function(n) {
      return e(t(n));
    };
  }
  t.a = r;
}, function(e, t, n) {
  "use strict";
  var r = n(447),
    o = "object" == typeof self && self && self.Object === Object && self,
    i = r.a || o || Function("return this")();
  t.a = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return null != e && "object" == typeof e;
  }
  t.a = r;
}, function(e, t) {
  function n(e) {
    return e;
  }
  e.exports = n;
}, function(e, t, n) {
  (function(t) {
    function n(e, t, n) {
      switch (n.length) {
        case 0:
          return e.call(t);
        case 1:
          return e.call(t, n[0]);
        case 2:
          return e.call(t, n[0], n[1]);
        case 3:
          return e.call(t, n[0], n[1], n[2]);
      }
      return e.apply(t, n);
    }

    function r(e, t) {
      return !!(e ? e.length : 0) && u(e, t, 0) > -1;
    }

    function o(e, t, n) {
      for (var r = -1, o = e ? e.length : 0; ++r < o;)
        if (n(t, e[r])) return !0;
      return !1;
    }

    function i(e, t) {
      for (var n = -1, r = e ? e.length : 0, o = Array(r); ++n < r;) o[n] = t(e[n], n, e);
      return o;
    }

    function a(e, t) {
      for (var n = -1, r = t.length, o = e.length; ++n < r;) e[o + n] = t[n];
      return e;
    }

    function s(e, t, n, r) {
      for (var o = e.length, i = n + (r ? 1 : -1); r ? i-- : ++i < o;)
        if (t(e[i], i, e)) return i;
      return -1;
    }

    function u(e, t, n) {
      if (t !== t) return s(e, l, n);
      for (var r = n - 1, o = e.length; ++r < o;)
        if (e[r] === t) return r;
      return -1;
    }

    function l(e) {
      return e !== e;
    }

    function c(e, t) {
      for (var n = -1, r = Array(e); ++n < e;) r[n] = t(n);
      return r;
    }

    function d(e) {
      return function(t) {
        return e(t);
      };
    }

    function f(e, t) {
      return e.has(t);
    }

    function h(e, t) {
      return null == e ? void 0 : e[t];
    }

    function p(e) {
      var t = !1;
      if (null != e && "function" != typeof e.toString) try {
        t = !!(e + "");
      } catch (e) {}
      return t;
    }

    function _(e, t) {
      return function(n) {
        return e(t(n));
      };
    }

    function m(e) {
      var t = -1,
        n = e ? e.length : 0;
      for (this.clear(); ++t < n;) {
        var r = e[t];
        this.set(r[0], r[1]);
      }
    }

    function y() {
      this.__data__ = Ge ? Ge(null) : {};
    }

    function v(e) {
      return this.has(e) && delete this.__data__[e];
    }

    function g(e) {
      var t = this.__data__;
      if (Ge) {
        var n = t[e];
        return n === _e ? void 0 : n;
      }
      return je.call(t, e) ? t[e] : void 0;
    }

    function M(e) {
      var t = this.__data__;
      return Ge ? void 0 !== t[e] : je.call(t, e);
    }

    function b(e, t) {
      return this.__data__[e] = Ge && void 0 === t ? _e : t, this;
    }

    function w(e) {
      var t = -1,
        n = e ? e.length : 0;
      for (this.clear(); ++t < n;) {
        var r = e[t];
        this.set(r[0], r[1]);
      }
    }

    function k() {
      this.__data__ = [];
    }

    function L(e) {
      var t = this.__data__,
        n = H(t, e);
      return !(n < 0 || (n == t.length - 1 ? t.pop() : Ne.call(t, n, 1), 0));
    }

    function T(e) {
      var t = this.__data__,
        n = H(t, e);
      return n < 0 ? void 0 : t[n][1];
    }

    function S(e) {
      return H(this.__data__, e) > -1;
    }

    function Y(e, t) {
      var n = this.__data__,
        r = H(n, e);
      return r < 0 ? n.push([e, t]) : n[r][1] = t, this;
    }

    function D(e) {
      var t = -1,
        n = e ? e.length : 0;
      for (this.clear(); ++t < n;) {
        var r = e[t];
        this.set(r[0], r[1]);
      }
    }

    function x() {
      this.__data__ = {
        hash: new m,
        map: new(Ue || w),
        string: new m
      };
    }

    function C(e) {
      return q(this, e).delete(e);
    }

    function P(e) {
      return q(this, e).get(e);
    }

    function E(e) {
      return q(this, e).has(e);
    }

    function j(e, t) {
      return q(this, e).set(e, t), this;
    }

    function O(e) {
      var t = -1,
        n = e ? e.length : 0;
      for (this.__data__ = new D; ++t < n;) this.add(e[t]);
    }

    function R(e) {
      return this.__data__.set(e, _e), this;
    }

    function I(e) {
      return this.__data__.has(e);
    }

    function A(e, t) {
      var n = qe(e) || oe(e) ? c(e.length, String) : [],
        r = n.length,
        o = !!r;
      for (var i in e) !t && !je.call(e, i) || o && ("length" == i || $(i, r)) || n.push(i);
      return n;
    }

    function H(e, t) {
      for (var n = e.length; n--;)
        if (re(e[n][0], t)) return n;
      return -1;
    }

    function N(e, t, n, a) {
      var s = -1,
        u = r,
        l = !0,
        c = e.length,
        h = [],
        p = t.length;
      if (!c) return h;
      n && (t = i(t, d(n))), a ? (u = o, l = !1) : t.length >= pe && (u = f, l = !1, t = new O(t));
      e: for (; ++s < c;) {
        var _ = e[s],
          m = n ? n(_) : _;
        if (_ = a || 0 !== _ ? _ : 0, l && m === m) {
          for (var y = p; y--;)
            if (t[y] === m) continue e;
          h.push(_);
        } else u(t, m, a) || h.push(_);
      }
      return h;
    }

    function z(e, t, n, r, o) {
      var i = -1,
        s = e.length;
      for (n || (n = K), o || (o = []); ++i < s;) {
        var u = e[i];
        t > 0 && n(u) ? t > 1 ? z(u, t - 1, n, r, o) : a(o, u) : r || (o[o.length] = u);
      }
      return o;
    }

    function W(e, t, n) {
      var r = t(e);
      return qe(e) ? r : a(r, n(e));
    }

    function F(e) {
      return !(!le(e) || X(e)) && (se(e) || p(e) ? Re : we).test(ne(e));
    }

    function U(e) {
      if (!le(e)) return ee(e);
      var t = Z(e),
        n = [];
      for (var r in e)("constructor" != r || !t && je.call(e, r)) && n.push(r);
      return n;
    }

    function G(e, t) {
      return e = Object(e), B(e, t, function(t, n) {
        return n in e;
      });
    }

    function B(e, t, n) {
      for (var r = -1, o = t.length, i = {}; ++r < o;) {
        var a = t[r],
          s = e[a];
        n(s, a) && (i[a] = s);
      }
      return i;
    }

    function V(e) {
      return W(e, fe, Ve);
    }

    function q(e, t) {
      var n = e.__data__;
      return Q(t) ? n["string" == typeof t ? "string" : "hash"] : n.map;
    }

    function J(e, t) {
      var n = h(e, t);
      return F(n) ? n : void 0;
    }

    function K(e) {
      return qe(e) || oe(e) || !!(ze && e && e[ze]);
    }

    function $(e, t) {
      return !!(t = null == t ? ye : t) && ("number" == typeof e || ke.test(e)) && e > -1 && e % 1 == 0 && e < t;
    }

    function Q(e) {
      var t = typeof e;
      return "string" == t || "number" == t || "symbol" == t || "boolean" == t ? "__proto__" !== e : null === e;
    }

    function X(e) {
      return !!Pe && Pe in e;
    }

    function Z(e) {
      var t = e && e.constructor;
      return e === ("function" == typeof t && t.prototype || xe);
    }

    function ee(e) {
      var t = [];
      if (null != e)
        for (var n in Object(e)) t.push(n);
      return t;
    }

    function te(e) {
      if ("string" == typeof e || de(e)) return e;
      var t = e + "";
      return "0" == t && 1 / e == -me ? "-0" : t;
    }

    function ne(e) {
      if (null != e) {
        try {
          return Ee.call(e);
        } catch (e) {}
        try {
          return e + "";
        } catch (e) {}
      }
      return "";
    }

    function re(e, t) {
      return e === t || e !== e && t !== t;
    }

    function oe(e) {
      return ae(e) && je.call(e, "callee") && (!He.call(e, "callee") || Oe.call(e) == ve);
    }

    function ie(e) {
      return null != e && ue(e.length) && !se(e);
    }

    function ae(e) {
      return ce(e) && ie(e);
    }

    function se(e) {
      var t = le(e) ? Oe.call(e) : "";
      return t == ge || t == Me;
    }

    function ue(e) {
      return "number" == typeof e && e > -1 && e % 1 == 0 && e <= ye;
    }

    function le(e) {
      var t = typeof e;
      return !!e && ("object" == t || "function" == t);
    }

    function ce(e) {
      return !!e && "object" == typeof e;
    }

    function de(e) {
      return "symbol" == typeof e || ce(e) && Oe.call(e) == be;
    }

    function fe(e) {
      return ie(e) ? A(e, !0) : U(e);
    }

    function he() {
      return [];
    }
    var pe = 200,
      _e = "__lodash_hash_undefined__",
      me = 1 / 0,
      ye = 9007199254740991,
      ve = "[object Arguments]",
      ge = "[object Function]",
      Me = "[object GeneratorFunction]",
      be = "[object Symbol]",
      we = /^\[object .+?Constructor\]$/,
      ke = /^(?:0|[1-9]\d*)$/,
      Le = "object" == typeof t && t && t.Object === Object && t,
      Te = "object" == typeof self && self && self.Object === Object && self,
      Se = Le || Te || Function("return this")(),
      Ye = Array.prototype,
      De = Function.prototype,
      xe = Object.prototype,
      Ce = Se["__core-js_shared__"],
      Pe = function() {
        var e = /[^.]+$/.exec(Ce && Ce.keys && Ce.keys.IE_PROTO || "");
        return e ? "Symbol(src)_1." + e : "";
      }(),
      Ee = De.toString,
      je = xe.hasOwnProperty,
      Oe = xe.toString,
      Re = RegExp("^" + Ee.call(je).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
      Ie = Se.Symbol,
      Ae = _(Object.getPrototypeOf, Object),
      He = xe.propertyIsEnumerable,
      Ne = Ye.splice,
      ze = Ie ? Ie.isConcatSpreadable : void 0,
      We = Object.getOwnPropertySymbols,
      Fe = Math.max,
      Ue = J(Se, "Map"),
      Ge = J(Object, "create");
    m.prototype.clear = y, m.prototype.delete = v, m.prototype.get = g, m.prototype.has = M, m.prototype.set = b, w.prototype.clear = k, w.prototype.delete = L, w.prototype.get = T, w.prototype.has = S, w.prototype.set = Y, D.prototype.clear = x, D.prototype.delete = C, D.prototype.get = P, D.prototype.has = E, D.prototype.set = j, O.prototype.add = O.prototype.push = R, O.prototype.has = I;
    var Be = We ? _(We, Object) : he,
      Ve = We ? function(e) {
        for (var t = []; e;) a(t, Be(e)), e = Ae(e);
        return t;
      } : he,
      qe = Array.isArray,
      Je = function(e, t) {
        return t = Fe(void 0 === t ? e.length - 1 : t, 0),
          function() {
            for (var r = arguments, o = -1, i = Fe(r.length - t, 0), a = Array(i); ++o < i;) a[o] = r[t + o];
            o = -1;
            for (var s = Array(t + 1); ++o < t;) s[o] = r[o];
            return s[t] = a, n(e, this, s);
          };
      }(function(e, t) {
        return null == e ? {} : (t = i(z(t, 1), te), G(e, N(V(e), t)));
      });
    e.exports = Je;
  }).call(t, n(55));
}, function(e, t, n) {
  (function(e, n) {
    function r(e, t, n, r) {
      var o = -1,
        i = e ? e.length : 0;
      for (r && i && (n = e[++o]); ++o < i;) n = t(n, e[o], o, e);
      return n;
    }

    function o(e, t) {
      for (var n = -1, r = e ? e.length : 0; ++n < r;)
        if (t(e[n], n, e)) return !0;
      return !1;
    }

    function i(e) {
      return function(t) {
        return null == t ? void 0 : t[e];
      };
    }

    function a(e, t, n, r, o) {
      return o(e, function(e, o, i) {
        n = r ? (r = !1, e) : t(n, e, o, i);
      }), n;
    }

    function s(e, t) {
      for (var n = -1, r = Array(e); ++n < e;) r[n] = t(n);
      return r;
    }

    function u(e, t) {
      return null == e ? void 0 : e[t];
    }

    function l(e) {
      var t = !1;
      if (null != e && "function" != typeof e.toString) try {
        t = !!(e + "");
      } catch (e) {}
      return t;
    }

    function c(e) {
      var t = -1,
        n = Array(e.size);
      return e.forEach(function(e, r) {
        n[++t] = [r, e];
      }), n;
    }

    function d(e) {
      var t = -1,
        n = Array(e.size);
      return e.forEach(function(e) {
        n[++t] = e;
      }), n;
    }

    function f(e) {
      var t = -1,
        n = e ? e.length : 0;
      for (this.clear(); ++t < n;) {
        var r = e[t];
        this.set(r[0], r[1]);
      }
    }

    function h() {
      this.__data__ = Nt ? Nt(null) : {};
    }

    function p(e) {
      return this.has(e) && delete this.__data__[e];
    }

    function _(e) {
      var t = this.__data__;
      if (Nt) {
        var n = t[e];
        return n === He ? void 0 : n;
      }
      return St.call(t, e) ? t[e] : void 0;
    }

    function m(e) {
      var t = this.__data__;
      return Nt ? void 0 !== t[e] : St.call(t, e);
    }

    function y(e, t) {
      return this.__data__[e] = Nt && void 0 === t ? He : t, this;
    }

    function v(e) {
      var t = -1,
        n = e ? e.length : 0;
      for (this.clear(); ++t < n;) {
        var r = e[t];
        this.set(r[0], r[1]);
      }
    }

    function g() {
      this.__data__ = [];
    }

    function M(e) {
      var t = this.__data__,
        n = z(t, e);
      return !(n < 0 || (n == t.length - 1 ? t.pop() : Et.call(t, n, 1), 0));
    }

    function b(e) {
      var t = this.__data__,
        n = z(t, e);
      return n < 0 ? void 0 : t[n][1];
    }

    function w(e) {
      return z(this.__data__, e) > -1;
    }

    function k(e, t) {
      var n = this.__data__,
        r = z(n, e);
      return r < 0 ? n.push([e, t]) : n[r][1] = t, this;
    }

    function L(e) {
      var t = -1,
        n = e ? e.length : 0;
      for (this.clear(); ++t < n;) {
        var r = e[t];
        this.set(r[0], r[1]);
      }
    }

    function T() {
      this.__data__ = {
        hash: new f,
        map: new(Rt || v),
        string: new f
      };
    }

    function S(e) {
      return ae(this, e).delete(e);
    }

    function Y(e) {
      return ae(this, e).get(e);
    }

    function D(e) {
      return ae(this, e).has(e);
    }

    function x(e, t) {
      return ae(this, e).set(e, t), this;
    }

    function C(e) {
      var t = -1,
        n = e ? e.length : 0;
      for (this.__data__ = new L; ++t < n;) this.add(e[t]);
    }

    function P(e) {
      return this.__data__.set(e, He), this;
    }

    function E(e) {
      return this.__data__.has(e);
    }

    function j(e) {
      this.__data__ = new v(e);
    }

    function O() {
      this.__data__ = new v;
    }

    function R(e) {
      return this.__data__.delete(e);
    }

    function I(e) {
      return this.__data__.get(e);
    }

    function A(e) {
      return this.__data__.has(e);
    }

    function H(e, t) {
      var n = this.__data__;
      if (n instanceof v) {
        var r = n.__data__;
        if (!Rt || r.length < Ie - 1) return r.push([e, t]), this;
        n = this.__data__ = new L(r);
      }
      return n.set(e, t), this;
    }

    function N(e, t) {
      var n = Xt(e) || we(e) ? s(e.length, String) : [],
        r = n.length,
        o = !!r;
      for (var i in e) !t && !St.call(e, i) || o && ("length" == i || ce(i, r)) || n.push(i);
      return n;
    }

    function z(e, t) {
      for (var n = e.length; n--;)
        if (be(e[n][0], t)) return n;
      return -1;
    }

    function W(e, t) {
      return e && Kt(e, t, je);
    }

    function F(e, t) {
      t = de(t, e) ? [t] : ne(t);
      for (var n = 0, r = t.length; null != e && n < r;) e = e[ye(t[n++])];
      return n && n == r ? e : void 0;
    }

    function U(e) {
      return Yt.call(e);
    }

    function G(e, t) {
      return null != e && t in Object(e);
    }

    function B(e, t, n, r, o) {
      return e === t || (null == e || null == t || !Ye(e) && !De(t) ? e !== e && t !== t : V(e, t, B, n, r, o));
    }

    function V(e, t, n, r, o, i) {
      var a = Xt(e),
        s = Xt(t),
        u = Ge,
        c = Ge;
      a || (u = $t(e), u = u == Ue ? Xe : u), s || (c = $t(t), c = c == Ue ? Xe : c);
      var d = u == Xe && !l(e),
        f = c == Xe && !l(t),
        h = u == c;
      if (h && !d) return i || (i = new j), a || Zt(e) ? re(e, t, n, r, o, i) : oe(e, t, u, n, r, o, i);
      if (!(o & ze)) {
        var p = d && St.call(e, "__wrapped__"),
          _ = f && St.call(t, "__wrapped__");
        if (p || _) {
          var m = p ? e.value() : e,
            y = _ ? t.value() : t;
          return i || (i = new j), n(m, y, r, o, i);
        }
      }
      return !!h && (i || (i = new j), ie(e, t, n, r, o, i));
    }

    function q(e, t, n, r) {
      var o = n.length,
        i = o,
        a = !r;
      if (null == e) return !i;
      for (e = Object(e); o--;) {
        var s = n[o];
        if (a && s[2] ? s[1] !== e[s[0]] : !(s[0] in e)) return !1;
      }
      for (; ++o < i;) {
        s = n[o];
        var u = s[0],
          l = e[u],
          c = s[1];
        if (a && s[2]) {
          if (void 0 === l && !(u in e)) return !1;
        } else {
          var d = new j;
          if (r) var f = r(l, c, u, e, t, d);
          if (!(void 0 === f ? B(c, l, r, Ne | ze, d) : f)) return !1;
        }
      }
      return !0;
    }

    function J(e) {
      return !(!Ye(e) || he(e)) && (Te(e) || l(e) ? Dt : ut).test(ve(e));
    }

    function K(e) {
      return De(e) && Se(e.length) && !!ct[Yt.call(e)];
    }

    function $(e) {
      return "function" == typeof e ? e : null == e ? Oe : "object" == typeof e ? Xt(e) ? Z(e[0], e[1]) : X(e) : Re(e);
    }

    function Q(e) {
      if (!pe(e)) return jt(e);
      var t = [];
      for (var n in Object(e)) St.call(e, n) && "constructor" != n && t.push(n);
      return t;
    }

    function X(e) {
      var t = se(e);
      return 1 == t.length && t[0][2] ? me(t[0][0], t[0][1]) : function(n) {
        return n === e || q(n, e, t);
      };
    }

    function Z(e, t) {
      return de(e) && _e(t) ? me(ye(e), t) : function(n) {
        var r = Pe(n, e);
        return void 0 === r && r === t ? Ee(n, e) : B(t, r, void 0, Ne | ze);
      };
    }

    function ee(e) {
      return function(t) {
        return F(t, e);
      };
    }

    function te(e) {
      if ("string" == typeof e) return e;
      if (xe(e)) return qt ? qt.call(e) : "";
      var t = e + "";
      return "0" == t && 1 / e == -We ? "-0" : t;
    }

    function ne(e) {
      return Xt(e) ? e : Qt(e);
    }

    function re(e, t, n, r, i, a) {
      var s = i & ze,
        u = e.length,
        l = t.length;
      if (u != l && !(s && l > u)) return !1;
      var c = a.get(e);
      if (c && a.get(t)) return c == t;
      var d = -1,
        f = !0,
        h = i & Ne ? new C : void 0;
      for (a.set(e, t), a.set(t, e); ++d < u;) {
        var p = e[d],
          _ = t[d];
        if (r) var m = s ? r(_, p, d, t, e, a) : r(p, _, d, e, t, a);
        if (void 0 !== m) {
          if (m) continue;
          f = !1;
          break;
        }
        if (h) {
          if (!o(t, function(e, t) {
              if (!h.has(t) && (p === e || n(p, e, r, i, a))) return h.add(t);
            })) {
            f = !1;
            break;
          }
        } else if (p !== _ && !n(p, _, r, i, a)) {
          f = !1;
          break;
        }
      }
      return a.delete(e), a.delete(t), f;
    }

    function oe(e, t, n, r, o, i, a) {
      switch (n) {
        case ot:
          if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset) return !1;
          e = e.buffer, t = t.buffer;
        case rt:
          return !(e.byteLength != t.byteLength || !r(new Ct(e), new Ct(t)));
        case Be:
        case Ve:
        case Qe:
          return be(+e, +t);
        case qe:
          return e.name == t.name && e.message == t.message;
        case Ze:
        case tt:
          return e == t + "";
        case $e:
          var s = c;
        case et:
          var u = i & ze;
          if (s || (s = d), e.size != t.size && !u) return !1;
          var l = a.get(e);
          if (l) return l == t;
          i |= Ne, a.set(e, t);
          var f = re(s(e), s(t), r, o, i, a);
          return a.delete(e), f;
        case nt:
          if (Vt) return Vt.call(e) == Vt.call(t);
      }
      return !1;
    }

    function ie(e, t, n, r, o, i) {
      var a = o & ze,
        s = je(e),
        u = s.length;
      if (u != je(t).length && !a) return !1;
      for (var l = u; l--;) {
        var c = s[l];
        if (!(a ? c in t : St.call(t, c))) return !1;
      }
      var d = i.get(e);
      if (d && i.get(t)) return d == t;
      var f = !0;
      i.set(e, t), i.set(t, e);
      for (var h = a; ++l < u;) {
        c = s[l];
        var p = e[c],
          _ = t[c];
        if (r) var m = a ? r(_, p, c, t, e, i) : r(p, _, c, e, t, i);
        if (!(void 0 === m ? p === _ || n(p, _, r, o, i) : m)) {
          f = !1;
          break;
        }
        h || (h = "constructor" == c);
      }
      if (f && !h) {
        var y = e.constructor,
          v = t.constructor;
        y != v && "constructor" in e && "constructor" in t && !("function" == typeof y && y instanceof y && "function" == typeof v && v instanceof v) && (f = !1);
      }
      return i.delete(e), i.delete(t), f;
    }

    function ae(e, t) {
      var n = e.__data__;
      return fe(t) ? n["string" == typeof t ? "string" : "hash"] : n.map;
    }

    function se(e) {
      for (var t = je(e), n = t.length; n--;) {
        var r = t[n],
          o = e[r];
        t[n] = [r, o, _e(o)];
      }
      return t;
    }

    function ue(e, t) {
      var n = u(e, t);
      return J(n) ? n : void 0;
    }

    function le(e, t, n) {
      t = de(t, e) ? [t] : ne(t);
      for (var r, o = -1, i = t.length; ++o < i;) {
        var a = ye(t[o]);
        if (!(r = null != e && n(e, a))) break;
        e = e[a];
      }
      if (r) return r;
      var i = e ? e.length : 0;
      return !!i && Se(i) && ce(a, i) && (Xt(e) || we(e));
    }

    function ce(e, t) {
      return !!(t = null == t ? Fe : t) && ("number" == typeof e || lt.test(e)) && e > -1 && e % 1 == 0 && e < t;
    }

    function de(e, t) {
      if (Xt(e)) return !1;
      var n = typeof e;
      return !("number" != n && "symbol" != n && "boolean" != n && null != e && !xe(e)) || at.test(e) || !it.test(e) || null != t && e in Object(t);
    }

    function fe(e) {
      var t = typeof e;
      return "string" == t || "number" == t || "symbol" == t || "boolean" == t ? "__proto__" !== e : null === e;
    }

    function he(e) {
      return !!Lt && Lt in e;
    }

    function pe(e) {
      var t = e && e.constructor;
      return e === ("function" == typeof t && t.prototype || wt);
    }

    function _e(e) {
      return e === e && !Ye(e);
    }

    function me(e, t) {
      return function(n) {
        return null != n && n[e] === t && (void 0 !== t || e in Object(n));
      };
    }

    function ye(e) {
      if ("string" == typeof e || xe(e)) return e;
      var t = e + "";
      return "0" == t && 1 / e == -We ? "-0" : t;
    }

    function ve(e) {
      if (null != e) {
        try {
          return Tt.call(e);
        } catch (e) {}
        try {
          return e + "";
        } catch (e) {}
      }
      return "";
    }

    function ge(e, t, n) {
      var o = Xt(e) ? r : a,
        i = arguments.length < 3;
      return o(e, $(t, 4), n, i, Jt);
    }

    function Me(e, t) {
      if ("function" != typeof e || t && "function" != typeof t) throw new TypeError(Ae);
      var n = function() {
        var r = arguments,
          o = t ? t.apply(this, r) : r[0],
          i = n.cache;
        if (i.has(o)) return i.get(o);
        var a = e.apply(this, r);
        return n.cache = i.set(o, a), a;
      };
      return n.cache = new(Me.Cache || L), n;
    }

    function be(e, t) {
      return e === t || e !== e && t !== t;
    }

    function we(e) {
      return Le(e) && St.call(e, "callee") && (!Pt.call(e, "callee") || Yt.call(e) == Ue);
    }

    function ke(e) {
      return null != e && Se(e.length) && !Te(e);
    }

    function Le(e) {
      return De(e) && ke(e);
    }

    function Te(e) {
      var t = Ye(e) ? Yt.call(e) : "";
      return t == Je || t == Ke;
    }

    function Se(e) {
      return "number" == typeof e && e > -1 && e % 1 == 0 && e <= Fe;
    }

    function Ye(e) {
      var t = typeof e;
      return !!e && ("object" == t || "function" == t);
    }

    function De(e) {
      return !!e && "object" == typeof e;
    }

    function xe(e) {
      return "symbol" == typeof e || De(e) && Yt.call(e) == nt;
    }

    function Ce(e) {
      return null == e ? "" : te(e);
    }

    function Pe(e, t, n) {
      var r = null == e ? void 0 : F(e, t);
      return void 0 === r ? n : r;
    }

    function Ee(e, t) {
      return null != e && le(e, t, G);
    }

    function je(e) {
      return ke(e) ? N(e) : Q(e);
    }

    function Oe(e) {
      return e;
    }

    function Re(e) {
      return de(e) ? i(ye(e)) : ee(e);
    }
    var Ie = 200,
      Ae = "Expected a function",
      He = "__lodash_hash_undefined__",
      Ne = 1,
      ze = 2,
      We = 1 / 0,
      Fe = 9007199254740991,
      Ue = "[object Arguments]",
      Ge = "[object Array]",
      Be = "[object Boolean]",
      Ve = "[object Date]",
      qe = "[object Error]",
      Je = "[object Function]",
      Ke = "[object GeneratorFunction]",
      $e = "[object Map]",
      Qe = "[object Number]",
      Xe = "[object Object]",
      Ze = "[object RegExp]",
      et = "[object Set]",
      tt = "[object String]",
      nt = "[object Symbol]",
      rt = "[object ArrayBuffer]",
      ot = "[object DataView]",
      it = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      at = /^\w*$/,
      st = /^\./,
      ut = /^\[object .+?Constructor\]$/,
      lt = /^(?:0|[1-9]\d*)$/,
      ct = {};
    ct["[object Float32Array]"] = ct["[object Float64Array]"] = ct["[object Int8Array]"] = ct["[object Int16Array]"] = ct["[object Int32Array]"] = ct["[object Uint8Array]"] = ct["[object Uint8ClampedArray]"] = ct["[object Uint16Array]"] = ct["[object Uint32Array]"] = !0, ct[Ue] = ct[Ge] = ct[rt] = ct[Be] = ct[ot] = ct[Ve] = ct[qe] = ct[Je] = ct[$e] = ct[Qe] = ct[Xe] = ct[Ze] = ct[et] = ct[tt] = ct["[object WeakMap]"] = !1;
    var dt = "object" == typeof e && e && e.Object === Object && e,
      ft = "object" == typeof self && self && self.Object === Object && self,
      ht = dt || ft || Function("return this")(),
      pt = "object" == typeof t && t && !t.nodeType && t,
      _t = pt && "object" == typeof n && n && !n.nodeType && n,
      mt = _t && _t.exports === pt,
      yt = mt && dt.process,
      vt = function() {
        try {
          return yt && yt.binding("util");
        } catch (e) {}
      }(),
      gt = vt && vt.isTypedArray,
      Mt = Array.prototype,
      bt = Function.prototype,
      wt = Object.prototype,
      kt = ht["__core-js_shared__"],
      Lt = function() {
        var e = /[^.]+$/.exec(kt && kt.keys && kt.keys.IE_PROTO || "");
        return e ? "Symbol(src)_1." + e : "";
      }(),
      Tt = bt.toString,
      St = wt.hasOwnProperty,
      Yt = wt.toString,
      Dt = RegExp("^" + Tt.call(St).replace(/[\\^$.*+?()[\]{}|]/g, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
      xt = ht.Symbol,
      Ct = ht.Uint8Array,
      Pt = wt.propertyIsEnumerable,
      Et = Mt.splice,
      jt = function(e, t) {
        return function(n) {
          return e(t(n));
        };
      }(Object.keys, Object),
      Ot = ue(ht, "DataView"),
      Rt = ue(ht, "Map"),
      It = ue(ht, "Promise"),
      At = ue(ht, "Set"),
      Ht = ue(ht, "WeakMap"),
      Nt = ue(Object, "create"),
      zt = ve(Ot),
      Wt = ve(Rt),
      Ft = ve(It),
      Ut = ve(At),
      Gt = ve(Ht),
      Bt = xt ? xt.prototype : void 0,
      Vt = Bt ? Bt.valueOf : void 0,
      qt = Bt ? Bt.toString : void 0;
    f.prototype.clear = h, f.prototype.delete = p, f.prototype.get = _, f.prototype.has = m, f.prototype.set = y, v.prototype.clear = g, v.prototype.delete = M, v.prototype.get = b, v.prototype.has = w, v.prototype.set = k, L.prototype.clear = T, L.prototype.delete = S, L.prototype.get = Y, L.prototype.has = D, L.prototype.set = x, C.prototype.add = C.prototype.push = P, C.prototype.has = E, j.prototype.clear = O, j.prototype.delete = R, j.prototype.get = I, j.prototype.has = A, j.prototype.set = H;
    var Jt = function(e, t) {
        return function(t, n) {
          if (null == t) return t;
          if (!ke(t)) return e(t, n);
          for (var r = t.length, o = -1, i = Object(t); ++o < r && !1 !== n(i[o], o, i););
          return t;
        };
      }(W),
      Kt = function(e) {
        return function(e, t, n) {
          for (var r = -1, o = Object(e), i = n(e), a = i.length; a--;) {
            var s = i[++r];
            if (!1 === t(o[s], s, o)) break;
          }
          return e;
        };
      }(),
      $t = U;
    (Ot && $t(new Ot(new ArrayBuffer(1))) != ot || Rt && $t(new Rt) != $e || It && "[object Promise]" != $t(It.resolve()) || At && $t(new At) != et || Ht && "[object WeakMap]" != $t(new Ht)) && ($t = function(e) {
      var t = Yt.call(e),
        n = t == Xe ? e.constructor : void 0,
        r = n ? ve(n) : void 0;
      if (r) switch (r) {
        case zt:
          return ot;
        case Wt:
          return $e;
        case Ft:
          return "[object Promise]";
        case Ut:
          return et;
        case Gt:
          return "[object WeakMap]";
      }
      return t;
    });
    var Qt = Me(function(e) {
      e = Ce(e);
      var t = [];
      return st.test(e) && t.push(""), e.replace(/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, function(e, n, r, o) {
        t.push(r ? o.replace(/\\(\\)?/g, "$1") : n || e);
      }), t;
    });
    Me.Cache = L;
    var Xt = Array.isArray,
      Zt = gt ? function(e) {
        return function(t) {
          return e(t);
        };
      }(gt) : K;
    n.exports = ge;
  }).call(t, n(55), n(72)(e));
}, function(e, t, n) {
  function r(e) {
    return n(o(e));
  }

  function o(e) {
    var t = i[e];
    if (!(t + 1)) throw new Error("Cannot find module '" + e + "'.");
    return t;
  }
  var i = {
    "./af": 156,
    "./af.js": 156,
    "./ar": 162,
    "./ar-dz": 157,
    "./ar-dz.js": 157,
    "./ar-ly": 158,
    "./ar-ly.js": 158,
    "./ar-ma": 159,
    "./ar-ma.js": 159,
    "./ar-sa": 160,
    "./ar-sa.js": 160,
    "./ar-tn": 161,
    "./ar-tn.js": 161,
    "./ar.js": 162,
    "./az": 163,
    "./az.js": 163,
    "./be": 164,
    "./be.js": 164,
    "./bg": 165,
    "./bg.js": 165,
    "./bn": 166,
    "./bn.js": 166,
    "./bo": 167,
    "./bo.js": 167,
    "./br": 168,
    "./br.js": 168,
    "./bs": 169,
    "./bs.js": 169,
    "./ca": 170,
    "./ca.js": 170,
    "./cs": 171,
    "./cs.js": 171,
    "./cv": 172,
    "./cv.js": 172,
    "./cy": 173,
    "./cy.js": 173,
    "./da": 174,
    "./da.js": 174,
    "./de": 176,
    "./de-at": 175,
    "./de-at.js": 175,
    "./de.js": 176,
    "./dv": 177,
    "./dv.js": 177,
    "./el": 178,
    "./el.js": 178,
    "./en-au": 179,
    "./en-au.js": 179,
    "./en-ca": 180,
    "./en-ca.js": 180,
    "./en-gb": 181,
    "./en-gb.js": 181,
    "./en-ie": 182,
    "./en-ie.js": 182,
    "./en-nz": 183,
    "./en-nz.js": 183,
    "./eo": 184,
    "./eo.js": 184,
    "./es": 186,
    "./es-do": 185,
    "./es-do.js": 185,
    "./es.js": 186,
    "./et": 187,
    "./et.js": 187,
    "./eu": 188,
    "./eu.js": 188,
    "./fa": 189,
    "./fa.js": 189,
    "./fi": 190,
    "./fi.js": 190,
    "./fo": 191,
    "./fo.js": 191,
    "./fr": 194,
    "./fr-ca": 192,
    "./fr-ca.js": 192,
    "./fr-ch": 193,
    "./fr-ch.js": 193,
    "./fr.js": 194,
    "./fy": 195,
    "./fy.js": 195,
    "./gd": 196,
    "./gd.js": 196,
    "./gl": 197,
    "./gl.js": 197,
    "./he": 198,
    "./he.js": 198,
    "./hi": 199,
    "./hi.js": 199,
    "./hr": 200,
    "./hr.js": 200,
    "./hu": 201,
    "./hu.js": 201,
    "./hy-am": 202,
    "./hy-am.js": 202,
    "./id": 203,
    "./id.js": 203,
    "./is": 204,
    "./is.js": 204,
    "./it": 205,
    "./it.js": 205,
    "./ja": 206,
    "./ja.js": 206,
    "./jv": 207,
    "./jv.js": 207,
    "./ka": 208,
    "./ka.js": 208,
    "./kk": 209,
    "./kk.js": 209,
    "./km": 210,
    "./km.js": 210,
    "./ko": 211,
    "./ko.js": 211,
    "./ky": 212,
    "./ky.js": 212,
    "./lb": 213,
    "./lb.js": 213,
    "./lo": 214,
    "./lo.js": 214,
    "./lt": 215,
    "./lt.js": 215,
    "./lv": 216,
    "./lv.js": 216,
    "./me": 217,
    "./me.js": 217,
    "./mi": 218,
    "./mi.js": 218,
    "./mk": 219,
    "./mk.js": 219,
    "./ml": 220,
    "./ml.js": 220,
    "./mr": 221,
    "./mr.js": 221,
    "./ms": 223,
    "./ms-my": 222,
    "./ms-my.js": 222,
    "./ms.js": 223,
    "./my": 224,
    "./my.js": 224,
    "./nb": 225,
    "./nb.js": 225,
    "./ne": 226,
    "./ne.js": 226,
    "./nl": 228,
    "./nl-be": 227,
    "./nl-be.js": 227,
    "./nl.js": 228,
    "./nn": 229,
    "./nn.js": 229,
    "./pa-in": 230,
    "./pa-in.js": 230,
    "./pl": 231,
    "./pl.js": 231,
    "./pt": 233,
    "./pt-br": 232,
    "./pt-br.js": 232,
    "./pt.js": 233,
    "./ro": 234,
    "./ro.js": 234,
    "./ru": 235,
    "./ru.js": 235,
    "./se": 236,
    "./se.js": 236,
    "./si": 237,
    "./si.js": 237,
    "./sk": 238,
    "./sk.js": 238,
    "./sl": 239,
    "./sl.js": 239,
    "./sq": 240,
    "./sq.js": 240,
    "./sr": 242,
    "./sr-cyrl": 241,
    "./sr-cyrl.js": 241,
    "./sr.js": 242,
    "./ss": 243,
    "./ss.js": 243,
    "./sv": 244,
    "./sv.js": 244,
    "./sw": 245,
    "./sw.js": 245,
    "./ta": 246,
    "./ta.js": 246,
    "./te": 247,
    "./te.js": 247,
    "./tet": 248,
    "./tet.js": 248,
    "./th": 249,
    "./th.js": 249,
    "./tl-ph": 250,
    "./tl-ph.js": 250,
    "./tlh": 251,
    "./tlh.js": 251,
    "./tr": 252,
    "./tr.js": 252,
    "./tzl": 253,
    "./tzl.js": 253,
    "./tzm": 255,
    "./tzm-latn": 254,
    "./tzm-latn.js": 254,
    "./tzm.js": 255,
    "./uk": 256,
    "./uk.js": 256,
    "./uz": 257,
    "./uz.js": 257,
    "./vi": 258,
    "./vi.js": 258,
    "./x-pseudo": 259,
    "./x-pseudo.js": 259,
    "./yo": 260,
    "./yo.js": 260,
    "./zh-cn": 261,
    "./zh-cn.js": 261,
    "./zh-hk": 262,
    "./zh-hk.js": 262,
    "./zh-tw": 263,
    "./zh-tw.js": 263
  };
  r.keys = function() {
    return Object.keys(i);
  }, r.resolve = o, e.exports = r, r.id = 457;
}, function(e, t, n) {
  var r;
  ! function(o, i, a) {
    function s(e, t, n) {
      if (e.addEventListener) return void e.addEventListener(t, n, !1);
      e.attachEvent("on" + t, n);
    }

    function u(e) {
      if ("keypress" == e.type) {
        var t = String.fromCharCode(e.which);
        return e.shiftKey || (t = t.toLowerCase()), t;
      }
      return b[e.which] ? b[e.which] : w[e.which] ? w[e.which] : String.fromCharCode(e.which).toLowerCase();
    }

    function l(e, t) {
      return e.sort().join(",") === t.sort().join(",");
    }

    function c(e) {
      var t = [];
      return e.shiftKey && t.push("shift"), e.altKey && t.push("alt"), e.ctrlKey && t.push("ctrl"), e.metaKey && t.push("meta"), t;
    }

    function d(e) {
      if (e.preventDefault) return void e.preventDefault();
      e.returnValue = !1;
    }

    function f(e) {
      if (e.stopPropagation) return void e.stopPropagation();
      e.cancelBubble = !0;
    }

    function h(e) {
      return "shift" == e || "ctrl" == e || "alt" == e || "meta" == e;
    }

    function p() {
      if (!M) {
        M = {};
        for (var e in b) e > 95 && e < 112 || b.hasOwnProperty(e) && (M[b[e]] = e);
      }
      return M;
    }

    function _(e, t, n) {
      return n || (n = p()[e] ? "keydown" : "keypress"), "keypress" == n && t.length && (n = "keydown"), n;
    }

    function m(e) {
      return "+" === e ? ["+"] : (e = e.replace(/\+{2}/g, "+plus"), e.split("+"));
    }

    function y(e, t) {
      var n, r, o, i = [];
      for (n = m(e), o = 0; o < n.length; ++o) r = n[o], L[r] && (r = L[r]), t && "keypress" != t && k[r] && (r = k[r], i.push("shift")), h(r) && i.push(r);
      return t = _(r, i, t), {
        key: r,
        modifiers: i,
        action: t
      };
    }

    function v(e, t) {
      return null !== e && e !== i && (e === t || v(e.parentNode, t));
    }

    function g(e) {
      function t(e) {
        e = e || {};
        var t, n = !1;
        for (t in M) e[t] ? n = !0 : M[t] = 0;
        n || (k = !1);
      }

      function n(e, t, n, r, o, i) {
        var a, s, u = [],
          c = n.type;
        if (!m._callbacks[e]) return [];
        for ("keyup" == c && h(e) && (t = [e]), a = 0; a < m._callbacks[e].length; ++a)
          if (s = m._callbacks[e][a], (r || !s.seq || M[s.seq] == s.level) && c == s.action && ("keypress" == c && !n.metaKey && !n.ctrlKey || l(t, s.modifiers))) {
            var d = !r && s.combo == o,
              f = r && s.seq == r && s.level == i;
            (d || f) && m._callbacks[e].splice(a, 1), u.push(s);
          }
        return u;
      }

      function r(e, t, n, r) {
        m.stopCallback(t, t.target || t.srcElement, n, r) || !1 === e(t, n) && (d(t), f(t));
      }

      function o(e) {
        "number" != typeof e.which && (e.which = e.keyCode);
        var t = u(e);
        if (t) return "keyup" == e.type && b === t ? void(b = !1) : void m.handleKey(t, c(e), e);
      }

      function a() {
        clearTimeout(v), v = setTimeout(t, 1e3);
      }

      function p(e, n, o, i) {
        function s(n) {
          r(o, n, e), "keyup" !== i && (b = u(n)), setTimeout(t, 10);
        }
        M[e] = 0;
        for (var l = 0; l < n.length; ++l) {
          var c = l + 1 === n.length,
            d = c ? s : function(t) {
              return function() {
                k = t, ++M[e], a();
              };
            }(i || y(n[l + 1]).action);
          _(n[l], d, i, e, l);
        }
      }

      function _(e, t, r, o, i) {
        m._directMap[e + ":" + r] = t, e = e.replace(/\s+/g, " ");
        var a, s = e.split(" ");
        if (s.length > 1) return void p(e, s, t, r);
        a = y(e, r), m._callbacks[a.key] = m._callbacks[a.key] || [], n(a.key, a.modifiers, {
          type: a.action
        }, o, e, i), m._callbacks[a.key][o ? "unshift" : "push"]({
          callback: t,
          modifiers: a.modifiers,
          action: a.action,
          seq: o,
          level: i,
          combo: e
        });
      }
      var m = this;
      if (e = e || i, !(m instanceof g)) return new g(e);
      m.target = e, m._callbacks = {}, m._directMap = {};
      var v, M = {},
        b = !1,
        w = !1,
        k = !1;
      m._handleKey = function(e, o, i) {
        var a, s = n(e, o, i),
          u = {},
          l = 0,
          c = !1;
        for (a = 0; a < s.length; ++a) s[a].seq && (l = Math.max(l, s[a].level));
        for (a = 0; a < s.length; ++a)
          if (s[a].seq) {
            if (s[a].level != l) continue;
            c = !0, u[s[a].seq] = 1, r(s[a].callback, i, s[a].combo, s[a].seq);
          } else c || r(s[a].callback, i, s[a].combo);
        var d = "keypress" == i.type && w;
        i.type != k || h(e) || d || t(u), w = c && "keydown" == i.type;
      }, m._bindMultiple = function(e, t, n) {
        for (var r = 0; r < e.length; ++r) _(e[r], t, n);
      }, s(e, "keypress", o), s(e, "keydown", o), s(e, "keyup", o);
    }
    if (o) {
      for (var M, b = {
          8: "backspace",
          9: "tab",
          13: "enter",
          16: "shift",
          17: "ctrl",
          18: "alt",
          20: "capslock",
          27: "esc",
          32: "space",
          33: "pageup",
          34: "pagedown",
          35: "end",
          36: "home",
          37: "left",
          38: "up",
          39: "right",
          40: "down",
          45: "ins",
          46: "del",
          91: "meta",
          93: "meta",
          224: "meta"
        }, w = {
          106: "*",
          107: "+",
          109: "-",
          110: ".",
          111: "/",
          186: ";",
          187: "=",
          188: ",",
          189: "-",
          190: ".",
          191: "/",
          192: "`",
          219: "[",
          220: "\\",
          221: "]",
          222: "'"
        }, k = {
          "~": "`",
          "!": "1",
          "@": "2",
          "#": "3",
          $: "4",
          "%": "5",
          "^": "6",
          "&": "7",
          "*": "8",
          "(": "9",
          ")": "0",
          _: "-",
          "+": "=",
          ":": ";",
          '"': "'",
          "<": ",",
          ">": ".",
          "?": "/",
          "|": "\\"
        }, L = {
          option: "alt",
          command: "meta",
          "return": "enter",
          escape: "esc",
          plus: "+",
          mod: /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? "meta" : "ctrl"
        }, T = 1; T < 20; ++T) b[111 + T] = "f" + T;
      for (T = 0; T <= 9; ++T) b[T + 96] = T;
      g.prototype.bind = function(e, t, n) {
        var r = this;
        return e = e instanceof Array ? e : [e], r._bindMultiple.call(r, e, t, n), r;
      }, g.prototype.unbind = function(e, t) {
        var n = this;
        return n.bind.call(n, e, function() {}, t);
      }, g.prototype.trigger = function(e, t) {
        var n = this;
        return n._directMap[e + ":" + t] && n._directMap[e + ":" + t]({}, e), n;
      }, g.prototype.reset = function() {
        var e = this;
        return e._callbacks = {}, e._directMap = {}, e;
      }, g.prototype.stopCallback = function(e, t) {
        var n = this;
        return !((" " + t.className + " ").indexOf(" mousetrap ") > -1) && !v(t, n.target) && ("INPUT" == t.tagName || "SELECT" == t.tagName || "TEXTAREA" == t.tagName || t.isContentEditable);
      }, g.prototype.handleKey = function() {
        var e = this;
        return e._handleKey.apply(e, arguments);
      }, g.addKeycodes = function(e) {
        for (var t in e) e.hasOwnProperty(t) && (b[t] = e[t]);
        M = null;
      }, g.init = function() {
        var e = g(i);
        for (var t in e) "_" !== t.charAt(0) && (g[t] = function(t) {
          return function() {
            return e[t].apply(e, arguments);
          };
        }(t));
      }, g.init(), o.Mousetrap = g, void 0 !== e && e.exports && (e.exports = g), void 0 !== (r = function() {
        return g;
      }.call(t, n, t, e)) && (e.exports = r);
    }
  }("undefined" != typeof window ? window : null, "undefined" != typeof window ? document : null);
}, function(e, t, n) {
  "use strict";
  var r = {
    Properties: {
      "aria-current": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      "aria-hidden": 0,
      "aria-invalid": 0,
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0
    },
    DOMAttributeNames: {},
    DOMPropertyNames: {}
  };
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(10),
    o = n(152),
    i = {
      focusDOMComponent: function() {
        o(r.getNodeFromInstance(this));
      }
    };
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return (e.ctrlKey || e.altKey || e.metaKey) && !(e.ctrlKey && e.altKey);
  }

  function o(e) {
    switch (e) {
      case "topCompositionStart":
        return T.compositionStart;
      case "topCompositionEnd":
        return T.compositionEnd;
      case "topCompositionUpdate":
        return T.compositionUpdate;
    }
  }

  function i(e, t) {
    return "topKeyDown" === e && t.keyCode === v;
  }

  function a(e, t) {
    switch (e) {
      case "topKeyUp":
        return -1 !== y.indexOf(t.keyCode);
      case "topKeyDown":
        return t.keyCode !== v;
      case "topKeyPress":
      case "topMouseDown":
      case "topBlur":
        return !0;
      default:
        return !1;
    }
  }

  function s(e) {
    var t = e.detail;
    return "object" == typeof t && "data" in t ? t.data : null;
  }

  function u(e, t, n, r) {
    var u, l;
    if (g ? u = o(e) : Y ? a(e, n) && (u = T.compositionEnd) : i(e, n) && (u = T.compositionStart), !u) return null;
    w && (Y || u !== T.compositionStart ? u === T.compositionEnd && Y && (l = Y.getData()) : Y = p.getPooled(r));
    var c = _.getPooled(u, t, n, r);
    if (l) c.data = l;
    else {
      var d = s(n);
      null !== d && (c.data = d);
    }
    return f.accumulateTwoPhaseDispatches(c), c;
  }

  function l(e, t) {
    switch (e) {
      case "topCompositionEnd":
        return s(t);
      case "topKeyPress":
        return t.which !== k ? null : (S = !0, L);
      case "topTextInput":
        var n = t.data;
        return n === L && S ? null : n;
      default:
        return null;
    }
  }

  function c(e, t) {
    if (Y) {
      if ("topCompositionEnd" === e || !g && a(e, t)) {
        var n = Y.getData();
        return p.release(Y), Y = null, n;
      }
      return null;
    }
    switch (e) {
      case "topPaste":
        return null;
      case "topKeyPress":
        return t.which && !r(t) ? String.fromCharCode(t.which) : null;
      case "topCompositionEnd":
        return w ? null : t.data;
      default:
        return null;
    }
  }

  function d(e, t, n, r) {
    var o;
    if (!(o = b ? l(e, n) : c(e, n))) return null;
    var i = m.getPooled(T.beforeInput, t, n, r);
    return i.data = o, f.accumulateTwoPhaseDispatches(i), i;
  }
  var f = n(52),
    h = n(15),
    p = n(467),
    _ = n(504),
    m = n(507),
    y = [9, 13, 27, 32],
    v = 229,
    g = h.canUseDOM && "CompositionEvent" in window,
    M = null;
  h.canUseDOM && "documentMode" in document && (M = document.documentMode);
  var b = h.canUseDOM && "TextEvent" in window && !M && ! function() {
      var e = window.opera;
      return "object" == typeof e && "function" == typeof e.version && parseInt(e.version(), 10) <= 12;
    }(),
    w = h.canUseDOM && (!g || M && M > 8 && M <= 11),
    k = 32,
    L = String.fromCharCode(k),
    T = {
      beforeInput: {
        phasedRegistrationNames: {
          bubbled: "onBeforeInput",
          captured: "onBeforeInputCapture"
        },
        dependencies: ["topCompositionEnd", "topKeyPress", "topTextInput", "topPaste"]
      },
      compositionEnd: {
        phasedRegistrationNames: {
          bubbled: "onCompositionEnd",
          captured: "onCompositionEndCapture"
        },
        dependencies: ["topBlur", "topCompositionEnd", "topKeyDown", "topKeyPress", "topKeyUp", "topMouseDown"]
      },
      compositionStart: {
        phasedRegistrationNames: {
          bubbled: "onCompositionStart",
          captured: "onCompositionStartCapture"
        },
        dependencies: ["topBlur", "topCompositionStart", "topKeyDown", "topKeyPress", "topKeyUp", "topMouseDown"]
      },
      compositionUpdate: {
        phasedRegistrationNames: {
          bubbled: "onCompositionUpdate",
          captured: "onCompositionUpdateCapture"
        },
        dependencies: ["topBlur", "topCompositionUpdate", "topKeyDown", "topKeyPress", "topKeyUp", "topMouseDown"]
      }
    },
    S = !1,
    Y = null,
    D = {
      eventTypes: T,
      extractEvents: function(e, t, n, r) {
        return [u(e, t, n, r), d(e, t, n, r)];
      }
    };
  e.exports = D;
}, function(e, t, n) {
  "use strict";
  var r = n(265),
    o = n(15),
    i = (n(18), n(431), n(513)),
    a = n(438),
    s = n(441),
    u = (n(3), s(function(e) {
      return a(e);
    })),
    l = !1,
    c = "cssFloat";
  if (o.canUseDOM) {
    var d = document.createElement("div").style;
    try {
      d.font = "";
    } catch (e) {
      l = !0;
    }
    void 0 === document.documentElement.style.cssFloat && (c = "styleFloat");
  }
  var f = {
    createMarkupForStyles: function(e, t) {
      var n = "";
      for (var r in e)
        if (e.hasOwnProperty(r)) {
          var o = e[r];
          null != o && (n += u(r) + ":", n += i(r, o, t) + ";");
        }
      return n || null;
    },
    setValueForStyles: function(e, t, n) {
      var o = e.style;
      for (var a in t)
        if (t.hasOwnProperty(a)) {
          var s = i(a, t[a], n);
          if ("float" !== a && "cssFloat" !== a || (a = c), s) o[a] = s;
          else {
            var u = l && r.shorthandPropertyExpansions[a];
            if (u)
              for (var d in u) o[d] = "";
            else o[a] = "";
          }
        }
    }
  };
  e.exports = f;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.nodeName && e.nodeName.toLowerCase();
    return "select" === t || "input" === t && "file" === e.type;
  }

  function o(e) {
    var t = k.getPooled(Y.change, x, e, L(e));
    g.accumulateTwoPhaseDispatches(t), w.batchedUpdates(i, t);
  }

  function i(e) {
    v.enqueueEvents(e), v.processEventQueue(!1);
  }

  function a(e, t) {
    D = e, x = t, D.attachEvent("onchange", o);
  }

  function s() {
    D && (D.detachEvent("onchange", o), D = null, x = null);
  }

  function u(e, t) {
    if ("topChange" === e) return t;
  }

  function l(e, t, n) {
    "topFocus" === e ? (s(), a(t, n)) : "topBlur" === e && s();
  }

  function c(e, t) {
    D = e, x = t, C = e.value, P = Object.getOwnPropertyDescriptor(e.constructor.prototype, "value"), Object.defineProperty(D, "value", O), D.attachEvent ? D.attachEvent("onpropertychange", f) : D.addEventListener("propertychange", f, !1);
  }

  function d() {
    D && (delete D.value, D.detachEvent ? D.detachEvent("onpropertychange", f) : D.removeEventListener("propertychange", f, !1), D = null, x = null, C = null, P = null);
  }

  function f(e) {
    if ("value" === e.propertyName) {
      var t = e.srcElement.value;
      t !== C && (C = t, o(e));
    }
  }

  function h(e, t) {
    if ("topInput" === e) return t;
  }

  function p(e, t, n) {
    "topFocus" === e ? (d(), c(t, n)) : "topBlur" === e && d();
  }

  function _(e, t) {
    if (("topSelectionChange" === e || "topKeyUp" === e || "topKeyDown" === e) && D && D.value !== C) return C = D.value, x;
  }

  function m(e) {
    return e.nodeName && "input" === e.nodeName.toLowerCase() && ("checkbox" === e.type || "radio" === e.type);
  }

  function y(e, t) {
    if ("topClick" === e) return t;
  }
  var v = n(51),
    g = n(52),
    M = n(15),
    b = n(10),
    w = n(21),
    k = n(23),
    L = n(111),
    T = n(112),
    S = n(282),
    Y = {
      change: {
        phasedRegistrationNames: {
          bubbled: "onChange",
          captured: "onChangeCapture"
        },
        dependencies: ["topBlur", "topChange", "topClick", "topFocus", "topInput", "topKeyDown", "topKeyUp", "topSelectionChange"]
      }
    },
    D = null,
    x = null,
    C = null,
    P = null,
    E = !1;
  M.canUseDOM && (E = T("change") && (!document.documentMode || document.documentMode > 8));
  var j = !1;
  M.canUseDOM && (j = T("input") && (!document.documentMode || document.documentMode > 11));
  var O = {
      get: function() {
        return P.get.call(this);
      },
      set: function(e) {
        C = "" + e, P.set.call(this, e);
      }
    },
    R = {
      eventTypes: Y,
      extractEvents: function(e, t, n, o) {
        var i, a, s = t ? b.getNodeFromInstance(t) : window;
        if (r(s) ? E ? i = u : a = l : S(s) ? j ? i = h : (i = _, a = p) : m(s) && (i = y), i) {
          var c = i(e, t);
          if (c) {
            var d = k.getPooled(Y.change, c, n, o);
            return d.type = "change", g.accumulateTwoPhaseDispatches(d), d;
          }
        }
        a && a(e, s, t);
      }
    };
  e.exports = R;
}, function(e, t, n) {
  "use strict";
  var r = n(4),
    o = n(40),
    i = n(15),
    a = n(434),
    s = n(17),
    u = (n(2), {
      dangerouslyReplaceNodeWithMarkup: function(e, t) {
        if (i.canUseDOM || r("56"), t || r("57"), "HTML" === e.nodeName && r("58"), "string" == typeof t) {
          var n = a(t, s)[0];
          e.parentNode.replaceChild(n, e);
        } else o.replaceChildWithTree(e, t);
      }
    });
  e.exports = u;
}, function(e, t, n) {
  "use strict";
  var r = ["ResponderEventPlugin", "SimpleEventPlugin", "TapEventPlugin", "EnterLeaveEventPlugin", "ChangeEventPlugin", "SelectEventPlugin", "BeforeInputEventPlugin"];
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(52),
    o = n(10),
    i = n(65),
    a = {
      mouseEnter: {
        registrationName: "onMouseEnter",
        dependencies: ["topMouseOut", "topMouseOver"]
      },
      mouseLeave: {
        registrationName: "onMouseLeave",
        dependencies: ["topMouseOut", "topMouseOver"]
      }
    },
    s = {
      eventTypes: a,
      extractEvents: function(e, t, n, s) {
        if ("topMouseOver" === e && (n.relatedTarget || n.fromElement)) return null;
        if ("topMouseOut" !== e && "topMouseOver" !== e) return null;
        var u;
        if (s.window === s) u = s;
        else {
          var l = s.ownerDocument;
          u = l ? l.defaultView || l.parentWindow : window;
        }
        var c, d;
        if ("topMouseOut" === e) {
          c = t;
          var f = n.relatedTarget || n.toElement;
          d = f ? o.getClosestInstanceFromNode(f) : null;
        } else c = null, d = t;
        if (c === d) return null;
        var h = null == c ? u : o.getNodeFromInstance(c),
          p = null == d ? u : o.getNodeFromInstance(d),
          _ = i.getPooled(a.mouseLeave, c, n, s);
        _.type = "mouseleave", _.target = h, _.relatedTarget = p;
        var m = i.getPooled(a.mouseEnter, d, n, s);
        return m.type = "mouseenter", m.target = p, m.relatedTarget = h, r.accumulateEnterLeaveDispatches(_, m, c, d), [_, m];
      }
    };
  e.exports = s;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    this._root = e, this._startText = this.getText(), this._fallbackText = null;
  }
  var o = n(6),
    i = n(35),
    a = n(280);
  o(r.prototype, {
    destructor: function() {
      this._root = null, this._startText = null, this._fallbackText = null;
    },
    getText: function() {
      return "value" in this._root ? this._root.value : this._root[a()];
    },
    getData: function() {
      if (this._fallbackText) return this._fallbackText;
      var e, t, n = this._startText,
        r = n.length,
        o = this.getText(),
        i = o.length;
      for (e = 0; e < r && n[e] === o[e]; e++);
      var a = r - e;
      for (t = 1; t <= a && n[r - t] === o[i - t]; t++);
      var s = t > 1 ? 1 - t : void 0;
      return this._fallbackText = o.slice(e, s), this._fallbackText;
    }
  }), i.addPoolingTo(r), e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(41),
    o = r.injection.MUST_USE_PROPERTY,
    i = r.injection.HAS_BOOLEAN_VALUE,
    a = r.injection.HAS_NUMERIC_VALUE,
    s = r.injection.HAS_POSITIVE_NUMERIC_VALUE,
    u = r.injection.HAS_OVERLOADED_BOOLEAN_VALUE,
    l = {
      isCustomAttribute: RegExp.prototype.test.bind(new RegExp("^(data|aria)-[" + r.ATTRIBUTE_NAME_CHAR + "]*$")),
      Properties: {
        accept: 0,
        acceptCharset: 0,
        accessKey: 0,
        action: 0,
        allowFullScreen: i,
        allowTransparency: 0,
        alt: 0,
        as: 0,
        async: i,
        autoComplete: 0,
        autoPlay: i,
        capture: i,
        cellPadding: 0,
        cellSpacing: 0,
        charSet: 0,
        challenge: 0,
        checked: o | i,
        cite: 0,
        classID: 0,
        className: 0,
        cols: s,
        colSpan: 0,
        content: 0,
        contentEditable: 0,
        contextMenu: 0,
        controls: i,
        coords: 0,
        crossOrigin: 0,
        data: 0,
        dateTime: 0,
        "default": i,
        defer: i,
        dir: 0,
        disabled: i,
        download: u,
        draggable: 0,
        encType: 0,
        form: 0,
        formAction: 0,
        formEncType: 0,
        formMethod: 0,
        formNoValidate: i,
        formTarget: 0,
        frameBorder: 0,
        headers: 0,
        height: 0,
        hidden: i,
        high: 0,
        href: 0,
        hrefLang: 0,
        htmlFor: 0,
        httpEquiv: 0,
        icon: 0,
        id: 0,
        inputMode: 0,
        integrity: 0,
        is: 0,
        keyParams: 0,
        keyType: 0,
        kind: 0,
        label: 0,
        lang: 0,
        list: 0,
        loop: i,
        low: 0,
        manifest: 0,
        marginHeight: 0,
        marginWidth: 0,
        max: 0,
        maxLength: 0,
        media: 0,
        mediaGroup: 0,
        method: 0,
        min: 0,
        minLength: 0,
        multiple: o | i,
        muted: o | i,
        name: 0,
        nonce: 0,
        noValidate: i,
        open: i,
        optimum: 0,
        pattern: 0,
        placeholder: 0,
        playsInline: i,
        poster: 0,
        preload: 0,
        profile: 0,
        radioGroup: 0,
        readOnly: i,
        referrerPolicy: 0,
        rel: 0,
        required: i,
        reversed: i,
        role: 0,
        rows: s,
        rowSpan: a,
        sandbox: 0,
        scope: 0,
        scoped: i,
        scrolling: 0,
        seamless: i,
        selected: o | i,
        shape: 0,
        size: s,
        sizes: 0,
        span: s,
        spellCheck: 0,
        src: 0,
        srcDoc: 0,
        srcLang: 0,
        srcSet: 0,
        start: a,
        step: 0,
        style: 0,
        summary: 0,
        tabIndex: 0,
        target: 0,
        title: 0,
        type: 0,
        useMap: 0,
        value: 0,
        width: 0,
        wmode: 0,
        wrap: 0,
        about: 0,
        datatype: 0,
        inlist: 0,
        prefix: 0,
        property: 0,
        resource: 0,
        "typeof": 0,
        vocab: 0,
        autoCapitalize: 0,
        autoCorrect: 0,
        autoSave: 0,
        color: 0,
        itemProp: 0,
        itemScope: i,
        itemType: 0,
        itemID: 0,
        itemRef: 0,
        results: 0,
        security: 0,
        unselectable: 0
      },
      DOMAttributeNames: {
        acceptCharset: "accept-charset",
        className: "class",
        htmlFor: "for",
        httpEquiv: "http-equiv"
      },
      DOMPropertyNames: {}
    };
  e.exports = l;
}, function(e, t, n) {
  "use strict";
  (function(t) {
    function r(e, t, n, r) {
      var o = void 0 === e[n];
      null != t && o && (e[n] = i(t, !0));
    }
    var o = n(42),
      i = n(281),
      a = (n(103), n(113)),
      s = n(284);
    n(3), void 0 !== t && n.i({
      NODE_ENV: "production"
    });
    var u = {
      instantiateChildren: function(e, t, n, o) {
        if (null == e) return null;
        var i = {};
        return s(e, r, i), i;
      },
      updateChildren: function(e, t, n, r, s, u, l, c, d) {
        if (t || e) {
          var f, h;
          for (f in t)
            if (t.hasOwnProperty(f)) {
              h = e && e[f];
              var p = h && h._currentElement,
                _ = t[f];
              if (null != h && a(p, _)) o.receiveComponent(h, _, s, c), t[f] = h;
              else {
                h && (r[f] = o.getHostNode(h), o.unmountComponent(h, !1));
                var m = i(_, !0);
                t[f] = m;
                var y = o.mountComponent(m, s, u, l, c, d);
                n.push(y);
              }
            }
          for (f in e) !e.hasOwnProperty(f) || t && t.hasOwnProperty(f) || (h = e[f], r[f] = o.getHostNode(h), o.unmountComponent(h, !1));
        }
      },
      unmountChildren: function(e, t) {
        for (var n in e)
          if (e.hasOwnProperty(n)) {
            var r = e[n];
            o.unmountComponent(r, t);
          }
      }
    };
    e.exports = u;
  }).call(t, n(264));
}, function(e, t, n) {
  "use strict";
  var r = n(99),
    o = n(477),
    i = {
      processChildrenUpdates: o.dangerouslyProcessChildrenUpdates,
      replaceNodeWithMarkup: r.dangerouslyReplaceNodeWithMarkup
    };
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {}

  function o(e) {
    return !(!e.prototype || !e.prototype.isReactComponent);
  }

  function i(e) {
    return !(!e.prototype || !e.prototype.isPureReactComponent);
  }
  var a = n(4),
    s = n(6),
    u = n(43),
    l = n(105),
    c = n(24),
    d = n(106),
    f = n(53),
    h = (n(18), n(275)),
    p = n(42),
    _ = n(49),
    m = (n(2), n(96)),
    y = n(113),
    v = (n(3), {
      ImpureClass: 0,
      PureClass: 1,
      StatelessFunctional: 2
    });
  r.prototype.render = function() {
    return (0, f.get(this)._currentElement.type)(this.props, this.context, this.updater);
  };
  var g = 1,
    M = {
      construct: function(e) {
        this._currentElement = e, this._rootNodeID = 0, this._compositeType = null, this._instance = null, this._hostParent = null, this._hostContainerInfo = null, this._updateBatchNumber = null, this._pendingElement = null, this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._renderedNodeType = null, this._renderedComponent = null, this._context = null, this._mountOrder = 0, this._topLevelWrapper = null, this._pendingCallbacks = null, this._calledComponentWillUnmount = !1;
      },
      mountComponent: function(e, t, n, s) {
        this._context = s, this._mountOrder = g++, this._hostParent = t, this._hostContainerInfo = n;
        var l, c = this._currentElement.props,
          d = this._processContext(s),
          h = this._currentElement.type,
          p = e.getUpdateQueue(),
          m = o(h),
          y = this._constructComponent(m, c, d, p);
        m || null != y && null != y.render ? i(h) ? this._compositeType = v.PureClass : this._compositeType = v.ImpureClass : (l = y, null === y || !1 === y || u.isValidElement(y) || a("105", h.displayName || h.name || "Component"), y = new r(h), this._compositeType = v.StatelessFunctional), y.props = c, y.context = d, y.refs = _, y.updater = p, this._instance = y, f.set(y, this);
        var M = y.state;
        void 0 === M && (y.state = M = null), ("object" != typeof M || Array.isArray(M)) && a("106", this.getName() || "ReactCompositeComponent"), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1;
        var b;
        return b = y.unstable_handleError ? this.performInitialMountWithErrorHandling(l, t, n, e, s) : this.performInitialMount(l, t, n, e, s), y.componentDidMount && e.getReactMountReady().enqueue(y.componentDidMount, y), b;
      },
      _constructComponent: function(e, t, n, r) {
        return this._constructComponentWithoutOwner(e, t, n, r);
      },
      _constructComponentWithoutOwner: function(e, t, n, r) {
        var o = this._currentElement.type;
        return e ? new o(t, n, r) : o(t, n, r);
      },
      performInitialMountWithErrorHandling: function(e, t, n, r, o) {
        var i, a = r.checkpoint();
        try {
          i = this.performInitialMount(e, t, n, r, o);
        } catch (s) {
          r.rollback(a), this._instance.unstable_handleError(s), this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)), a = r.checkpoint(), this._renderedComponent.unmountComponent(!0), r.rollback(a), i = this.performInitialMount(e, t, n, r, o);
        }
        return i;
      },
      performInitialMount: function(e, t, n, r, o) {
        var i = this._instance;
        i.componentWillMount && (i.componentWillMount(), this._pendingStateQueue && (i.state = this._processPendingState(i.props, i.context))), void 0 === e && (e = this._renderValidatedComponent());
        var a = h.getType(e);
        this._renderedNodeType = a;
        var s = this._instantiateReactComponent(e, a !== h.EMPTY);
        return this._renderedComponent = s, p.mountComponent(s, r, t, n, this._processChildContext(o), 0);
      },
      getHostNode: function() {
        return p.getHostNode(this._renderedComponent);
      },
      unmountComponent: function(e) {
        if (this._renderedComponent) {
          var t = this._instance;
          if (t.componentWillUnmount && !t._calledComponentWillUnmount)
            if (t._calledComponentWillUnmount = !0, e) {
              var n = this.getName() + ".componentWillUnmount()";
              d.invokeGuardedCallback(n, t.componentWillUnmount.bind(t));
            } else t.componentWillUnmount();
          this._renderedComponent && (p.unmountComponent(this._renderedComponent, e), this._renderedNodeType = null, this._renderedComponent = null, this._instance = null), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._pendingCallbacks = null, this._pendingElement = null, this._context = null, this._rootNodeID = 0, this._topLevelWrapper = null, f.remove(t);
        }
      },
      _maskContext: function(e) {
        var t = this._currentElement.type,
          n = t.contextTypes;
        if (!n) return _;
        var r = {};
        for (var o in n) r[o] = e[o];
        return r;
      },
      _processContext: function(e) {
        return this._maskContext(e);
      },
      _processChildContext: function(e) {
        var t, n = this._currentElement.type,
          r = this._instance;
        if (r.getChildContext && (t = r.getChildContext()), t) {
          "object" != typeof n.childContextTypes && a("107", this.getName() || "ReactCompositeComponent");
          for (var o in t) o in n.childContextTypes || a("108", this.getName() || "ReactCompositeComponent", o);
          return s({}, e, t);
        }
        return e;
      },
      _checkContextTypes: function(e, t, n) {},
      receiveComponent: function(e, t, n) {
        var r = this._currentElement,
          o = this._context;
        this._pendingElement = null, this.updateComponent(t, r, e, o, n);
      },
      performUpdateIfNecessary: function(e) {
        null != this._pendingElement ? p.receiveComponent(this, this._pendingElement, e, this._context) : null !== this._pendingStateQueue || this._pendingForceUpdate ? this.updateComponent(e, this._currentElement, this._currentElement, this._context, this._context) : this._updateBatchNumber = null;
      },
      updateComponent: function(e, t, n, r, o) {
        var i = this._instance;
        null == i && a("136", this.getName() || "ReactCompositeComponent");
        var s, u = !1;
        this._context === o ? s = i.context : (s = this._processContext(o), u = !0);
        var l = t.props,
          c = n.props;
        t !== n && (u = !0), u && i.componentWillReceiveProps && i.componentWillReceiveProps(c, s);
        var d = this._processPendingState(c, s),
          f = !0;
        this._pendingForceUpdate || (i.shouldComponentUpdate ? f = i.shouldComponentUpdate(c, d, s) : this._compositeType === v.PureClass && (f = !m(l, c) || !m(i.state, d))), this._updateBatchNumber = null, f ? (this._pendingForceUpdate = !1, this._performComponentUpdate(n, c, d, s, e, o)) : (this._currentElement = n, this._context = o, i.props = c, i.state = d, i.context = s);
      },
      _processPendingState: function(e, t) {
        var n = this._instance,
          r = this._pendingStateQueue,
          o = this._pendingReplaceState;
        if (this._pendingReplaceState = !1, this._pendingStateQueue = null, !r) return n.state;
        if (o && 1 === r.length) return r[0];
        for (var i = s({}, o ? r[0] : n.state), a = o ? 1 : 0; a < r.length; a++) {
          var u = r[a];
          s(i, "function" == typeof u ? u.call(n, i, e, t) : u);
        }
        return i;
      },
      _performComponentUpdate: function(e, t, n, r, o, i) {
        var a, s, u, l = this._instance,
          c = Boolean(l.componentDidUpdate);
        c && (a = l.props, s = l.state, u = l.context), l.componentWillUpdate && l.componentWillUpdate(t, n, r), this._currentElement = e, this._context = i, l.props = t, l.state = n, l.context = r, this._updateRenderedComponent(o, i), c && o.getReactMountReady().enqueue(l.componentDidUpdate.bind(l, a, s, u), l);
      },
      _updateRenderedComponent: function(e, t) {
        var n = this._renderedComponent,
          r = n._currentElement,
          o = this._renderValidatedComponent();
        if (y(r, o)) p.receiveComponent(n, o, e, this._processChildContext(t));
        else {
          var i = p.getHostNode(n);
          p.unmountComponent(n, !1);
          var a = h.getType(o);
          this._renderedNodeType = a;
          var s = this._instantiateReactComponent(o, a !== h.EMPTY);
          this._renderedComponent = s;
          var u = p.mountComponent(s, e, this._hostParent, this._hostContainerInfo, this._processChildContext(t), 0);
          this._replaceNodeWithMarkup(i, u, n);
        }
      },
      _replaceNodeWithMarkup: function(e, t, n) {
        l.replaceNodeWithMarkup(e, t, n);
      },
      _renderValidatedComponentWithoutOwnerOrContext: function() {
        return this._instance.render();
      },
      _renderValidatedComponent: function() {
        var e;
        if (this._compositeType !== v.StatelessFunctional) {
          c.current = this;
          try {
            e = this._renderValidatedComponentWithoutOwnerOrContext();
          } finally {
            c.current = null;
          }
        } else e = this._renderValidatedComponentWithoutOwnerOrContext();
        return null === e || !1 === e || u.isValidElement(e) || a("109", this.getName() || "ReactCompositeComponent"), e;
      },
      attachRef: function(e, t) {
        var n = this.getPublicInstance();
        null == n && a("110");
        var r = t.getPublicInstance();
        (n.refs === _ ? n.refs = {} : n.refs)[e] = r;
      },
      detachRef: function(e) {
        delete this.getPublicInstance().refs[e];
      },
      getName: function() {
        var e = this._currentElement.type,
          t = this._instance && this._instance.constructor;
        return e.displayName || t && t.displayName || e.name || t && t.name || null;
      },
      getPublicInstance: function() {
        var e = this._instance;
        return this._compositeType === v.StatelessFunctional ? null : e;
      },
      _instantiateReactComponent: null
    };
  e.exports = M;
}, function(e, t, n) {
  "use strict";
  var r = n(10),
    o = n(485),
    i = n(274),
    a = n(42),
    s = n(21),
    u = n(498),
    l = n(514),
    c = n(279),
    d = n(522);
  n(3), o.inject();
  var f = {
    findDOMNode: l,
    render: i.render,
    unmountComponentAtNode: i.unmountComponentAtNode,
    version: u,
    unstable_batchedUpdates: s.batchedUpdates,
    unstable_renderSubtreeIntoContainer: d
  };
  "undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject && __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: r.getClosestInstanceFromNode,
      getNodeFromInstance: function(e) {
        return e._renderedComponent && (e = c(e)), e ? r.getNodeFromInstance(e) : null;
      }
    },
    Mount: i,
    Reconciler: a
  }), e.exports = f;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if (e) {
      var t = e._currentElement._owner || null;
      if (t) {
        var n = t.getName();
        if (n) return " This DOM node was rendered by `" + n + "`.";
      }
    }
    return "";
  }

  function o(e, t) {
    t && (q[e._tag] && (null != t.children || null != t.dangerouslySetInnerHTML) && _("137", e._tag, e._currentElement._owner ? " Check the render method of " + e._currentElement._owner.getName() + "." : ""), null != t.dangerouslySetInnerHTML && (null != t.children && _("60"), "object" == typeof t.dangerouslySetInnerHTML && W in t.dangerouslySetInnerHTML || _("61")), null != t.style && "object" != typeof t.style && _("62", r(e)));
  }

  function i(e, t, n, r) {
    if (!(r instanceof j)) {
      var o = e._hostContainerInfo,
        i = o._node && o._node.nodeType === U,
        s = i ? o._node : o._ownerDocument;
      H(t, s), r.getReactMountReady().enqueue(a, {
        inst: e,
        registrationName: t,
        listener: n
      });
    }
  }

  function a() {
    var e = this;
    k.putListener(e.inst, e.registrationName, e.listener);
  }

  function s() {
    var e = this;
    D.postMountWrapper(e);
  }

  function u() {
    var e = this;
    P.postMountWrapper(e);
  }

  function l() {
    var e = this;
    x.postMountWrapper(e);
  }

  function c() {
    var e = this;
    e._rootNodeID || _("63");
    var t = A(e);
    switch (t || _("64"), e._tag) {
      case "iframe":
      case "object":
        e._wrapperState.listeners = [T.trapBubbledEvent("topLoad", "load", t)];
        break;
      case "video":
      case "audio":
        e._wrapperState.listeners = [];
        for (var n in G) G.hasOwnProperty(n) && e._wrapperState.listeners.push(T.trapBubbledEvent(n, G[n], t));
        break;
      case "source":
        e._wrapperState.listeners = [T.trapBubbledEvent("topError", "error", t)];
        break;
      case "img":
        e._wrapperState.listeners = [T.trapBubbledEvent("topError", "error", t), T.trapBubbledEvent("topLoad", "load", t)];
        break;
      case "form":
        e._wrapperState.listeners = [T.trapBubbledEvent("topReset", "reset", t), T.trapBubbledEvent("topSubmit", "submit", t)];
        break;
      case "input":
      case "select":
      case "textarea":
        e._wrapperState.listeners = [T.trapBubbledEvent("topInvalid", "invalid", t)];
    }
  }

  function d() {
    C.postUpdateWrapper(this);
  }

  function f(e) {
    $.call(K, e) || (J.test(e) || _("65", e), K[e] = !0);
  }

  function h(e, t) {
    return e.indexOf("-") >= 0 || null != t.is;
  }

  function p(e) {
    var t = e.type;
    f(t), this._currentElement = e, this._tag = t.toLowerCase(), this._namespaceURI = null, this._renderedChildren = null, this._previousStyle = null, this._previousStyleCopy = null, this._hostNode = null, this._hostParent = null, this._rootNodeID = 0, this._domID = 0, this._hostContainerInfo = null, this._wrapperState = null, this._topLevelWrapper = null, this._flags = 0;
  }
  var _ = n(4),
    m = n(6),
    y = n(460),
    v = n(462),
    g = n(40),
    M = n(100),
    b = n(41),
    w = n(267),
    k = n(51),
    L = n(101),
    T = n(64),
    S = n(268),
    Y = n(10),
    D = n(478),
    x = n(479),
    C = n(269),
    P = n(482),
    E = (n(18), n(491)),
    j = n(496),
    O = (n(17), n(67)),
    R = (n(2), n(112), n(96), n(114), n(3), S),
    I = k.deleteListener,
    A = Y.getNodeFromInstance,
    H = T.listenTo,
    N = L.registrationNameModules,
    z = {
      string: !0,
      number: !0
    },
    W = "__html",
    F = {
      children: null,
      dangerouslySetInnerHTML: null,
      suppressContentEditableWarning: null
    },
    U = 11,
    G = {
      topAbort: "abort",
      topCanPlay: "canplay",
      topCanPlayThrough: "canplaythrough",
      topDurationChange: "durationchange",
      topEmptied: "emptied",
      topEncrypted: "encrypted",
      topEnded: "ended",
      topError: "error",
      topLoadedData: "loadeddata",
      topLoadedMetadata: "loadedmetadata",
      topLoadStart: "loadstart",
      topPause: "pause",
      topPlay: "play",
      topPlaying: "playing",
      topProgress: "progress",
      topRateChange: "ratechange",
      topSeeked: "seeked",
      topSeeking: "seeking",
      topStalled: "stalled",
      topSuspend: "suspend",
      topTimeUpdate: "timeupdate",
      topVolumeChange: "volumechange",
      topWaiting: "waiting"
    },
    B = {
      area: !0,
      base: !0,
      br: !0,
      col: !0,
      embed: !0,
      hr: !0,
      img: !0,
      input: !0,
      keygen: !0,
      link: !0,
      meta: !0,
      param: !0,
      source: !0,
      track: !0,
      wbr: !0
    },
    V = {
      listing: !0,
      pre: !0,
      textarea: !0
    },
    q = m({
      menuitem: !0
    }, B),
    J = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,
    K = {},
    $ = {}.hasOwnProperty,
    Q = 1;
  p.displayName = "ReactDOMComponent", p.Mixin = {
    mountComponent: function(e, t, n, r) {
      this._rootNodeID = Q++, this._domID = n._idCounter++, this._hostParent = t, this._hostContainerInfo = n;
      var i = this._currentElement.props;
      switch (this._tag) {
        case "audio":
        case "form":
        case "iframe":
        case "img":
        case "link":
        case "object":
        case "source":
        case "video":
          this._wrapperState = {
            listeners: null
          }, e.getReactMountReady().enqueue(c, this);
          break;
        case "input":
          D.mountWrapper(this, i, t), i = D.getHostProps(this, i), e.getReactMountReady().enqueue(c, this);
          break;
        case "option":
          x.mountWrapper(this, i, t), i = x.getHostProps(this, i);
          break;
        case "select":
          C.mountWrapper(this, i, t), i = C.getHostProps(this, i), e.getReactMountReady().enqueue(c, this);
          break;
        case "textarea":
          P.mountWrapper(this, i, t), i = P.getHostProps(this, i), e.getReactMountReady().enqueue(c, this);
      }
      o(this, i);
      var a, d;
      null != t ? (a = t._namespaceURI, d = t._tag) : n._tag && (a = n._namespaceURI, d = n._tag), (null == a || a === M.svg && "foreignobject" === d) && (a = M.html), a === M.html && ("svg" === this._tag ? a = M.svg : "math" === this._tag && (a = M.mathml)), this._namespaceURI = a;
      var f;
      if (e.useCreateElement) {
        var h, p = n._ownerDocument;
        if (a === M.html)
          if ("script" === this._tag) {
            var _ = p.createElement("div"),
              m = this._currentElement.type;
            _.innerHTML = "<" + m + "></" + m + ">", h = _.removeChild(_.firstChild);
          } else h = i.is ? p.createElement(this._currentElement.type, i.is) : p.createElement(this._currentElement.type);
        else h = p.createElementNS(a, this._currentElement.type);
        Y.precacheNode(this, h), this._flags |= R.hasCachedChildNodes, this._hostParent || w.setAttributeForRoot(h), this._updateDOMProperties(null, i, e);
        var v = g(h);
        this._createInitialChildren(e, i, r, v), f = v;
      } else {
        var b = this._createOpenTagMarkupAndPutListeners(e, i),
          k = this._createContentMarkup(e, i, r);
        f = !k && B[this._tag] ? b + "/>" : b + ">" + k + "</" + this._currentElement.type + ">";
      }
      switch (this._tag) {
        case "input":
          e.getReactMountReady().enqueue(s, this), i.autoFocus && e.getReactMountReady().enqueue(y.focusDOMComponent, this);
          break;
        case "textarea":
          e.getReactMountReady().enqueue(u, this), i.autoFocus && e.getReactMountReady().enqueue(y.focusDOMComponent, this);
          break;
        case "select":
        case "button":
          i.autoFocus && e.getReactMountReady().enqueue(y.focusDOMComponent, this);
          break;
        case "option":
          e.getReactMountReady().enqueue(l, this);
      }
      return f;
    },
    _createOpenTagMarkupAndPutListeners: function(e, t) {
      var n = "<" + this._currentElement.type;
      for (var r in t)
        if (t.hasOwnProperty(r)) {
          var o = t[r];
          if (null != o)
            if (N.hasOwnProperty(r)) o && i(this, r, o, e);
            else {
              "style" === r && (o && (o = this._previousStyleCopy = m({}, t.style)), o = v.createMarkupForStyles(o, this));
              var a = null;
              null != this._tag && h(this._tag, t) ? F.hasOwnProperty(r) || (a = w.createMarkupForCustomAttribute(r, o)) : a = w.createMarkupForProperty(r, o), a && (n += " " + a);
            }
        }
      return e.renderToStaticMarkup ? n : (this._hostParent || (n += " " + w.createMarkupForRoot()), n += " " + w.createMarkupForID(this._domID));
    },
    _createContentMarkup: function(e, t, n) {
      var r = "",
        o = t.dangerouslySetInnerHTML;
      if (null != o) null != o.__html && (r = o.__html);
      else {
        var i = z[typeof t.children] ? t.children : null,
          a = null != i ? null : t.children;
        if (null != i) r = O(i);
        else if (null != a) {
          var s = this.mountChildren(a, e, n);
          r = s.join("");
        }
      }
      return V[this._tag] && "\n" === r.charAt(0) ? "\n" + r : r;
    },
    _createInitialChildren: function(e, t, n, r) {
      var o = t.dangerouslySetInnerHTML;
      if (null != o) null != o.__html && g.queueHTML(r, o.__html);
      else {
        var i = z[typeof t.children] ? t.children : null,
          a = null != i ? null : t.children;
        if (null != i) "" !== i && g.queueText(r, i);
        else if (null != a)
          for (var s = this.mountChildren(a, e, n), u = 0; u < s.length; u++) g.queueChild(r, s[u]);
      }
    },
    receiveComponent: function(e, t, n) {
      var r = this._currentElement;
      this._currentElement = e, this.updateComponent(t, r, e, n);
    },
    updateComponent: function(e, t, n, r) {
      var i = t.props,
        a = this._currentElement.props;
      switch (this._tag) {
        case "input":
          i = D.getHostProps(this, i), a = D.getHostProps(this, a);
          break;
        case "option":
          i = x.getHostProps(this, i), a = x.getHostProps(this, a);
          break;
        case "select":
          i = C.getHostProps(this, i), a = C.getHostProps(this, a);
          break;
        case "textarea":
          i = P.getHostProps(this, i), a = P.getHostProps(this, a);
      }
      switch (o(this, a), this._updateDOMProperties(i, a, e), this._updateDOMChildren(i, a, e, r), this._tag) {
        case "input":
          D.updateWrapper(this);
          break;
        case "textarea":
          P.updateWrapper(this);
          break;
        case "select":
          e.getReactMountReady().enqueue(d, this);
      }
    },
    _updateDOMProperties: function(e, t, n) {
      var r, o, a;
      for (r in e)
        if (!t.hasOwnProperty(r) && e.hasOwnProperty(r) && null != e[r])
          if ("style" === r) {
            var s = this._previousStyleCopy;
            for (o in s) s.hasOwnProperty(o) && (a = a || {}, a[o] = "");
            this._previousStyleCopy = null;
          } else N.hasOwnProperty(r) ? e[r] && I(this, r) : h(this._tag, e) ? F.hasOwnProperty(r) || w.deleteValueForAttribute(A(this), r) : (b.properties[r] || b.isCustomAttribute(r)) && w.deleteValueForProperty(A(this), r);
      for (r in t) {
        var u = t[r],
          l = "style" === r ? this._previousStyleCopy : null != e ? e[r] : void 0;
        if (t.hasOwnProperty(r) && u !== l && (null != u || null != l))
          if ("style" === r)
            if (u ? u = this._previousStyleCopy = m({}, u) : this._previousStyleCopy = null, l) {
              for (o in l) !l.hasOwnProperty(o) || u && u.hasOwnProperty(o) || (a = a || {}, a[o] = "");
              for (o in u) u.hasOwnProperty(o) && l[o] !== u[o] && (a = a || {}, a[o] = u[o]);
            } else a = u;
        else if (N.hasOwnProperty(r)) u ? i(this, r, u, n) : l && I(this, r);
        else if (h(this._tag, t)) F.hasOwnProperty(r) || w.setValueForAttribute(A(this), r, u);
        else if (b.properties[r] || b.isCustomAttribute(r)) {
          var c = A(this);
          null != u ? w.setValueForProperty(c, r, u) : w.deleteValueForProperty(c, r);
        }
      }
      a && v.setValueForStyles(A(this), a, this);
    },
    _updateDOMChildren: function(e, t, n, r) {
      var o = z[typeof e.children] ? e.children : null,
        i = z[typeof t.children] ? t.children : null,
        a = e.dangerouslySetInnerHTML && e.dangerouslySetInnerHTML.__html,
        s = t.dangerouslySetInnerHTML && t.dangerouslySetInnerHTML.__html,
        u = null != o ? null : e.children,
        l = null != i ? null : t.children,
        c = null != o || null != a,
        d = null != i || null != s;
      null != u && null == l ? this.updateChildren(null, n, r) : c && !d && this.updateTextContent(""), null != i ? o !== i && this.updateTextContent("" + i) : null != s ? a !== s && this.updateMarkup("" + s) : null != l && this.updateChildren(l, n, r);
    },
    getHostNode: function() {
      return A(this);
    },
    unmountComponent: function(e) {
      switch (this._tag) {
        case "audio":
        case "form":
        case "iframe":
        case "img":
        case "link":
        case "object":
        case "source":
        case "video":
          var t = this._wrapperState.listeners;
          if (t)
            for (var n = 0; n < t.length; n++) t[n].remove();
          break;
        case "html":
        case "head":
        case "body":
          _("66", this._tag);
      }
      this.unmountChildren(e), Y.uncacheNode(this), k.deleteAllListeners(this), this._rootNodeID = 0, this._domID = 0, this._wrapperState = null;
    },
    getPublicInstance: function() {
      return A(this);
    }
  }, m(p.prototype, p.Mixin, E.Mixin), e.exports = p;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return {
      _topLevelWrapper: e,
      _idCounter: 1,
      _ownerDocument: t ? t.nodeType === o ? t : t.ownerDocument : null,
      _node: t,
      _tag: t ? t.nodeName.toLowerCase() : null,
      _namespaceURI: t ? t.namespaceURI : null
    };
  }
  var o = (n(114), 9);
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(6),
    o = n(40),
    i = n(10),
    a = function(e) {
      this._currentElement = null, this._hostNode = null, this._hostParent = null, this._hostContainerInfo = null, this._domID = 0;
    };
  r(a.prototype, {
    mountComponent: function(e, t, n, r) {
      var a = n._idCounter++;
      this._domID = a, this._hostParent = t, this._hostContainerInfo = n;
      var s = " react-empty: " + this._domID + " ";
      if (e.useCreateElement) {
        var u = n._ownerDocument,
          l = u.createComment(s);
        return i.precacheNode(this, l), o(l);
      }
      return e.renderToStaticMarkup ? "" : "<!--" + s + "-->";
    },
    receiveComponent: function() {},
    getHostNode: function() {
      return i.getNodeFromInstance(this);
    },
    unmountComponent: function() {
      i.uncacheNode(this);
    }
  }), e.exports = a;
}, function(e, t, n) {
  "use strict";
  var r = {
    useCreateElement: !0,
    useFiber: !1
  };
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(99),
    o = n(10),
    i = {
      dangerouslyProcessChildrenUpdates: function(e, t) {
        var n = o.getNodeFromInstance(e);
        r.processUpdates(n, t);
      }
    };
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r() {
    this._rootNodeID && d.updateWrapper(this);
  }

  function o(e) {
    var t = this._currentElement.props,
      n = u.executeOnChange(t, e);
    c.asap(r, this);
    var o = t.name;
    if ("radio" === t.type && null != o) {
      for (var a = l.getNodeFromInstance(this), s = a; s.parentNode;) s = s.parentNode;
      for (var d = s.querySelectorAll("input[name=" + JSON.stringify("" + o) + '][type="radio"]'), f = 0; f < d.length; f++) {
        var h = d[f];
        if (h !== a && h.form === a.form) {
          var p = l.getInstanceFromNode(h);
          p || i("90"), c.asap(r, p);
        }
      }
    }
    return n;
  }
  var i = n(4),
    a = n(6),
    s = n(267),
    u = n(104),
    l = n(10),
    c = n(21),
    d = (n(2), n(3), {
      getHostProps: function(e, t) {
        var n = u.getValue(t),
          r = u.getChecked(t);
        return a({
          type: void 0,
          step: void 0,
          min: void 0,
          max: void 0
        }, t, {
          defaultChecked: void 0,
          defaultValue: void 0,
          value: null != n ? n : e._wrapperState.initialValue,
          checked: null != r ? r : e._wrapperState.initialChecked,
          onChange: e._wrapperState.onChange
        });
      },
      mountWrapper: function(e, t) {
        var n = t.defaultValue;
        e._wrapperState = {
          initialChecked: null != t.checked ? t.checked : t.defaultChecked,
          initialValue: null != t.value ? t.value : n,
          listeners: null,
          onChange: o.bind(e)
        };
      },
      updateWrapper: function(e) {
        var t = e._currentElement.props,
          n = t.checked;
        null != n && s.setValueForProperty(l.getNodeFromInstance(e), "checked", n || !1);
        var r = l.getNodeFromInstance(e),
          o = u.getValue(t);
        if (null != o) {
          var i = "" + o;
          i !== r.value && (r.value = i);
        } else null == t.value && null != t.defaultValue && r.defaultValue !== "" + t.defaultValue && (r.defaultValue = "" + t.defaultValue), null == t.checked && null != t.defaultChecked && (r.defaultChecked = !!t.defaultChecked);
      },
      postMountWrapper: function(e) {
        var t = e._currentElement.props,
          n = l.getNodeFromInstance(e);
        switch (t.type) {
          case "submit":
          case "reset":
            break;
          case "color":
          case "date":
          case "datetime":
          case "datetime-local":
          case "month":
          case "time":
          case "week":
            n.value = "", n.value = n.defaultValue;
            break;
          default:
            n.value = n.value;
        }
        var r = n.name;
        "" !== r && (n.name = ""), n.defaultChecked = !n.defaultChecked, n.defaultChecked = !n.defaultChecked, "" !== r && (n.name = r);
      }
    });
  e.exports = d;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = "";
    return i.Children.forEach(e, function(e) {
      null != e && ("string" == typeof e || "number" == typeof e ? t += e : u || (u = !0));
    }), t;
  }
  var o = n(6),
    i = n(43),
    a = n(10),
    s = n(269),
    u = (n(3), !1),
    l = {
      mountWrapper: function(e, t, n) {
        var o = null;
        if (null != n) {
          var i = n;
          "optgroup" === i._tag && (i = i._hostParent), null != i && "select" === i._tag && (o = s.getSelectValueContext(i));
        }
        var a = null;
        if (null != o) {
          var u;
          if (u = null != t.value ? t.value + "" : r(t.children), a = !1, Array.isArray(o)) {
            for (var l = 0; l < o.length; l++)
              if ("" + o[l] === u) {
                a = !0;
                break;
              }
          } else a = "" + o === u;
        }
        e._wrapperState = {
          selected: a
        };
      },
      postMountWrapper: function(e) {
        var t = e._currentElement.props;
        null != t.value && a.getNodeFromInstance(e).setAttribute("value", t.value);
      },
      getHostProps: function(e, t) {
        var n = o({
          selected: void 0,
          children: void 0
        }, t);
        null != e._wrapperState.selected && (n.selected = e._wrapperState.selected);
        var i = r(t.children);
        return i && (n.children = i), n;
      }
    };
  e.exports = l;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return e === n && t === r;
  }

  function o(e) {
    var t = document.selection,
      n = t.createRange(),
      r = n.text.length,
      o = n.duplicate();
    o.moveToElementText(e), o.setEndPoint("EndToStart", n);
    var i = o.text.length;
    return {
      start: i,
      end: i + r
    };
  }

  function i(e) {
    var t = window.getSelection && window.getSelection();
    if (!t || 0 === t.rangeCount) return null;
    var n = t.anchorNode,
      o = t.anchorOffset,
      i = t.focusNode,
      a = t.focusOffset,
      s = t.getRangeAt(0);
    try {
      s.startContainer.nodeType, s.endContainer.nodeType;
    } catch (e) {
      return null;
    }
    var u = r(t.anchorNode, t.anchorOffset, t.focusNode, t.focusOffset),
      l = u ? 0 : s.toString().length,
      c = s.cloneRange();
    c.selectNodeContents(e), c.setEnd(s.startContainer, s.startOffset);
    var d = r(c.startContainer, c.startOffset, c.endContainer, c.endOffset),
      f = d ? 0 : c.toString().length,
      h = f + l,
      p = document.createRange();
    p.setStart(n, o), p.setEnd(i, a);
    var _ = p.collapsed;
    return {
      start: _ ? h : f,
      end: _ ? f : h
    };
  }

  function a(e, t) {
    var n, r, o = document.selection.createRange().duplicate();
    void 0 === t.end ? (n = t.start, r = n) : t.start > t.end ? (n = t.end, r = t.start) : (n = t.start, r = t.end), o.moveToElementText(e), o.moveStart("character", n), o.setEndPoint("EndToStart", o), o.moveEnd("character", r - n), o.select();
  }

  function s(e, t) {
    if (window.getSelection) {
      var n = window.getSelection(),
        r = e[c()].length,
        o = Math.min(t.start, r),
        i = void 0 === t.end ? o : Math.min(t.end, r);
      if (!n.extend && o > i) {
        var a = i;
        i = o, o = a;
      }
      var s = l(e, o),
        u = l(e, i);
      if (s && u) {
        var d = document.createRange();
        d.setStart(s.node, s.offset), n.removeAllRanges(), o > i ? (n.addRange(d), n.extend(u.node, u.offset)) : (d.setEnd(u.node, u.offset), n.addRange(d));
      }
    }
  }
  var u = n(15),
    l = n(519),
    c = n(280),
    d = u.canUseDOM && "selection" in document && !("getSelection" in window),
    f = {
      getOffsets: d ? o : i,
      setOffsets: d ? a : s
    };
  e.exports = f;
}, function(e, t, n) {
  "use strict";
  var r = n(4),
    o = n(6),
    i = n(99),
    a = n(40),
    s = n(10),
    u = n(67),
    l = (n(2), n(114), function(e) {
      this._currentElement = e, this._stringText = "" + e, this._hostNode = null, this._hostParent = null, this._domID = 0, this._mountIndex = 0, this._closingComment = null, this._commentNodes = null;
    });
  o(l.prototype, {
    mountComponent: function(e, t, n, r) {
      var o = n._idCounter++,
        i = " react-text: " + o + " ";
      if (this._domID = o, this._hostParent = t, e.useCreateElement) {
        var l = n._ownerDocument,
          c = l.createComment(i),
          d = l.createComment(" /react-text "),
          f = a(l.createDocumentFragment());
        return a.queueChild(f, a(c)), this._stringText && a.queueChild(f, a(l.createTextNode(this._stringText))), a.queueChild(f, a(d)), s.precacheNode(this, c), this._closingComment = d, f;
      }
      var h = u(this._stringText);
      return e.renderToStaticMarkup ? h : "<!--" + i + "-->" + h + "<!-- /react-text -->";
    },
    receiveComponent: function(e, t) {
      if (e !== this._currentElement) {
        this._currentElement = e;
        var n = "" + e;
        if (n !== this._stringText) {
          this._stringText = n;
          var r = this.getHostNode();
          i.replaceDelimitedText(r[0], r[1], n);
        }
      }
    },
    getHostNode: function() {
      var e = this._commentNodes;
      if (e) return e;
      if (!this._closingComment)
        for (var t = s.getNodeFromInstance(this), n = t.nextSibling;;) {
          if (null == n && r("67", this._domID), 8 === n.nodeType && " /react-text " === n.nodeValue) {
            this._closingComment = n;
            break;
          }
          n = n.nextSibling;
        }
      return e = [this._hostNode, this._closingComment], this._commentNodes = e, e;
    },
    unmountComponent: function() {
      this._closingComment = null, this._commentNodes = null, s.uncacheNode(this);
    }
  }), e.exports = l;
}, function(e, t, n) {
  "use strict";

  function r() {
    this._rootNodeID && c.updateWrapper(this);
  }

  function o(e) {
    var t = this._currentElement.props,
      n = s.executeOnChange(t, e);
    return l.asap(r, this), n;
  }
  var i = n(4),
    a = n(6),
    s = n(104),
    u = n(10),
    l = n(21),
    c = (n(2), n(3), {
      getHostProps: function(e, t) {
        return null != t.dangerouslySetInnerHTML && i("91"), a({}, t, {
          value: void 0,
          defaultValue: void 0,
          children: "" + e._wrapperState.initialValue,
          onChange: e._wrapperState.onChange
        });
      },
      mountWrapper: function(e, t) {
        var n = s.getValue(t),
          r = n;
        if (null == n) {
          var a = t.defaultValue,
            u = t.children;
          null != u && (null != a && i("92"), Array.isArray(u) && (u.length <= 1 || i("93"), u = u[0]), a = "" + u), null == a && (a = ""), r = a;
        }
        e._wrapperState = {
          initialValue: "" + r,
          listeners: null,
          onChange: o.bind(e)
        };
      },
      updateWrapper: function(e) {
        var t = e._currentElement.props,
          n = u.getNodeFromInstance(e),
          r = s.getValue(t);
        if (null != r) {
          var o = "" + r;
          o !== n.value && (n.value = o), null == t.defaultValue && (n.defaultValue = o);
        }
        null != t.defaultValue && (n.defaultValue = t.defaultValue);
      },
      postMountWrapper: function(e) {
        var t = u.getNodeFromInstance(e),
          n = t.textContent;
        n === e._wrapperState.initialValue && (t.value = n);
      }
    });
  e.exports = c;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    "_hostNode" in e || u("33"), "_hostNode" in t || u("33");
    for (var n = 0, r = e; r; r = r._hostParent) n++;
    for (var o = 0, i = t; i; i = i._hostParent) o++;
    for (; n - o > 0;) e = e._hostParent, n--;
    for (; o - n > 0;) t = t._hostParent, o--;
    for (var a = n; a--;) {
      if (e === t) return e;
      e = e._hostParent, t = t._hostParent;
    }
    return null;
  }

  function o(e, t) {
    "_hostNode" in e || u("35"), "_hostNode" in t || u("35");
    for (; t;) {
      if (t === e) return !0;
      t = t._hostParent;
    }
    return !1;
  }

  function i(e) {
    return "_hostNode" in e || u("36"), e._hostParent;
  }

  function a(e, t, n) {
    for (var r = []; e;) r.push(e), e = e._hostParent;
    var o;
    for (o = r.length; o-- > 0;) t(r[o], "captured", n);
    for (o = 0; o < r.length; o++) t(r[o], "bubbled", n);
  }

  function s(e, t, n, o, i) {
    for (var a = e && t ? r(e, t) : null, s = []; e && e !== a;) s.push(e), e = e._hostParent;
    for (var u = []; t && t !== a;) u.push(t), t = t._hostParent;
    var l;
    for (l = 0; l < s.length; l++) n(s[l], "bubbled", o);
    for (l = u.length; l-- > 0;) n(u[l], "captured", i);
  }
  var u = n(4);
  n(2), e.exports = {
    isAncestor: o,
    getLowestCommonAncestor: r,
    getParentInstance: i,
    traverseTwoPhase: a,
    traverseEnterLeave: s
  };
}, function(e, t, n) {
  "use strict";

  function r() {
    this.reinitializeTransaction();
  }
  var o = n(6),
    i = n(21),
    a = n(66),
    s = n(17),
    u = {
      initialize: s,
      close: function() {
        f.isBatchingUpdates = !1;
      }
    },
    l = {
      initialize: s,
      close: i.flushBatchedUpdates.bind(i)
    },
    c = [l, u];
  o(r.prototype, a, {
    getTransactionWrappers: function() {
      return c;
    }
  });
  var d = new r,
    f = {
      isBatchingUpdates: !1,
      batchedUpdates: function(e, t, n, r, o, i) {
        var a = f.isBatchingUpdates;
        return f.isBatchingUpdates = !0, a ? e(t, n, r, o, i) : d.perform(e, null, t, n, r, o, i);
      }
    };
  e.exports = f;
}, function(e, t, n) {
  "use strict";

  function r() {
    k || (k = !0, v.EventEmitter.injectReactEventListener(y), v.EventPluginHub.injectEventPluginOrder(s), v.EventPluginUtils.injectComponentTree(f), v.EventPluginUtils.injectTreeTraversal(p), v.EventPluginHub.injectEventPluginsByName({
      SimpleEventPlugin: w,
      EnterLeaveEventPlugin: u,
      ChangeEventPlugin: a,
      SelectEventPlugin: b,
      BeforeInputEventPlugin: i
    }), v.HostComponent.injectGenericComponentClass(d), v.HostComponent.injectTextComponentClass(_), v.DOMProperty.injectDOMPropertyConfig(o), v.DOMProperty.injectDOMPropertyConfig(l), v.DOMProperty.injectDOMPropertyConfig(M), v.EmptyComponent.injectEmptyComponentFactory(function(e) {
      return new h(e);
    }), v.Updates.injectReconcileTransaction(g), v.Updates.injectBatchingStrategy(m), v.Component.injectEnvironment(c));
  }
  var o = n(459),
    i = n(461),
    a = n(463),
    s = n(465),
    u = n(466),
    l = n(468),
    c = n(470),
    d = n(473),
    f = n(10),
    h = n(475),
    p = n(483),
    _ = n(481),
    m = n(484),
    y = n(488),
    v = n(489),
    g = n(494),
    M = n(499),
    b = n(500),
    w = n(501),
    k = !1;
  e.exports = {
    inject: r
  };
}, function(e, t, n) {
  "use strict";
  var r = "function" == typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    o.enqueueEvents(e), o.processEventQueue(!1);
  }
  var o = n(51),
    i = {
      handleTopLevel: function(e, t, n, i) {
        r(o.extractEvents(e, t, n, i));
      }
    };
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    for (; e._hostParent;) e = e._hostParent;
    var t = d.getNodeFromInstance(e),
      n = t.parentNode;
    return d.getClosestInstanceFromNode(n);
  }

  function o(e, t) {
    this.topLevelType = e, this.nativeEvent = t, this.ancestors = [];
  }

  function i(e) {
    var t = h(e.nativeEvent),
      n = d.getClosestInstanceFromNode(t),
      o = n;
    do {
      e.ancestors.push(o), o = o && r(o);
    } while (o);
    for (var i = 0; i < e.ancestors.length; i++) n = e.ancestors[i], _._handleTopLevel(e.topLevelType, n, e.nativeEvent, h(e.nativeEvent));
  }

  function a(e) {
    e(p(window));
  }
  var s = n(6),
    u = n(151),
    l = n(15),
    c = n(35),
    d = n(10),
    f = n(21),
    h = n(111),
    p = n(436);
  s(o.prototype, {
    destructor: function() {
      this.topLevelType = null, this.nativeEvent = null, this.ancestors.length = 0;
    }
  }), c.addPoolingTo(o, c.twoArgumentPooler);
  var _ = {
    _enabled: !0,
    _handleTopLevel: null,
    WINDOW_HANDLE: l.canUseDOM ? window : null,
    setHandleTopLevel: function(e) {
      _._handleTopLevel = e;
    },
    setEnabled: function(e) {
      _._enabled = !!e;
    },
    isEnabled: function() {
      return _._enabled;
    },
    trapBubbledEvent: function(e, t, n) {
      return n ? u.listen(n, t, _.dispatchEvent.bind(null, e)) : null;
    },
    trapCapturedEvent: function(e, t, n) {
      return n ? u.capture(n, t, _.dispatchEvent.bind(null, e)) : null;
    },
    monitorScrollValue: function(e) {
      var t = a.bind(null, e);
      u.listen(window, "scroll", t);
    },
    dispatchEvent: function(e, t) {
      if (_._enabled) {
        var n = o.getPooled(e, t);
        try {
          f.batchedUpdates(i, n);
        } finally {
          o.release(n);
        }
      }
    }
  };
  e.exports = _;
}, function(e, t, n) {
  "use strict";
  var r = n(41),
    o = n(51),
    i = n(102),
    a = n(105),
    s = n(270),
    u = n(64),
    l = n(272),
    c = n(21),
    d = {
      Component: a.injection,
      DOMProperty: r.injection,
      EmptyComponent: s.injection,
      EventPluginHub: o.injection,
      EventPluginUtils: i.injection,
      EventEmitter: u.injection,
      HostComponent: l.injection,
      Updates: c.injection
    };
  e.exports = d;
}, function(e, t, n) {
  "use strict";
  var r = n(512),
    o = /^<\!\-\-/,
    i = {
      CHECKSUM_ATTR_NAME: "data-react-checksum",
      addChecksumToMarkup: function(e) {
        var t = r(e);
        return o.test(e) ? e : e.replace(/\/?>/, " " + i.CHECKSUM_ATTR_NAME + '="' + t + '"$&');
      },
      canReuseMarkup: function(e, t) {
        var n = t.getAttribute(i.CHECKSUM_ATTR_NAME);
        return n = n && parseInt(n, 10), r(e) === n;
      }
    };
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return {
      type: "INSERT_MARKUP",
      content: e,
      fromIndex: null,
      fromNode: null,
      toIndex: n,
      afterNode: t
    };
  }

  function o(e, t, n) {
    return {
      type: "MOVE_EXISTING",
      content: null,
      fromIndex: e._mountIndex,
      fromNode: f.getHostNode(e),
      toIndex: n,
      afterNode: t
    };
  }

  function i(e, t) {
    return {
      type: "REMOVE_NODE",
      content: null,
      fromIndex: e._mountIndex,
      fromNode: t,
      toIndex: null,
      afterNode: null
    };
  }

  function a(e) {
    return {
      type: "SET_MARKUP",
      content: e,
      fromIndex: null,
      fromNode: null,
      toIndex: null,
      afterNode: null
    };
  }

  function s(e) {
    return {
      type: "TEXT_CONTENT",
      content: e,
      fromIndex: null,
      fromNode: null,
      toIndex: null,
      afterNode: null
    };
  }

  function u(e, t) {
    return t && (e = e || [], e.push(t)), e;
  }

  function l(e, t) {
    d.processChildrenUpdates(e, t);
  }
  var c = n(4),
    d = n(105),
    f = (n(53), n(18), n(24), n(42)),
    h = n(469),
    p = (n(17), n(515)),
    _ = (n(2), {
      Mixin: {
        _reconcilerInstantiateChildren: function(e, t, n) {
          return h.instantiateChildren(e, t, n);
        },
        _reconcilerUpdateChildren: function(e, t, n, r, o, i) {
          var a;
          return a = p(t, 0), h.updateChildren(e, a, n, r, o, this, this._hostContainerInfo, i, 0), a;
        },
        mountChildren: function(e, t, n) {
          var r = this._reconcilerInstantiateChildren(e, t, n);
          this._renderedChildren = r;
          var o = [],
            i = 0;
          for (var a in r)
            if (r.hasOwnProperty(a)) {
              var s = r[a],
                u = f.mountComponent(s, t, this, this._hostContainerInfo, n, 0);
              s._mountIndex = i++, o.push(u);
            }
          return o;
        },
        updateTextContent: function(e) {
          var t = this._renderedChildren;
          h.unmountChildren(t, !1);
          for (var n in t) t.hasOwnProperty(n) && c("118");
          l(this, [s(e)]);
        },
        updateMarkup: function(e) {
          var t = this._renderedChildren;
          h.unmountChildren(t, !1);
          for (var n in t) t.hasOwnProperty(n) && c("118");
          l(this, [a(e)]);
        },
        updateChildren: function(e, t, n) {
          this._updateChildren(e, t, n);
        },
        _updateChildren: function(e, t, n) {
          var r = this._renderedChildren,
            o = {},
            i = [],
            a = this._reconcilerUpdateChildren(r, e, i, o, t, n);
          if (a || r) {
            var s, c = null,
              d = 0,
              h = 0,
              p = 0,
              _ = null;
            for (s in a)
              if (a.hasOwnProperty(s)) {
                var m = r && r[s],
                  y = a[s];
                m === y ? (c = u(c, this.moveChild(m, _, d, h)), h = Math.max(m._mountIndex, h), m._mountIndex = d) : (m && (h = Math.max(m._mountIndex, h)), c = u(c, this._mountChildAtIndex(y, i[p], _, d, t, n)), p++), d++, _ = f.getHostNode(y);
              }
            for (s in o) o.hasOwnProperty(s) && (c = u(c, this._unmountChild(r[s], o[s])));
            c && l(this, c), this._renderedChildren = a;
          }
        },
        unmountChildren: function(e) {
          var t = this._renderedChildren;
          h.unmountChildren(t, e), this._renderedChildren = null;
        },
        moveChild: function(e, t, n, r) {
          if (e._mountIndex < r) return o(e, t, n);
        },
        createChild: function(e, t, n) {
          return r(n, t, e._mountIndex);
        },
        removeChild: function(e, t) {
          return i(e, t);
        },
        _mountChildAtIndex: function(e, t, n, r, o, i) {
          return e._mountIndex = r, this.createChild(e, n, t);
        },
        _unmountChild: function(e, t) {
          var n = this.removeChild(e, t);
          return e._mountIndex = null, n;
        }
      }
    });
  e.exports = _;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return !(!e || "function" != typeof e.attachRef || "function" != typeof e.detachRef);
  }
  var o = n(4),
    i = (n(2), {
      addComponentAsRefTo: function(e, t, n) {
        r(n) || o("119"), n.attachRef(t, e);
      },
      removeComponentAsRefFrom: function(e, t, n) {
        r(n) || o("120");
        var i = n.getPublicInstance();
        i && i.refs[t] === e.getPublicInstance() && n.detachRef(t);
      }
    });
  e.exports = i;
}, function(e, t, n) {
  "use strict";
  e.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
}, function(e, t, n) {
  "use strict";

  function r(e) {
    this.reinitializeTransaction(), this.renderToStaticMarkup = !1, this.reactMountReady = i.getPooled(null), this.useCreateElement = e;
  }
  var o = n(6),
    i = n(266),
    a = n(35),
    s = n(64),
    u = n(273),
    l = (n(18), n(66)),
    c = n(107),
    d = {
      initialize: u.getSelectionInformation,
      close: u.restoreSelection
    },
    f = {
      initialize: function() {
        var e = s.isEnabled();
        return s.setEnabled(!1), e;
      },
      close: function(e) {
        s.setEnabled(e);
      }
    },
    h = {
      initialize: function() {
        this.reactMountReady.reset();
      },
      close: function() {
        this.reactMountReady.notifyAll();
      }
    },
    p = [d, f, h],
    _ = {
      getTransactionWrappers: function() {
        return p;
      },
      getReactMountReady: function() {
        return this.reactMountReady;
      },
      getUpdateQueue: function() {
        return c;
      },
      checkpoint: function() {
        return this.reactMountReady.checkpoint();
      },
      rollback: function(e) {
        this.reactMountReady.rollback(e);
      },
      destructor: function() {
        i.release(this.reactMountReady), this.reactMountReady = null;
      }
    };
  o(r.prototype, l, _), a.addPoolingTo(r), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    "function" == typeof e ? e(t.getPublicInstance()) : i.addComponentAsRefTo(t, e, n);
  }

  function o(e, t, n) {
    "function" == typeof e ? e(null) : i.removeComponentAsRefFrom(t, e, n);
  }
  var i = n(492),
    a = {};
  a.attachRefs = function(e, t) {
    if (null !== t && "object" == typeof t) {
      var n = t.ref;
      null != n && r(n, e, t._owner);
    }
  }, a.shouldUpdateRefs = function(e, t) {
    var n = null,
      r = null;
    null !== e && "object" == typeof e && (n = e.ref, r = e._owner);
    var o = null,
      i = null;
    return null !== t && "object" == typeof t && (o = t.ref, i = t._owner), n !== o || "string" == typeof o && i !== r;
  }, a.detachRefs = function(e, t) {
    if (null !== t && "object" == typeof t) {
      var n = t.ref;
      null != n && o(n, e, t._owner);
    }
  }, e.exports = a;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    this.reinitializeTransaction(), this.renderToStaticMarkup = e, this.useCreateElement = !1, this.updateQueue = new s(this);
  }
  var o = n(6),
    i = n(35),
    a = n(66),
    s = (n(18), n(497)),
    u = [],
    l = {
      enqueue: function() {}
    },
    c = {
      getTransactionWrappers: function() {
        return u;
      },
      getReactMountReady: function() {
        return l;
      },
      getUpdateQueue: function() {
        return this.updateQueue;
      },
      destructor: function() {},
      checkpoint: function() {},
      rollback: function() {}
    };
  o(r.prototype, a, c), i.addPoolingTo(r), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }
  var o = n(107),
    i = (n(3), function() {
      function e(t) {
        r(this, e), this.transaction = t;
      }
      return e.prototype.isMounted = function(e) {
        return !1;
      }, e.prototype.enqueueCallback = function(e, t, n) {
        this.transaction.isInTransaction() && o.enqueueCallback(e, t, n);
      }, e.prototype.enqueueForceUpdate = function(e) {
        this.transaction.isInTransaction() && o.enqueueForceUpdate(e);
      }, e.prototype.enqueueReplaceState = function(e, t) {
        this.transaction.isInTransaction() && o.enqueueReplaceState(e, t);
      }, e.prototype.enqueueSetState = function(e, t) {
        this.transaction.isInTransaction() && o.enqueueSetState(e, t);
      }, e;
    }());
  e.exports = i;
}, function(e, t, n) {
  "use strict";
  e.exports = "15.4.2";
}, function(e, t, n) {
  "use strict";
  var r = {
      xlink: "http://www.w3.org/1999/xlink",
      xml: "http://www.w3.org/XML/1998/namespace"
    },
    o = {
      accentHeight: "accent-height",
      accumulate: 0,
      additive: 0,
      alignmentBaseline: "alignment-baseline",
      allowReorder: "allowReorder",
      alphabetic: 0,
      amplitude: 0,
      arabicForm: "arabic-form",
      ascent: 0,
      attributeName: "attributeName",
      attributeType: "attributeType",
      autoReverse: "autoReverse",
      azimuth: 0,
      baseFrequency: "baseFrequency",
      baseProfile: "baseProfile",
      baselineShift: "baseline-shift",
      bbox: 0,
      begin: 0,
      bias: 0,
      by: 0,
      calcMode: "calcMode",
      capHeight: "cap-height",
      clip: 0,
      clipPath: "clip-path",
      clipRule: "clip-rule",
      clipPathUnits: "clipPathUnits",
      colorInterpolation: "color-interpolation",
      colorInterpolationFilters: "color-interpolation-filters",
      colorProfile: "color-profile",
      colorRendering: "color-rendering",
      contentScriptType: "contentScriptType",
      contentStyleType: "contentStyleType",
      cursor: 0,
      cx: 0,
      cy: 0,
      d: 0,
      decelerate: 0,
      descent: 0,
      diffuseConstant: "diffuseConstant",
      direction: 0,
      display: 0,
      divisor: 0,
      dominantBaseline: "dominant-baseline",
      dur: 0,
      dx: 0,
      dy: 0,
      edgeMode: "edgeMode",
      elevation: 0,
      enableBackground: "enable-background",
      end: 0,
      exponent: 0,
      externalResourcesRequired: "externalResourcesRequired",
      fill: 0,
      fillOpacity: "fill-opacity",
      fillRule: "fill-rule",
      filter: 0,
      filterRes: "filterRes",
      filterUnits: "filterUnits",
      floodColor: "flood-color",
      floodOpacity: "flood-opacity",
      focusable: 0,
      fontFamily: "font-family",
      fontSize: "font-size",
      fontSizeAdjust: "font-size-adjust",
      fontStretch: "font-stretch",
      fontStyle: "font-style",
      fontVariant: "font-variant",
      fontWeight: "font-weight",
      format: 0,
      from: 0,
      fx: 0,
      fy: 0,
      g1: 0,
      g2: 0,
      glyphName: "glyph-name",
      glyphOrientationHorizontal: "glyph-orientation-horizontal",
      glyphOrientationVertical: "glyph-orientation-vertical",
      glyphRef: "glyphRef",
      gradientTransform: "gradientTransform",
      gradientUnits: "gradientUnits",
      hanging: 0,
      horizAdvX: "horiz-adv-x",
      horizOriginX: "horiz-origin-x",
      ideographic: 0,
      imageRendering: "image-rendering",
      "in": 0,
      in2: 0,
      intercept: 0,
      k: 0,
      k1: 0,
      k2: 0,
      k3: 0,
      k4: 0,
      kernelMatrix: "kernelMatrix",
      kernelUnitLength: "kernelUnitLength",
      kerning: 0,
      keyPoints: "keyPoints",
      keySplines: "keySplines",
      keyTimes: "keyTimes",
      lengthAdjust: "lengthAdjust",
      letterSpacing: "letter-spacing",
      lightingColor: "lighting-color",
      limitingConeAngle: "limitingConeAngle",
      local: 0,
      markerEnd: "marker-end",
      markerMid: "marker-mid",
      markerStart: "marker-start",
      markerHeight: "markerHeight",
      markerUnits: "markerUnits",
      markerWidth: "markerWidth",
      mask: 0,
      maskContentUnits: "maskContentUnits",
      maskUnits: "maskUnits",
      mathematical: 0,
      mode: 0,
      numOctaves: "numOctaves",
      offset: 0,
      opacity: 0,
      operator: 0,
      order: 0,
      orient: 0,
      orientation: 0,
      origin: 0,
      overflow: 0,
      overlinePosition: "overline-position",
      overlineThickness: "overline-thickness",
      paintOrder: "paint-order",
      panose1: "panose-1",
      pathLength: "pathLength",
      patternContentUnits: "patternContentUnits",
      patternTransform: "patternTransform",
      patternUnits: "patternUnits",
      pointerEvents: "pointer-events",
      points: 0,
      pointsAtX: "pointsAtX",
      pointsAtY: "pointsAtY",
      pointsAtZ: "pointsAtZ",
      preserveAlpha: "preserveAlpha",
      preserveAspectRatio: "preserveAspectRatio",
      primitiveUnits: "primitiveUnits",
      r: 0,
      radius: 0,
      refX: "refX",
      refY: "refY",
      renderingIntent: "rendering-intent",
      repeatCount: "repeatCount",
      repeatDur: "repeatDur",
      requiredExtensions: "requiredExtensions",
      requiredFeatures: "requiredFeatures",
      restart: 0,
      result: 0,
      rotate: 0,
      rx: 0,
      ry: 0,
      scale: 0,
      seed: 0,
      shapeRendering: "shape-rendering",
      slope: 0,
      spacing: 0,
      specularConstant: "specularConstant",
      specularExponent: "specularExponent",
      speed: 0,
      spreadMethod: "spreadMethod",
      startOffset: "startOffset",
      stdDeviation: "stdDeviation",
      stemh: 0,
      stemv: 0,
      stitchTiles: "stitchTiles",
      stopColor: "stop-color",
      stopOpacity: "stop-opacity",
      strikethroughPosition: "strikethrough-position",
      strikethroughThickness: "strikethrough-thickness",
      string: 0,
      stroke: 0,
      strokeDasharray: "stroke-dasharray",
      strokeDashoffset: "stroke-dashoffset",
      strokeLinecap: "stroke-linecap",
      strokeLinejoin: "stroke-linejoin",
      strokeMiterlimit: "stroke-miterlimit",
      strokeOpacity: "stroke-opacity",
      strokeWidth: "stroke-width",
      surfaceScale: "surfaceScale",
      systemLanguage: "systemLanguage",
      tableValues: "tableValues",
      targetX: "targetX",
      targetY: "targetY",
      textAnchor: "text-anchor",
      textDecoration: "text-decoration",
      textRendering: "text-rendering",
      textLength: "textLength",
      to: 0,
      transform: 0,
      u1: 0,
      u2: 0,
      underlinePosition: "underline-position",
      underlineThickness: "underline-thickness",
      unicode: 0,
      unicodeBidi: "unicode-bidi",
      unicodeRange: "unicode-range",
      unitsPerEm: "units-per-em",
      vAlphabetic: "v-alphabetic",
      vHanging: "v-hanging",
      vIdeographic: "v-ideographic",
      vMathematical: "v-mathematical",
      values: 0,
      vectorEffect: "vector-effect",
      version: 0,
      vertAdvY: "vert-adv-y",
      vertOriginX: "vert-origin-x",
      vertOriginY: "vert-origin-y",
      viewBox: "viewBox",
      viewTarget: "viewTarget",
      visibility: 0,
      widths: 0,
      wordSpacing: "word-spacing",
      writingMode: "writing-mode",
      x: 0,
      xHeight: "x-height",
      x1: 0,
      x2: 0,
      xChannelSelector: "xChannelSelector",
      xlinkActuate: "xlink:actuate",
      xlinkArcrole: "xlink:arcrole",
      xlinkHref: "xlink:href",
      xlinkRole: "xlink:role",
      xlinkShow: "xlink:show",
      xlinkTitle: "xlink:title",
      xlinkType: "xlink:type",
      xmlBase: "xml:base",
      xmlns: 0,
      xmlnsXlink: "xmlns:xlink",
      xmlLang: "xml:lang",
      xmlSpace: "xml:space",
      y: 0,
      y1: 0,
      y2: 0,
      yChannelSelector: "yChannelSelector",
      z: 0,
      zoomAndPan: "zoomAndPan"
    },
    i = {
      Properties: {},
      DOMAttributeNamespaces: {
        xlinkActuate: r.xlink,
        xlinkArcrole: r.xlink,
        xlinkHref: r.xlink,
        xlinkRole: r.xlink,
        xlinkShow: r.xlink,
        xlinkTitle: r.xlink,
        xlinkType: r.xlink,
        xmlBase: r.xml,
        xmlLang: r.xml,
        xmlSpace: r.xml
      },
      DOMAttributeNames: {}
    };
  Object.keys(o).forEach(function(e) {
    i.Properties[e] = 0, o[e] && (i.DOMAttributeNames[e] = o[e]);
  }), e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if ("selectionStart" in e && u.hasSelectionCapabilities(e)) return {
      start: e.selectionStart,
      end: e.selectionEnd
    };
    if (window.getSelection) {
      var t = window.getSelection();
      return {
        anchorNode: t.anchorNode,
        anchorOffset: t.anchorOffset,
        focusNode: t.focusNode,
        focusOffset: t.focusOffset
      };
    }
    if (document.selection) {
      var n = document.selection.createRange();
      return {
        parentElement: n.parentElement(),
        text: n.text,
        top: n.boundingTop,
        left: n.boundingLeft
      };
    }
  }

  function o(e, t) {
    if (v || null == _ || _ !== c()) return null;
    var n = r(_);
    if (!y || !f(y, n)) {
      y = n;
      var o = l.getPooled(p.select, m, e, t);
      return o.type = "select", o.target = _, i.accumulateTwoPhaseDispatches(o), o;
    }
    return null;
  }
  var i = n(52),
    a = n(15),
    s = n(10),
    u = n(273),
    l = n(23),
    c = n(153),
    d = n(282),
    f = n(96),
    h = a.canUseDOM && "documentMode" in document && document.documentMode <= 11,
    p = {
      select: {
        phasedRegistrationNames: {
          bubbled: "onSelect",
          captured: "onSelectCapture"
        },
        dependencies: ["topBlur", "topContextMenu", "topFocus", "topKeyDown", "topKeyUp", "topMouseDown", "topMouseUp", "topSelectionChange"]
      }
    },
    _ = null,
    m = null,
    y = null,
    v = !1,
    g = !1,
    M = {
      eventTypes: p,
      extractEvents: function(e, t, n, r) {
        if (!g) return null;
        var i = t ? s.getNodeFromInstance(t) : window;
        switch (e) {
          case "topFocus":
            (d(i) || "true" === i.contentEditable) && (_ = i, m = t, y = null);
            break;
          case "topBlur":
            _ = null, m = null, y = null;
            break;
          case "topMouseDown":
            v = !0;
            break;
          case "topContextMenu":
          case "topMouseUp":
            return v = !1, o(n, r);
          case "topSelectionChange":
            if (h) break;
          case "topKeyDown":
          case "topKeyUp":
            return o(n, r);
        }
        return null;
      },
      didPutListener: function(e, t, n) {
        "onSelect" === t && (g = !0);
      }
    };
  e.exports = M;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return "." + e._rootNodeID;
  }

  function o(e) {
    return "button" === e || "input" === e || "select" === e || "textarea" === e;
  }
  var i = n(4),
    a = n(151),
    s = n(52),
    u = n(10),
    l = n(502),
    c = n(503),
    d = n(23),
    f = n(506),
    h = n(508),
    p = n(65),
    _ = n(505),
    m = n(509),
    y = n(510),
    v = n(54),
    g = n(511),
    M = n(17),
    b = n(109),
    w = (n(2), {}),
    k = {};
  ["abort", "animationEnd", "animationIteration", "animationStart", "blur", "canPlay", "canPlayThrough", "click", "contextMenu", "copy", "cut", "doubleClick", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "focus", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "progress", "rateChange", "reset", "scroll", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchMove", "touchStart", "transitionEnd", "volumeChange", "waiting", "wheel"].forEach(function(e) {
    var t = e[0].toUpperCase() + e.slice(1),
      n = "on" + t,
      r = "top" + t,
      o = {
        phasedRegistrationNames: {
          bubbled: n,
          captured: n + "Capture"
        },
        dependencies: [r]
      };
    w[e] = o, k[r] = o;
  });
  var L = {},
    T = {
      eventTypes: w,
      extractEvents: function(e, t, n, r) {
        var o = k[e];
        if (!o) return null;
        var a;
        switch (e) {
          case "topAbort":
          case "topCanPlay":
          case "topCanPlayThrough":
          case "topDurationChange":
          case "topEmptied":
          case "topEncrypted":
          case "topEnded":
          case "topError":
          case "topInput":
          case "topInvalid":
          case "topLoad":
          case "topLoadedData":
          case "topLoadedMetadata":
          case "topLoadStart":
          case "topPause":
          case "topPlay":
          case "topPlaying":
          case "topProgress":
          case "topRateChange":
          case "topReset":
          case "topSeeked":
          case "topSeeking":
          case "topStalled":
          case "topSubmit":
          case "topSuspend":
          case "topTimeUpdate":
          case "topVolumeChange":
          case "topWaiting":
            a = d;
            break;
          case "topKeyPress":
            if (0 === b(n)) return null;
          case "topKeyDown":
          case "topKeyUp":
            a = h;
            break;
          case "topBlur":
          case "topFocus":
            a = f;
            break;
          case "topClick":
            if (2 === n.button) return null;
          case "topDoubleClick":
          case "topMouseDown":
          case "topMouseMove":
          case "topMouseUp":
          case "topMouseOut":
          case "topMouseOver":
          case "topContextMenu":
            a = p;
            break;
          case "topDrag":
          case "topDragEnd":
          case "topDragEnter":
          case "topDragExit":
          case "topDragLeave":
          case "topDragOver":
          case "topDragStart":
          case "topDrop":
            a = _;
            break;
          case "topTouchCancel":
          case "topTouchEnd":
          case "topTouchMove":
          case "topTouchStart":
            a = m;
            break;
          case "topAnimationEnd":
          case "topAnimationIteration":
          case "topAnimationStart":
            a = l;
            break;
          case "topTransitionEnd":
            a = y;
            break;
          case "topScroll":
            a = v;
            break;
          case "topWheel":
            a = g;
            break;
          case "topCopy":
          case "topCut":
          case "topPaste":
            a = c;
        }
        a || i("86", e);
        var u = a.getPooled(o, t, n, r);
        return s.accumulateTwoPhaseDispatches(u), u;
      },
      didPutListener: function(e, t, n) {
        if ("onClick" === t && !o(e._tag)) {
          var i = r(e),
            s = u.getNodeFromInstance(e);
          L[i] || (L[i] = a.listen(s, "click", M));
        }
      },
      willDeleteListener: function(e, t) {
        if ("onClick" === t && !o(e._tag)) {
          var n = r(e);
          L[n].remove(), delete L[n];
        }
      }
    };
  e.exports = T;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(23),
    i = {
      animationName: null,
      elapsedTime: null,
      pseudoElement: null
    };
  o.augmentClass(r, i), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(23),
    i = {
      clipboardData: function(e) {
        return "clipboardData" in e ? e.clipboardData : window.clipboardData;
      }
    };
  o.augmentClass(r, i), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(23),
    i = {
      data: null
    };
  o.augmentClass(r, i), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(65),
    i = {
      dataTransfer: null
    };
  o.augmentClass(r, i), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(54),
    i = {
      relatedTarget: null
    };
  o.augmentClass(r, i), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(23),
    i = {
      data: null
    };
  o.augmentClass(r, i), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(54),
    i = n(109),
    a = n(516),
    s = n(110),
    u = {
      key: a,
      location: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      repeat: null,
      locale: null,
      getModifierState: s,
      charCode: function(e) {
        return "keypress" === e.type ? i(e) : 0;
      },
      keyCode: function(e) {
        return "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
      },
      which: function(e) {
        return "keypress" === e.type ? i(e) : "keydown" === e.type || "keyup" === e.type ? e.keyCode : 0;
      }
    };
  o.augmentClass(r, u), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(54),
    i = n(110),
    a = {
      touches: null,
      targetTouches: null,
      changedTouches: null,
      altKey: null,
      metaKey: null,
      ctrlKey: null,
      shiftKey: null,
      getModifierState: i
    };
  o.augmentClass(r, a), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(23),
    i = {
      propertyName: null,
      elapsedTime: null,
      pseudoElement: null
    };
  o.augmentClass(r, i), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    return o.call(this, e, t, n, r);
  }
  var o = n(65),
    i = {
      deltaX: function(e) {
        return "deltaX" in e ? e.deltaX : "wheelDeltaX" in e ? -e.wheelDeltaX : 0;
      },
      deltaY: function(e) {
        return "deltaY" in e ? e.deltaY : "wheelDeltaY" in e ? -e.wheelDeltaY : "wheelDelta" in e ? -e.wheelDelta : 0;
      },
      deltaZ: null,
      deltaMode: null
    };
  o.augmentClass(r, i), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    for (var t = 1, n = 0, r = 0, i = e.length, a = -4 & i; r < a;) {
      for (var s = Math.min(r + 4096, a); r < s; r += 4) n += (t += e.charCodeAt(r)) + (t += e.charCodeAt(r + 1)) + (t += e.charCodeAt(r + 2)) + (t += e.charCodeAt(r + 3));
      t %= o, n %= o;
    }
    for (; r < i; r++) n += t += e.charCodeAt(r);
    return t %= o, n %= o, t | n << 16;
  }
  var o = 65521;
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return null == t || "boolean" == typeof t || "" === t ? "" : isNaN(t) || 0 === t || i.hasOwnProperty(e) && i[e] ? "" + t : ("string" == typeof t && (t = t.trim()), t + "px");
  }
  var o = n(265),
    i = (n(3), o.isUnitlessNumber);
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if (null == e) return null;
    if (1 === e.nodeType) return e;
    var t = a.get(e);
    if (t) return t = s(t), t ? i.getNodeFromInstance(t) : null;
    "function" == typeof e.render ? o("44") : o("45", Object.keys(e));
  }
  var o = n(4),
    i = (n(24), n(10)),
    a = n(53),
    s = n(279);
  n(2), n(3), e.exports = r;
}, function(e, t, n) {
  "use strict";
  (function(t) {
    function r(e, t, n, r) {
      if (e && "object" == typeof e) {
        var o = e;
        void 0 === o[n] && null != t && (o[n] = t);
      }
    }

    function o(e, t) {
      if (null == e) return e;
      var n = {};
      return i(e, r, n), n;
    }
    var i = (n(103), n(284));
    n(3), void 0 !== t && n.i({
      NODE_ENV: "production"
    }), e.exports = o;
  }).call(t, n(264));
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if (e.key) {
      var t = i[e.key] || e.key;
      if ("Unidentified" !== t) return t;
    }
    if ("keypress" === e.type) {
      var n = o(e);
      return 13 === n ? "Enter" : String.fromCharCode(n);
    }
    return "keydown" === e.type || "keyup" === e.type ? a[e.keyCode] || "Unidentified" : "";
  }
  var o = n(109),
    i = {
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
    },
    a = {
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e && (o && e[o] || e[i]);
    if ("function" == typeof t) return t;
  }
  var o = "function" == typeof Symbol && Symbol.iterator,
    i = "@@iterator";
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r() {
    return o++;
  }
  var o = 1;
  e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    for (; e && e.firstChild;) e = e.firstChild;
    return e;
  }

  function o(e) {
    for (; e;) {
      if (e.nextSibling) return e.nextSibling;
      e = e.parentNode;
    }
  }

  function i(e, t) {
    for (var n = r(e), i = 0, a = 0; n;) {
      if (3 === n.nodeType) {
        if (a = i + n.textContent.length, i <= t && a >= t) return {
          node: n,
          offset: t - i
        };
        i = a;
      }
      n = r(o(n));
    }
  }
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    var n = {};
    return n[e.toLowerCase()] = t.toLowerCase(), n["Webkit" + e] = "webkit" + t, n["Moz" + e] = "moz" + t, n["ms" + e] = "MS" + t, n["O" + e] = "o" + t.toLowerCase(), n;
  }

  function o(e) {
    if (s[e]) return s[e];
    if (!a[e]) return e;
    var t = a[e];
    for (var n in t)
      if (t.hasOwnProperty(n) && n in u) return s[e] = t[n];
    return "";
  }
  var i = n(15),
    a = {
      animationend: r("Animation", "AnimationEnd"),
      animationiteration: r("Animation", "AnimationIteration"),
      animationstart: r("Animation", "AnimationStart"),
      transitionend: r("Transition", "TransitionEnd")
    },
    s = {},
    u = {};
  i.canUseDOM && (u = document.createElement("div").style, "AnimationEvent" in window || (delete a.animationend.animation, delete a.animationiteration.animation, delete a.animationstart.animation), "TransitionEvent" in window || delete a.transitionend.transition), e.exports = o;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return '"' + o(e) + '"';
  }
  var o = n(67);
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = n(274);
  e.exports = r.renderSubtreeIntoContainer;
}, function(e, t, n) {
  function r(e) {
    return e();
  }
  var o = n(1),
    i = n(19),
    a = n(429),
    s = o.createFactory(n(524)),
    u = n(525),
    l = n(428),
    c = n(19).unstable_renderSubtreeIntoContainer,
    d = n(155),
    f = a.canUseDOM ? window.HTMLElement : {},
    h = a.canUseDOM ? document.body : {
      appendChild: function() {}
    },
    p = o.createClass({
      displayName: "Modal",
      statics: {
        setAppElement: function(e) {
          h = u.setElement(e);
        },
        injectCSS: function() {}
      },
      propTypes: {
        isOpen: o.PropTypes.bool.isRequired,
        style: o.PropTypes.shape({
          content: o.PropTypes.object,
          overlay: o.PropTypes.object
        }),
        portalClassName: o.PropTypes.string,
        appElement: o.PropTypes.instanceOf(f),
        onAfterOpen: o.PropTypes.func,
        onRequestClose: o.PropTypes.func,
        closeTimeoutMS: o.PropTypes.number,
        ariaHideApp: o.PropTypes.bool,
        shouldCloseOnOverlayClick: o.PropTypes.bool,
        parentSelector: o.PropTypes.func,
        role: o.PropTypes.string,
        contentLabel: o.PropTypes.string.isRequired
      },
      getDefaultProps: function() {
        return {
          isOpen: !1,
          portalClassName: "ReactModalPortal",
          ariaHideApp: !0,
          closeTimeoutMS: 0,
          shouldCloseOnOverlayClick: !0,
          parentSelector: function() {
            return document.body;
          }
        };
      },
      componentDidMount: function() {
        this.node = document.createElement("div"), this.node.className = this.props.portalClassName, r(this.props.parentSelector).appendChild(this.node), this.renderPortal(this.props);
      },
      componentWillReceiveProps: function(e) {
        var t = r(this.props.parentSelector),
          n = r(e.parentSelector);
        n !== t && (t.removeChild(this.node), n.appendChild(this.node)), this.renderPortal(e);
      },
      componentWillUnmount: function() {
        this.props.ariaHideApp && u.show(this.props.appElement), i.unmountComponentAtNode(this.node), r(this.props.parentSelector).removeChild(this.node), l(document.body).remove("ReactModal__Body--open");
      },
      renderPortal: function(e) {
        e.isOpen ? l(document.body).add("ReactModal__Body--open") : l(document.body).remove("ReactModal__Body--open"), e.ariaHideApp && u.toggle(e.isOpen, e.appElement), this.portal = c(this, s(d({}, e, {
          defaultStyles: p.defaultStyles
        })), this.node);
      },
      render: function() {
        return o.DOM.noscript();
      }
    });
  p.defaultStyles = {
    overlay: {
      position: "fixed",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0,
      backgroundColor: "rgba(255, 255, 255, 0.75)"
    },
    content: {
      position: "absolute",
      top: "40px",
      left: "40px",
      right: "40px",
      bottom: "40px",
      border: "1px solid #ccc",
      background: "#fff",
      overflow: "auto",
      WebkitOverflowScrolling: "touch",
      borderRadius: "4px",
      outline: "none",
      padding: "20px"
    }
  }, e.exports = p;
}, function(e, t, n) {
  var r = n(1),
    o = r.DOM.div,
    i = n(526),
    a = n(527),
    s = n(155),
    u = {
      overlay: {
        base: "ReactModal__Overlay",
        afterOpen: "ReactModal__Overlay--after-open",
        beforeClose: "ReactModal__Overlay--before-close"
      },
      content: {
        base: "ReactModal__Content",
        afterOpen: "ReactModal__Content--after-open",
        beforeClose: "ReactModal__Content--before-close"
      }
    };
  e.exports = r.createClass({
    displayName: "ModalPortal",
    shouldClose: null,
    getDefaultProps: function() {
      return {
        style: {
          overlay: {},
          content: {}
        }
      };
    },
    getInitialState: function() {
      return {
        afterOpen: !1,
        beforeClose: !1
      };
    },
    componentDidMount: function() {
      this.props.isOpen && (this.setFocusAfterRender(!0), this.open());
    },
    componentWillUnmount: function() {
      clearTimeout(this.closeTimer);
    },
    componentWillReceiveProps: function(e) {
      !this.props.isOpen && e.isOpen ? (this.setFocusAfterRender(!0), this.open()) : this.props.isOpen && !e.isOpen && this.close();
    },
    componentDidUpdate: function() {
      this.focusAfterRender && (this.focusContent(), this.setFocusAfterRender(!1));
    },
    setFocusAfterRender: function(e) {
      this.focusAfterRender = e;
    },
    open: function() {
      this.state.afterOpen && this.state.beforeClose ? (clearTimeout(this.closeTimer), this.setState({
        beforeClose: !1
      })) : (i.setupScopedFocus(this.node), i.markForFocusLater(), this.setState({
        isOpen: !0
      }, function() {
        this.setState({
          afterOpen: !0
        }), this.props.isOpen && this.props.onAfterOpen && this.props.onAfterOpen();
      }.bind(this)));
    },
    close: function() {
      this.props.closeTimeoutMS > 0 ? this.closeWithTimeout() : this.closeWithoutTimeout();
    },
    focusContent: function() {
      this.contentHasFocus() || this.refs.content.focus();
    },
    closeWithTimeout: function() {
      this.setState({
        beforeClose: !0
      }, function() {
        this.closeTimer = setTimeout(this.closeWithoutTimeout, this.props.closeTimeoutMS);
      }.bind(this));
    },
    closeWithoutTimeout: function() {
      this.setState({
        beforeClose: !1,
        isOpen: !1,
        afterOpen: !1
      }, this.afterClose);
    },
    afterClose: function() {
      i.returnFocus(), i.teardownScopedFocus();
    },
    handleKeyDown: function(e) {
      9 == e.keyCode && a(this.refs.content, e), 27 == e.keyCode && (e.preventDefault(), this.requestClose(e));
    },
    handleOverlayMouseDown: function(e) {
      null === this.shouldClose && (this.shouldClose = !0);
    },
    handleOverlayMouseUp: function(e) {
      this.shouldClose && this.props.shouldCloseOnOverlayClick && (this.ownerHandlesClose() ? this.requestClose(e) : this.focusContent()), this.shouldClose = null;
    },
    handleContentMouseDown: function(e) {
      this.shouldClose = !1;
    },
    handleContentMouseUp: function(e) {
      this.shouldClose = !1;
    },
    requestClose: function(e) {
      this.ownerHandlesClose() && this.props.onRequestClose(e);
    },
    ownerHandlesClose: function() {
      return this.props.onRequestClose;
    },
    shouldBeClosed: function() {
      return !this.props.isOpen && !this.state.beforeClose;
    },
    contentHasFocus: function() {
      return document.activeElement === this.refs.content || this.refs.content.contains(document.activeElement);
    },
    buildClassName: function(e, t) {
      var n = u[e].base;
      return this.state.afterOpen && (n += " " + u[e].afterOpen), this.state.beforeClose && (n += " " + u[e].beforeClose), t ? n + " " + t : n;
    },
    render: function() {
      var e = this.props.className ? {} : this.props.defaultStyles.content,
        t = this.props.overlayClassName ? {} : this.props.defaultStyles.overlay;
      return this.shouldBeClosed() ? o() : o({
        ref: "overlay",
        className: this.buildClassName("overlay", this.props.overlayClassName),
        style: s({}, t, this.props.style.overlay || {}),
        onMouseDown: this.handleOverlayMouseDown,
        onMouseUp: this.handleOverlayMouseUp
      }, o({
        ref: "content",
        style: s({}, e, this.props.style.content || {}),
        className: this.buildClassName("content", this.props.className),
        tabIndex: "-1",
        onKeyDown: this.handleKeyDown,
        onMouseDown: this.handleContentMouseDown,
        onMouseUp: this.handleContentMouseUp,
        role: this.props.role,
        "aria-label": this.props.contentLabel
      }, this.props.children));
    }
  });
}, function(e, t) {
  function n(e) {
    if ("string" == typeof e) {
      var t = document.querySelectorAll(e);
      e = "length" in t ? t[0] : t;
    }
    return u = e || u;
  }

  function r(e) {
    a(e), (e || u).setAttribute("aria-hidden", "true");
  }

  function o(e) {
    a(e), (e || u).removeAttribute("aria-hidden");
  }

  function i(e, t) {
    e ? r(t) : o(t);
  }

  function a(e) {
    if (!e && !u) throw new Error("react-modal: You must set an element with `Modal.setAppElement(el)` to make this accessible");
  }

  function s() {
    u = document.body;
  }
  var u = "undefined" != typeof document ? document.body : null;
  t.toggle = i, t.setElement = n, t.show = o, t.hide = r, t.resetForTesting = s;
}, function(e, t, n) {
  function r(e) {
    u = !0;
  }

  function o(e) {
    if (u) {
      if (u = !1, !a) return;
      setTimeout(function() {
        a.contains(document.activeElement) || (i(a)[0] || a).focus();
      }, 0);
    }
  }
  var i = n(285),
    a = null,
    s = null,
    u = !1;
  t.markForFocusLater = function() {
    s = document.activeElement;
  }, t.returnFocus = function() {
    try {
      s.focus();
    } catch (e) {
      console.warn("You tried to return focus to " + s + " but it is not in the DOM anymore");
    }
    s = null;
  }, t.setupScopedFocus = function(e) {
    a = e, window.addEventListener ? (window.addEventListener("blur", r, !1), document.addEventListener("focus", o, !0)) : (window.attachEvent("onBlur", r), document.attachEvent("onFocus", o));
  }, t.teardownScopedFocus = function() {
    a = null, window.addEventListener ? (window.removeEventListener("blur", r), document.removeEventListener("focus", o)) : (window.detachEvent("onBlur", r), document.detachEvent("onFocus", o));
  };
}, function(e, t, n) {
  var r = n(285);
  e.exports = function(e, t) {
    var n = r(e);
    if (!n.length) return void t.preventDefault();
    n[t.shiftKey ? 0 : n.length - 1] !== document.activeElement && e !== document.activeElement || (t.preventDefault(), n[t.shiftKey ? n.length - 1 : 0].focus());
  };
}, function(e, t, n) {
  e.exports = n(523);
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o(e, t) {
    if (!e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !t || "object" != typeof t && "function" != typeof t ? e : t;
  }

  function i(e, t) {
    if ("function" != typeof t && null !== t) throw new TypeError("Super expression must either be null or a function, not " + typeof t);
    e.prototype = Object.create(t && t.prototype, {
      constructor: {
        value: e,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), t && (Object.setPrototypeOf ? Object.setPrototypeOf(e, t) : e.__proto__ = t);
  }
  var a = n(1),
    s = (n.n(a), n(288));
  n(115), n.d(t, "a", function() {
    return u;
  });
  var u = function(e) {
    function t(n, i) {
      r(this, t);
      var a = o(this, e.call(this, n, i));
      return a.store = n.store, a;
    }
    return i(t, e), t.prototype.getChildContext = function() {
      return {
        store: this.store,
        storeSubscription: null
      };
    }, t.prototype.render = function() {
      return a.Children.only(this.props.children);
    }, t;
  }(a.Component);
  u.propTypes = {
    store: s.a.isRequired,
    children: a.PropTypes.element.isRequired
  }, u.childContextTypes = {
    store: s.a.isRequired,
    storeSubscription: s.b
  }, u.displayName = "Provider";
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    var n = {};
    for (var r in e) t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);
    return n;
  }

  function o(e, t, n) {
    for (var r = t.length - 1; r >= 0; r--) {
      var o = t[r](e);
      if (o) return o;
    }
    return function(t, r) {
      throw new Error("Invalid value of type " + typeof e + " for " + n + " argument when connecting component " + r.wrappedComponentName + ".");
    };
  }

  function i(e, t) {
    return e === t;
  }
  var a = n(286),
    s = n(537),
    u = n(531),
    l = n(532),
    c = n(533),
    d = n(534),
    f = Object.assign || function(e) {
      for (var t = 1; t < arguments.length; t++) {
        var n = arguments[t];
        for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
      }
      return e;
    };
  t.a = function() {
    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
      t = e.connectHOC,
      n = void 0 === t ? a.a : t,
      h = e.mapStateToPropsFactories,
      p = void 0 === h ? l.a : h,
      _ = e.mapDispatchToPropsFactories,
      m = void 0 === _ ? u.a : _,
      y = e.mergePropsFactories,
      v = void 0 === y ? c.a : y,
      g = e.selectorFactory,
      M = void 0 === g ? d.a : g;
    return function(e, t, a) {
      var u = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
        l = u.pure,
        c = void 0 === l || l,
        d = u.areStatesEqual,
        h = void 0 === d ? i : d,
        _ = u.areOwnPropsEqual,
        y = void 0 === _ ? s.a : _,
        g = u.areStatePropsEqual,
        b = void 0 === g ? s.a : g,
        w = u.areMergedPropsEqual,
        k = void 0 === w ? s.a : w,
        L = r(u, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]),
        T = o(e, p, "mapStateToProps"),
        S = o(t, m, "mapDispatchToProps"),
        Y = o(a, v, "mergeProps");
      return n(M, f({
        methodName: "connect",
        getDisplayName: function(e) {
          return "Connect(" + e + ")";
        },
        shouldHandleStateChanges: Boolean(e),
        initMapStateToProps: T,
        initMapDispatchToProps: S,
        initMergeProps: Y,
        pure: c,
        areStatesEqual: h,
        areOwnPropsEqual: y,
        areStatePropsEqual: b,
        areMergedPropsEqual: k
      }, L));
    };
  }();
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return "function" == typeof e ? n.i(s.a)(e, "mapDispatchToProps") : void 0;
  }

  function o(e) {
    return e ? void 0 : n.i(s.b)(function(e) {
      return {
        dispatch: e
      };
    });
  }

  function i(e) {
    return e && "object" == typeof e ? n.i(s.b)(function(t) {
      return n.i(a.a)(e, t);
    }) : void 0;
  }
  var a = n(71),
    s = n(287);
  t.a = [r, o, i];
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return "function" == typeof e ? n.i(i.a)(e, "mapStateToProps") : void 0;
  }

  function o(e) {
    return e ? void 0 : n.i(i.b)(function() {
      return {};
    });
  }
  var i = n(287);
  t.a = [r, o];
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return s({}, n, e, t);
  }

  function o(e) {
    return function(t, n) {
      var r = (n.displayName, n.pure),
        o = n.areMergedPropsEqual,
        i = !1,
        a = void 0;
      return function(t, n, s) {
        var u = e(t, n, s);
        return i ? r && o(u, a) || (a = u) : (i = !0, a = u), a;
      };
    };
  }

  function i(e) {
    return "function" == typeof e ? o(e) : void 0;
  }

  function a(e) {
    return e ? void 0 : function() {
      return r;
    };
  }
  var s = (n(289), Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  });
  t.a = [i, a];
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    var n = {};
    for (var r in e) t.indexOf(r) >= 0 || Object.prototype.hasOwnProperty.call(e, r) && (n[r] = e[r]);
    return n;
  }

  function o(e, t, n, r) {
    return function(o, i) {
      return n(e(o, i), t(r, i), i);
    };
  }

  function i(e, t, n, r, o) {
    function i(o, i) {
      return p = o, _ = i, m = e(p, _), y = t(r, _), v = n(m, y, _), h = !0, v;
    }

    function a() {
      return m = e(p, _), t.dependsOnOwnProps && (y = t(r, _)), v = n(m, y, _);
    }

    function s() {
      return e.dependsOnOwnProps && (m = e(p, _)), t.dependsOnOwnProps && (y = t(r, _)), v = n(m, y, _);
    }

    function u() {
      var t = e(p, _),
        r = !f(t, m);
      return m = t, r && (v = n(m, y, _)), v;
    }

    function l(e, t) {
      var n = !d(t, _),
        r = !c(e, p);
      return p = e, _ = t, n && r ? a() : n ? s() : r ? u() : v;
    }
    var c = o.areStatesEqual,
      d = o.areOwnPropsEqual,
      f = o.areStatePropsEqual,
      h = !1,
      p = void 0,
      _ = void 0,
      m = void 0,
      y = void 0,
      v = void 0;
    return function(e, t) {
      return h ? l(e, t) : i(e, t);
    };
  }

  function a(e, t) {
    var n = t.initMapStateToProps,
      a = t.initMapDispatchToProps,
      s = t.initMergeProps,
      u = r(t, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]),
      l = n(e, u),
      c = a(e, u),
      d = s(e, u);
    return (u.pure ? i : o)(l, c, d, e, u);
  }
  n(535), t.a = a;
}, function(e, t, n) {
  "use strict";
  n(115);
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
  }

  function o() {
    var e = [],
      t = [];
    return {
      clear: function() {
        t = i, e = i;
      },
      notify: function() {
        for (var n = e = t, r = 0; r < n.length; r++) n[r]();
      },
      subscribe: function(n) {
        var r = !0;
        return t === e && (t = e.slice()), t.push(n),
          function() {
            r && e !== i && (r = !1, t === e && (t = e.slice()), t.splice(t.indexOf(n), 1));
          };
      }
    };
  }
  n.d(t, "a", function() {
    return s;
  });
  var i = null,
    a = {
      notify: function() {}
    },
    s = function() {
      function e(t, n, o) {
        r(this, e), this.store = t, this.parentSub = n, this.onStateChange = o, this.unsubscribe = null, this.listeners = a;
      }
      return e.prototype.addNestedSub = function(e) {
        return this.trySubscribe(), this.listeners.subscribe(e);
      }, e.prototype.notifyNestedSubs = function() {
        this.listeners.notify();
      }, e.prototype.isSubscribed = function() {
        return Boolean(this.unsubscribe);
      }, e.prototype.trySubscribe = function() {
        this.unsubscribe || (this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange), this.listeners = o());
      }, e.prototype.tryUnsubscribe = function() {
        this.unsubscribe && (this.unsubscribe(), this.unsubscribe = null, this.listeners.clear(), this.listeners = a);
      }, e;
    }();
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return e === t ? 0 !== e || 0 !== t || 1 / e == 1 / t : e !== e && t !== t;
  }

  function o(e, t) {
    if (r(e, t)) return !0;
    if ("object" != typeof e || null === e || "object" != typeof t || null === t) return !1;
    var n = Object.keys(e),
      o = Object.keys(t);
    if (n.length !== o.length) return !1;
    for (var a = 0; a < n.length; a++)
      if (!i.call(t, n[a]) || !r(e[n[a]], t[n[a]])) return !1;
    return !0;
  }
  t.a = o;
  var i = Object.prototype.hasOwnProperty;
}, function(e, t, n) {
  var r = n(539);
  e.exports = r;
}, function(e, t, n) {
  "use strict";
  var r = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol ? "symbol" : typeof e;
    },
    o = n(455),
    i = n(454),
    a = n(541),
    s = n(540),
    u = function(e) {
      return function t(n) {
        var u = arguments.length <= 1 || void 0 === arguments[1] ? e : arguments[1],
          l = arguments.length <= 2 || void 0 === arguments[2] ? "0" : arguments[2],
          c = a(u),
          d = function(e) {
            return [l, "-", e].join("");
          };
        if (0 === c.length) return [n];
        var f = function() {
          var e = c[0],
            r = u[e],
            a = o(u, e),
            l = function(e, n) {
              var r = d(n);
              return t(e, a, r);
            },
            f = function(e, n) {
              var s = r.textFn || i,
                u = s(e),
                l = r.ignore || [],
                c = o(a, l),
                f = d(n),
                h = t(u, c, f);
              return r.matcherFn(u, h, f);
            };
          return {
            v: s(n, r.pattern, f, l)
          };
        }();
        return "object" === (void 0 === f ? "undefined" : r(f)) ? f.v : void 0;
      };
    };
  e.exports = u;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if (Array.isArray(e)) {
      for (var t = 0, n = Array(e.length); t < e.length; t++) n[t] = e[t];
      return n;
    }
    return Array.from(e);
  }
  var o = n(456),
    i = function(e) {
      return e % 2 == 0;
    };
  e.exports = function(e, t, n, a) {
    var s = e.split(t);
    return o(s, function(e, t, o) {
      var s = void 0;
      return i(o) ? (s = a(t, o), [].concat(r(e), r(s))) : [].concat(r(e), [n(t, o)]);
    }, []);
  };
}, function(e, t) {
  function n(e, t) {
    for (var n = -1, r = Array(e); ++n < e;) r[n] = t(n);
    return r;
  }

  function r(e, t) {
    var r = T(e) || s(e) ? n(e.length, String) : [],
      o = r.length,
      a = !!o;
    for (var u in e) !t && !b.call(e, u) || a && ("length" == u || i(u, o)) || r.push(u);
    return r;
  }

  function o(e) {
    if (!a(e)) return L(e);
    var t = [];
    for (var n in Object(e)) b.call(e, n) && "constructor" != n && t.push(n);
    return t;
  }

  function i(e, t) {
    return !!(t = null == t ? _ : t) && ("number" == typeof e || g.test(e)) && e > -1 && e % 1 == 0 && e < t;
  }

  function a(e) {
    var t = e && e.constructor;
    return e === ("function" == typeof t && t.prototype || M);
  }

  function s(e) {
    return l(e) && b.call(e, "callee") && (!k.call(e, "callee") || w.call(e) == m);
  }

  function u(e) {
    return null != e && d(e.length) && !c(e);
  }

  function l(e) {
    return h(e) && u(e);
  }

  function c(e) {
    var t = f(e) ? w.call(e) : "";
    return t == y || t == v;
  }

  function d(e) {
    return "number" == typeof e && e > -1 && e % 1 == 0 && e <= _;
  }

  function f(e) {
    var t = typeof e;
    return !!e && ("object" == t || "function" == t);
  }

  function h(e) {
    return !!e && "object" == typeof e;
  }

  function p(e) {
    return u(e) ? r(e) : o(e);
  }
  var _ = 9007199254740991,
    m = "[object Arguments]",
    y = "[object Function]",
    v = "[object GeneratorFunction]",
    g = /^(?:0|[1-9]\d*)$/,
    M = Object.prototype,
    b = M.hasOwnProperty,
    w = M.toString,
    k = M.propertyIsEnumerable,
    L = function(e, t) {
      return function(n) {
        return e(t(n));
      };
    }(Object.keys, Object),
    T = Array.isArray;
  e.exports = p;
}, function(e, t, n) {
  "use strict";
  n(290);
}, function(e, t, n) {
  "use strict";
  var r = n(291);
  n.d(t, "a", function() {
    return r.a;
  });
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return e + "-" + t;
  }
  var o = n(7),
    i = n.n(o),
    a = n(9),
    s = n.n(a);
  ! function() {
    function e() {
      var t = this,
        n = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      i()(this, e), this.columnWidth = function(e) {
        var n = e.index,
          r = t._keyMapper(0, n);
        return t._columnWidthCache.hasOwnProperty(r) ? t._columnWidthCache[r] : t._defaultWidth;
      }, this.rowHeight = function(e) {
        var n = e.index,
          r = t._keyMapper(n, 0);
        return t._rowHeightCache.hasOwnProperty(r) ? t._rowHeightCache[r] : t._defaultHeight;
      };
      var o = n.defaultHeight,
        a = n.defaultWidth,
        s = n.fixedHeight,
        u = n.fixedWidth,
        l = n.keyMapper,
        c = n.minHeight,
        d = n.minWidth;
      this._hasFixedHeight = !0 === s, this._hasFixedWidth = !0 === u, this._minHeight = c || 0, this._minWidth = d || 0, this._keyMapper = l || r, this._defaultHeight = Math.max(this._minHeight, "number" == typeof o ? o : 30), this._defaultWidth = Math.max(this._minWidth, "number" == typeof a ? a : 100), this._columnCount = 0, this._rowCount = 0, this._cellHeightCache = {}, this._cellWidthCache = {}, this._columnWidthCache = {}, this._rowHeightCache = {};
    }
    s()(e, [{
      key: "clear",
      value: function(e, t) {
        var n = this._keyMapper(e, t);
        delete this._cellHeightCache[n], delete this._cellWidthCache[n], this._updateCachedColumnAndRowSizes(e, t);
      }
    }, {
      key: "clearAll",
      value: function() {
        this._cellHeightCache = {}, this._cellWidthCache = {}, this._columnWidthCache = {}, this._rowHeightCache = {};
      }
    }, {
      key: "hasFixedHeight",
      value: function() {
        return this._hasFixedHeight;
      }
    }, {
      key: "hasFixedWidth",
      value: function() {
        return this._hasFixedWidth;
      }
    }, {
      key: "getHeight",
      value: function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
          n = this._keyMapper(e, t);
        return this._cellHeightCache.hasOwnProperty(n) ? Math.max(this._minHeight, this._cellHeightCache[n]) : this._defaultHeight;
      }
    }, {
      key: "getWidth",
      value: function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
          n = this._keyMapper(e, t);
        return this._cellWidthCache.hasOwnProperty(n) ? Math.max(this._minWidth, this._cellWidthCache[n]) : this._defaultWidth;
      }
    }, {
      key: "has",
      value: function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
          n = this._keyMapper(e, t);
        return this._cellHeightCache.hasOwnProperty(n);
      }
    }, {
      key: "set",
      value: function(e, t, n, r) {
        var o = this._keyMapper(e, t);
        t >= this._columnCount && (this._columnCount = t + 1), e >= this._rowCount && (this._rowCount = e + 1), this._cellHeightCache[o] = r, this._cellWidthCache[o] = n, this._updateCachedColumnAndRowSizes(e, t);
      }
    }, {
      key: "_updateCachedColumnAndRowSizes",
      value: function(e, t) {
        for (var n = 0, r = 0; r < this._rowCount; r++) n = Math.max(n, this.getWidth(r, t));
        for (var o = 0, i = 0; i < this._columnCount; i++) o = Math.max(o, this.getHeight(e, i));
        var a = this._keyMapper(0, t),
          s = this._keyMapper(e, 0);
        this._columnWidthCache[a] = n, this._rowHeightCache[s] = o;
      }
    }, {
      key: "defaultHeight",
      get: function() {
        return this._defaultHeight;
      }
    }, {
      key: "defaultWidth",
      get: function() {
        return this._defaultWidth;
      }
    }]);
  }();
}, function(e, t, n) {
  "use strict";
  n(292), n(544);
}, function(e, t, n) {
  "use strict";
  var r = n(26),
    o = n.n(r),
    i = n(11),
    a = n.n(i),
    s = n(7),
    u = n.n(s),
    l = n(9),
    c = n.n(l),
    d = n(13),
    f = n.n(d),
    h = n(12),
    p = n.n(h),
    _ = n(1),
    m = n.n(_),
    y = n(8),
    v = n.n(y),
    g = n(117),
    M = n(150),
    b = n.n(M),
    w = {
      OBSERVED: "observed",
      REQUESTED: "requested"
    },
    k = function(e) {
      function t(e, r) {
        u()(this, t);
        var o = f()(this, (t.__proto__ || a()(t)).call(this, e, r));
        return o.state = {
          isScrolling: !1,
          scrollLeft: 0,
          scrollTop: 0
        }, o._calculateSizeAndPositionDataOnNextUpdate = !1, o._onSectionRenderedMemoizer = n.i(g.a)(), o._onScrollMemoizer = n.i(g.a)(!1), o._invokeOnSectionRenderedHelper = o._invokeOnSectionRenderedHelper.bind(o), o._onScroll = o._onScroll.bind(o), o._setScrollingContainerRef = o._setScrollingContainerRef.bind(o), o._updateScrollPositionForScrollToCell = o._updateScrollPositionForScrollToCell.bind(o), o;
      }
      return p()(t, e), c()(t, [{
        key: "recomputeCellSizesAndPositions",
        value: function() {
          this._calculateSizeAndPositionDataOnNextUpdate = !0, this.forceUpdate();
        }
      }, {
        key: "componentDidMount",
        value: function() {
          var e = this.props,
            t = e.cellLayoutManager,
            n = e.scrollLeft,
            r = e.scrollToCell,
            o = e.scrollTop;
          this._scrollbarSizeMeasured || (this._scrollbarSize = b()(), this._scrollbarSizeMeasured = !0, this.setState({})), r >= 0 ? this._updateScrollPositionForScrollToCell() : (n >= 0 || o >= 0) && this._setScrollPosition({
            scrollLeft: n,
            scrollTop: o
          }), this._invokeOnSectionRenderedHelper();
          var i = t.getTotalSize(),
            a = i.height,
            s = i.width;
          this._invokeOnScrollMemoizer({
            scrollLeft: n || 0,
            scrollTop: o || 0,
            totalHeight: a,
            totalWidth: s
          });
        }
      }, {
        key: "componentDidUpdate",
        value: function(e, t) {
          var n = this.props,
            r = n.height,
            o = n.scrollToAlignment,
            i = n.scrollToCell,
            a = n.width,
            s = this.state,
            u = s.scrollLeft,
            l = s.scrollPositionChangeReason,
            c = s.scrollTop;
          l === w.REQUESTED && (u >= 0 && u !== t.scrollLeft && u !== this._scrollingContainer.scrollLeft && (this._scrollingContainer.scrollLeft = u), c >= 0 && c !== t.scrollTop && c !== this._scrollingContainer.scrollTop && (this._scrollingContainer.scrollTop = c)), r === e.height && o === e.scrollToAlignment && i === e.scrollToCell && a === e.width || this._updateScrollPositionForScrollToCell(), this._invokeOnSectionRenderedHelper();
        }
      }, {
        key: "componentWillMount",
        value: function() {
          this.props.cellLayoutManager.calculateSizeAndPositionData(), this._scrollbarSize = b()(), void 0 === this._scrollbarSize ? (this._scrollbarSizeMeasured = !1, this._scrollbarSize = 0) : this._scrollbarSizeMeasured = !0;
        }
      }, {
        key: "componentWillUnmount",
        value: function() {
          this._disablePointerEventsTimeoutId && clearTimeout(this._disablePointerEventsTimeoutId);
        }
      }, {
        key: "componentWillReceiveProps",
        value: function(e) {
          var t = this.state,
            n = t.scrollLeft,
            r = t.scrollTop;
          0 !== e.cellCount || 0 === n && 0 === r ? e.scrollLeft === this.props.scrollLeft && e.scrollTop === this.props.scrollTop || this._setScrollPosition({
            scrollLeft: e.scrollLeft,
            scrollTop: e.scrollTop
          }) : this._setScrollPosition({
            scrollLeft: 0,
            scrollTop: 0
          }), (e.cellCount !== this.props.cellCount || e.cellLayoutManager !== this.props.cellLayoutManager || this._calculateSizeAndPositionDataOnNextUpdate) && e.cellLayoutManager.calculateSizeAndPositionData(), this._calculateSizeAndPositionDataOnNextUpdate && (this._calculateSizeAndPositionDataOnNextUpdate = !1);
        }
      }, {
        key: "render",
        value: function() {
          var e = this.props,
            t = e.autoHeight,
            n = e.cellCount,
            r = e.cellLayoutManager,
            i = e.className,
            a = e.height,
            s = e.horizontalOverscanSize,
            u = e.id,
            l = e.noContentRenderer,
            c = e.style,
            d = e.verticalOverscanSize,
            f = e.width,
            h = this.state,
            p = h.isScrolling,
            _ = h.scrollLeft,
            y = h.scrollTop,
            g = r.getTotalSize(),
            M = g.height,
            b = g.width,
            w = Math.max(0, _ - s),
            k = Math.max(0, y - d),
            L = Math.min(b, _ + f + s),
            T = Math.min(M, y + a + d),
            S = a > 0 && f > 0 ? r.cellRenderers({
              height: T - k,
              isScrolling: p,
              width: L - w,
              x: w,
              y: k
            }) : [],
            Y = {
              boxSizing: "border-box",
              direction: "ltr",
              height: t ? "auto" : a,
              position: "relative",
              WebkitOverflowScrolling: "touch",
              width: f,
              willChange: "transform"
            },
            D = M > a ? this._scrollbarSize : 0,
            x = b > f ? this._scrollbarSize : 0;
          return Y.overflowX = b + D <= f ? "hidden" : "auto", Y.overflowY = M + x <= a ? "hidden" : "auto", m.a.createElement("div", {
            ref: this._setScrollingContainerRef,
            "aria-label": this.props["aria-label"],
            className: v()("ReactVirtualized__Collection", i),
            id: u,
            onScroll: this._onScroll,
            role: "grid",
            style: o()({}, Y, c),
            tabIndex: 0
          }, n > 0 && m.a.createElement("div", {
            className: "ReactVirtualized__Collection__innerScrollContainer",
            style: {
              height: M,
              maxHeight: M,
              maxWidth: b,
              overflow: "hidden",
              pointerEvents: p ? "none" : "",
              width: b
            }
          }, S), 0 === n && l());
        }
      }, {
        key: "_enablePointerEventsAfterDelay",
        value: function() {
          var e = this;
          this._disablePointerEventsTimeoutId && clearTimeout(this._disablePointerEventsTimeoutId), this._disablePointerEventsTimeoutId = setTimeout(function() {
            (0, e.props.isScrollingChange)(!1), e._disablePointerEventsTimeoutId = null, e.setState({
              isScrolling: !1
            });
          }, 150);
        }
      }, {
        key: "_invokeOnSectionRenderedHelper",
        value: function() {
          var e = this.props,
            t = e.cellLayoutManager,
            n = e.onSectionRendered;
          this._onSectionRenderedMemoizer({
            callback: n,
            indices: {
              indices: t.getLastRenderedIndices()
            }
          });
        }
      }, {
        key: "_invokeOnScrollMemoizer",
        value: function(e) {
          var t = this,
            n = e.scrollLeft,
            r = e.scrollTop,
            o = e.totalHeight,
            i = e.totalWidth;
          this._onScrollMemoizer({
            callback: function(e) {
              var n = e.scrollLeft,
                r = e.scrollTop,
                a = t.props,
                s = a.height;
              (0, a.onScroll)({
                clientHeight: s,
                clientWidth: a.width,
                scrollHeight: o,
                scrollLeft: n,
                scrollTop: r,
                scrollWidth: i
              });
            },
            indices: {
              scrollLeft: n,
              scrollTop: r
            }
          });
        }
      }, {
        key: "_setScrollingContainerRef",
        value: function(e) {
          this._scrollingContainer = e;
        }
      }, {
        key: "_setScrollPosition",
        value: function(e) {
          var t = e.scrollLeft,
            n = e.scrollTop,
            r = {
              scrollPositionChangeReason: w.REQUESTED
            };
          t >= 0 && (r.scrollLeft = t), n >= 0 && (r.scrollTop = n), (t >= 0 && t !== this.state.scrollLeft || n >= 0 && n !== this.state.scrollTop) && this.setState(r);
        }
      }, {
        key: "_updateScrollPositionForScrollToCell",
        value: function() {
          var e = this.props,
            t = e.cellLayoutManager,
            n = e.height,
            r = e.scrollToAlignment,
            o = e.scrollToCell,
            i = e.width,
            a = this.state,
            s = a.scrollLeft,
            u = a.scrollTop;
          if (o >= 0) {
            var l = t.getScrollPositionForCell({
              align: r,
              cellIndex: o,
              height: n,
              scrollLeft: s,
              scrollTop: u,
              width: i
            });
            l.scrollLeft === s && l.scrollTop === u || this._setScrollPosition(l);
          }
        }
      }, {
        key: "_onScroll",
        value: function(e) {
          if (e.target === this._scrollingContainer) {
            this._enablePointerEventsAfterDelay();
            var t = this.props,
              n = t.cellLayoutManager,
              r = t.height,
              o = t.isScrollingChange,
              i = t.width,
              a = this._scrollbarSize,
              s = n.getTotalSize(),
              u = s.height,
              l = s.width,
              c = Math.max(0, Math.min(l - i + a, e.target.scrollLeft)),
              d = Math.max(0, Math.min(u - r + a, e.target.scrollTop));
            if (this.state.scrollLeft !== c || this.state.scrollTop !== d) {
              var f = e.cancelable ? w.OBSERVED : w.REQUESTED;
              this.state.isScrolling || o(!0), this.setState({
                isScrolling: !0,
                scrollLeft: c,
                scrollPositionChangeReason: f,
                scrollTop: d
              });
            }
            this._invokeOnScrollMemoizer({
              scrollLeft: c,
              scrollTop: d,
              totalWidth: l,
              totalHeight: u
            });
          }
        }
      }]), t;
    }(_.PureComponent);
  k.defaultProps = {
    "aria-label": "grid",
    horizontalOverscanSize: 0,
    noContentRenderer: function() {
      return null;
    },
    onScroll: function() {
      return null;
    },
    onSectionRendered: function() {
      return null;
    },
    scrollToAlignment: "auto",
    scrollToCell: -1,
    style: {},
    verticalOverscanSize: 0
  }, t.a = k;
}, function(e, t, n) {
  "use strict";
  var r = n(7),
    o = n.n(r),
    i = n(9),
    a = n.n(i),
    s = function() {
      function e(t) {
        var n = t.height,
          r = t.width,
          i = t.x,
          a = t.y;
        o()(this, e), this.height = n, this.width = r, this.x = i, this.y = a, this._indexMap = {}, this._indices = [];
      }
      return a()(e, [{
        key: "addCellIndex",
        value: function(e) {
          var t = e.index;
          this._indexMap[t] || (this._indexMap[t] = !0, this._indices.push(t));
        }
      }, {
        key: "getCellIndices",
        value: function() {
          return this._indices;
        }
      }, {
        key: "toString",
        value: function() {
          return this.x + "," + this.y + " " + this.width + "x" + this.height;
        }
      }]), e;
    }();
  t.a = s;
}, function(e, t, n) {
  "use strict";
  var r = n(138),
    o = n.n(r),
    i = n(7),
    a = n.n(i),
    s = n(9),
    u = n.n(s),
    l = n(547),
    c = 100,
    d = function() {
      function e() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : c;
        a()(this, e), this._sectionSize = t, this._cellMetadata = [], this._sections = {};
      }
      return u()(e, [{
        key: "getCellIndices",
        value: function(e) {
          var t = e.height,
            n = e.width,
            r = e.x,
            i = e.y,
            a = {};
          return this.getSections({
            height: t,
            width: n,
            x: r,
            y: i
          }).forEach(function(e) {
            return e.getCellIndices().forEach(function(e) {
              a[e] = e;
            });
          }), o()(a).map(function(e) {
            return a[e];
          });
        }
      }, {
        key: "getCellMetadata",
        value: function(e) {
          var t = e.index;
          return this._cellMetadata[t];
        }
      }, {
        key: "getSections",
        value: function(e) {
          for (var t = e.height, n = e.width, r = e.x, o = e.y, i = Math.floor(r / this._sectionSize), a = Math.floor((r + n - 1) / this._sectionSize), s = Math.floor(o / this._sectionSize), u = Math.floor((o + t - 1) / this._sectionSize), c = [], d = i; d <= a; d++)
            for (var f = s; f <= u; f++) {
              var h = d + "." + f;
              this._sections[h] || (this._sections[h] = new l.a({
                height: this._sectionSize,
                width: this._sectionSize,
                x: d * this._sectionSize,
                y: f * this._sectionSize
              })), c.push(this._sections[h]);
            }
          return c;
        }
      }, {
        key: "getTotalSectionCount",
        value: function() {
          return o()(this._sections).length;
        }
      }, {
        key: "toString",
        value: function() {
          var e = this;
          return o()(this._sections).map(function(t) {
            return e._sections[t].toString();
          });
        }
      }, {
        key: "registerCell",
        value: function(e) {
          var t = e.cellMetadatum,
            n = e.index;
          this._cellMetadata[n] = t, this.getSections(t).forEach(function(e) {
            return e.addCellIndex({
              index: n
            });
          });
        }
      }]), e;
    }();
  t.a = d;
}, function(e, t, n) {
  "use strict";
  n(293);
}, function(e, t, n) {
  "use strict";

  function r(e) {
    for (var t = e.cellCount, n = e.cellSizeAndPositionGetter, r = e.sectionSize, i = [], a = new o.a(r), s = 0, u = 0, l = 0; l < t; l++) {
      var c = n({
        index: l
      });
      if (null == c.height || isNaN(c.height) || null == c.width || isNaN(c.width) || null == c.x || isNaN(c.x) || null == c.y || isNaN(c.y)) throw Error("Invalid metadata returned for cell " + l + ":\n        x:" + c.x + ", y:" + c.y + ", width:" + c.width + ", height:" + c.height);
      s = Math.max(s, c.y + c.height), u = Math.max(u, c.x + c.width), i[l] = c, a.registerCell({
        cellMetadatum: c,
        index: l
      });
    }
    return {
      cellMetadata: i,
      height: s,
      sectionManager: a,
      width: u
    };
  }
  var o = n(548);
  t.a = r;
}, function(e, t, n) {
  "use strict";
  n(294);
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = (e.direction, e.cellCount),
      n = e.overscanCellsCount,
      r = e.scrollDirection,
      a = e.startIndex,
      s = e.stopIndex,
      u = void 0,
      l = void 0;
    switch (n = Math.max(1, n), r) {
      case i:
        u = a - 1, l = s + n;
        break;
      case o:
        u = a - n, l = s + 1;
    }
    return {
      overscanStartIndex: Math.max(0, u),
      overscanStopIndex: Math.min(t - 1, l)
    };
  }
  t.a = r;
  var o = -1,
    i = 1;
}, function(e, t, n) {
  "use strict";
  var r = n(7),
    o = n.n(r),
    i = n(9),
    a = n.n(i),
    s = function() {
      function e(t) {
        var n = t.batchAllCells,
          r = void 0 !== n && n,
          i = t.cellCount,
          a = t.cellSizeGetter,
          s = t.estimatedCellSize;
        o()(this, e), this._batchAllCells = r, this._cellSizeGetter = a, this._cellCount = i, this._estimatedCellSize = s, this._cellSizeAndPositionData = {}, this._lastMeasuredIndex = -1, this._lastBatchedIndex = -1;
      }
      return a()(e, [{
        key: "areOffsetsAdjusted",
        value: function() {
          return !1;
        }
      }, {
        key: "configure",
        value: function(e) {
          var t = e.cellCount,
            n = e.estimatedCellSize;
          this._cellCount = t, this._estimatedCellSize = n;
        }
      }, {
        key: "getCellCount",
        value: function() {
          return this._cellCount;
        }
      }, {
        key: "getEstimatedCellSize",
        value: function() {
          return this._estimatedCellSize;
        }
      }, {
        key: "getLastMeasuredIndex",
        value: function() {
          return this._lastMeasuredIndex;
        }
      }, {
        key: "getOffsetAdjustment",
        value: function(e) {
          return e.containerSize, e.offset, 0;
        }
      }, {
        key: "getSizeAndPositionOfCell",
        value: function(e) {
          if (e < 0 || e >= this._cellCount) throw Error("Requested index " + e + " is outside of range 0.." + this._cellCount);
          if (e > this._lastMeasuredIndex)
            for (var t = this.getSizeAndPositionOfLastMeasuredCell(), n = t.offset + t.size, r = this._lastMeasuredIndex + 1; r <= e; r++) {
              var o = this._cellSizeGetter({
                index: r
              });
              if (void 0 === o || isNaN(o)) throw Error("Invalid size returned for cell " + r + " of value " + o);
              null === o ? (this._cellSizeAndPositionData[r] = {
                offset: n,
                size: 0
              }, this._lastBatchedIndex = e) : (this._cellSizeAndPositionData[r] = {
                offset: n,
                size: o
              }, n += o, this._lastMeasuredIndex = e);
            }
          return this._cellSizeAndPositionData[e];
        }
      }, {
        key: "getSizeAndPositionOfLastMeasuredCell",
        value: function() {
          return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {
            offset: 0,
            size: 0
          };
        }
      }, {
        key: "getTotalSize",
        value: function() {
          var e = this.getSizeAndPositionOfLastMeasuredCell();
          return e.offset + e.size + (this._cellCount - this._lastMeasuredIndex - 1) * this._estimatedCellSize;
        }
      }, {
        key: "getUpdatedOffsetForIndex",
        value: function(e) {
          var t = e.align,
            n = void 0 === t ? "auto" : t,
            r = e.containerSize,
            o = e.currentOffset,
            i = e.targetIndex;
          if (r <= 0) return 0;
          var a = this.getSizeAndPositionOfCell(i),
            s = a.offset,
            u = s - r + a.size,
            l = void 0;
          switch (n) {
            case "start":
              l = s;
              break;
            case "end":
              l = u;
              break;
            case "center":
              l = s - (r - a.size) / 2;
              break;
            default:
              l = Math.max(u, Math.min(s, o));
          }
          var c = this.getTotalSize();
          return Math.max(0, Math.min(c - r, l));
        }
      }, {
        key: "getVisibleCellRange",
        value: function(e) {
          if (this._batchAllCells) return {
            start: 0,
            stop: this._cellCount - 1
          };
          var t = e.containerSize,
            n = e.offset;
          if (0 === this.getTotalSize()) return {};
          var r = n + t,
            o = this._findNearestCell(n),
            i = this.getSizeAndPositionOfCell(o);
          n = i.offset + i.size;
          for (var a = o; n < r && a < this._cellCount - 1;) a++, n += this.getSizeAndPositionOfCell(a).size;
          return {
            start: o,
            stop: a
          };
        }
      }, {
        key: "resetCell",
        value: function(e) {
          this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, e - 1);
        }
      }, {
        key: "_binarySearch",
        value: function(e) {
          for (var t = e.high, n = e.low, r = e.offset, o = void 0, i = void 0; n <= t;) {
            if (o = n + Math.floor((t - n) / 2), (i = this.getSizeAndPositionOfCell(o).offset) === r) return o;
            i < r ? n = o + 1 : i > r && (t = o - 1);
          }
          if (n > 0) return n - 1;
        }
      }, {
        key: "_exponentialSearch",
        value: function(e) {
          for (var t = e.index, n = e.offset, r = 1; t < this._cellCount && this.getSizeAndPositionOfCell(t).offset < n;) t += r, r *= 2;
          return this._binarySearch({
            high: Math.min(t, this._cellCount - 1),
            low: Math.floor(t / 2),
            offset: n
          });
        }
      }, {
        key: "_findNearestCell",
        value: function(e) {
          if (isNaN(e)) throw Error("Invalid offset " + e + " specified");
          e = Math.max(0, e);
          var t = this.getSizeAndPositionOfLastMeasuredCell(),
            n = Math.max(0, this._lastMeasuredIndex);
          return t.offset >= e ? this._binarySearch({
            high: n,
            low: 0,
            offset: e
          }) : this._exponentialSearch({
            index: n,
            offset: e
          });
        }
      }]), e;
    }();
  t.a = s;
}, function(e, t, n) {
  "use strict";
  var r = n(59),
    o = n.n(r),
    i = n(7),
    a = n.n(i),
    s = n(9),
    u = n.n(s),
    l = n(553),
    c = 15e5,
    d = function() {
      function e(t) {
        var n = t.maxScrollSize,
          r = void 0 === n ? c : n,
          i = o()(t, ["maxScrollSize"]);
        a()(this, e), this._cellSizeAndPositionManager = new l.a(i), this._maxScrollSize = r;
      }
      return u()(e, [{
        key: "areOffsetsAdjusted",
        value: function() {
          return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;
        }
      }, {
        key: "configure",
        value: function(e) {
          this._cellSizeAndPositionManager.configure(e);
        }
      }, {
        key: "getCellCount",
        value: function() {
          return this._cellSizeAndPositionManager.getCellCount();
        }
      }, {
        key: "getEstimatedCellSize",
        value: function() {
          return this._cellSizeAndPositionManager.getEstimatedCellSize();
        }
      }, {
        key: "getLastMeasuredIndex",
        value: function() {
          return this._cellSizeAndPositionManager.getLastMeasuredIndex();
        }
      }, {
        key: "getOffsetAdjustment",
        value: function(e) {
          var t = e.containerSize,
            n = e.offset,
            r = this._cellSizeAndPositionManager.getTotalSize(),
            o = this.getTotalSize(),
            i = this._getOffsetPercentage({
              containerSize: t,
              offset: n,
              totalSize: o
            });
          return Math.round(i * (o - r));
        }
      }, {
        key: "getSizeAndPositionOfCell",
        value: function(e) {
          return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(e);
        }
      }, {
        key: "getSizeAndPositionOfLastMeasuredCell",
        value: function() {
          return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();
        }
      }, {
        key: "getTotalSize",
        value: function() {
          return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());
        }
      }, {
        key: "getUpdatedOffsetForIndex",
        value: function(e) {
          var t = e.align,
            n = void 0 === t ? "auto" : t,
            r = e.containerSize,
            o = e.currentOffset,
            i = e.targetIndex,
            a = e.totalSize;
          o = this._safeOffsetToOffset({
            containerSize: r,
            offset: o
          });
          var s = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({
            align: n,
            containerSize: r,
            currentOffset: o,
            targetIndex: i,
            totalSize: a
          });
          return this._offsetToSafeOffset({
            containerSize: r,
            offset: s
          });
        }
      }, {
        key: "getVisibleCellRange",
        value: function(e) {
          var t = e.containerSize,
            n = e.offset;
          return n = this._safeOffsetToOffset({
            containerSize: t,
            offset: n
          }), this._cellSizeAndPositionManager.getVisibleCellRange({
            containerSize: t,
            offset: n
          });
        }
      }, {
        key: "resetCell",
        value: function(e) {
          this._cellSizeAndPositionManager.resetCell(e);
        }
      }, {
        key: "_getOffsetPercentage",
        value: function(e) {
          var t = e.containerSize,
            n = e.offset,
            r = e.totalSize;
          return r <= t ? 0 : n / (r - t);
        }
      }, {
        key: "_offsetToSafeOffset",
        value: function(e) {
          var t = e.containerSize,
            n = e.offset,
            r = this._cellSizeAndPositionManager.getTotalSize(),
            o = this.getTotalSize();
          if (r === o) return n;
          var i = this._getOffsetPercentage({
            containerSize: t,
            offset: n,
            totalSize: r
          });
          return Math.round(i * (o - t));
        }
      }, {
        key: "_safeOffsetToOffset",
        value: function(e) {
          var t = e.containerSize,
            n = e.offset,
            r = this._cellSizeAndPositionManager.getTotalSize(),
            o = this.getTotalSize();
          if (r === o) return n;
          var i = this._getOffsetPercentage({
            containerSize: t,
            offset: n,
            totalSize: o
          });
          return Math.round(i * (r - t));
        }
      }]), e;
    }();
  t.a = d;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.cellCount,
      n = e.cellSize,
      r = e.computeMetadataCallback,
      o = e.computeMetadataCallbackProps,
      i = e.nextCellsCount,
      a = e.nextCellSize,
      s = e.nextScrollToIndex,
      u = e.scrollToIndex,
      l = e.updateScrollOffsetForScrollToIndex;
    t === i && ("number" != typeof n && "number" != typeof a || n === a) || (r(o), u >= 0 && u === s && l());
  }
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.cellSize,
      n = e.cellSizeAndPositionManager,
      r = e.previousCellsCount,
      o = e.previousCellSize,
      i = e.previousScrollToAlignment,
      a = e.previousScrollToIndex,
      s = e.previousSize,
      u = e.scrollOffset,
      l = e.scrollToAlignment,
      c = e.scrollToIndex,
      d = e.size,
      f = e.updateScrollIndexCallback,
      h = n.getCellCount(),
      p = c >= 0 && c < h,
      _ = d !== s || !o || "number" == typeof t && t !== o;
    p && (_ || l !== i || c !== a) ? f(c) : !p && h > 0 && (d < s || h < r) && u > n.getTotalSize() - d && f(h - 1);
  }
  t.a = r;
}, function(e, t, n) {
  "use strict";
  n(298);
}, function(e, t, n) {
  "use strict";
  var r = n(299);
  n.d(t, "a", function() {
    return r.a;
  });
}, function(e, t, n) {
  "use strict";
  var r = n(380),
    o = n.n(r),
    i = n(7),
    a = n.n(i),
    s = n(9),
    u = n.n(s),
    l = n(570),
    c = function() {
      function e() {
        a()(this, e), this._columnSizeMap = {}, this._intervalTree = n.i(l.a)(), this._leftMap = {};
      }
      return u()(e, [{
        key: "estimateTotalHeight",
        value: function(e, t, n) {
          var r = e - this.count;
          return this.tallestColumnSize + Math.ceil(r / t) * n;
        }
      }, {
        key: "range",
        value: function(e, t, n) {
          var r = this;
          this._intervalTree.queryInterval(e, e + t, function(e) {
            var t = o()(e, 3),
              i = t[0],
              a = (t[1], t[2]);
            return n(a, r._leftMap[a], i);
          });
        }
      }, {
        key: "setPosition",
        value: function(e, t, n, r) {
          this._intervalTree.insert([n, n + r, e]), this._leftMap[e] = t;
          var o = this._columnSizeMap,
            i = o[t];
          o[t] = void 0 === i ? n + r : Math.max(i, n + r);
        }
      }, {
        key: "count",
        get: function() {
          return this._intervalTree.count;
        }
      }, {
        key: "shortestColumnSize",
        get: function() {
          var e = this._columnSizeMap,
            t = 0;
          for (var n in e) {
            var r = e[n];
            t = 0 === t ? r : Math.min(t, r);
          }
          return t;
        }
      }, {
        key: "tallestColumnSize",
        get: function() {
          var e = this._columnSizeMap,
            t = 0;
          for (var n in e) {
            var r = e[n];
            t = Math.max(t, r);
          }
          return t;
        }
      }]), e;
    }();
  t.a = c;
}, function(e, t, n) {}, function(e, t, n) {
  "use strict";
  n(300), n(560);
}, function(e, t, n) {
  "use strict";
  n(301);
}, function(e, t, n) {
  "use strict";
  n(302);
}, function(e, t, n) {
  "use strict";
  n(305), n(306), n(307), n(309), n(308), n(310), n(303), n(116), n(304);
}, function(e, t, n) {
  "use strict";
  n(311), n(312);
}, function(e, t, n) {
  "use strict";

  function r(e) {
    if (e === window) return {
      height: "number" == typeof window.innerHeight ? window.innerHeight : 0,
      width: "number" == typeof window.innerWidth ? window.innerWidth : 0
    };
    var t = e.getBoundingClientRect();
    return {
      width: t.width,
      height: t.height
    };
  }

  function o(e, t) {
    var n = t === window ? {
        top: 0,
        left: 0
      } : i(t),
      r = t === window ? document.documentElement : t,
      o = e.getBoundingClientRect(),
      a = r.getBoundingClientRect();
    return {
      top: o.top + n.top - a.top,
      left: o.left + n.left - a.left
    };
  }

  function i(e) {
    return e === window ? {
      top: "scrollY" in window ? window.scrollY : document.documentElement.scrollTop,
      left: "scrollX" in window ? window.scrollX : document.documentElement.scrollLeft
    } : {
      top: e.scrollTop,
      left: e.scrollLeft
    };
  }
  t.a = r, t.b = o, t.c = i;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = e.align,
      n = void 0 === t ? "auto" : t,
      r = e.cellOffset,
      o = e.cellSize,
      i = e.containerSize,
      a = e.currentOffset,
      s = r,
      u = s - i + o;
    switch (n) {
      case "start":
        return s;
      case "end":
        return u;
      case "center":
        return s - (i - o) / 2;
      default:
        return Math.max(u, Math.min(s, a));
    }
  }
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r) {
    for (var o = n + 1; t <= n;) {
      var i = t + n >>> 1;
      e[i] >= r ? (o = i, n = i - 1) : t = i + 1;
    }
    return o;
  }

  function o(e, t, n, r, o) {
    for (var i = n + 1; t <= n;) {
      var a = t + n >>> 1;
      o(e[a], r) >= 0 ? (i = a, n = a - 1) : t = a + 1;
    }
    return i;
  }

  function i(e, t, n, i, a) {
    return "function" == typeof n ? o(e, void 0 === i ? 0 : 0 | i, void 0 === a ? e.length - 1 : 0 | a, t, n) : r(e, void 0 === n ? 0 : 0 | n, void 0 === i ? e.length - 1 : 0 | i, t);
  }

  function a(e, t, n, r) {
    for (var o = n + 1; t <= n;) {
      var i = t + n >>> 1;
      e[i] > r ? (o = i, n = i - 1) : t = i + 1;
    }
    return o;
  }

  function s(e, t, n, r, o) {
    for (var i = n + 1; t <= n;) {
      var a = t + n >>> 1;
      o(e[a], r) > 0 ? (i = a, n = a - 1) : t = a + 1;
    }
    return i;
  }

  function u(e, t, n, r, o) {
    return "function" == typeof n ? s(e, void 0 === r ? 0 : 0 | r, void 0 === o ? e.length - 1 : 0 | o, t, n) : a(e, void 0 === n ? 0 : 0 | n, void 0 === r ? e.length - 1 : 0 | r, t);
  }

  function l(e, t, n, r) {
    for (var o = t - 1; t <= n;) {
      var i = t + n >>> 1;
      e[i] < r ? (o = i, t = i + 1) : n = i - 1;
    }
    return o;
  }

  function c(e, t, n, r, o) {
    for (var i = t - 1; t <= n;) {
      var a = t + n >>> 1;
      o(e[a], r) < 0 ? (i = a, t = a + 1) : n = a - 1;
    }
    return i;
  }

  function d(e, t, n, r, o) {
    return "function" == typeof n ? c(e, void 0 === r ? 0 : 0 | r, void 0 === o ? e.length - 1 : 0 | o, t, n) : l(e, void 0 === n ? 0 : 0 | n, void 0 === r ? e.length - 1 : 0 | r, t);
  }

  function f(e, t, n, r) {
    for (var o = t - 1; t <= n;) {
      var i = t + n >>> 1;
      e[i] <= r ? (o = i, t = i + 1) : n = i - 1;
    }
    return o;
  }

  function h(e, t, n, r, o) {
    for (var i = t - 1; t <= n;) {
      var a = t + n >>> 1;
      o(e[a], r) <= 0 ? (i = a, t = a + 1) : n = a - 1;
    }
    return i;
  }

  function p(e, t, n, r, o) {
    return "function" == typeof n ? h(e, void 0 === r ? 0 : 0 | r, void 0 === o ? e.length - 1 : 0 | o, t, n) : f(e, void 0 === n ? 0 : 0 | n, void 0 === r ? e.length - 1 : 0 | r, t);
  }

  function _(e, t, n, r) {
    for (; t <= n;) {
      var o = t + n >>> 1,
        i = e[o];
      if (i === r) return o;
      i <= r ? t = o + 1 : n = o - 1;
    }
    return -1;
  }

  function m(e, t, n, r, o) {
    for (; t <= n;) {
      var i = t + n >>> 1,
        a = e[i],
        s = o(a, r);
      if (0 === s) return i;
      s <= 0 ? t = i + 1 : n = i - 1;
    }
    return -1;
  }

  function y(e, t, n, r, o) {
    return "function" == typeof n ? m(e, void 0 === r ? 0 : 0 | r, void 0 === o ? e.length - 1 : 0 | o, t, n) : _(e, void 0 === n ? 0 : 0 | n, void 0 === r ? e.length - 1 : 0 | r, t);
  }
  t.a = {
    ge: i,
    gt: u,
    lt: d,
    le: p,
    eq: y
  };
}, function(e, t, n) {
  "use strict";

  function r() {
    var e;
    e = "undefined" != typeof window ? window : "undefined" != typeof self ? self : this;
    var t = "undefined" != typeof document && document.attachEvent;
    if (!t) {
      var n = function() {
          var t = e.requestAnimationFrame || e.mozRequestAnimationFrame || e.webkitRequestAnimationFrame || function(t) {
            return e.setTimeout(t, 20);
          };
          return function(e) {
            return t(e);
          };
        }(),
        r = function() {
          var t = e.cancelAnimationFrame || e.mozCancelAnimationFrame || e.webkitCancelAnimationFrame || e.clearTimeout;
          return function(e) {
            return t(e);
          };
        }(),
        o = function(e) {
          var t = e.__resizeTriggers__,
            n = t.firstElementChild,
            r = t.lastElementChild,
            o = n.firstElementChild;
          r.scrollLeft = r.scrollWidth, r.scrollTop = r.scrollHeight, o.style.width = n.offsetWidth + 1 + "px", o.style.height = n.offsetHeight + 1 + "px", n.scrollLeft = n.scrollWidth, n.scrollTop = n.scrollHeight;
        },
        i = function(e) {
          return e.offsetWidth != e.__resizeLast__.width || e.offsetHeight != e.__resizeLast__.height;
        },
        a = function(e) {
          if (!(e.target.className.indexOf("contract-trigger") < 0 && e.target.className.indexOf("expand-trigger") < 0)) {
            var t = this;
            o(this), this.__resizeRAF__ && r(this.__resizeRAF__), this.__resizeRAF__ = n(function() {
              i(t) && (t.__resizeLast__.width = t.offsetWidth, t.__resizeLast__.height = t.offsetHeight, t.__resizeListeners__.forEach(function(n) {
                n.call(t, e);
              }));
            });
          }
        },
        s = !1,
        u = "",
        l = "animationstart",
        c = "Webkit Moz O ms".split(" "),
        d = "webkitAnimationStart animationstart oAnimationStart MSAnimationStart".split(" "),
        f = "",
        h = document.createElement("fakeelement");
      if (void 0 !== h.style.animationName && (s = !0), !1 === s)
        for (var p = 0; p < c.length; p++)
          if (void 0 !== h.style[c[p] + "AnimationName"]) {
            f = c[p], u = "-" + f.toLowerCase() + "-", l = d[p], s = !0;
            break;
          }
      var _ = "resizeanim",
        m = "@" + u + "keyframes " + _ + " { from { opacity: 0; } to { opacity: 0; } } ",
        y = u + "animation: 1ms " + _ + "; ";
    }
    var v = function() {
      if (!document.getElementById("detectElementResize")) {
        var e = (m || "") + ".resize-triggers { " + (y || "") + 'visibility: hidden; opacity: 0; } .resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',
          t = document.head || document.getElementsByTagName("head")[0],
          n = document.createElement("style");
        n.id = "detectElementResize", n.type = "text/css", n.styleSheet ? n.styleSheet.cssText = e : n.appendChild(document.createTextNode(e)), t.appendChild(n);
      }
    };
    return {
      addResizeListener: function(n, r) {
        if (t) n.attachEvent("onresize", r);
        else {
          if (!n.__resizeTriggers__) {
            var i = e.getComputedStyle(n);
            i && "static" == i.position && (n.style.position = "relative"), v(), n.__resizeLast__ = {}, n.__resizeListeners__ = [], (n.__resizeTriggers__ = document.createElement("div")).className = "resize-triggers", n.__resizeTriggers__.innerHTML = '<div class="expand-trigger"><div></div></div><div class="contract-trigger"></div>', n.appendChild(n.__resizeTriggers__), o(n), n.addEventListener("scroll", a, !0), l && (n.__resizeTriggers__.__animationListener__ = function(e) {
              e.animationName == _ && o(n);
            }, n.__resizeTriggers__.addEventListener(l, n.__resizeTriggers__.__animationListener__));
          }
          n.__resizeListeners__.push(r);
        }
      },
      removeResizeListener: function(e, n) {
        if (t) e.detachEvent("onresize", n);
        else if (e.__resizeListeners__.splice(e.__resizeListeners__.indexOf(n), 1), !e.__resizeListeners__.length) {
          e.removeEventListener("scroll", a, !0), e.__resizeTriggers__.__animationListener__ && (e.__resizeTriggers__.removeEventListener(l, e.__resizeTriggers__.__animationListener__), e.__resizeTriggers__.__animationListener__ = null);
          try {
            e.__resizeTriggers__ = !e.removeChild(e.__resizeTriggers__);
          } catch (e) {}
        }
      }
    };
  }
  t.a = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n, r, o) {
    this.mid = e, this.left = t, this.right = n, this.leftPoints = r, this.rightPoints = o, this.count = (t ? t.count : 0) + (n ? n.count : 0) + r.length;
  }

  function o(e, t) {
    e.mid = t.mid, e.left = t.left, e.right = t.right, e.leftPoints = t.leftPoints, e.rightPoints = t.rightPoints, e.count = t.count;
  }

  function i(e, t) {
    var n = p(t);
    e.mid = n.mid, e.left = n.left, e.right = n.right, e.leftPoints = n.leftPoints, e.rightPoints = n.rightPoints, e.count = n.count;
  }

  function a(e, t) {
    var n = e.intervals([]);
    n.push(t), i(e, n);
  }

  function s(e, t) {
    var n = e.intervals([]),
      r = n.indexOf(t);
    return r < 0 ? v : (n.splice(r, 1), i(e, n), g);
  }

  function u(e, t, n) {
    for (var r = 0; r < e.length && e[r][0] <= t; ++r) {
      var o = n(e[r]);
      if (o) return o;
    }
  }

  function l(e, t, n) {
    for (var r = e.length - 1; r >= 0 && e[r][1] >= t; --r) {
      var o = n(e[r]);
      if (o) return o;
    }
  }

  function c(e, t) {
    for (var n = 0; n < e.length; ++n) {
      var r = t(e[n]);
      if (r) return r;
    }
  }

  function d(e, t) {
    return e - t;
  }

  function f(e, t) {
    return e[0] - t[0] || e[1] - t[1];
  }

  function h(e, t) {
    return e[1] - t[1] || e[0] - t[0];
  }

  function p(e) {
    if (0 === e.length) return null;
    for (var t = [], n = 0; n < e.length; ++n) t.push(e[n][0], e[n][1]);
    t.sort(d);
    for (var o = t[t.length >> 1], i = [], a = [], s = [], n = 0; n < e.length; ++n) {
      var u = e[n];
      u[1] < o ? i.push(u) : o < u[0] ? a.push(u) : s.push(u);
    }
    var l = s,
      c = s.slice();
    return l.sort(f), c.sort(h), new r(o, p(i), p(a), l, c);
  }

  function _(e) {
    this.root = e;
  }

  function m(e) {
    return new _(e && 0 !== e.length ? p(e) : null);
  }
  var y = n(568);
  t.a = m;
  var v = 0,
    g = 1,
    M = r.prototype;
  M.intervals = function(e) {
    return e.push.apply(e, this.leftPoints), this.left && this.left.intervals(e), this.right && this.right.intervals(e), e;
  }, M.insert = function(e) {
    var t = this.count - this.leftPoints.length;
    if (this.count += 1, e[1] < this.mid) this.left ? 4 * (this.left.count + 1) > 3 * (t + 1) ? a(this, e) : this.left.insert(e) : this.left = p([e]);
    else if (e[0] > this.mid) this.right ? 4 * (this.right.count + 1) > 3 * (t + 1) ? a(this, e) : this.right.insert(e) : this.right = p([e]);
    else {
      var n = y.a.ge(this.leftPoints, e, f),
        r = y.a.ge(this.rightPoints, e, h);
      this.leftPoints.splice(n, 0, e), this.rightPoints.splice(r, 0, e);
    }
  }, M.remove = function(e) {
    var t = this.count - this.leftPoints;
    if (e[1] < this.mid) {
      if (!this.left) return v;
      if (4 * (this.right ? this.right.count : 0) > 3 * (t - 1)) return s(this, e);
      var n = this.left.remove(e);
      return 2 === n ? (this.left = null, this.count -= 1, g) : (n === g && (this.count -= 1), n);
    }
    if (e[0] > this.mid) {
      if (!this.right) return v;
      if (4 * (this.left ? this.left.count : 0) > 3 * (t - 1)) return s(this, e);
      var n = this.right.remove(e);
      return 2 === n ? (this.right = null, this.count -= 1, g) : (n === g && (this.count -= 1), n);
    }
    if (1 === this.count) return this.leftPoints[0] === e ? 2 : v;
    if (1 === this.leftPoints.length && this.leftPoints[0] === e) {
      if (this.left && this.right) {
        for (var r = this, i = this.left; i.right;) r = i, i = i.right;
        if (r === this) i.right = this.right;
        else {
          var a = this.left,
            n = this.right;
          r.count -= i.count, r.right = i.left, i.left = a, i.right = n;
        }
        o(this, i), this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;
      } else this.left ? o(this, this.left) : o(this, this.right);
      return g;
    }
    for (var a = y.a.ge(this.leftPoints, e, f); a < this.leftPoints.length && this.leftPoints[a][0] === e[0]; ++a)
      if (this.leftPoints[a] === e) {
        this.count -= 1, this.leftPoints.splice(a, 1);
        for (var n = y.a.ge(this.rightPoints, e, h); n < this.rightPoints.length && this.rightPoints[n][1] === e[1]; ++n)
          if (this.rightPoints[n] === e) return this.rightPoints.splice(n, 1), g;
      }
    return v;
  }, M.queryPoint = function(e, t) {
    if (e < this.mid) {
      if (this.left) {
        var n = this.left.queryPoint(e, t);
        if (n) return n;
      }
      return u(this.leftPoints, e, t);
    }
    if (e > this.mid) {
      if (this.right) {
        var n = this.right.queryPoint(e, t);
        if (n) return n;
      }
      return l(this.rightPoints, e, t);
    }
    return c(this.leftPoints, t);
  }, M.queryInterval = function(e, t, n) {
    if (e < this.mid && this.left) {
      var r = this.left.queryInterval(e, t, n);
      if (r) return r;
    }
    if (t > this.mid && this.right) {
      var r = this.right.queryInterval(e, t, n);
      if (r) return r;
    }
    return t < this.mid ? u(this.leftPoints, t, n) : e > this.mid ? l(this.rightPoints, e, n) : c(this.leftPoints, n);
  };
  var b = _.prototype;
  b.insert = function(e) {
    this.root ? this.root.insert(e) : this.root = new r(e[0], null, null, [e], [e]);
  }, b.remove = function(e) {
    if (this.root) {
      var t = this.root.remove(e);
      return 2 === t && (this.root = null), t !== v;
    }
    return !1;
  }, b.queryPoint = function(e, t) {
    if (this.root) return this.root.queryPoint(e, t);
  }, b.queryInterval = function(e, t, n) {
    if (e <= t && this.root) return this.root.queryInterval(e, t, n);
  }, Object.defineProperty(b, "count", {
    get: function() {
      return this.root ? this.root.count : 0;
    }
  }), Object.defineProperty(b, "intervals", {
    get: function() {
      return this.root ? this.root.intervals([]) : [];
    }
  });
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t = {
      "=": "=0",
      ":": "=2"
    };
    return "$" + ("" + e).replace(/[=:]/g, function(e) {
      return t[e];
    });
  }

  function o(e) {
    var t = {
      "=0": "=",
      "=2": ":"
    };
    return ("" + ("." === e[0] && "$" === e[1] ? e.substring(2) : e.substring(1))).replace(/(=0|=2)/g, function(e) {
      return t[e];
    });
  }
  var i = {
    escape: r,
    unescape: o
  };
  e.exports = i;
}, function(e, t, n) {
  "use strict";
  var r = n(45),
    o = (n(2), function(e) {
      var t = this;
      if (t.instancePool.length) {
        var n = t.instancePool.pop();
        return t.call(n, e), n;
      }
      return new t(e);
    }),
    i = function(e, t) {
      var n = this;
      if (n.instancePool.length) {
        var r = n.instancePool.pop();
        return n.call(r, e, t), r;
      }
      return new n(e, t);
    },
    a = function(e, t, n) {
      var r = this;
      if (r.instancePool.length) {
        var o = r.instancePool.pop();
        return r.call(o, e, t, n), o;
      }
      return new r(e, t, n);
    },
    s = function(e, t, n, r) {
      var o = this;
      if (o.instancePool.length) {
        var i = o.instancePool.pop();
        return o.call(i, e, t, n, r), i;
      }
      return new o(e, t, n, r);
    },
    u = function(e) {
      var t = this;
      e instanceof t || r("25"), e.destructor(), t.instancePool.length < t.poolSize && t.instancePool.push(e);
    },
    l = o,
    c = function(e, t) {
      var n = e;
      return n.instancePool = [], n.getPooled = t || l, n.poolSize || (n.poolSize = 10), n.release = u, n;
    },
    d = {
      addPoolingTo: c,
      oneArgumentPooler: o,
      twoArgumentPooler: i,
      threeArgumentPooler: a,
      fourArgumentPooler: s
    };
  e.exports = d;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return ("" + e).replace(M, "$&/");
  }

  function o(e, t) {
    this.func = e, this.context = t, this.count = 0;
  }

  function i(e, t, n) {
    var r = e.func,
      o = e.context;
    r.call(o, t, e.count++);
  }

  function a(e, t, n) {
    if (null == e) return e;
    var r = o.getPooled(t, n);
    y(e, i, r), o.release(r);
  }

  function s(e, t, n, r) {
    this.result = e, this.keyPrefix = t, this.func = n, this.context = r, this.count = 0;
  }

  function u(e, t, n) {
    var o = e.result,
      i = e.keyPrefix,
      a = e.func,
      s = e.context,
      u = a.call(s, t, e.count++);
    Array.isArray(u) ? l(u, o, n, m.thatReturnsArgument) : null != u && (_.isValidElement(u) && (u = _.cloneAndReplaceKey(u, i + (!u.key || t && t.key === u.key ? "" : r(u.key) + "/") + n)), o.push(u));
  }

  function l(e, t, n, o, i) {
    var a = "";
    null != n && (a = r(n) + "/");
    var l = s.getPooled(t, a, o, i);
    y(e, u, l), s.release(l);
  }

  function c(e, t, n) {
    if (null == e) return e;
    var r = [];
    return l(e, r, null, t, n), r;
  }

  function d(e, t, n) {
    return null;
  }

  function f(e, t) {
    return y(e, d, null);
  }

  function h(e) {
    var t = [];
    return l(e, t, null, m.thatReturnsArgument), t;
  }
  var p = n(572),
    _ = n(44),
    m = n(17),
    y = n(581),
    v = p.twoArgumentPooler,
    g = p.fourArgumentPooler,
    M = /\/+/g;
  o.prototype.destructor = function() {
    this.func = null, this.context = null, this.count = 0;
  }, p.addPoolingTo(o, v), s.prototype.destructor = function() {
    this.result = null, this.keyPrefix = null, this.func = null, this.context = null, this.count = 0;
  }, p.addPoolingTo(s, g);
  var b = {
    forEach: a,
    map: c,
    mapIntoWithKeyPrefixInternal: l,
    count: f,
    toArray: h
  };
  e.exports = b;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e;
  }

  function o(e, t) {
    var n = M.hasOwnProperty(t) ? M[t] : null;
    w.hasOwnProperty(t) && "OVERRIDE_BASE" !== n && f("73", t), e && "DEFINE_MANY" !== n && "DEFINE_MANY_MERGED" !== n && f("74", t);
  }

  function i(e, t) {
    if (t) {
      "function" == typeof t && f("75"), _.isValidElement(t) && f("76");
      var n = e.prototype,
        r = n.__reactAutoBindPairs;
      t.hasOwnProperty(v) && b.mixins(e, t.mixins);
      for (var i in t)
        if (t.hasOwnProperty(i) && i !== v) {
          var a = t[i],
            s = n.hasOwnProperty(i);
          if (o(s, i), b.hasOwnProperty(i)) b[i](e, a);
          else {
            var c = M.hasOwnProperty(i),
              d = "function" == typeof a,
              h = d && !c && !s && !1 !== t.autobind;
            if (h) r.push(i, a), n[i] = a;
            else if (s) {
              var p = M[i];
              (!c || "DEFINE_MANY_MERGED" !== p && "DEFINE_MANY" !== p) && f("77", p, i), "DEFINE_MANY_MERGED" === p ? n[i] = u(n[i], a) : "DEFINE_MANY" === p && (n[i] = l(n[i], a));
            } else n[i] = a;
          }
        }
    }
  }

  function a(e, t) {
    if (t)
      for (var n in t) {
        var r = t[n];
        if (t.hasOwnProperty(n)) {
          var o = n in b;
          o && f("78", n);
          var i = n in e;
          i && f("79", n), e[n] = r;
        }
      }
  }

  function s(e, t) {
    e && t && "object" == typeof e && "object" == typeof t || f("80");
    for (var n in t) t.hasOwnProperty(n) && (void 0 !== e[n] && f("81", n), e[n] = t[n]);
    return e;
  }

  function u(e, t) {
    return function() {
      var n = e.apply(this, arguments),
        r = t.apply(this, arguments);
      if (null == n) return r;
      if (null == r) return n;
      var o = {};
      return s(o, n), s(o, r), o;
    };
  }

  function l(e, t) {
    return function() {
      e.apply(this, arguments), t.apply(this, arguments);
    };
  }

  function c(e, t) {
    return t.bind(e);
  }

  function d(e) {
    for (var t = e.__reactAutoBindPairs, n = 0; n < t.length; n += 2) {
      var r = t[n],
        o = t[n + 1];
      e[r] = c(e, o);
    }
  }
  var f = n(45),
    h = n(6),
    p = n(118),
    _ = n(44),
    m = (n(316), n(119)),
    y = n(49),
    v = (n(2), n(3), "mixins"),
    g = [],
    M = {
      mixins: "DEFINE_MANY",
      statics: "DEFINE_MANY",
      propTypes: "DEFINE_MANY",
      contextTypes: "DEFINE_MANY",
      childContextTypes: "DEFINE_MANY",
      getDefaultProps: "DEFINE_MANY_MERGED",
      getInitialState: "DEFINE_MANY_MERGED",
      getChildContext: "DEFINE_MANY_MERGED",
      render: "DEFINE_ONCE",
      componentWillMount: "DEFINE_MANY",
      componentDidMount: "DEFINE_MANY",
      componentWillReceiveProps: "DEFINE_MANY",
      shouldComponentUpdate: "DEFINE_ONCE",
      componentWillUpdate: "DEFINE_MANY",
      componentDidUpdate: "DEFINE_MANY",
      componentWillUnmount: "DEFINE_MANY",
      updateComponent: "OVERRIDE_BASE"
    },
    b = {
      displayName: function(e, t) {
        e.displayName = t;
      },
      mixins: function(e, t) {
        if (t)
          for (var n = 0; n < t.length; n++) i(e, t[n]);
      },
      childContextTypes: function(e, t) {
        e.childContextTypes = h({}, e.childContextTypes, t);
      },
      contextTypes: function(e, t) {
        e.contextTypes = h({}, e.contextTypes, t);
      },
      getDefaultProps: function(e, t) {
        e.getDefaultProps ? e.getDefaultProps = u(e.getDefaultProps, t) : e.getDefaultProps = t;
      },
      propTypes: function(e, t) {
        e.propTypes = h({}, e.propTypes, t);
      },
      statics: function(e, t) {
        a(e, t);
      },
      autobind: function() {}
    },
    w = {
      replaceState: function(e, t) {
        this.updater.enqueueReplaceState(this, e), t && this.updater.enqueueCallback(this, t, "replaceState");
      },
      isMounted: function() {
        return this.updater.isMounted(this);
      }
    },
    k = function() {};
  h(k.prototype, p.prototype, w);
  var L = {
    createClass: function(e) {
      var t = r(function(e, n, r) {
        this.__reactAutoBindPairs.length && d(this), this.props = e, this.context = n, this.refs = y, this.updater = r || m, this.state = null;
        var o = this.getInitialState ? this.getInitialState() : null;
        ("object" != typeof o || Array.isArray(o)) && f("82", t.displayName || "ReactCompositeComponent"), this.state = o;
      });
      t.prototype = new k, t.prototype.constructor = t, t.prototype.__reactAutoBindPairs = [], g.forEach(i.bind(null, t)), i(t, e), t.getDefaultProps && (t.defaultProps = t.getDefaultProps()), t.prototype.render || f("83");
      for (var n in M) t.prototype[n] || (t.prototype[n] = null);
      return t;
    },
    injection: {
      injectMixin: function(e) {
        g.push(e);
      }
    }
  };
  e.exports = L;
}, function(e, t, n) {
  "use strict";
  var r = n(44),
    o = r.createFactory,
    i = {
      a: o("a"),
      abbr: o("abbr"),
      address: o("address"),
      area: o("area"),
      article: o("article"),
      aside: o("aside"),
      audio: o("audio"),
      b: o("b"),
      base: o("base"),
      bdi: o("bdi"),
      bdo: o("bdo"),
      big: o("big"),
      blockquote: o("blockquote"),
      body: o("body"),
      br: o("br"),
      button: o("button"),
      canvas: o("canvas"),
      caption: o("caption"),
      cite: o("cite"),
      code: o("code"),
      col: o("col"),
      colgroup: o("colgroup"),
      data: o("data"),
      datalist: o("datalist"),
      dd: o("dd"),
      del: o("del"),
      details: o("details"),
      dfn: o("dfn"),
      dialog: o("dialog"),
      div: o("div"),
      dl: o("dl"),
      dt: o("dt"),
      em: o("em"),
      embed: o("embed"),
      fieldset: o("fieldset"),
      figcaption: o("figcaption"),
      figure: o("figure"),
      footer: o("footer"),
      form: o("form"),
      h1: o("h1"),
      h2: o("h2"),
      h3: o("h3"),
      h4: o("h4"),
      h5: o("h5"),
      h6: o("h6"),
      head: o("head"),
      header: o("header"),
      hgroup: o("hgroup"),
      hr: o("hr"),
      html: o("html"),
      i: o("i"),
      iframe: o("iframe"),
      img: o("img"),
      input: o("input"),
      ins: o("ins"),
      kbd: o("kbd"),
      keygen: o("keygen"),
      label: o("label"),
      legend: o("legend"),
      li: o("li"),
      link: o("link"),
      main: o("main"),
      map: o("map"),
      mark: o("mark"),
      menu: o("menu"),
      menuitem: o("menuitem"),
      meta: o("meta"),
      meter: o("meter"),
      nav: o("nav"),
      noscript: o("noscript"),
      object: o("object"),
      ol: o("ol"),
      optgroup: o("optgroup"),
      option: o("option"),
      output: o("output"),
      p: o("p"),
      param: o("param"),
      picture: o("picture"),
      pre: o("pre"),
      progress: o("progress"),
      q: o("q"),
      rp: o("rp"),
      rt: o("rt"),
      ruby: o("ruby"),
      s: o("s"),
      samp: o("samp"),
      script: o("script"),
      section: o("section"),
      select: o("select"),
      small: o("small"),
      source: o("source"),
      span: o("span"),
      strong: o("strong"),
      style: o("style"),
      sub: o("sub"),
      summary: o("summary"),
      sup: o("sup"),
      table: o("table"),
      tbody: o("tbody"),
      td: o("td"),
      textarea: o("textarea"),
      tfoot: o("tfoot"),
      th: o("th"),
      thead: o("thead"),
      time: o("time"),
      title: o("title"),
      tr: o("tr"),
      track: o("track"),
      u: o("u"),
      ul: o("ul"),
      "var": o("var"),
      video: o("video"),
      wbr: o("wbr"),
      circle: o("circle"),
      clipPath: o("clipPath"),
      defs: o("defs"),
      ellipse: o("ellipse"),
      g: o("g"),
      image: o("image"),
      line: o("line"),
      linearGradient: o("linearGradient"),
      mask: o("mask"),
      path: o("path"),
      pattern: o("pattern"),
      polygon: o("polygon"),
      polyline: o("polyline"),
      radialGradient: o("radialGradient"),
      rect: o("rect"),
      stop: o("stop"),
      svg: o("svg"),
      text: o("text"),
      tspan: o("tspan")
    };
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return e === t ? 0 !== e || 1 / e == 1 / t : e !== e && t !== t;
  }

  function o(e) {
    this.message = e, this.stack = "";
  }

  function i(e) {
    function t(t, n, r, i, a, s, u) {
      if (i = i || k, s = s || r, null == n[r]) {
        var l = g[a];
        return t ? new o(null === n[r] ? "The " + l + " `" + s + "` is marked as required in `" + i + "`, but its value is `null`." : "The " + l + " `" + s + "` is marked as required in `" + i + "`, but its value is `undefined`.") : null;
      }
      return e(n, r, i, a, s);
    }
    var n = t.bind(null, !1);
    return n.isRequired = t.bind(null, !0), n;
  }

  function a(e) {
    function t(t, n, r, i, a, s) {
      var u = t[n];
      return _(u) !== e ? new o("Invalid " + g[i] + " `" + a + "` of type `" + m(u) + "` supplied to `" + r + "`, expected `" + e + "`.") : null;
    }
    return i(t);
  }

  function s(e) {
    function t(t, n, r, i, a) {
      if ("function" != typeof e) return new o("Property `" + a + "` of component `" + r + "` has invalid PropType notation inside arrayOf.");
      var s = t[n];
      if (!Array.isArray(s)) return new o("Invalid " + g[i] + " `" + a + "` of type `" + _(s) + "` supplied to `" + r + "`, expected an array.");
      for (var u = 0; u < s.length; u++) {
        var l = e(s, u, r, i, a + "[" + u + "]", M);
        if (l instanceof Error) return l;
      }
      return null;
    }
    return i(t);
  }

  function u(e) {
    function t(t, n, r, i, a) {
      if (!(t[n] instanceof e)) {
        var s = g[i],
          u = e.name || k;
        return new o("Invalid " + s + " `" + a + "` of type `" + y(t[n]) + "` supplied to `" + r + "`, expected instance of `" + u + "`.");
      }
      return null;
    }
    return i(t);
  }

  function l(e) {
    function t(t, n, i, a, s) {
      for (var u = t[n], l = 0; l < e.length; l++)
        if (r(u, e[l])) return null;
      return new o("Invalid " + g[a] + " `" + s + "` of value `" + u + "` supplied to `" + i + "`, expected one of " + JSON.stringify(e) + ".");
    }
    return Array.isArray(e) ? i(t) : b.thatReturnsNull;
  }

  function c(e) {
    function t(t, n, r, i, a) {
      if ("function" != typeof e) return new o("Property `" + a + "` of component `" + r + "` has invalid PropType notation inside objectOf.");
      var s = t[n],
        u = _(s);
      if ("object" !== u) return new o("Invalid " + g[i] + " `" + a + "` of type `" + u + "` supplied to `" + r + "`, expected an object.");
      for (var l in s)
        if (s.hasOwnProperty(l)) {
          var c = e(s, l, r, i, a + "." + l, M);
          if (c instanceof Error) return c;
        }
      return null;
    }
    return i(t);
  }

  function d(e) {
    function t(t, n, r, i, a) {
      for (var s = 0; s < e.length; s++)
        if (null == (0, e[s])(t, n, r, i, a, M)) return null;
      return new o("Invalid " + g[i] + " `" + a + "` supplied to `" + r + "`.");
    }
    return Array.isArray(e) ? i(t) : b.thatReturnsNull;
  }

  function f(e) {
    function t(t, n, r, i, a) {
      var s = t[n],
        u = _(s);
      if ("object" !== u) return new o("Invalid " + g[i] + " `" + a + "` of type `" + u + "` supplied to `" + r + "`, expected `object`.");
      for (var l in e) {
        var c = e[l];
        if (c) {
          var d = c(s, l, r, i, a + "." + l, M);
          if (d) return d;
        }
      }
      return null;
    }
    return i(t);
  }

  function h(e) {
    switch (typeof e) {
      case "number":
      case "string":
      case "undefined":
        return !0;
      case "boolean":
        return !e;
      case "object":
        if (Array.isArray(e)) return e.every(h);
        if (null === e || v.isValidElement(e)) return !0;
        var t = w(e);
        if (!t) return !1;
        var n, r = t.call(e);
        if (t !== e.entries) {
          for (; !(n = r.next()).done;)
            if (!h(n.value)) return !1;
        } else
          for (; !(n = r.next()).done;) {
            var o = n.value;
            if (o && !h(o[1])) return !1;
          }
        return !0;
      default:
        return !1;
    }
  }

  function p(e, t) {
    return "symbol" === e || "Symbol" === t["@@toStringTag"] || "function" == typeof Symbol && t instanceof Symbol;
  }

  function _(e) {
    var t = typeof e;
    return Array.isArray(e) ? "array" : e instanceof RegExp ? "object" : p(t, e) ? "symbol" : t;
  }

  function m(e) {
    var t = _(e);
    if ("object" === t) {
      if (e instanceof Date) return "date";
      if (e instanceof RegExp) return "regexp";
    }
    return t;
  }

  function y(e) {
    return e.constructor && e.constructor.name ? e.constructor.name : k;
  }
  var v = n(44),
    g = n(316),
    M = n(577),
    b = n(17),
    w = n(318),
    k = (n(3), "<<anonymous>>"),
    L = {
      array: a("array"),
      bool: a("boolean"),
      func: a("function"),
      number: a("number"),
      object: a("object"),
      string: a("string"),
      symbol: a("symbol"),
      any: function() {
        return i(b.thatReturns(null));
      }(),
      arrayOf: s,
      element: function() {
        function e(e, t, n, r, i) {
          var a = e[t];
          return v.isValidElement(a) ? null : new o("Invalid " + g[r] + " `" + i + "` of type `" + _(a) + "` supplied to `" + n + "`, expected a single ReactElement.");
        }
        return i(e);
      }(),
      instanceOf: u,
      node: function() {
        function e(e, t, n, r, i) {
          return h(e[t]) ? null : new o("Invalid " + g[r] + " `" + i + "` supplied to `" + n + "`, expected a ReactNode.");
        }
        return i(e);
      }(),
      objectOf: c,
      oneOf: l,
      oneOfType: d,
      shape: f
    };
  o.prototype = Error.prototype, e.exports = L;
}, function(e, t, n) {
  "use strict";
  e.exports = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    this.props = e, this.context = t, this.refs = u, this.updater = n || s;
  }

  function o() {}
  var i = n(6),
    a = n(118),
    s = n(119),
    u = n(49);
  o.prototype = a.prototype, r.prototype = new o, r.prototype.constructor = r, i(r.prototype, a.prototype), r.prototype.isPureReactComponent = !0, e.exports = r;
}, function(e, t, n) {
  "use strict";
  e.exports = "15.4.2";
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return i.isValidElement(e) || o("143"), e;
  }
  var o = n(45),
    i = n(44);
  n(2), e.exports = r;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return e && "object" == typeof e && null != e.key ? l.escape(e.key) : t.toString(36);
  }

  function o(e, t, n, i) {
    var f = typeof e;
    if ("undefined" !== f && "boolean" !== f || (e = null), null === e || "string" === f || "number" === f || "object" === f && e.$$typeof === s) return n(i, e, "" === t ? c + r(e, 0) : t), 1;
    var h, p, _ = 0,
      m = "" === t ? c : t + d;
    if (Array.isArray(e))
      for (var y = 0; y < e.length; y++) h = e[y], p = m + r(h, y), _ += o(h, p, n, i);
    else {
      var v = u(e);
      if (v) {
        var g, M = v.call(e);
        if (v !== e.entries)
          for (var b = 0; !(g = M.next()).done;) h = g.value, p = m + r(h, b++), _ += o(h, p, n, i);
        else
          for (; !(g = M.next()).done;) {
            var w = g.value;
            w && (h = w[1], p = m + l.escape(w[0]) + d + r(h, 0), _ += o(h, p, n, i));
          }
      } else if ("object" === f) {
        var k = String(e);
        a("31", "[object Object]" === k ? "object with keys {" + Object.keys(e).join(", ") + "}" : k, "");
      }
    }
    return _;
  }

  function i(e, t, n) {
    return null == e ? 0 : o(e, "", t, n);
  }
  var a = n(45),
    s = (n(24), n(315)),
    u = n(318),
    l = (n(2),
      n(571)),
    c = (n(3), "."),
    d = ":";
  e.exports = i;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }

  function o(e, t) {
    return Array.isArray(e) ? e.map(function(e) {
      return e.assignTo(t);
    }) : Object.keys(e).reduce(function(n, o) {
      return i(n, r({}, o, e[o].assignTo(t)));
    }, {});
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var i = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  };
  t.default = o;
}, function(e, t, n) {
  "use strict";

  function r(e, t, n) {
    return t in e ? Object.defineProperty(e, t, {
      value: n,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : e[t] = n, e;
  }

  function o(e, t) {
    return Array.isArray(e) ? e.map(function(e) {
      return e.bindTo(t);
    }) : Object.keys(e).reduce(function(n, o) {
      return i(n, r({}, o, e[o].bindTo(t)));
    }, {});
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var i = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  };
  t.default = o;
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e && e.getType ? e.toString() : e;
  }

  function o() {
    function e(e) {
      return !!u[r(e)];
    }

    function t(e, t) {
      u[r(e)] = t;
    }

    function n(e) {
      delete u[r(e)];
    }

    function o(e) {
      Object.keys(e).forEach(function(t) {
        return c[t] = e[t];
      });
    }

    function a() {
      var e = arguments.length <= 0 || void 0 === arguments[0] ? l : arguments[0],
        t = arguments[1];
      return t && u[t.type] ? c.payload ? u[t.type](e, t.payload, t.meta) : u[t.type](e, t) : e;
    }
    var u = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0],
      l = arguments[1],
      c = {
        payload: !0
      };
    if ("function" == typeof u) {
      var d = u;
      u = {}, d(t, n);
    }
    return e(s.default) || t(s.default, function(e, t) {
      return c.payload ? t.reduce(a, e) : t.payload.reduce(a, e);
    }), i(a, {
      has: e,
      on: t,
      off: n,
      options: o
    });
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var i = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  };
  t.default = o;
  var a = n(70),
    s = function(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }(a);
}, function(e, t, n) {
  "use strict";

  function r(e) {
    for (var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), i = 1; i < t; i++) n[i - 1] = arguments[i];
    if (n && n.length > 0) {
      if (!e || "function" != typeof e && "function" != typeof e.dispatch) throw new TypeError("disbatch must take either a valid Redux store or a dispatch function as first parameter");
      return "function" == typeof e.dispatch && (e = e.dispatch), e(a.default.apply(void 0, n));
    }
    if (!e || "function" != typeof e.dispatch) throw new TypeError("disbatch must take a valid Redux store with a dispatch function as first parameter");
    return o(e, {
      disbatch: r.bind(void 0, e)
    });
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var o = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  };
  t.default = r;
  var i = n(70),
    a = function(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }(i);
}, function(e, t, n) {
  "use strict";
  Object.defineProperty(t, "__esModule", {
    value: !0
  });
  var r = n(587),
    o = function(e) {
      if (e && e.__esModule) return e;
      var t = {};
      if (null != e)
        for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (t[n] = e[n]);
      return t.default = e, t;
    }(r);
  t.default = {
    reduxLogger: o
  };
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return e && e.type === a ? (e.payload.type = a, e.payload) : e;
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.logger = void 0, t.actionTransformer = r;
  var o = n(70),
    i = function(e) {
      return e && e.__esModule ? e : {
        "default": e
      };
    }(o),
    a = i.default.getType(),
    s = t.logger = {};
  for (var u in console) ! function(e) {
    "function" == typeof console[e] && (s[e] = function() {
      for (var t = arguments.length, n = Array(t), r = 0; r < t; r++) n[r] = arguments[r];
      var o = n.pop();
      Array.isArray(o) && o.type === a ? o.forEach(function(t) {
        console[e].apply(console, [].concat(n, [t]));
      }) : (n.push(o), console[e].apply(console, n));
    });
  }(u);
}, function(e, t, n) {
  "use strict";

  function r(e) {
    return function(t) {
      var n = t.dispatch,
        r = t.getState;
      return function(t) {
        return function(o) {
          return "function" == typeof o ? o(n, r, e) : t(o);
        };
      };
    };
  }
  t.__esModule = !0;
  var o = r();
  o.withExtraArgument = r, t.default = o;
}, function(e, t, n) {
  "use strict";

  function r() {
    for (var e = arguments.length, t = Array(e), n = 0; n < e; n++) t[n] = arguments[n];
    return function(e) {
      return function(n, r, a) {
        var s = e(n, r, a),
          u = s.dispatch,
          l = [],
          c = {
            getState: s.getState,
            dispatch: function(e) {
              return u(e);
            }
          };
        return l = t.map(function(e) {
          return e(c);
        }), u = o.a.apply(void 0, l)(s.dispatch), i({}, s, {
          dispatch: u
        });
      };
    };
  }
  var o = n(321);
  t.a = r;
  var i = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  };
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    return function() {
      return t(e.apply(void 0, arguments));
    };
  }

  function o(e, t) {
    if ("function" == typeof e) return r(e, t);
    if ("object" != typeof e || null === e) throw new Error("bindActionCreators expected an object or a function, instead received " + (null === e ? "null" : typeof e) + '. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');
    for (var n = Object.keys(e), o = {}, i = 0; i < n.length; i++) {
      var a = n[i],
        s = e[a];
      "function" == typeof s && (o[a] = r(s, t));
    }
    return o;
  }
  t.a = o;
}, function(e, t, n) {
  "use strict";

  function r(e, t) {
    var n = t && t.type;
    return "Given action " + (n && '"' + n.toString() + '"' || "an action") + ', reducer "' + e + '" returned undefined. To ignore an action, you must explicitly return the previous state.';
  }

  function o(e) {
    Object.keys(e).forEach(function(t) {
      var n = e[t];
      if (void 0 === n(void 0, {
          type: a.a.INIT
        })) throw new Error('Reducer "' + t + '" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined.');
      if (void 0 === n(void 0, {
          type: "@@redux/PROBE_UNKNOWN_ACTION_" + Math.random().toString(36).substring(7).split("").join(".")
        })) throw new Error('Reducer "' + t + "\" returned undefined when probed with a random type. Don't try to handle " + a.a.INIT + ' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined.');
    });
  }

  function i(e) {
    for (var t = Object.keys(e), n = {}, i = 0; i < t.length; i++) {
      var a = t[i];
      "function" == typeof e[a] && (n[a] = e[a]);
    }
    var s, u = Object.keys(n);
    try {
      o(n);
    } catch (e) {
      s = e;
    }
    return function() {
      var e = arguments.length <= 0 || void 0 === arguments[0] ? {} : arguments[0],
        t = arguments[1];
      if (s) throw s;
      for (var o = !1, i = {}, a = 0; a < u.length; a++) {
        var l = u[a],
          c = n[l],
          d = e[l],
          f = c(d, t);
        if (void 0 === f) {
          var h = r(l, t);
          throw new Error(h);
        }
        i[l] = f, o = o || f !== d;
      }
      return o ? i : e;
    };
  }
  var a = n(322);
  n(98), n(323), t.a = i;
}, function(e, t, n) {
  var r = n(424);
  "string" == typeof r && (r = [
    [e.i, r, ""]
  ]), n(121)(r, {}), r.locals && (e.exports = r.locals);
}, function(e, t, n) {
  var r = n(426);
  "string" == typeof r && (r = [
    [e.i, r, ""]
  ]), n(121)(r, {}), r.locals && (e.exports = r.locals);
}, function(e, t, n) {
  e.exports = n(595);
}, function(e, t, n) {
  "use strict";
  (function(e, r) {
    Object.defineProperty(t, "__esModule", {
      value: !0
    });
    var o, i = n(596),
      a = function(e) {
        return e && e.__esModule ? e : {
          "default": e
        };
      }(i);
    o = "undefined" != typeof self ? self : "undefined" != typeof window ? window : void 0 !== e ? e : r;
    var s = (0, a.default)(o);
    t.default = s;
  }).call(t, n(55), n(72)(e));
}, function(e, t, n) {
  "use strict";

  function r(e) {
    var t, n = e.Symbol;
    return "function" == typeof n ? n.observable ? t = n.observable : (t = n("observable"), n.observable = t) : t = "@@observable", t;
  }
  Object.defineProperty(t, "__esModule", {
    value: !0
  }), t.default = r;
}]);
(function() {
  "use strict";
  TS.registerModule("sli_expert_search", {
    is_expanded: false,
    last_query: "",
    last_api_response: {},
    sli_expert_search_group: null,
    sli_expert_search_debug_group: null,
    onStart: function() {
      if (TS.client) {
        TS.experiment.loadUserAssignments().then(function() {
          TS.sli_expert_search.sli_expert_search_group = TS.experiment.getGroup("sli_expert_search");
          TS.sli_expert_search.sli_expert_search_debug_group = TS.experiment.getGroup("sli_expert_search_debug");
        });
      }
    },
    isEnabled: function() {
      return TS.sli_expert_search.sli_expert_search_group === "show_experts";
    },
    render: function(query, experts, channels) {
      TS.sli_expert_search.last_api_response = {
        experts: experts,
        channels: channels
      };
      if (TS.sli_expert_search.last_query !== query) {
        TS.sli_expert_search.is_expanded = false;
        TS.sli_expert_search.last_query = query;
      }
      var html = "";
      var users_for_cta = _(experts).map(function(expert_group) {
        return _.map(expert_group.users, function(user_data) {
          return TS.members.getMemberById(user_data.id);
        });
      }).flatten().uniqBy("id").value();
      var user_count = users_for_cta.length;
      var show_plus_sign_on_last_face = users_for_cta.length > 4;
      users_for_cta = _.take(users_for_cta, 4);
      var results = _.map(experts, function(expert_group, key) {
        if (key === "order") return;
        var users = _.map(expert_group.users, function(user_data) {
          return TS.members.getMemberById(user_data.id);
        });
        var channels = _.map(expert_group.channels, function(channel_data) {
          return TS.channels.getChannelById(channel_data.id);
        });
        return {
          users: users,
          faces: _.take(users, 2),
          description: _getDescription(users, channels),
          channels: channels,
          partial_terms: !_allTermsMatch(query, expert_group.terms),
          terms: _getTermsAsArray(query, expert_group.terms)
        };
      });
      results = _.compact(results);
      var channel_matches = [];
      if (!_.isEmpty(channels)) {
        var channel_links = _.map(channels, function(channel, key) {
          if (key === "order") return;
          var channel_ob = TS.channels.getChannelById(channel.id);
          return TS.templates.builders.makeChannelLink(channel_ob);
        });
        channel_links = _.compact(channel_links);
        channel_matches.push({
          channels: new Handlebars.SafeString(TS.i18n.listify(channel_links, {
            no_escape: true
          }).join(""))
        });
      }
      html += TS.templates.sli_expert_search_results({
        query: query,
        users: users_for_cta,
        user_count: user_count,
        show_plus_sign_on_last_face: show_plus_sign_on_last_face,
        terms: query,
        results: results,
        channel_matches: channel_matches,
        expanded: TS.sli_expert_search.is_expanded,
        debug: TS.sli_expert_search.sli_expert_search_debug_group === "sli_expert_search_debug"
      });
      return html;
    },
    toggleExpand: function() {
      TS.sli_expert_search.is_expanded = !TS.sli_expert_search.is_expanded;
      $("[data-js=sli_expert_search]").toggleClass("sli_expert_search--collapsed", !TS.sli_expert_search.is_expanded);
      TS.clog.track(TS.sli_expert_search.is_expanded ? "SEARCH_OPEN" : "SEARCH_CLOSE", {
        request_id: TS.search.last_request_id,
        open_method: TS.sli_expert_search.is_expanded ? "experts_expand" : "experts_collapse"
      });
    },
    handleExpertsClick: function(e, search_module, type) {
      var index;
      var group;
      var iid;
      group = $(e.target).parents("[data-expert-search-group-index]").data("expert-search-group-index");
      if (search_module === "experts") {
        if (type === "user") {
          index = $(e.target).parents(".sli_expert_search__description").find(".member").index(e.target);
          iid = _.get(TS.sli_expert_search.last_api_response, ["experts", group, "users", index, "iid"]);
        } else {
          index = $(e.target).parents(".sli_expert_search__description").find(".channel_link").index(e.target);
          iid = _.get(TS.sli_expert_search.last_api_response, ["experts", group, "channels", index, "iid"]);
        }
      } else if (search_module === "channels" && type === "channel") {
        index = $(e.target).parents(".sli_expert_search__result").find(".channel_link").index(e.target);
        iid = _.get(TS.sli_expert_search.last_api_response, ["channels", index, "iid"]);
      }
      var clog_args = {
        request_id: TS.search.last_request_id,
        click_iid: iid,
        click_target_type: "experts_" + type,
        click_module_name: search_module,
        click_module_position: TS.sli_expert_search.last_api_response[search_module].order,
        click_sort: "timestamp",
        click_position: group
      };
      clog_args["click_" + type + "_id"] = $(e.target).data((type === "user" ? "member" : "channel") + "-id");
      if (iid) {
        TS.clog.track("SEARCH_CLICK", clog_args);
      }
    }
  });
  var _getDescription = function(users, channels) {
    var user_links = _.map(users, TS.templates.builders.makeMemberPreviewLink);
    var user_link_text = TS.i18n.listify(user_links, {
      no_escape: true
    }).join("");
    var channel_links = _.map(channels, TS.templates.builders.makeChannelLink);
    var channel_link_text = TS.i18n.listify(channel_links, {
      strong: true,
      no_escape: true
    }).join("");
    return TS.i18n.t("{user_link_text} in {channel_link_text}", "search")({
      user_link_text: user_link_text,
      channel_link_text: channel_link_text
    });
  };
  var _allTermsMatch = function(query, terms) {
    return _(query).split(" ").map(function(word) {
      return terms[word.toLowerCase()];
    }).every(Boolean);
  };
  var _getTermsAsArray = function(query, terms) {
    return _.map(query.split(" "), function(word) {
      return {
        word: word,
        present: terms[word.toLowerCase()]
      };
    });
  };
})();
(function() {
  "use strict";
  TS.registerModule("utility.number", {
    onStart: function() {},
    formatNumberWithAbbreviation: function(x, options) {
      if (isNaN(x)) {
        TS.error("Expected input to be a string, got: " + typeof x);
        return;
      }
      if (x < 999) return String(x);
      options = options || {};
      var locale = TS.i18n.locale();
      var abbreviations = TS.i18n.number_abbreviations[locale] || TS.i18n.number_abbreviations["en-US"];
      var rounded_magnitude;
      var fixed_abbrevation = _.get(options, "abbreviation");
      switch (fixed_abbrevation) {
        case "K":
          rounded_magnitude = 3;
          break;
        case "M":
          rounded_magnitude = 6;
          break;
        case "B":
          rounded_magnitude = 9;
          break;
        case "T":
          rounded_magnitude = 12;
          break;
        default:
          var magnitude = Math.floor(parseFloat((Math.log(x) / Math.LN10).toPrecision(12)));
          if (magnitude >= 12) {
            rounded_magnitude = 12;
          } else if (magnitude >= 9) {
            rounded_magnitude = 9;
          } else if (magnitude >= 6) {
            rounded_magnitude = 6;
          } else if (magnitude >= 3) {
            rounded_magnitude = 3;
          } else {
            rounded_magnitude = 0;
          }
      }
      var abbrev_value = x / Math.pow(10, rounded_magnitude);
      if (!_.includes(String(abbrev_value), ".")) return abbrev_value + abbreviations[rounded_magnitude];
      var selected_precision = _.get(options, "precision", 4);
      if (selected_precision > 21 || selected_precision < 1 || isNaN(selected_precision)) {
        TS.warn("Precision must be a value between 1 and 21. Formatting with default precision (4) instead.");
        selected_precision = 4;
      }
      var formatted_value = parseFloat(abbrev_value.toPrecision(selected_precision));
      return formatted_value + abbreviations[rounded_magnitude];
    }
  });
})();
