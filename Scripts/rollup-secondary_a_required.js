webpackJsonp([1, 243, 244, 245, 246, 247, 253, 257], {
  2309: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.email_healing", {
        onStart: function() {
          n();
        },
        test: function() {
          return {
            _correctEmailTypos: i
          };
        }
      });
      var e = 0,
        t = {},
        n = function() {
          var e = $("body");
          e.on("input", "[data-email-healing]", _.debounce(i, 600)), e.on("blur", "[data-email-healing]", i);
        },
        i = function() {
          var n = this,
            i = r(n.value);
          if (TS.utility.email.validateEmail(i).is_valid) {
            var a = TS.utility.email.correctTypos(i, !1);
            if (a.typo_corrected) {
              var s = n.getAttribute("data-email-healing");
              "true" === s && (e += 1, s = e, n.setAttribute("data-email-healing", s)), void 0 === t[s] && (t[s] = {
                color: window.getComputedStyle(n).color,
                orange: this.getAttribute("data-email-healing-typo-color") || "#ffa800",
                green: this.getAttribute("data-email-healing-corrected-color") || "#2ab27b"
              }), n.style.color = t[s].orange, n.style.transition = "color 0.2s ease-out 0s", setTimeout(function() {
                n.value = a.updated_email, n.style.color = t[s].green, n.style.transition = "color 0.2s ease-out 0s";
              }, 300), setTimeout(function() {
                n.style.color = t[s].color, n.style.transition = "color 0.6s ease-out 0.3s";
              }, 500);
            }
          }
        },
        r = function(e) {
          return e || 0 === e ? String(e).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;") : "";
        };
    }();
  },
  2330: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("utility.email", {
        ERROR_EMPTY: "empty",
        ERROR_INVALID: "invalid",
        ERROR_TOO_MANY: "too_many",
        EMAIL_REGEX: new RegExp("^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$", "i"),
        DOMAIN_REGEX: new RegExp("^@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$", "i"),
        convertToArray: function(e) {
          return e.replace(/\s|\n/g, "").replace(/,$/g, "").split(",");
        },
        validateEmail: function(e, t) {
          var n = TS.utility.email.convertToArray(e);
          return i(n, t);
        },
        validateDomain: function(e) {
          var n = e ? TS.utility.email.convertToArray(e) : [];
          return t(n);
        },
        correctTypos: function(e, t) {
          return void 0 === t && (t = !0), o(e, t);
        },
        removeDuplicates: function(e) {
          return _.uniq(TS.utility.email.convertToArray(e)).join(",");
        },
        getErrorMessage: function(t, n) {
          return e[t] ? e[t](n || {}) : "";
        },
        getTooManyErrorMessage: function(t) {
          return e[TS.utility.email.ERROR_TOO_MANY]({
            max_addresses: t
          });
        },
        test: function() {
          return {
            error_messages: e,
            tld_typo: r,
            domain_typo: a
          };
        }
      });
      var e = {
          empty: TS.i18n.t("Please fill in your email.", "email_utility"),
          invalid: TS.i18n.t("Sorry, but that email is invalid.", "email_utility"),
          too_many: TS.i18n.t("Please make your list shorter — we can check up to {max_addresses} addresses at a time.", "email_utility"),
          invalid_domain: TS.i18n.t("Sorry, but that isn’t a valid email domain.", "email_utility")
        },
        t = function(t) {
          Array.isArray(t) || TS.error("Type error: TS.utility.email._validateDomain requires an array. domain_array is a", void 0 === t ? "undefined" : n(t));
          var i = [];
          if (_.each(t, function(e) {
              TS.utility.email.DOMAIN_REGEX.test(e) || i.push(e);
            }), i.length) {
            return {
              is_valid: !1,
              email_domain: t,
              error_key: "invalid_domain",
              error_message: e.invalid_domain(),
              error_domains: i
            };
          }
          return {
            is_valid: !0,
            email_domain: t,
            error_key: "",
            error_message: ""
          };
        },
        i = function(e, t) {
          Array.isArray(e) || TS.error("Type error: TS.utility.email._validateEmail requires an array. email_array is a", void 0 === e ? "undefined" : n(e));
          var i, r, a, s = 0,
            o = e.length;
          if (t && o > t) return r = TS.utility.email.ERROR_TOO_MANY, a = t > 1 ? TS.utility.email.getTooManyErrorMessage(t) : TS.utility.email.getErrorMessage(TS.utility.email.ERROR_INVALID), {
            is_valid: !1,
            email_array: e,
            error_key: r,
            error_message: a
          };
          for (s; s < o; s += 1)
            if (i = e[s], s || "" !== i ? TS.utility.email.EMAIL_REGEX.test(i) || (r = TS.utility.email.ERROR_INVALID) : r = TS.utility.email.ERROR_EMPTY, r) return {
              is_valid: !1,
              email_array: e,
              error_key: r,
              error_message: TS.utility.email.getErrorMessage(r)
            };
          return {
            is_valid: !0,
            email_array: e,
            error_key: "",
            error_message: ""
          };
        },
        r = {
          cmo: "com",
          ocm: "com",
          con: "com",
          "com.com": "com",
          vom: "com",
          cim: "com",
          cpm: "com",
          ccom: "com",
          coom: "com",
          comm: "com",
          cmm: "com"
        },
        a = {
          gmai: "gmail",
          gamil: "gmail",
          gmil: "gmail",
          gmial: "gmail",
          gmal: "gmail",
          gmaill: "gmail",
          gnail: "gmail",
          gamail: "gmail",
          gmsil: "gmail",
          yhoo: "yahoo",
          yahooo: "yahoo",
          yaho: "yahoo",
          homail: "hotmail",
          hotmaill: "hotmail",
          outook: "outlook",
          outlock: "outlook",
          otlook: "outlook",
          outlolk: "outlook"
        },
        s = {},
        o = function(e, t) {
          void 0 === t && (t = !0);
          var n = TS.utility.email.convertToArray(e),
            i = e,
            r = e;
          return n.forEach(function(e) {
            if (t || !s[e]) {
              var n = l(e);
              n.has_typo && (s[e] = !0, i = i.replace(e, n.email_val), r = r.replace(e, n.shadow_val));
            }
          }), {
            typo_corrected: e !== i,
            shadow_email: r.replace(/\n/g, "<br />"),
            updated_email: i
          };
        },
        l = function(e) {
          var t, n, i = e;
          return _.forOwn(r, function(r, a) {
            if (n = new RegExp("\\." + a + "$"), n.test(e)) return t = !0, e = e.replace(n, "." + r), i = i.replace(n, '.<span class="seafoam_green">' + r + "</span>"), !1;
          }), _.forOwn(a, function(r, a) {
            if (n = new RegExp("@" + a + "\\."), n.test(e)) return t = !0, e = e.replace(n, "@" + r + "."), i = i.replace(n, '@<span class="seafoam_green">' + r + "</span>."), !1;
          }), {
            has_typo: t,
            email_val: e,
            shadow_val: i
          };
        };
    }();
  },
  2331: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.url", {
        isValidSlackWebSocketUrl: function(e) {
          var t = TS.utility.url.getHostName(e);
          return "dev" === TS.boot_data.version_ts && "localhost" === t || /\.slack-msgs.com$/.test(t);
        },
        getHostName: function(e) {
          if (!e) return "";
          var t = document.createElement("a");
          return t.href = e, t.hostname;
        },
        setUrlQueryStringValue: function(e, t, n) {
          var i = document.createElement("a");
          i.href = e;
          var r = i.search ? i.search.slice(1) : "";
          return i.search = TS.utility.url.setQueryStringValue(r, t, n), i.href;
        },
        removeUrlQueryStringValue: function(e, t) {
          var n = document.createElement("a");
          if (n.href = e, !n.search) return e;
          var i = n.search.slice(1);
          return n.search = TS.utility.url.removeQueryStringValue(i, t), n.href;
        },
        urlQueryStringParse: function(e) {
          var t = document.createElement("a");
          if (t.href = e, !t.search) return {};
          var n = t.search ? t.search.slice(1) : "";
          return TS.utility.url.queryStringParse(n);
        },
        queryStringParse: function(e) {
          var t, n = {};
          t = e.split("&");
          for (var i = 0; i < t.length; i += 1) {
            var r = t[i].indexOf("=");
            if (-1 != r) {
              var a = t[i].substring(0, r),
                s = t[i].substring(r + 1);
              n[a] = unescape(s);
            } else t[i].length && (n[t[i]] = "");
          }
          return n;
        },
        setQueryStringValue: function(e, t, n) {
          var i = TS.utility.url.queryStringParse(e);
          return i[t] = n, TS.utility.url.queryStringEncode(i);
        },
        removeQueryStringValue: function(e, t) {
          var n = TS.utility.url.queryStringParse(e);
          return n.hasOwnProperty(t) ? (delete n[t], TS.utility.url.queryStringEncode(n)) : e;
        },
        queryStringEncode: function(e) {
          return e ? 0 == Object.keys(e).length ? "" : "?" + Object.keys(e).map(function(t) {
            return encodeURIComponent(t) + "=" + encodeURIComponent(e[t]);
          }).join("&") : "";
        },
        simpleIsUrl: function(e) {
          var t, n, i = !1;
          return -1 !== e.indexOf(" ") ? i : (t = document.createElement("a"), t.href = e, t.protocol && t.hostname && t.pathname && window.location.href.substr(0, window.location.href.lastIndexOf("/")) + "/" + e != t.href && (n = /[a-z0-9]+\.[a-z0-9]+/i, i = n.test(t.hostname), -1 == t.hostname.indexOf(".") && "localhost" === t.hostname && (i = !0)), i);
        }
      });
    }();
  },
  2335: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("enterprise", {
        enterprise_domain_changed_sig: new signals.Signal,
        onStart: function() {
          TS.boot_data.page_needs_enterprise && t(), TS.client && TS.client.user_added_to_team_sig.add(TS.enterprise.ensureTeamInModel), TS.client && TS.client.user_removed_from_team_sig.add(TS.enterprise.ensureTeamInModel);
        },
        getTeamsForMember: function(e, t) {
          var n = TS.model.user;
          if (!e.enterprise_user) return null;
          if (t && !n.enterprise_user) return null;
          if (!TS.model.enterprise || !TS.model.enterprise_teams) return null;
          var i = TS.model.enterprise_teams,
            r = e.enterprise_user.teams,
            a = [],
            s = {
              all: []
            };
          return t && (a = n.enterprise_user.teams, s.other = [], s.shared = []), i.forEach(function(e) {
            var n = !1,
              i = !1;
            r.indexOf(e.id) > -1 && (n = !0, s.all.push(e)), t && n && (a.indexOf(e.id) > -1 && (i = !0), i ? s.shared.push(e) : s.other.push(e));
          }), s;
        },
        upsertAndSignal: function(e) {
          if (TS.boot_data.page_needs_enterprise || TS.warn("Unexpected call to TS.enterprise.upsertAndSignal"), e) {
            var t = TS.enterprise.upsertEnterprise(e);
            return "CHANGED" === t.status && -1 != t.what_changed.indexOf("name") && TS.enterprise.enterprise_domain_changed_sig.dispatch(t.enterprise), t;
          }
        },
        upsertEnterprise: function(e) {
          TS.boot_data.page_needs_enterprise || TS.warn("Unexpected call to TS.enterprise.upsertEnterprise"), t();
          var i = TS.model.enterprise,
            r = "NOOP",
            a = [];
          if (e)
            for (var s in e) i[s] != e[s] && ("icon" === s ? (i[s] = e[s], a.push(s), r = "CHANGED") : i[s] != e[s] && (e[s] && !TS.utility.isScalar(e[s]) ? (i[s] = e[s], TS.warn(s + " is not scalar! it needs to be handled by upsertEnterprise specifically to test if it has changed! " + n(e[s]))) : "boolean" == typeof e[s] && !e[s] == !i[s] || (i[s] = e[s], a.push(s), r = "CHANGED")));
          return {
            status: r,
            enterprise: i,
            what_changed: a
          };
        },
        upsertEnterpriseTeam: function(t, n) {
          if (TS.boot_data.page_needs_enterprise || TS.warn("Unexpected call to TS.enterprise.upsertEnterpriseTeam"), t && "string" != typeof t) {
            var s = TS.model.enterprise_teams,
              o = TS.enterprise.getTeamById(t.id),
              l = TS.model.team && t.id === TS.model.team.id;
            return o ? (_.each(_.keys(t), function(e) {
              o[e] = "description" === e ? _.unescape(t[e]) : t[e];
            }), t = o, a(t), r(t), l && (t = _.merge({}, o, TS.model.team))) : (i(t), l && (t = _.merge({}, t, TS.model.team)), s.push(t), e[t.id] = t), l && !n && (n = !0, TS.team.upsertTeam(t, n)), t;
          }
        },
        getTeamById: function(t) {
          var n = TS.model.enterprise_teams,
            i = e[t];
          if (i) return i;
          if (!n) return null;
          for (var r = 0; r < n.length; r += 1)
            if (i = n[r], i.id === t) return TS.warn(t + " not in _id_map?"), e[t] = i, i;
          return null;
        },
        promiseToEnsureEnterprise: function() {
          return TS.boot_data.page_needs_enterprise || TS.warn("Unexpected call to TS.enterprise.promiseToEnsureEnterprise"), t(), Promise.all([TS.api.call("enterprise.info", {
            include_primary_owner: !0
          }).reflect(), TS.enterprise.promiseToGetTeams().reflect()]).then(function(e) {
            var t = [];
            if (e.forEach(function(e) {
                e.isFulfilled() || t.push(e.reason());
              }), t.length) return Promise.reject(new Error("Some enterprise APIs failed:\n" + t.join("\n")));
            var n = e[0].value().data.enterprise;
            TS.enterprise.upsertEnterprise(n);
          });
        },
        promiseToGetTeams: function(e) {
          var t = {
            include_archived: !1,
            include_deleted: !1,
            include_user_counts: !0,
            include_leave_team: !0,
            include_join_request: !0
          };
          return e && (t.exclude_discoverable = e), TS.api.call("enterprise.teams.list", t).reflect().then(function(t) {
            return t.isFulfilled() ? (t.value().data.teams.forEach(function(e) {
              TS.enterprise.upsertEnterpriseTeam(e);
            }), Promise.resolve(TS.model.enterprise_teams.filter(function(t) {
              return !e || e.indexOf(t.discoverable) < 0;
            }))) : Promise.reject(new Error("The API failed:\n" + t.reason()));
          });
        },
        ensureTeamInModel: function(e, t) {
          var n = {
            include_user_counts: !0,
            include_leave_team: !0,
            team: e,
            include_join_request: !0
          };
          return TS.model.enterprise_api_token && (n.enterprise_token = TS.model.enterprise_api_token), t && (n = _.merge({}, n, t)), TS.api.callImmediately("enterprise.teams.info", n).then(function(e) {
            return !!e.data.ok && TS.enterprise.upsertEnterpriseTeam(e.data.team);
          });
        },
        addTeamsToSharedForChannel: function(e, t) {
          if (TS.boot_data.page_needs_enterprise && e.is_shared && !e.is_global_shared) {
            var n = e.shared_team_ids;
            n = _(n).concat(t).uniq().value(), e.shared_team_ids = n;
          }
        },
        updateSharesForChannel: function(e, t) {
          TS.boot_data.page_needs_enterprise && e.is_shared && (e.shared_team_ids = _.uniq(t));
        },
        isUserOnTeam: function(e, t) {
          return e.enterprise_user.teams.indexOf(t.id) > -1;
        }
      });
      var e = {},
        t = function() {
          TS.model.enterprise && TS.model.enterprise_teams || (TS.model.enterprise = _.merge({}, TS.model.enterprise), TS.model.enterprise_teams = _.merge([], TS.model.enterprise_teams));
        },
        i = function(e) {
          switch (e.discoverable) {
            case "public":
            case "open":
              e.is_open = !0;
              break;
            case "private":
            case "closed":
              e.is_closed = !0;
              break;
            case "unlisted":
            default:
              e.is_unlisted = !0;
          }
          e.description = _.unescape(e.description), e.user_counts || (e.user_counts = {}), e.user_counts && !e.user_counts.active_members && (e.user_counts.active_members = 0), a(e), void 0 === e.joined_date && (e.joined_date = 0), r(e);
        },
        r = function(e) {
          !1 === e.can_leave && e.cannot_leave_reasons && 1 === e.cannot_leave_reasons.length && "not_team_member" === e.cannot_leave_reasons[0] && !e.is_assigned && (e.can_leave = !0, e.cannot_leave_reasons = []);
        },
        a = function(e) {
          if (e.top_combined_channels || (e.top_combined_channels = []), e.your_channels || e.your_groups) {
            var t = [];
            e.your_channels && (t = t.concat(e.your_channels)), e.your_groups && (t = t.concat(e.your_groups)), e.top_combined_channels = _.uniqBy(e.top_combined_channels.concat(t), "id").sort(function(e, t) {
              var n = e.name.toLowerCase(),
                i = t.name.toLowerCase();
              return n < i ? -1 : n > i ? 1 : 0;
            });
          }
        };
    }();
  },
  2362: function(e, t) {
    ! function() {
      "use strict";
      TS.registerComponent("PresenceList", {
        _constructor: function(e) {
          this._list = [], this.added_sig = new signals.Signal, this.removed_sig = new signals.Signal, TS.presence_manager.addPresenceList(this), e && this.add(e);
        },
        add: function(e) {
          _.isArray(e) || (e = [e]);
          var t = _.difference(e, this._list);
          t.length && (this._list = this._list.concat(t), this.added_sig.dispatch(t));
        },
        remove: function(e) {
          _.isArray(e) || (e = [e]);
          var t = _.intersection(e, this._list);
          t.length && (this._list = _.difference(this._list, t), this.removed_sig.dispatch(t));
        },
        clear: function() {
          this.removed_sig.dispatch(this._list), this._list = [];
        },
        destroy: function() {
          this.removed_sig.dispatch(this._list), this._list = null;
        }
      });
    }();
  },
  2363: function(e, t) {
    ! function() {
      "use strict";
      TS.registerComponent("PromiseQueue", {
        _constructor: function() {
          this.queue = [], this.current_job = null;
        },
        destroy: function() {
          this.clear();
        },
        clear: function() {
          this.queue = [], this.current_job && this.current_job.isPending() && this.current_job.cancel(), this.current_job = null;
        },
        addToQ: function(e) {
          return new Promise(function(t, n) {
            if (this.queue.push(function() {
                var i = e();
                return i && i.then || (i = Promise.resolve()), i.then(t, n), i;
              }), 1 === this.queue.length && !this.current_job) return this._nextFromQ();
          }.bind(this));
        },
        _nextFromQ: function() {
          if (!this.current_job && this.queue.length) {
            var e = this.queue.shift(),
              t = e();
            return this.current_job = t, t.finally(function() {
              return this.current_job = null, this._nextFromQ(), null;
            }.bind(this)), null;
          }
        }
      });
    }();
  },
  2365: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("api.connection", {
        onStart: function() {
          n = TS.qs_args.api_timings || TS.utility.enableFeatureForUser(i);
        },
        test: function() {
          var i = {};
          return Object.defineProperty(i, "_should_send_timing_data", {
            get: function() {
              return n;
            },
            set: function(e) {
              n = e;
            }
          }), Object.defineProperty(i, "_internet_connected_p", {
            get: function() {
              return e;
            },
            set: function(t) {
              e = t;
            }
          }), Object.defineProperty(i, "_ms_reconnected_p", {
            get: function() {
              return t;
            },
            set: function(e) {
              t = e;
            }
          }), i;
        },
        waitForAPIConnection: function() {
          if (e) return e;
          var t = arguments.length <= 0 || void 0 === arguments[0] ? 1e3 : arguments[0],
            i = arguments[1],
            a = 0,
            s = "function" == typeof t ? t() : t,
            o = s,
            l = function() {
              if ("number" == typeof i && a > i) {
                var e = "Unable to reconnect to the API after " + a + " retry attempts";
                return TS.warn(e), void m.dispatch(new Error(e));
              }
              if (a > 0) {
                var t = a ? "Internet connection still offline after " + a + " retry attempts" : "Internet connection still offline";
                TS.warn(t);
              }
              a += 1, setTimeout(c, o);
            },
            d = function() {
              if (a > 0) {
                if (n) var e = TS.metrics.measureAndClear("api_offline_duration", "api_connectivity_lost");
                var t = _.round(e / 1e3, 2),
                  i = a ? "Internet connection has been re-established after " + a + " retry attempts;" : "Internet connection has been re-established",
                  r = [i, "offline for " + t + " seconds"];
                TS.info(r.join(" "));
              }
              u.dispatch();
            },
            c = function() {
              r(function(e) {
                e ? d() : l();
              });
            },
            u = new signals.Signal,
            m = new signals.Signal;
          return n && TS.metrics.mark("api_connectivity_lost"), e = new Promise(function(t, n) {
            u.addOnce(function() {
              e = void 0, t();
            }), m.addOnce(function(e) {
              n(e);
            }), c();
          });
        },
        promiseToTestAPIConnection: function() {
          return new Promise(function(e) {
            r(function(t) {
              e(t);
            });
          });
        },
        waitForMSToReconnect: function() {
          return TS.isSocketManagerEnabled() ? TS.interop.SocketManager.isConnected() ? Promise.resolve() : (t || (t = new Promise(function(e) {
            TS.interop.SocketManager.connectedSig.addOnce(function() {
              t = void 0, e();
            });
          })), t) : t || (TS.model.ms_connected ? Promise.resolve() : t = new Promise(function(e) {
            var n = TS.isSocketManagerEnabled() ? TS.interop.SocketManager.isAsleep() : TS.ms.isAsleep(),
              i = TS.model.calling_rtm_start,
              r = TS.ms.calling_test_fast_reconnect,
              a = ["API paused? " + TS.api.isPaused(), "MS asleep? " + n, "Starting RTM? " + i, "Attempting fast reconnect? " + r];
            if (TS.info("Waiting for the MS to be reconnected. Current state: " + a.join(", ")), i) return TS.info("MS not connected, proceeding with rtm.start"), t = void 0, void e();
            if (r) return TS.info("MS not connected, proceeding with a fast reconnect"), t = void 0, void e();
            TS.info("Listening for the MS connected signal");
            var s = function() {
              t = void 0, e();
            };
            TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.addOnce(s) : TS.ms.connected_sig.addOnce(s), n ? TS.info("MS is not connected, but it is asleep so not trying to wake it up") : (TS.info("MS is not connected, but it is not asleep, so requesting a reconnect"), TS.isSocketManagerEnabled() || TS.ms.reconnect_requested_sig.dispatch());
          }));
        }
      });
      var e, t, n, i = 1,
        r = function(e) {
          $.ajax({
            url: TS.model.api_url + "api.test",
            timeout: 6e4
          }).then(function(t) {
            var n = !(!t || !t.ok);
            e(n);
          }).fail(function() {
            e(!1);
          });
        };
    }();
  },
  2366: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("api", {
        paused_sig: new signals.Signal,
        unpaused_sig: new signals.Signal,
        Q_empty_sig: new signals.Signal,
        onStart: function() {
          if (TS.boot_data.feature_name_tagging_client) {
            var e = ["channels.view", "rtm.leanStart", "rtm.start", "users.info", "users.list"];
            _.forEach(e, function(e) {
              i[e] ? _.assign(i[e], {
                name_tagging: !0
              }) : i[e] = {
                name_tagging: !0
              };
            });
          }
          TS.boot_data.feature_sli_briefing && r.push("highlights.briefing"), TS.boot_data.feature_sli_channel_insights && r.push("channels.insights");
        },
        test: function() {
          var e = {
            _one_at_a_time_methodsA: l,
            _ensure_model_methodsA: r,
            _pause: Z,
            _unPause: ee,
            _pauseUntilAPIConnectionRestored: ie,
            _promisify: N,
            _getMaxAttempts: v,
            _incrementPending: w,
            _decrementPending: k,
            _getDefaultArgsByMethodName: M,
            _kickOffACallOrEnqueue: C,
            _callOutsideHandler: $,
            _nextFromQ: E,
            _reQueue: P,
            _calculateHTTPErrorDelayMs: j,
            _makeLogSafeMethodName: L,
            _logError: H,
            _getAPIErrorObject: U,
            _maybeShowConnectivityWarning: J,
            _one_at_a_time_Q: f
          };
          return Object.defineProperty(e, "_pauseFor", {
            get: function() {
              return ne;
            },
            set: function(e) {
              ne = e;
            }
          }), Object.defineProperty(e, "_pauseUntilBackOnline", {
            get: function() {
              return re;
            },
            set: function(e) {
              re = e;
            }
          }), Object.defineProperty(e, "_pauseUntilServiceIsUp", {
            get: function() {
              return ae;
            },
            set: function(e) {
              ae = e;
            }
          }), Object.defineProperty(e, "_maybePauseUntilServiceIsUp", {
            get: function() {
              return oe;
            },
            set: function(e) {
              oe = e;
            }
          }), Object.defineProperty(e, "_one_at_a_time_call_pending", {
            get: function() {
              return p;
            },
            set: function(e) {
              p = e;
            }
          }), Object.defineProperty(e, "_is_paused", {
            get: function() {
              return h;
            },
            set: function(e) {
              h = e;
            }
          }), Object.defineProperty(e, "_ensure_model_methodsA", {
            get: function() {
              return r;
            },
            set: function(e) {
              r = e;
            }
          }), Object.defineProperty(e, "_one_at_a_time_methodsA", {
            get: function() {
              return l;
            },
            set: function(e) {
              l = e;
            }
          }), Object.defineProperty(e, "_max_attempts", {
            get: function() {
              return S;
            }
          }), Object.defineProperty(e, "_pending", {
            get: function() {
              return u;
            },
            set: function(e) {
              u = e;
            }
          }), Object.defineProperty(e, "_pause_secs", {
            get: function() {
              return g;
            },
            set: function(e) {
              g = e;
            }
          }), Object.defineProperty(e, "_maybeTimingClearMarks", {
            get: function() {
              return K;
            },
            set: function(e) {
              K = e;
            }
          }), Object.defineProperty(e, "_maybeTimingCount", {
            get: function() {
              return W;
            },
            set: function(e) {
              W = e;
            }
          }), Object.defineProperty(e, "_maybeTimingMark", {
            get: function() {
              return q;
            },
            set: function(e) {
              q = e;
            }
          }), Object.defineProperty(e, "_maybeTimingMeasure", {
            get: function() {
              return z;
            },
            set: function(e) {
              z = e;
            }
          }), Object.defineProperty(e, "_maybeShowConnectivityWarning", {
            get: function() {
              return J;
            },
            set: function(e) {
              J = e;
            }
          }), Object.defineProperty(e, "_default_api_args", {
            get: function() {
              return n;
            },
            set: function(e) {
              n = e;
            }
          }), Object.defineProperty(e, "_default_api_args_by_method", {
            get: function() {
              return i;
            },
            set: function(e) {
              i = e;
            }
          }), Object.defineProperty(e, "_kickOffACall", {
            get: function() {
              return I;
            },
            set: function(e) {
              I = e;
            }
          }), Object.defineProperty(e, "_kickOffACallOrEnqueue", {
            get: function() {
              return C;
            },
            set: function(e) {
              C = e;
            }
          }), Object.defineProperty(e, "_last_connectivity_warning_time", {
            get: function() {
              return Y;
            },
            set: function(e) {
              Y = e;
            }
          }), Object.defineProperty(e, "_api_queue_depth_warning_threshold", {
            get: function() {
              return V;
            },
            set: function(e) {
              V = e;
            }
          }), Object.defineProperty(e, "_main_Q", {
            get: function() {
              return m;
            },
            set: function(e) {
              m = e;
            }
          }), Object.defineProperty(e, "_one_at_a_time_Q", {
            get: function() {
              return f;
            },
            set: function(e) {
              f = e;
            }
          }), Object.defineProperty(e, "_makeRequest", {
            get: function() {
              return A;
            },
            set: function(e) {
              A = e;
            }
          }), e;
        },
        call: function(e, t, n, i, r) {
          return C(e, t, n, i, r);
        },
        callImmediately: function(e, t, n, i, r) {
          if (-1 != l.indexOf(e) && p) return TS.warn(e + " cannot be called with TS.api.callImmediately because a one-at-a-time call is already pending, so sending to _kickOffACallOrEnqueue for enqueuing"), C(e, t, n, i, r, !0);
          if (h) return TS.warn(e + " cannot be called with TS.api.callImmediately because we are waiting due to a non-200 response, so sending to _kickOffACallOrEnqueue for enqueuing"), C(e, t, n, i, r, !0);
          t = t || {};
          var a = N(e, n);
          return I(e, t, a, i, r);
        },
        callSynchronously: function(e, t, n, i, r) {
          return t = t || {}, t._synchronously = !0, TS.api.callImmediately(e, t, n, i, r);
        },
        debugGetCounts: function() {
          return {
            _method_call_counts: T,
            _pending: u
          };
        },
        hasPendingRequests: function() {
          return !!u;
        },
        getQLengths: function() {
          return {
            _main_Q: m.length,
            _one_at_a_time_Q: f.length
          };
        },
        isPaused: function() {
          return h;
        },
        callFuncWhenApiQisEmpty: function(e) {
          TS.api.hasPendingRequests() ? TS.api.Q_empty_sig.has(e) || TS.api.Q_empty_sig.addOnce(e) : e();
        },
        debugShowStatus: function() {
          TS.console.group("TS.api status"), h ? g ? TS.console.log(2, "API calls are paused for " + g + "more seconds") : TS.console.log(2, "API calls are paused.") : TS.console.log(2, "API calls are NOT paused"), TS.console.warn(2, "Pending count is " + u + ", main queue length is " + m.length + ", and one-at-a-time queue length is " + f.length), T.total_asks == T.total_attempts ? TS.console.log(2, "Total API calls made (there have been no retries): " + T.total_asks) : (TS.console.log(2, "Total API calls made (not including retries): " + T.total_asks), TS.console.log(2, "Total API calls made (including retries): " + T.total_attempts)), T.total_non_200s ? TS.console.warn(2, "Total non-200 API responses: " + T.total_non_200s) : TS.console.log(2, "No non-200 API responses"), TS.console.groupEnd("TS.api status");
        },
        debugShowQueue: function() {
          _.forEach({
            main: m,
            "one-at-a-time": f
          }, function(e, t) {
            TS.console.group("TS.api " + t + " queue"), e.length ? e.forEach(function(e) {
              TS.console.log(2, e.method, e.args);
            }) : TS.console.log(2, "Nothing pending in " + t + " queue"), TS.console.groupEnd("TS.api " + t + " queue");
          });
        },
        debugSetPaused: function(e) {
          e ? (Z({
            reason: {
              DEBUG: !0
            },
            retry_after: 1e5
          }), TS.console.log(2, "API calls are now paused for", 100, "seconds")) : (ee(), TS.console.log(2, "API calls are now unpaused"));
        },
        runNextFromQueue: function() {
          if (h) return void TS.info("Calls are paused, so runNextFromQueue doing anything");
          TS.info("Running next from queue"), E();
        }
      });
      var e, t, n = {},
        i = {
          "channels.view": {
            canonical_avatars: !0
          },
          "rtm.leanStart": {
            canonical_avatars: !0
          },
          "rtm.start": {
            canonical_avatars: !0
          },
          "users.info": {
            canonical_avatars: !0
          },
          "users.list": {
            canonical_avatars: !0
          }
        },
        r = ["activity.mentions", "stars.list", "files.list", "files.info", "search.messages", "search.files", "channels.history", "groups.history", "im.history", "mpim.history", "channels.listShared", "groups.listShared", "unread.history", "pins.list", "subteams.users.list", "subteams.list", "channels.replies", "groups.replies", "im.replies", "subscriptions.thread.getView", "chat.command"],
        a = ["channels.history"],
        s = ["rtm.start", "rtm.leanStart", "files.list"],
        o = ["rtm.start", "rtm.leanStart", "activity.mentions", "stars.list", "files.list", "files.info", "apps.list", "commands.list", "channels.list", "emoji.list", "help.issues.list", "subteams.list", "subteams.users.list", "rtm.checkFastReconnect"],
        l = ["users.prefs.set", "rtm.start", "rtm.leanStart", "rtm.checkFastReconnect", "enterprise.setPhoto", "signup.createTeam"],
        d = ["channels.view", "dnd.teamInfo", "screenhero.rooms.create", "screenhero.rooms.join", "screenhero.rooms.refreshToken", "screenhero.rooms.invite", "highlights.list"],
        c = ["api.test", "auth.emailToken", "auth.findTeam", "auth.findUser", "auth.loginMagic", "auth.signin", "enterprise.signup.complete", "enterprise.signup.checkDomain", "enterprise.signup.checkPassword", "helpdesk.get", "search.appDirectory", "signup.addLead", "team.checkEmailDomains", "test.versionInfo", "oauth.access"],
        u = 0,
        m = [],
        p = !1,
        f = [],
        h = !1,
        g = 0,
        S = 10,
        T = {
          total_asks: 0,
          total_attempts: 0,
          total_non_200s: 0
        },
        b = 0,
        v = function(e) {
          return "rtm.start" === e ? 2 : "rtm.leanStart" === e ? 2 : "rtm.checkFastReconnect" === e ? 2 : S;
        },
        y = function(e, t) {
          var n = v(e);
          return "rtm.start" === e && t >= n || ("rtm.leanStart" === e && t >= n || ("rtm.checkFastReconnect" === e && t >= n || (b >= 4 || void 0)));
        },
        w = function(e) {
          u += 1, u >= 10 ? W("ts_api_pending_10plus") : u >= 5 ? W("ts_api_pending_5plus") : u >= 3 ? W("ts_api_pending_3plus") : 2 == u ? W("ts_api_pending_2") : 1 == u && W("ts_api_pending_1"), -1 != l.indexOf(e) && (p = !0);
        },
        k = function(e) {
          u -= 1, -1 != l.indexOf(e) && (p = !1);
        },
        x = function(e) {
          k(e), h || E();
        },
        M = function(e) {
          return _.assign({}, n, i[e]);
        },
        C = function(e, t, n, i, r, a) {
          if (_.isUndefined(e)) throw TS.error("Tried to make API call, but API method name was not specified"), new Error("Invalid API call");
          t = _.defaults(t || {}, M(e));
          var s, o = N(e, n);
          if (-1 != l.indexOf(e)) {
            if (!h && !p) return I(e, t, o, i, r);
            s = f;
          } else {
            if (!h && u < 4) return I(e, t, o, i, r);
            s = m;
          }
          var d = {
            p: o,
            method: e,
            args: t,
            dont_set_active: i,
            progressHandler: r
          };
          return a ? s.unshift(d) : s.push(d), h && (W("ts_api_called_while_paused"), J()), s == m && W("ts_api_main_queue_depth", m.length), o.promise;
        },
        I = function(e, t, n, i, r) {
          if (n.promise.isCancelled()) return TS.has_pri[ce] && TS.log(ce, e + " cancelled before call could be made in TS.api"), setTimeout(E, 1), n.promise;
          if (TS.boot_data.feature_conversations_api) {
            var a = /^(channels|groups|mpim|im)\./;
            e = e.replace(a, "conversations.");
          }
          TS.has_pri[ce] && TS.log(ce, 'calling method "' + e + '" args._attempts:' + t._attempts), w(e);
          var s = e.indexOf("search.") > -1;
          TS.boot_data.page_needs_enterprise && t.enterprise_token && s && !TS.model.prefs.search_only_current_team ? t.token = t.enterprise_token : TS.boot_data.page_needs_enterprise && t.enterprise_token && !s ? t.token = t.enterprise_token : t.token = TS.model.api_token, TS.client || i || (t.set_active = !0, TS.model.last_net_send = Date.now());
          var o = Date.now(),
            l = O(e, t),
            c = o / 1e3,
            u = TS.model.api_url + e + "?_x_id=" + TS.boot_data.version_uid.substring(0, 8) + "-" + c;
          return _.each(TS.qs_args, function(e, t) {
            0 != t.indexOf("feature_") && 0 != t.indexOf("exp_") || (u += "&" + encodeURIComponent(t) + "=" + encodeURIComponent(e));
          }), "rtm.start" !== e && "rtm.leanStart" !== e || !TS.client || TS.isSocketManagerEnabled() || (u = TS.utility.appendLogToUrlWithLimit(u, TS.ms.getConnectionFlowLog())), TS.boot_data.feature_channel_eventlog_client && ("channels.history" !== e && "groups.history" !== e && "im.history" !== e && "mpim.history" !== e || (t.visible = 1)), A(u, e, t, n, function() {
            F(l);
          }, i, r, function(i, r) {
            var a = Date.now() - o;
            if (TS.dir(2, {
                data: i,
                args: t
              }, 'got api rsp for method "' + e + '" (took ' + a + "ms)"), i = i || {
                ok: !1
              }, i.ok) return B(l), $(e, t, i, r, n), {
              breathing_ms: 100,
              try_again: !1
            };
            if (R(l), H(e, t, i), -1 != d.indexOf(e)) return TS.warn('NOT re-Qing "' + e + '", as specified'), $(e, t, i, r, n), {
              breathing_ms: 100,
              try_again: !1
            };
            if ((429 == i.status || 503 == i.status) && t._attempts >= v(e) || t._synchronously) return TS.warn('NOT re-Qing api call "' + e + '" because we tried too many times (' + t._attempts + ")"), $(e, t, i, r, n), {
              breathing_ms: 100,
              try_again: !1
            };
            if ("_timeout" === i.error) return {
              breathing_ms: 5e3,
              try_again: !0
            };
            if ("_badly_formed" === i.error) return {
              breathing_ms: 100,
              try_again: !0
            };
            if ("_http_error" === i.error) {
              if (t._delay_ms = j(t, i), 0 == i.status && y(e, t._attempts)) return re(t._attempts), {
                breathing_ms: 0
              };
              if (429 == i.status) ne(t._delay_ms);
              else if (i.status >= 500 && y(e, t._attempts)) {
                var s = function() {
                  var e = {};
                  return function() {
                    e._delay_ms = j(e, i);
                  };
                }();
                oe(s, v(e), t._attempts);
                var c = t._attempts < v(e);
                return {
                  breathing_ms: t._delay_ms,
                  try_again: c
                };
              }
              return T.total_non_200s += 1, {
                breathing_ms: t._delay_ms
              };
            }
            var _ = !1,
              u = 100;
            return t._attempts < 3 && ("search.files" !== e && "search.messages" !== e || "solr_failed" !== i.error ? "users.info" === e && "user_not_found" === i.error && (u = 1e3 * t._attempts, _ = !0) : _ = !0), _ ? {
              breathing_ms: u,
              try_again: !0
            } : ($(e, t, i, r, n), {
              breathing_ms: 100,
              try_again: !1
            });
          }), n.promise;
        },
        A = function(e, t, n, i, r, a, s, l) {
          var d = new XMLHttpRequest,
            u = -1 != o.indexOf(t),
            m = 0;
          n._attempts || (n._attempts = 0, T.total_asks += 1, T[t] = T[t] ? T[t] + 1 : 1), n._attempts += 1, T.total_attempts += 1, TS.has_pri[_e] && TS.log(_e, t + " count: " + T[t] + " (asks: " + T.total_asks + " attempts: " + T.total_attempts + ")");
          var p = function() {
              TS._count_bytes_received && (TS._bytes_received += d.responseText.length);
              var e = JSON.parse(d.responseText);
              b = 0;
              var r = l(e, d.getResponseHeader("X-Slack-Req-Id"));
              r.try_again && setTimeout(function() {
                P(t, n, i, a, s);
              }, r.breathing_ms), x(t);
            },
            f = function() {
              function e() {
                P(t, n, i, a, s), x(t);
              }
              "rtm.start" !== t && "rtm.leanStart" !== t || !TS.ms || TS.isSocketManagerEnabled() || TS.ms.logConnectionFlow("TS.api got a " + d.status + " response for method: " + t);
              var r = {
                ok: !1,
                error: "_http_error",
                status: parseInt(d.status, 10),
                retry_after: parseInt(d.getResponseHeader && d.getResponseHeader("Retry-After"), 10)
              };
              r.status >= 500 || 0 == r.status ? b += 1 : b = 0;
              var o = l(r);
              if (!1 === o.try_again) {
                $(t, n, r, void 0, i), x(t);
              } else o.breathing_ms ? setTimeout(e, o.breathing_ms) : e();
            },
            h = function() {
              d.onerror = _.noop, d.onreadystatechange = _.noop, d.onprogress = _.noop, d.abort(), g = _.noop;
              var e = {
                  ok: !1,
                  error: "_timeout",
                  seconds: 6e4
                },
                r = l(e);
              setTimeout(function() {
                r.try_again && P(t, n, i, a, s), x(t);
              }, r.breathing_ms);
            };
          i.onCancel = function() {
            TS.has_pri[ce] && TS.log(ce, t + " cancelled and aborted during request in TS.api"), d.onerror = _.noop, d.onreadystatechange = _.noop, d.onprogress = _.noop, d.abort(), g = _.noop, clearTimeout(m), setTimeout(x, 100, t);
          };
          var g = function(e) {
            if (TS.has_pri[ue] && TS.log(ue, t + " progress: " + (void 0 != e && -1 != e && 100 * e + "%" || -1 != e && 0 !== e && 100 * e + "%" || "unknown")), u) {
              clearTimeout(m);
              var i = 6e4;
              "rtm.start" === t && (i = n.cache_ts ? 9e4 : 12e4), m = setTimeout(function() {
                clearTimeout(m), TS.isSocketManagerEnabled() || TS.ms.logConnectionFlow(t + "_timeout");
                var e = 6e4 + "ms passed, no " + t + " progress",
                  n = "API method timed out after " + i;
                TS.console.logError(e, n, "api_call_timeout", !1), h();
              }, i);
            }
          };
          d.onprogress = function(e) {
            var t = e.lengthComputable ? e.loaded / e.total : -1;
            u && g(t), s && s(t);
          }, d.onerror = function() {}, d.onreadystatechange = function() {
            1 == d.readyState || (2 == d.readyState ? r && r(d) : 3 == d.readyState || 4 == d.readyState && (d.onprogress({
              loaded: 1,
              total: 1,
              lengthComputable: !0
            }), d.onprogress = _.noop, clearTimeout(m), 200 == d.status ? (d.onreadystatechange = null, p()) : f()));
          };
          var S = new FormData,
            v = c.indexOf(t) < 0,
            y = !1;
          Object.keys(n).forEach(function(e) {
            ("token" !== e || v) && "_" !== e[0] && (S.append(e, n[e]), y = !0);
          }), d.open("POST", e, !n._synchronously), d.setRequestHeader("X-Slack-Version-Ts", TS.boot_data.version_ts), u && g(0), y ? d.send(S) : d.send();
        },
        E = function() {
          var e;
          if (f.length && !p ? e = f.shift() : m.length >= Q && t ? (e = _.find(m, function(e) {
              return X(e.method) !== t;
            }), e && m[0] !== e ? _.remove(m, e) : e = m.shift()) : m.length && (e = m.shift()), !e) return void(0 === u && (TS.api.Q_empty_sig.dispatch(), t = void 0));
          t = X(e.method), I(e.method, e.args, e.p, e.dont_set_active, e.progressHandler);
        },
        O = function(e, t) {
          var n = "api_call_" + L(e),
            i = n + "__headers",
            r = "start_" + T.total_asks + "_" + n;
          return q(r), {
            args: t,
            method: e,
            mark_label: r,
            headers_label: i,
            complete_label: n,
            ephemeral: -1 === s.indexOf(e)
          };
        },
        F = function(e) {
          e && (z(e.headers_label, e.mark_label, null, {
            ephemeral: e.ephemeral
          }), D(e, e.headers_label));
        },
        B = function(e) {
          e && (q(e.complete_label, e.mark_label, null, {
            ephemeral: e.ephemeral
          }), D(e, e.complete_label), K(e.mark_label));
        },
        D = function(e, t) {
          if (e && ("rtm.start" === e.method || "rtm.leanStart" === e.method)) {
            var n = t;
            n += "__dmeliding_" + (e.args.only_relevant_ims ? "yes" : "no"), n += "__usercache_" + (TS.storage.isUsingMemberBotCache() ? "yes" : "no"), TS.storage.isUsingMemberBotCache() && (parseInt(e.args.cache_ts, 10) ? n += "__hadcache_yes" : TS.model.had_bad_user_cache ? (n += "__hadcache_bad", t == e.complete_label && (TS.model.had_bad_user_cache = !1)) : n += "__hadcache_no"), z(n, e.mark_label, null, {
              ephemeral: e.ephemeral
            });
          }
        },
        R = function(e) {
          e && K(e.mark_label);
        },
        H = function(e, t, n) {
          if ("file_deleted" === n.error);
          else {
            var i = n,
              r = 'api call "' + e + '" not ok';
            if (TS.console.logError(i, r, "api_call_error", !1), TS.qs_args.log_api_failures) {
              try {
                TS.warn("args: " + JSON.stringify(t));
              } catch (e) {
                TS.warn("could not stringify args");
              }
              try {
                TS.warn("data: " + JSON.stringify(n));
              } catch (e) {
                TS.warn("could not stringify data");
              }
            } else TS.warn("args/data logging skipped, run with ?log_api_failures=1 to enable full logging");
          }
        },
        $ = function(e, t, n, i, s) {
          var o = function() {
            var r, a, o = TS.client && TS.client.stats && TS.client.stats.isEnabled();
            if (o && (le += 1, r = "api_response_handler_" + le, a = "slow_api_handler_" + e, TS.metrics.mark(r)), s.handler(n.ok, n, t, i), o) {
              var l = TS.metrics.measureAndClear(a, r);
              l > de && TS.console.warn("API method handler took too long (" + l + "): " + e, TS.console.getStackTrace());
            }
            return Promise.resolve();
          };
          if (!n.ok && n.active_migration && TS.boot_data) {
            var l = TS.boot_data.api_active_migration_error_response_type;
            return l ? TS.boot_data.ignore_api_active_migration_error ? TS.info('API returned "active_migration" (enterprise org migration) for ' + e + ' - skipping "' + l + '" because ignore_api_active_migration_error set.', n) : "allow_reload" === l ? TS.boot_data.active_migration_reload_underway || (TS.warn('About to reload because API returned "active_migration" (enterprise org migration) for ' + e + " and api_active_migration_error_response_type allows reload.", n), TS.boot_data.active_migration_reload_underway = !0, TS.reload(!1, "TS.api._callOutsideHandler")) : "show_dialog" === l ? TS.boot_data.user_saw_migration_dialog ? TS.info('API returned "active_migration" (enterprise org migration) for ' + e + ", but user has already seen dialog. Doing nothing.") : (TS.info('API returned "active_migration" (enterprise org migration) for ' + e + ". Showing migration dialog."), TS.ui.fs_modal.start({
              title: "This team is joining an Enterprise Organization!",
              body: "Apologies for the interruption. This team is currently being migrated into " + (n.enterprise_name ? "the <b>" + _.escape(n.enterprise_name) + "</b> Organization" : "an Organization") + ", which can take some time to complete. In the meantime, you won’t be able to use it, but we’ll email you once it’s done.",
              show_cancel_button: !1,
              show_go_button: !1,
              disable_default_controls: !0,
              disable_esc: !0
            }), TS.boot_data.user_saw_migration_dialog = !0) : TS.warn('API returned "active_migration" (enterprise org migration) for ' + e + ', but api_active_migration_error_response_type of "' + l + '" not recognized - doing nothing.', n) : TS.info('API returned "active_migration" (enterprise org migration) for ' + e + " - not alerting or reloading because no api_active_migration_error_response_type set.", n), o();
          }
          if (!n.ok) return o();
          if (-1 == r.indexOf(e)) return o();
          var d = function() {
              return TS.lazyLoadMembersAndBots() ? 0 === e.indexOf("bots.") ? Promise.resolve() : (TS.has_pri[me] && TS.log(me, 'running api data from "' + e + '" through TS.bots.ensureBotsInDataArePresent()'), TS.bots.ensureBotsInDataArePresent(n, e, t.channel || void 0).catch(function(e) {
                TS.error(e);
              })) : Promise.resolve();
            },
            c = function() {
              return "unknown_members" === TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics) && _.includes(a, e) ? Promise.resolve() : 0 === e.indexOf("users.") ? Promise.resolve() : (TS.has_pri[me] && TS.log(me, 'running api data from "' + e + '" through TS.members.ensureMembersInDataArePresent()'), TS.members.ensureMembersInDataArePresent(n, e, t.channel || void 0).catch(function(e) {
                TS.error(e);
              }));
            },
            u = function() {
              return TS.boot_data.feature_shared_channels_client ? 0 === e.indexOf("teams.") ? Promise.resolve() : (TS.console.log(528, 'running api data from "' + e + '" through TS.teams.ensureTeamsInDataArePresent()'), TS.teams.ensureTeamsInDataArePresent(n).catch(function(e) {
                TS.console.error(e);
              })) : Promise.resolve();
            };
          (function() {
            return TS.has_pri[me] && TS.log(me, 'running api data from "' + e + '" through TS.shared.ensureModelObsInDataArePresent()'), TS.ensureFullyBooted().then(function() {
              return TS.shared.ensureModelObsInDataArePresent(n, e).catch(function(e) {
                TS.error(e);
              });
            });
          })().then(function() {
            return Promise.join(d(), c(), u());
          }).then(o);
        },
        P = function(e, t, n, i, r) {
          TS.warn('re Qing api call "' + e + '"'), (-1 != l.indexOf(e) ? f : m).unshift({
            method: e,
            args: t,
            p: n,
            dont_set_active: i,
            progressHandler: r
          });
        },
        j = function(e, t) {
          var n, i, r = t.retry_after || 60;
          r > 180 && (r = 180), 429 == t.status || 503 == t.status ? (i = 1.1, n = 180) : (i = 1.3, r = 1, n = 60);
          var a = e._delay_ms ? Math.min(e._delay_ms * i, 1e3 * n) : 1e3 * (r + 1);
          return a += Math.random() * (a / 2), Math.floor(a);
        },
        L = function(e) {
          return String(e).replace(/\./g, "_");
        },
        U = function(e) {
          var t = new Error('API call "' + e.method + '" not ok');
          return t.method = e.method, t.data = e.data, t.args = e.args, t;
        },
        N = function(e, t) {
          var n, i, r = new Promise(function(e, r, a) {
            i = e, n = r, a(function() {
              "function" == typeof t && TS.error("Because you passed a handler, which is deprecated, this API call has been cancelled but your handler has not been called. Use Promise chaining to cancel and react."), s.onCancel();
            });
          });
          "function" == typeof t && (r = r.caught(_.noop));
          var a = function(r, a, s, o) {
              var l = {
                data: a,
                args: s,
                method: e,
                request_id: o
              };
              r ? i(l) : n(U(l)), t && t(r, a, s, o);
            },
            s = {
              promise: r,
              handler: a,
              onCancel: _.noop
            };
          return s;
        },
        G = TS.qs_args.api_timings || Math.random() <= .01,
        W = function(e, t) {
          G && TS.metrics.count(e, t);
        },
        q = function(e) {
          G && TS.metrics.mark(e);
        },
        z = function(e, t, n, i) {
          G && TS.metrics.measure(e, t, n, i);
        },
        K = function(e) {
          G && TS.metrics.clearMarks(e);
        },
        V = 100,
        Y = 0,
        J = function() {
          if (!TS.ui.fs_modal.is_showing && h && !(m.length < V)) {
            Date.now() - Y < 3e5 || (Y = Date.now(), TS.metrics.count("ts_api_connectivity_warning_shown"), TS.ui.fs_modal.start({
              title: "Connection troubles",
              body: "We're having a bit of trouble with our connections to Slack's servers. We've seen this problem clear up with a restart of Slack, a solution which we suggest to you now only with great regret and self-loathing.",
              go_button_text: "Reload Slack",
              cancel_button_text: "Ignore",
              onGo: function() {
                TS.metrics.count("ts_api_connectivity_warning_reload"), TS.reload(null, "API queue was too deep (" + m.length + " / " + V + ") and user chose to reload");
              },
              onCancel: function() {
                TS.metrics.count("ts_api_connectivity_warning_ignore");
              }
            }));
          }
        },
        Q = 5,
        X = function(e) {
          return e.replace(/^(channels|groups|im|mpim)\./, "_modelob_.");
        },
        Z = function(e) {
          if (void 0 === e) throw new Error("Please specify the reason pausing the API");
          h || (h = !0, W("ts_api_pause"), q("ts_api_pause_start"), TS.api.paused_sig.dispatch(e));
        },
        ee = function() {
          h && (h = !1, W("ts_api_unpause"), z("ts_api_pause_duration", "ts_api_pause_start"), K("ts_api_pause_start"));
        },
        te = function() {
          TS.api.unpaused_sig.dispatch();
        },
        ne = function(t) {
          g = Math.max(g, Math.ceil(t / 1e3)), Z({
            reason: {
              API_ERROR: !0
            },
            retry_after: g
          }), clearInterval(e), e = setInterval(function() {
            g -= 1, TS.api.paused_sig.dispatch({
              reason: {
                API_ERROR: !0
              },
              retry_after: g
            }), g || (clearInterval(e), ee(), te(), E());
          }, 1e3);
        },
        ie = function(e, t, n) {
          if (!h) return Z({
            reason: e
          }), TS.api.connection.waitForAPIConnection(t, n).catch(function() {}).then(ee).then(te).then(E).catch(function(e) {
            throw TS.error("An error occured while waiting for API connection to come back", e), e;
          });
        },
        re = function(e) {
          return TS.warn(e + " consecutive connection errors. Pausing API queue until internet returns"), ie({
            OFFLINE: !0
          });
        },
        ae = function(e, t, n) {
          return TS.warn("Received " + n + " consecutive 500s; pausing API queue until we determine the service is in a good state"), ie({
            SERVICE_DOWN: !0
          }, e, t);
        },
        se = !1,
        oe = function(e, t, n) {
          se || (se = !0, TS.api.connection.promiseToTestAPIConnection().then(function(i) {
            i || ae(e, t, n);
          }).finally(function() {
            se = !1;
          }));
        },
        le = 0,
        de = 1e3,
        ce = 2,
        _e = 48,
        ue = 222,
        me = 528;
    }();
  },
  2367: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("apps", {
        onStart: function() {
          t = TS.utility.throttleFunc(t, 3e3, !0);
        },
        isAppSpaceEnabled: function() {
          return !(!TS.model.user || TS.model.user.is_restricted) && ("app_space_enabled" === TS.experiment.getGroup("feat_app_space") || TS.boot_data.feature_app_space);
        },
        resetUpApps: function() {
          TS.storage.storeApps(""), t();
        },
        setUp: function() {
          return TS.apps.fetchApps();
        },
        ingestApp: function(e) {
          e && e.id && (TS.model.apps[e.id] = e, TS.storage.storeApps({
            data: TS.model.apps,
            cache_ts: TS.model.apps_cache_ts
          }));
        },
        ingestApps: function(e) {
          "object" === (void 0 === e ? "undefined" : n(e)) && e && (TS.storage.storeApps({
            data: e,
            cache_ts: TS.model.apps_cache_ts
          }), TS.model.apps = {}, _.forEach(e, function(e) {
            TS.model.apps[e.id] = e;
          }));
        },
        fetchApps: function() {
          var e = TS.storage.fetchApps();
          return e && TS.model.apps_cache_ts == e.cache_ts ? (TS.model.did_we_load_with_app_cache = !0, TS.apps.ingestApps(e.data), Promise.resolve()) : TS.api.call("apps.list").then(function(e) {
            TS.model.apps_cache_ts = e.data.cache_ts, TS.apps.ingestApps(e.data.apps);
          }).catch(_.noop);
        },
        getAppById: function(e) {
          if (!_.isString(e)) return null;
          if (!TS.model.apps) return TS.warn("Trying to look up app by id (" + e + ") but TS.model.apps is not present."), null;
          var t = _.find(TS.model.apps, {
            id: e
          });
          return t ? (t.is_app = !0, t) : (TS.warn("Trying to look up app by id (" + e + ") but it is not present."), null);
        },
        startFlexPaneByAppId: function(e, t, n) {
          return TS.apps.promiseToGetFullAppProfile(null, e, t, n).then(function(t) {
            TS.client.ui.app_profile.openWithApp(t, null, e, n), TS.client.flexDisplaySwitched("apps", t.id, !0, !0);
          }).catch(function() {
            TS.client.ui.flex.hideFlex();
          });
        },
        startFlexPaneByBotId: function(e, t, n) {
          return TS.apps.promiseToGetFullAppProfile(t, e, null, n).then(function(i) {
            TS.client.ui.app_profile.openWithApp(i, t, e, n), TS.client.flexDisplaySwitched("apps", t, !0, !0);
          }).catch(function() {
            TS.client.ui.flex.hideFlex();
          });
        },
        promiseToGetFullAppProfile: function(e, t, n, i) {
          return e && !_.isString(e) ? null : n && !_.isString(n) ? null : new Promise(function(r, a, s) {
            var o = TS.api.call("apps.profile.get", {
              bot: e,
              bot_home_team: t,
              app: n,
              show_auth_summary: !!i
            }).then(function(t) {
              if (t.data.ok && t.data.app_profile) {
                var n = t.data.app_profile;
                TS.apps.ingestApp(n), r(n);
              } else a(t.data.error), TS.warn("Trying to look up app by bot id (" + e + ") but it failed.");
            }).catch(function(t) {
              TS.warn("Trying to look up app by bot id (" + e + ") but it failed."), a(t.data);
            });
            s(function() {
              o.cancel();
            });
          });
        },
        sortNames: function(e) {
          return e.slice().sort(TS.i18n.sorter);
        },
        constructTemplateArgsForCardAndProfile: function(e, t, n, i) {
          if (!e) return TS.warn("Trying to build app card but it failed.");
          void 0 == i && (i = !0);
          var r, a = {
              name: e.name,
              desc: e.desc,
              app_icons: e.icons,
              app_id: e.id,
              bot_id: t,
              is_slack_integration: e.is_slack_integration,
              is_directory_published: e.is_directory_published,
              commands: _.toArray(e.commands)
            },
            s = _.get(e, "bot_user.id"),
            o = n != TS.model.user.team_id;
          if (e.app_card_color && (a.color = TS.utility.hex2rgb(e.app_card_color), a.color.hex = e.app_card_color), e.config && e.config.is_custom_integration) {
            if (e.config.icons)
              if (e.config.icons.emoji) {
                var l = TS.emoji.graphicReplace(_.escape(e.config.icons.emoji), {
                  force_img: !0
                });
                a.emoji_img_tag = new Handlebars.SafeString(l);
              } else a.bot_icons = e.config.icons;
            r = e.bot_user ? e.config.real_name ? e.config.real_name : e.bot_user.username : e.config.username, a.name = r, a.desc = e.config.descriptive_label, a.username = e.config.username, a.custom_integration_type = e.config.custom_integration_type, a.date_created = e.config.date_created;
            var d = '<a class="bold member charcoal_grey" data-member-id=' + e.config.created_by + ">" + TS.members.getPrefCompliantMemberNameById(e.config.created_by, !0, !0) + "</a>";
            a.custom_integration_creator = new Handlebars.SafeString(d);
          }
          if (_.get(e.config, "icons") ? e.config.icons.image_72 ? a.avatar = e.config.icons.image_72 : a.avatar = e.config.icons.image_48 : e.icons && (e.is_slack_integration ? a.avatar = e.icons.image_192 : a.avatar = e.icons.image_96), e.screenshots && (a.screenshots = e.screenshots), e.youtube_url) {
            var c = TS.utility.getYoutubeIdFromURL(e.youtube_url);
            a.youtube_url = e.youtube_url, a.youtube_id = c;
          }
          if ((e.screenshots || e.youtube_url) && (a.has_screenshots = !0), (_.get(e.config, "date_deleted") > 0 || !0 === _.get(e.auth, "revoked")) && (a.deleted = !0, a.app_id = e.id), e.is_slack_integration ? e.is_slack_integration && (TS.boot_data.feature_shared_channels_client && e.is_slack_integration && o ? a.disabled = !1 : e.config && "1" === e.config.is_active && "0" === e.config.date_deleted || (a.disabled = !0)) : TS.boot_data.feature_shared_channels_client && o ? a.disabled = !1 : e.auth && !e.auth.revoked || (a.disabled = !0), !i || o || !s && e.is_slack_integration || (a.show_settings_section = !0), e.installation_summary && !e.is_xoxa_app) {
            var u = e.installation_summary.replace(/<@([A-Z0-9]+)>/g, function(e, t) {
              return TS.members.getMemberById(t) ? '<span class="app_card_member_link" data-member-profile-link=' + t + ">" + TS.members.getPrefCompliantMemberNameById(t, !0, !0) + "</span>" : '<span class="app_card_member_link" data-member-profile-link=' + t + ">A user</span>";
            });
            u = u.replace(/#([a-z0-9-]+)/g, function(e, t) {
              var n = TS.channels.getChannelByName(t);
              if (n) {
                var i = TS.templates.builders.makeChannelPrefix(n);
                return '<span class="app_card_channel_link internal_channel_link" data-channel-id="' + n.id + '">' + i + t + "</span>";
              }
              return t;
            }), a.installation_summary = new Handlebars.SafeString(u);
          }
          if (s) {
            a.bot_user = e.bot_user.id, a.username = e.bot_user.username, a.bot_user_channel_count = e.bot_user.memberships_count, e.bot_user.memberships_count < 1 && e.is_slack_integration && (a.show_settings_section = !1);
            var m = TS.shared.getActiveModelOb();
            if (TS.model.active_channel_id || TS.model.active_group_id) {
              var p = TS.membership.getUserChannelMembershipStatus(e.bot_user.id, m),
                f = p.is_known && p.is_member;
              p.is_known || TS.warn("Not sure whether bot user " + e.bot_user.id + " is a member of " + m.id + "; assuming not just to be sure"), f && (m.is_group && TS.permissions.members.canKickFromGroups() || m.is_channel && TS.permissions.members.canKickFromChannels()) && (a.channel_kick_name = (TS.model.active_channel_id ? "#" : "") + m.name);
            }
            a.disabled || TS.model.user.is_ultra_restricted || (a.show_channel_invite = !0), !0 === a.deleted && (a.hide_link_to_app_profile = !0);
          }
          return e.long_desc_formatted && (a.long_description = new Handlebars.SafeString(e.long_desc_formatted)), e.support_url && (a.support_url = e.support_url), e.user_can_manage && (a.user_can_manage = e.user_can_manage), e.is_slack_integration && _.isEmpty(_.get(e, "commands")) && (a.hide_expand_button = !0), a;
        },
        maybeInviteAppUserToChannel: function(e, t, n) {
          var s;
          if (!_.isObject(e)) throw new Error("Expected app user to be an object");
          if (!_.isObject(t)) throw new Error("Expected channel to be an object");
          var o = t.is_im || t.is_mpim;
          TS.api.call("apps.permissions.add", {
            channel: t.id,
            app_user: e.id
          }).then(function(l) {
            return new Promise(function(d, c) {
              _.get(l, "data.should_confirm") ? (s = _.get(l, "data.scope_info", []), r(e, s, new Handlebars.SafeString(a(t)), d, function() {
                var t = o ? TS.i18n.t("{app_user} wasn’t added to this direct message.", "apps")({
                  app_user: i(e)
                }) : TS.i18n.t("{app_user} wasn’t added to this channel.", "apps")({
                  app_user: i(e)
                });
                TS.cmd_handlers.addEphemeralFeedback(t, {
                  input_txt: n
                });
              })) : c();
            });
          }).then(function() {
            return TS.api.call("apps.permissions.add", {
              channel: t.id,
              app_user: e.id,
              did_confirm: !0
            });
          }).catch(function() {
            TS.utility.contenteditable.value(TS.client.ui.$msg_input, n);
          });
        },
        maybeKickAppUserFromChannel: function(e, t, n) {
          if (!_.isObject(e)) throw new Error("Expected app user to be an object");
          if (!_.isObject(t)) throw new Error("Expected channel to be an object");
          var i = _.escape(e.real_name),
            r = a(t);
          TS.generic_dialog.start({
            dialog_class: "p-app_permission_remove_modal",
            title: new Handlebars.SafeString(TS.i18n.t("Remove {app_name} from {channel_name}?", "apps")({
              app_name: i,
              channel_name: r
            })),
            body: new Handlebars.SafeString(TS.i18n.t("{app_name} will no longer be able to access or post to {channel_name}, unless you invite it again.", "apps")({
              app_name: i,
              channel_name: r
            })),
            go_button_text: TS.i18n.t("Remove", "apps")(),
            go_button_class: "btn_danger",
            onGo: function() {
              TS.api.call("apps.permissions.remove", {
                channel: t.id,
                app_user: e.id
              }).then(function() {}).catch(function() {
                TS.utility.contenteditable.value(TS.client.ui.$msg_input, n);
              });
            }
          });
        },
        requestPermissions: function(e, t, n) {
          var i = _.flatten(t.map(function(e) {
              return e.scopes;
            })).join(","),
            a = TS.members.getMemberById(e),
            s = function(e) {
              TS.api.call("apps.permissions.addScope", {
                trigger_id: n,
                scopes: i,
                did_confirm: e
              }).catch(function() {
                TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Hmm, something went wrong, try again?", "apps")(), {
                  slackbot_feels: "sad_surprise"
                });
              });
            };
          r(a, t, null, function() {
            s(!0);
          }, function() {
            s(!1);
          });
        },
        promiseToParsePermissionsForApp: function(e) {
          if (e) {
            var t = {},
              n = e.grantors;
            if (_.get(e, "scopes") && (t.scopes = _.orderBy(e.scopes, "is_dangerous", "desc")), n) {
              var i, r = _.map(n, "id");
              return TS.members.ensureMembersArePresent(r).then(function() {
                return i = _.map(n, function(e) {
                  return TS.members.getMemberById(e.id);
                }), t.grantors = i, t;
              });
            }
            return Promise.resolve(t);
          }
        }
      });
      var e = TS.environment.is_dev ? 0 : 3e3,
        t = function() {
          TS.apps.setUp();
        },
        i = function(e) {
          return "@" + _.escape(e.name);
        },
        r = function(t, n, i, r, a) {
          var s = _.partition(n, function(e) {
              return !e.is_dangerous;
            }),
            o = s[0],
            l = s[1];
          TS.generic_dialog.start({
            dialog_class: "p-app_permission_modal",
            go_button_text: TS.i18n.t("Authorize", "apps")(),
            go_button_class: "disabled",
            show_cancel_button: !1,
            show_close_button: !0,
            secondary_go_button_text: TS.i18n.t("Don’t Allow", "apps")(),
            secondary_go_button_class: "btn_outline",
            title: "&nbsp;",
            show_secondary_go_button: !0,
            body: TS.templates.app_permission_modal({
              app_name: t.real_name,
              app_image: t.profile.image_48,
              channel_name: i,
              safe_scope_info: o,
              dangerous_scope_info: l
            }),
            onGo: r,
            onSecondaryGo: a,
            onShow: function() {
              setTimeout(function() {
                $(".p-app_permission_modal .dialog_go").toggleClass("disabled", !1);
              }, e), $('[data-js="app_permission_modal_scope_descriptions"]').on("click", "[data-toggle-visibility]", function() {
                var e = $(this),
                  t = e.data("toggle-visibility");
                $("[data-toggle-visibility-id=" + t + "]").toggleClass("hidden");
                var n = e.find("[data-toggled-text]"),
                  i = n.data("toggled-text"),
                  r = n.text();
                n.data("toggled-text", r), n.text(i);
              });
            }
          });
        },
        a = function(e) {
          return (e.is_channel ? "#" : e.is_im ? "@" : e.is_mpim ? '<i class="ts_icon ts_icon_multiparty_dm_' + TS.mpims.getMemberCount(e) + '"></i>' : '<i class="ts_icon ts_icon_lock"></i>') + _.escape(TS.shared.getDisplayNameForModelObNoSigns(e));
        };
    }();
  },
  2368: function(e, t) {
    ! function() {
      "use strict";

      function e(e, t) {
        var n = _.find(t.attachment.actions, {
          id: e
        });
        n && (n.selected_options = []);
      }

      function t(e) {
        return e ? TS.i18n.t("Couldn’t load results.", "lazy_filter_select")() : TS.i18n.t("No results.", "lazy_filter_select")();
      }

      function n(t) {
        var n = this.$select,
          i = TS.attachment_actions.handleActionEventAndGetContext(n),
          r = _.get(t, "model_ob.id", t.value),
          a = function() {
            i.action.selected_options = [{
              text: t.text,
              value: r
            }];
            var n = e.bind(null, i.action.id);
            TS.attachment_actions.action_completed_sig.addOnce(n), _.defer(TS.attachment_actions.action_triggered_sig.dispatch, i);
          },
          s = function() {
            n.lazyFilterSelect("clearValue");
          };
        i.action.confirm ? TS.attachment_actions.confirmAction(i.action, a, s) : a();
      }

      function i(e, t) {
        return _.isEmpty(t) || TS.fuzzy.score(e.text.toLowerCase(), t.toLowerCase()) < 1 / 0;
      }

      function r(e) {
        var t = _.get(e, "action.data_source"),
          n = M(e);
        return function() {
          x(t, n);
        };
      }

      function a(e) {
        return e - ($("#footer").height() || 0);
      }

      function s(e) {
        return e - ($("#client_header").height() || 0);
      }

      function o(e) {
        var t = _.get(e, "action.data_source");
        return A[t] || A.default;
      }

      function l(e) {
        switch (o(e)) {
          case A.channels:
            return d({
              channels: {
                include_archived: !1
              }
            }, {
              default_query: "#"
            });
          case A.conversations:
            return c();
          case A.external:
            return u(e);
          case A.users:
            return d({
              members: {
                include_self: !0
              }
            }, {
              default_query: "@"
            });
        }
      }

      function d(e, t) {
        return e = _.defaults(e, {
            limit: 100,
            sort: {
              frecency: !0
            }
          }), t = _.defaults(t, {
            default_query: ""
          }),
          function(n) {
            return n = n || t.default_query, new Promise(function(t, i) {
              TS.searcher.search(n, e).then(function(e) {
                t({
                  all_items_fetched: !0,
                  items: e,
                  replace_all_items: !0
                });
              }, i);
            });
          };
      }

      function c() {
        return function(e) {
          return new Promise(function(t, n) {
            TS.ui.file_share.promiseToGetFileShareSelectOptions(e).then(function(e) {
              t({
                all_items_fetched: !0,
                items: e,
                replace_all_items: !0
              });
            }, n);
          });
        };
      }

      function u(e) {
        return function(t) {
          return new Promise(function(n, i) {
            var r = {
              name: e.action.name,
              value: t,
              attachment_id: e.attachment.id,
              callback_id: e.attachment.callback_id,
              channel_id: e.channel_id,
              is_ephemeral: !0,
              message_ts: e.message.ts
            };
            TS.api.call("chat.attachmentSuggestion", {
              service_id: M(e),
              payload: JSON.stringify(r)
            }).then(function(e) {
              n({
                all_items_fetched: !0,
                items: w(e),
                replace_all_items: !0
              });
            }).catch(function(e) {
              i(e);
            });
          });
        };
      }

      function m(e) {
        if (o(e) !== A.default) return E;
      }

      function p(e) {
        var t = o(e);
        return "users" === t ? b : _.includes([A.channels, A.conversations], t) ? T : void 0;
      }

      function f(e) {
        return _.get(e, "action.text") || g(e);
      }

      function h(e) {
        return _.get(I, o(e), I.default);
      }

      function g(e) {
        return _.get(C, o(e), C.default);
      }

      function S(e, t) {
        if ($.contains(document, t[0])) {
          var n = _.get(e, "action.selected_options[0]");
          if (n) {
            if (_.includes([A.channels, A.conversations, A.users], o(e))) {
              var i = TS.shared.getModelObById(n.value);
              if (!i) return;
              n = {
                model_ob: i
              };
            } else n = k(n);
            t.lazyFilterSelect("forceSelectItem", n);
          }
        }
      }

      function T(e) {
        var t = TS.templates.attachment_actions_select_channel_or_conversation_option(e.model_ob);
        return new Handlebars.SafeString(t);
      }

      function b(e) {
        var t = TS.templates.attachment_actions_select_user_option(e.model_ob);
        return new Handlebars.SafeString(t);
      }

      function v(e) {
        if (e) return e.map(function(e) {
          return _.merge({}, e, {
            options: y(e.options),
            text: e.text && new Handlebars.SafeString(e.text)
          });
        });
      }

      function y(e) {
        if (e) return e.map(function(e) {
          return _.merge({}, e, {
            description: e.description && new Handlebars.SafeString(e.description),
            text: e.text && new Handlebars.SafeString(e.text)
          });
        });
      }

      function w(e) {
        var t = _.get(e, "data.option_groups");
        return _.isArray(t) ? t.map(function(e) {
          var t = _.get(e, "options", []).map(function(e) {
            return k(e, {
              is_group_item: !0
            });
          });
          return {
            lfs_group: !0,
            label: e.text,
            children: t
          };
        }) : _.get(e, "data.options", []).map(k);
      }

      function k(e, t) {
        e = _.merge({}, e, {
          is_group_item: _.get(t, "is_group_item")
        });
        var n = TS.templates.attachment_actions_select_option(e);
        return $("<div>").html(n).children()[0];
      }

      function x(e, t) {
        TS.clog.track("MSG_MENU_OPEN", {
          data_source: e,
          service_id: t
        });
      }

      function M(e) {
        return _.get(e, "attachment.is_app_unfurl") ? e.attachment.bot_id : _.get(e, "message.bot_id");
      }
      TS.registerModule("attachment_actions.select", {
        onStart: _.noop,
        decorateNewElements: function(e) {
          e = e || TS.client.ui.$msgs_div, e.find(".attachment_actions_interactions select:not(.hidden)").each(function() {
            var e = $(this),
              o = TS.attachment_actions.getActionContext(e),
              d = {
                adjustAvailableSpaceAbove: s,
                adjustAvailableSpaceBelow: a,
                allow_list_position_above: !0,
                classes: "select_attachment",
                data_promise: l(o),
                disabled: e.attr("disabled"),
                errorTemplate: t,
                filter: i,
                input_debounce_wait_time: m(o),
                min_query_length: _.get(o, "action.min_query_length", 0),
                no_default_selection: !0,
                onItemAdded: n,
                onListShown: r(o),
                placeholder_text: f(o),
                filter_placeholder_text: h(o),
                should_graphic_replace_emoji: !0,
                style: TS.ui.lazy_filter_select.STYLES.filter_in_list,
                template: p(o)
              };
            e.lazyFilterSelect(d).addClass("hidden"), _.defer(S, o, e);
          });
        },
        getActionModel: function(e, t) {
          var n = A[e.data_source] || A.default;
          return _.merge({}, e, {
            _disabled: e._disabled || !!t,
            data_source: n,
            options: y(e.options),
            option_groups: v(e.option_groups),
            text: e.text || g(n)
          });
        }
      });
      var C = {
          channels: TS.i18n.t("Choose a channel…", "attachment_actions")(),
          conversations: TS.i18n.t("Choose a conversation…", "attachment_actions")(),
          default: TS.i18n.t("Choose an option…", "attachment_actions")(),
          external: TS.i18n.t("Choose an option…", "attachment_actions")(),
          users: TS.i18n.t("Choose a person…", "attachment_actions")()
        },
        I = {
          channels: TS.i18n.t("Search channels", "attachment_actions")(),
          conversations: TS.i18n.t("Search conversations", "attachment_actions")(),
          default: TS.i18n.t("Filter options", "attachment_actions")(),
          external: TS.i18n.t("Search options", "attachment_actions")(),
          users: TS.i18n.t("Search people", "attachment_actions")()
        },
        A = {
          channels: "channels",
          conversations: "conversations",
          default: "default",
          external: "external",
          users: "users"
        },
        E = 250;
    }();
  },
  2369: function(e, t) {
    ! function() {
      "use strict";

      function e(e, t) {
        if (e && t && t.length) {
          var n = _.map(t, "id"),
            i = _.cloneDeep(e);
          return i.actions.forEach(function(e) {
            e._disabled = !0, e._loading = _.includes(n, e.id);
          }), i._pending = !0, i;
        }
      }

      function t(t) {
        if (!(t && t.message && t.attachment && t.action && t.channel_id)) return void TS.warn("_onActionTriggered: missing message, attachment, action, or channel_id");
        var n = e(t.attachment, [t.action]);
        n && TS.attachment_actions.render(n, t.message.ts);
        var i = _.clone(t.action);
        delete i.options;
        var r = {
          actions: [i],
          attachment_id: t.attachment.id,
          callback_id: t.attachment.callback_id,
          channel_id: t.channel_id,
          is_ephemeral: t.message.is_ephemeral,
          message_ts: t.message.ts
        };
        if (TS.boot_data.feature_shared_channels_client) {
          var a = _.get(t.message, "bot_profile.team_id");
          r.team_id = a;
        }
        var s = {
          payload: JSON.stringify(r)
        };
        t.message.bot_id && (s.service_id = t.message.bot_id), t.message.user && (s.bot_user_id = t.message.user), TS.api.call("chat.attachmentAction", s).then(function(e) {
          TS.attachment_actions.action_completed_sig.dispatch({
            attachment: t.attachment,
            message_ts: t.message.ts,
            channel_id: t.channel_id,
            is_expecting_ms_update: !(!_.get(e, "data.replaced") && !_.get(e, "data.deleted"))
          });
        }).catch(function(e) {
          TS.error(e), TS.attachment_actions.action_completed_sig.dispatch({
            attachment: t.attachment,
            message_ts: t.message.ts,
            channel_id: t.channel_id,
            err: e
          });
        });
      }

      function n(e) {
        if (e) {
          if (e.err) {
            var t = TS.i18n.t("Oh no, something went wrong. Please try that again.", "attachment_actions")(),
              n = {
                text: _.get(e, "err.data.response") || t,
                ephemeral_type: _.get(e, "err.data.error") || "attachment_action_error",
                slackbot_feels: "sad_surprise"
              };
            TS.client.ui.addEphemeralBotMsg(n);
          }
          e.attachment && e.message_ts && e.channel_id && !e.is_expecting_ms_update && i(e);
        }
      }

      function i(e) {
        TS.utility.rAF(function() {
          var t = TS.utility.attachments.findAttachment({
            attachment_id: e.attachment.id,
            message_ts: e.message_ts,
            channel_id: e.channel_id
          });
          t && TS.attachment_actions.render(t, e.message_ts, !0);
        });
      }

      function r(e, t) {
        var n = TS.templates.makeMsgDomId(t),
          i = "#" + n + ", #" + n + "_conversation";
        return $(i).find("[data-attachment-id=" + e.id + "] .attachment_actions");
      }

      function a(e) {
        var t = e.parents("[data-attachment-id]"),
          n = t.parents("ts-message"),
          i = {
            action_id: String(e.data("action-id") || ""),
            attachment_id: String(t.data("attachment-id") || ""),
            channel_id: String(n.data("model-ob-id") || ""),
            message_ts: String(n.data("ts") || "")
          };
        return Object.keys(i).forEach(function(e) {
          if (!i[e]) throw new Error('Attachment is missing "' + e + '"');
        }), i;
      }
      TS.registerModule("attachment_actions", {
        action_triggered_sig: new signals.Signal,
        action_completed_sig: new signals.Signal,
        onStart: function() {
          TS.attachment_actions.action_triggered_sig.add(t), TS.attachment_actions.action_completed_sig.add(n);
        },
        getActionContext: function(e) {
          var t = a(e),
            n = TS.utility.msgs.findMsg(t.message_ts, t.channel_id);
          if (n) {
            var i = _.find(n.attachments, {
              id: t.attachment_id
            });
            if (i) {
              var r = _.find(i.actions, {
                id: t.action_id
              });
              if (r) return {
                action: r,
                attachment: i,
                channel_id: t.channel_id,
                message: n
              };
            }
          }
        },
        handleActionEventAndGetContext: function(e) {
          var t = e.data("url");
          if (t) {
            var n = t.match(/<(.*?)\|/),
              i = n ? n[1] : t;
            if (!i) return;
            return void(0 === i.indexOf(TS.utility.msgs.new_api_url_prefix) ? TS.utility.msgs.doNewApiUrl(i) : TS.boot_data.feature_link_buttons && TS.utility.openInNewTab(t, "_blank"));
          }
          var r = TS.attachment_actions.getActionContext(e);
          return (TS.client.activeChannelIsHidden() || r.channel_id != TS.shared.getActiveModelOb().id) && TS.client.ui.tryToJump(r.channel_id, r.message.ts), r;
        },
        confirmAction: function(e, t, n) {
          var i = "danger" === e.style ? "btn_danger" : "btn_primary",
            r = _.defaults(e.confirm, {
              dismiss_text: TS.i18n.t("Cancel", "attachment_actions")(),
              ok_text: TS.i18n.t("OK", "attachment_actions")(),
              text: "",
              title: ""
            });
          r.text ? r.text = TS.emoji.graphicReplace(r.text) : r.title || (r.text = TS.i18n.t("Are you sure?", "attachment_actions")()), r.title && (r.title = TS.emoji.graphicReplace(r.title)), TS.generic_dialog.start({
            title: r.title,
            body: r.text,
            show_go_button: !0,
            show_cancel_button: !0,
            go_button_text: r.ok_text,
            go_button_class: i,
            cancel_button_text: r.dismiss_text,
            onGo: t,
            onCancel: n
          });
        },
        render: function(e, t, n) {
          if (e && t) {
            var i = r(e, t);
            if (i.length && (!n || i.find(".attachment_actions_interactions").hasClass("attachment_pending"))) {
              var a = TS.templates.attachment_actions({
                attachment: e
              });
              i.html(a), TS.attachment_actions.select.decorateNewElements(i);
            }
          }
        },
        test: function() {
          var t = {};
          return Object.defineProperty(t, "_getActionContextDataFromDOM", {
            get: function() {
              return a;
            },
            set: function(e) {
              a = e;
            }
          }), Object.defineProperty(t, "_getPendingAttachment", {
            get: function() {
              return e;
            },
            set: function(t) {
              e = t;
            }
          }), t;
        }
      });
    }();
  },
  2371: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("bots", {
        added_sig: new signals.Signal,
        changed_name_sig: new signals.Signal,
        changed_deleted_sig: new signals.Signal,
        changed_icons_sig: new signals.Signal,
        batch_upserted_sig: new signals.Signal,
        is_in_bulk_upsert_mode: !1,
        onStart: function() {
          i = TS.utility.throttleFunc(i, 20);
        },
        getBotById: function(t) {
          if (TS.useRedux() && TS.boot_data.feature_store_members_in_redux) return TS.redux.bots.getBotById(t);
          if (e[t]) return e[t];
          for (var n, i = TS.model.bots, r = 0; r < i.length; r += 1)
            if (n = i[r], n.id == t) return TS.warn(t + " not in _id_map"), e[t] = n, n;
          return null;
        },
        getBotByMsg: function(e) {
          var t = TS.members.getMemberById(e.user),
            n = e.bot_id || _.get(t, "profile.bot_id");
          if (!n) return null;
          var i = TS.bots.getBotById(n);
          return i ? (i.id = n, i) : e.bot_profile ? (e.bot_profile.id = n, e.bot_profile) : null;
        },
        getBotByName: function(e) {
          var t, n = TS.model.bots;
          if (void 0 === e) return null;
          for (var i = 0; i < n.length; i += 1)
            if (t = n[i], t.name.toLowerCase() == e.toLowerCase()) return t;
          return null;
        },
        getBotInfoByMsg: function(e) {
          var t = TS.members.getMemberById(e.user),
            n = TS.bots.getBotByMsg(e),
            i = _.get(n, "id") || _.get(t, "profile.bot_id"),
            r = _.get(n, "team_id");
          i && !n && TS.lazyLoadMembersAndBots() && TS.info(1989, "Flannel: failed to find a bot (" + i + ") whilst lazy loading bots");
          var a = _.get(t, "profile.api_app_id") || _.get(n, "app_id");
          return a || i ? TS.boot_data.feature_shared_channels_client && r ? {
            bot_id: i,
            app_id: a,
            team_id: r
          } : {
            bot_id: i,
            app_id: a
          } : (TS.warn("Unable to get bot info for message", e), null);
        },
        getBotNameById: function(e) {
          var t = TS.bots.getBotById(e);
          if (t && t.name) return t.name;
        },
        getBotNameByBotLink: function(e) {
          if (e = e.split("|"), e.length > 1) {
            var t = e[1].slice(0, -1);
            if (t) return t;
          }
          return null;
        },
        upsertAndSignal: function(e) {
          var t = TS.bots.upsertBot(e);
          return r(t);
        },
        upsertBot: function(t) {
          var i = TS.bots.getBotById(t.id),
            r = "NOOP",
            s = [];
          if (i) {
            TS.has_pri[a] && TS.log(a, 'updating existing bot "' + t.id + '"'), TS.useRedux() && TS.boot_data.feature_store_members_in_redux && (i = _.assign({}, i));
            for (var o in t) "icons" === o ? t[o] && !TS.utility.areSimpleObjectsEqual(t[o], i[o], "bot:" + t.id + " " + t.name) && (i.icons = t.icons, r = "CHANGED", s.push(o)) : i[o] != t[o] && (t[o] && !TS.utility.isScalar(t[o]) ? (i[o] = t[o], TS.warn(o + " is not scalar! it needs to be handled by upsertBot specifically to test if it has changed! " + n(t[o]))) : "boolean" == typeof t[o] && !t[o] == !i[o] || (s.push(o), i[o] = t[o], r = "CHANGED"));
            t = i;
          } else r = "ADDED", TS.has_pri[a] && TS.log(a, 'adding bot "' + t.id + '"'), TS.bots.processNewBotForUpserting(t), e[t.id] = t, TS.useRedux() && TS.boot_data.feature_store_members_in_redux || TS.model.bots.push(t);
          return "ADDED" !== r && "CHANGED" !== r || (TS.bots.maybeStoreBots(), TS.useRedux() && TS.boot_data.feature_store_members_in_redux && (TS.bots.is_in_bulk_upsert_mode ? TS.redux.bots.addToBulkUpsertPayload(t) : TS.redux.bots.addBot(t))), {
            status: r,
            bot: t,
            what_changed: s
          };
        },
        processNewBotForUpserting: function() {},
        prepareBotsForLS: function() {
          return _.cloneDeep(TS.model.bots);
        },
        maybeStoreBots: function(e) {
          TS.storage.isUsingMemberBotCache() && (TS.bots.is_in_bulk_upsert_mode || i(e || !1));
        },
        configureUrl: function(e) {
          if (e.is_bot) {
            var n, i = t(e);
            return i ? n = "/apps/" + i : e.profile.bot_id && (n = "/services/" + e.profile.bot_id), n;
          }
        },
        startBatchUpsert: function() {
          return !TS.bots.is_in_bulk_upsert_mode && (TS.bots.is_in_bulk_upsert_mode = !0, !0);
        },
        finishBatchUpsert: function() {
          return !!TS.bots.is_in_bulk_upsert_mode && (TS.bots.is_in_bulk_upsert_mode = !1, TS.bots.maybeStoreBots(), TS.bots.batch_upserted_sig.dispatch(), !0);
        },
        ensureBotsInDataArePresent: function(e) {
          var t = TS.utility.extractAllBotIds(e);
          return TS.bots.ensureBotsArePresent(t);
        },
        ensureBotsArePresent: function(e) {
          var t = ["B01", "BSLACKBOT"],
            n = _(e).difference(t).reject(TS.bots.getBotById).value();
          if (!n.length) return Promise.resolve();
          var i;
          return i = TS.useSocket() ? TS.flannel.fetchAndUpsertObjectsByIds(n) : TS.api.call("bots.info", {
            bots: n.join(",")
          }).then(function(e) {
            return e.data.bots.map(function(e) {
              return TS.bots.upsertAndSignal(e).bot;
            });
          }), i.tap(function(e) {
            e.length !== n.length && TS.warn("TS.bots.ensureBotsArePresent requested " + n.length + " bots but received " + e.length + ". Missing bots: " + _.difference(n, _.map(e, "id")).join(","));
          });
        }
      });
      var e = {},
        t = function(e) {
          var t = e.profile.api_app_id;
          if (!t && TS.model.apps && TS.model.apps.length) {
            var n = _.find(TS.model.apps, function(t) {
              return t.name.toLowerCase() == e.name.toLowerCase();
            });
            n && (t = n.id);
          }
          return t;
        },
        i = function(e) {
          var t = TS.bots.prepareBotsForLS(),
            n = !e && TS.storage.fetchBots();
          !e && n && TS.utility.areSimpleObjectsEqual(n, t) || TS.storage.storeBots(t);
        },
        r = function(e) {
          return "CHANGED" === e.status && (-1 != e.what_changed.indexOf("icons") && TS.bots.changed_icons_sig.dispatch(e.bot), -1 != e.what_changed.indexOf("name") && TS.bots.changed_name_sig.dispatch(e.bot), -1 != e.what_changed.indexOf("deleted") && TS.bots.changed_deleted_sig.dispatch(e.bot)), e;
        },
        a = 5;
    }();
  },
  2387: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("channels.read_only", {
        list_updated_sig: new signals.Signal,
        updateList: function(e) {
          if (e && _.isArray(e)) {
            var t = _.uniq(e),
              n = _.difference(t, TS.model.read_only_channels);
            _.difference(TS.model.read_only_channels, t).forEach(function(e) {
              var t = TS.shared.getModelObById(e);
              t && (t.is_read_only = !1);
            }), n.forEach(function(e) {
              var t = TS.shared.getModelObById(e);
              t && (t.is_read_only = !0);
            }), TS.model.read_only_channels = t, TS.channels.read_only.list_updated_sig.dispatch();
          }
        },
        addChannelToList: function(e) {
          TS.model.read_only_channels = _.uniq(_.concat(TS.model.read_only_channels, e)), TS.channels.read_only.list_updated_sig.dispatch();
        },
        removeChannelFromList: function(e) {
          TS.model.read_only_channels = TS.model.read_only_channels.filter(function(t) {
            return t !== e;
          }), TS.channels.read_only.list_updated_sig.dispatch();
        },
        isReadOnly: function(e) {
          if (TS.boot_data.page_needs_enterprise) {
            if (TS.model.user.enterprise_user && TS.model.user.enterprise_user.is_owner) return !1;
          } else if (TS.model.user.owner) return !1;
          var t = TS.shared.getModelObById(e);
          return !!t && (!t.is_im && !t.is_mpim && (_.isUndefined(t.is_read_only) ? TS.model.read_only_channels.indexOf(e) > -1 : t.is_read_only));
        }
      });
    }();
  },
  2388: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("channels.read_only.threads", {
        list_updated_sig: new signals.Signal,
        updateList: function(e) {
          if (e && _.isArray(e)) {
            var t = _.uniq(e),
              n = _.difference(t, TS.model.threadable_channels);
            _.difference(TS.model.threadable_channels, t).forEach(function(e) {
              var t = TS.shared.getModelObById(e);
              t && t.is_read_only && (t.can_thread = !1);
            }), n.forEach(function(e) {
              var t = TS.shared.getModelObById(e);
              t && t.is_read_only && (t.can_thread = !0);
            }), TS.model.threadable_channels = t, TS.channels.read_only.threads.list_updated_sig.dispatch();
          }
        },
        addChannelToList: function(e) {
          TS.model.threadable_channels = _.uniq(_.concat(TS.model.threadable_channels, e)), TS.channels.read_only.threads.list_updated_sig.dispatch();
        },
        removeChannelFromList: function(e) {
          TS.model.threadable_channels = TS.model.threadable_channels.filter(function(t) {
            return t !== e;
          }), TS.channels.read_only.threads.list_updated_sig.dispatch();
        },
        canThread: function(e) {
          if (TS.boot_data.page_needs_enterprise) {
            if (TS.model.user.enterprise_user && TS.model.user.enterprise_user.is_owner) return !0;
          } else if (TS.model.user.owner) return !0;
          var t = TS.shared.getModelObById(e);
          return !!t && (!(!t.is_im && !t.is_mpim) || (!t.is_shared || (!TS.channels.read_only.isReadOnly(e) || (_.isUndefined(t.can_thread) ? TS.model.threadable_channels.indexOf(e) > -1 : t.can_thread))));
        }
      });
    }();
  },
  2389: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("channels", {
        switched_sig: new signals.Signal,
        pre_switched_sig: new signals.Signal,
        joined_sig: new signals.Signal,
        member_joined_sig: new signals.Signal,
        left_sig: new signals.Signal,
        member_left_sig: new signals.Signal,
        list_fetched_sig: new signals.Signal,
        history_fetched_sig: new signals.Signal,
        history_being_fetched_sig: new signals.Signal,
        message_received_sig: new signals.Signal,
        message_removed_sig: new signals.Signal,
        message_changed_sig: new signals.Signal,
        marked_sig: new signals.Signal,
        unread_changed_sig: new signals.Signal,
        unread_highlight_changed_sig: new signals.Signal,
        topic_changed_sig: new signals.Signal,
        purpose_changed_sig: new signals.Signal,
        created_sig: new signals.Signal,
        deleted_sig: new signals.Signal,
        renamed_sig: new signals.Signal,
        archived_sig: new signals.Signal,
        unarchived_sig: new signals.Signal,
        msg_not_sent_sig: new signals.Signal,
        data_retention_changed_sig: new signals.Signal,
        converted_to_shared_sig: new signals.Signal,
        shared_teams_updated_sig: new signals.Signal,
        data_updated_sig: new signals.Signal,
        addMsg: function(e, t) {
          var n = TS.channels.getChannelById(e);
          if (!n) return void TS.error('unknown channel "' + e + '"');
          if (TS.shared.addMsg(n, t)) {
            var i = !TS.utility.msgs.isTempMsg(t);
            TS.channels.calcUnreadCnts(n, i), TS.utility.msgs.maybeTruncateMsgs(n), TS.channels.message_received_sig.dispatch(n, t);
          }
        },
        calcUnreadCnts: function(e, t) {
          TS.shared.calcUnreadCnts(e, TS.channels, t);
        },
        removeMsg: function(e, t) {
          var n = TS.channels.getChannelById(e);
          if (!n) return void TS.error('unknown channel "' + e + '"');
          n._archive_msgs && TS.utility.msgs.spliceMsg(n._archive_msgs, t);
          var i = n.msgs;
          TS.utility.msgs.spliceMsg(i, t), TS.channels.message_removed_sig.dispatch(n, t), TS.channels.calcUnreadCnts(n, !0);
        },
        sendMsg: function(e, t, n, i) {
          var r, a = TS.channels.getChannelById(e);
          if (!a) return !1;
          if (a.is_archived) return !1;
          if (!a.is_member) return !1;
          var s = TS.channels.getGeneralChannel(),
            o = function(e, i) {
              if (i) {
                var r = {
                  text: e,
                  ephemeral_type: i,
                  slackbot_feels: "sad_surprise"
                };
                TS.client.ui.addOrFlashEphemeralBotMsg(r);
              } else TS.generic_dialog.alert(e).then(function() {
                n ? TS.ui.replies.focusReplyInput() : TS.view.focusMessageInput();
              });
              n ? (TS.ui.replies.populateReplyInput(t), TS.ui.replies.focusReplyInput()) : (TS.utility.contenteditable.value(TS.client.ui.$msg_input, t), TS.view.focusMessageInput());
            };
          if (a.is_general && !TS.permissions.members.canPostInGeneral(TS.model.user)) {
            return o(TS.i18n.t("A Team Owner has restricted posting to the #*{channel_name}* channel.", "channels")({
              channel_name: a.name
            }), "general_posting_restricted"), !1;
          }
          var l = TS.format.cleanMsg(t),
            d = !!n,
            c = TS.model.here_regex.test(l),
            _ = TS.model.channel_regex.test(l) && !d || TS.model.group_regex.test(l) && !d || c;
          if (TS.model.everyone_regex.test(l) && !d || TS.channels.isChannelRequired(a) && _) {
            if (!TS.permissions.members.canAtMentionEveryone(a.id)) return TS.model.user.is_restricted ? (r = "<p>" + TS.i18n.t("Your account is restricted, and you cannot send <b>{everyone}</b> messages.", "channels")({
              everyone: TS.templates.builders.atLabel("everyone")
            }) + "</p>", o(r), !1) : (TS.permissions.members.canNonAdminsAtMentionEveryoneBySettings(e) ? (r = "<p>" + TS.i18n.t("Usage of <b>{everyone}</b> is restricted to Team Admins in the large general channel.", "channels")({
              everyone: TS.templates.builders.atLabel("everyone")
            }) + "</p>", TS.metrics.count("stopped_loud_channel_mention")) : r = "<p>" + TS.i18n.t("A Team Owner has restricted the use of <b>{everyone}</b> messages.", "channels")({
              everyone: TS.templates.builders.atLabel("everyone")
            }) + "</p>", !TS.channels.isChannelRequired(a) && TS.permissions.members.canAtChannelOrGroup(a.id) && (r += '<p class="no_bottom_margin">' + TS.i18n.t("If you just want to address everyone in this channel, use <b>{channel}</b> instead.", "channels")({
              channel: TS.templates.builders.atLabel("channel")
            }) + "</p>"), o(r), !1);
            if (!TS.channels.isChannelRequired(a) && !c) return s && s.is_member ? TS.generic_dialog.start({
              title: TS.i18n.t("Send {everyone} a message", "channels")({
                everyone: TS.templates.builders.atLabel("everyone")
              }),
              body: TS.i18n.t('<p class="bold">Would you like to switch to #{general_channel} and send your message?</p>\t\t\t\t\t\t\t<p class="">Using <b>{everyone}</b> in a message is a way to address your whole team, but it must be done in the #{general_channel} channel.</p>\t\t\t\t\t\t\t<p class="no_bottom_margin">If you just want to address everyone in this channel, use <b>{channel}</b> instead.</p>', "channels")({
                general_channel: s.name,
                everyone: TS.templates.builders.atLabel("everyone"),
                channel: TS.templates.builders.atLabel("channel")
              }),
              show_cancel_button: !0,
              show_go_button: !0,
              go_button_text: TS.i18n.t("Yes, send it", "channels")(),
              onGo: function() {
                TS.channels.displayChannel({
                  id: s.id,
                  and_send_txt: t
                });
              },
              onCancel: function() {
                TS.utility.contenteditable.value(TS.client.ui.$msg_input, t), TS.view.focusMessageInput();
              }
            }) : (r = "<p>" + TS.i18n.t("You cannot send <b>{everyone}</b> messages.", "channels")({
              everyone: TS.templates.builders.atLabel("everyone")
            }) + "</p>", TS.permissions.members.canAtChannelOrGroup(e) && (r += '<p class="no_bottom_margin">' + TS.i18n.t("If you just want to address everyone in this channel, use <b>{channel}</b> instead.", "channels")({
              channel: TS.templates.builders.atLabel("channel")
            }) + "</p>"), o(r)), !1;
          }
          if (_ && !TS.permissions.members.canAtChannelOrGroup(e)) {
            var u = c ? TS.templates.builders.atLabel("here") : TS.templates.builders.atLabel("channel");
            return TS.permissions.members.canNonAdminsAtChannelOrGroupBySettings(e) ? (r = "<p>" + TS.i18n.t("Usage of <b>{key_word}</b> is restricted to Team Admins in this large channel.", "channels")({
              key_word: u
            }) + "</p>", TS.metrics.count("stopped_loud_channel_mention")) : r = "<p>" + TS.i18n.t("A Team Owner has restricted the use of <b>{key_word}</b> messages.", "channels")({
              key_word: u
            }) + "</p>", o(r), !1;
          }
          return !d && TS.ui.needToShowAtChannelWarning(e, t) ? (TS.ui.at_channel_warning_dialog.startInMessagePane(e, t, TS.channels), !1) : TS.shared.sendMsg(e, t, TS.channels, n, i);
        },
        onSendMsg: function(e, t) {
          var n = TS.channels.getChannelById(t.SENT_MSG.channel);
          if (!n) return void TS.error("unknown channel? " + t.SENT_MSG.channel);
          TS.shared.onSendMsg(e, t, n, TS.channels);
        },
        displayChannel: function(e) {
          var t = _.defaults({}, e, {
              from_history: !1,
              replace_history_state: !1
            }),
            n = t.id;
          if (!n) return void TS.error("no channel id supplied");
          var i = t.path,
            r = t.and_send_txt,
            s = t.from_history,
            o = t.replace_history_state;
          if (TS.isPartiallyBooted() && n !== TS.model.initial_cid) return TS.warn("Can't switch model objects during incremental boot; this is a programming error"), void TS.sounds.play("beep");
          TS.metrics.mark("start_channel_change_" + n);
          var l = TS.channels.getChannelById(n);
          if (!l) return void TS.error('channel "' + n + '" unknown');
          if (TS.utility.msgs.maybeClearPrevLastRead(), TS.utility.msgs.maybeClearPrevLastRead(l), TS.shared.maybeClearHasAutoScrolled(), n === TS.model.active_channel_id && !o && !TS.client.activeChannelIsHidden()) return TS.warn('channel "' + n + '" already displayed'), void(r && TS.channels.sendMsg(n, $.trim(r)));
          if (TS.has_pri[a] && TS.log(a, "displayChannel: " + l.id), TS.shared.didDeferMessageHistoryById(l.id) && TS.shared.checkInitialMsgHistory(l, TS.channels), !l.is_member) {
            if (r) return TS.model.requested_channel_joins[n] = {
              and_send_txt: r
            }, void TS.channels.joinById(n);
            var d = TS.shared.getActiveModelOb();
            d.is_channel && !d.is_member || (TS.client.archives.previous_model_ob = d);
          }
          var c = !o && s;
          TS.client.channelDisplaySwitched({
            id: n,
            path: i,
            replace_history_state: o,
            no_history_add: c
          }) && (TS.channels.pre_switched_sig.dispatch(), TS.channels.switched_sig.dispatch()), r && TS.channels.sendMsg(n, $.trim(r));
        },
        setLastRead: function(e, t, n) {
          if (e.last_read === t) return !1;
          if (t.indexOf(TS.utility.date.fake_ts_unique_padder) > -1) return TS.error("bad ts: " + t), !1;
          var i = e.id + ". last_read = " + e.last_read + " -> " + t + ", reason: " + (n || "unspecified");
          if (e.last_read > t) {
            var r = TS.model.last_reads_set_by_client[e.id + "_" + t];
            if (delete TS.model.last_reads_set_by_client[e.id + "_" + t], r) return void TS.warn("NOT going back in time on channel " + i);
            TS.has_pri[s] && TS.log(s, "going back in time on channel " + i, TS.console.getStackTrace()), TS.utility.msgs.maybeClearPrevLastRead(e), TS.utility.msgs.setPrevLastRead(e, t);
          } else TS.has_pri[s] && TS.log(s, "TS.channels.setLastRead: " + i), TS.utility.msgs.maybeClearPrevLastRead(e), TS.utility.msgs.maybeSetPrevLastRead(e, t);
          return e.last_read = t, n && (e._marked_reason = n), TS.channels.marked_sig.dispatch(e), TS.utility.msgs.maybeClearUsersCountsInfo(e), TS.channels.calcUnreadCnts(e), !0;
        },
        markMostRecentReadMsg: function(e, t, n) {
          if (!e) return void TS.error("channel unknown");
          if (e.msgs && e.msgs.length || n) {
            var i = TS.utility.msgs.getMostRecentValidTs(e);
            if (!i) return void(e.is_member && (e.msgs && e.msgs.length || !e._latest_via_users_counts) && TS.warn('no valid tses for channel "' + e.id + '"???'));
            TS.channels.markReadMsg(e.id, i, t);
          }
        },
        markReadMsg: function(e, t, n) {
          var i = TS.channels.getChannelById(e);
          if (!i) return void TS.error('channel "' + e + '" unknown');
          if (i.last_read !== t && TS.channels.setLastRead(i, t, n) && (i._marked_reason = n, i.is_member))
            if (TS.useRedux()) {
              TS.redux.channels.setMarkingState(i.id, !0);
            } else i.needs_api_marking = !0;
        },
        onMarked: function(e, t, n) {
          var i = TS.channels.getChannelById(n.channel);
          if (!i) return void TS.error('error: no channel "' + n.channel + '"');
          if (e || t && ("not_in_channel" === t.error || "is_archived" === t.error || "channel_not_found" === t.error));
          else if (TS.useRedux()) {
            TS.redux.channels.setMarkingState(i.id, !0);
          } else i.needs_api_marking = !0;
        },
        create: function(e, t) {
          return t = t || {}, TS.model.user.is_restricted ? Promise.reject(new Error("restricted_action")) : e ? TS.model.created_channels[e] ? Promise.reject(new Error("name_taken")) : (TS.model.created_channels[e] = !0, new Promise(function(n, i) {
            return TS.api.call("channels.create", {
              name: e,
              validate: t.validate_name
            }).then(function(e) {
              return TS.channels.onJoin(e.data.ok, e.data, e.args), n(e), null;
            }).catch(function(t) {
              return delete TS.model.created_channels[e], i(t), null;
            });
          })) : Promise.reject(new Error("required"));
        },
        join: function(e, t, n) {
          if (n = n || {}, TS.model.user.is_restricted) return Promise.reject(new Error("Account is restricted"));
          if (!e) return Promise.reject(new Error("No channel name given"));
          if (!TS.channels.getChannelByName(e)) {
            if (TS.model.created_channels[e]) return Promise.reject("Already joining");
            TS.model.created_channels[e] = !0;
          }
          return new Promise(function(i, r) {
            return TS.api.call("channels.join", {
              name: e,
              _in_background: !!n.in_background,
              validate: !!n.validate
            }).then(function(e) {
              return TS.channels.onJoin(e.data.ok, e.data, e.args), t ? t(e.data.ok, e.data, e.args) : i(e), null;
            }).catch(function(n) {
              return delete TS.model.created_channels[e], t ? t(n.data.ok, n.data, n.args) : r(n), null;
            });
          });
        },
        joinById: function(e, t, n) {
          if (n = n || {}, TS.model.user.is_restricted) return Promise.reject(new Error("Account is restricted"));
          if (!e) return Promise.reject(new Error("No channel id given"));
          if (!TS.channels.getChannelById(e)) {
            if (TS.model.created_channel_ids[e]) return Promise.reject("Already joining");
            TS.model.created_channel_ids[e] = !0;
          }
          return new Promise(function(i, r) {
            return TS.api.call("channels.join", {
              channel: e,
              _in_background: !!n.in_background,
              validate: !!n.validate
            }).then(function(e) {
              return TS.channels.onJoin(e.data.ok, e.data, e.args), t ? t(e.data.ok, e.data, e.args) : i(e), null;
            }).catch(function(n) {
              return delete TS.model.created_channel_ids[e], t ? t(n.data.ok, n.data, n.args) : r(n), null;
            });
          });
        },
        onJoin: function(e, t, n) {
          if (!e) return void("name_taken" === t.error || ("is_archived" === t.error ? TS.channels.displayChannel({
            id: TS.channels.getChannelByName(n.name).id
          }) : "restricted_action" === t.error ? TS.generic_dialog.alert(TS.i18n.t("<p>You don’t have permission to create new channels.</p><p>Talk to your Team Owner.</p>", "channels")()) : (TS.error("failed to join channel"), alert("failed to join channel"))));
          var i, r;
          if (t.channel && (r = TS.channels.upsertChannel(t.channel), i = t.channel.id), !i) return void TS.error("no channel_id?!!");
          var a = "";
          if (TS.model.requested_channel_joins[i] && (a = TS.model.requested_channel_joins[i].and_send_txt, delete TS.model.requested_channel_joins[i]), !r) return void TS.error("no channel?!!");
          n._in_background || (r.needs_created_message || r.never_needs_joined_msg || (r.needs_joined_message = !0), TS.client && TS.channels.displayChannel({
            id: i,
            and_send_txt: a
          }));
        },
        leave: function(e) {
          var t = TS.channels.getChannelById(e);
          if (t) {
            if (TS.boot_data.feature_default_shared_channels) {
              if (!TS.permissions.channels.canMemberLeaveChannel(t, TS.model.user)) return void TS.generic_dialog.alert(TS.i18n.t("Sorry, you can’t leave <strong>#{channel_name}</strong>!", "channels")({
                channel_name: t.name
              }));
            }
            if (TS.channels.isChannelRequired(t) || TS.model.user.is_restricted) return void TS.generic_dialog.alert(TS.i18n.t("Sorry, you can’t leave <strong>#{channel_name}</strong>!", "channels")({
              channel_name: t.name
            }));
            if (t.is_private) return void TS.generic_dialog.start({
              title: TS.i18n.t("Leave {channel_name}", "channels")({
                channel_name: t.name
              }),
              body: TS.i18n.t("<p>If you leave the private channel, you will no longer be able to see any of its messages. To rejoin the private channel, you will have to be re-invited.</p><p>Are you sure you wish to leave?</p>", "channels")(),
              go_button_text: TS.i18n.t("Yes, leave the private channel", "channels")(),
              onGo: function() {
                TS.api.call("channels.leave", {
                  channel: e
                }, TS.channels.onLeave);
              }
            });
            TS.channels.markMostRecentReadMsg(t, TS.model.marked_reasons.left), TS.client.markLastReadsWithAPI(), TS.api.call("channels.leave", {
              channel: e
            }, TS.channels.onLeave);
          }
        },
        onLeave: function(e, t, n) {
          if (!e) return void TS.error("failed to leave channel");
          var i = TS.channels.getChannelById(n.channel);
          if (!i) return void TS.error('error no channel "' + n.channel + '"');
          i.msgs.length = 0, i.is_limited && (i.is_limited = !1);
        },
        setTopic: function(e, t) {
          TS.boot_data.feature_name_tagging_client && (t = TS.format.cleanMsg(t)), TS.api.call("channels.setTopic", {
            channel: e,
            topic: t
          }, TS.channels.onSetTopic);
        },
        onSetTopic: function(e) {
          e || TS.error("failed to set channel topic");
        },
        setPurpose: function(e, t) {
          TS.boot_data.feature_name_tagging_client && (t = TS.format.cleanMsg(t)), TS.api.call("channels.setPurpose", {
            channel: e,
            purpose: t
          }, TS.channels.onSetPurpose);
        },
        onSetPurpose: function(e, t) {
          e || (TS.error("failed to set channel purpose"), TS.channels.alertSetPurposeError(t.error));
        },
        alertSetPurposeError: function(e) {
          var t;
          t = "too_long" === e ? TS.i18n.t("Oooops! That purpose is too long. Please try again with fewer than 250 characters.", "channels")() : "restricted_action" === e || "user_is_restricted" === e ? TS.i18n.t("Uh oh! You don’t have permission to change the purpose. Talk to your team admin.", "channels")() : TS.i18n.t("Uh oh! Something went wrong with setting the purpose. Please try again.", "channels")(), TS.generic_dialog.alert(t);
        },
        getChannelsFilteredBy: function(e) {
          return TS.shared.getEntitiesFilteredBy("channels", e);
        },
        getChannelById: function(t) {
          if (!t) return null;
          if (TS.useRedux()) return TS.redux.channels.getChannelById(t);
          var n = e[t];
          if (n) return n;
          var i = TS.model.channels;
          if (!i) return null;
          for (var r = 0; r < i.length; r += 1)
            if (n = i[r], n.id === t) return TS.warn(t + " not in _id_map?"), e[t] = n, n;
          return null;
        },
        getFirstChannelYouAreIn: function() {
          var e = TS.model.channels;
          return e ? _.find(e, "is_member") : null;
        },
        getGeneralChannel: function() {
          var e = TS.model.channels;
          return e ? _.find(e, "is_general") : null;
        },
        isChannelRequired: function(e) {
          return e.is_general || e.is_org_mandatory;
        },
        isChannelOrgDefault: function(e) {
          return !(!e.is_shared || !TS.channels.isChannelRequired(e)) || !!TS.boot_data.feature_default_shared_channels && e.is_org_default;
        },
        getChannelByName: function(e) {
          if (TS.useRedux()) return TS.redux.channels.getChannelByName(e);
          e = _.toLower(e);
          var n = TS.model.channels,
            i = t[e];
          if (i) return i;
          if (!n) return null;
          for (var r = 0; r < n.length; r += 1)
            if (i = n[r], i._name_lc === e || "#" + i._name_lc === e) return TS.warn(e + " not in _name_map?"), t["#" + e] = i, t[e] = i, i;
          return null;
        },
        upsertChannel: function(e, t) {
          return n(e, t);
        },
        removeChannel: function(n) {
          if (TS.useRedux()) TS.redux.channels.removeEntity(n);
          else {
            var i = TS.model.channels;
            TS.has_pri[o] && TS.log(o, 'removing channel "' + n.id + '"');
            for (var r, a = 0; a < i.length; a += 1)
              if (r = i[a], r.id === n.id) {
                i.splice(a, 1);
                break;
              }
            delete e[n.id], delete t[n._name_lc], delete t["#" + n._name_lc];
          }
          TS.client && TS.model.active_channel_id === n.id && TS.client.activeChannelDisplayGoneAway(), n.msgs && (n.msgs.length = 0), n.is_limited && (n.is_limited = !1), TS.channels.deleted_sig.dispatch(n);
        },
        channelRenamed: function(e) {
          var n = TS.channels.getChannelById(e.id);
          TS.useRedux() || (delete t[n._name_lc], delete t["#" + n._name_lc]), e.previous_names = [n._name_lc].concat(n.previous_names || []);
          var i = TS.channels.upsertChannel(e);
          i._name_lc = _.toLower(i.name), TS.useRedux() || (t[i._name_lc] = i, t["#" + i._name_lc] = i), TS.channels.renamed_sig.dispatch(i);
        },
        markScrollTop: function(e, t) {
          var n = TS.channels.getChannelById(e);
          return !!n && (n.scroll_top !== t && (n.scroll_top = t, !0));
        },
        maybeLoadScrollBackHistory: function(e, t) {
          var n = TS.channels.getChannelById(e);
          return !!n && TS.shared.maybeLoadScrollBackHistory(n, TS.channels, t);
        },
        onHistory: function(e, t, n) {
          var i = TS.channels.getChannelById(n.channel);
          if (!i) return void TS.error('error no channel "' + n.channel + '"');
          if (!e || !t || !t.messages) {
            TS.error("failed to get history for channel " + n.channel), i.history_is_being_fetched = !1, i.history_fetch_retries = (i.history_fetch_retries || 0) + 1;
            var r = _.random(2500, 5e3);
            return TS.info("retrying history fetch on channel " + i.id + " in " + r), void window.setTimeout(function() {
              TS.info("retrying history fetch on channel " + i.id + ", attempt #" + (i.history_fetch_retries || "1")), TS.channels.fetchHistory(i, n, TS.channels.onHistory);
            }, r);
          }
          i.history_fetch_retries = 0, TS.shared.onHistory(i, t, n, TS.channels) || (i.history_is_being_fetched = !1, TS.channels.history_fetched_sig.dispatch(i));
          var a = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(i);
          TS.channels.calcUnreadCnts(i, a);
        },
        fetchHistory: function(e, t, n) {
          return e ? (TS.boot_data.feature_initial_scroll_position || TS.shared.maybeClearHasAutoScrolled(e), e.history_is_being_fetched = !0, e.history_fetch_failed = !1, TS.channels.history_being_fetched_sig.dispatch(e), e.history_fetch_retries > 5 ? (TS.error("giving up on channels.history for " + e.id + ", channel.history_fetch_retries = " + e.history_fetch_retries), e.history_fetch_retries = 0, e.history_is_being_fetched = !1, e.history_fetch_failed = !0, void(TS.client && TS.client.msg_pane.updateEndMarker())) : void TS.api.call("channels.history", t, n || TS.channels.onHistory)) : void TS.error('error no channel "' + e + '"');
        },
        topicChanged: function(e, t, n, i) {
          e.topic || (e.topic = {}), e.topic.creator = t, e.topic.last_set = n, e.topic.value = i, TS.channels.topic_changed_sig.dispatch(e, t, i);
        },
        purposeChanged: function(e, t, n, i) {
          e.purpose || (e.purpose = {}), e.purpose.creator = t, e.purpose.last_set = n, e.purpose.value = i, TS.channels.purpose_changed_sig.dispatch(e, t, i);
        },
        closeArchivedChannel: function(e) {
          TS.shared.closeArchivedChannel(e);
        },
        makeMembersWithPreselectsForTemplate: function(e, t) {
          t = t || [];
          for (var n = [], i = 0; i < e.length; i += 1) {
            var r = e[i],
              a = -1 != t.indexOf(r.id);
            n[i] = {
              member: r,
              preselected: a
            };
          }
          return n;
        },
        getActiveMembersNotInThisChannelForInviting: function(e, t) {
          if (TS.lazyLoadMembersAndBots()) throw new Error("getActiveMembersNotInThisChannelForInviting is incomplete when flannel is enabled. It should not be used.");
          var n = [],
            i = t || TS.model.user.is_admin;
          if (TS.model.user.is_ultra_restricted) return n;
          var r = TS.channels.getChannelById(e);
          if (!r) return n;
          for (var a, s, o = TS.members.getActiveMembersExceptSelfAndSlackbot(), l = 0; l < o.length; l += 1) a = o[l], a.is_ultra_restricted || !i && a.is_restricted || (s = TS.membership.getUserChannelMembershipStatus(a.id, r), s.is_known && !s.is_member && TS.permissions.channels.canMemberJoinChannel(r, a) && n.push(a));
          return n;
        },
        fetchList: function() {
          TS.api.call("channels.list", {
            exclude_members: 1
          }, TS.channels.onListFetched);
        },
        onListFetched: function(e, t) {
          if (!e) return void TS.error("failed to fetch channel list");
          var n = !1;
          TS.useRedux() && (n = !0);
          var i = _.map(t.channels, function(e) {
            return TS.channels.upsertChannel(e, n);
          });
          TS.useRedux() && i.length && TS.redux.channels.bulkAddEntities(_.compact(i)), TS.channels.list_fetched_sig.dispatch(t.channels);
        },
        kickMember: function(e, t) {
          if (TS.permissions.members.canKickFromChannels()) {
            var n = TS.channels.getChannelById(e);
            if (n) return TS.shared.kickMember(n, t);
          }
        },
        getChannelsForUser: function() {
          var e = TS.model.channels;
          return TS.model.user.is_restricted ? TS.channels.getChannelsUserIsIn() : e;
        },
        getChannelsUserIsIn: function() {
          var e = TS.model.channels;
          return _.filter(e, "is_member");
        },
        getUnarchivedChannelsForUser: function() {
          var e = TS.channels.getChannelsForUser();
          return _.reject(e, "is_archived");
        },
        setDataRetention: function(e, t, n, i) {
          var r = {
            channel: e,
            retention_type: $("select[name=retention_type]").val()
          };
          1 == r.retention_type && (r.retention_duration = $("#retention_duration").val()), TS.api.call("channels.setRetention", r, function(e, t, n) {
            i && i(e, t, n), e && TS.channels.data_retention_changed_sig.dispatch(n);
          });
        },
        getDataRetention: function(e, t) {
          TS.api.call("channels.getRetention", {
            channel: e
          }, t);
        }
      });
      var e = {},
        t = {},
        n = function(n, a) {
          var s, o = TS.channels.getChannelById(n.id);
          if (delete n.unread_count, TS.boot_data.feature_tinyspeck && "C00" === n.id && TS.warn("_upsertChannel() got a bad channel id of C00", n), o) {
            TS.useRedux() && (o = _.assign({}, o)), TS.has_pri[l] && TS.log(l, 'updating existing channel "' + n.id + '"');
            for (var d in n)
              if ("members" === d) {
                if (TS.membership.lazyLoadChannelMembership()) continue;
                if (s = n.members, n.is_shared) o.members = _.union(o.members, s);
                else {
                  o.members.length !== s.length && TS.metrics.count("channel_upsert_membership_discrepancy"), o.members.length = 0;
                  for (var c = 0; c < s.length; c += 1) o.members.push(s[c]);
                }
              } else "pinned_items" === d ? TS.client && (TS.pins.upsertPinnedItems(n.pinned_items), o.pinned_items = n.pinned_items) : o[d] = n[d];
            if (i(o), n = o, TS.isPartiallyBooted() && null === n.oldest_msg_ts && (n.oldest_msg_ts = TS.storage.fetchOldestTs(n.id)), TS.shared.maybeResetHistoryFetched(n), TS.client && n.is_member) {
              TS.shared.checkInitialMsgHistory(n, TS.channels, !0);
            }
            TS.useRedux() && (a || TS.redux.channels.replaceEntity(n));
          } else TS.useRedux() || (TS.has_pri[l] && TS.log(l, 'adding channel "' + n.id + '"'), TS.model.channels.push(n)), r(n), TS.useRedux() ? a || TS.redux.channels.addEntity(n) : (e[n.id] = n, t[n._name_lc] = n, t["#" + n._name_lc] = n), n.pinned_items && TS.client && TS.pins.upsertPinnedItems(n.pinned_items);
          if (n.is_member && n.is_archived && (TS.error("channel.is_member and channel.is_archived are both true for " + n.id), TS.dir(0, n), n.is_member = !1), TS.client) {
            var u = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(n);
            TS.model.active_cid === n.id ? TS.channels.calcUnreadCnts(n, u) : o || TS.channels.calcUnreadCnts(n, u);
          }
          return n;
        },
        i = function(e) {
          if (e.is_shared) {
            if (e.is_global_shared) return e.shares && (e.shares = void 0), void(e.shared_team_ids && (e.shared_team_ids = void 0));
            e.shares && TS.shared.isModelObOrgShared(e) ? (e.shared_team_ids = _(e.shared_team_ids || []).concat(_.map(e.shares, "id")).value(), e.shares && (e.shares = void 0)) : e.shares && TS.shared.isModelObShared(e) && (e.shared_team_ids = _.map(e.shares, "team.id"), e.shares && (e.shares = void 0)), e.shared_team_ids = _(e.shared_team_ids || []).uniq().value(), TS.shared.isModelObShared(e) && e.shared_team_ids.length && TS.teams.ensureTeamsArePresent(e.shared_team_ids);
          }
        },
        r = function(e) {
          TS.shared.setPriorityForDev(e), e.is_channel = !0, e.is_general = !!e.is_general, TS.boot_data.feature_default_shared_channels && (e.is_org_mandatory = !!e.is_org_mandatory, e.is_org_default = !!e.is_org_default), e._name_lc = _.toLower(e.name), e._show_in_list_even_though_no_unreads = !1, TS.shared.maybeResetHistoryFetched(e), TS.membership.lazyLoadChannelMembership() || e.members || (e.members = []), e.topic || (e.topic = {}), e.purpose || (e.purpose = {}), e.is_member = !!e.is_member, e.scroll_top = -1, e.history_is_being_fetched = !1, TS.useRedux() || (e.needs_api_marking = !1), e.unread_highlight_cnt = 0, e.unread_highlights = [], e.unread_cnt = 0, e.unreads = [], TS.shared.setOldestUnreadTsForId(e.id, null), e.has_fetched_history_after_scrollback = !1, TS.client ? TS._incremental_boot && e.msgs && e.msgs.length > 0 ? (e.msgs = e.msgs.map(function(t) {
            return TS.utility.msgs.processImsg(t, e.id);
          }), TS.utility.msgs.setMsgs(e, e.msgs)) : TS.utility.msgs.setMsgs(e, []) : TS.boot_data.msgs && TS.utility.msgs.ingestMessagesFromBootData(e), e.oldest_msg_ts = TS.storage.fetchOldestTs(e.id) || null, e.last_msg_input = TS.storage.fetchLastMsgInput(e.id) || null, e.has_draft = !!e.last_msg_input, TS.model.created_channels[e.name] && (e.needs_created_message = !0, delete TS.model.created_channels[e.name]), i(e);
        },
        a = 999,
        s = 142,
        o = 4,
        l = 5;
    }();
  },
  2391: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("channels.ui", {
        onStart: function() {},
        showDataRetentionDialog: function(i, r, o, l) {
          var d = !o,
            c = TS.shared.getModelObById(i);
          if (!c) return void TS.error("unknown channel_id passed to data retention dialog:" + i);
          var u, m;
          c.is_im || c.is_mpim ? (m = "conversation", u = "this conversation") : c.is_group || c.is_private ? (m = "channel", u = _.escape(c.name)) : (m = "channel", u = "#" + _.escape(c.name));
          var p = TS.model.team.prefs.retention_type,
            f = TS.model.team.prefs.retention_duration;
          c.is_im || c.is_mpim ? (p = TS.model.team.prefs.dm_retention_type, f = TS.model.team.prefs.dm_retention_duration) : (c.is_group || c.is_private) && (p = TS.model.team.prefs.group_retention_type, f = TS.model.team.prefs.group_retention_duration);
          var h = s();
          d || (h = TS.templates.channel_data_retention_dialog({
            model_type: m,
            retention_type: o,
            retention_duration: l,
            team_type: p,
            team_duration: f
          })), TS.generic_dialog.start({
            title: TS.i18n.t("Edit retention policy for {channel_name}", "channels")({
              channel_name: u
            }),
            body: h,
            go_button_text: TS.i18n.t("Save settings", "channels")(),
            enter_always_gos: !0,
            onGo: function() {
              var e = $("select[name=retention_type]").val(),
                t = $("#retention_duration").val();
              if (null !== e && null !== t) {
                var n = TS.shared.getControllerForModelOb(c);
                _.isFunction(n.setDataRetention) && n.setDataRetention(i, e, t, r);
              }
            },
            onShow: d ? null : a
          }), d && (c.is_im ? TS.ims.getDataRetention(i, n) : c.is_mpim ? TS.mpims.getDataRetention(i, n) : c.is_group ? TS.groups.getDataRetention(i, t) : TS.channels.getDataRetention(i, e));
        },
        showArchiveChannelDialog: function(e) {
          TS.generic_dialog.start({
            title: TS.i18n.t("Archive #{channel_name}", "channels")({
              channel_name: e.name
            }),
            body: TS.templates.channel_option_archive({
              name: e.name
            }),
            go_button_text: TS.i18n.t("Yes, archive the channel", "channels")(),
            onGo: function() {
              TS.api.call("channels.archive", {
                channel: e.id
              }, function(e, t) {
                if (e) return void(TS.web && ($("p.alert").addClass("hidden"), $("#archive_success").removeClass("hidden"), $("#archive_btn").addClass("hidden"), $("#unarchive_btn").removeClass("hidden")));
                var n = TS.i18n.t("Archiving failed with error: {error}", "channels")({
                  error: t.error
                });
                "last_ra_channel" === t.error ? n = TS.model.user.is_admin ? TS.i18n.t("Sorry, you can‘t archive this channel because it is the only channel one of the guest account members belongs to. If you first disable the guest account, you will then be able to archive the channel.", "channels")() : TS.i18n.t("Sorry, you can‘t archive this channel because it is the only channel one of the guest account members belongs to.", "channels")() : "restricted_action" === t.error ? n = TS.i18n.t("<p>You don‘t have permission to archive channels.</p><p>Talk to your Team Owner.</p>", "channels")() : "already_archived" === t.error ? n = TS.i18n.t("This channel was already archived.", "channels")() : "cant_archive_general" === t.error && (n = TS.i18n.t("This channel cannot be archived.", "channels")()), setTimeout(TS.generic_dialog.alert, 500, n);
              });
            }
          });
        },
        showArchiveGroupDialog: function(e, t) {
          var n = TS.i18n.t("{leave, select, true{Leave and archive}other{Archive}} {prefix}{name}", "channels")({
              leave: t,
              prefix: TS.model.group_prefix,
              name: e.name
            }),
            i = TS.i18n.t("{leave, select, true{Yes, leave & archive the channel}other{Yes, archive the channel}}", "channel")({
              leave: t
            });
          TS.generic_dialog.start({
            title: n,
            body: TS.templates.channel_option_archive({
              name: e.name,
              group_prefix: TS.model.group_prefix
            }),
            go_button_text: i,
            onGo: function() {
              TS.api.call("groups.archive", {
                channel: e.id
              }, function(n, i) {
                if (n) return t && TS.client && TS.shared.closeArchivedChannel(e.id), void(TS.web && ($("p.alert").addClass("hidden"), $("#archive_success").removeClass("hidden"), $("#archive_btn").addClass("hidden"), $("#unarchive_btn").removeClass("hidden")));
                var r = TS.i18n.t("Archiving failed with error: {error}", "channels")({
                  error: i.error
                });
                "last_ra_channel" === i.error ? r = TS.model.user.is_admin ? TS.i18n.t("Sorry, you can’t archive this channel because it is the only channel one of the guest account members belongs to. If you first disable the guest account, you will then be able to archive the channel.", "channels")() : TS.i18n.t("Sorry, you can’t archive this channel because it is the only channel one of the guest account members belongs to.", "channels")() : "already_archived" === i.error ? r = TS.i18n.t("This channel was already archived.", "channels")() : "restricted_action" === i.error && (r = TS.i18n.t("<p>You don‘t have permission to archive private channels.</p><p>Talk to your Team Owner.</p>", "channels")()), setTimeout(TS.generic_dialog.alert, 500, r);
              });
            }
          });
        },
        channelCreateDialogShowNameTakenAlert: function(e) {
          e.find(".modal_input_note").addClass("hidden"), e.find(".name_taken_warning").removeClass("hidden"), $("#channel_create_title").select();
        },
        channelCreateDialogShowDisallowedCharsAlert: function(e) {
          e.find(".modal_input_note").addClass("hidden"), e.find(".invalid_chars_warning").removeClass("hidden"), $("#channel_create_title").select();
        },
        channelCreateDialogShowSinglePunctuationAlert: function(e) {
          e.find(".modal_input_note").addClass("hidden"), e.find(".single_punctuation_warning").removeClass("hidden"), $("#channel_create_title").select();
        },
        channelCreateDialogShowOtherErrorAlert: function(e, t) {
          t || (t = TS.i18n.t("Sorry! Something went wrong.", "channels")()), e.find(".modal_input_note").addClass("hidden"), e.find(".other_error").removeClass("hidden").find(".error_message").text(t);
        },
        channelCreateDialogCleanName: function(e) {
          for (var t = e.find(".title_input").val(), n = TS.utility.cleanChannelName(t);
            "#" === t.substr(0, 1);) t = t.substr(1);
          return n == t || (e.find(".title_input").val(n), TS.channels.ui.channelCreateDialogShowDisallowedCharsAlert(e), !1);
        },
        channelCreateDialogValidateInput: function(e) {
          var t = e.find(".title_input").val(),
            n = TS.utility.cleanChannelName(t);
          return !!TS.channels.ui.channelCreateDialogCleanName(e) && ("_" === n || "-" === n ? (TS.channels.ui.channelCreateDialogShowSinglePunctuationAlert(e), !1) : t ? !(TS.channels.getChannelByName(t) || TS.groups.getGroupByName(t) || TS.members.getMemberByName(t)) || (TS.channels.ui.channelCreateDialogShowNameTakenAlert(e), !1) : ($("#channel_create_title").select(), !1));
        }
      });
      var e = function(e, t) {
          if (e) {
            var n = t.retention.retention_type,
              a = t.retention.retention_duration;
            i("channel", n, a);
          } else r("channel", t);
        },
        t = function(e, t) {
          if (e) {
            var n = t.retention.retention_type,
              a = t.retention.retention_duration;
            i("group", n, a);
          } else r("group", t);
        },
        n = function(e, t) {
          if (e) {
            var n = t.retention.retention_type,
              a = t.retention.retention_duration;
            i("conversation", n, a);
          } else r("conversation", t);
        },
        i = function(e, t, n) {
          var i = $("#generic_dialog .loading_hash_animation"),
            r = TS.model.team.prefs.retention_type,
            s = TS.model.team.prefs.retention_duration;
          "group" === e ? (r = TS.model.team.prefs.group_retention_type, s = TS.model.team.prefs.group_retention_duration) : "conversation" === e && (r = TS.model.team.prefs.dm_retention_type, s = TS.model.team.prefs.dm_retention_duration), "group" === e && (e = "channel"), i.replaceWith(TS.templates.channel_data_retention_dialog({
            model_type: e,
            retention_type: t,
            retention_duration: n,
            team_type: r,
            team_duration: s
          })), a();
        },
        r = function(e, t) {
          var n = $("#generic_dialog .loading_hash_animation");
          "no_perms" === t.error || "is_archived" === t.error || "not_paid" === t.error ? ("group" === e && (e = "channel"), n.replaceWith('<p class="no_bottom_margin">' + TS.i18n.t("Sorry! You can‘t change the retention duration for this {model_type, select, conversation {conversation} other {channel}}.", "channels")({
            model_type: e
          }) + "</p>")) : n.replaceWith('<p class="no_bottom_margin">' + TS.i18n.t("Oops! Something went wrong. Please try again.", "channels")() + "</p>");
        },
        a = function() {
          $("select[name=retention_type]").change(function() {
            1 != this.value ? ($("#team_retention_pref").removeClass("hidden"), $("#retention_duration_container, #retention_duration_warning").addClass("hidden")) : ($("#team_retention_pref").addClass("hidden"), $("#retention_duration_container, #retention_duration_warning").removeClass("hidden"), 0 === $("#retention_duration").val() && $("#retention_duration").val(""), $("#retention_duration").focus());
          }).change();
        },
        s = function() {
          var e = cdn_url + "/9c217/img/loading_hash_animation_@2x.gif",
            t = TS.i18n.t("Loading...", "channels")();
          return '<div class="loading_hash_animation" style="margin: 2rem;"><img src="' + e + '" alt="' + t + '" /><br />' + t + "</div>";
        };
    }();
  },
  2393: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("click", {
        onStart: function() {
          n(), t();
        },
        addHandler: function(t, n, i) {
          _.isFunction(t) && (i = n, n = t, t = null), e.push({
            selector: t,
            fn: n,
            prevent_on_drag: i || !1
          });
        },
        addClientHandler: function() {
          if (TS.client) return TS.click.addHandler.apply(this, arguments);
        },
        addWebHandler: function() {
          if (TS.web) return TS.click.addHandler.apply(this, arguments);
        },
        test: function() {
          return {
            addAll: t,
            setupBinding: n,
            handlers: function() {
              return e;
            },
            resetHandlers: function() {
              e = [];
            },
            unbind: function() {
              $("body").off("click.ts_dot_click"), $("body").off("mousedown.ts_dot_click_mousedown");
            }
          };
        }
      });
      var e = [],
        t = function() {
          TS.click.addClientHandler("#archive_msg_lim_btn, #archive_msg_lim_btn_treatment, #msg_lim_header_btn, #msg_lim_header_btn_treatment", function(e, t) {
            TS.clog.track("GROWTH_PRICING", {
              contexts: {
                ui_context: {
                  step: "history",
                  action: "click",
                  ui_element: t.data("data-clog-ui-element")
                }
              }
            });
          }), TS.click.addClientHandler(function(e) {
            TS.client.ui.checkForEditing(e) && e.preventDefault();
          }), TS.click.addWebHandler("#msgs_div", function(e) {
            TS.utility.isSpaceClickEventSafe(e) || e.preventDefault();
          }), TS.click.addClientHandler("#msgs_div .message[data-ts]", function(e) {
            var t = $(e.target),
              n = t.closest(".message").data("ts");
            n && (n = n.toString());
            var i = TS.shared.getActiveModelOb();
            if (n) {
              if (e.altKey) return e.preventDefault(), TS.info("setting unread point on " + i.id + " due to alt+click on message with ts = " + n), void TS.client.msg_pane.setUnreadPoint(n);
              if (TS.utility.cmdKey(e) && e.shiftKey) {
                e.preventDefault();
                var r = TS.utility.msgs.getMsg(n, i.msgs);
                TS.dir(0, r), i.is_im ? TS.ui.growls.growlImMessage(i, r, !1, !0) : TS.ui.growls.growlChannelOrGroupMessage(i, r, !1, !0);
              }
            }
          }), TS.click.addClientHandler("ts-message .resend_temp_msg, ts-message .remove_temp_msg", function(e, t) {
            var n = t.closest("ts-message"),
              i = n.attr("data-ts");
            if (i) {
              var r = n.attr("data-model-ob-id"),
                a = TS.shared.getModelObById(r);
              if (a) {
                e.preventDefault();
                var s = t.hasClass("resend_temp_msg");
                TS.utility.msgs.handleFailedMsgSend(i, a, s);
              }
            }
          }), TS.click.addClientHandler(".top_results_search_message_result", function(e, t, n) {
            var i = $(e.target),
              r = i.closest(".search_message_result"),
              a = r.data("module-name") || "",
              s = r.data("module-order") || 0,
              o = i.closest("ts-message"),
              l = o.data("iid") || "";
            if (!i.attr("href") && !i.parents(".rxn").length) {
              var d = !1;
              if (i.parentsUntil(".top_results_search_message_result").each(function() {
                  $(this).attr("href") && (d = !0);
                }), !d) {
                var c = TS.search.view.getMatchForSearchResult(t);
                if (c) {
                  var _ = c.match;
                  e.preventDefault(), TS.boot_data.page_needs_enterprise && _.team && TS.model.team.id != _.team && !_.channel.is_shared && _.permalink && TS.utility.openInNewTab(_.permalink, "_blank");
                  var u = _.channel && _.channel.id ? _.channel.id : _.channel,
                    m = TS.shared.getModelObById(u),
                    p = _.thread_ts;
                  if (p && p != _.ts) return void TS.ui.replies.openConversation(m, p, _.ts, n);
                  var f = {
                    click_target_type: "top_results_jump_body",
                    click_position: c.index,
                    click_user_id: _.user,
                    click_channel_id: _.channel.id,
                    click_timestamp: _.ts,
                    click_module_name: a,
                    click_module_position: s,
                    click_sort: TS.search.sort
                  };
                  TS.search.last_request_id && (f.request_id = TS.search.last_request_id), l && (f.click_iid = l), TS.clog.track("SEARCH_CLICK", f), TS.client.ui.tryToJump(u, _.ts);
                }
              }
            }
          }), TS.click.addClientHandler(".search_message_result a, .search_message_result button", function(e, t) {
            var n = $(e.target),
              i = TS.search.view.getMatchForSearchResult(t);
            if (i) {
              var r, a, s, o, l = i.match,
                d = n.closest(".search_message_result"),
                c = d.data("module-name") || "",
                _ = d.data("module-order") || 0,
                u = d.data("iid") || "",
                m = n.closest("ts-message"),
                p = m.data("iid") || u;
              if (n.hasClass("jump") ? r = "top_results_jump" : n.hasClass("search_jump") ? r = "jump" : n.hasClass("archive") ? r = "archive" : n.is(".channel_link, .internal_im_link, .mpim_link, .group_link") ? r = "channel" : n.hasClass("message_sender") ? (r = "sender", o = n.closest("ts-message"), a = o.data("memberId"), s = o.data("ts") + "") : n.hasClass("timestamp") ? (r = "timestamp", o = n.closest("ts-message"), a = o.data("memberId"), s = o.data("ts") + "") : n.hasClass("star") ? (r = "star", o = n.closest("ts-message"), a = o.data("memberId"), s = o.data("ts") + "") : (n.attr("href") || n.attr("onclick")) && (r = "link"), r) {
                var f = {
                  click_target_type: r,
                  click_position: i.index,
                  click_user_id: l.user,
                  click_channel_id: l.channel.id,
                  click_timestamp: l.ts,
                  click_target_user_id: a,
                  click_target_timestamp: s,
                  click_module_name: c,
                  click_module_position: _,
                  click_sort: TS.search.sort
                };
                TS.search.last_request_id && (f.request_id = TS.search.last_request_id), p && (f.click_iid = p), TS.clog.track("SEARCH_CLICK", f);
              }
            }
          }), TS.click.addClientHandler(".search_message_result .sli_feedback", function(e, t) {
            e.preventDefault();
            var n = $(e.target),
              i = TS.search.view.getMatchForSearchResult(t);
            if (i) {
              var r = {},
                a = "",
                s = {
                  plus: TS.i18n.t('Search result is relevant<br><span class="subtle_silver">(query string will be logged!)</span>', "clicks")(),
                  circle: TS.i18n.t('Search result is somewhat relevant<br><span class="subtle_silver">(query string will be logged!)</span>', "clicks")(),
                  minus: TS.i18n.t('Search result is not relevant<br><span class="subtle_silver">(query string will be logged!)</span>', "clicks")()
                };
              n.is(".selected") ? (r.undo = !0, n.is(".sli_feedback_plus") ? a = s.plus : n.is(".sli_feedback_circle") ? a = s.circle : n.is(".sli_feedback_minus") && (a = s.minus)) : a = TS.i18n.t('oops!<br><span class="subtle_silver">remove my feedback</span>', "clicks")(), TS.tips.updateTipTitle(n, a), n.toggleClass("selected"), n.siblings(".sli_feedback").each(function() {
                $(this).removeClass("selected");
                var e = "";
                $(this).is(".sli_feedback_plus") ? e = s.plus : $(this).is(".sli_feedback_circle") ? e = s.circle : $(this).is(".sli_feedback_minus") && (e = s.minus), TS.tips.updateTipTitle($(this), e);
              }), n.is(".sli_feedback_plus") ? r.value = 5 : n.is(".sli_feedback_circle") ? r.value = 1 : n.is(".sli_feedback_minus") && (r.value = -5), r.channel_id = i.match.channel.id, r.message_id = i.match.ts, r.permalink = i.match.permalink, r.query = TS.search.view.latest_msg_search_results.query, r.search_sort = TS.search.sort, r.search_exclude_bots = TS.model.prefs.search_exclude_bots, r.search_only_current_team = TS.model.prefs.search_only_current_team, r.search_exclude_channel = TS.model.prefs.search_exclude_channels, r.search_only_my_channels = TS.model.prefs.search_only_my_channels, TS.api.call("search.feedback", r);
            }
          }), TS.click.addClientHandler("ts-message .message_body a, ts-message .file_container a", function(e, t) {
            var n, i, r, a, s, o, l, d, c, u, m, p = $(e.target);
            n = t.closest("ts-message"), i = n.data("ts") + "", r = n.data("model-ob-id");
            var f = i && r ? TS.utility.msgs.findMsg(i, r) : null;
            a = n.data("member-id"), s = n.data("app-id"), o = n.data("bot-id"), l = t.data("referer-original-href") || t.attr("href"), d = {
              message_timestamp: i,
              channel_id: r,
              channel_type: r ? r.charAt(0) : "",
              member_id: a,
              app_id: s,
              bot_id: o,
              url: l || ""
            };
            var h = TS.utility.msgs.extractMsgDisplayContext(n);
            if (h) {
              d.link_origin = h;
              var g = null;
              "briefing" == h && TS.highlights_briefing ? g = TS.highlights_briefing.last_request_id : "all_unreads" == h && TS.client.unread && (g = TS.client.unread.last_request_id), g && (d.request_id = g);
            }
            TS.utility.msgs.isRawLink(p, l) && (d.link_is_raw = !0);
            var S = TS.utility.msgs.extractLinkType(t, p, l);
            d.link_type = S;
            var T = TS.utility.msgs.extractLinkAction(t, p);
            T && (d.link_action = T);
            var b = TS.utility.msgs.extractLinkItemId(t, p, S);
            if ((b && (d.item_id = b, d.item_type = b.charAt(0)), f && f.attachments) && t.closest(".attachment_group").length > 0) {
              d.link_is_attachment = !0;
              var v = TS.utility.msgs.extractLinkAttachmentField(t);
              v && (d.link_attachment_field = v);
            }
            TS.model.unread_view_is_showing && (_.merge(d, TS.client.ui.unread.getTrackingData(i)), TS.client.ui.unread.incrementTrackingSeqId()), c = t.closest(".msg_inline_img_holder").length > 0, u = t.attr("data-file-id"), u || (u = t.closest("[data-file-id]").attr("data-file-id")), m = u ? TS.files.getFileById(u) : null, "gdrive" === _.get(m, "external_type") && (d.contexts || (d.contexts = {}), d.contexts.platform || (d.contexts.platform = {}), d.contexts.platform.service_type = "GSUITE", d.contexts.platform.app_id = 9, d.contexts.platform.has_rich_preview = TS.files.fileHasRichPreview(m)), (c || m && TS.files.fileIsImage(m)) && TS.clog.track("MSG_PHOTO_EXPAND", d), TS.clog.track("MSG_LINK_CLICKED", d);
            var y = TS.utility.url.urlQueryStringParse(l).state;
            if (y = y ? y.match(/(\{.*\})/g) : null, y = y ? y[0] : null, (y = y ? JSON.parse(y) : null) && y.is_external_auth_url) {
              var w = "auto" === y.ask ? "PLATFORM_APPS_TARGETED_SUGGESTIONS_SELECTED" : "PLATFORM_APPS_TARGETED_SUGGESTIONS_JUST_THIS_ONCE_SELECTED";
              TS.clog.track(w, {
                app_id: y.service_type_id
              });
            }
          }), TS.click.addClientHandler("ts-message .msg_inline_video_buttons_div .msg_inline_video_play_button", function(e, t) {
            var n = t.closest("ts-message"),
              i = n.data("ts") + "",
              r = n.data("model-ob-id"),
              a = n.data("member-id"),
              s = n.data("app-id"),
              o = n.data("bot-id"),
              l = n.find(".msg_inline_video_new_window_button"),
              d = l.data("referer-original-href"),
              c = d || l.attr("href"),
              _ = {
                message_timestamp: i,
                channel_id: r,
                channel_type: r ? r.charAt(0) : "",
                member_id: a,
                app_id: s,
                bot_id: o,
                url: c || ""
              };
            TS.clog.track("MSG_VIDEO_PLAY", _);
          }), TS.click.addClientHandler(".member_preview_link, .member_preview_image", function(e, t, n) {
            e.preventDefault();
            var i = t.closest("#member_preview_scroller"),
              r = t.data("member-id");
            if (r) {
              if (e.shiftKey) {
                e.preventDefault();
                var a = TS.members.getMemberById(r);
                TS.dir(0, a);
              }
              if (i.length && r == TS.model.previewed_member_id) TS.menu.member.startWithMember(e, r);
              else if (i.length) TS.menu.member.startWithMember(e, r, !0);
              else if ("mentions" === n || "search_results" === n || "conversation" === n || "threads" === n) "search_results" === n && t.closest('[data-expert-search-module-name="experts"]').length && TS.sli_expert_search.handleExpertsClick(e, "experts", "user"), TS.menu.member.startWithMember(e, r);
              else {
                var s = t.closest("#msgs_div, #archives_msgs_div, #unread_msgs_div, #sli_briefing"),
                  o = t.closest("#all_members_container").length > 0;
                TS.ui.share_dialog.showing && TS.ui.share_dialog.div.modal("hide"), s.length || o ? TS.menu.member.startWithMember(e, r) : TS.client.ui.previewMember(r, n || "team_list");
              }
              var l = t.closest("ts-message"),
                d = l.data("ts") + "",
                c = l.data("model-ob-id");
              r = l.data("member-id");
              var _ = l.data("app-id"),
                u = l.data("bot-id"),
                m = {
                  message_timestamp: d,
                  channel_id: c,
                  channel_type: c ? c.charAt(0) : "",
                  member_id: r,
                  app_id: _,
                  bot_id: u
                };
              TS.clog.track("USERNAME_CLICK", m);
            } else TS.warn("hmmm, no data-member-id?");
          }), TS.click.addClientHandler(".app_profile a, .app_profile_slash_command", function(e, t) {
            var n = t.closest(".app_profile");
            TS.clog.track("USER_PROFILE_CLICK", {
              app_id: n.data("app_id"),
              bot_id: n.data("bot_id")
            });
          }), TS.click.addClientHandler('.bot_message .message_body a[href*="admin/billing"]', function() {
            TS.clog.track("GROWTH_PRICING", {
              contexts: {
                ui_context: {
                  step: "slackbot",
                  action: "click",
                  ui_element: "billing_link"
                }
              }
            });
          }), TS.click.addClientHandler(".member_details a", function(e, t) {
            t.hasClass("member_preview_menu_target") || TS.clog.track("USER_PROFILE_CLICK");
          }), TS.click.addClientHandler(".member", function(e, t) {
            e.preventDefault();
            var n = t.data("member-id");
            n ? TS.menu.member.startWithMember(e, n) : TS.warn("hmmm, no data-member-id?");
          }), TS.click.addClientHandler(".theme_installer_btn", function(e, t) {
            e.preventDefault();
            var n = t.data("theme");
            if (n) {
              n = n.replace(/ /g, ""), n = n.replace(/,$/g, "");
              var i = n.split(",");
              n = {
                column_bg: i[0],
                menu_bg: i[1],
                active_item: i[2],
                active_item_text: i[3],
                hover_item: i[4],
                text_color: i[5],
                active_presence: i[6],
                badge: i[7]
              }, TS.prefs.last_theme_selected_in_UI = "custom_theme", TS.prefs.setMultiPrefsByAPI({
                sidebar_theme: TS.prefs.last_theme_selected_in_UI,
                sidebar_theme_custom_values: JSON.stringify(n)
              }), TS.model.prefs.sidebar_theme = TS.prefs.last_theme_selected_in_UI, TS.prefs.setSidebarThemeCustomValues(n), TS.view.prefs.sidebarThemePrefChanged(!1);
            }
          }), TS.click.addClientHandler(".internal_im_link", function(e, t) {
            e.preventDefault(), TS.ims.startImByMemberId(t.data("member-id"));
          }), TS.click.addClientHandler(".group_link, .internal_group_link", function(e, t) {
            e.preventDefault(), TS.view.onGroupReferenceClick(e, t.data("group-id"));
          }), TS.click.addClientHandler(".internal_im_call_link", function(e, t) {
            TS.utility.calls.isEnabled() && (e.preventDefault(), TS.utility.calls.startCallInModelOb(TS.members.getMemberByName(t.data("member-name"))));
          }), TS.click.addClientHandler(".file_viewer_link", function(e, t) {
            e.preventDefault(), t.hasClass("file_viewer_channel_link") && TS.ui.fs_modal_file_viewer.start({
              modal_class: "fs_modal_file_viewer",
              $el: t,
              current_file_id: t.data("file-id"),
              show_control_btns: !t.closest("#file_preview_container").length
            });
          }), TS.click.addClientHandler(".file_viewer_external_link", function(e, t) {
            e.preventDefault(), TS.ui.fs_modal_file_viewer.start({
              modal_class: "fs_modal_file_viewer",
              $el: t,
              current_file_id: t.data("file-id"),
              current_external_link: t[0]
            });
          }), TS.click.addHandler(".inline_attachment.clickable, .inline_attachment.clickable + .reply_broadcast_rule", function(e, t) {
            var n = ["a", ".media_caret", ".delete_attachment_link", ".msg_inline_video_buttons_div"].join(",");
            if (!$(e.target).closest(n).length) {
              var i;
              i = t.is(".reply_broadcast") || t.closest(".reply_broadcast_rule").length ? t.closest(".message_body").find('[data-action="open_conversation"]') : t.find(".attachment_from_url_link"), i[0] && i[0].click();
            }
          }, !0), TS.click.addClientHandler(".internal_file_list_filter", function(e, t) {
            e.preventDefault(), TS.client.ui.files.showFileList(), TS.client.ui.files.toggleFileList(t.data("file-list-filter"));
          }), TS.click.addClientHandler("[data-expert-search-module-name] .channel_link", function(e, t) {
            var n = t.parents("[data-expert-search-module-name]").data("expert-search-module-name");
            TS.sli_expert_search.handleExpertsClick(e, n, "channel");
          }), TS.click.addClientHandler(".channel_link, .internal_channel_link", function(e, t) {
            e.preventDefault(), TS.view.onChannelReferenceClick(e, t.data("channel-id"));
          }), TS.click.addClientHandler(".internal_member_link:not(.plastic_contenteditable_element)", function(e, t) {
            e.preventDefault(), t.data("member-id") ? TS.view.onMemberReferenceClick(e, t.data("member-id")) : t.data("member-name") && TS.view.onMemberReferenceClick(e, t.data("member-name"));
          }), TS.click.addClientHandler(".internal_user_group_link", function(e, t) {
            e.preventDefault(), TS.view.onUserGroupReferenceClick(e, t.data("user-group-id"));
          }), TS.click.addClientHandler(".file_preview_link, .file_details_container .file_comment_btn, .back_from_file_comments", function(e, t, n) {
            e.preventDefault(), TS.ui.share_dialog.showing && TS.ui.share_dialog.div.modal("hide");
            var i = t.closest("[data-model-ob-id]").attr("data-model-ob-id"),
              r = t.attr("data-file-id");
            r || (r = t.closest("[data-file-id]").attr("data-file-id"));
            var a = TS.files.getFileById(r);
            if (a && a.is_deleted) return void TS.generic_dialog.alert("<p>" + TS.i18n.t("This file has been deleted.", "clicks")() + "</p>");
            if ("search_results" === n && TS.files.fileIsImage(a)) return void TS.ui.fs_modal_file_viewer.start({
              modal_class: "fs_modal_file_viewer",
              $el: t,
              current_file_id: r,
              show_control_btns: !1
            });
            var s = t.hasClass("file_comment_link");
            if (!t.hasClass("file_force_flexpane")) {
              var o = s ? "?comments=1" : "";
              if (TS.client.windows.openFileWindow(r, o)) return;
            }
            TS.client.ui.files.previewFile(r, n || "file_list", !1, s, i);
          }), TS.click.addClientHandler(".msg_actions", function(e, t) {
            var n = t.data("msg-ts");
            if (t.is(t) || t.closest(".msg_cog").length)
              if (e.preventDefault(), TS.model.archive_view_is_showing) {
                var i = TS.client.archives.getCurrentModelOb() || {};
                TS.menu.startWithMessageActions(e, n, i._archive_msgs);
              } else TS.menu.startWithMessageActions(e, n, TS.shared.getActiveModelOb().msgs);
          }), TS.click.addClientHandler(".comment_actions", function(e, t) {
            $(e.target).hasClass("comment_cog") && (e.preventDefault(), TS.menu.startWithCommentActions(e, t.data("file-id"), t.data("comment-id")));
          }), TS.click.addHandler(".file_actions", function(e, t) {
            e.preventDefault(), TS.menu.file.startWithFileActions(e, t.data("file-id"));
          }), TS.click.addClientHandler(".file_ssb_download_link", function(e, t) {
            var n = !(TS.ui.fs_modal_file_viewer && TS.ui.fs_modal_file_viewer.is_showing),
              i = TS.files.getFileById(t.data("file-id")),
              r = {
                is_successful: !1
              };
            if (i) {
              r.is_successful = !0;
              var a = TS.members.getMemberById(i.user);
              if (a && a.is_bot) {
                var s = a.profile.bot_id,
                  o = TS.bots.getBotById(s);
                r.app_id = o ? o.app_id : "", r.bot_id = s;
              }
            }
            TS.clog.track("FILE_DOWNLOAD", r), i && TS.client.downloads.startDownload(i, n) && e.preventDefault();
          }), TS.click.addClientHandler(".msg_jump, .star_jump", function(e, t, n) {
            e.preventDefault();
            var i = t.closest("[data-ts]").data("ts") + "";
            if (!i) return void TS.error("error no msg_id to jump to?");
            var r = t.data("cid"),
              a = TS.shared.getModelObById(r),
              s = t.closest("[data-thread-ts]").attr("data-thread-ts");
            if (s && s != i) return void TS.ui.replies.openConversation(a, s, i, n);
            TS.client.ui.tryToJump(r, i);
          }), TS.click.addClientHandler(".search_message_result .search_jump", function(e, t, n) {
            var i = TS.search.view.getMatchForSearchResult(t);
            if (i) {
              var r = i.match;
              e.preventDefault();
              var a = TS.search.view.firstResultWithExtracts(r),
                s = r.channel && r.channel.id ? r.channel.id : r.channel,
                o = TS.shared.getModelObById(s),
                l = a.thread_ts;
              if (l && l != a.ts) return void TS.ui.replies.openConversation(o, l, a.ts, n);
              TS.client.ui.tryToJump(s, a.ts);
            }
          }), TS.click.addWebHandler("#msgs_div.selecting_messages ts-message", function(e) {
            var t = $(e.target);
            if (!t.attr("href") && !t.hasClass("star")) {
              var n = t.closest("ts-message"),
                i = n.find(".msg_select_cb");
              t.is("input") || i.prop("checked", !i.prop("checked")), TS.msg_edit.batchDeleteSelectionChanged(i, e.shiftKey);
            }
          }), TS.click.addHandler(TS.rxns.checkForRxnClick), TS.click.addHandler(TS.stars.checkForStarClick), TS.click.addHandler(function(e) {
            var t = TS.client && TS.search.view.getMatchForSearchResult($(e.target));
            TS.inline_imgs.checkForInlineImgClick(e, t && t.match), t && TS.client && TS.ui.utility.updateClosestMonkeyScroller($(e.target));
          }), TS.click.addHandler(function(e) {
            var t = TS.client && TS.search.view.getMatchForSearchResult($(e.target));
            TS.inline_videos.checkForInlineVideoClick(e, t && t.match), t && TS.client && TS.ui.utility.updateClosestMonkeyScroller($(e.target));
          }), TS.click.addHandler(function(e) {
            var t = TS.client && TS.search.view.getMatchForSearchResult($(e.target));
            TS.inline_audios.checkForInlineAudioClick(e, t && t.match), t && TS.client && TS.ui.utility.updateClosestMonkeyScroller($(e.target));
          }), TS.click.addHandler(function(e) {
            var t = TS.client && TS.search.view.getMatchForSearchResult($(e.target));
            TS.inline_others.checkForInlineOtherClick(e, t && t.match), t && TS.client && TS.ui.utility.updateClosestMonkeyScroller($(e.target));
          }), TS.click.addHandler(function(e) {
            var t = TS.client && TS.search.view.getMatchForSearchResult($(e.target));
            TS.inline_attachments.checkForInlineAttachmentClick(e, t && t.match), t && TS.client && TS.ui.utility.updateClosestMonkeyScroller($(e.target));
          }), TS.click.addHandler(TS.inline_file_previews.checkForInlineFilePreviewClick), TS.click.addHandler(TS.inline_room_previews.checkForInlineRoomPreviewClick), TS.click.addClientHandler(".file_list_item", function(e, t, n) {
            var i = $(e.target),
              r = t.data("file-id"),
              a = t.parent().children().index(t),
              s = {
                click_target_type: "file",
                click_position: a,
                click_file_id: r,
                click_module_name: "files",
                click_module_position: 0,
                click_sort: TS.search.getSort("search.files"),
                request_id: TS.search.last_files_request_id
              };
            if (TS.clog.track("SEARCH_CLICK", s), !(TS.menu.file.file_list_menu_up || i.is(".star") || i.closest("a").length || i.closest("button").length)) {
              if (e.preventDefault(), TS.files.fileIsImage(r)) return void TS.ui.fs_modal_file_viewer.start({
                modal_class: "fs_modal_file_viewer",
                $el: t,
                current_file_id: r,
                show_control_btns: !1
              });
              TS.ui.share_dialog.showing && TS.ui.share_dialog.div.modal("hide"), TS.client.ui.files.previewFile(t.data("file-id"), n || "file_list", !1);
            }
          }), TS.click.addClientHandler("a.file_share, button.file_share", function(e, t) {
            e.preventDefault(), TS.view.files.shareInCurrentChannelOrIM(t.data("file-id"));
          }), TS.click.addClientHandler(".snippet_edit_dialog_link", function(e, t) {
            var n = TS.files.getFileById(t.data("file-id"));
            n.is_truncated || (e.preventDefault(), TS.ui.snippet_dialog.startEdit(n.id));
          }), TS.click.addClientHandler(".file_new_window_link", function(e, t) {
            TS.client.windows.openFileWindow(t.data("file-id"), "") ? e.preventDefault() : TS.utility.welcome_post.clogWelcomePostOpen(t);
          }), TS.click.addClientHandler("a.show_parent_replies, a.show_replies, .reply_bar", function(e, t, n) {
            e.preventDefault();
            var i = t.closest("ts-message"),
              r = i.attr("data-thread-ts");
            if (r) {
              var a = i.attr("data-model-ob-id"),
                s = TS.shared.getModelObById(a);
              s && TS.ui.replies.openConversationFromMessagePane(i, s, r, null, n);
            }
          }), TS.click.addWebHandler(".reply_bar", function(e, t) {
            if (!$(e.target).is("a")) {
              var n = t.closest("ts-message"),
                i = n.attr("data-thread-ts");
              if (!i) return;
              var r = n.attr("data-model-ob-id"),
                a = TS.shared.getModelObById(r);
              if (!a) return;
              var s = TS.utility.msgs.constructConversationPermalink(a, i);
              window.open(s);
            }
          }), TS.click.addClientHandler('[data-action="open_conversation"]', function(e, t, n) {
            e.preventDefault();
            var i = t.attr("data-model-ob-id"),
              r = TS.shared.getModelObById(i);
            if (r) {
              var a = t.attr("data-thread-ts");
              if (a) {
                var s = t.attr("data-ts");
                TS.ui.replies.openConversation(r, a, s, n);
              }
            }
          }), TS.click.addClientHandler("#mentions_clear_notifications", function(e) {
            e.preventDefault(), TS.replies.markAllThreads();
          }), TS.click.addClientHandler("#reply_container .reply_send, #file_reply_container .reply_send", function(e, t) {
            e.preventDefault(), TS.ui.replies.submitReply(e, t);
          }), TS.click.addClientHandler("#threads_msgs .reply_send", function(e, t) {
            e.preventDefault(), TS.ui.thread.submitReply(e, t);
          }), TS.click.addClientHandler("#reply_container .join_channel_from_thread", function(e, t) {
            e.preventDefault(), TS.ui.replies.joinChannelFromThread(e, t);
          }), TS.click.addClientHandler("#threads_msgs .join_channel_from_thread", function(e, t) {
            e.preventDefault(), TS.ui.thread.joinChannelFromThread(e, t);
          }), TS.click.addClientHandler(".thread_error_state_refresh_button", function(e) {
            e.preventDefault(), TS.client.threads.maybeReloadThreadsView();
          }), TS.click.addClientHandler(".app_space_error_state_refresh_button", function(e) {
            e.preventDefault(), TS.client.app_space.maybeReloadAppSpaceView();
          }), TS.click.addClientHandler("#thread_notification_banner .banner_buttons .btn", function(e, t) {
            e.preventDefault();
            var n = t.data("turn-on-pref"),
              i = $("#thread_notification_banner"),
              r = i.height();
            i.height(r), i.addClass("show_confirmation"), i.height(92), TS.prefs.setPrefByAPI({
              name: "seen_threads_notification_banner",
              value: !0
            }), TS.model.prefs.threads_everything !== n && (TS.prefs.setPrefByAPI({
              name: "threads_everything",
              value: n
            }), TS.clog.track("PREF_USER_CLIENT_UPDATE", {
              updated_user_client_prefs: {
                threads_everything: n.toString()
              }
            }));
          }), TS.click.addClientHandler("#thread_notification_banner .close", function(e) {
            e.preventDefault();
            var t = $("#thread_notification_banner"),
              n = t.height();
            t.height(n), t.height(0), TS.model.prefs.seen_threads_notification_banner || TS.prefs.setPrefByAPI({
              name: "seen_threads_notification_banner",
              value: !0
            });
          }), TS.click.addClientHandler("#thread_notification_banner_pref_link", function(e) {
            e.preventDefault(), TS.ui.prefs_dialog.start("notifications", "#prefs_threads_everything", "prefs_notifications");
          }), TS.click.addClientHandler("a.see_all_pins", function(e) {
            TS.client && TS.client.channel_page && (e.preventDefault(), TS.client.ui.flex.openFlexTab("details"), TS.client.channel_page.showPinsSection(), $("#channel_page_scroller .channel_page_pinned_items").highlight(null, "channel_page_pinned_items_highlighter"));
          }), TS.click.addClientHandler("ts-thread .new_reply_indicator", function(e, t) {
            var n = t.closest("ts-thread");
            if (n.length) {
              e.preventDefault();
              var i = n.attr("data-model-ob-id"),
                r = n.attr("data-thread-ts");
              TS.client.threads.showNewRepliesAndMarkThread(i, r);
            }
          }), TS.click.addClientHandler("ts-thread .view_all_replies_container", function(e, t) {
            var n = t.closest("ts-thread");
            if (n.length && (e.preventDefault(), !t.hasClass("active"))) {
              t.addClass("active");
              var i = n.attr("data-model-ob-id"),
                r = n.attr("data-thread-ts");
              TS.client.threads.showPreviousReplies(i, r).finally(function() {
                t.removeClass("active");
              });
            }
          }), TS.click.addClientHandler("#msgs_div ts-thread .expand_inline_thread", function(e, t) {
            e.preventDefault();
            var n = t.closest("ts-thread");
            n.length && TS.ui.thread.expandInlineThread(n);
          }), TS.click.addClientHandler("#msgs_div ts-thread .collapse_inline_thread", function(e, t) {
            e.preventDefault();
            var n = t.closest("ts-thread");
            n.length && TS.ui.thread.collapseInlineThread(n);
          }), TS.click.addClientHandler("a[href]", function(e, t, n) {
            var i, r, a = t.attr("href").toLowerCase();
            a.indexOf("?") > -1 && (i = a.indexOf("?"), r = a.slice(0, i));
            var s = {
              "/account/settings": !0,
              "/admin": !0,
              "/admin/billing": !0,
              "/admin/settings": !0,
              "/apps": !0,
              "/customize": !0,
              "/files": !0,
              "/pricing": !0,
              "/stats": !0,
              "/help": !0
            };
            if (s[a] || s[r]) return e.preventDefault(), void TS.utility.openAuthenticatedInBrowser(a);
            if (TS.client.archives.maybeHandleArchiveLink(t, n)) return TS.ui.fs_modal_file_viewer && TS.ui.fs_modal_file_viewer.is_showing && TS.ui.fs_modal.close(), void e.preventDefault();
            if (TS.utility.calls.maybeHandleCallLink(t)) return void e.preventDefault();
            if (!t.attr("target") && 0 !== a.indexOf("skype:")) return e.preventDefault(), void TS.utility.openInNewTab(a, TS.templates.builders.newWindowName());
            var o = TS.utility.getFileIDFromURL(a);
            if (o && TS.client.windows.openFileWindow(o, "")) return void e.preventDefault();
            TS.ui.replies.maybeOpenConversationLink(t, n) && e.preventDefault();
          }), TS.click.addClientHandler(".search_message_result", function(e, t) {
            var n = $(this),
              i = $(e.target);
            if (!(i.attr("href") || i.attr("onclick") || i.parents().attr("href") || i.parents(".message").length && window.getSelection && window.getSelection().toString() || t.hasClass("top_results_search_message_result"))) {
              var r = TS.search.view.getMatchForSearchResult(t);
              r && (n.hasClass("no_extracts") || (e.preventDefault(), TS.search.view.toggleExtractsForMatch(e, r)));
            }
          }), TS.click.addClientHandler(".attachment_show_more", function(e, t) {
            var n = TS.shared.getActiveModelOb(),
              i = t.data("msg-ts").toString(),
              r = TS.utility.msgs.findMsg(i, n.id),
              a = r._shown_attachments;
            Number.isInteger(a) && a + 20 <= r.attachments.length ? r._shown_attachments += 20 : r._shown_attachments = r.attachments.length, i == TS.shared.getLatestMsgTs(n) && TS.shared.markReadMsg(n.id, i, TS.model.marked_reasons.viewed), TS.client.msg_pane.rebuildMsgsWithReason("show more attachments");
          }), TS.click.addClientHandler(".attachment_actions_interactions .btn", function(e) {
            e.preventDefault();
            var t = TS.attachment_actions.handleActionEventAndGetContext($(e.target));
            if (t) {
              t.action.confirm ? TS.attachment_actions.confirmAction(t.action, function() {
                TS.attachment_actions.action_triggered_sig.dispatch(t);
              }) : TS.attachment_actions.action_triggered_sig.dispatch(t);
              var n = ["Create a channel", "Edit messages", "Upload files"];
              _.includes(n, t.action.name) && TS.clog.track("GROWTH_HELP_SLACKBOT_V2", {
                action: "click",
                click_target: t.action.name
              });
            }
          }), TS.click.addClientHandler("#threads_view_banner .clear_unread_messages", function(e) {
            e.preventDefault(), TS.client.threads.markAllNewThreads();
          }), TS.click.addClientHandler("#threads_view_banner", function(e) {
            if (e.preventDefault(), TS.client.ui.threads.isAlternativeThreadsViewShowing()) return void TS.client.threads.maybeReloadThreadsView();
            TS.client.ui.threads.jumpToTop();
          }), TS.click.addClientHandler(".app_preview_link", function(e, t) {
            var n = t.closest("[data-bot-id]");
            if (TS.model.user.is_restricted || TS.model.user.is_ultra_restricted) {
              var i = t.data("member-name");
              if (i) return e.preventDefault(), TS.view.onMemberReferenceClick(e, i);
            } else {
              e.preventDefault();
              var r = TS.model.active_im_id && !TS.client.activeChannelIsHidden(),
                a = n.data("bot-id"),
                s = n.data("team-id"),
                o = n.data("ts") + "",
                l = n.data("model-ob-id"),
                d = n.data("member-id"),
                c = n.data("app-id"),
                _ = {
                  message_timestamp: o,
                  channel_id: l,
                  channel_type: l ? l.charAt(0) : "",
                  member_id: d,
                  app_id: c,
                  bot_id: a
                };
              TS.clog.track("USERNAME_CLICK", _), a ? r ? TS.boot_data.feature_shared_channels_client && s ? TS.menu.app.startWithApp(e, a, s, null, !0) : TS.menu.app.startWithApp(e, a, null, null, !0) : TS.boot_data.feature_shared_channels_client && s ? TS.menu.app.startWithApp(e, a, s) : TS.menu.app.startWithApp(e, a, null, !0) : TS.warn("hmm, no data-bot-id?");
            }
          }), TS.click.addClientHandler(".attachment_attribution a", function(e, t) {
            var n = t.data("attribution-bot-id"),
              i = t.data("attribution-team-id");
            n ? (e.preventDefault(), TS.boot_data.feature_shared_channels_client && i ? TS.menu.app.startWithApp(e, n, i) : TS.menu.app.startWithApp(e, n)) : TS.warn("hmm, no data-bot-id?");
          }), TS.click.addHandler("[data-slash-command-autofill]", function(e, t) {
            var n = TS.client.msg_input.$input,
              i = TS.utility.contenteditable.value(n),
              r = t.data("slash-command-autofill");
            TS.apps.isAppSpaceEnabled() && "messages" !== TS.client.ui.app_space.active_view && TS.client.ui.app_space.toggleView("messages"), i || (TS.utility.contenteditable.clear(n), TS.utility.contenteditable.insertTextAtCursor(n, r), TS.utility.contenteditable.supportsTexty() || n.TS_tabComplete("promiseToChoose", void 0, !0)), TS.utility.contenteditable.value(n, r + " " + i), TS.utility.contenteditable.cursorPosition(n, r.length + 1, i.length), TS.utility.contenteditable.focus(n), TS.utility.contenteditable.supportsTexty() || n.trigger("textchange");
          }), TS.boot_data.feature_tinyspeck && TS.click.addClientHandler(".recap_highlight_debug", function(e) {
            if ("sli_debug_info" === TS.client.highlights.sli_recaps_debug_group) {
              var t;
              if (TS.model.unread_view_is_showing) {
                var n = $(e.target).parents("ts-message").data("model-ob-id");
                t = TS.shared.getModelObById(n);
              } else t = TS.shared.getActiveModelOb();
              var i = $(e.target).parents("ts-message").data("ts"),
                r = TS.client.highlights.getHighlight(t.id, i);
              TS.client.ui.debugger_flexpane.printJSON(r);
            }
          }), TS.click.addClientHandler("[data-highlight-feedback]", function(e) {
            var t = $(e.target).data("highlight-feedback"),
              n = $(e.target).closest("ts-message"),
              i = n.data("model-ob-id"),
              r = n.data("ts");
            TS.client.highlights.setDefaultFeedbackForHighlight(i, r, {
              feedback: t
            }, TS.model.unread_view_is_showing ? "all-unreads" : "in-channel"), $("#ts_tip_float_floater .ts_tip_tip").text(TS.i18n.t("Thank you!", "highlights")());
          }), TS.click.addClientHandler('[data-js="highlights_feedback_dropdown"]', function(e) {
            var t = $(e.target).closest("ts-message"),
              n = t.data("model-ob-id"),
              i = t.data("ts"),
              r = TS.model.unread_view_is_showing ? "all-unreads" : "in-channel";
            TS.client.ui.highlights.openNegativeFeedbackMenu(e, n, i, r);
          }), TS.click.addClientHandler('[data-js="sli_briefing_back_button"]', function() {
            TS.client.unread.showUnreadView(), TS.highlights_briefing.clogBackButton();
          }), TS.click.addClientHandler("[data-js=sli_expert_search_toggle]", function(e) {
            TS.sli_expert_search && TS.sli_expert_search.toggleExpand(e);
          }), TS.boot_data.feature_sli_channel_insights && (TS.click.addClientHandler('[data-js="sli_channel_insights_cta"]', function() {
            TS.client.ui.channel_insights.open();
          }), TS.click.addClientHandler("[data-js=sli_channel_insights_back]", function() {
            TS.client.ui.flex.openFlexTab("details");
          }), TS.click.addClientHandler("[data-js=sli_channel_insights_week]", function(e) {
            TS.client.ui.channel_insights.jumpToWeek($(e.target).data("ts"));
          }), TS.click.addClientHandler("#channel_insights_tab .c-channel_insights__debug", function(e) {
            TS.client.ui.channel_insights.debugHighlight($(e.target).data("ts"));
          }));
        },
        n = function() {
          var t = {};
          $("body").on("mousedown.ts_dot_click_mousedown", function(e) {
            t.x = e.clientX, t.y = e.clientY;
          }), $("body").on("click.ts_dot_click", function(n) {
            if (!(n.isDefaultPrevented() || TS.view && TS.view.maybeFollowLink(n))) {
              if (TS.isPartiallyBooted()) return void n.preventDefault();
              var a = $(n.target);
              if (!a.parents("[data-reactroot]").length)
                for (var s, o, l = i(n), d = 0; d < e.length; d += 1)
                  if (s = e[d], o = null, !s.prevent_on_drag || n.clientX == t.x && n.clientY == t.y) {
                    if (s.selector) {
                      if (o = a.closest(s.selector), !o.length) continue;
                      s.fn(n, o, l), n.isDefaultPrevented() && TS.has_pri[r] && TS.log(r, "click on " + s.selector);
                    } else s.fn(n, l);
                    if (n.isDefaultPrevented()) return;
                  }
            }
          });
        },
        i = function(e) {
          var t = $(e.target);
          if (t.closest("#search_results_container").length) return "search_results";
          if (t.closest("#member_stars_list").length) return "starred_items";
          if (t.closest("#member_mentions").length) return "mentions";
          if (t.closest("#file_list").length) return "file_list";
          if (t.closest("#file_preview_scroller").length) return "file_preview";
          if (t.closest("#member_preview_scroller").length) return "member_preview";
          if (t.closest("#convo_scroller").length) return "conversation";
          if (t.closest("#groups_tab").length) return "groups";
          if (t.closest("#threads_msgs_scroller_div").length) return "threads";
          if (t.closest("#channel_page_scroller").length) {
            var n = TS.shared.getActiveModelOb(),
              i = "channel_page";
            return n.is_group && !n.is_mpim ? i = "group_page" : (n.is_im || n.is_mpim) && (i = "im_page"), i;
          }
          return null;
        },
        r = 2003;
    }();
  },
  2422: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("cmd_handlers", {
        server_cmds: null,
        onStart: function() {
          r = TS.utility.throttleFunc(r, 3e3, !0), TS.prefs.team_allow_calls_changed_sig.add(a), _.get(window, "desktop.app.toggleDevTools") || delete TS.cmd_handlers["/slackdevtools"], TS.client && TS.client.traces.canTrace() || delete TS.cmd_handlers["/slacktrace"];
        },
        test: function() {
          return {
            _maybeInviteUserToModelOb: u,
            _maybeInviteUserGroupToModelOb: m,
            _getUserIdentifier: p
          };
        },
        groupCmdsByType: function(e) {
          var t = [l(e), d(e), c(e)];
          return Array.prototype.concat.apply([], t).filter(function(e) {
            return e.cmds.length > 0;
          });
        },
        getAvailableUserCmds: function(e) {
          var t = {},
            n = TS.shared.getActiveModelOb();
          return e = e || {}, _.forOwn(TS.cmd_handlers, function(i, r) {
            if (0 === r.indexOf("/") && ("function" != typeof i.autocomplete || i.autocomplete()) && !1 !== i.autocomplete && !i.alias_of && (!e.in_thread || TS.cmd_handlers.isCmdSupportedInThreads(r))) {
              switch (r) {
                case "/archive":
                case "/unarchive":
                  if (TS.channels.isChannelRequired(n)) return;
                  if (TS.model.active_group_id && TS.model.user.is_restricted) return;
                  if (TS.model.active_channel_id && !TS.permissions.members.canArchiveChannels()) return;
                  if (TS.model.active_im_id) return;
                  if (TS.model.active_mpim_id) return;
                  break;
                case "/kick":
                case "/remove":
                  if (n.is_archived) return;
                  if (TS.model.active_group_id && !TS.permissions.members.canKickFromGroups()) return;
                  if (TS.model.active_channel_id && !TS.permissions.members.canKickFromChannels()) return;
                  if (TS.model.active_im_id) return;
                  if (TS.model.active_mpim_id) return;
                  break;
                case "/join":
                case "/feed":
                  if (TS.model.user.is_restricted) return;
                  break;
                case "/invite":
                  if (TS.model.user.is_ultra_restricted) return;
                  break;
                case "/invite_people":
                  if (!TS.ui.admin_invites.canInvite()) return;
                  break;
                case "/topic":
                case "/purpose":
                  if (TS.model.active_im_id) return;
                  if (TS.model.active_mpim_id) return;
                  if (TS.model.user.is_restricted) return;
                  if (TS.channels.isChannelRequired(n) && !TS.permissions.members.canPostInChannel(n)) return;
                  break;
                case "/leave":
                  if (TS.model.active_group_id) return;
              }("custom" === i.type || "service" === i.type) && TS.prefs.commands_only_regular && TS.model.user.is_restricted || (t[r] = i);
            }
          }), t;
        },
        parseArgs: function(e) {
          var t = e;
          TS.boot_data.feature_name_tagging_client && (e = TS.format.texty.convertContentsStringForSlashCommands(e));
          var n = {
            cmd: "",
            rest: "",
            words: []
          };
          if (!_.isString(e)) return n;
          var i = e.trim();
          return i ? (n.words = i.split(/\s+/), n.cmd = n.words[0].toLowerCase(), n.disp = n.words[0], n.rest = i.substring(n.cmd.length).trim(), n.original_txt = t, n) : n;
        },
        setUpCmds: function() {
          if (!TS.boot_data.page_needs_custom_cmds) return a(), Promise.resolve();
          n();
          var e = TS.storage.fetchCmds();
          if (e && TS.model.commands_cache_ts == e.cache_ts) return TS.model.did_we_load_with_cmd_cache = !0, TS.cmd_handlers.mergeInServerCmds(e.data), a(), Promise.resolve();
          return TS.api.call("commands.list", {}, void 0, !0).then(function(e) {
            e.data.commands && i(e.data.commands, e.data.cache_ts);
          }).catch(_.noop);
        },
        removeCommand: function(e, t) {
          delete TS.cmd_handlers.server_cmds[e], i(TS.cmd_handlers.server_cmds, t);
        },
        updateCommand: function(e, t) {
          TS.cmd_handlers.server_cmds[e.name] = e, i(TS.cmd_handlers.server_cmds, t);
        },
        resetUpCmds: function() {
          TS.storage.storeCmds(""), r();
        },
        sortNames: function(e) {
          function t(e, t) {
            return e.filter(function(e) {
              return -1 !== t.indexOf(TS.cmd_handlers[e].type);
            });
          }
          var n = e.sort(TS.i18n.sorter),
            i = t(n, ["client", "core"]),
            r = t(n, ["custom"]),
            a = t(n, ["app", "service"]),
            s = a.filter(function(e) {
              var t = TS.cmd_handlers[e];
              return !(!t.app && !t.service_name);
            });
          s.sort(function(e, t) {
            var n = TS.cmd_handlers[e],
              i = TS.cmd_handlers[t],
              r = n.service_name || TS.model.apps[n.app].name,
              a = i.service_name || TS.model.apps[i.app].name;
            return TS.i18n.sorter(r, a);
          });
          var o = a.filter(function(e) {
            var t = TS.cmd_handlers[e];
            return !(t.app || t.service_name);
          });
          return o.sort(), [].concat(i, r, s, o);
        },
        getAppNameForCmdName: function(e) {
          var t = TS.cmd_handlers[e];
          if (!t) return "";
          var n;
          return t.app && TS.model.apps[t.app] ? n = TS.model.apps[t.app].name : t.service_name && (n = t.service_name), n;
        },
        mergeInServerCmds: function(e) {
          TS.cmd_handlers.server_cmds = e;
          var t;
          for (var n in TS.cmd_handlers) 0 === n.indexOf("/") && ("client" === TS.cmd_handlers[n].type ? delete TS.cmd_handlers[n].override : delete TS.cmd_handlers[n]);
          for (t in e) 0 === t.indexOf("/") && (!TS.cmd_handlers[t] || TS.cmd_handlers[t].can_be_overridden_by_server_cmd ? TS.cmd_handlers[t] = TS.cmd_handlers.makeInternalCmdObject(e[t]) : TS.cmd_handlers[t].override = !0);
          for (t in e)
            if (0 === t.indexOf("/") && TS.cmd_handlers[t].alias_of) {
              var i = TS.cmd_handlers[TS.cmd_handlers[t].alias_of];
              i && "client" !== i.type && (i.aliases || (i.aliases = []), i.aliases.push(t));
            }
        },
        makeInternalCmdObject: function(e) {
          return {
            autocomplete: !0,
            alias_of: e.alias_of ? e.alias_of : null,
            aliases: null,
            usage: e.usage || "",
            desc: e.desc || "",
            help_text: e.help_text || "",
            type: e.type || "",
            app: e.app || "",
            service_name: e.service_name || ""
          };
        },
        addEphemeralFeedback: function(e, t) {
          t = _.defaults(t, {
            temporary: !0
          });
          var n = {
            text: e
          };
          t.input_txt && (t.c_id && t.thread_ts ? TS.utility.populateThreadInputs(t.input_txt, t.c_id, t.thread_ts) : TS.utility.contenteditable.value(TS.client.ui.$msg_input, t.input_txt)), t.temporary || (t.c_id && t.thread_ts ? TS.utility.msgs.removeAllEphemeralMsgsByType("threads_temp_slash_cmd_feedback", t.c_id) : TS.utility.msgs.removeAllEphemeralMsgsByType("temp_slash_cmd_feedback", TS.model.active_cid)), t.temporary && (n.ephemeral_type = "temp_slash_cmd_feedback"), t.slackbot_feels && (n.slackbot_feels = t.slackbot_feels), t.c_id && t.thread_ts && (n.channel = t.c_id, n.thread_ts = t.thread_ts, t.temporary && (n.ephemeral_type = "threads_temp_slash_cmd_feedback")), t.temporary ? TS.client.ui.addOrFlashEphemeralBotMsg(n) : TS.client.ui.addEphemeralBotMsg(n);
        },
        runCommand: function(e, t, n) {
          if (TS.cmd_handlers[e.cmd]) {
            if (t && !TS.cmd_handlers.isCmdSupportedInThreads(e.cmd)) return void TS.cmd_handlers.sendCmdNotSupportedInThreadsMsg(e.cmd, e.original_txt, t, n);
            TS.model.last_active_cid && TS.utility.msgs.removeAllEphemeralMsgsByType("temp_slash_cmd_feedback", TS.model.last_active_cid), TS.cmd_handlers[e.cmd].func(e.cmd, e.rest, e.words, e.original_txt, t, n);
          }
        },
        isCmdSupportedInThreads: function(t) {
          return t && _.includes(e, t);
        },
        sendCmdNotSupportedInThreadsMsg: function(e, t, n, i) {
          var r;
          r = TS.cmd_handlers[e] ? TS.i18n.t("*{cmd}* is not supported in threads. Sorry!", "threads")({
            cmd: e
          }) : TS.i18n.t("*{cmd}* is not a valid command.", "threads")({
            cmd: e
          }), TS.cmd_handlers.addEphemeralFeedback(r, {
            input_txt: t,
            slackbot_feels: "sad_surprise",
            c_id: i.id,
            thread_ts: n.ts
          });
        },
        "/slackdevtools": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          func: function() {
            if (_.get(window, "desktop.app.toggleDevTools")) {
              desktop.app.toggleDevTools(!1);
            }
          }
        },
        "/slackdebugwidget": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          func: function() {
            TS.debug_widget && TS.debug_widget.toggle();
          }
        },
        "/slacktrace": {
          type: "client",
          autocomplete: function() {
            return TS.client && TS.client.traces.canTrace();
          },
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Submit a performance profile to Slack", "cmd_handlers")(),
          func: function(e, t) {
            TS.client && TS.client.traces.canTrace() && (TS.client.traces.startTrace(parseInt(t, 10), {
              reason: "slashcommand"
            }), TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Thank you for submitting a performance profile to Slack!", "cmd_handlers")()));
          }
        },
        "/away": {
          localized: "/" + TS.i18n.t("away", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t('Toggle your "away" status', "cmd_handlers")(),
          func: function(e, t, n, i, r, a) {
            TS.members.toggleUserPresence().then(function(e) {
              var t, n = e.args.presence || TS.model.user.presence;
              t = "away" === n ? ":white_check_mark: " + TS.i18n.t("You are now marked as *away*.", "cmd_handlers")() : ":white_check_mark: " + TS.i18n.t("You are now marked as *active*.", "cmd_handlers")(), a && r ? TS.cmd_handlers.addEphemeralFeedback(t, {
                temporary: !1,
                c_id: a.id,
                thread_ts: r.ts
              }) : TS.cmd_handlers.addEphemeralFeedback(t, {
                temporary: !1
              });
            }).catch(_.noop), t && TS.members.setUserStatus(t);
          }
        },
        "/prefs": {
          localized: "/" + TS.i18n.t("prefs", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Open the preferences dialog", "cmd_handlers")(),
          func: function() {
            TS.ui.prefs_dialog.start();
          }
        },
        "/shortcuts": {
          localized: "/" + TS.i18n.t("shortcuts", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: ["/keys"],
          desc: TS.i18n.t("Open the keyboard shortcuts dialog", "cmd_handlers")(),
          func: function() {
            TS.ui.shortcuts_dialog.start();
          }
        },
        "/keys": {
          localized: null,
          type: "client",
          autocomplete: !0,
          alias_of: "/shortcuts",
          aliases: null,
          desc: "",
          func: function() {
            TS.cmd_handlers["/shortcuts"].func();
          }
        },
        "/open": {
          localized: "/" + TS.i18n.t("open", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: ["/join"],
          desc: TS.i18n.t("Open a channel", "cmd_handlers")(),
          args: [{
            name: TS.i18n.t("channel", "cmd_handlers")(),
            optional: !0
          }],
          func: function(e, t, n, i, r, a) {
            if (1 == n.length) TS.ui.channel_browser.start();
            else {
              var s = t;
              if (TS.boot_data.feature_name_tagging_client) {
                var o = _.trim(i.substr(e.length)),
                  l = TS.format.texty.convertContentsStringToContents(o);
                s = TS.format.texty.convertContentsToStringForDisplay(l);
              }
              s = TS.utility.cleanChannelName(s);
              var d = TS.channels.getChannelByName(s),
                c = TS.groups.getGroupByName(s);
              if (d) d.is_member ? TS.channels.displayChannel({
                id: d.id
              }) : TS.model.user.is_restricted || TS.channels.joinById(d.id, function(e, t) {
                if (!e) {
                  var n = TS.i18n.t("There was a problem joining “{channel_name}”, sorry!", "cmd_handlers")({
                    channel_name: s
                  });
                  "is_archived" == t.error && (n = TS.i18n.t("“{channel_name}” has been archived, so can’t be opened.", "cmd_handlers")({
                    channel_name: s
                  })), a && r ? TS.cmd_handlers.addEphemeralFeedback(n, {
                    temporary: !1,
                    slackbot_feels: "sad_surprise",
                    c_id: a.id,
                    thread_ts: r.ts
                  }) : TS.cmd_handlers.addEphemeralFeedback(n, {
                    temporary: !1,
                    slackbot_feels: "sad_surprise"
                  });
                }
              });
              else if (c) c.is_archived && !c.was_archived_this_session || TS.groups.displayGroup({
                id: c.id
              });
              else if (TS.permissions.members.canCreateChannels()) TS.ui.new_channel_modal.start(s);
              else {
                var u = TS.i18n.t("I couldn’t find a channel named “{channel_name}”, sorry!", "cmd_handlers")({
                  channel_name: s
                });
                a && r ? TS.cmd_handlers.addEphemeralFeedback(u, {
                  temporary: !1,
                  slackbot_feels: "sad_surprise",
                  c_id: a.id,
                  thread_ts: r.ts
                }) : TS.cmd_handlers.addEphemeralFeedback(u, {
                  temporary: !1,
                  slackbot_feels: "sad_surprise"
                });
              }
            }
          }
        },
        "/join": {
          localized: null,
          type: "client",
          autocomplete: !0,
          alias_of: "/open",
          aliases: null,
          desc: "",
          func: function(e, t, n, i, r, a) {
            TS.cmd_handlers["/open"].func(e, t, n, i, r, a);
          }
        },
        "/msg": {
          localized: "/" + TS.i18n.t("msg", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: ["/dm"],
          desc: TS.i18n.t("Send a DM message to another user", "cmd_handlers")(),
          args: [{
            name: "@user",
            optional: !1
          }, {
            name: TS.i18n.t("your message", "cmd_handlers")(),
            optional: !0
          }],
          func: function(e, t, n, i, r, a) {
            var s, o, l = n.length > 1 ? n[1] : "",
              d = f(l);
            if (!d)
              if (l) {
                var c = l.replace("#", "");
                if (s = TS.channels.getChannelByName(c), s || (s = TS.groups.getGroupByName(c)), !s) return o = TS.i18n.t("A valid team member name is required.", "cmd_handlers")(), void(a && r ? TS.cmd_handlers.addEphemeralFeedback(o, {
                  input_txt: i,
                  slackbot_feels: "sad_surprise",
                  c_id: a.id,
                  thread_ts: r.ts
                }) : TS.cmd_handlers.addEphemeralFeedback(o, {
                  input_txt: i,
                  slackbot_feels: "sad_surprise"
                }));
              } else $("#direct_messages_header").trigger("click.open_dialog").scrollintoview({
                duration: 500
              });
            var _ = t.replace(l, "");
            if (d) {
              if (d.deleted) return o = TS.i18n.t("That user has been deactivated", "cmd_handlers")() + " :disappointed:", void(a && r ? TS.cmd_handlers.addEphemeralFeedback(o, {
                input_txt: i,
                slackbot_feels: "sad_surprise",
                c_id: a.id,
                thread_ts: r.ts
              }) : TS.cmd_handlers.addEphemeralFeedback(o, {
                input_txt: i,
                slackbot_feels: "sad_surprise"
              }));
              TS.ims.startImByMemberId(d.id, !1, _);
            } else if (s) {
              if (s.is_archived) return o = TS.i18n.t("That {channel} has been archived", "cmd_handlers")({
                channel: s.is_channel ? TS.i18n.t("channel", "cmd_handlers")() : TS.i18n.t("private channel", "cmd_handlers")()
              }), void(a && r ? TS.cmd_handlers.addEphemeralFeedback(o, {
                input_txt: i,
                slackbot_feels: "sad_surprise",
                c_id: a.id,
                thread_ts: r.ts
              }) : TS.cmd_handlers.addEphemeralFeedback(o, {
                input_txt: i,
                slackbot_feels: "sad_surprise"
              }));
              s.is_channel ? TS.channels.displayChannel({
                id: s.id,
                and_send_txt: _
              }) : TS.groups.displayGroup({
                id: s.id,
                and_send_txt: _
              });
            }
          }
        },
        "/invite": {
          localized: "/" + TS.i18n.t("invite", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Invite another member to a channel", "cmd_handlers")(),
          args: [{
            name: "@user",
            optional: !1
          }, {
            name: TS.i18n.t("channel", "cmd_handlers")(),
            optional: !0
          }],
          func: function(e, t, n, i) {
            var r, a = n.length > 1 ? n[1] : "",
              s = f(a);
            if (a && (r = TS.boot_data.feature_name_tagging_client ? TS.user_groups.getUserGroupsById(a.substr(1)) : TS.user_groups.getUserGroupsByHandle(a)), !s && !r && a) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("A valid team member name is required.", "cmd_handlers")(), {
              input_txt: i,
              slackbot_feels: "sad_surprise"
            });
            if (s && s.deleted) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("That user has been deactivated.", "cmd_handlers")(), {
              input_txt: i,
              slackbot_feels: "sad_surprise"
            });
            if (s && s.is_ultra_restricted) {
              var o = TS.utility.parseJSONOrElse(_.get(s, "profile.guest_channels"), [])[0];
              if (o === TS.model.active_channel_id);
              else {
                if (o) return void(TS.model.user.is_admin ? TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("{user} is a Single-Channel Guest and can’t be added to a second channel. To invite {user} to this channel, you’ll need to <{team_url}admin#restricted|upgrade their membership> to a Multi-Channel Guest. ​Note: This will add a billable seat to your team.", "cmd_handlers")({
                  user: _.escape(a),
                  team_url: TS.boot_data.team_url
                }), {
                  input_txt: i,
                  slackbot_feels: "sad_surprise"
                }) : TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("{user} is a Single-Channel Guest and can’t be added to a second channel. Your Team Admin can upgrade their membership to a Multi-Channel Guest.", "cmd_handlers")({
                  user: _.escape(a)
                }), {
                  input_txt: i,
                  slackbot_feels: "sad_surprise"
                }));
                if (!TS.model.user.is_admin) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("{user} is a Single-Channel Guest. Only your Team Admin can invite them to a channel.", "cmd_handlers")({
                  user: _.escape(a)
                }), {
                  input_txt: i,
                  slackbot_feels: "sad_surprise"
                });
              }
            }
            if (s && s.is_app_user) {
              var l = TS.shared.getActiveModelOb();
              return void TS.apps.maybeInviteAppUserToChannel(s, l, i);
            }
            var d = n.length > 2 ? n[2] : "";
            if (d) {
              if (!s && !r) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("A valid channel name is required.", "cmd_handlers")(), {
                input_txt: i,
                slackbot_feels: "sad_surprise"
              });
              var c = TS.channels.getChannelByName(d),
                p = TS.groups.getGroupByName(d);
              c ? s ? u(s, c, i) : r && m(r, c, i) : p ? s ? u(s, p, i) : r && m(r, p, i) : TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("A valid channel name is required.", "cmd_handlers")(), {
                input_txt: i,
                slackbot_feels: "sad_surprise"
              });
            } else if (TS.model.active_channel_id) {
              var h = TS.channels.getChannelById(TS.model.active_channel_id);
              s ? u(s, h, i) : r ? m(r, h, i) : TS.ui.channel_invite_modal.startInviteToChannelModal(TS.model.active_channel_id);
            } else if (TS.model.active_group_id) {
              var g = TS.groups.getGroupById(TS.model.active_group_id);
              s ? u(s, g, i) : r ? m(r, g, i) : TS.ui.channel_invite_modal.startInviteToChannelModal(TS.model.active_group_id);
            } else if (TS.model.active_mpim_id) {
              var S = TS.mpims.getMpimById(TS.model.active_mpim_id);
              s && S ? u(s, S, i) : TS.ui.im_browser.startWithMpim(S);
            } else TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("A valid channel name is required.", "cmd_handlers")(), {
              input_txt: i,
              slackbot_feels: "sad_surprise"
            });
          }
        },
        "/invite_people": {
          localized: "/" + TS.i18n.t("invite_people", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Invite people to your Slack team", "cmd_handlers")(),
          args: [{
            name: "name@example.com, ...",
            optional: !0
          }],
          func: function(e, t) {
            TS.ui.admin_invites.canInvite() ? (t = t && t.trim(), t && TS.ui.admin_invites.populateInvites(t.split(/\s*,\s*|\s+/).map(function(e) {
              return {
                email: e
              };
            })), TS.ui.admin_invites.start()) : TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("You don’t have permission to invite people.", "cmd_handlers")(), {
              slackbot_feels: "sad_surprise"
            });
          }
        },
        "/dm": {
          localized: null,
          type: "client",
          autocomplete: !0,
          alias_of: "/msg",
          aliases: null,
          desc: "",
          func: function(e, t, n, i, r, a) {
            TS.cmd_handlers["/msg"].func(e, t, n, i, r, a);
          }
        },
        "/archive": {
          localized: "/" + TS.i18n.t("archive", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Archive the current channel", "cmd_handlers")(),
          func: function() {
            var e = TS.shared.getActiveModelOb();
            if (!e.is_archived && !TS.channels.isChannelRequired(e))
              if (TS.model.active_channel_id) {
                if (!TS.permissions.members.canArchiveChannels()) return;
                var t = TS.channels.getChannelById(TS.model.active_channel_id);
                TS.channels.ui.showArchiveChannelDialog(t);
              } else if (TS.model.active_group_id) {
              if (TS.model.user.is_restricted) return;
              var n = TS.groups.getGroupById(TS.model.active_group_id);
              TS.channels.ui.showArchiveGroupDialog(n);
            }
          }
        },
        "/leave": {
          localized: "/" + TS.i18n.t("leave", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: ["/close", "/part"],
          desc: TS.i18n.t("Leave a channel", "cmd_handlers")(),
          func: function(e, t, n) {
            if (1 == n.length) {
              var i = TS.shared.getActiveModelOb();
              TS.model.active_channel_id ? i.is_archived ? TS.channels.closeArchivedChannel(TS.model.active_channel_id) : TS.channels.leave(TS.model.active_channel_id) : TS.model.active_im_id ? TS.ims.closeIm(TS.model.active_im_id) : TS.model.active_mpim_id ? TS.mpims.closeMpim(TS.model.active_mpim_id) : TS.model.active_group_id ? i.is_archived ? TS.shared.closeArchivedChannel(i.id) : TS.groups.leave(i.id) : TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("A valid channel or team member name is required.", "cmd_handlers")(), {
                slackbot_feels: "sad_surprise"
              });
            } else {
              var r = TS.channels.getChannelByName(t);
              r ? TS.channels.leave(r.id) : TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("A valid channel name is required.", "cmd_handlers")(), {
                slackbot_feels: "sad_surprise"
              });
            }
          }
        },
        "/star": {
          localized: "/" + TS.i18n.t("star", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          desc: TS.i18n.t("Stars the current channel or conversation", "cmd_handlers")(),
          func: function(e, t, n, i, r, a) {
            var s;
            a && r ? TS.stars.toggleStarOnMsg(r.ts, a, function() {
              s = r.is_starred ? TS.i18n.t("Ok, I starred this thread", "cmd_handlers")() : TS.i18n.t("Ok, I unstarred this thread", "cmd_handlers")(), TS.cmd_handlers.addEphemeralFeedback(s, {
                c_id: a.id,
                thread_ts: r.ts
              });
            }) : TS.stars.toggleStarOnActiveModelObject(function(e) {
              s = e.is_starred ? TS.i18n.t("Ok, I starred {channel}", "cmd_handlers")({
                channel: e.name
              }) : TS.i18n.t("Ok, {channel} is unstarred", "cmd_handlers")({
                channel: e.name
              }), TS.cmd_handlers.addEphemeralFeedback(s);
            });
          }
        },
        "/close": {
          localized: null,
          type: "client",
          autocomplete: !0,
          alias_of: "/leave",
          aliases: null,
          desc: "",
          func: function(e, t, n) {
            TS.cmd_handlers["/leave"].func(e, t, n);
          }
        },
        "/part": {
          localized: null,
          type: "client",
          autocomplete: !0,
          alias_of: "/leave",
          aliases: null,
          desc: "",
          func: function(e, t, n) {
            TS.cmd_handlers["/leave"].func(e, t, n);
          }
        },
        "/topic": {
          localized: "/" + TS.i18n.t("topic", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Set the channel topic", "cmd_handlers")(),
          args: [{
            name: TS.i18n.t("new topic", "cmd_handlers")(),
            optional: !0
          }],
          func: function(e, t, n, i) {
            var r = TS.shared.getActiveModelOb();
            if (TS.model.user.is_restricted || TS.channels.isChannelRequired(r) && !TS.permissions.members.canPostInChannel(r)) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Setting the topic is a restricted action.", "cmd_handlers")(), {
              input_txt: i,
              slackbot_feels: "sad_surprise"
            });
            if (t.length > TS.model.channel_topic_max_length) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Topics cannot exceed {max_characters} characters.", "cmd_handlers")({
              max_characters: TS.model.channel_topic_max_length
            }), {
              input_txt: i,
              slackbot_feels: "sad_surprise"
            });
            var a = t;
            TS.boot_data.feature_name_tagging_client && (a = _.trim(i.substr(e.length))), TS.model.active_channel_id ? a ? TS.channels.setTopic(TS.model.active_channel_id, a) : $("#channel_topic_text").click().focus().select() : TS.model.active_group_id ? a ? TS.groups.setTopic(TS.model.active_group_id, a) : $("#channel_topic_text").click().focus().select() : TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Regrettably, DMs do not have topics", "cmd_handlers")(), {
              slackbot_feels: "sad_surprise"
            });
          }
        },
        "/togglethemes": {
          localized: "/" + TS.i18n.t("togglethemes", "cmd_handlers")(),
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            TS.prefs.setPrefByAPI({
              name: "messages_theme",
              value: "light_with_avatars" === TS.model.prefs.messages_theme ? "dense" : "light_with_avatars"
            });
          }
        },
        "/search": {
          localized: "/" + TS.i18n.t("search", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: ["/s"],
          desc: TS.i18n.t("Perform a search", "cmd_handlers")(),
          args: [{
            name: TS.i18n.t("your text", "cmd_handlers")(),
            optional: !0
          }],
          func: function(e, t) {
            TS.client.ui.flex.openFlexTab("search"), TS.view.resizeManually("TS.search.view.showResults"), TS.search.autocomplete.search(t, !0), TS.clog.track("SEARCH_OPEN", {
              open_method: "command"
            });
          }
        },
        "/s": {
          localized: null,
          type: "client",
          autocomplete: !0,
          alias_of: "/search",
          aliases: null,
          desc: "",
          func: function(e, t) {
            TS.cmd_handlers["/search"].func(e, t);
          }
        },
        "/rename": {
          localized: "/" + TS.i18n.t("rename", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Rename a channel", "cmd_handlers")(),
          args: [{
            name: TS.i18n.t("new name", "cmd_handlers")(),
            optional: !0
          }],
          func: function(e, t) {
            if (TS.model.user.is_restricted) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("You don’t have permission to rename.", "cmd_handlers")(), {
              slackbot_feels: "sad_surprise"
            });
            if (!TS.model.active_channel_id && !TS.model.active_group_id) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("IM channels cannot be renamed.", "cmd_handlers")(), {
              slackbot_feels: "sad_surprise"
            });
            var n = TS.shared.getActiveModelOb();
            if ((TS.model.active_channel_id || TS.model.active_group_id) && !TS.model.user.is_admin && n.creator != TS.model.user.id) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Only Team Admins (or the channel creator) are allowed to rename channels.", "cmd_handlers")(), {
              slackbot_feels: "sad_surprise"
            });
            var i = _.escape(t) || n.name;
            TS.ui.channel_options_dialog.start(n.id, "rename", {
              name: i
            });
          }
        },
        "/beep": {
          localized: "/" + TS.i18n.t("beep", "cmd_handlers")(),
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            TS.sounds.play("new_message");
          }
        },
        "/upload": {
          localized: "/" + TS.i18n.t("upload", "cmd_handlers")(),
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function(e, t) {
            var n = TS.utility.base64StrtoBlob(t);
            TS.client.ui.file_pasted_sig.dispatch(n);
          }
        },
        "/colors": {
          localized: "/" + TS.i18n.t("colors", "cmd_handlers")(),
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: ["/colours"],
          desc: TS.i18n.t("View any custom colors you have set for other members", "cmd_handlers")(),
          func: function(e, t, n, i, r, a) {
            for (var s, o = TS.members.getMembersForUser(), l = "", d = 0; d < o.length; d += 1) s = o[d], s.member_color != s.color && (l += s.name + ": " + s.member_color + "\n");
            var c = l ? TS.i18n.t("You have overridden colors as follows:", "cmd_handlers")() + "\n" + l : TS.i18n.t("No user color overrides have been set.", "cmd_handlers")();
            a && r ? TS.cmd_handlers.addEphemeralFeedback(c, {
              temporary: !1,
              c_id: a.id,
              thread_ts: r.ts
            }) : TS.cmd_handlers.addEphemeralFeedback(c, {
              temporary: !1
            });
          }
        },
        "/colours": {
          localized: null,
          type: "client",
          autocomplete: !0,
          alias_of: "/colors",
          aliases: null,
          desc: "",
          func: function(e, t, n, i, r, a) {
            TS.cmd_handlers["/colors"].func(e, t, n, i, r, a);
          }
        },
        "/color": {
          localized: "/" + TS.i18n.t("color", "cmd_handlers")(),
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: ["/colour"],
          desc: TS.i18n.t("Set a custom color for another member", "cmd_handlers")(),
          func: function(e, t, n, i, r, a) {
            var s, o = n.length > 1 ? n[1] : "",
              l = n.length > 2 ? n[2].replace(/#/g, "") : "",
              d = f(o);
            if (!d) return s = TS.i18n.t("A valid team member name is required.", "cmd_handlers")(), void(a && r ? TS.cmd_handlers.addEphemeralFeedback(s, {
              input_txt: i,
              slackbot_feels: "sad_surprise",
              c_id: a.id,
              thread_ts: r.ts
            }) : TS.cmd_handlers.addEphemeralFeedback(s, {
              input_txt: i,
              slackbot_feels: "sad_surprise"
            }));
            var c;
            if (d && (c = TS.boot_data.feature_name_tagging_client ? TS.members.getPrefCompliantMemberName(d, !0, !0) : "@" + d.name), l && (6 != l.length || !("#" + l).match(TS.format.hex_rx))) return s = TS.i18n.t("A valid 6 character hex code is required, like `FF0000`.", "cmd_handlers")(), void(a && r ? TS.cmd_handlers.addEphemeralFeedback(s, {
              input_txt: i,
              c_id: a.id,
              thread_ts: r.ts
            }) : TS.cmd_handlers.addEphemeralFeedback(s, {
              input_txt: i
            }));
            TS.members.setMemberUserColor(d, l), TS.model.prefs.user_colors = JSON.stringify(TS.model.user_colors), TS.prefs.setPrefByAPI({
              name: "user_colors",
              value: TS.model.prefs.user_colors
            }), s = l ? TS.i18n.t("You’ve set your custom color for {user} to {color}", "cmd_handlers")({
              user: c,
              color: "#" + l
            }) : TS.i18n.t("You’ve removed your custom color for {user}.", "cmd_handlers")({
              user: c
            }), a && r ? TS.cmd_handlers.addEphemeralFeedback(s, {
              input_txt: i,
              c_id: a.id,
              thread_ts: r.ts
            }) : TS.cmd_handlers.addEphemeralFeedback(s, {
              input_txt: i
            });
          }
        },
        "/colour": {
          localized: null,
          type: "client",
          autocomplete: !0,
          alias_of: "/color",
          aliases: null,
          desc: "",
          func: function(e, t, n, i, r, a) {
            TS.cmd_handlers["/color"].func(e, t, n, i, r, a);
          }
        },
        "/colortest": {
          localized: "/" + TS.i18n.t("colortest", "cmd_handlers")(),
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function(e, t) {
            var n = null;
            if (t) try {
              n = JSON.parse(t);
            } catch (e) {
              return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Not a good value for colors: ", "cmd_handlers")() + t, {
                slackbot_feels: "sad_surprise"
              });
            }
            n && n.length || (n = ["#DDCFFA", "#2EF645", "#F38303", "#E702AE", "#3C986D", "#9D6158", "#F43368", "#97C10A", "#7491F9", "#9E63A3", "#FACE41", "#35A5CC", "#39A93E", "#4FECA8", "#CA5B34", "#E2A974", "#2BCFCB", "#F89BA7", "#89868A", "#6A7841", "#ADC498", "#B1DBDD", "#B849C3", "#9CDB81", "#E72F36", "#A16A28", "#F68CCF", "#317C84", "#58851C", "#FC4A97", "#5774BB", "#97B7FE", "#C64D97", "#CB4A5C", "#F68B6B", "#81EE4F", "#B7ED6D", "#756D8E", "#3AED69", "#81E7FB", "#91ECB7", "#ED8947", "#57AF19", "#28BC89", "#4A9788", "#D645DF", "#B498FE", "#71C8F9", "#C07B1D", "#16BD60", "#EFCAE3", "#A4E0BB", "#478AAF", "#59953E", "#886CA7", "#F0C3F1", "#29AF70", "#80A5F8", "#636BB8"]);
            var i;
            for (i = 0; i < n.length; i += 1) n[i] = n[i].replace("#", "");
            var r = TS.members.getMembersForUser();
            for (i = 0; i < r.length; i += 1) TS.members.setMemberUserColor(r[i], n[_.random(0, n.length - 1)]);
          }
        },
        "/discon": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            TS.isSocketManagerEnabled() ? TS.interop.SocketManager.disconnect() : TS.ms.disconnect();
          }
        },
        "/sleepsleep": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            TS.isSocketManagerEnabled() ? TS.interop.SocketManager.sleep() : TS.ms.sleep();
          }
        },
        "/sleepsleep2": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            TS.isSocketManagerEnabled() ? (TS.interop.SocketManager.clearFastReconnectUrl(), TS.interop.SocketManager.sleep()) : (TS.ms.sleep(), TS.ms.setReconnectUrl(""));
          }
        },
        "/wakewake": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            TS.isSocketManagerEnabled() ? TS.interop.SocketManager.wake() : TS.ms.wake();
          }
        },
        "/discon2": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            TS.model.break_token = !0, TS.isSocketManagerEnabled() ? TS.interop.SocketManager.disconnect() : TS.ms.disconnect();
          }
        },
        "/discon4": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            TS.isSocketManagerEnabled() ? (TS.interop.SocketManager.debugClearFastReconnectUrl(), TS.interop.SocketManager.disconnect()) : (TS.ms.setReconnectUrl(""), TS.ms.disconnect());
          }
        },
        "/emo": {
          localized: "/" + TS.i18n.t("emoji", "cmd_handlers")(),
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: ["/emote", "/emoji"],
          desc: "",
          func: function() {
            var e = {
              target: TS.client.ui.$msg_input
            };
            TS.ui.react_emoji_menu.start({
              e: e
            });
          }
        },
        "/emoji": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: "/emo",
          aliases: null,
          desc: "",
          func: function() {
            TS.cmd_handlers["/emo"].func();
          }
        },
        "/emote": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: "/emo",
          aliases: null,
          desc: "",
          func: function() {
            TS.cmd_handlers["/emo"].func();
          }
        },
        "/editlast": {
          localized: "/" + TS.i18n.t("editlast", "cmd_handlers")(),
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Edit the last message you posted", "cmd_handlers")(),
          func: function(e, t, n, i, r, a) {
            var s, o = a || TS.shared.getActiveModelOb();
            if (o) {
              if (!(t = $.trim(t))) return s = TS.i18n.t("You must enter some text!", "cmd_handlers")(), void(o && r ? TS.cmd_handlers.addEphemeralFeedback(s, {
                input_txt: i,
                c_id: o.id,
                thread_ts: r.ts
              }) : TS.cmd_handlers.addEphemeralFeedback(s, {
                input_txt: i
              }));
              var l;
              if (o && r) l = TS.utility.msgs.getEditableReplyByProp("user", TS.model.user.id, o, r.ts);
              else {
                var d = _.reject(o.msgs, TS.utility.msgs.isMsgReply);
                l = TS.utility.msgs.getEditableMsgByProp("user", TS.model.user.id, d);
              }
              if (!l) return s = TS.i18n.t("Found no recent messages from you to edit.", "cmd_handlers")(), void(o && r ? TS.cmd_handlers.addEphemeralFeedback(s, {
                input_txt: i,
                slackbot_feels: "sad_surprise",
                c_id: o.id,
                thread_ts: r.ts
              }) : TS.cmd_handlers.addEphemeralFeedback(s, {
                input_txt: i,
                slackbot_feels: "sad_surprise"
              }));
              TS.msg_edit.commitEdit(l, o, t);
            }
          }
        },
        "/deletelast": {
          localized: "/" + TS.i18n.t("deletelast", "cmd_handlers")(),
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Delete the last message you posted", "cmd_handlers")(),
          func: function(e, t, n, i, r, a) {
            var s = a || TS.shared.getActiveModelOb();
            if (s) {
              var o;
              if (s && r) o = TS.utility.msgs.getEditableReplyByProp("user", TS.model.user.id, s, r.ts);
              else {
                var l = _.reject(s.msgs, TS.utility.msgs.isMsgReply);
                o = TS.utility.msgs.getEditableMsgByProp("user", TS.model.user.id, l);
              }
              if (!o) {
                var d = TS.i18n.t("Found no recent messages from you to delete.", "cmd_handlers")();
                return void(s && r ? TS.cmd_handlers.addEphemeralFeedback(d, {
                  slackbot_feels: "sad_surprise",
                  c_id: s.id,
                  thread_ts: r.ts
                }) : TS.cmd_handlers.addEphemeralFeedback(d, {
                  slackbot_feels: "sad_surprise"
                }));
              }
              TS.msg_edit.startDelete(o.ts, s);
            }
          }
        },
        "/collapse": {
          localized: "/" + TS.i18n.t("collapse", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Collapse all files in the current channel (opposite of /expand)", "cmd_handlers")(),
          func: function() {
            TS.inline_imgs.collapseAllInCurrent(), TS.inline_videos.collapseAllInCurrent(), TS.inline_attachments.collapseAllInCurrent(), TS.inline_audios.collapseAllInCurrent(), TS.inline_others.collapseAllInCurrent(), TS.inline_file_previews.collapseAllInCurrent(), TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("I’ve collapsed all files in this channel for you.", "cmd_handlers")(), {
              temporary: !1
            });
          }
        },
        "/expand": {
          localized: "/" + TS.i18n.t("expand", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Expand all files in the current channel (opposite of /collapse)", "cmd_handlers")(),
          func: function() {
            TS.inline_imgs.expandAllInCurrent(), TS.inline_videos.expandAllInCurrent(), TS.inline_attachments.expandAllInCurrent(), TS.inline_audios.expandAllInCurrent(), TS.inline_others.expandAllInCurrent(), TS.inline_file_previews.expandAllInCurrent(), TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("I’ve expanded all files in this channel for you.", "cmd_handlers")(), {
              temporary: !1
            });
          }
        },
        "/attach_align": {
          localized: "/" + TS.i18n.t("attach_align", "cmd_handlers")(),
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            $("body").toggleClass("attachments_flush_with_avatar");
          }
        },
        "/attach_thumb_align": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            window.attach_thumb_align_title = !window.attach_thumb_align_title, TS.client.msg_pane.rebuildMsgsWithReason("/attach_thumb_align command");
          }
        },
        "/remove": {
          localized: "/" + TS.i18n.t("remove", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: ["/kick"],
          desc: TS.i18n.t("Remove a person from the current channel", "cmd_handlers")(),
          args: [{
            name: "@user",
            optional: !1
          }],
          func: function(e, t, n, i) {
            if (TS.model.active_channel_id && !TS.permissions.members.canKickFromChannels()) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Removing from channels is a restricted action.", "cmd_handlers")(), {
              slackbot_feels: "sad_surprise"
            });
            if (TS.model.active_group_id && !TS.permissions.members.canKickFromGroups()) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Removing from private channels is a restricted action.", "cmd_handlers")(), {
              slackbot_feels: "sad_surprise"
            });
            var r = TS.shared.getActiveModelOb();
            if (r.is_archived) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("You can’t remove anyone from *{channel}* while it is archived.", "cmd_handlers")({
              channel: (TS.model.active_channel_id ? "#" : "") + r.name
            }), {
              slackbot_feels: "sad_surprise"
            });
            if (!(t = $.trim(t))) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Please specify someone to remove!", "cmd_handlers")(), {
              input_txt: i
            });
            var a = f(t);
            if (!a) {
              var s = TS.format.texty.convertContentsStringToContents(_.trim(i.substr(e.length)));
              return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("*{input}* is not a recognized member name.", "cmd_handlers")({
                input: _.escape(TS.format.texty.convertContentsToStringForDisplay(s))
              }), {
                input_txt: i,
                slackbot_feels: "sad_surprise"
              });
            }
            return a.is_app_user ? void TS.apps.maybeKickAppUserFromChannel(a, r, i) : TS.model.active_im_id || TS.model.active_mpim_id ? void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("You can’t remove someone from a DM.", "cmd_handlers")(), {
              slackbot_feels: "sad_surprise"
            }) : !TS.channels.isChannelRequired(r) || a.is_restricted || a.is_bot ? void TS.membership.ensureChannelMembershipIsKnownForUsers(r.id, [a.id]).then(function() {
              if (!TS.membership.getUserChannelMembershipStatus(a.id, r).is_member) {
                var t = TS.format.texty.convertContentsStringToContents(_.trim(i.substr(e.length)));
                return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("*{user}* is not a member of this {channel}.", "cmd_handlers")({
                  user: _.escape(TS.format.texty.convertContentsToStringForDisplay(t)),
                  channel: r.is_channel ? TS.i18n.t("channel", "cmd_handlers")() : TS.i18n.t("private channel", "cmd_handlers")()
                }), {
                  input_txt: i,
                  slackbot_feels: "sad_surprise"
                });
              }
              if (a.is_self) return void TS.client.ui.onSubmit("/leave");
              r.is_channel ? TS.channels.kickMember(r.id, a.id) : r.is_group && TS.groups.kickMember(r.id, a.id);
            }) : void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("You can’t remove this member from *{channel}*!", "cmd_handlers")({
              channel: (TS.model.active_channel_id ? "#" : "") + r.name
            }));
          }
        },
        "/kick": {
          localized: null,
          type: "client",
          autocomplete: !0,
          alias_of: "/remove",
          aliases: null,
          desc: "",
          func: function(e, t, n, i) {
            TS.cmd_handlers["/remove"].func(e, t, n, i);
          }
        },
        "/feedback": {
          localized: "/" + TS.i18n.t("feedback", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Send feedback to Slack", "cmd_handlers")(),
          args: [{
            name: TS.i18n.t("your message", "cmd_handlers")(),
            optional: !0
          }],
          func: function(e, t, n, i, r, a) {
            if (!t) return void TS.utility.openInNewTab("/help/requests/new", "_blank");
            TS.generic_dialog.start({
              title: TS.i18n.t("Send feedback", "cmd_handlers")(),
              body: '<p class="bold">' + TS.i18n.t("Looks like you are trying to send us some feedback! Yes?", "cmd_handlers")() + "</p>",
              show_cancel_button: !0,
              show_go_button: !0,
              go_button_text: TS.i18n.t("Yes, send it", "cmd_handlers")(),
              onGo: function() {
                var n = {
                  command: e,
                  text: TS.format.cleanCommandText(t),
                  channel: TS.model.active_cid
                };
                a && r && (n.channel = a.id, n.thread_ts = r.ts);
                var s = t;
                TS.boot_data.feature_name_tagging_client && (s = _.trim(i.substr(e.length))), TS.api.call("chat.command", n, function(e, t, n) {
                  TS.client.ui.onAPICommand(e, t, n, s);
                });
              },
              onCancel: function() {
                a && r ? TS.utility.populateThreadInputs(i, a.id, r.ts) : TS.utility.populateInput(TS.client.ui.$msg_input, i);
              }
            });
          }
        },
        "/shrug": {
          localized: "/" + TS.i18n.t("shrug", "cmd_handlers")(),
          type: "client",
          autocomplete: !0,
          alias_of: null,
          aliases: null,
          desc: TS.i18n.t("Appends ¯\\_(ツ)_/¯ to your message", "cmd_handlers")(),
          args: [{
            name: TS.i18n.t("your message", "cmd_handlers")(),
            optional: !0
          }],
          func: function(e, t, n, i, r, a) {
            var s = _.trim(i.substr(e.length));
            s && " " !== s.substr(s.length - 1) && (s += " "), s += "¯\\_(ツ)_/¯ ", a || (a = TS.shared.getActiveModelOb()), TS.client.ui.sendMessage(a, s, r);
          }
        },
        "/showfallbacks": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            TS.model.show_attachment_fallback = !TS.model.show_attachment_fallback, TS.client.msg_pane.rebuildMsgsWithReason("/showfallbacks command");
          }
        },
        "/macgap.app.enabledevelopertools()": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            window.macgap && window.macgap.app && window.macgap.app.enableDeveloperTools && macgap.app.enableDeveloperTools();
          }
        },
        "/toggle_debugging_prefs": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            TS.ui.prefs_dialog.start("advanced", "#prefs_debug");
          }
        },
        "/slack_diagnostic_report": {
          localized: null,
          type: "client",
          autocomplete: !1,
          alias_of: null,
          aliases: null,
          desc: "",
          func: function() {
            s();
          }
        }
      });
      var e = ["/shrug", "/prefs", "/shortcuts", "/keys", "/toggle_debugging_prefs", "/away", "/search", "/togglethemes", "/feedback", "/slack_diagnostic_report", "/msg", "/dm", "/s", "/editlast", "/deletelast", "/star", "/beep", "/colors", "/colours", "/color", "/colour", "/active"];
      TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE && e.push("/" + TS.i18n.t("active", "cmd_handlers")());
      var t, n = function() {
          if (!t && TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE) {
            t = !0;
            var n;
            _.forOwn(TS.cmd_handlers, function(t, i) {
              0 === i.indexOf("/") && (n = TS.cmd_handlers[i].localized ? TS.cmd_handlers[i].localized.toLowerCase() : null) && n !== i && !TS.cmd_handlers[n] && (TS.cmd_handlers[n] = _.clone(TS.cmd_handlers[i]), TS.cmd_handlers[n].localized = null, TS.cmd_handlers[i].autocomplete = !1, _.includes(e, i) && e.push(n));
            });
          }
        },
        i = function(e, t) {
          TS.model.commands_cache_ts = t, TS.storage.storeCmds({
            data: e,
            cache_ts: TS.model.commands_cache_ts
          }), TS.cmd_handlers.mergeInServerCmds(e), a();
        },
        r = function() {
          TS.cmd_handlers.setUpCmds();
        },
        a = function() {
          return TS.cmd_handlers["/call"] && "client" !== TS.cmd_handlers["/call"].type ? void _.unset(TS.cmd_handlers, "/call") : TS.utility.calls.isEnabled() ? void(TS.cmd_handlers["/call"] = {
            type: "client",
            autocomplete: !0,
            alias_of: null,
            aliases: null,
            desc: TS.i18n.t("Start a call", "cmd_handlers")(),
            args: [{
              name: TS.i18n.t("help", "cmd_handlers")(),
              optional: !0
            }],
            can_be_overridden_by_server_cmd: !0,
            func: function(e, t) {
              var n = TS.shared.getActiveModelOb(),
                i = TS.members.getMemberById(n.user);
              if (TS.boot_data.page_needs_enterprise) {
                var r = TS.model.team;
                if (TS.shared.isModelObShared(n) || i && r && i.team_id !== r.id) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("You are not allowed to use this command here.", "cmd_handlers")(), {
                  slackbot_feels: "sad_surprise"
                });
              }
              if ("help" === t.trim()) {
                if (TS.utility.calls.isCurrentContextMultiParty() && !TS.utility.calls.isMultiPartyEnabled()) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("To call a teammate, use `/call` from your Direct Message conversation with that person.", "cmd_handlers")());
                var a;
                return a = n.is_mpim ? TS.i18n.t("To call {group_name}, use `/call` in this group conversation.", "cmd_handlers")({
                  group_name: TS.shared.getDisplayNameForModelOb(n)
                }) : n.is_im ? TS.i18n.t("To call {user}, use `/call` in this Direct Message conversation.", "cmd_handlers")({
                  user: TS.shared.getDisplayNameForModelOb(n)
                }) : TS.i18n.t("To start a call in {channel}, use `/call` here", "cmd_handlers")({
                  channel: TS.shared.getDisplayNameForModelOb(n)
                }), void TS.cmd_handlers.addEphemeralFeedback(a);
              }
              if (t.trim().match(/--server=/)) {
                var s = t.trim().replace(/--server=/g, ""),
                  o = TS.storage.fetchCallsState();
                o.call_server_override = s, TS.storage.storeCallsState(o);
              }
              if (TS.utility.calls.isCurrentContextMultiParty() && !TS.utility.calls.isMultiPartyEnabled()) return "Slack" !== TS.model.team.prefs.calling_app_name ? void TS.utility.calls.startCallInModelOb(n, !0) : void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Group calls aren’t available on the free plan. Try using `/call` in a Direct Message conversation!", "cmd_handlers")());
              if (n.is_slackbot_im) {
                var l = [TS.i18n.t("I’m on the other line. Sorry!", "cmd_handlers")(), TS.i18n.t("Thanks for calling me! I’m afraid I only accept calls from my mother, Sundays at 2pm.", "cmd_handlers")(), TS.i18n.t("I’m washing my hair right now…can’t come to the phone!", "cmd_handlers")(), TS.i18n.t("It’s awfully nice of you to try calling me. But — shh! — I’m quite afraid of the phone!", "cmd_handlers")() + " :grimacing:", TS.i18n.t("Thank you so much for calling, but I can’t talk right now, I’m watching my stories.", "cmd_handlers")()],
                  d = _.shuffle(l)[0];
                return void TS.cmd_handlers.addEphemeralFeedback(d);
              }
              if (i && (i.is_bot || i.id == TS.model.user.id)) return void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("Unfortunately, {user} is busy right now, and can’t answer your call.", "cmd_handlers")({
                user: TS.members.getPrefCompliantMemberName(i, !1, !0)
              }), {
                slackbot_feels: "sad_surprise"
              });
              TS.utility.calls.startCallInModelOb(n, !0);
            }
          }) : void _.unset(TS.cmd_handlers, "/call");
        },
        s = function() {
          TS.info("Generating diagnostic report...");
          var e, t = o(),
            n = TS.i18n.t("This will take a minute &mdash; hang tight.", "cmd_handlers")();
          TS.generic_dialog.start({
            title: TS.i18n.t("Building diagnostic report", "cmd_handlers")(),
            body: n,
            show_cancel_button: !0,
            show_go_button: !1,
            go_button_text: TS.i18n.t("Send Report to Slack", "cmd_handlers")(),
            onCancel: function() {
              t.isPending() && (TS.info("Cancelling diagnostic report"), t.cancel());
            },
            onGo: function() {
              return TS.info("Sending diagnostic report to Zendesk..."), TS.api.call("help.issues.create", {
                title: "Slack diagnostic report",
                text: "Please see attached file.",
                attach_text: e,
                tags: "slack_diagnostic_report"
              }).catch(function() {
                TS.generic_dialog.alert(TS.i18n.t('Oops! That didn’t work &mdash; please give it another try. If problems persist, please <a href="/help/requests/new">contact support</a>.', "cmd_handlers")(), "Something went wrong", "Close");
              }).finally(function() {
                TS.generic_dialog.cancel();
              }), TS.generic_dialog.div.find(".btn").addClass("disabled").attr("disabled", !0), !1;
            }
          }), t.then(function(t) {
            e = t, TS.info(t), TS.generic_dialog.div.find("h3").text(TS.i18n.t("Diagnostic report ready", "cmd_handlers")()), TS.generic_dialog.div.find(".modal-body").html(TS.i18n.t("Click the button below to send the report to Slack.", "cmd_handlers")()), TS.generic_dialog.div.find(".btn.dialog_go").removeClass("hidden"), TS.generic_dialog.div.find(".btn.dialog_cancel").text(TS.i18n.t("Close", "cmd_handlers")());
          });
        },
        o = function() {
          var e = performance.now(),
            t = {};
          t["rtm.start"] = TS.api.call("rtm.start", {}).then(function(t) {
            return {
              latency: performance.now() - e,
              size_bytes: JSON.stringify(t.data).length
            };
          }).catch(function(e) {
            return {
              error: e
            };
          });
          var n = {};
          return TS.membership && TS.membership.lazyLoadChannelMembership() && (n.exclude_members = !0), t.channels = TS.api.call("channels.list", n).then(function(e) {
            return {
              remote: _.map(e.data.channels, "id").sort(),
              local: _.map(TS.model.channels, "id").sort(),
              for_user: _.map(TS.channels.getChannelsForUser(), "id").sort()
            };
          }).catch(function(e) {
            return {
              error: e
            };
          }), t.groups = TS.api.call("groups.list", {
            mpim_aware: !0
          }).then(function(e) {
            return {
              remote: _.map(e.data.groups, "id").sort(),
              local: _.map(TS.model.groups, "id").sort()
            };
          }).catch(function(e) {
            return {
              error: e
            };
          }), t.ims = TS.api.call("im.list").then(function(e) {
            return {
              remote: _.map(e.data.ims, "id").sort(),
              local: _.map(TS.model.ims, "id").sort()
            };
          }).catch(function(e) {
            return {
              error: e
            };
          }), t.mpims = TS.api.call("mpim.list").then(function(e) {
            return {
              remote: _.map(e.data.groups, "id").sort(),
              local: _.map(TS.model.mpims, "id").sort()
            };
          }).catch(function(e) {
            return {
              error: e
            };
          }), t.members = TS.api.call("users.list").then(function(e) {
            return {
              remote: _.map(e.data.members, "id").sort(),
              local: _.map(TS.model.members, "id").sort(),
              for_user: _.map(TS.members.getMembersForUser(), "id").sort()
            };
          }).catch(function(e) {
            return {
              error: e
            };
          }), t["channel pane"] = new Promise(function(e) {
            e($("#channels_scroller li").map(function(e, t) {
              var n = $(t);
              return n.hasClass("channel") ? n.find("[data-channel-id]").attr("data-channel-id") : n.hasClass("group") ? n.find("[data-group-id]").attr("data-group-id") : n.hasClass("member") ? n.find("[data-member-id]").attr("data-member-id") : n.hasClass("mpim") ? n.find("[data-mpim-id]").attr("data-mpim-id") : null;
            }).toArray());
          }), t["version info"] = TS.api.call("test.versionInfo").then(function(e) {
            return {
              active_version_ts: TS.boot_data.version_ts,
              latest_version_ts: _.get(e.data, "version_ts"),
              min_version_ts: _.get(e.data, "min_version_ts")
            };
          }), Promise.props(t).then(function(t) {
            var n = Object.keys(t).map(function(e) {
              return [e, _.repeat("-", e.length), JSON.stringify(t[e])].join("\n");
            });
            return ["Slack Diagnostic Report", "-----------------------", "Date: " + TS.makeLogDate().trim(), "Time to generate: " + _.round((performance.now() - e) / 1e3, 2) + " seconds", "User agent: " + navigator.userAgent, "Logged-in user:" + TS.model.user.id, "", n.join("\n\n"), "", "-------------", "End of report"].join("\n");
          });
        },
        l = function(e) {
          var t = !1;
          if (TS.boot_data.page_needs_enterprise) {
            var n = TS.shared.getActiveModelOb();
            TS.shared.isModelObShared(n) && (t = !0);
          }
          return {
            cmds: e.filter(function(e) {
              return !("core" !== e.type && "client" !== e.type || t && "/call" === e.name);
            }),
            id: "core",
            name: "Slack"
          };
        },
        d = function(e) {
          return {
            cmds: e.filter(function(e) {
              return "custom" === e.type;
            }),
            id: "custom",
            name: TS.model.team.name
          };
        },
        c = function(e) {
          var t = e.filter(function(e) {
              return "app" === e.type || "service" === e.type;
            }),
            n = t.filter(function(e) {
              return !(!e.service_name && !e.app);
            }),
            i = t.filter(function(e) {
              return !(e.service_name || e.app);
            }),
            r = {};
          n.forEach(function(e) {
            var t = TS.cmd_handlers.getAppNameForCmdName(e.name);
            r[t] || (r[t] = []), r[t].push(e);
          });
          var a = TS.apps.sortNames(Object.keys(r)),
            s = a.map(function(e) {
              return {
                cmds: r[e],
                id: "app",
                name: e
              };
            });
          return s.push({
            cmds: i,
            id: "app",
            name: "Other"
          }), s;
        },
        u = function(e, t, n) {
          if (!_.isObject(e)) throw new Error("Expected user to be an object");
          if (!_.isObject(t)) throw new Error("Expected model_ob to be an object");
          if (!_.isString(n)) throw new Error("Expected input_txt to be a string");
          TS.membership.ensureChannelMembershipIsKnownForUsers(t.id, [e.id]).then(function() {
            return TS.membership.getUserChannelMembershipStatus(e.id, t).is_member ? void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("{user} is already in this channel.", "cmd_handlers")({
              user: p(e)
            }), {
              input_txt: n
            }) : t.is_mpim || !TS.boot_data.page_needs_enterprise || TS.permissions.channels.canMemberJoinChannel(t, e) ? void(t.is_mpim ? TS.ui.im_browser.startWithMpim(t, [e.id]) : t.is_private || t.is_group ? TS.ui.invite.showInviteMembersPreSelected(t.id, [e.id]) : TS.api.call("channels.invite", {
              channel: t.id,
              users: e.id
            })) : void TS.cmd_handlers.addEphemeralFeedback(TS.i18n.t("{user} is not a member of {team_name}.", "cmd_handlers")({
              user: p(e),
              team_name: TS.model.team.name
            }), {
              input_txt: n,
              slackbot_feels: "sad_surprise"
            });
          });
        },
        m = function(e, t, n) {
          if (!_.isObject(e)) throw new Error("Expected ug to be an object");
          if (!_.isObject(t)) throw new Error("Expected model_ob to be an object");
          if (!_.isString(n)) throw new Error("Expected input_txt to be a string");
          TS.membership.ensureChannelMembershipIsKnownForUsers(t.id, e.users).then(function() {
            var i = e.users.filter(function(e) {
              if (TS.boot_data.page_needs_enterprise) {
                var n = TS.members.getMemberById(e);
                if (!TS.permissions.channels.canMemberJoinChannel(t, n)) return !1;
              }
              return !TS.membership.getUserChannelMembershipStatus(e, t).is_member;
            });
            if (!i.length) {
              var r = TS.i18n.t("All of the users in that user group are already in this channel.", "cmd_handlers")();
              return void TS.cmd_handlers.addEphemeralFeedback(r, {
                input_txt: n
              });
            }
            t.is_private || t.is_group ? TS.ui.invite.showInviteMembersPreSelected(t.id, i) : i.forEach(function(e) {
              TS.api.call("channels.invite", {
                channel: t.id,
                users: e
              });
            });
          });
        },
        p = function(e) {
          if (!_.isObject(e)) throw new Error("Expected user to be an object");
          return TS.boot_data.feature_name_tagging_client ? TS.members.getPrefCompliantMemberName(e, !1, !0) : "@" + e.name;
        },
        f = function(e) {
          if (TS.boot_data.feature_name_tagging_client) return TS.members.getMemberById(e);
          if (TS.boot_data.feature_shared_channels_client) {
            var t = e.match(/^@([\w.-]+)\+([\w.-]+)$/);
            if (t && t.length > 1) return TS.members.getMemberByNameAndTeamDomain(t[1], t[2]);
          }
          return TS.members.getMemberByName(e);
        };
    }();
  },
  2423: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("compression", {
        compress: function(e, t, n, r) {
          var s = Date.now();
          if (n) {
            var o = LZString.compress(t),
              l = Date.now() - s;
            return TS.has_pri[a] && TS.log(a, e + " took " + l + "ms to _compress immediately str.length: " + t.length), r({
              k: e,
              str: o
            });
          }
          i(e, t, function(t, n) {
            var i = Date.now() - s;
            TS.has_pri[a] && TS.log(a, e + " took " + i + "ms for the compression worker to callback (" + n + "ms spent within the worker) result.length: " + t.length), r({
              k: e,
              str: t
            });
          });
        },
        deCompress: function(e, t) {
          return "";
        },
        terminate: function() {
          e && e.terminate(), e = null;
        }
      });
      var e = null,
        t = 0,
        n = {},
        i = function(i, a, s) {
          e || r(), t += 1;
          var o = "job_key" + t;
          n[o] = function(e, t) {
            s(e, t), delete n[o];
          }, e.postMessage({
            request: "compress",
            input: a,
            job_key: o,
            k: i
          });
        },
        r = function() {
          if (e) return void TS.error("_makeWorker but there is a _worker");
          var t = _.get(TS, "boot_data.vvv_paths.lz_string", "/js/libs/lz-string-1.4.4.js"),
            i = TS.environment.is_dev;
          (TS.qs_args.local_assets || i) && (t = location.protocol + "//" + location.host + t), e = TS.utility.makeWebWorker("function() {\t\t\tself.importScripts('" + t + "');\t\t\tself.onmessage = function(e) {\t\t\t\tvar start = Date.now();\t\t\t\tvar result;\t\t\t\tif (e.data.request === 'compress') {\t\t\t\t\tresult = LZString.compress(e.data.input)\t\t\t\t}\t\t\t\tvar elapsed = Date.now() - start;\t\t\t\tpostMessage({\t\t\t\t\trequest: e.data.request,\t\t\t\t\tresult: result,\t\t\t\t\tjob_key: e.data.job_key,\t\t\t\t\tk: e.data.k,\t\t\t\t\telapsed: elapsed\t\t\t\t});\t\t\t}\t\t}", function(e) {
            var t = n[e.data.job_key];
            if (!t) return void TS.error("e.data.job_key:" + e.data.job_key + " had no record in _callbacks??");
            t(e.data.result, e.data.elapsed);
          });
        },
        a = 488;
    }();
  },
  2425: function(e, t) {
    TS.registerModule("constants", {
      onStart: _.noop,
      avatar_size_map: {
        20: {
          standard: "image_24",
          retina: "image_48"
        },
        24: {
          standard: "image_24",
          retina: "image_48"
        },
        32: {
          standard: "image_32",
          retina: "image_72"
        },
        36: {
          standard: "image_48",
          retina: "image_72"
        },
        48: {
          standard: "image_48",
          retina: "image_72"
        },
        64: {
          standard: "image_64",
          retina: "image_64"
        },
        72: {
          standard: "image_72",
          retina: "image_192"
        },
        192: {
          standard: "image_192",
          retina: "image_192"
        }
      }
    });
  },
  2426: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("debug_widget", {
        onStart: function() {
          TS.client && TS.client.ui && TS.members && (e = $("#debug_widget"), e.length && (TS.client.ui.did_rebuild_all_sig.add(p), TS.client.ui.did_rebuild_all_but_msgs_sig.add(u), TS.client.msg_pane.did_rebuild_msgs_sig.add(m), TS.members.member_was_upserted_sig.add(c), e.click(function(e) {
            e.preventDefault(), e.altKey && (r = 0, a = 0, s = 0, o = 0, i = 0, h());
          }), window.localStorage && window.localStorage.show_debug_widget && TS.debug_widget.toggle()));
        },
        toggle: function() {
          TS.client && e && (e.toggleClass("hidden"), e.hasClass("hidden") ? (n = !1, window.localStorage && delete window.localStorage.show_debug_widget, e.empty()) : (n = !0, window.localStorage && (window.localStorage.show_debug_widget = 1), h()));
        },
        isVisible: function() {
          return !!n;
        },
        setFrameRate: function(e) {
          l = e;
        }
      });
      var e, t, n = !1,
        i = 0,
        r = 0,
        a = 0,
        s = 0,
        o = 0,
        l = 0,
        d = Handlebars.compile('Rt={{rebuild_all_count}} Rb={{rebuild_all_but_messages_count}} Rm={{rebuild_messages_count}}<br>Um={{upsert_member_count}} <span class="{{color_class}}"><ts-icon class="ts_icon_add_user"></ts-icon> {{time_since_readable}}</span><br>Members={{total_member_count}} <ts-icon class="ts_icon_user"></ts-icon><br>FPS={{average_frame_rate}}'),
        c = function() {
          o += 1, i = Date.now(), g();
        },
        u = function() {
          a += 1, g();
        },
        m = function() {
          s += 1, g();
        },
        p = function() {
          r += 1, g();
        },
        f = function() {
          var e = Date.now() - i,
            t = "";
          e < 2e3 ? t = "candy_red" : e < 1e4 ? t = "star_yellow" : e < 2e4 && (t = "ocean_teal");
          var n = "";
          return e < 1e3 ? n = "<1s" : e < 2e4 && (n = Math.floor(e / 1e3) + "s"), {
            has_recent_member_upsert: !!t,
            color_class: t,
            rebuild_all_count: r,
            rebuild_all_but_messages_count: a,
            rebuild_messages_count: s,
            time_since_readable: n,
            upsert_member_count: o,
            total_member_count: _.get(TS, "model.members.length", 0),
            average_frame_rate: l || "..."
          };
        },
        h = function() {
          clearTimeout(t), t = void 0;
          var n = f(),
            i = d(n);
          e.html(i), n.has_recent_member_upsert && g();
        },
        g = function() {
          e && n && (t || (t = setTimeout(h, 500)));
        };
    }();
  },
  2427: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("dnd", {
        dnd_statuses_changed_sig: new signals.Signal,
        current_user_dnd_status_changed_sig: new signals.Signal,
        onStart: function() {
          if (TS.client) {
            TS.useRedux() && delete TS.model.dnd.current_statuses, TS.isSocketManagerEnabled() ? (TS.interop.SocketManager.connectedSig.add(m), TS.interop.SocketManager.disconnectedSig.add(p)) : (TS.ms.connected_sig.add(m), TS.ms.disconnected_sig.add(p));
            var e = _.random(i, n),
              t = Math.round(e * r);
            TS.dnd.setApiDelays(e, t), TS.dnd.debouncedCheckForChanges = TS.utility.throttleFunc(TS.dnd.checkForChanges, 500, !0), d = !!TS.boot_data.feature_tinyspeck || TS.utility.enableFeatureForUser(1), TS.presence_manager.sub_list_changed.add(f);
          }
        },
        memberDndStatus: function() {
          var e, t = TS.dnd.calculateMemberDndFromTimestamp(TS.model.user),
            n = t && TS.model.dnd.snooze_enabled,
            i = x(TS.model.user);
          return i && n ? e = I(i) : i && (e = TS.interop.datetime.toTime(i, {
            do24hrTime: TS.utility.date.do24hrTime()
          }), TS.utility.date.do24hrTime() || (e = e.split(":00").join(""))), {
            in_dnd: t,
            snoozed: n,
            ends: i,
            readable_end_time: e
          };
        },
        setSnooze: function(e) {
          return TS.api.call("dnd.setSnooze", {
            num_minutes: e
          }, function(t, n) {
            if (!t) return void TS.warn("dnd.setSnooze failed");
            TS.has_pri[B] && O("dnd.setSnooze to " + e + " minutes. New end time is " + F(n.snooze_endtime));
          });
        },
        endSnooze: function() {
          return TS.api.call("dnd.endSnooze", {}, function(e) {
            if (!e) return void TS.warn("dnd.endSnooze failed");
            TS.has_pri[B] && O("dnd.endSnooze succeeded");
          });
        },
        endDnd: function() {
          return TS.api.call("dnd.endDnd", {}, function(e) {
            if (!e) return void TS.warn("dnd.endDnd failed");
            TS.has_pri[B] && O("dnd.endDnd succeeded");
          });
        },
        calculateMemberDndFromTimestamp: function(e, t) {
          t || (t = C());
          var n = k(e),
            i = x(e);
          return !!(e.is_self && TS.model.dnd.snooze_enabled && i && i > t) || null != n && null != i && (i > t && (n <= t || n > i));
        },
        isMemberInDnd: function(e) {
          return TS.useRedux() ? !!TS.redux.dnd.isMemberInDndById(e.id) : !!TS.model.dnd.current_statuses[e.id];
        },
        checkForChanges: function() {
          if (TS.model.ms_connected) {
            d && TS.metrics.mark("dnd_check_for_changes");
            var e = !1,
              t = C();
            TS.model.dnd.snooze_enabled && t >= TS.model.dnd.snooze_endtime && (TS.model.dnd.snooze_enabled = !1, e = !0), _.size(TS.model.dnd.team) > a && (TS.has_pri[B] && O("checkForChanges over limit, purging non-relevant dnd data"), g());
            var n = [],
              i = [],
              r = function(r) {
                if (r && !r.deleted) {
                  var a = TS.dnd.isMemberInDnd(r) || !1,
                    s = TS.dnd.calculateMemberDndFromTimestamp(r, t);
                  a != s && (c(r.id, s), r.is_self && (e = !0), i.push(r)), A(r, t) && n.push(r);
                }
              };
            _.forOwn(TS.model.dnd.team, function(e, t) {
              var n = TS.members.getMemberById(t);
              r(n);
            }), e && !_.includes(i, TS.model.user) && i.push(TS.model.user), i.length > 0 && TS.has_pri[B] && O("Processing DND status changes for " + i.length + " members"), u(i), e && (TS.dnd.current_user_dnd_status_changed_sig.dispatch(), TSSSB.call("dndStatusChanged", TS.dnd.isMemberInDnd(TS.model.user)), TS.has_pri[B] && O("Current user DND status changed"));
            var s = 0;
            return n = _.filter(n, function(e) {
              var t = TS.presence_manager.isSubscribedToMember(e.id);
              return t || (delete TS.model.dnd.team[e.id], s += 1), t;
            }), s && TS.has_pri[B] && O("checkForChanges discarded " + s + " stale members"), TS.dnd.kickOffNextEventTimer(), d && TS.metrics.measureAndClear("dnd_check_for_changes_lazy", "dnd_check_for_changes"), n;
          }
        },
        debouncedCheckForChanges: function() {},
        kickOffNextEventTimer: function() {
          clearTimeout(e);
          var n = C(),
            i = S(n);
          TS.has_pri[B] && O("next DND tick scheduled for " + F(i));
          var r = 1e3 * (i - n);
          t = i, e = setTimeout(function() {
            var e = TS.dnd.checkForChanges();
            e.length > 1 ? (TS.dnd.fetchMultipleMembers(e), TS.has_pri[B] && O("DND refreshing " + e + " members")) : 1 === e.length && (TS.dnd.refreshMember(e[0]), TS.has_pri[B] && O("DND refreshing one member"));
          }, r);
        },
        fetchMultipleMembers: function(e) {
          var t = v(e);
          if (t) return t.finally(TS.dnd.checkForChanges);
        },
        refreshMember: function(e) {
          var t = w(e);
          if (t) return t.finally(TS.dnd.checkForChanges);
        },
        updateUserPropsAndSignal: function(e, t) {
          if (!TS.model.dnd.team[e]) return void(TS.has_pri[B] && O("Ignoring new DND props for " + e));
          T(e, t), e === TS.model.user.id ? TS.dnd.checkForChanges() : TS.dnd.debouncedCheckForChanges();
        },
        dndOverride: function(e, t) {
          var n = TS.shared.getModelObById(e);
          if (n) {
            var i = TS.utility.msgs.getMsg(t, n.msgs);
            i && (i._ignore_dnd || (i._ignore_dnd = !0, n.is_im ? TS.ui.growls.growlImMessage(n, i) : TS.ui.growls.growlChannelOrGroupMessage(n, i)));
          }
        },
        debugInfo: function() {
          var e = ["DND debug info:"];
          e.push("next timer fires at " + F(t)), e.push("_team_info_delay: " + s), e.push("_single_user_info_delay: " + o), e.push("_calcNextCheckTime: " + F(S()));
          var n = "\n" + e.join("\n");
          TS.info(n);
        },
        debugMember: function(e) {
          var t = ["DND member debugging:"];
          t.push("is in DND: " + !!TS.dnd.isMemberInDnd(e) + " (" + TS.dnd.calculateMemberDndFromTimestamp(e) + ")"), t.push("start: " + F(k(e), !0)), t.push("end  : " + F(x(e), !0)), t.push("next : " + F(M(e), !0)), t.push("stale? " + A(e));
          var n = x(e);
          n && E(n) ? t.push("Probably a snooze") : n && t.push("Probably a scheduled DND");
          var i = "\n" + t.join("\n");
          TS.info(i);
        },
        setApiDelays: function(e, t) {
          s = e, o = t;
        },
        test: function() {
          return {
            fetchUsersInfo: v,
            calcNextCheckTime: S,
            snoozeReadableCountdown: I,
            updateUserDndProps: T,
            timeWasProbablyASnooze: E,
            memberHasStaleTimes: A,
            ensureDndTimesForMemberIds: h,
            purgeNonRelevantData: g,
            requested_member_ids: l
          };
        }
      });
      var e, t, n = 1500,
        i = 10,
        r = .01,
        a = 1500,
        s = n,
        o = i,
        l = {},
        d = !1,
        c = function(e, t) {
          TS.useRedux() ? TS.redux.dnd.updateDndForMember(e, t) : TS.model.dnd.current_statuses && (TS.model.dnd.current_statuses[e] = t);
        },
        u = function(e) {
          e = _.filter(e, function(e) {
            return !!e.is_self || TS.presence_manager.isSubscribedToMember(e.id);
          }), e.length && TS.dnd.dnd_statuses_changed_sig.dispatch(e);
        },
        m = function(e) {
          if (!e) {
            g();
            var t = TS.presence_manager.getSubList();
            _.includes(t, TS.model.user.id) || t.push(TS.model.user.id);
            h(t, !0);
          }
          TS.dnd.checkForChanges();
        },
        p = function() {
          clearTimeout(e);
        },
        f = function() {
          h(TS.presence_manager.getSubList());
        },
        h = function(e, t) {
          if (!e || !e.length) return Promise.resolve();
          var n = _.map(e, TS.members.getMemberById);
          if (n = _.filter(n, function(e) {
              return e && !e.is_bot && !e.deleted && e._is_local;
            }), t || (n = _.filter(n, function(e) {
              return !l[e.id] && !TS.model.dnd.team[e.id];
            })), !n.length) return Promise.resolve();
          e = _.map(n, "id");
          var i = _.groupBy(e);
          return _.forEach(e, function(e) {
            l[e] = !0;
          }), TS.has_pri[B] && O("_ensureDndTimesForMemberIds requesting " + e.length), d && TS.metrics.count("dnd_lookup_lazy", e.length), TS.api.call("dnd.teamInfo", {
            users: e.join(",")
          }).then(function(t) {
            var n = t.data,
              r = [];
            if (n.users && _.forOwn(n.users, function(e, t) {
                r.push(t), i[t] && T(t, e);
              }), TS.boot_data.feature_tinyspeck) {
              var a = [];
              if (_.forEach(e, function(e) {
                  TS.model.dnd.team[e] || (TS.has_pri[B] && O("dnd lookup failed for " + e), a.push(e));
                }), a.length) {
                TS.metrics.count("dnd_lookup_failed", a.length);
                var s = {
                  requested: e,
                  received: r,
                  missing: a
                };
                TS.console.logError(s, "dnd_lookup_failed_members", null, !0);
              }
            }
            TS.dnd.checkForChanges();
          }).catch(function(e) {
            TS.boot_data.feature_tinyspeck && TS.console.logError(e, "dnd_lookup_request_failed");
          }).finally(function() {
            _.forEach(e, function(e) {
              delete l[e];
            });
          });
        },
        g = function() {
          var e = _.groupBy(TS.presence_manager.getSubList()),
            t = [];
          _.forOwn(TS.model.dnd.team, function(n, i) {
            e[i] || i !== TS.model.user.id && (t.push(i), c(i, !1));
          });
          var n = _.map(t, TS.members.getMemberById);
          n = _.compact(n), u(n), _.forEach(t, function(e) {
            delete TS.model.dnd.team[e];
          }), TS.has_pri[B] && O("_purgeNonRelevantData dropped " + t.length);
        },
        S = function(e) {
          var t;
          e || (e = C());
          var n = M(TS.model.user, e);
          n && (t = n);
          var i = function(n) {
            if (n.id != TS.model.user.id) {
              var i = M(n, e);
              i && (!t || i < t) && (t = i);
            }
          };
          _.forOwn(TS.model.dnd.team, function(e, t) {
            var n = TS.members.getMemberById(t);
            n && i(n);
          });
          var r = 300 + e;
          (!t || t > r) && (t = r);
          var a = 15 + e;
          return t < a && (t = a), t;
        },
        T = function(e, t, n) {
          n || (n = TS.model.dnd.team), e === TS.model.user.id && (t.dnd_enabled ? (TS.model.dnd.next_dnd_start_ts = t.next_dnd_start_ts, TS.model.dnd.next_dnd_end_ts = t.next_dnd_end_ts) : (TS.model.dnd.next_dnd_start_ts = null, TS.model.dnd.next_dnd_end_ts = null), "snooze_enabled" in t && (TS.model.dnd.snooze_enabled = t.snooze_enabled), "snooze_endtime" in t && (TS.model.dnd.snooze_endtime = t.snooze_endtime)), t.dnd_enabled ? n[e] = {
            next_dnd_start_ts: t.next_dnd_start_ts,
            next_dnd_end_ts: t.next_dnd_end_ts
          } : n[e] = {
            next_dnd_start_ts: null,
            next_dnd_end_ts: null
          };
        },
        b = !1,
        v = function(e) {
          if (!b) {
            b = !0, d && TS.metrics.count("dnd_lookup_lazy", e.length);
            var t = _.map(e, "id").join(",");
            return TS.api.call("dnd.teamInfo", {
              users: t
            }, function(e, t) {
              if (b = !1, !e) return void TS.warn("dnd.teamInfo failed for a multi-user request");
              t.users && _.forOwn(t.users, function(e, t) {
                T(t, e);
              });
            }, !0);
          }
        },
        y = [],
        w = function(e) {
          if (-1 === y.indexOf(e.id) && (y.push(e.id), !(y.length > 1))) return new Promise(function(e, t) {
            setTimeout(function() {
              var n = y;
              y = [];
              var i = "dnd.info",
                r = {
                  user: n[0]
                };
              n.length > 1 && (i = "dnd.teamInfo", r = n.length > 100 ? {} : {
                users: n.join(",")
              }), d && TS.metrics.count("dnd_lookup_lazy", n.length), TS.api.call(i, r, function(i, r) {
                if (!i) return void(n.length > 1 ? TS.warn("dnd.teamInfo failed for a multi-user request (bundled single-user fetches)") : (TS.warn("dnd.info failed for " + n[0]), t(new Error("dnd.info failed for " + n[0]))));
                r.users ? _.forOwn(r.users, function(e, t) {
                  T(t, e);
                }) : T(n[0], r), e();
              }, !0);
            }, 1e3 * o);
          });
        },
        k = function(e) {
          if (e.is_self) return TS.model.dnd.next_dnd_start_ts;
          var t = TS.model.dnd.team[e.id];
          return t ? t.next_dnd_start_ts : null;
        },
        x = function(e) {
          if (e.is_self) return TS.model.dnd.snooze_enabled ? TS.model.dnd.snooze_endtime : TS.model.dnd.next_dnd_end_ts;
          var t = TS.model.dnd.team[e.id];
          return t ? t.next_dnd_end_ts : null;
        },
        M = function(e, t) {
          t || (t = C());
          var n = k(e),
            i = x(e);
          if (n && i && n > t && n < i) return n;
          if (i) {
            if (i > t) return i;
            var r = i + s;
            if (r >= t) return r;
          }
          return null;
        },
        C = function() {
          return Math.floor(Date.now() / 1e3);
        },
        I = function(e) {
          var t = e - C();
          if (t < 0) return TS.i18n.t("0s", "dnd")();
          var n, i;
          return (n = t / 3600) >= 1 ? (n = Math.floor(n), i = (t - 3600 * n) / 60, i = Math.round(i), 60 === i ? (n += 1, TS.i18n.t("{dnd_hours}h", "dnd")({
            dnd_hours: n
          })) : 0 === i ? TS.i18n.t("{dnd_hours}h", "dnd")({
            dnd_hours: n
          }) : TS.i18n.t("{dnd_hours}h {dnd_minutes}m", "dnd")({
            dnd_hours: n,
            dnd_minutes: i
          })) : (i = t / 60, i >= 1 ? (i = Math.round(i), 60 === i ? TS.i18n.t("1h", "dnd")() : TS.i18n.t("{dnd_minutes}m", "dnd")({
            dnd_minutes: i
          })) : TS.i18n.t("{dnd_remaining}s", "dnd")({
            dnd_remaining: t
          }));
        },
        A = function(e, t) {
          t || (t = C());
          var n = x(e);
          if (!n || n > t) return !1;
          var i = t - n;
          return !!E(n) || i >= s;
        },
        E = function(e) {
          var t = new Date(1e3 * e),
            n = t.getSeconds(),
            i = t.getMinutes();
          return !(0 === n && (0 === i || 30 === i));
        },
        O = function(e) {
          TS.log(B, e);
        },
        F = function(e, t) {
          if (!e) return "<null>";
          var n = new Date(1e3 * e);
          return t ? n.toTimeString() + " (" + n.toDateString() + ")" : n.toTimeString();
        },
        B = 2002;
    }();
  },
  2429: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ds", {
        last_pong_time: 0,
        sent_map: {},
        connected_sig: new signals.Signal,
        disconnected_sig: new signals.Signal,
        trouble_sig: new signals.Signal,
        reconnecting_sig: new signals.Signal,
        pong_sig: new signals.Signal,
        on_msg_sig: new signals.Signal,
        reconnect_requested_sig: new signals.Signal,
        onStart: function() {
          g(TS.model.ui.is_window_focused || !1), TS.ui.window_focus_changed_sig.add(g), setInterval(function() {
            TS.model.ds_connected && (TS.model.rtd_start_throttler < 1 || (TS.model.rtd_start_throttler -= 1));
          }, 6e4);
        },
        send: function(e, t, n) {
          return m += 1, e.id = m, TS.ds.sent_map[e.id.toString()] = {
            msg: e,
            handler: t,
            ts: Date.now(),
            temp_ts: n
          }, "ping" === e.type || "pong" === e.type ? TS.has_pri[O] && TS.log(O, "DS TS.ds ping --\x3e\n" + JSON.stringify(e, null, "  ")) : (TS.model.last_net_send = Date.now(), TS.has_pri[O] && TS.log(O, "TS.ds --\x3e\n" + JSON.stringify(e, null, "  "))), u && TS.model.ds_connected ? u.send(JSON.stringify(e)) : TS.ds.Q.push(e), e.id;
        },
        Q: [],
        sendTyping: function(e) {
          var t = '{"type":"typing", "channel":"' + e + '"}';
          u.send(t);
        },
        handleMsg: function(e) {
          var t, n = e.reply_to && !("ok" in e) && "message" === e.type;
          if (e.reply_to && (e.reply_to.toString() in TS.ds.sent_map ? (t = TS.ds.sent_map[e.reply_to], e.SENT_MSG = t.msg, delete TS.ds.sent_map[e.reply_to]) : n || TS.error('received msg "' + e.reply_to + '" with type "' + e.type + '" but we have no record of it in sent_map')), "ping" === e.type || "pong" === e.type) TS.has_pri[O] && (TS.log(O, "DS msg " + e.type + " time: " + (Date.now() - t.ts) + "ms"), TS.log(O, "DS TS.ds ping <--\n" + JSON.stringify(e, null, "  "))), TS.ds.last_pong_time = Date.now(), TS.ds.pong_sig.dispatch(), p = !1;
          else {
            if (t) {
              var i = e.type || e.SENT_MSG.type || "";
              TS.has_pri[O] && TS.log(O, "msg " + (i ? '"' + i + '" ' : "") + "rsp time " + (Date.now() - t.ts) + "ms");
            }
            TS.has_pri[O] && TS.log(O, "TS.ds <-- \n" + JSON.stringify(e, null, " "));
          }
          "error" === e.type ? A(e) : e.reply_to || (TS.ds.on_msg_sig.dispatch(e), "hello" === e.type && E(e)), t && (e.ok || (e.error = e.error || {
            code: 0,
            msg: "unknown error (not specified by MS)"
          }), n && (e.ok = !0), t.handler && t.handler(e.ok, e));
        },
        onFailure: function(n) {
          if (n && w("You got disconnected, so here are some details:\n>>>" + n), p = !1, k(), TS.model.ds_connected) TS.info("Disconnected from DS, TS.model.rtd_start_throttler:" + TS.model.rtd_start_throttler), TS.ds.logConnectionFlow("on_connected_failure"), TS.model.ds_reconnect_ms = 100, TS.ds.disconnect();
          else {
            TS.ds.logConnectionFlow("on_notconnected_failure"), TS.model.ds_reconnect_ms = 1.3 * (TS.model.ds_reconnect_ms + 1e3);
            var i = TS.model.ds_reconnect_ms;
            TS.model.ds_reconnect_ms > 4e3 && (TS.model.ds_reconnect_ms = _.random(i, i + i / 3)), TS.model.ds_reconnect_ms = Math.min(TS.model.ds_reconnect_ms, 3e5);
          }
          if (TS.model.rtd_start_throttler > 5) {
            var r = 2e3 * TS.model.rtd_start_throttler;
            TS.model.ds_reconnect_ms < r && (TS.info("because TS.model.rtd_start_throttler:" + TS.model.rtd_start_throttler + " we are increasing time until next login call"), TS.model.ds_reconnect_ms = r);
          }
          if (TS.model.ds_connected && (TS.model.ds_connected = !1, TS.ds.disconnected_sig.dispatch()), TS.model.ds_connected = !1, clearInterval(t), clearInterval(e), TS.model.ds_asleep) return void TS.warn("NOT doing startReconnection(), we are asleep");
          TS.ds.startReconnection();
        },
        startReconnection: function() {
          TS.model.ds_reconnect_time = Date.now() + TS.model.ds_reconnect_ms, TS.info("Attempting to reconnect in " + TS.model.ds_reconnect_ms + "ms"), clearInterval(l), l = setInterval(x, d), x(), clearTimeout(c), c = setTimeout(function() {
            TS.model.window_unloading || TS.ds.reconnect_requested_sig.dispatch();
          }, TS.model.ds_reconnect_ms);
        },
        manualReconnectNow: function() {
          TS.ds.logConnectionFlow("manual_reconnect"), clearTimeout(c), clearInterval(l), clearTimeout(n), h = 0, TS.model.window_unloading || (TS.ds.reconnect_requested_sig.dispatch(), TS.ds.reconnecting_sig.dispatch(0));
        },
        disconnect: function() {
          u && TS.model.ds_connected ? (TS.ds.logConnectionFlow("disconnect"), u.close()) : TS.warn("TS.ds.disconnect called, but _websocket=" + u + " TS.model.ds_connected=" + TS.model.ds_connected);
        },
        logConnectionFlow: function(e) {
          var t = TS.model.ds_conn_log,
            n = Date.now();
          t.push({
            name: e,
            time: n,
            delta: t.length ? n - t[t.length - 1].time : 0
          }), TS.has_pri[O] && TS.log(O, "logConnectionFlow " + e + " " + t[t.length - 1].delta);
        },
        getConnectionFlowLog: function() {
          for (var e = TS.model.ds_conn_log, t = [], n = 0; n < e.length; n += 1) t.push(encodeURIComponent(e[n].name + "-" + (e[n].delta ? Math.round(e[n].delta / 1e3) : 0) + "-" + Math.round(e[n].time / 1e3)));
          return TS.dir(2, TS.model.ds_conn_log), "_x_connection_log=" + t.join(",");
        },
        connect: function() {
          if (window.WebSocket || (window.WebSocket = window.MozWebSocket), window.WebSocket) {
            var e;
            try {
              TS.ds.logConnectionFlow("connect"), e = TS.web.space.login_data.ws;
              var t = 1 == TS.qs_args.simulate_old_token ? "&TRIGGER_OLD_TOKEN=1" : "";
              e += "?version_uid=" + TS.boot_data.version_uid + t, e = TS.utility.appendLogToUrlWithLimit(e, TS.ds.getConnectionFlowLog()), TS.info("Connecting to: " + e), 1 != TS.qs_args.simulate_first_connect_failure || window.already_simulated_first_connect_failure || (e = e.replace("e", "w"), TS.info("simulate_first_connect_failure url:" + e), window.already_simulated_first_connect_failure = !0), i = window.WEB_SOCKET_USING_FLASH ? a : r, clearTimeout(n), n = setTimeout(C, i), TS.ds.last_url = e, TS.ds.last_start_ms = Date.now(), k(), u = new WebSocket(e);
            } catch (e) {
              return TS.warn("failed to create new WebSocket"), TS.error(e), void TS.ds.onFailure("failed to create new WebSocket");
            }
            TS.model.ds_connecting = !0, 1 == TS.qs_args.simulate_first_connect_timeout && h < 1 ? TS.info("simulate_first_connect_timeout url:" + e) : u.onopen = T, u.onclose = y, u.onerror = I;
          } else alert(TS.i18n.t("Your browser does not support Web Sockets.", "ds")());
        },
        sleep: function() {
          TS.model.ds_asleep || TS.model.ds_connected && (TS.model.ds_asleep = !0, TS.ds.disconnect());
        },
        wake: function() {
          TS.model.ds_asleep && (TS.model.ds_asleep = !1, TS.ds.startReconnection());
        }
      });
      var e = 0,
        t = 0,
        n = 0,
        i = 0,
        r = 1e4,
        a = 2e4,
        s = 0,
        o = 0,
        l = 0,
        d = 1e3,
        c = 0,
        u = null,
        m = 0,
        p = !1,
        f = 0,
        h = 0,
        g = function(e) {
          f = e ? 1e4 : 6e4, f += 1e4, TS.has_pri[O] && TS.log(O, "DS _pong_timeout_ms set to:" + f + " has_focus:" + e);
        },
        S = function(e) {
          var t = JSON.parse(e.data);
          TS.ds.handleMsg(t);
        },
        T = function() {
          clearTimeout(n), h = 0, 1 != TS.qs_args.simulate_hello_timeout || window.already_simulated_hello_timeout ? u.onmessage = S : (TS.info("simulate_hello_timeout"), window.already_simulated_hello_timeout = !0), TS.model.ds_conn_log.length = 0, TS.info("DS WS connected!"), TS.ds.logConnectionFlow("on_connect"), clearTimeout(s), s = setTimeout(M, 3e4);
        },
        b = function() {
          if (p) {
            var e = Date.now() - TS.ds.last_pong_time;
            if (TS.has_pri[O] && TS.log(O, "DS MS since_last_pong_ms:" + e + " pong_timeout_ms:" + f), !(e < f)) {
              TS.warn("since_last_pong_ms too long! " + e + " > " + f), TS.warn("calling disconnect(), expect to get an onDisconnect() callback"), TS.ds.logConnectionFlow("on_ping_timeout"), TS.ds.trouble_sig.dispatch(), p = !1, w("You are on team Tiny Speck, so here are some pong details:\n>>>since_last_pong_ms too long! " + e + " > " + f + " ... calling disconnect(), expect to get an onDisconnect() callback");
              try {
                TS.ds.disconnect(), clearTimeout(o), o = setTimeout(function() {
                  TS.info("called disconnect, no onDisconnect callback happened in 5000ms, so calling _onDisconnect() manually now"), y(null, "since_last_pong_ms too long! then called disconnect, but no onDisconnect callback happened in 5000ms, so calling _onDisconnect() manually now");
                }, 5e3);
              } catch (e) {
                TS.info("since_last_pong_ms too long! then an error calling disconnect, going to assume it is because it is already closed, calling _onDisconnect() manually now"), TS.warn(e), y(null, "error calling disconnect, going to assume it is because it is already closed, calling _onDisconnect() manually now");
              }
            }
          }
        },
        v = function() {
          TS.ds.send({
            type: "ping"
          }), p = !0;
        },
        y = function(e, t) {
          t = t || "_onDisconnect called with event:" + e, TS.info("DS WS disconnected"), TS.ds.logConnectionFlow("on_disconnect"), clearTimeout(o), clearTimeout(s), clearTimeout(n), e ? TS.info("_onDisconnect event.code:" + e.code) : TS.info("no event"), TS.ds.onFailure(t);
        },
        w = function(e) {
          TS.warn("_reportDisconnect reason_str:" + e);
        },
        k = function() {
          if (u) {
            u.onmessage = null, u.onopen = null, u.onerror = null, u.onclose = null;
            try {
              u.close();
            } catch (e) {}
          }
        },
        x = function() {
          var e = TS.model.ds_reconnect_time - Date.now(),
            t = Math.round(e / 1e3);
          t >= 0 && TS.ds.reconnecting_sig.dispatch(t), TS.model.window_unloading && clearInterval(l);
        },
        M = function() {
          var e = "socket received no hello msg 30000ms after connection";
          TS.warn(e), TS.ds.logConnectionFlow("_onHelloTimeout"), TS.ds.onFailure(e);
        },
        C = function() {
          h += 1;
          var e = "socket not connected " + i + "ms after creation. _connect_timeout_count:" + h;
          if (TS.warn(e), TS.ds.logConnectionFlow("_onConnectTimeout"), 3 == h) return void TS.client.showConnectionTroubleDialog();
          if (2 == h)
            if (window.WEB_SOCKET_USING_FLASH);
            else if (TS.model.is_chrome_desktop) return void(r = 2e4);
          TS.ds.onFailure(e);
        },
        I = function(e) {
          var t = "";
          e && (e.name && (t += " e.name=" + e.name), e.message && (t += " e.message=" + e.message), e.data && (t += " e.data=" + e.data)), TS.warn("_onError err_str: " + t), TS.dir(0, e);
        },
        A = function(e) {
          e.error ? 1 == e.error.code ? TS.ds.logConnectionFlow("msg_error_code_1") : (TS.info("_onErrorMsg websocket is connected but we got an error message: " + JSON.stringify(e)), TS.ds.onFailure("_onErrorMsg imsg.error:" + e.error)) : TS.info("_onErrorMsg: " + (e ? JSON.stringify(e) : "no imsg?"));
        },
        E = function() {
          clearTimeout(s);
          var n = Date.now() - TS.ds.last_pong_time;
          TS.info("Hello msg recvd, since_last_pong_ms:" + n), TS.ds.logConnectionFlow("on_hello"), clearInterval(l), p = !0, TS.ds.last_pong_time = Date.now(), clearInterval(e), e = setInterval(b, 3e3), clearInterval(t), t = setInterval(v, 1e4), TS.model.ds_connecting = !1, TS.model.ds_connected = !0;
          for (var i, r = 0; r < TS.ds.Q.length; r += 1) i = TS.ds.Q.shift(), TS.has_pri[O] && TS.log(O, "TS.ds (Q) --\x3e\n" + JSON.stringify(i, null, "  ")), u.send(JSON.stringify(i));
          TS.ds.connected_sig.dispatch(), v();
        },
        O = 2;
    }();
  },
  2446: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("enterprise.workspaces", {
        showList: function(e, n, i, r) {
          var a = TS.enterprise.workspaces.getList(n, r),
            s = $(".more_teams_available"),
            o = "";
          if (a.length) {
            a.forEach(function(e) {
              o += TS.enterprise.workspaces.getTeamCardHTML(e, i, !0);
            });
            var l = TS.enterprise.workspaces.getList("teams_not_on", r);
            "teams_on" === n && l.length ? s.attr("data-has-more", "yes").removeClass("hidden") : s.attr("data-has-more", "").addClass("hidden");
          } else o += "teams_on" === n ? TS.templates.not_on_any_workspaces() : TS.templates.no_workspaces_to_join(), s.attr("data-has-more", "").addClass("hidden");
          return e.html(o).attr("data-list", n), t(e, n, i), Promise.resolve(!!a.length);
        },
        getList: function(e, t, n) {
          t || (t = "teams_not_on" === e ? "members" : "join"), n || (n = ""), n = n.toLowerCase();
          var i = {
            teams_on: [],
            teams_not_on: []
          };
          return TS.model.enterprise_teams.forEach(function(e) {
            TS.model.user.enterprise_user.teams.indexOf(e.id) > -1 ? i.teams_on.push(e) : (e.is_open || e.is_closed || e.is_assigned) && i.teams_not_on.push(e);
          }), i[e].filter(function(e) {
            return e.name.toLowerCase().indexOf(n) > -1 || e.description && e.description.toLowerCase().indexOf(n) > -1;
          }).sort(function(e, n) {
            if ("name" === t) {
              var i = e.name.toLowerCase(),
                r = n.name.toLowerCase();
              return i < r ? -1 : i > r ? 1 : 0;
            }
            return "creation" === t ? n.created - e.created : "join" === t ? n.joined_date - e.joined_date : "members" === t ? parseInt(n.user_counts.active_members, 10) - parseInt(e.user_counts.active_members, 10) : 0;
          });
        },
        joinTeam: function(e) {
          var t = TS.enterprise.getTeamById(e);
          if (!t) return TS.generic_dialog.alert(TS.i18n.t("Invalid workspace", "enterprise_dashboard")(), TS.i18n.t("Oops! Something went wrong.", "enterprise_dashboard")());
          if (!t.is_open && !t.is_assigned) return TS.generic_dialog.alert(TS.i18n.t("This workspace is not available to join.", "enterprise_dashboard")(), TS.i18n.t("Oops! Something went wrong.", "enterprise_dashboard")());
          var i = {
            team: t.id
          };
          return "client" === TS.boot_data.app && (i.enterprise_token = TS.model.enterprise_api_token), TS.api.call("enterprise.teams.join", i, function(e, t, i) {
            var r = TS.enterprise.getTeamById(i.team),
              a = new Handlebars.SafeString(emoji.replace_colons(":sparkles:") + TS.i18n.t(" You‘ve successfully joined <strong>{team_name}</strong>", "enterprise_dashboard")({
                team_name: _.escape(r.name)
              }));
            return e ? (r = _.merge({}, TS.enterprise.getTeamById(i.team)), r.joined_date = t.joined_date, TS.enterprise.upsertEnterpriseTeam(r), n("success", a), !0) : "user_already_team_member" === t.error ? (n("success", a), !0) : "team_is_not_open" === t.error ? (n("error", TS.i18n.t("This team is not open to join.", "enterprise_dashboard")()), !1) : (n("error", TS.i18n.t('Joining team failed with error "{error}"', "enterprise_dashboard")({
              error: t.error
            })), !1);
          });
        },
        requestToJoinTeam: function(e) {
          var t = {
            team: e
          };
          return "client" === TS.boot_data.app && (t.enterprise_token = TS.model.enterprise_api_token), TS.api.call("enterprise.teams.joinrequests.create", t, function(e, t, n) {
            var i = TS.enterprise.getTeamById(n.team),
              r = _.merge({}, i, {
                has_join_request: !0
              });
            return TS.enterprise.upsertEnterpriseTeam(r), e;
          });
        },
        createLogoutURL: function(e, t) {
          var n = document.createElement("a");
          n.href = t;
          var i = n.protocol + "//" + n.host + "/signout/" + e + n.search + n.hash;
          return n = null, i;
        },
        createURL: function(e, t) {
          var n = document.createElement("a");
          n.href = t;
          var i = n.protocol + "//" + e.domain + "." + n.host + "/";
          return n = null, i;
        },
        getTeamCardHTML: function(e, t, n) {
          var i = TS.enterprise.workspaces.createURL(e, t);
          e.launch_url = i + "messages", e.site_url = i + "home", e.signout_url = TS.enterprise.workspaces.createLogoutURL(e.id, t);
          var r = "enterprise_teams_launch_card";
          return n && (r = "enterprise_teams_launch_card_wrapper"), TS.templates[r]({
            team: e,
            user: TS.model.user
          });
        },
        recordPageView: function(t, n, i) {
          i || (i = "");
          var r = {
              tracking_code: i,
              target_team_id: 0
            },
            a = {
              action: "impression"
            };
          switch (a.action_status = n ? 1 : 2, t) {
            case "teams_on":
              r.anchor_page = "your_workspaces", r.entity_key = "your_workspaces_list";
              break;
            case "teams_not_on":
              r.anchor_page = "find_workspaces", r.entity_key = "workspaces_you_can_join_list";
          }
          TS.clog.track(e, _.assign({}, r, {
            contexts: {
              ui_context: a
            }
          }));
        },
        recordTeamView: function(t, n, i) {
          i || (i = "");
          var r = {
              entity_key: "workspace_detail",
              target_team_id: t,
              tracking_code: i
            },
            a = {
              action: "impression",
              action_status: 1
            };
          TS.clog.track(e, _.assign({}, r, {
            contexts: {
              ui_context: a
            }
          }));
        },
        recordTeamJoin: function(t, n, i) {
          i || (i = "");
          var r = {
              anchor_page: n,
              entity_key: "join_workspace",
              target_team_id: t,
              tracking_code: i
            },
            a = {
              action: "click",
              action_status: 1
            };
          TS.clog.track(e, _.assign({}, r, {
            contexts: {
              ui_context: a
            }
          }));
        },
        recordTeamLeave: function(t, n, i) {
          i || (i = "");
          var r = {
              anchor_page: n,
              entity_key: "leave_workspace",
              target_team_id: t,
              tracking_code: i
            },
            a = {
              action: "click",
              action_status: 1
            };
          TS.clog.track(e, _.assign({}, r, {
            contexts: {
              ui_context: a
            }
          }));
        },
        recordTeamLeaveConfirm: function(t, n, i) {
          i || (i = "");
          var r = {
              anchor_page: n,
              entity_key: "leave_workspace_confirm",
              target_team_id: t,
              tracking_code: i
            },
            a = {
              action: "click",
              action_status: 1
            };
          TS.clog.track(e, _.assign({}, r, {
            contexts: {
              ui_context: a
            }
          }));
        },
        recordTeamRequestToJoin: function(t, n, i) {
          i || (i = "");
          var r = {
              anchor_page: n,
              entity_key: "request_to_join_workspace",
              target_team_id: t,
              tracking_code: i
            },
            a = {
              action: "click",
              action_status: 1
            };
          TS.clog.track(e, _.assign({}, r, {
            contexts: {
              ui_context: a
            }
          }));
        },
        showRequestDialog: function() {
          function e() {
            var e = $(t),
              i = e.find(n);
            return TS.ui.validation.validate($(r)) ? (i.removeAttr("disabled"), !0) : (i.attr("disabled", !0), !1);
          }
          var t = "#generic_dialog",
            n = ".dialog_go",
            i = "enterprise.teams.creationrequests.create",
            r = "#ws_request_form";
          TS.generic_dialog.start({
            title: TS.i18n.t("Request a New Team", "enterprise_workspaces")(),
            body: TS.templates.ws_request_dialog(),
            show_cancel_button: !0,
            show_go_button: !0,
            go_button_text: TS.i18n.t("Send Request", "enterprise_workspaces")(),
            onGo: function() {
              var e = $(t),
                r = $("#input_ws_team_name"),
                a = r.val(),
                s = $("#textarea_ws_team_message"),
                o = s.val(),
                l = e.find(n);
              l.addClass("ladda-button"), l.attr("data-style", "expand-right");
              var d = Ladda.create(l[0]);
              d.start();
              var c = {
                name: a,
                reason: o
              };
              return "client" === TS.boot_data.app && (c.enterprise_token = TS.model.enterprise_api_token), TS.api.callImmediately(i, c).then(function() {
                TS.ui.toast.show({
                  type: "success",
                  message: TS.i18n.t("Request to create <b>{team_name}</b> sent! You‘ll be notified once it‘s reviewed.", "enterprise_workspaces")({
                    team_name: _.escape(a)
                  })
                }), TS.generic_dialog.end(), TS.generic_dialog.cancel();
              }).catch(function(e) {
                if (!e || !e.data) return void TS.error("WTF: error, but no response or data on " + i + "?", e);
                var t = e.data,
                  n = {
                    name_taken: TS.i18n.t("Request failed: The team name <b>{team_name}</b> is already taken.", "enterprise_workspaces")({
                      team_name: _.escape(a)
                    }),
                    name_is_empty: TS.i18n.t("Request failed: A team name is required.", "enterprise_workspaces")(),
                    name_too_long: TS.i18n.t("Request failed: The team name you provided is too long.", "enterprise_workspaces")(),
                    reason_too_long: TS.i18n.t("Team request failed: The reason you provided is too long.", "enterprise_workspaces")(),
                    unknown: TS.i18n.t("Team request failed: The response error was <b>{error_message}</b>.", "enterprise_workspaces")({
                      error_message: t.error || "unknown"
                    })
                  };
                TS.ui.toast.show({
                  type: "error",
                  message: n[t.error] || n.unknown
                }), TS.error(i + " failed with error: " + (t.error || "undefined")), d.stop();
              }), !1;
            }
          }), $(["#input_ws_team_name", "#textarea_ws_team_message"].join(",")).on("keyup change", e), $("#input_ws_team_name").focus(), $(t).find(n).attr("disabled", !0);
        }
      });
      var e = "ENTERPRISE_DISCOVER_WORKSPACES",
        t = function e(t, n, i) {
          var r = t.parents(),
            a = r.find('[data-qa="teams_search"]'),
            s = r.find(".workspace_info"),
            o = r.find(".more_teams_available"),
            l = r.find(".title_bar"),
            d = $(".sort_by_container"),
            c = d.find('select[data-qa="sort-by-your"]'),
            u = d.find('select[data-qa="sort-by-find"]');
          t.off(), a.off(), s.off(), o.off(), c.off(), u.off();
          var m = function(e) {
            return TS.enterprise.workspaces.joinTeam(e).then(function(n) {
              if (n) {
                var r = _.merge({}, TS.model.user);
                r.enterprise_user.teams = _.uniq(r.enterprise_user.teams.concat(e)), "web" === TS.boot_data.app ? TS.model.user = r : TS.members.upsertMember(r);
                var a = TS.enterprise.getTeamById(e);
                t.find('[data-id="' + e + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(a, i));
              }
              return n;
            });
          };
          a.on("input", function() {
            var r, a = $(this).val();
            r = "teams_on" === n ? c.val() : u.val();
            var s = TS.enterprise.workspaces.getList(n, r, a),
              o = "";
            if (s.length ? s.forEach(function(e) {
                o += TS.enterprise.workspaces.getTeamCardHTML(e, i, !0);
              }) : o += TS.templates.no_workspace_results(), TS.boot_data.feature_workspace_request) {
              var l = $("#ws_request_create_link");
              a.length ? l.removeClass("hidden") : l.addClass("hidden");
            }
            t.html(o).attr("data-list", n), e(t, n, i);
          }), o.on("click", '[data-qa="find-more-teams"]', function(e) {
            e.preventDefault(), $('.enterprise_memberdash_header .menu_item_teams[data-qa="find-teams"]').click();
          });
          var p = function() {
            var r = $(this).val(),
              s = a.val(),
              o = TS.enterprise.workspaces.getList(n, r, s),
              l = "";
            o.length ? o.forEach(function(e) {
              l += TS.enterprise.workspaces.getTeamCardHTML(e, i, !0);
            }) : l += "teams_on" === n ? TS.templates.not_on_any_workspaces() : TS.templates.no_workspaces_to_join(), t.html(l).attr("data-list", n), e(t, n, i);
          };
          c.on("change", p), u.on("change", p);
          var f = function(e, r) {
            if ("string" != typeof e && (e = $(this).data("id")), t.addClass("hidden"), l.addClass("hidden"), o.addClass("hidden"), a.addClass("hidden").attr("disabled", "disabled"), s.html(TS.templates.team_info({
                list: n
              })).removeClass("hidden").attr("data-team-id", e), !r) {
              var d = $("title").text(),
                c = "teams_not_on" === n ? "find-teams" : "your-teams";
              window.history.pushState(e, d, "/signin/" + c + "/" + e);
            }
            var _ = {
                top_combined_channels: 5,
                include_admins: !0
              },
              u = [];
            return TS.client || u.push(TS.api.call("users.info", {
              user: TS.boot_data.user_id
            }).then(function(e) {
              TS.model.user = e.data.user;
            })), u.push(TS.enterprise.ensureTeamInModel(e, _)), Promise.all(u).then(function() {
              return TS.enterprise.getTeamById(e);
            }).then(function(r) {
              if (!r) return void s.attr("data-team-id", "");
              var a = TS.enterprise.workspaces.createURL(r, i);
              r.launch_url = a + "messages", r.site_url = a + "home", s.html(TS.templates.team_info({
                list: n,
                team: r,
                user: TS.model.user
              })).attr("data-team-id", e), t.find('[data-id="' + r.id + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(r, i));
              var o, l;
              "teams_on" === n ? (o = "your_workspaces", l = "your_workspaces_list") : (o = "find_workspaces", l = "workspaces_you_can_join_list"), TS.enterprise.workspaces.recordTeamView(r.id, o, l);
            });
          };
          t.on("click", ".enterprise_team_card", f), s.on("click", ".back_to_teams", function(e) {
            e.preventDefault(), window.history.back(), t.removeClass("hidden"), l.removeClass("hidden"), a.removeClass("hidden").removeAttr("disabled"), s.addClass("hidden").attr("data-team-id", ""), "yes" === o.attr("data-has-more") && o.removeClass("hidden");
          }), $(window).on("popstate", function(e) {
            var n = e.originalEvent.state;
            if (n && "T" === n[0] && 9 === n.length) {
              f(n, !0);
            } else t.removeClass("hidden"), l.removeClass("hidden"), a.removeClass("hidden").removeAttr("disabled"), s.addClass("hidden").attr("data-team-id", ""), "yes" === o.attr("data-has-more") && o.removeClass("hidden");
          }), s.on("click", 'button[data-qa="join-btn"]', function() {
            var e = Ladda.create(this);
            e.start();
            var t = $(this).data("id"),
              r = TS.enterprise.getTeamById(t);
            m(t).then(function(t) {
              if (e.stop(), t) {
                var a = TS.enterprise.workspaces.createURL(r, i);
                r.launch_url = a + "messages", r.site_url = a + "home", s.html(TS.templates.team_info({
                  list: n,
                  team: r,
                  user: TS.model.user
                }));
                var o;
                o = "teams_on" === n ? "your_workspaces" : "find_workspaces", TS.enterprise.workspaces.recordTeamJoin(r.id, o, "workspace_detail");
              }
              return t;
            });
          }), s.on("click", '[data-qa="leave-btn"]', function(e) {
            e.preventDefault();
            var t = $(this).data("id");
            TS.ui.leave_team_dialog.start(t);
          }), s.on("click", 'button[data-qa="request-to-join-btn"]', function(e) {
            e.preventDefault();
            var r = Ladda.create(this);
            r.start();
            var a = $(this).data("id");
            TS.enterprise.workspaces.requestToJoinTeam(a).then(function() {
              var e = TS.enterprise.getTeamById(a);
              t.find('[data-id="' + a + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(e, i)), r.stop();
              var o = TS.enterprise.workspaces.createURL(e, i);
              e.launch_url = o + "messages", e.site_url = o + "home", s.html(TS.templates.team_info({
                list: n,
                team: e,
                user: TS.model.user
              }));
              var l;
              l = "teams_on" === n ? "your_workspaces" : "find_workspaces", TS.enterprise.workspaces.recordTeamRequestToJoin(e.id, l, "workspace_detail");
            }).catch(function() {
              r.stop();
            });
          }), t.on("click", ".enterprise_team_card a", function(e) {
            e.stopPropagation();
          });
          var h = function(e) {
            if (TS.model.is_our_app) {
              e.preventDefault(), e.stopPropagation();
              var t = $(this).data("id"),
                n = _.map(TS.model.user.enterprise_user.teams, function(e) {
                  var t = TS.enterprise.getTeamById(e);
                  return {
                    name: TS.model.user.name,
                    id: TS.model.user.id,
                    team_id: t.id,
                    team_name: t.name,
                    team_url: TS.utility.enterprise.buildTeamUrl(t.domain)
                  };
                }).sort(function(e, n) {
                  return e.id === t ? -1 : n.id === t ? 1 : e.team_name < n.team_name ? -1 : e.team_name > n.team_name ? 1 : 0;
                });
              TSSSB.call("didSignIn", n, !0);
            }
          };
          t.on("click", ".enterprise_team_card [data-name=launch_team_button]", h), s.on("click", "[data-name=launch_team_button]", h), t.on("click", ".enterprise_team_card .enterprise_team_menu", function(e) {
            e.stopPropagation();
            var t = $(this).val(),
              i = $(this).data("id"),
              r = TS.enterprise.getTeamById(i);
            TS.menu.enterprise_team_signin.start(e, $(this), {
              list: n,
              team_id: i,
              team_site_url: t,
              should_show_leave_team: TS.permissions.enterprise.canUserLeaveTeam(TS.model.user, r)
            });
          }), t.on("click", ".enterprise_team_card .enterprise_team_join", function(e) {
            e.stopPropagation();
            var t = Ladda.create(this);
            t.start();
            var i = $(this).data("id");
            m(i).then(function(e) {
              if (t.stop(), e) {
                var r, a;
                "teams_on" === n ? (r = "your_workspaces", a = "your_workspaces_list") : (r = "find_workspaces", a = "workspaces_you_can_join_list"), TS.enterprise.workspaces.recordTeamJoin(i, r, a);
              }
            });
          }), t.on("click", ".enterprise_team_card .enterprise_team_request", function(e) {
            e.stopPropagation();
            var n = Ladda.create(this);
            n.start();
            var r = $(this).data("id");
            TS.enterprise.workspaces.requestToJoinTeam(r).then(function() {
              var e = TS.enterprise.getTeamById(r);
              n.stop(), t.find('[data-id="' + r + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(e, i));
            }).catch(function() {
              n.stop();
            });
          }), t.find(".not_on_any_workspaces").on("click", ".find_teams", function(e) {
            e.preventDefault(), TS.enterprise.member_header.setPage("teams_not_on"), TS.enterprise.signin.loadPage("teams_not_on");
          });
        },
        n = function(e, t) {
          TS.ui.toast.show({
            type: e,
            message: t
          });
        };
    }();
  },
  2449: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("files", {
        team_file_added_sig: new signals.Signal,
        team_file_deleted_sig: new signals.Signal,
        team_file_deleted_success_sig: new signals.Signal,
        team_file_changed_sig: new signals.Signal,
        team_file_shared_sig: new signals.Signal,
        team_file_comment_added_sig: new signals.Signal,
        team_file_comment_edited_sig: new signals.Signal,
        team_file_comment_deleted_sig: new signals.Signal,
        file_uploaded_sig: new signals.Signal,
        file_uploading_sig: new signals.Signal,
        file_progress_sig: new signals.Signal,
        file_canceled_sig: new signals.Signal,
        file_queue_emptied_sig: new signals.Signal,
        channel_files_fetched_sig: new signals.Signal,
        user_changed_public_url_sig: new signals.Signal,
        uploadQ: [],
        uploading: !1,
        polling_count: 0,
        polling_file_id: null,
        polling_ticket: null,
        polling_tim: null,
        polling_handler: null,
        waiting_for_refresh: {},
        supported_audio_type_re: /^(mp3|wav)$/,
        supported_video_type_re: /^(mp4|mov|webm)$/,
        onStart: function() {
          TS.prefs.team_disable_file_editing_changed_sig.add(TS.files.getFileActions, TS.files.upsertAndSignal);
        },
        isFilePrivate: function(e) {
          return !e.is_public && !e.is_external && !e.is_shared;
        },
        isFileUntitled: function(e) {
          return "-" === e.name;
        },
        createPublicURL: function(e, t) {
          TS.model.team.prefs.disallow_public_file_urls || TS.api.callImmediately("files.sharedPublicURL", {
            file: e.id
          }, function(n, i, r) {
            n ? (TS.files.upsertAndSignal({
              id: e.id,
              public_url_shared: !0
            }), TS.files.user_changed_public_url_sig.dispatch(i.file)) : i.error && "not_allowed" === i.error && (TS.model.team.prefs.disallow_public_file_urls = !0, TS.boot_data.feature_external_files ? TS.generic_dialog.alert(TS.i18n.t("An administator has disabled external file URL creation. You will not be able to create an external URL for this Post.", "files")()) : TS.generic_dialog.alert(TS.i18n.t("An administator has disabled public file URL creation. You will not be able to create a public URL for this space.", "files")())), t && "function" == typeof t && t(n, i, r);
          });
        },
        createSpace: function(e) {
          var t = {};
          TS.boot_data.page_needs_enterprise && (t.team = TS.model.team.id), TS.api.callSynchronously("files.createSpace", t, function(t, n) {
            if (t) {
              var i = TS.files.upsertAndSignal(n.file).file;
              TS.web && TS.ssb.upsertFileInSSBParentWin(i), e(i);
            } else TS.generic_dialog.alert('<p class="no_bottom_margin">' + TS.i18n.t("Oops! Something went wrong. Please try again.", "files")() + "</p>"), e(null);
          });
        },
        createAndOpenNewSpace: function(e, t) {
          TS.files.createSpace(function(n) {
            if (n) {
              var i = TS.model.active_cid ? "?origin_channel=" + TS.model.active_cid : "";
              TS.boot_data.page_needs_enterprise && (i.length ? i += "&origin_team=" + TS.model.team.id : i = "?origin_team=" + TS.model.team.id);
              var r = n.permalink + i;
              !t && TS.ssb.openNewFileWindow(n, r, i) || TS.utility.openInNewTab(r, n.id);
            }
            "function" == typeof e && e(n);
          });
        },
        createArugula: function(e) {
          TS.api.callSynchronously("files.createArugula", {}, function(t, n) {
            if (t) {
              var i = TS.files.upsertAndSignal(n.file).file;
              TS.web && TS.ssb.upsertFileInSSBParentWin(i), e(i);
            } else TS.generic_dialog.alert('<p class="no_bottom_margin">' + TS.i18n.t("Oops! Something went wrong. Please try again.", "files")() + "</p>"), e(null);
          });
        },
        createAndOpenNewArugula: function(e, t) {
          TS.files.createArugula(function(n) {
            if (n) {
              var i = TS.model.active_cid ? "?origin_channel=" + TS.model.active_cid : "",
                r = n.permalink + i;
              !t && TS.ssb.openNewFileWindow(n, r, i) || TS.utility.openInNewTab(r, n.id);
            }
            "function" == typeof e && e(n);
          });
        },
        promptForFileUnshare: function(e, t) {
          var n = TS.channels.getChannelById(t);
          if (!n) var i = TS.groups.getGroupById(t);
          if (i || (i = TS.mpims.getMpimById(t)), i || n) {
            var r = TS.i18n.t("<p>Are you sure you want to un-share this file from the <strong>{channel_name}</strong> {is_private, select, true {private} other {}} channel?</p>\t\t\t<p>Un-sharing the file will not remove existing share and comment messages, but it will keep any future comments from appearing in the channel.</p>", "files")({
              is_private: !n,
              channel_name: n ? "#" + n.name : i.name
            });
            TS.generic_dialog.start({
              title: TS.i18n.t("Un-share file", "files")(),
              body: r,
              show_cancel_button: !0,
              show_go_button: !0,
              go_button_text: TS.i18n.t("Yes, unshare this file", "files")(),
              cancel_button_text: TS.i18n.t("Cancel", "files")(),
              onGo: function() {
                TS.files.unshareFile(e, t);
              }
            });
          }
        },
        shareFile: function(e, t, n, i, r) {
          var a = {
            file: e,
            channel: t,
            comment: n || ""
          };
          return a.resharing_aware = !0, i && (a.share_quietly = !0), TS.api.call("files.share", a, function(e, t, n) {
            TS.files.onFileShare(e, t, n), r && r(e, t, n);
          });
        },
        onFileShare: function(e, t, n) {
          e && (TS.files.fetchFileInfo(n.file, function(e, t) {
            TS.web && TS.files.upsertAndSignal(t);
          }), TS.web && TS.web.space && TS.web.space.onFileShare(e, t, n));
        },
        unshareFile: function(e, t, n) {
          TS.api.call("files.unshare", {
            file: e,
            channel: t
          }, function(t, i, r) {
            TS.files.onFileUnShare(t, i, r), n && n(e, TS.files.getFileById(e));
          });
        },
        fetchFileInfo: function(e, t) {
          return a(e, !1, t);
        },
        fetchFileInfoRaw: function(e, t) {
          return a(e, !0, t);
        },
        onFileUnShare: function(e, t, n) {
          e && TS.files.fetchFileInfo(n.file, function(e, t) {
            TS.web && TS.files.upsertAndSignal(t);
          });
        },
        fetchTeamFiles: function(e, n) {
          TS.api.call("files.list", {
            types: e,
            count: t
          }, function(e, t, i) {
            if (e && t.files)
              for (var r, a = 0; a < t.files.length; a += 1) r = t.files[a], TS.files.upsertFile(r);
            n && n(e, t, i);
          });
        },
        fetchMemberFiles: function(e, n, i) {
          TS.api.call("files.list", {
            user: e,
            types: n,
            count: t
          }, function(e, t, n) {
            if (e && t.files)
              for (var r, a = 0; a < t.files.length; a += 1) r = t.files[a], TS.files.upsertFile(r);
            i && i(e, t, n);
          });
        },
        fetchChannelFiles: function(e, t, n, i) {
          var r = i && i.length ? i.join(",") : "";
          t ? TS.api.call("files.list", {
            channel: e,
            types: r,
            count: n
          }, function(e, n, i) {
            e && TS.files.onChannelFetch(e, n, i), t(e, n, i);
          }) : TS.api.call("files.list", {
            channel: e,
            types: r
          }, TS.files.onChannelFetch);
        },
        fetchMultipleFiles: function(e, t, n) {
          return TS.api.call("files.list", {
            files: e.join(",")
          }, function(e, i, r) {
            if (e && i.files && !n)
              for (var a, s = 0; s < i.files.length; s += 1) a = i.files[s], TS.files.upsertFile(a);
            t && t(e, i, r);
          });
        },
        onChannelFetch: function(e, t, n) {
          if (e) {
            if (t.files)
              for (var i, r = 0; r < t.files.length; r += 1) i = t.files[r], TS.files.upsertFile(i);
            TS.files.channel_files_fetched_sig.dispatch(n.channel, t.files);
          }
        },
        addComment: function(e, t, n, i) {
          var r = {
            file: e,
            comment: t,
            channel: n || ""
          };
          TS.api.callImmediately("files.comments.add", r, function(e, t, n) {
            TS.files.onFileComment(e, t, n), i && i(e, t, n);
          });
        },
        onFileComment: function(e, t, n) {
          if (e) {
            var i = TS.files.getFileById(n.file);
            if (!i) return void TS.error("no file? " + n.file);
            TS.files.addCommentToFile(t.comment, i);
          }
        },
        getFileById: function(e) {
          return TS.files.getFileByProp("id", e);
        },
        getFileByDownloadUrlPrivate: function(e) {
          return TS.files.getFileByProp("url_private_download", e);
        },
        getFileByProp: function(e, t) {
          if (!e) return null;
          if (!t) return null;
          for (var n, i = TS.model.files, r = 0; r < i.length; r += 1)
            if (n = i[r], n[e] == t) return n;
          return null;
        },
        getFileActions: function(e) {
          if (e) {
            var t = {},
              n = !1;
            if (e.user == TS.model.user.id && (n = !0), e.is_public ? t.share = !0 : n ? t.share = !0 : t.share_private_file = !0, t.comment = !0, e.public_url_shared || "external" === e.mode || TS.model.user.is_restricted || TS.model.team.prefs.disallow_public_file_urls || (e.is_public ? t.create_public_link = !0 : n && (t.create_public_link = !0)), !e.public_url_shared || TS.model.user.is_restricted || !TS.model.user.is_admin && !n || TS.model.team.prefs.disallow_public_file_urls || (t.revoke_public_link = !0), "hosted" !== e.mode && "snippet" !== e.mode || (t.download = !0), (e.mimetype && 0 === e.mimetype.indexOf("image/") || "pdf" === e.filetype || "external" === e.mode || "snippet" === e.mode || "email" === e.mode) && (t.open_original = !0), TS.web && ("post" !== e.mode && "snippet" !== e.mode && "space" !== e.mode && "email" !== e.mode && "arugula" !== e.mode || (t.print = !0)), "space" !== e.mode || "USLACKBOT" === e.user && "Getting_Started_with_Posts" === e.name || (t.learn_more = !0), "space" !== e.mode && "arugula" !== e.mode || (t.new_window = !0), "space" === e.mode && "locked" !== e.state && (t.edit = !0), n && ("snippet" !== e.mode && "post" !== e.mode && "space" !== e.mode && "arugula" !== e.mode || (t.edit = !0), "hosted" !== e.mode && "email" !== e.mode || (t.edit_title = !0), t.delete_file = !0), TS.model.user.is_admin) {
              var i;
              TS.boot_data.feature_shared_channels_client && (i = TS.utility.teams.isMemberExternalById(e.user)), t.delete_file = !i;
            }
            if (TS.clipboard.canWriteText() && (t.copy_file_link = !0), "external" === e.mode && (n || TS.model.user.is_admin) && (t.refresh = !0), window.Dropbox && Dropbox.isBrowserSupported() && TS.model.prefs.dropbox_enabled && "hosted" === e.mode && (t.save_to_dropbox = !0), TS.client) {
              var r = TS.shared.getActiveModelOb();
              if (TS.pins.canUserPinHere(r))
                if (e.pinned_to && -1 !== e.pinned_to.indexOf(r.id)) t.unpin_file = !0;
                else {
                  var a = !!e.is_public;
                  e.channels ? a = a || -1 !== e.channels.indexOf(r.id) : TS.warn("No channels array for file object in getFileActions(): " + e.id), e.groups ? a = a || -1 !== e.groups.indexOf(r.id) : TS.warn("No groups array for file object in getFileActions(): " + e.id), e.ims ? a = a || -1 !== e.ims.indexOf(r.id) : TS.warn("No ims array for file object in getFileActions(): " + e.id), a && (t.pin_file = !0);
                }
            }
            return t.rxn_file = !0, TS.model.team.prefs.disable_file_editing && (t.edit = !1, t.edit_title = !1), TS.model.team.prefs.disable_file_deleting && (t.delete_file = !1), e.is_tombstoned && (t.edit = !1, t.edit_title = !1, t.delete_file = !1), t;
          }
        },
        getFileCommentActions: function(e, t) {
          if (!e) return {};
          var n = {
            can_edit: !0,
            can_delete: !0
          };
          if (e.user != TS.model.user.id ? n.can_edit = !1 : TS.model.team.prefs.msg_edit_window_mins > -1 && (Date.now() - TS.interop.datetime.toDateObject(e.timestamp)) / 6e4 > TS.model.team.prefs.msg_edit_window_mins && (n.can_edit = !1), TS.model.team.prefs.allow_message_deletion ? e.user != TS.model.user.id && (TS.model.user.is_admin || (n.can_delete = !1)) : TS.model.user.is_admin || (n.can_delete = !1), TS.client) {
            var i = TS.shared.getActiveModelOb();
            if (TS.pins.canUserPinHere(i))
              if (e.pinned_to && -1 !== e.pinned_to.indexOf(i.id)) n.can_unpin = !0;
              else {
                var r = !!t.is_public;
                t.channels ? r = r || -1 !== t.channels.indexOf(i.id) : TS.warn("No channels array for file object in getFileCommentActions(): " + t.id), t.groups ? r = r || -1 !== t.groups.indexOf(i.id) : TS.warn("No groups array for file object in getFileCommentActions(): " + t.id), t.ims ? r = r || -1 !== t.ims.indexOf(i.id) : TS.warn("No ims array for file object in getFileCommentActions(): " + t.id), r && (n.can_pin = !0);
              }
          }
          return n.rxn_file_comment = !0, n;
        },
        getThumbSrcForFile: function(e, t) {
          try {
            e = o(e);
          } catch (e) {
            return !1;
          }
          if (!e.thumb_360 && !e.thumb_360_gif) return !1;
          if (t || (t = {}), t.max_size || (t.max_size = 480), !1 === TS.model.prefs.a11y_animations && "gif" === e.filetype) {
            if (e.deanimate_gif) return e.deanimate_gif;
            if (t.max_size > 360 && e.thumb_480) return e.thumb_480;
            if (e.thumb_160) return e.thumb_160;
          }
          if (e.thumb_480_gif || e.thumb_360_gif) {
            if (t.max_size > 360 && e.thumb_480_gif) return e.thumb_480_gif;
            if (e.thumb_360_gif) return e.thumb_360_gif;
          }
          return t.max_size > 480 && e.thumb_1024 ? e.thumb_1024 : t.max_size > 360 && e.thumb_960 ? e.thumb_960 : e.thumb_720 ? e.thumb_720 : e.thumb_480 ? e.thumb_480 : e.thumb_360;
        },
        fileIsImage: function(e) {
          try {
            e = o(e);
          } catch (e) {
            return !1;
          }
          var t = e.thumb_360 || e.thumb_360_gif,
            n = e.mimetype && -1 !== e.mimetype.indexOf("image/");
          return t && n;
        },
        fileHasRichPreview: function(e) {
          try {
            e = o(e);
          } catch (e) {
            return !1;
          }
          var t = e.mimetype && -1 !== e.mimetype.indexOf("image/");
          return e.has_rich_preview && !t;
        },
        fileIsSupportedAudio: function(e) {
          return TS.files.supported_audio_type_re.test(o(e).filetype);
        },
        fileIsSupportedVideo: function(e) {
          return TS.files.supported_video_type_re.test(o(e).filetype);
        },
        fileIsHostedSupportedMedia: function(e) {
          try {
            e = o(e);
          } catch (e) {
            return !1;
          }
          var t = TS.files.fileIsSupportedAudio(e) || TS.files.fileIsSupportedVideo(e),
            n = !e.is_external || !_.isEmpty(_.get(e, "video.outputs"));
          return t && n;
        },
        fileIsPDF: function(e) {
          try {
            e = o(e);
          } catch (e) {
            return !1;
          }
          return "pdf" === e.filetype;
        },
        getFileTemplateArguments: function(e, t) {
          var n = {};
          if (n.current_user_id = TS.model.user.id, n.file_partial = "generic", /(snippet|post|email|arugula)/.test(e.mode) && (n.file_partial = e.mode), /(space)/.test(e.mode) && (n.file_partial = "post"), TS.files.fileIsImage(e) && (n.file_partial = "image", n.image_src = TS.files.getThumbSrcForFile(e, {
              max_size: t
            }), n.image_width = 360 === t ? e.thumb_360_w : e.thumb_480_w || e.thumb_360_w, n.image_height = 360 === t ? e.thumb_360_h : e.thumb_480_h || e.thumb_360_h, n.preserve_aspect_ratio = n.image_width > 0 && n.image_height > 0, n.preview_actions_class = "", (n.image_width < 170 || n.image_height < 50) && (n.preview_actions_class += " overflow_preview_actions"), n.image_width < 170 && (n.preview_actions_class += " overflow_preview_actions_width")), /(post|space|email|arugula|generic)/.test(n.file_partial) && (n.title_hider = !0), "snippet" === e.mode && (n.title_hider = "Untitled" === e.title), n.filesize = e.size > 2e4 && !/(gdoc|gpres|gsheet|gdraw)/.test(e.filetype), /(space|post)/.test(e.filetype) || (n.meta_filetype = new Handlebars.SafeString(TS.templates.builders.makeFiletypeHTML(e))), TS.templates.builders.makeExternalFiletypeHTML(e) === n.meta_filetype && (n.meta_filetype = !1), TS.files.fileIsHostedSupportedMedia(e)) {
            if (TS.files.fileIsSupportedVideo(e)) {
              n.file_is_video = !0;
              var i = {
                width: e.width,
                height: e.height,
                source: e.url_private,
                size: e.size
              };
              if (e.video && (n.transcoding_status = e.video.status, e.video.outputs))
                for (var r = e.video.outputs.length - 1; r >= 0; r -= 1) {
                  var a = e.video.outputs[r];
                  a.source && ((!i.width || a.width > i.width) && (i = a));
                }
              n.video_height = TS.model.native_video_embed_height, e.thumb_video && (n.poster = e.thumb_video), n.best_source = i.source;
            }
            TS.files.fileIsSupportedAudio(e) && (n.file_is_audio = !0, n.audio_preload = "metadata", e.size <= TS.model.native_media_preload_limit_bytes && (n.audio_preload = "auto"));
          }
          return n;
        },
        getFileDetailsMetaTemplateArguments: function(e) {
          var t = TS.files.getFileActions(e),
            n = "post" === e.mode,
            i = "space" === e.mode || "post" === e.mode,
            r = "snippet" === e.mode,
            a = "arugula" === e.mode,
            s = {
              file: e,
              user: TS.model.user,
              download: "hosted" === e.mode,
              edit_link: n ? e.edit_link : e.permalink,
              edit: (i || r) && e.user === TS.model.user.id,
              is_post: n,
              is_post_or_space: i,
              is_snippet: r,
              is_arugula: a,
              show_open_public_link: !TS.model.team.prefs.disallow_public_file_urls,
              show_revoke_public_link: !TS.model.team.prefs.disallow_public_file_urls && t.revoke_public_link
            };
          return "email" === e.mode && (s.to_more_count = e.to.length - 1, s.cc_more_count = e.cc.length - 1), e && e.id && ("snippet" !== e.mode && "post" !== e.mode && "space" !== e.mode || e.content || e.content_html || e.content_highlight_html || TS.files.fetchFileInfo(e.id)), s;
        },
        createFileCommentsGroup: function(e) {
          function t(e, t, i) {
            var r = TS.shared.getModelObById(t),
              a = r && TS.shared.getDisplayNameForModelOb(r),
              s = e.share_info && e.share_info[t],
              o = s && s.timestamp,
              l = TS.members.getMemberById(s && s.user_id),
              d = l && TS.members.getPrefCompliantMemberName(l);
            n[t] = {
              name: a,
              first_share: {
                name: d,
                timestamp: o
              },
              comments: i ? [i] : []
            };
          }
          for (var n = {}, i = e.comments.length - 1; i >= 0; i -= 1) {
            var r = e.comments[i];
            r.channel && (n[r.channel] ? n[r.channel].comments.unshift(r) : t(e, r.channel, r));
          }
          _.each([e.channels, e.groups, e.ims, e.mpims], function(i) {
            if (i)
              for (var r = i.length - 1; r >= 0; r -= 1) {
                var a = i[r];
                n[a] || t(e, a);
              }
          }), e._comments_grouped = n;
        },
        resetFileCommentsGroup: function(e) {
          e._comments_grouped = null;
        },
        sortFiles: function(e) {
          function t(e, t) {
            return e.timestamp < t.timestamp ? 1 : e.timestamp > t.timestamp ? -1 : 0;
          }
          e.sort(t);
        },
        getFileCommentById: function(e, t) {
          for (var n, i = 0; i < e.comments.length; i += 1)
            if (n = e.comments[i], n.id == t) return n;
          return null;
        },
        addCommentToFile: function(e, t) {
          var n = TS.files.getFileCommentById(t, e.id);
          return n || (e._rxn_key = TS.rxns.getRxnKey("file_comment", e.id), TS.rxns.upsertRxnsFromDataAndUpdateUI(e._rxn_key, e.reactions), delete e.reactions, t.comments.push(e), TS.files.sortCommentsOnFile(t), TS.files.team_file_comment_added_sig.dispatch(t, e), e);
        },
        editCommentOnFile: function(e, t) {
          for (var n, i = !1, r = !1, a = 0; a < t.comments.length; a += 1)
            if (n = t.comments[a], n.id == e.id) {
              i = !0, t.comments[a] = e, n.is_starred && (e.is_starred = !0), n._rxn_key && (e._rxn_key = n._rxn_key), n.pinned_to && !e.pinned_to && (e.pinned_to = n.pinned_to), t.initial_comment && n.id == t.initial_comment.id && (t.initial_comment = e, r = !0);
              break;
            }
          return !!i && (TS.files.sortCommentsOnFile(t), TS.files.team_file_comment_edited_sig.dispatch(t, e), r && TS.files.team_file_changed_sig.dispatch(t), !0);
        },
        deleteCommentOnFile: function(e, t) {
          for (var n, i, r = [], a = 0; a < t.comments.length; a += 1) n = t.comments[a], n.id != e ? r.push(n) : (i = n, t.initial_comment && n.id == t.initial_comment.id && (t.initial_comment = null));
          r.length != t.comments.length && (t.comments = r, TS.files.sortCommentsOnFile(t), TS.files.team_file_comment_deleted_sig.dispatch(t, e, i), TS.files.team_file_changed_sig.dispatch(t));
        },
        sortCommentsOnFile: function(e) {
          function t(e, t) {
            return e.timestamp > t.timestamp ? 1 : e.timestamp < t.timestamp ? -1 : 0;
          }
          e.comments.sort(t);
        },
        upsertFile: function(e) {
          if (Object.keys(e).length < 2 && TS.error("upserting a bad file object! it has less than 2 properties"), "space" === e.mode) {
            try {
              if (e.preview && /^\s*<document>/.test(e.preview)) {
                var t = $(e.preview);
                if (t.length && (e.preview = t.html()), t.length) {
                  var i = t.children().eq(0);
                  i.hasClass("list") && i.find("li:not(:first)").remove(), "pre" === i.prop("tagName").toLowerCase() ? e.preview_in_list = i.length ? '<span class="monospace">' + _.escape(i.text()) + "</span>" : "" : e.preview_in_list = i.length ? _.escape(i.text()) : "";
                }
              }
            } catch (t) {
              TS.log(93, "problem with file.preview id:" + e.id), TS.boot_data.feature_tinyspeck && TS.log(93, "(TS-ONLY log) file.preview: " + e.preview);
            }
            try {
              if (e.content_html) {
                var a = $(e.content_html);
                a.length && (e.content_html = a.html());
              }
            } catch (t) {
              TS.log(93, "problem with file.content_html id:" + e.id), TS.boot_data.feature_tinyspeck && TS.log(93, "(TS-ONLY log) file.content_html: " + e.content_html);
            }
          }
          if ("post" === e.mode && e.preview)
            for (var s = e.preview, o = s.split("\n"), l = o.length, d = 0; d < l; d += 1) {
              var c = o[d];
              if (c) {
                e.preview_in_list = c;
                break;
              }
            }
          if ("snippet" === e.mode) {
            var u = ["content", "content_highlight_html"];
            _.forEach(u, function(t) {
              if (e[t] && e[t].length > 12800) {
                var n = truncate(e[t], 12800);
                n !== e[t] && (e[t] = n, e.is_truncated = !0);
              }
            });
          }
          var m, p, f, h, g = TS.model.files,
            S = TS.files.getFileById(e.id),
            T = "NOOP",
            b = [];
          if (S) {
            if (e._rxn_key = TS.rxns.getRxnKey("file", e.id), f = TS.rxns.getExistingRxnsByKey(e._rxn_key), f && !e.reactions ? TS.warn("file:" + e.id + " has reactions in local model, but we are upserting an object that does NOT have reactions, which seems suspicious") : TS.rxns.upsertRxnsFromDataAndUpdateUI(e._rxn_key, e.reactions), delete e.reactions, e.comments)
              for (h = 0; h < e.comments.length; h += 1) p = e.comments[h], p._rxn_key = TS.rxns.getRxnKey("file_comment", p.id), f = TS.rxns.getExistingRxnsByKey(p._rxn_key), f && !p.reactions ? TS.warn("comment:" + e.id + " has reactions in local model, but we are upserting an object that does NOT have reactions, which seems suspicious") : TS.rxns.upsertRxnsFromDataAndUpdateUI(p._rxn_key, p.reactions), delete p.reactions;
            if (e.initial_comment && (e.initial_comment._rxn_key = TS.rxns.getRxnKey("file_comment", e.initial_comment.id), f = TS.rxns.getExistingRxnsByKey(e.initial_comment._rxn_key), f && !e.initial_comment.reactions ? TS.warn("initial_comment:" + e.id + " has reactions in local model, but we are upserting an object that does NOT have reactions, which seems suspicious") : TS.rxns.upsertRxnsFromDataAndUpdateUI(e.initial_comment._rxn_key, e.initial_comment.reactions), delete e.initial_comment.reactions), e.is_tombstoned !== S.is_tombstoned)
              for (var v in S) "is_tombstoned" === v ? S[v] = !!e[v] : delete S[v];
            else e.is_tombstoned != S.is_tombstoned || e.is_tombstoned || delete S.is_tombstoned;
            m = (S.channels || []).concat(S.ims || []).concat(S.groups || []);
            for (var y in e)
              if ("channels" === y || "ims" === y || "groups" === y || "pinned_to" === y || "to" === y || "from" === y || "cc" === y || "attachments" === y) {
                var w = !1,
                  k = _.isArray(e[y]) ? e[y] : [],
                  x = _.isArray(S[y]) ? S[y] : [];
                "to" === y || "from" === y || "cc" === y || "attachments" === y ? x.length != k.length && (w = !0) : x.join("") != k.join("") && (w = !0, "channels" !== y && "ims" !== y && "groups" !== y || (m = m.concat(e[y] || []))), w && (S[y] = e[y], T = "CHANGED", b.push(y));
              } else "preview" === y ? S[y] !== e[y] && (S[y] = e[y], S.content && delete S.content, S.content_html && delete S.content_html, S.content_highlight_html && delete S.content_highlight_html, T = "CHANGED", b = b.concat([y, "content", "content_html", "content_highlight_html"])) : "comments" === y ? e[y] && !TS.utility.areSimpleObjectsEqual(e[y], S[y], "file:" + e.id + " " + e.name) && (S[y] = e[y], T = "CHANGED", b.push(y)) : "content" === y ? e[y] && S[y] != e[y] && (S[y] = e[y], T = "CHANGED", b.push(y)) : "editor" === y || "state" === y ? e[y] != S[y] && (m = [], b.push(y), S[y] = e[y], T = "CHANGED") : "initial_comment" === y ? S[y] = e[y] : "reactions" === y ? S[y] = e[y] : "channel_map" !== y && "group_map" !== y && "im_map" !== y && "teams" !== y && "teams_shared_with" !== y && "users" !== y || TS.utility.isScalar(e[y]) ? "video" === y ? e[y] && !TS.utility.areSimpleObjectsEqual(e[y], S[y], "file:" + e.id + " " + e.name) && (S[y] = e[y], T = "CHANGED", b.push(y)) : S[y] != e[y] && (e[y] && !TS.utility.isScalar(e[y]) ? (S[y] = e[y], TS.warn(y + " is not scalar! it needs to be handled by upsertFile specifically to test if it has changed! " + n(e[y]))) : "boolean" == typeof e[y] && !e[y] == !S[y] || (b.push(y + " [" + S[y] + "] -> [" + e[y] + "]"), S[y] = e[y], T = "CHANGED")) : S[y] = e[y];
          } else {
            if (T = "ADDED", e._rxn_key = TS.rxns.getRxnKey("file", e.id), TS.rxns.upsertRxnsFromDataAndUpdateUI(e._rxn_key, e.reactions), delete e.reactions, e.comments) {
              for (h = 0; h < e.comments.length; h += 1) p = e.comments[h], p._rxn_key = TS.rxns.getRxnKey("file_comment", p.id), TS.rxns.upsertRxnsFromDataAndUpdateUI(p._rxn_key, p.reactions), delete p.reactions;
              e.initial_comment && (e.initial_comment._rxn_key = TS.rxns.getRxnKey("file_comment", e.initial_comment.id), TS.rxns.upsertRxnsFromDataAndUpdateUI(e.initial_comment._rxn_key, e.initial_comment.reactions), delete e.initial_comment.reactions);
            }
            g.push(e);
            var M = TS.members.getPotentiallyUnknownMemberById(e.user);
            M ? (M.files.push(e), TS.files.sortFiles(M.files)) : TS.error("hmmm, file " + e.id + " does not have a known user " + e.user), r(e), S = e;
          }
          return "CHANGED" === T && (r(e), _.includes(b, "comments") && TS.utility.msgs.updateCommentReferences(S)), S.comments ? S.comments_count = Math.max(S.comments_count, S.comments.length) : S.comments = [], S.channels || (S.channels = []), S.ims || (S.ims = []), S.groups || (S.groups = []), S.is_shared = S.groups.length > 0 || S.channels.length > 0, TS.files.sortFiles(TS.model.files), {
            status: T,
            file: S,
            what_changed: b
          };
        },
        upsertAndSignal: function(e) {
          var t = TS.files.upsertFile(e);
          return "CHANGED" === t.status ? TS.files.team_file_changed_sig.dispatch(t.file) : "ADDED" === t.status && TS.files.team_file_added_sig.dispatch(t.file), t;
        },
        removeFile: function(e) {
          TS.log(4, 'removing file "' + e + '"');
          var t = TS.files.getFileById(e);
          t && (t.is_deleted = !0), TS.model.channels.forEach(function(n) {
            t && TS.utility.msgs.removeFileSharesAndMentions(n, t), t && TS.utility.msgs.removeFileComments(n, t), TS.utility.msgs.removeFileReferences(n, e);
          }), TS.model.groups.forEach(function(n) {
            t && TS.utility.msgs.removeFileSharesAndMentions(n, t), t && TS.utility.msgs.removeFileComments(n, t), TS.utility.msgs.removeFileReferences(n, e);
          }), TS.model.ims.forEach(function(n) {
            t && TS.utility.msgs.removeFileSharesAndMentions(n, t), t && TS.utility.msgs.removeFileComments(n, t), TS.utility.msgs.removeFileReferences(n, e);
          }), TS.model.mpims.forEach(function(n) {
            t && TS.utility.msgs.removeFileSharesAndMentions(n, t), t && TS.utility.msgs.removeFileComments(n, t), TS.utility.msgs.removeFileReferences(n, e);
          }), t && TS.files.team_file_deleted_sig.dispatch(t);
        },
        upload: function(e) {
          TS.files.uploading ? TS.files.uploadQ.push(e) : TS.files.actuallyUpload(e);
        },
        actuallyUpload: function(t) {
          TS.files.uploading = !0, t.retry_num = t.retry_num || 0;
          var n, i = new FormData,
            r = !!t.file;
          if (t.title && (t.title = TS.emoji.maybeGetCanonicalEmojiString(t.title)), t.text ? (n = t.title || t.filetype, TS.files.file_uploading_sig.dispatch(n, t.retry_num > 0, r), i.append("content", t.text), t.filetype && i.append("filetype", t.filetype), t.filename && TS.warn("ignoring filename because it makes no sense for text files")) : (n = t.title || t.filename || t.file && t.file.name || "blob", TS.files.file_uploading_sig.dispatch(n, t.retry_num > 0, r), "string" == typeof t.file ? i.append("content64", t.file) : i.append("file", t.file), t.filename && i.append("filename", t.filename), t.filetype && TS.warn("ignoring filetype we send a filename which can intuit it")), i.append("token", TS.model.api_token), t.channels && t.channels.length) {
            var a = "";
            "string" == typeof t.channels ? a = t.channels : t.channels.join && (a = t.channels.join(",")), i.append("channels", a);
          }
          i.append("title", t.title), t.initial_comment && i.append("initial_comment", t.initial_comment);
          var s = "files.uploadAsync";
          t.link && (t.is_dropbox && (s = "files.uploadExternal"), t.is_box && (s = "files.uploadExternal"), i.append("link", t.link));
          var o;
          o = "files.uploadAsync" === s ? TS.model.async_api_url + s : TS.model.api_url + s;
          var l = !1;
          e = $.ajax({
            url: o,
            data: i,
            dataType: "json",
            cache: !1,
            contentType: !1,
            processData: !1,
            type: "POST",
            xhr: function() {
              var e = jQuery.ajaxSettings.xhr();
              return e.upload && e.upload.addEventListener("progress", function(e) {
                if (e.lengthComputable) {
                  var t = parseInt(100 * e.loaded / e.total, 10);
                  TS.files.file_progress_sig.dispatch(t);
                } else TS.info("Upload length not computable");
              }, !1), e;
            },
            error: function(e, i, r) {
              if (l = !0, TS.info("Error: Failed to upload file."), TS.info("textStatus:" + i + " errorThrown:" + r), TS.info("data:" + e), "abort" === i) return TS.files.file_canceled_sig.dispatch(n), void TS.files.uploadOver(!1);
              0 === t.retry_num ? (t.retry_num += 1, TS.files.actuallyUpload(t)) : TS.generic_dialog.start({
                title: TS.i18n.t("Upload failed", "files")(),
                body: TS.i18n.t("Hmm, it looks like your file failed to upload. Want to try again?", "files")(),
                go_button_text: TS.i18n.t("Yes, try again", "files")(),
                cancel_button_text: TS.i18n.t("No, cancel", "files")(),
                onGo: function() {
                  t.retry_num += 1, TS.files.actuallyUpload(t);
                },
                onCancel: function() {
                  TS.files.uploadOver(!1);
                }
              });
            },
            complete: function(e) {
              if (!l)
                if ((e = jQuery.parseJSON(e.responseText)) && e.ok && e.file)
                  if ("files.uploadAsync" === s) {
                    var n = function(e, t, n) {
                      if (TS.files.polling_file_id)
                        if (e)
                          if ("complete" === t.status) {
                            var i = TS.files.upsertAndSignal(t.file);
                            TS.files.uploadProcessingOver(!0, i.file.id);
                          } else if ("failed" === t.status) {
                        var r = "";
                        t.debug && TS.boot_data.feature_tinyspeck && (r = "<br><br>TS only Debugging:<br><br>" + t.debug), TS.generic_dialog.start({
                          title: TS.i18n.t("Upload failed", "files")(),
                          body: TS.i18n.t("Hmm, it looks like your file failed to upload. Want to try again?", "files")() + r,
                          go_button_text: TS.i18n.t("Yes, try again", "files")(),
                          cancel_button_text: TS.i18n.t("No, cancel", "files")(),
                          onGo: function() {
                            n.retry_num += 1, TS.files.actuallyUpload(n);
                          },
                          onCancel: function() {
                            TS.files.uploadProcessingOver(!1, TS.files.polling_file_id);
                          }
                        });
                      } else TS.files.pollForUploadProcessing();
                      else TS.generic_dialog.start({
                        title: TS.i18n.t("Upload failed", "files")(),
                        body: TS.i18n.t("Hmm, it looks like your file failed to upload.", "files")(),
                        show_cancel_button: !0
                      }), TS.files.uploadProcessingOver(!1, TS.files.polling_file_id);
                    };
                    TS.files.startPollingForUploadProcessing(e.file, e.ticket, n);
                  } else {
                    var i = TS.files.upsertAndSignal(e.file);
                    TS.files.uploadOver(e.ok, i.file.id);
                  }
              else TS.info("Error: Failed to upload file."), TS.info(e), e ? 0 === t.retry_num ? (t.retry_num += 1, TS.files.actuallyUpload(t)) : "folders_not_supported" === e.error ? TS.generic_dialog.start({
                title: TS.i18n.t("Folders not supported", "files")(),
                body: TS.i18n.t("<p>Sorry, <strong>{folder_name}</strong> is a folder, and folder uploads are not supported by Slack.</p>\t\t\t\t\t\t\t\t\t<p>Try uploading a .zip version of the file instead.</p>", "files")({
                  folder_name: _.escape(t.filename)
                }),
                show_cancel_button: !1,
                esc_for_ok: !0,
                onGo: function() {
                  TS.generic_dialog.end(), TS.files.uploadOver(!1);
                }
              }) : "request_timeout" === e.error ? TS.generic_dialog.start({
                title: TS.i18n.t("File upload timed out", "files")(),
                body: TS.i18n.t('<p>It looks like you’re on a slow or inconsistent internet connection. You may want to try your file upload again later. Or, try again now and it might work if you cross your fingers!</p>\t\t\t\t\t\t\t\t\t<p>If you’re still having problems, you can:</p>\t\t\t\t\t\t\t\t\t<ul><li><a href="/help/test" target="{new_win_name}" class="bold">Run our Self-Help Tests</a></li>\t\t\t\t\t\t\t\t\t<li><a href="/help/requests/new" target="{new_win_name}" class="bold">Contact our support team</li></ul>', "files")({
                  new_win_name: TS.templates.builders.newWindowName()
                }),
                show_cancel_button: !1,
                esc_for_ok: !0,
                onGo: function() {
                  TS.generic_dialog.end(), TS.files.uploadOver(!1);
                }
              }) : "file_uploads_disabled" === e.error ? TS.generic_dialog.start({
                title: TS.i18n.t("Upload failed", "files")(),
                body: TS.i18n.t("At the request of your administrator, file uploads have been disabled on this team.", "files")(),
                show_cancel_button: !1,
                onGo: function() {
                  TS.files.uploadOver(!1);
                }
              }) : "file_uploads_except_images_disabled" === e.error ? TS.generic_dialog.start({
                title: TS.i18n.t("Upload failed", "files")(),
                body: TS.i18n.t("At the request of your administrator, only images can be uploaded to this team.", "files")(),
                show_cancel_button: !1,
                onGo: function() {
                  TS.files.uploadOver(!1);
                }
              }) : TS.generic_dialog.start({
                title: TS.i18n.t("Upload failed", "files")(),
                body: TS.i18n.t("Hmm, it looks like your file failed to upload. Want to try again?", "files")(),
                go_button_text: TS.i18n.t("Yes, try again", "files")(),
                cancel_button_text: TS.i18n.t("No, cancel", "files")(),
                onGo: function() {
                  t.retry_num += 1, TS.files.actuallyUpload(t);
                },
                onCancel: function() {
                  TS.files.uploadOver(!1);
                }
              }) : (alert("Upload failed."), TS.files.uploadOver(!1));
            }
          });
        },
        startPollingForUploadProcessing: function(e, t, n) {
          TS.files.polling_count = 0, TS.files.polling_file_id = e, TS.files.polling_ticket = t, TS.files.polling_handler = n, TS.files.pollForUploadProcessing();
        },
        pollForUploadProcessing: function() {
          TS.files.polling_count += 1, TS.files.polling_tim = setTimeout(function() {
            TS.files.polling_ticket && TS.api.callImmediately("files.uploadStatus", {
              ticket: TS.files.polling_ticket
            }, function(e, t, n) {
              TS.files.polling_ticket && TS.files.polling_handler(e, t, n);
            });
          }, 1e3 * TS.files.polling_count);
        },
        uploadProcessingOver: function(e, t) {
          TS.files.polling_file_id == t && (TS.info("TS.files.uploadProcessingOver polling_file_id:" + TS.files.polling_file_id + " polling_ticket:" + TS.files.polling_ticket + " polling_count:" + TS.files.polling_count), TS.files.polling_count = 0, TS.files.polling_file_id = null, TS.files.polling_ticket = null, TS.files.polling_handler = null, clearTimeout(TS.files.polling_tim), TS.files.uploadOver(e, t));
        },
        uploadOver: function(t, n) {
          TS.files.file_uploaded_sig.dispatch(t, n), TS.files.uploading = !1, e = null, TS.files.uploadQ.length ? TS.files.actuallyUpload.call(null, TS.files.uploadQ.shift()) : TS.files.file_queue_emptied_sig.dispatch();
        },
        cancelCurrentUpload: function() {
          e && e.abort();
        },
        deleteFile: function(e) {
          TS.api.call("files.delete", {
            file: e
          }, TS.files.onFileDelete);
        },
        onFileDelete: function(e) {},
        endEditFileTitle: function() {
          $("#file_edit_title_container").addClass("hidden"), $("#file_title_container").removeClass("hidden");
        },
        saveEditFileTitle: function(e) {
          var t = TS.files.getFileById(e);
          if (t) {
            var n = $("#file_edit_title_input").val();
            if (!$.trim(n)) return void TS.sounds.play("beep");
            var i = t.title;
            if (i == n) return void TS.files.endEditFileTitle();
            TS.api.callImmediately("files.edit", {
              file: e,
              title: TS.emoji.maybeGetCanonicalEmojiString(n)
            }, function(t) {
              t || (TS.files.upsertAndSignal({
                id: e,
                title: i
              }), TS.generic_dialog.alert(TS.i18n.t("Something’s gone wrong, and your change didn’t save. If you see this message more than once, you may want to try restarting Slack.", "files")(), TS.i18n.t("Oh, crumbs!", "files")(), TS.i18n.t("Got it", "files")()));
            }), n = _.escape(n), TS.files.upsertAndSignal({
              id: e,
              title: n
            }), TS.files.endEditFileTitle();
          }
        },
        editFileTitle: function(e) {
          var t = TS.files.getFileById(e);
          if (t) {
            var n = t.title;
            n = n ? TS.format.unFormatMsg(n) : t.name, $("#file_title_container").addClass("hidden"), $("#file_edit_title_container").removeClass("hidden"), $("#file_edit_title_input").val(n), $("#file_edit_title_input").select();
          }
        },
        openBoxChooser: function() {
          TS.utility.box.unregister(TS.utility.box.SUCCESS_EVENT_TYPE, TS.files.onBoxChooser), TS.utility.box.success(TS.files.onBoxChooser), TS.utility.box.launchPopup();
        },
        onBoxChooser: function(e) {
          for (var t = new Array(e.length), n = 0; n < e.length; n += 1) {
            var i = e[n];
            t[n] = {
              name: i.name,
              link: i.url,
              is_box: !0
            };
          }
          TS.ui.upload_dialog.startWithCommentFromChatInput(t);
        },
        openDropboxChooser: function() {
          Dropbox.choose({
            success: TS.files.onDropboxChooser,
            linkType: "preview",
            multiselect: !0
          });
        },
        onDropboxChooser: function(e) {
          for (var t = [], n = 0; n < e.length; n += 1) {
            var i = e[n];
            t.push({
              name: i.name,
              size: i.bytes,
              link: i.link,
              icon: i.icon,
              is_dropbox: !0
            });
          }
          TS.ui.upload_dialog.startWithCommentFromChatInput(t);
        },
        makeFileNameFromFile: function(e) {
          return e.name || TS.i18n.t("Pasted image at {date}", "files")({
            date: TS.interop.datetime.toFilenameFriendlyDate(Date.now() / 1e3)
          }) + ".png";
        },
        makeFileTitleFromFile: function(e) {
          return e.name || TS.i18n.t("Pasted image at {date}", "files")({
            date: TS.interop.datetime.toDate(Date.now() / 1e3)
          });
        },
        justUploadTheseFileNow: function(e) {
          for (var t, n = 0; n < e.length; n += 1) t = e[n], t.size > TS.model.upload_file_size_limit_bytes || TS.files.upload({
            file: t,
            filename: TS.files.makeFileNameFromFile(t),
            title: TS.files.makeFileTitleFromFile(t),
            channels: [TS.shared.getActiveModelOb().id],
            initial_comment: ""
          });
        },
        refreshFile: function(e) {
          TS.files.startRefreshingFile(e), TS.api.call("files.refresh", {
            file: e
          }, TS.files.onFileRefresh);
        },
        onFileRefresh: function(e, t, n) {
          var i = n.file;
          if (e ? TS.menu.$menu.find("#refresh_file").find(".item_label").text(TS.i18n.t("File refreshed!", "files")()).end() : e || (TS.files.doneRefreshingFile(i, '<span class="moscow_red">' + TS.i18n.t("Refresh failed.", "files")() + "</span>", 5e3), TS.menu.$menu.find("#refresh_file").find(".item_label").text(TS.i18n.t("Refresh failed", "files")()).end()), e && !t.will_refresh && TS.files.doneRefreshingFile(i, '<span class="moscow_red">' + TS.i18n.t("File refreshed < 1 minute ago.", "files")() + "</span>", 5e3), TS.web && e && (TS.menu.$menu.find("#refresh_file").find(".item_label").text(TS.i18n.t("Reloading...", "files")()), TS.reload(!1, "TS.files.onFileRefresh")), !e && "file_deleted" === t.error) {
            var r = TS.files.getFileById(i);
            r && TS.files.removeFile(r.id);
          }
        },
        fileWasMaybeRefreshed: function(e) {
          e && TS.files.waiting_for_refresh[e.id] && TS.files.doneRefreshingFile(e.id, '<span class="kelly_green">' + TS.i18n.t("File refreshed!", "files")() + "</span>", 6e4);
        },
        startRefreshingFile: function(e) {
          TS.files.waiting_for_refresh[e] = !0, $('.file_refresh[data-file-id="' + e + '"]').addClass("hidden"), $('.file_refresh_status[data-file-id="' + e + '"]').removeClass("hidden");
        },
        doneRefreshingFile: function(e, t, n) {
          delete TS.files.waiting_for_refresh[e], $('.file_refresh_status[data-file-id="' + e + '"]').html(t), setTimeout(function() {
            $('.file_refresh[data-file-id="' + e + '"]').removeClass("hidden"), $('.file_refresh_status[data-file-id="' + e + '"]').text(TS.i18n.t("Refreshing file...", "files")()).addClass("hidden");
          }, n);
        },
        shareOrReshareFile: function(e, t, n, i, r) {
          var a = TS.files && TS.files.getFileById ? TS.files.getFileById(e) : null,
            s = !1,
            o = a.user != TS.model.user.id,
            l = !a.bot_id;
          TS.files.isFilePrivate(a) && o && l && (s = !0), a ? s ? TS.files.reShareConfirmation([a], function() {
            TS.ui.share_dialog.start(e, t, n, i, null, r);
          }) : TS.ui.share_dialog.start(e, t, n, i, null, r) : TS.error("File for reshare doesn't exist: " + e);
        },
        reShareConfirmation: function(e, t) {
          var n = e.map(function(e) {
            return TS.members.getPrefCompliantMemberNameById(e.user, !0);
          });
          n = _.uniq(n);
          var i = TS.i18n.t("You’re about to share {file_count, plural, =1 {a private file} other {private files}}", "files")({
              file_count: e.length
            }),
            r = TS.i18n.t("<p><strong>{user_names}</strong> {file_owners_count, plural, =1 {has} other {have}} privately shared {file_count, plural, =1 {the file <strong>{file_title}</strong>} other {these files}} with you. Are you sure you want to proceed with sharing {file_count, plural, =1 {it} other {them}} somewhere else?</p><p>It’s important to note that any comments on {file_count, plural, =1 {the file <strong>{file_title}</strong>} other {these files}} will also be shared.</p>", "files")({
              user_names: TS.i18n.listify(n).join(""),
              file_owners_count: n.length,
              file_count: e.length,
              file_title: 1 === e.length ? TS.format.formatNoSpecials(e[0].title || "Untitled") : ""
            });
          TS.generic_dialog.start({
            title: i,
            body: r,
            show_cancel_button: !0,
            show_go_button: !0,
            go_button_text: TS.i18n.t("Proceed with sharing", "files")(),
            cancel_button_text: TS.i18n.t("Cancel", "files")(),
            onGo: t
          });
        },
        updateFileListItem: function(e, t) {
          var n = t.find('.file_list_item[data-file-id="' + e.id + '"]');
          n.length && (n.replaceWith(TS.templates.builders.fileHTML(e)), TS.files.fileIsImage(e) && t.find(".lazy").lazyload());
        }
      });
      var e = null,
        t = 20,
        i = {},
        r = function(e) {
          if (TS.files.fileIsImage(e)) {
            var t = {
              width: e.thumb_360_w,
              height: e.thumb_360_h,
              link_url: e.url_private,
              internal_file_id: e.id
            };
            "gif" === e.filetype && (e.deanimate_gif ? TS.inline_imgs.makeInternalInlineImg(e.deanimate_gif, t) : e.thumb_160 && TS.inline_imgs.makeInternalInlineImg(e.thumb_160, t)), e.thumb_480_gif || e.thumb_360_gif ? (e.thumb_480_gif && TS.inline_imgs.makeInternalInlineImg(e.thumb_480_gif, t), e.thumb_360_gif && TS.inline_imgs.makeInternalInlineImg(e.thumb_360_gif, t)) : (e.thumb_720 && TS.inline_imgs.makeInternalInlineImg(e.thumb_720, t), e.thumb_480 && TS.inline_imgs.makeInternalInlineImg(e.thumb_480, t), e.thumb_360 && TS.inline_imgs.makeInternalInlineImg(e.thumb_360, t));
          }
        },
        a = function(e, t, n) {
          var r = function(i) {
              var r;
              if (i && i.data) {
                var a = !!t;
                s(i.data.ok, i.data, i.args, a), r = t ? i.data.file : TS.files.getFileById(e);
              }
              return n && n(e, r), r || e;
            },
            a = i[e];
          return a || (a = TS.api.call("files.info", {
            file: e,
            page: 1,
            count: 500,
            truncate: 1
          }), i[e] = a, a.finally(function() {
            delete i[e];
          })), a.then(function(e) {
            return r(e);
          }).catch(function(e) {
            return r(e);
          });
        },
        s = function(e, t, n, i) {
          if (e) t.file && (t.file.comments = t.comments, t.file.content = t.content, t.file.content_html = t.content_html, t.file.content_highlight_html = t.content_highlight_html, i || TS.files.upsertAndSignal(t.file));
          else if ("file_deleted" === t.error) {
            var r = TS.files.getFileById(n.file);
            r ? TS.files.removeFile(r.id) : n.file && TS.files.removeFile(n.file);
          } else "file_not_found" === t.error && TS.files.removeFile(n.file);
        },
        o = function(e) {
          var t = _.isString(e) ? TS.files.getFileById(e) : e;
          if (!_.isObject(t)) throw new Error("Expected file or file ID.");
          return t;
        };
    }();
  },
  2450: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("flannel", {
        onStart: function() {
          TS.lazyLoadMembersAndBots() && (TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.addOnce(p) : TS.ms.connected_sig.addOnce(p));
        },
        test: function() {
          var e = {
            _batchUpsertObjects: i
          };
          return Object.defineProperty(e, "_batchUpsertObjects", {
            get: function() {
              return i;
            },
            set: function(e) {
              i = e;
            }
          }), e;
        },
        fetchAndUpsertObjectsByIds: function(e) {
          return l(e).then(i);
        },
        fetchAndUpsertObjectsWithQuery: function(e, t) {
          return d(e, t).then(function(e) {
            return i(e.objects).then(function(t) {
              var n = _.clone(e);
              return n.objects = t, n;
            });
          });
        },
        fetchAndUpsertAllMembersForModelObDeprecated: function(e) {
          if (_.isUndefined(e.members)) throw new Error("This function can only be used with model objects that have members");
          if (t[e.id]) return t[e.id];
          var n = [e.id],
            i = TS.model.team.id,
            r = e.members;
          return t[e.id] = TS.members.ensureMembersArePresent(r, n, i).then(function() {
            if (!TS.members.haveAllMembersForModelOb(e)) throw TS.has_pri[m] && TS.log(m, "Flannel: error fetching missing members for channel " + e.id), new Error("Tried to fetch members for channel but failed to get some");
          }).catch(function() {
            delete t[e.id];
          }), t[e.id];
        },
        fetchMemberCounts: function() {
          return TS.ms.flannel.call("user_counts_request").then(function(e) {
            return e.counts;
          });
        },
        getFlannelConnectionUrl: function() {
          var e = TS.getSocketStartArgs();
          return c(e);
        },
        hydrateStartData: function(e) {
          delete e.users, delete e.updated_users, delete e.updated_bots, e.bots = [];
          var t = [];
          if (TS.web && TS.web.space && TS.boot_data.file) {
            t.push(TS.boot_data.file.user);
            var n = _.map(TS.boot_data.file.comments || [], "user");
            t = t.concat(n);
          }
          var i = _([e.mpims, e.ims, e.channels]).flatten().filter(function(e) {
            return !0 === e.is_mpim || !0 === e.is_im;
          }).map(function(e) {
            return e.members || [e.user];
          }).flatten().concat(_.get(e, "self.id")).concat(t).uniq().compact().value();
          if (TS.model.ms_logged_in_once && !TS.isPartiallyBooted()) {
            var r = _.map(TS.model.members, "id");
            i = _.difference(i, r);
          }
          return i.length ? (TS.info("Got rtm.start data but need to fetch " + i.length + " members"), TS.has_pri[m] && TS.log(m, i.join(", ")), l(i).then(function(t) {
            if (TS.info("Got " + t.length + " members for rtm.start :tada:"), i.length !== t.length) {
              var n = _.difference(i, _.map(t, "id"));
              return u(n).then(function(i) {
                if (i.length == n.length) TS.warn("hydrateStartData tried to fetch users from Flannel but had to fall back to the API for some users (everything worked out, though). Users: " + n.join(",")), TS.metrics.count("rtm_start_from_flannel_fallback_to_api_success");
                else {
                  var r = _.difference(n, _.map(i, "id"));
                  TS.error("hydrateStartData tried to fetch users from Flannel and from the API and still could not find them. Missing users: " + r.join(",")), TS.metrics.count("rtm_start_from_flannel_fallback_to_api_failure");
                }
                return e.users = t.concat(i), e;
              });
            }
            return e.users = t, e;
          }).catch(function(e) {
            throw TS.error("Got error while trying to fetch " + i.length + " members for rtm.start :(", e), e;
          })) : (TS.info("Got rtm.start data and don't need to fetch any members"), e.users = [], Promise.resolve(e));
        },
        fetchAccessibleUserIdsForGuests: function() {
          if (!TS.model.user.is_restricted) throw new Error("This method is only intended for guests");
          return TS.api.call("channels.guestVisibleMembers").then(function(e) {
            return e.data.members;
          });
        },
        fetchChannelMembershipForUsers: function(t, n) {
          if (!_.isString(t)) throw new Error("Expected channel_id to be a string");
          if (!_.isArray(n) || !_.every(n, _.isString)) throw new Error("Expected user_ids to be an array of strings");
          if (_.isEmpty(n)) return Promise.resolve({});
          n = _.uniq(n);
          var i = {},
            r = _.chunk(n, e).map(function(e) {
              var n = {
                channel: t,
                users: e
              };
              return TS.ms.flannel.call("membership_query", n).then(function(e) {
                var t = e.members || [],
                  n = e.non_members || [];
                return t.concat(n).forEach(function(e) {
                  i[e] = t.indexOf(e) >= 0;
                }), null;
              }).reflect();
            });
          return Promise.all(r).then(function() {
            if (Object.keys(i).length !== n.length) {
              var e = Object.keys(i),
                r = _.difference(n, e);
              throw new Error("Flannel did not return membership status of " + t + " for some users: " + r.join(", "));
            }
            return i;
          });
        },
        fetchMembershipCountsForChannel: function(e) {
          if (!_.isString(e)) throw new Error("Expected channel_id to be a string");
          return TS.ms.flannel.call("user_counts_request", {
            channel: e
          }).then(function(e) {
            return e.counts;
          });
        },
        fetchRawObjectsByIds: function(e) {
          return l(e);
        }
      });
      var e = 100,
        t = {},
        n = function e(t, n, i) {
          return TS.ms.flannel.call("user_query_request", t).then(function(r) {
            return _.get(r, "results.length") && (n = n.concat(r.results), i && (n.length >= i || !r.next_marker)) ? {
              objects: n.slice(0, i),
              next_marker: n.length > i ? n[i].id : r.next_marker
            } : !r.next_marker || n.length >= t.count && !i ? (TS.has_pri[m] && TS.log(m, "Flannel: finished fetching results for query", t), {
              objects: n.slice(0, t.count),
              next_marker: n.length > t.count ? n[t.count].id : r.next_marker
            }) : (t.marker = r.next_marker, TS.has_pri[m] && TS.log(m, "Flannel: fetching next page for query", t), e(t, n, i));
          });
        },
        i = function(e) {
          function t(e) {
            var t = a(e);
            t && u.push(t);
          }

          function n(e) {
            var t = r(e);
            return t && u.push(t), t;
          }
          TS.has_pri[m] && TS.log(m, "Flannel: upserting batch of " + e.length + " objects");
          var i = _.partition(e, function(e) {
              if (TS.utility.members.isMember(e)) {
                var t = TS.members.getPotentiallyUnknownMemberByIdWithoutFetching(e.id);
                return "unknown_members" === TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics) && t ? !t.is_unknown : t;
              }
              return TS.shared.getModelObById(e.id);
            }),
            o = i[0],
            l = i[1],
            d = _.some(l, s),
            c = _.some(l, TS.utility.members.isMember),
            u = [];
          return o.forEach(t), d && TS.bots.startBatchUpsert(), c && TS.members.startBatchUpsert(), l.forEach(n), d && TS.bots.finishBatchUpsert(), c && TS.members.finishBatchUpsert(u), Promise.resolve(_.map(u, function(e) {
            return e.member || e.bot || e;
          }));
        },
        r = function(e) {
          return s(e) ? (TS.has_pri[m] && TS.log(m, "Flannel: upserting bot " + e.id + " from query results"), TS.bots.upsertBot(e)) : TS.utility.members.isMember(e) ? (TS.has_pri[m] && TS.log(m, "Flannel: upserting user " + e.id + " from query results"), TS.members.upsertMember(e)) : void 0;
        },
        a = function(e) {
          return s(e) ? (TS.has_pri[m] && TS.log(m, "Flannel: upserting and signalling bot " + e.id + " from query results"), TS.bots.upsertAndSignal(e).bot) : TS.utility.members.isMember(e) ? (TS.has_pri[m] && TS.log(m, "Flannel: upserting and signalling user " + e.id + " from query results"), TS.members.upsertAndSignal(e).member) : void 0;
        },
        s = function(e) {
          return "B" === _.get(e, "id[0]");
        },
        o = function() {
          var e = TS.boot_data.page_needs_enterprise ? "W" : "U",
            t = _.map(TS.model.members, "id"),
            n = _(TS.ui.frecency.getMostCommonWithPrefix(e, 100)).map("id").difference(t).value();
          n.length && (TS.has_pri[m] && TS.log(m, "Flannel: pre-fetching " + n.length + " most frequently accessed members..."), TS.flannel.fetchAndUpsertObjectsByIds(n).then(function(e) {
            TS.has_pri[m] && TS.log(m, "Flannel: pre-fetched " + e.length + " most frequently accessed members 👍");
          }).catch(_.noop));
        },
        l = function(t) {
          var n = _.chunk(t, e);
          return Promise.map(n, function(e) {
            var t = d({
              ids: e
            });
            return t.catch(function(t) {
              TS.warn("Flannel chunk fetch failed: ", e), TS.logError(t);
            }), t.reflect();
          }, {
            concurrency: 2
          }).then(function(e) {
            var t = e.filter(function(e) {
              return e.isRejected();
            }).map(function(e) {
              return e.reason();
            });
            if (t.length) {
              var n = new Error("Some Flannel fetches failed");
              return n.rejection_reasons = t, Promise.reject(n);
            }
            var i = _(e).map(function(e) {
              return e.value().objects;
            }).flatten().value();
            return Promise.resolve(i);
          });
        },
        d = function(e, t) {
          return _.isString(e) && (e = {
            query: e
          }), n(e, [], t);
        },
        c = function(e) {
          return TS.utility.url.setUrlQueryStringValue(TS.boot_data.ms_connect_url, "start_args", TS.utility.url.queryStringEncode(e));
        },
        u = function(e) {
          var t = _.chunk(e, 250).map(function(e) {
            return TS.api.call("users.info", {
              users: e.join(",")
            }).then(function(e) {
              return e.data.users;
            }).reflect();
          });
          return Promise.all(t).then(function(e) {
            return _(e).filter(function(e) {
              return e.isFulfilled();
            }).map(function(e) {
              return e.value();
            }).flatten().value();
          });
        },
        m = 1989,
        p = function() {
          o();
        };
    }();
  },
  2451: function(e, t) {
    ! function() {
      "use strict";

      function e(e, t, n) {
        var i = e.lastIndexOf(" ", n),
          r = -1 !== i ? i + 1 : 0,
          a = e.substring(r, n + t.length);
        return TS.utility.findUrls(a).length > 0;
      }

      function t(e) {
        switch (e) {
          case TSF.PRE_START:
            return TSF.CODE_START;
          case TSF.PRE_END:
            return TSF.CODE_END;
        }
        return e;
      }

      function n(e) {
        var t = document.createElement("div");
        return t.innerHTML = e, t.textContent;
      }

      function i(e) {
        var t = TS.members.getPrefCompliantMemberName(e),
          i = _.escape(t),
          r = TS.templates.member_slug({
            member_username: e.name,
            member_id: e.id,
            member_name: new Handlebars.SafeString(i)
          }).trim();
        return {
          html: r,
          txt: n(r)
        };
      }

      function r(t, n) {
        if (!t) return "";
        n || (n = {}), TS.utility.contenteditable.supportsTexty() && (t = TS.format.replaceUnicodeDoppelgangers(t));
        var i = [];
        if (TS.boot_data.feature_name_tagging_client) {
          TS.boot_data.feature_ignore_code_mentions && (t = TSF.replaceFormatContents(i, t, {
            replace_pre: !0,
            replace_code: !0
          }));
          var r = [];
          t = TS.format.texty.replaceFormatMentions(r, t, n.do_specials), n.do_specials && (t = TSF.getTokensString(t, "CLEAN", {
            jumbomoji: TS.model.prefs.jumbomoji
          })), r.forEach(function(e) {
            t = t.replace(e.placeholder, e.mention);
          });
        } else n.do_specials && (t = TSF.getTokensString(t, "CLEAN", {
          jumbomoji: TS.model.prefs.jumbomoji
        })), TS.boot_data.feature_ignore_code_mentions && (t = TSF.replaceFormatContents(i, t, {
          replace_pre: !0,
          replace_code: !0
        })), t = t.replace(u, function(i, r, a, o, d) {
          if ("/" === r && e(t, i, d)) return i;
          for (var c, _ = "", u = a.toLowerCase(), m = 0; m < l.length; m++) l[m].regex.test(u) && (c = l[m].cmd, _ = u.substr(l[m].name.length), m = l.length);
          if (c) return r + c + _;
          var p = TS.members.getMemberByName;
          TS.boot_data.feature_shared_channels_client && (p = function(e) {
            return TS.members.getMemberByNameAndTeamId(e, TS.model.team.id);
          });
          var f = s(TS.members.getMemberById, o, p, a);
          if (f.model_ob) {
            var h;
            return h = n.human_readable ? "@" + f.model_ob.name : "<@" + f.model_ob.id + ">", r + h + f.extra;
          }
          if (f = s(TS.user_groups.getUserGroupsById, o, TS.user_groups.getUserGroupsByHandle, a), f.model_ob) {
            var g;
            return g = n.human_readable ? "@" + f.model_ob.handle : "<!subteam^" + f.model_ob.id + "|@" + f.model_ob.handle + ">", r + g + f.extra;
          }
          return r + a;
        });
        return t = t.replace(p, function(i, r, a, o, l) {
          if ("/" === r && e(t, i, l)) return i;
          var d = s(TS.channels.getChannelById, a.substr(1), TS.channels.getChannelByName, a);
          if (d.model_ob) {
            var c;
            return c = n.human_readable ? "#" + d.model_ob.name : "<#" + d.model_ob.id + "|" + d.model_ob.name + ">", r + c + d.extra;
          }
          return r + a;
        }), TS.model.prefs.convert_emoticons && "as_text" !== TS.model.prefs.emoji_mode && (t = TS.format.doEmoticonConversion(t)), TS.boot_data.feature_localization && TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE && (t = TSFEmoji.translateEmojiStringToCanonical(t, TS.i18n.locale())), TS.boot_data.feature_ignore_code_mentions && (TS.boot_data.feature_name_tagging_client && (i = i.map(function(e) {
          var t = TS.format.texty.convertContentsStringToContents(e.str);
          return e.str = _.reduce(t.contents, function(e, t) {
            return e + t.insert;
          }, ""), n.do_specials && (e.str = _.escape(e.str)), e;
        })), t = TSF.swapOutPlaceholders(i, t)), t;
      }

      function a(e) {
        if (!TS.boot_data.feature_shared_channels_client) return !1;
        var t = e.split("+");
        if (2 !== t.length) return !1;
        var n = t[0],
          i = t[1];
        if (!TS.utility.strLooksLikeATeamId(i)) {
          var r = TS.teams.getTeamByDomain(i);
          i = !!r && r.id;
        }
        return !!i && TS.members.getMemberByNameAndTeamId(n, i);
      }

      function s(e, t, n, i) {
        var r, s, o = "";
        _.isFunction(e) && _.isString(t) && (r = t.substring(0, TS.model.model_ob_id_length), (s = e(r)) && (o = t.substring(TS.model.model_ob_id_length))), s || (s = n(i)), !s && _.isString(t) && (s = a(t));
        for (var l = [".", "..", "...", "....", "-", "--", "_", "…"], d = 0; !s && d < l.length;) {
          var c = l[d];
          i && i.substr(i.length - c.length, c.length) == c && (r = i.substr(0, i.length - c.length), s = n(r), s || (s = a(r.replace(/^@/, ""))), s && (o = c)), d += 1;
        }
        return {
          model_ob: s,
          extra: o
        };
      }
      TS.registerModule("format", {
        hex_rx: /(\W|^)(#[A-Fa-f0-9]{6})(\b)/g,
        replaceUnicodeDoppelgangers: function(e) {
          return e ? (e = e.replace(/\u00A0/g, " "), e = e.replace(/\u000D/g, "\n"), e = e.replace(/\u000A/g, "\n")) : "";
        },
        replaceHighlightMarkers: function(e, t, n) {
          return e ? (t = t || "", n = n || "", e.replace(/\ue000/g, t).replace(/\ue001/g, n)) : "";
        },
        hasOnlyValidMemberIds: function(e) {
          return !_.isString(e) || _.every(e.match(u), TS.members.getMemberById);
        },
        formatSlugs: function(e, t) {
          _.isString(e) || (e = ""), _.isInteger(t) || (t = 0);
          var n = t,
            r = _.escape(e),
            a = r.replace(u, function(e, r, a, o, l) {
              var d = "";
              o.length > TS.model.model_ob_id_length && (d = o.slice(TS.model.model_ob_id_length), o = o.slice(0, TS.model.model_ob_id_length), a = "@" + o);
              var c = s(TS.members.getMemberById, o, TS.members.getMemberByName, a),
                _ = c.model_ob;
              if (!_) return e;
              var u = i(_);
              return l + r.length < t && (n -= a.length - u.txt.length), r + u.html + d;
            });
          return {
            cursor: {
              end: n,
              length: 0,
              start: n
            },
            html: a
          };
        },
        cleanMsg: function(e) {
          return r(e, {
            do_specials: !0
          });
        },
        cleanInternalMsg: function(e) {
          return r(e, {
            do_specials: !1
          });
        },
        cleanCommandText: function(e) {
          return TS.boot_data.feature_localization && TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE && (e = TSFEmoji.translateEmojiStringToCanonical(e, TS.i18n.locale())), TS.boot_data.feature_name_tagging_client ? r(e, {
            do_specials: !1,
            human_readable: !0
          }) : e;
        },
        doEmoticonConversion: function(e) {
          return v.length = 0, e = e.replace(f, C), e = e.replace(h, C), e = e.replace(g, C), e = TS.emoji.replaceEmoticons(e), e = TS.format.deTokenizeStr(v, e);
        },
        tokenizeStr: function(e, t, n) {
          if (!t) return "";
          n = n || "";
          var i = 0 === t.indexOf("\n") ? "\n" : "",
            r = E(i + w + (y += 1) + Date.now());
          return r = n + r + n, e.push({
            str: t,
            token: r
          }), r;
        },
        deTokenizeStr: function(e, t) {
          var n, i = e.length - 1;
          for (i; i > -1; i -= 1) n = e[i], t = t.replace(n.token, n.str.replace(/\$/g, "$$$$"));
          return t;
        },
        unFormatMsg: function(e, t) {
          return TS.format.formatWithOptions(e, t, {
            for_edit: !0
          });
        },
        formatJustText: function(e) {
          return TS.format.formatWithOptions(e);
        },
        formatDefault: function(e, t) {
          return TS.format.formatWithOptions(e, t);
        },
        formatNoHighlightsNoSpecials: function(e, t) {
          return TS.format.formatWithOptions(e, t, {
            no_highlights: !0,
            no_specials: !0
          });
        },
        formatNoHighlightsNoSpecialsNoInlineImgs: function(e, t) {
          return TS.format.formatWithOptions(e, t, {
            no_highlights: !0,
            no_specials: !0,
            do_inline_imgs: !1
          });
        },
        formatNoHighlightsNoInlineImgs: function(e, t) {
          return TS.format.formatWithOptions(e, t, {
            do_inline_imgs: !1,
            no_highlights: !0
          });
        },
        formatNoSpecials: function(e, t) {
          return TS.format.formatWithOptions(e, t, {
            no_specials: !0
          });
        },
        formatNotification: function(e, t) {
          return TS.format.formatWithOptions(e, t, {
            for_growl: !0
          });
        },
        formatCurrentStatus: function(e, t, n) {
          return n = n || {}, TS.format.formatWithOptions(e, t, _.assign({
            no_jumbomoji: !0,
            no_linking: !0,
            no_specials: !0,
            no_highlights: !0,
            no_emoji_text: !0,
            prevent_copy_paste: !0
          }, n));
        },
        formatBroadcastExcerpt: function(e, t) {
          var n = TS.format.formatWithOptions(e, t, {
            no_highlights: !0,
            no_hex_colors: !0,
            do_inline_imgs: !1,
            enable_slack_action_links: !1,
            do_theme_install_buttons: !1,
            no_jumbomoji: !0,
            no_linking: !0,
            custom_linebreak: "&hellip;<br>",
            token_overrides: {
              "<PRE:START>": '&hellip;<br><span class="multiline_block">',
              "<PRE:END>": "</span>",
              "<QUOTE:START>": '&hellip;<br><span class="multiline_block">',
              "<QUOTE:END>": "</span>",
              "<CODE:START>": "<span>",
              "<CODE:END>": "</span>",
              "<PARA:BREAK>": "&hellip;<br>"
            }
          });
          return _.startsWith(n, "&hellip;<br>") && (n = n.substring("&hellip;<br>".length)), n;
        },
        extractIds: function(e) {
          var t = [],
            n = [],
            i = e.match(/<[#@]+(.*?)>/g);
          return i && i.forEach(function(e) {
            var i, r;
            0 === e.indexOf("<@") ? (i = e.replace(/<|>/g, ""), r = TS.utility.msgs.getMemberIdFromMemberMarkup(i), TS.interop.utility.looksLikeMemberId(r) && TS.utility.ensureInArray(n, r)) : (i = e.replace(/<|>|#/g, ""), r = i.split("|")[0], TS.utility.strLooksLikeAChannelId(r) && TS.utility.ensureInArray(t, r));
          }), {
            c_ids: t,
            m_ids: n
          };
        },
        calculateOptions: function(e, t) {
          return O(e, t);
        },
        formatWithOptions: function(e, t, n) {
          if (!$.trim(e)) return "";
          var i = O(t, n);
          return F(e, t, i);
        },
        applyStringifyTransformsToChildren: function(e, t) {
          if (!e) return !1;
          if (_.isObject(t) || (t = {}), !e.childElementCount) return !1;
          if (1 !== e.childNodes.length || 1 !== e.firstChild.nodeType || !e.firstChild.hasAttribute("data-stringify-requires-siblings")) return _.each(e.querySelectorAll("pre br"), function(e) {
            e.parentElement.replaceChild(document.createTextNode("\n"), e);
          }), _.filter(e.querySelectorAll("*"), function(e) {
            if (!U(e)) return !1;
            if (_.isFunction(t.excludeFn) && t.excludeFn(e)) return !1;
            var n;
            n = _.isFunction(t.customFn) && t.customFn(e) ? t.customFn(e) : TS.format.stringifyNode(e);
            var i = n !== e.textContent;
            return i && (e.textContent = n), i;
          }).length > 0;
        },
        formatSelection: function(e, t) {
          if (e && e.rangeCount) {
            if (_.isObject(t) || (t = {}), 1 !== e.rangeCount) return void TS.info("TS.format.formatSelection: found " + e.rangeCount + " ranges");
            var n, i = e.getRangeAt(0);
            if (_.isElement(i.commonAncestorContainer)) {
              if (TS.model.is_safari_desktop) {
                if (i.commonAncestorContainer.querySelectorAll("ts-message").length > 1) return;
              }
              var r = i.commonAncestorContainer.cloneNode();
              r.appendChild(i.cloneContents()), r.classList.add("offscreen", "user_select_text"), i.commonAncestorContainer.parentElement.appendChild(r);
              r.innerHTML = r.innerHTML.replace(/&nbsp;/g, "\ufeff"), r.lastChild && !r.lastChild.textContent && r.removeChild(r.lastChild), TS.format.applyStringifyTransformsToChildren(r, t);
              var a = TS.selection.snapshot();
              e = TS.selection.selectNodeContents(r), n = e.toString();
              var s = new RegExp("\ufeff", "g");
              n = n.replace(/ {2}/g, " ").replace(s, " "), r.parentElement.removeChild(r), a();
            } else n = e.toString();
            return n = TS.format.replaceUnicodeDoppelgangers(n), n = n.replace(/^\n+/, ""), n = n.replace(/\n+$/, "");
          }
        },
        formatSelectionAsHTML: function(e) {
          if (!e || !e.rangeCount) return "";
          1 !== e.rangeCount && TS.info("TS.format.formatSelection: found " + e.rangeCount + " ranges");
          var t = e.getRangeAt(0),
            n = document.createElement("div");
          return n.appendChild(t.cloneContents()), n.innerHTML;
        },
        stringifyNode: function(e) {
          if (!e) return "";
          if (!U(e)) return e.textContent;
          var t = e.textContent;
          return _.each(S, function(n, i) {
            e.hasAttribute(i) && (t = n(e, t));
          }), t;
        },
        swapInAts: function(e) {
          return e ? e.replace(new RegExp(k, "g"), "@").replace(new RegExp(x, "g"), "-").replace(new RegExp(M, "g"), "_") : e;
        },
        swapOutAts: function(e) {
          return e ? e.replace(/@/g, k).replace(/-/g, x).replace(/_/g, M) : e;
        },
        test: function() {
          var e = {
            encodeSpecialFormattingChars: A,
            encodeSpecialFormattingCharsAndColon: E,
            getTokenMap: T
          };
          return Object.defineProperty(e, "_hasStringifyTransformations", {
            get: function() {
              return U;
            },
            set: function(e) {
              U = e;
            }
          }), e;
        }
      });
      var o = [],
        l = [],
        d = {};
      TS.model.BROADCAST_KEYWORDS.forEach(function(e) {
        o.push(e.ms_name), d[e.ms_name] = e.name, l.push({
          regex: new RegExp("^@(" + e.name + "|" + TS.i18n.deburr(e.name) + ")[.|\\-|_]*$"),
          cmd: e.cmd,
          name: "!" + e.name
        }), e.ms_name !== e.name && l.push({
          regex: new RegExp("^@" + e.ms_name + "[.|\\-|_]*$"),
          cmd: e.cmd,
          name: "!" + e.ms_name
        }), e.alias && (o.push(e.alias), l.push({
          regex: new RegExp("^@" + e.alias + "[.|\\-|_]*$"),
          cmd: "<!" + e.alias + ">",
          name: "!" + e.alias
        }));
      });
      var c = /((?:#[A-Fa-f0-9]{6} {0,}, {0,}){7})(#[A-Fa-f0-9]{6})(\b)/g,
        u = /(^|\s|\{|\[|\(|&gt;|&lt;|\*|_|\/|"|“|‘|')(@([\w|.|-]+))/g;
      TS.boot_data.feature_localization || !TS.boot_data.feature_shared_channels_client || TS.boot_data.feature_name_tagging_client || (u = /(^|\s|\{|\[|\(|&gt;|&lt;|\*|_|\/|"|“|‘|')(@([\w.\-+]+))/g), !TS.boot_data.feature_localization || TS.boot_data.feature_shared_channels_client || TS.boot_data.feature_name_tagging_client || (u = /(^|\s|\{|\[|\(|&gt;|&lt;|\*|_|\/|"|“|‘|')(@([^~`!@#$%^&*()+=[\]{}\\|;:'"”’,<>\/?\s]+))/g), TS.boot_data.feature_localization && TS.boot_data.feature_shared_channels_client && !TS.boot_data.feature_name_tagging_client && (u = /(^|\s|\{|\[|\(|&gt;|&lt;|\*|_|\/|"|“|‘|')(@([^~`!@#$%^&*()=[\]{}\\|;:'"”’,<>\/?\s]+))/g);
      var m, p = /(^|\s|\{|\[|\(|&gt;|&lt;|\*|_|\/|"|“|‘|')(#([^~`!@#$%^&*()+=[\]{}\\|;:'"”’,.<>\/?\s]+))/g,
        f = /(^|\s|[_*?.,\-!^;:{([%$#+=\u2000-\u206F\u2E00-\u2E7F"])```([\s\S]*?)?```(?=$|\s|[_*?.,\-!^;:})\]%$#+=\u2000-\u206F\u2E00-\u2E7F…"])/g,
        h = /(^|\s|[?.,\-!^;:{([%$#+=\u2000-\u206F\u2E00-\u2E7F"])`([^`]*?\S *)?`/g,
        g = /(^|\n)&gt;(?![\W_](?:&lt;|&gt;|[|\/\\[\]{}()Dpb](?=\s|$)))(([^\n]*)(\n&gt;[^\n]*)*)/g,
        S = {
          "data-stringify-text": function(e) {
            return e.getAttribute("data-stringify-text");
          },
          "data-stringify-prefix": function(e, t) {
            return e.getAttribute("data-stringify-prefix") + t;
          },
          "data-stringify-suffix": function(e, t) {
            return t + e.getAttribute("data-stringify-suffix");
          }
        },
        T = function() {
          var e = {
            "<QUOTE:START>": '<div class="special_formatting_quote"><div class="quote_bar"><div class="shim"></div></div><div class="content dynamic_content_max_width">',
            "<QUOTE:PREFIX>": '<span class="copyonly">&gt;</span>',
            "<LONGQUOTE:PREFIX>": '<span class="copyonly">&gt;&gt;&gt;</span>',
            "<QUOTE:END>": "</div></div>",
            "<LINK:END>": "</a>",
            "<LINE:BREAK>": "<br>",
            "<PARA:BREAK>": '<span class="para_break"><i class="copy_only"><br></i></span>',
            "<SPACE:HARD>": "&nbsp;"
          };
          return e["<B:START>"] = '<b data-stringify-prefix="*" data-stringify-suffix="*" data-stringify-requires-siblings>', e["<B:END>"] = "</b>", e["<STRIKE:START>"] = '<strike data-stringify-prefix="~" data-stringify-suffix="~" data-stringify-requires-siblings>', e["<STRIKE:END>"] = "</strike>", e["<CODE:START>"] = '<code class="special_formatting" data-stringify-prefix="`" data-stringify-suffix="`" data-stringify-requires-siblings>', e["<CODE:END>"] = "</code>", e["<I:START>"] = '<i data-stringify-prefix="_" data-stringify-suffix="_" data-stringify-requires-siblings>', e["<I:END>"] = "</i>", e["<PRE:START>"] = '<pre class="special_formatting" data-stringify-prefix="```" data-stringify-suffix="```" data-stringify-requires-siblings>', e["<PRE:END>"] = "</pre>", e;
        },
        b = T(),
        v = [],
        y = 0,
        w = "^$-+—!?][{}^$-+—!?][{}^$-+—!?][{}^$-+—!?][{}^$-+—!?][{}^$-+—!?][{}^$-+—!?][{}".split("").sort(function() {
          return .5 - Math.random();
        }).join(""),
        k = "thisreplacementtokenallowsustotreatatsymbolsasiftheywerewordcharactersinregex".split("").sort(function() {
          return .5 - Math.random();
        }).join(""),
        x = "thisreplacementtokenallowsustotreatdashesasiftheywerewordcharactersinregex".split("").sort(function() {
          return .5 - Math.random();
        }).join(""),
        M = "thisreplacementtokenallowsustotreatdashesasiftheywerewordcharactersinregex".split("").sort(function() {
          return .5 - Math.random();
        }).join(""),
        C = function(e, t) {
          var n = e.slice(t.length);
          return t + TS.format.tokenizeStr(v, n);
        },
        I = function(e) {
          if (TS.boot_data.feature_tinyspeck) {
            var t = TS.interop.format.locateHighlightWords(e, TS.model.highlight_words);
            return _.forEachRight(t, function(t) {
              var n = t.index,
                i = n + t.length,
                r = e.slice(n, i),
                a = e.slice(0, n),
                s = '<span class="mention">' + r + "</span>",
                o = e.slice(i);
              e = a + s + o;
            }), e;
          }
          var n = TS.model.highlight_words.concat();
          n.sort(function(e, t) {
            return t.length - e.length;
          });
          var i = !1; - 1 != e.indexOf("@") && (i = !0, e = TS.format.swapOutAts(e));
          var r;
          return n.forEach(function(t) {
            i && (t = TS.format.swapOutAts(t)), t = TS.utility.regexpEscape(t), "don" === t && (t += "(?!['’]t)"), t = _.escape(t), r = i ? new RegExp("(\\b(?!.)|_|\\s|^)(" + t + ")(\\b|,*)((?!.)|_|\\s|$)", "ig") : new RegExp("(\\b|_|\\s|^)(" + t + ")(\\b)(|_|\\s|$)", "ig");
            var n = 0;
            e = e.replace(r, function(e, t, i, r, a, s, o) {
              if ("&" === o.substr(s - 1, 1) && ";" === o.substr(s + e.length, 1)) return e;
              if (o.substr(0, s).match(/</))
                for (var l = s; l >= n; l -= 1) {
                  if ("<" === o.charAt(l)) return t + i + r;
                  if (">" === o.charAt(l)) break;
                }
              return n = s + e.length, t + '<span class="mention">' + i + "</span>" + r + a;
            });
          }), i ? TS.format.swapInAts(e) : e;
        },
        A = function(e) {
          return e ? e.replace(/\*/g, "&ast;").replace(/_/g, "&#95;").replace(/`/g, "&#96;") : "";
        },
        E = function(e) {
          return e ? A(e).replace(/:/g, "&#58;") : "";
        },
        O = function(e, t) {
          t = t || {};
          var n = !!t.do_inline_imgs || void 0,
            i = !!t.for_growl || void 0,
            r = !!t.for_edit || void 0,
            a = !!t.no_highlights || void 0,
            s = !!t.no_specials || void 0,
            o = !!t.enable_slack_action_links || void 0,
            l = !!t.no_jumbomoji || void 0,
            d = !!t.no_preformatted || void 0,
            c = t.custom_linebreak || void 0,
            u = !!t.stop_animations || void 0,
            m = !!t.no_emoji_text || void 0,
            p = !!t.transform_missing_emoji || void 0,
            f = !!t.show_icon_for_emoji_in_as_text_mode || void 0,
            h = !!t.ignore_emoji_mode_pref || void 0,
            g = !!t.prevent_copy_paste || void 0,
            S = TS.boot_data.feature_new_broadcast && !!t.no_linking || void 0,
            T = TS.boot_data.feature_new_broadcast && t.token_overrides || void 0,
            b = t.emoji_mode;
          !_.isString(b) && TS.model && TS.model.prefs && (b = TS.model.prefs.emoji_mode), !0 !== l && (l = !TS.model.prefs.jumbomoji), a = e && "no_highlights" in e ? !!e.no_highlights : !!a, _.isBoolean(s) || (s = !!(e && "mrkdwn" in e) && !1 === e.mrkdwn), r && (s = !0);
          var v = e && e.no_emoji,
            y = !(n && (!e || "bot_message" !== e.subtype));
          !0 !== y && (y = !!TS.model.prefs.hide_hex_swatch);
          var w = !y && TS.client && TS.model.team,
            k = "NORMAL";
          return s && (k = "NOMRKDWN"), i && (k = "GROWL"), r && (k = "EDIT"), {
            tsf_mode: k,
            no_highlights: a,
            no_emoji: v,
            no_hex_colors: y,
            do_inline_imgs: n,
            enable_slack_action_links: o,
            do_theme_install_buttons: w,
            no_jumbomoji: l,
            no_preformatted: d,
            custom_linebreak: c,
            stop_animations: u,
            no_emoji_text: m,
            transform_missing_emoji: p,
            show_icon_for_emoji_in_as_text_mode: f,
            ignore_emoji_mode_pref: h,
            prevent_copy_paste: g,
            no_linking: S,
            token_overrides: T,
            emoji_mode: b
          };
        },
        F = function(e, n, i) {
          var r = i.tsf_mode,
            a = i.no_highlights,
            s = i.no_emoji,
            o = i.no_hex_colors,
            l = i.do_inline_imgs,
            d = i.enable_slack_action_links,
            u = i.do_theme_install_buttons,
            m = i.no_jumbomoji,
            p = i.no_preformatted,
            f = i.custom_linebreak,
            h = i.stop_animations,
            g = i.no_emoji_text,
            S = i.transform_missing_emoji,
            T = i.show_icon_for_emoji_in_as_text_mode,
            v = i.ignore_emoji_mode_pref,
            y = i.prevent_copy_paste,
            w = i.no_linking,
            k = i.token_overrides,
            x = i.emoji_mode,
            M = b;
          if (f || k) {
            var C = k || {};
            f && (C["<LINE:BREAK>"] = f), M = _.extend({}, M, C);
          }
          var A = [];
          if (u) {
            var E = (e.match(c) || []).length,
              O = [],
              F = 0;
            e = e.replace(c, function(e, t, n) {
              F += 1;
              var i = E > 1 ? j(e, F) : j(e);
              O.push(i);
              var r = E > 1 ? " (" + F + ")\t" : "";
              return t + TS.format.tokenizeStr(A, "<nobr>", ",") + n + r + TS.format.tokenizeStr(A, "</nobr>");
            }), e += TS.format.tokenizeStr(A, L(O));
          }
          var U, G = TS.boot_data.feature_parsed_mrkdwn && "NORMAL" === r && n && n.cached_formatting && e === n.text;
          U = G ? n.cached_formatting : TSF.getTokensArray($.trim(e), r, {
            jumbomoji: !m
          }), p && (U = U.map(t)), w && (U = _.reject(U, N));
          var W, q, z, K, V = "";
          if ("GROWL" === r || "EDIT" === r)
            for (q = 0; q < U.length; q += 1)
              if (W = U[q], 0 === W.indexOf("<")) M[W] ? TS.error('unexpected: mode == "GROWL" || "EDIT", and yet we got something in the formatting map? ' + W) : 0 === W.indexOf("<!") ? V += H(r, W) : 0 === W.indexOf("<@") ? (K = R(r, W), V += K) : 0 === W.indexOf("<#") ? V += B(r, W) : TS.error('unexpected: mode == "GROWL" || "EDIT", and yet we got ' + W);
              else if (-1 == W.indexOf("<"))
            if ("EDIT" === r) TS.boot_data.feature_localization && TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE && (W = TSFEmoji.translateEmojiStringToLocal(W, TS.i18n.locale())), V += _.unescape(W);
            else if (TS.utility.platformSupportsHtmlNotifications()) TS.utility.platformSupportsImgEmojiInHtmlNotifications() && (V += TS.emoji.graphicReplace(W, {
            force_img: !0,
            stop_animations: h
          }));
          else {
            var Y = _.unescape(W);
            Y = TS.emoji.maybeUnifiedReplace(Y), TS.boot_data.feature_localization && TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE && (W = TSFEmoji.translateEmojiStringToLocal(W, TS.i18n.locale())), V += Y;
          } else TS.error("token has a < in it but it is not the first character!\n" + W);
          else {
            var J, Q, X, Z = "";
            for (q = 0; q < U.length; q += 1)
              if (W = U[q], 0 === W.indexOf("<"))
                if (M[W]) V += M[W], W == TSF.LINK_END && (V += Z, Z = "");
                else if (0 === W.indexOf("<!")) V += H(r, W, a, w);
            else if (0 === W.indexOf("<@")) K = R(r, W, a, w), V += K;
            else if (0 === W.indexOf("<#")) V += B(r, W, w);
            else if (0 === W.indexOf(TSF.LINK_START.split(" ")[0])) {
              var ee, te = function(e) {
                  var t = $.trim(e.replace(TSF.LINK_START.split(" ")[0], ""));
                  return t.substr(0, t.length - 1);
                }(W),
                ne = TS.utility.getBotIDFromURL(te),
                ie = "",
                re = "";
              if (ne && ((ee = TS.bots.getBotById(ne)) || (TS.warn("No bot found for " + ne), n.source_team_id && (ee = {
                  id: ne,
                  name: TS.bots.getBotNameByBotLink(n.text),
                  source_team_id: n.source_team_id
                }))), ne && ee) X = !0, z = TS.utility.shouldLinksHaveTargets() ? 'target="' + te + '" ' : "", Q = a ? ee.name : I(ee.name), U[q + 1] && U[q + 1] == te && (Q = te), Q = Q.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;"), ee.app_id && (ie = ee.app_id), ee.source_team_id && (re = "data-team-id=" + ee.source_team_id + " "), V += '<a href="' + te + '" ' + z + 'data-bot-id="' + ne + '" data-app-id="' + ie + '" ' + re + 'class="internal_bot_link app_preview_link">' + Q;
              else if (0 === te.indexOf(TS.utility.msgs.api_url_prefix + "chat.help")) d ? (J = _.escape(JSON.stringify("" + te)), V += '<a onclick="TS.utility.msgs.doApiUrl(' + J + ')" class="api_url">') : V += '<a class="api_url muted">(Disabled) ';
              else if (0 === te.indexOf(TS.utility.msgs.new_api_url_prefix)) d ? (J = _.escape(JSON.stringify("" + te)), V += '<a onclick="TS.utility.msgs.doNewApiUrl(' + J + ')" class="api_url">') : V += '<a class="api_url muted">(Disabled) ';
              else if (0 === te.indexOf("javascript:")) V += '<a onclick="TS.client.msg_pane.maybeClick(this)" data-maybe-click="' + te.replace("javascript:", "") + '">';
              else if (TS.client && TS.client.core_url && 0 === te.indexOf(TS.client.core_url)) V += '<a target="_self" href="' + te + '">';
              else {
                var ae = TS.utility.getFileIDFromURL(te),
                  se = !1;
                if (ae && TS.model && TS.model.user && TS.model.user.is_primary_owner) {
                  var oe = !!TS.files && TS.files.getFileById(ae);
                  oe && TS.utility.welcome_post && oe.name == TS.utility.welcome_post.WELCOME_POST_NAME && (se = !0);
                }
                var le = se ? "file_new_window_link welcome_post_slackbot_message" : "file_preview_link",
                  de = ae ? ' class="no_jumbomoji ' + le + '"' : "",
                  ce = ae ? ' data-file-id="' + ae + '"' : "";
                V += "<a " + TS.utility.makeRefererSafeLink(te) + ' target="_blank"' + de + ce + ">", Z && TS.error("WTF we should have no attach_html"), Z = "";
                var _e;
                n && n.ts && l && (_e = TS.inline_attachments.getAttachmentByFromUrl(n.attachments, te)) && (TS.boot_data.feature_attachments_inline || TS.templates.builders.shouldDoSimpleAttachment(_e, n)) && (Z = TS.templates.builders.buildAttachmentHTML({
                  attachment: _e,
                  url: te,
                  msg: n,
                  show_initial_caret: !0
                }));
              }
            } else 0 === W.indexOf(TSF.JUMBOMOJI_COLONS.split(" ")[0]) ? V += D(W, {
              tsf_mode: r,
              no_emoji: s,
              do_jumbomoji: !m,
              stop_animations: h,
              no_emoji_text: g,
              transform_missing_emoji: S,
              show_icon_for_emoji_in_as_text_mode: T,
              ignore_emoji_mode_pref: v,
              emoji_mode: x
            }) : 0 === W.indexOf(TSF.EMOJI_COLONS.split(" ")[0]) ? V += D(W, {
              tsf_mode: r,
              no_emoji: s,
              do_jumbomoji: !1,
              stop_animations: h,
              no_emoji_text: g,
              transform_missing_emoji: S,
              show_icon_for_emoji_in_as_text_mode: T,
              ignore_emoji_mode_pref: v,
              emoji_mode: x
            }) : 0 === W.indexOf(TSF.HEX_BLOCK.split(" ")[0]) ? V += P(r, W, o) : TS.error("markup token not handled:" + W);
            else -1 === W.indexOf("<") ? X ? X = !1 : (a || (W = I(W)), y && (W = _.map($.parseHTML(W), function(e) {
              return e.nodeType === Node.TEXT_NODE ? '<span class="prevent_copy_paste" aria-label="' + _.escape(e.textContent) + '"></span>' : e.outerHTML;
            }).join("")), V += W) : TS.error("token has a < in it but it is not the first character!\n" + W);
          }
          if (n && ("sh_room_created" === n.subtype || "sh_room_shared" === n.subtype)) {
            var ue = TS.ui.growls.extractFromNameFromCorGMessage(n);
            ue && (("GROWL" !== r || TS.utility.platformSupportsHtmlNotifications()) && (ue = _.escape(ue)), ue += ": "), V = "sh_room_created" === n.subtype ? TS.i18n.t("{from_name} Started a call", "string_format")({
              from_name: ue
            }) : TS.i18n.t("{from_name} Shared a call", "string_format")({
              from_name: ue
            });
          }
          return V = TS.format.deTokenizeStr(A, V);
        },
        B = function(e, t, n) {
          var i, r = t.replace(/<|>|#/g, ""),
            a = r.split("|"),
            s = a[0],
            o = TS.channels.getChannelById(s);
          if (TS.boot_data.feature_tinyspeck) {
            var l = a[1],
              d = o ? o.name : "",
              c = TS.interop.format.formatChannelName({
                fallbackName: l,
                isUserRestricted: TS.model.user.is_restricted,
                channelName: d
              });
            return !o || "GROWL" === e || "EDIT" === e || n ? c : (i = TS.utility.shouldLinksHaveTargets() ? 'target="/archives/' + o.id + '"' : "", '<a href="/archives/' + o.id + '" ' + i + ' data-channel-name="' + o.name + '" data-channel-id="' + o.id + '" class="internal_channel_link">' + c + "</a>");
          }
          return o ? "GROWL" === e || "EDIT" === e || n ? "#" + o.name : (i = TS.utility.shouldLinksHaveTargets() ? 'target="/archives/' + o.id + '"' : "", '<a href="/archives/' + o.id + '" ' + i + ' data-channel-name="' + o.name + '" data-channel-id="' + o.id + '" class="internal_channel_link">#' + o.name + "</a>") : a.length > 1 && a[1] ? "#" + a[1] : TS.model.user.is_restricted ? "#unknown-channel" : "#deleted-channel";
        },
        D = function(e, t) {
          t = t || {};
          var n = e.split(" ")[1].replace(">", "");
          if (t.no_emoji) return n;
          var i;
          return i = t.transform_missing_emoji && !TS.emoji.isValidName(n) ? TS.emoji.MISSING_EMOJI_HTML : t.show_icon_for_emoji_in_as_text_mode && "as_text" === t.emoji_mode ? TS.emoji.graphicReplace(n, {
            show_icon_for_emoji_in_as_text_mode: !0
          }) : TS.emoji.graphicReplace(n, {
            obey_emoji_mode_pref: !t.ignore_emoji_mode_pref,
            include_title: !0,
            include_text: !t.no_emoji_text,
            jumbomoji: t.do_jumbomoji,
            stop_animations: t.stop_animations
          }), i && -1 !== i.indexOf(">>") && TS.warn("TS.emoji.graphicReplace may be malformed: " + i), i;
        },
        R = function(e, t, n, i) {
          var r = t.replace(/<|>/g, ""),
            a = TS.utility.msgs.getMemberFromMemberMarkup(r),
            s = TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics);
          if ("unknown_members" === s && a && "EDIT" !== e && "GROWL" !== e) {
            if (a.is_unknown) return TS.templates.message_member_unknown();
            if (a.is_non_existent && TS.interop.utility.looksLikeMemberId(a.id)) return TS.templates.message_member_non_existent();
          }
          if (!a) {
            if ("GROWL" === e) return t;
            var o = r.split("|");
            return o.length > 1 && o[1] ? "@" + o[1] : (!TS.boot_data.feature_shared_channels_client && TS.interop.utility.looksLikeMemberId(r) && setTimeout(function() {
              if (!TS.members.getMemberById(r)) {
                TS.console.logError({
                  item: t,
                  guts: r,
                  tsf_mode: e,
                  no_highlights: n,
                  no_linking: i
                }, "", "member_not_found_in_markup", !0);
              }
            }, 3e4), "unknown_members" !== s && TS.interop.utility.looksLikeMemberId(r) ? TS.templates.message_member_non_existent() : r);
          }
          var l = ["internal_member_link"],
            d = {
              "member-id": a.id,
              "member-name": a.name,
              "stringify-text": "@" + a.id
            };
          if (a.is_bot && a.profile) {
            var c = _.get(a.profile, "bot_id");
            if (c) {
              d["bot-id"] = c;
              var u = TS.bots.getBotById(c);
              _.get(u, "app_id") && (d["app-id"] = u.app_id);
            }
            l = _.pull(l, "internal_member_link"), l.push("app_preview_link");
          }
          var m = "";
          _.forEach(d, function(e, t) {
            m += "data-" + t + '="' + e + '" ';
          });
          var p, f = "@" + a.name;
          return TS.boot_data.feature_texty_mentions ? (TS.boot_data.feature_name_tagging_client && (f = TS.members.getPrefCompliantMemberName(a, !0, !0)), "EDIT" === e ? TS.boot_data.feature_name_tagging_client ? "<@" + a.id + "|" + f + ">" : "@" + a.name : "GROWL" !== e && TS.permissions.members.canUserSeeMember(a) ? (p = TS.utility.shouldLinksHaveTargets() ? 'target="/team/' + a.id + '" ' : "", a.id == TS.model.user.id && l.push("mention"), i ? f : (m += 'data-member-label="' + f + '" ', '<a href="/team/' + a.id + '" ' + p + m + 'class="' + l.join(" ") + '">' + f + "</a>")) : f) : "EDIT" === e || "GROWL" === e ? "@" + a.name : TS.permissions.members.canUserSeeMember(a) && !i ? (p = TS.utility.shouldLinksHaveTargets() ? 'target="/team/' + a.name + '" ' : "", n || (f = I(f)), '<a href="/team/' + a.name + '" ' + p + m + 'class="' + l.join(" ") + '">' + f + "</a>") : f;
        },
        H = function(e, t, n, i) {
          if (TS.boot_data.page_needs_enterprise && TS.boot_data.feature_default_shared_channels) {
            var r = TS.shared.getActiveModelOb() || {};
            r.is_shared && TS.channels.isChannelOrgDefault(r) && (n = !0, i = !0);
          }
          var a = t.replace(/<|>/g, ""),
            s = a.split("|"),
            l = s[0].substr(1);
          if (_.includes(o, l)) {
            if (TS.boot_data.feature_tinyspeck || TS.boot_data.feature_texty_mentions) {
              var c = TS.interop.format.formatBroadcastCommand({
                type: l,
                featureLocalization: TS.boot_data.feature_localization,
                featureNameTaggingClient: TS.boot_data.feature_name_tagging_client
              });
              return "GROWL" === e || "EDIT" === e || i ? c : '<b class="mention" data-broadcast-id="BK' + l + '" data-stringify-text="' + c + '">' + c + "</b>";
            }
            return "GROWL" === e || "EDIT" === e || i ? "EDIT" === e && TS.boot_data.feature_name_tagging_client ? "<@BK" + l + "|@" + l + ">" : "@" + l : (TS.boot_data.feature_localization && (l = d[l] || l), '<b class="mention">@' + l + "</b>");
          }
          var u = s[1] ? s[1] : l;
          if (-1 === l.indexOf("^")) return "GROWL" === e || "EDIT" === e ? "<" + u + ">" : "&lt;" + u + "&gt;";
          var m = l.split("^");
          if ("date" === (l = m.shift()) && m.length >= 2) {
            var p = m[0],
              f = m[1],
              h = TS.utility.date.formatDate(f, p, u),
              g = m.length > 2 ? m[2] : "";
            return "GROWL" === e || "EDIT" === e || !g || i ? h : "<a " + TS.utility.makeRefererSafeLink(g) + ' target="_blank">' + h + "</a>";
          }
          if ("team" === l && 1 === m.length) {
            var S = u,
              T = TS.teams.getTeamById(m[0]);
            return T && (S = T.name), "GROWL" === e || "EDIT" === e ? "*" + S + "*" : TS.templates.format_team({
              team: T,
              fallback: S
            });
          }
          if ("subteam" !== l || 1 !== m.length) return "GROWL" === e || "EDIT" === e ? "<" + u + ">" : "&lt;" + u + "&gt;";
          var b = TS.user_groups.getUserGroupsById(m[0]);
          if (b && b.handle) {
            var v = TS.utility.shouldLinksHaveTargets() ? 'target="/usergroups/' + b.id + '" ' : " ",
              y = _.escape(b.handle),
              w = n || "EDIT" === e ? "@" + y : I("@" + y),
              k = ["internal_user_group_link"];
            return "GROWL" === e || "EDIT" === e ? "EDIT" === e && TS.boot_data.feature_name_tagging_client ? "<@" + b.id + "|" + w + ">" : "@" + b.handle : i ? w : (TS.boot_data.feature_texty_mentions && (w = "@" + y, n || -1 === TS.model.highlight_words.indexOf("@" + y) || k.push("mention")), '<a href="/usergroups/' + b.id + '" ' + v + 'data-user-group-id="' + b.id + '" class="' + k.join(" ") + '" data-stringify-text="@' + y + '">' + w + "</a>");
          }
          return "GROWL" !== e && "EDIT" !== e ? u : "";
        },
        P = function(e, t, n) {
          var i = t.split(" ")[1].replace(">", "");
          return n ? "" : ' <div class="inline_color_block" style="background:' + i + ';"></div>';
        },
        j = function(e, t) {
          var n = "Switch sidebar theme";
          return t && (n += " (" + t + ")"), '<a data-theme="' + _.escape(e) + '" class="btn btn_small btn_outline very_small_top_margin very_small_bottom_margin tiny_right_margin theme_installer_btn">' + n + "</a>";
        },
        L = function(e) {
          return e && e.length ? '<br/><span class="theme_install_btns">' + e.join(" ") + "</span>" : "";
        },
        U = function(e) {
          return !(!e || e instanceof Text) && _.some(S, function(t, n) {
            return e.hasAttribute(n);
          });
        },
        N = function(e) {
          return m || (m = TSF.LINK_START.split(" ")[0]), !!_.startsWith(e, m) || e === TSF.LINK_END;
        };
    }();
  },
  2452: function(e, t) {
    ! function() {
      "use strict";

      function e(e) {
        return o[e];
      }

      function t(e, t) {
        function l(e, t, n, i) {
          var r = _.keys(k);
          n || (n = function() {
            return 0;
          });
          var a = {};
          _.each(r, function(e) {
            if (e.indexOf(t) > -1 || t.indexOf(e) > -1)
              if (Array.isArray(k[e])) _.each(k[e], function(e) {
                if (a[e.id]) {
                  var t = h(a[e.id]);
                  h(e) > t && (a[e.id] = e);
                } else a[e.id] = e;
              });
              else if (a[k[e].id]) {
              var n = h(a[k[e].id]),
                i = h(k[e]);
              i > n && (a[k[e].id] = k[e]);
            } else a[k[e].id] = k[e];
          });
          var s = [];
          return _.each(e, function(e, t) {
            var r = 0;
            k[e.id] && (r = h(k[e.id])), i && i.normalize || (r += n(e, i)), s.push({
              id: e.id,
              score: h(a[e.id]) + r,
              original_index: t
            });
          }), i && i.normalize && (s = c(s), s = _.map(s, function(t, r) {
            return t.score += n(e[r], i), t;
          })), s.sort(function(e, t) {
            return e.score === t.score ? e.original_index - t.original_index : t.score - e.score;
          }), s;
        }

        function d(n, i) {
          if (k[i] && !Array.isArray(k[i])) k[i].id === n.id ? u(k[i]) : k[i] = [k[i], m(n.id)];
          else if (Array.isArray(k[i])) {
            for (var r = !1, a = 0; a < k[i].length; a += 1)
              if (k[i][a].id === n.id) {
                u(k[i][a]), r = !0;
                break;
              }
            r || k[i].push(m(n.id));
          } else k[i] = {
            id: n.id,
            count: 1,
            visits: [Date.now()]
          };
          k[n.id] ? (u(k[n.id]), k[n.id]._reduced = !0) : (k[n.id] = m(n.id), k[n.id]._reduced = !0), t && t.recordFunc ? t.recordFunc(k) : TS.storage.storeFrecency(e, k);
        }

        function c(e) {
          var t = _.get(_.maxBy(e, "score"), "score") || 0;
          return _.map(e, function(e) {
            return e.score > 0 && (e.score = e.score / t * 100), e;
          });
        }

        function u(e) {
          e.count += 1, 10 === e.visits.length && e.visits.shift(), e.visits.push(Date.now());
        }

        function m(e) {
          return {
            id: e,
            count: 1,
            visits: [Date.now()]
          };
        }

        function p(e, t) {
          var n = {},
            i = [];
          return w(!1, function(e) {
            n[e.id] ? n[e.id].score += h(e) : n[e.id] = {
              id: e.id,
              score: h(e) + k[e.id] ? h(k[e.id]) : 0
            };
          }), i = _.toArray(n), i.sort(function(e, t) {
            return t.score - e.score;
          }), e && (i = i.slice(0, e)), t && (i = c(i)), i;
        }

        function f(e, t, n) {
          var i = {},
            r = [];
          return w(!1, function(t) {
            _.get(t, "id[0]") === e && (i[t.id] ? i[t.id].score += h(t) : i[t.id] = {
              id: t.id,
              score: h(t) + k[t.id] ? h(k[t.id]) : 0
            });
          }), r = _.toArray(i), r.sort(function(e, t) {
            return t.score - e.score;
          }), t && (r = r.slice(0, t)), n && (r = c(r)), r;
        }

        function h(e) {
          if (!e || !e.visits) return 0;
          var t = 0,
            n = e.visits.length - 1,
            i = Date.now();
          for (n; n >= 0; n -= 1) t += g(i - e.visits[n]);
          return e._reduced && (t *= r), e.count * t / e.visits.length;
        }

        function g(e) {
          var t = 0,
            r = n.length;
          for (t; t < r; t += 1)
            if (e < n[t]) return i[t];
          return 0;
        }

        function S(e) {
          return e ? k[e] : k;
        }

        function T(e) {
          k = e;
        }

        function b() {
          k = {}, TS.storage.clearFrecency(e), t && t.onClearCache && t.onClearCache();
        }

        function v() {
          var e = Object.keys(k);
          _.each(e, function(e) {
            if (_.isArray(k[e])) {
              for (var t = k[e].length; t > -1; t -= 1) y(k[e][t]) && k[e].splice(t, 1);
              k[e].length || (k[e] = null, delete k[e]);
            } else y(k[e]) && (k[e] = null, delete k[e]);
          });
        }

        function y(e) {
          return !(e && !_.isEmpty(e.visits)) || (Date.now() - e.visits[e.visits.length - 1] > a && e.count < s || void 0);
        }

        function w(e, t) {
          _.each(k, function(n) {
            !e && n._reduced || (Array.isArray(n) ? _.each(n, function(e) {
              t(e);
            }) : t(n));
          });
        }
        if (o[e]) return TS.error('namespace "' + e + '" already exists'), null;
        var k;
        k = TS.storage.fetchFrecency(e) || {}, t && t.onStart && (k = t.onStart(e));
        var x = {
          query: l,
          record: d,
          getMostCommon: p,
          getMostCommonWithPrefix: f,
          _getCache: S,
          _setCache: T,
          _clearCache: b,
          _pruneCache: v,
          _test: {
            _REDUCED_MULTIPLIER: r,
            _PRUNE_BELOW_COUNT: s,
            _traverseCache: w
          }
        };
        return o[e] = x, x;
      }
      TS.registerModule("frecency", {
        onStart: function() {},
        construct: function(e, n) {
          return t(e, n);
        },
        getExisting: function(t) {
          return e(t);
        },
        test: function() {
          return {
            _clearInstance: function(e) {
              delete o[e];
            }
          };
        }
      });
      var n = [144e5, 864e5, 2592e5, 6048e5, 2592e6, 7776e6],
        i = [100, 80, 60, 40, 20, 10],
        r = .5,
        a = n[n.length - 1],
        s = 100,
        o = {};
    }();
  },
  2453: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("fuzzy", {
        onStart: function() {},
        score: function(e, t, n) {
          return n || (n = {}), TS.fuzzy.makeFuzzyMatcher(t, n).score(e);
        },
        makeFuzzyMatcher: function(e, i) {
          var a = o(e);
          return null == i.fuzzy_limit && (i.fuzzy_limit = 1 / 0), {
            score: function(e) {
              if (!d(e, a)) return 1 / 0;
              if (!a) return 1 / 0;
              var s = r(e);
              if (!s) return 1 / 0;
              var o = n(s, a, i);
              if (!o) return 1 / 0;
              var l = t(o);
              return l > i.fuzzy_limit ? 1 / 0 : l;
            }
          };
        },
        test: function() {
          return {
            lettersToGraph: r,
            queryToLinkedList: o
          };
        }
      });
      var e = " -_'.’​()",
        t = function e(t) {
          return t ? t.count + e(t.next) : 0;
        },
        n = function(e, t, n) {
          var r = i(e, t, 0, n);
          return r || (r = _.reduce(e.jumps, function(r, a) {
            return r || a === e ? r : i(a, t, 1, n);
          }, null)), r;
        },
        i = function e(t, n, i, r) {
          if (!t) return null;
          var a;
          if (!t.visited && (t.letter === n.letter || t.ignored && n.is_separator) && (a = {
              node: t,
              count: i
            }), !a) return null;
          if (!n.next) return a;
          t.visited = !0;
          var s = e(t.next, n.next, 0, r),
            o = n.next;
          return o.is_space && o.next && (o = o.next), s || (s = _.reduce(t.jumps, function(n, i) {
            return n || (i.visited || i === t ? n : (r.search_forward_only || r.substrings_only) && i.index < t.index ? n : r.substrings_only && i.index > t.index + 2 ? n : e(i, o, 1, r));
          }, null)), t.visited = !1, s ? (a.next = s, a) : null;
        },
        r = function(e) {
          var t = e.split(""),
            n = t.shift();
          return a(n, null, t, [], 0);
        },
        a = function e(t, n, i, r, a) {
          if (!t) return null;
          var o = s(t, n, r, a);
          (!n || n.ignored && !o.ignored) && r.push(o);
          var l = e(i.shift(), o, i, r, a + 1);
          return l && (o.next = l), o;
        },
        s = function(t, n, i, r) {
          return {
            letter: t,
            ignored: -1 !== e.indexOf(t),
            next: null,
            prev: n,
            jumps: i,
            visited: !1,
            index: r
          };
        },
        o = function(e) {
          if (!e) return null;
          var t = e.split("");
          return l(t, 0);
        },
        l = function t(n, i) {
          if (i >= n.length) return null;
          var r = n[i];
          return {
            letter: r,
            is_separator: -1 !== e.indexOf(r) && (0 !== i || n.length > 1),
            is_space: " " === r,
            next: t(n, i + 1),
            index: i
          };
        },
        d = function e(t, n) {
          return !n || (TS.boot_data.feature_tinyspeck && (_.isUndefined(t) || null === t) && TS.warn("_containsAllLetters: str passed in was not defined: ", t), !(!n.is_separator && -1 === t.indexOf(n.letter)) && e(t, n.next));
        };
    }();
  },
  2455: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("google_auth", {
        isAuthed: function(e) {
          return t[e];
        },
        pollForAuthStatus: function(e, t, n, r) {
          r = r || {};
          var a, s, o = r.interval || 1e3,
            l = r.max_attempts || 1 / 0,
            d = 0,
            c = !1;
          return function r() {
            d += 1, s = TS.google_auth.isAuthed(e), s || n && n.closed ? (a = null, t(!!s)) : !c && d < l && (i(e), a = setTimeout(r, o));
          }(), {
            cancel: function() {
              a && clearTimeout(a), c = !0;
            }
          };
        },
        getAuthLink: function(e) {
          return n[e] ? Promise.resolve(n[e]) : new Promise(function(t) {
            TS.api.call("services.googlecontacts.oauth.init", {
              instance_id: e
            }).then(function(i) {
              n[e] = i.data.auth_url, t(i.data.auth_url);
            });
          });
        },
        getContactList: function(e, t) {
          return TS.google_auth.isAuthed(e) ? new Promise(function(n) {
            var i = [];
            TS.google_auth.getContactsFromAPI(e, t, i, function(e) {
              n(e || []);
            });
          }) : Promise.resolve([]);
        },
        getContactsFromAPI: function(e, t, n, i) {
          TS.api.call("services.googlecontacts.list", {
            instance_id: e,
            page: t.page,
            count: t.count
          }).then(function(r) {
            if (n.push.apply(n, r.data.contacts), !1 === r.data.all_items_fetched) t.page += 1, TS.google_auth.getContactsFromAPI(e, t, n, i);
            else {
              var a = {
                items: n,
                all_items_fetched: r.data.all_items_fetched
              };
              i(a);
            }
          });
        },
        getContactListFromQuery: function(e, t) {
          return TS.google_auth.isAuthed(e) ? new Promise(function(n) {
            TS.api.call("services.googlecontacts.search", {
              instance_id: e,
              query: t.query,
              page: t.page,
              count: t.count
            }).then(function(e) {
              var t = {
                items: e.data.contacts,
                all_items_fetched: e.data.all_items_fetched
              };
              n(t || []);
            });
          }) : Promise.resolve([]);
        },
        isAppsEmail: function(t, n) {
          if (!TS.utility.email.validateEmail(t).is_valid) return Promise.resolve({
            error_key: "invalid_email"
          });
          var i = t.split("@")[1];
          if (void 0 !== e[i]) return Promise.resolve(e[i]);
          var r, a, s = {
              email: t,
              get_info: !0
            },
            o = window.callSlackAPIUnauthed ? window.callSlackAPIUnauthed : TS.api.call;
          return new Promise(function(t) {
            o("signup.checkEmail", s, function(n, s) {
              if (r && (clearTimeout(r), r = null), n && (e[i] = {
                  is_google: "google_apps" === s.type,
                  auth_url: s.auth_url
                }), !a) return t(e[i]);
            }), n && (r = setTimeout(function() {
              return TS.log(99, "TS.google_auth.isAppsEmail timed out after " + n / 1e3 + " seconds"), r = null, a = !0, t({
                error_key: "timed_out"
              });
            }, n));
          });
        }
      });
      var e = {},
        t = {},
        n = {},
        i = function(e) {
          return new Promise(function(n) {
            TS.api.call("services.googlecontacts.oauth.hasAuth", {
              instance_id: e
            }).then(function(i) {
              var r = i.data.has_auth;
              t[e] = r, n(r);
            });
          });
        };
    }();
  },
  2456: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("groups", {
        switched_sig: new signals.Signal,
        pre_switched_sig: new signals.Signal,
        joined_sig: new signals.Signal,
        member_joined_sig: new signals.Signal,
        left_sig: new signals.Signal,
        member_left_sig: new signals.Signal,
        history_fetched_sig: new signals.Signal,
        history_being_fetched_sig: new signals.Signal,
        message_received_sig: new signals.Signal,
        message_removed_sig: new signals.Signal,
        message_changed_sig: new signals.Signal,
        marked_sig: new signals.Signal,
        unread_changed_sig: new signals.Signal,
        unread_highlight_changed_sig: new signals.Signal,
        topic_changed_sig: new signals.Signal,
        purpose_changed_sig: new signals.Signal,
        deleted_sig: new signals.Signal,
        renamed_sig: new signals.Signal,
        opened_sig: new signals.Signal,
        closed_sig: new signals.Signal,
        archived_sig: new signals.Signal,
        unarchived_sig: new signals.Signal,
        msg_not_sent_sig: new signals.Signal,
        data_retention_changed_sig: new signals.Signal,
        converted_to_shared_sig: new signals.Signal,
        shared_teams_updated_sig: new signals.Signal,
        addMsg: function(e, t) {
          var n = TS.groups.getGroupById(e);
          if (!n) return void TS.error('unknown group "' + e + '"');
          if (TS.shared.addMsg(n, t)) {
            var i = !TS.utility.msgs.isTempMsg(t);
            TS.groups.calcUnreadCnts(n, i), TS.utility.msgs.maybeTruncateMsgs(n), TS.groups.message_received_sig.dispatch(n, t), n.is_open || TS.api.call("groups.open", {
              channel: n.id
            }, TS.groups.onOpened);
          }
        },
        calcUnreadCnts: function(e, t) {
          TS.shared.calcUnreadCnts(e, TS.groups, t);
        },
        removeMsg: function(e, t) {
          var n = TS.groups.getGroupById(e);
          if (!n) return void TS.error('unknown group "' + e + '"');
          n._archive_msgs && TS.utility.msgs.spliceMsg(n._archive_msgs, t);
          var i = n.msgs;
          TS.utility.msgs.spliceMsg(i, t), TS.groups.message_removed_sig.dispatch(n, t), TS.groups.calcUnreadCnts(n, !0);
        },
        sendMsg: function(e, t, n, i) {
          return TS.shared.sendMsgGroup(e, t, TS.groups, n, i);
        },
        onSendMsg: function(e, t) {
          var n = TS.groups.getGroupById(t.SENT_MSG.channel);
          if (!n) return void TS.error("unknown group? " + t.SENT_MSG.channel);
          TS.shared.onSendMsg(e, t, n, TS.groups);
        },
        closeGroup: function(e) {
          TS.groups.getGroupById(e) && TS.api.call("groups.close", {
            channel: e
          }, TS.groups.onClosed);
        },
        onClosed: function(e, t, n) {
          if (e && t.no_op) {
            var i = TS.groups.getGroupById(n.channel);
            i && (i.is_open = !1, i.is_archived && (i.was_archived_this_session = !1), TS.model.active_group_id === i.id && TS.client && TS.client.activeChannelDisplayGoneAway(), TS.groups.closed_sig.dispatch(i));
          }
        },
        onOpened: function(e) {},
        displayGroup: function(e) {
          var t = _.defaults({}, e, {
              from_history: !1,
              replace_history_state: !1
            }),
            n = t.id;
          if (!n) return void TS.error("no group id supplied");
          var i = t.path,
            r = t.and_send_txt,
            a = t.from_history,
            o = t.replace_history_state;
          if (TS.isPartiallyBooted() && n !== TS.model.initial_cid) return TS.warn("Can't switch model objects during incremental boot; this is a programming error"), void TS.sounds.play("beep");
          TS.metrics.mark("start_channel_change_" + n);
          var l = TS.groups.getGroupById(n);
          if (!l) return void TS.error('group "' + n + '" unknown');
          if (TS.utility.msgs.maybeClearPrevLastRead(), TS.utility.msgs.maybeClearPrevLastRead(l), TS.shared.maybeClearHasAutoScrolled(), TS.shared.didDeferMessageHistoryById(l.id) && TS.shared.checkInitialMsgHistory(l, TS.groups), TS.has_pri[s] && TS.log(s, "displayGroup " + l.id + " from_history:" + a + " replace_history_state:" + o), n === TS.model.active_group_id && !o && !TS.client.activeChannelIsHidden()) return TS.warn('group "' + n + '" already displayed'), void(r && TS.groups.sendMsg(n, $.trim(r)));
          var d = !o && a,
            c = i || "/messages/" + l;
          if (TS.client.channelDisplaySwitched({
              id: n,
              path: c,
              replace_history_state: o,
              no_history_add: d
            }) && (TS.groups.pre_switched_sig.dispatch(), TS.groups.switched_sig.dispatch()), l.is_open) return void(r && TS.groups.sendMsg(n, $.trim(r)));
          TS.model.requested_group_opens[n] = {
            and_send_txt: r
          }, TS.api.call("groups.open", {
            channel: l.id
          }, TS.groups.onOpened);
        },
        setLastRead: function(e, t, n) {
          if (e.last_read === t) return !1;
          if (t.indexOf(TS.utility.date.fake_ts_unique_padder) > -1) return TS.error("bad ts:" + t), !1;
          var i = e.id + ". last_read = " + e.last_read + " -> " + t + ", reason: " + (n || "unspecified");
          if (e.last_read > t) {
            var r = TS.model.last_reads_set_by_client[e.id + "_" + t];
            if (delete TS.model.last_reads_set_by_client[e.id + "_" + t], r) return void TS.warn("NOT going back in time on group " + i);
            TS.has_pri[o] && TS.log(o, "going back in time on group " + i), TS.utility.msgs.maybeClearPrevLastRead(e), TS.utility.msgs.setPrevLastRead(e, t);
          } else TS.has_pri[o] && TS.log(o, "TS.groups.setLastRead: " + i), TS.utility.msgs.maybeClearPrevLastRead(e), TS.utility.msgs.maybeSetPrevLastRead(e, t);
          return e.last_read = t, n && (e._marked_reason = n), TS.groups.marked_sig.dispatch(e), TS.utility.msgs.maybeClearUsersCountsInfo(e), TS.groups.calcUnreadCnts(e), !0;
        },
        markMostRecentReadMsg: function(e, t, n) {
          if (!e) return void TS.error("group unknown");
          if (e.msgs && e.msgs.length || n) {
            var i = TS.utility.msgs.getMostRecentValidTs(e);
            if (!i) return void((e.msgs && e.msgs.length || !e._latest_via_users_counts) && TS.warn('no valid tses for group "' + e.id + '"???'));
            TS.groups.markReadMsg(e.id, i, t);
          }
        },
        markReadMsg: function(e, t, n) {
          var i = TS.groups.getGroupById(e);
          if (!i) return void TS.error('group "' + e + '" unknown');
          if (i.last_read !== t && TS.groups.setLastRead(i, t, n))
            if (i._marked_reason = n, TS.useRedux()) {
              TS.redux.channels.setMarkingState(i.id, !0);
            } else i.needs_api_marking = !0;
        },
        onMarked: function(e, t, n) {
          var i = TS.groups.getGroupById(n.channel);
          if (!i) return void TS.error('error no group "' + n.channel + '"');
          if (e || t && "is_archived" === t.error);
          else if (TS.useRedux()) {
            TS.redux.channels.setMarkingState(i.id, !0);
          } else i.needs_api_marking = !0;
        },
        create: function(e, t) {
          if (t = t || {}, e) {
            TS.model.created_groups[e] = !0;
            var n = t.and_invite_members_idsA ? t.and_invite_members_idsA.join(",") : "";
            return new Promise(function(i, r) {
              TS.api.call("groups.create", {
                name: e,
                _and_invite_members_ids: n,
                validate: t.validate
              }).then(function(e) {
                return i(e), TS.groups.onCreate(e.data.ok, e.data, e.args), null;
              }).catch(function(e) {
                return r(e), null;
              });
            });
          }
        },
        createChild: function(e, t, n) {
          if (TS.groups.getGroupById(e)) {
            TS.model.archives_and_recreated_groups[e] = !0;
            var i = t ? t.join(",") : "";
            TS.api.call("groups.createChild", {
              channel: e,
              _and_invite_members_ids: i
            }, function(e, t, i) {
              TS.groups.onCreate(e, t, i), n && n(e, t, i);
            });
          }
        },
        onCreate: function(e, t, n) {
          if (!e) return void("name_taken" === t.error || "restricted_action" === t.error || TS.error("failed to create group"));
          var i, r;
          if (t.group && (i = TS.groups.upsertGroup(t.group), r = t.group.id), !r) return void TS.error("no group_id?!!");
          if (!i) return void TS.error("no group?!!");
          var a = n._and_invite_members_ids ? n._and_invite_members_ids.split(",") : null;
          a && TS.api.call("groups.invite", {
            channel: r,
            users: a.join(",")
          }), TS.client && TS.groups.displayGroup({
            id: r
          });
        },
        getLeaveAction: function(e) {
          if (TS.model.user.is_ultra_restricted) return "";
          if (!TS.groups.canLeaveGroup(e)) return "";
          var t = TS.groups.getGroupById(e);
          return t.is_archived ? "close" : 1 === t.active_members.filter(function(e) {
            return !TS.members.getMemberById(e).is_bot;
          }).length ? "leave_and_archive" : "leave";
        },
        leave: function(e) {
          var t = TS.groups.getGroupById(e);
          if (!t) return void TS.error("WTF no group:" + e);
          if (TS.boot_data.feature_default_shared_channels) {
            if (!TS.permissions.channels.canMemberLeaveChannel(t, TS.model.user)) return void TS.generic_dialog.alert(TS.i18n.t("Sorry, you can’t leave <strong>{group_name}</strong>!", "channels")({
              group_name: TS.model.group_prefix + t.name
            }));
          }
          var n = TS.groups.getLeaveAction(e);
          "close" === n ? TS.shared.closeArchivedChannel(e) : "leave_and_archive" === n ? TS.channels.ui.showArchiveGroupDialog(t, !0) : "leave" === n ? TS.generic_dialog.start({
            title: TS.i18n.t("Leave {group}", "groups")({
              group: TS.model.group_prefix + t.name
            }),
            body: TS.i18n.t("<p>If you leave the private channel, you will no longer be able to see any of its messages. To rejoin the private channel, you will have to be re-invited.</p><p>Are you sure you wish to leave?</p>", "groups")(),
            go_button_text: TS.i18n.t("Yes, leave the private channel", "groups")(),
            onGo: function() {
              TS.api.call("groups.leave", {
                channel: e
              }, TS.groups.onLeave);
            }
          }) : TS.generic_dialog.alert(TS.i18n.t("Sorry, you can’t leave <strong>{group}</strong>!", "groups")({
            group: TS.model.group_prefix + t.name
          }));
        },
        onLeave: function(e, t, n) {
          if (!e) return t && "last_member" === t.error ? void TS.shared.closeArchivedChannel(n.channel) : void TS.error("failed to leave group");
          var i = TS.groups.getGroupById(n.channel);
          i && (i.msgs.length = 0, i.is_limited && (i.is_limited = !1));
        },
        setTopic: function(e, t) {
          TS.boot_data.feature_name_tagging_client && (t = TS.format.cleanMsg(t)), TS.api.call("groups.setTopic", {
            channel: e,
            topic: t
          }, TS.groups.onSetTopic);
        },
        onSetTopic: function(e) {
          e || TS.error("failed to set group topic");
        },
        setPurpose: function(e, t) {
          TS.boot_data.feature_name_tagging_client && (t = TS.format.cleanMsg(t)), TS.api.call("groups.setPurpose", {
            channel: e,
            purpose: t
          }, TS.groups.onSetPurpose);
        },
        onSetPurpose: function(e, t) {
          e || (TS.error("failed to set group purpose"), TS.channels.alertSetPurposeError(t.error));
        },
        getGroupsFilteredBy: function(e) {
          return TS.shared.getEntitiesFilteredBy("groups", e);
        },
        getGroupById: function(t) {
          if (!t) return null;
          if (TS.useRedux()) return TS.redux.channels.getGroupById(t);
          var n = TS.model.groups,
            i = e[t];
          if (i) return i;
          if (!n) return null;
          for (var r = 0; r < n.length; r += 1)
            if (i = n[r], i.id === t) return TS.warn(t + " not in _id_map?"), e[t] = i, i;
          return null;
        },
        getGroupByName: function(e) {
          if (TS.useRedux()) return TS.redux.channels.getGroupByName(e);
          e = _.toLower(e);
          var n = TS.model.groups,
            i = t[e];
          if (i) return i;
          if (!n) return null;
          for (var r = 0; r < n.length; r += 1)
            if (i = n[r], i._name_lc === e || TS.model.group_prefix + i._name_lc === e) return TS.warn(e + " not in _name_map?"), t[e] = i, t[TS.model.group_prefix + e] = i, i;
          return null;
        },
        upsertGroup: function(e, t) {
          return i(e, t);
        },
        removeGroup: function(n) {
          if (TS.useRedux()) TS.redux.channels.removeEntity(n);
          else {
            var i = TS.model.groups;
            TS.has_pri[l] && TS.log(l, 'removing group "' + n.id + '"');
            for (var r, a = 0; a < i.length; a += 1)
              if (r = i[a], r.id === n.id) {
                i.splice(a, 1);
                break;
              }
            delete e[n.id], delete t[n._name_lc], delete t[TS.model.group_prefix + n._name_lc];
          }
          TS.client && TS.model.active_group_id === n.id && TS.client.activeChannelDisplayGoneAway(), n.msgs && (n.msgs.length = 0), n.is_limited && (n.is_limited = !1), TS.groups.deleted_sig.dispatch(n);
        },
        groupRenamed: function(e) {
          var n = TS.groups.getGroupById(e.id);
          TS.useRedux() || (delete t[n._name_lc], delete t[TS.model.group_prefix + n._name_lc]);
          var i = TS.groups.upsertGroup(e);
          i._name_lc = _.toLower(i.name), TS.useRedux() || (t[i._name_lc] = i, t[TS.model.group_prefix + i._name_lc] = i), TS.groups.renamed_sig.dispatch(i);
        },
        markScrollTop: function(e, t) {
          var n = TS.groups.getGroupById(e);
          return !!n && (n.scroll_top !== t && (n.scroll_top = t, !0));
        },
        maybeLoadScrollBackHistory: function(e, t) {
          var n = TS.groups.getGroupById(e);
          return !!n && TS.shared.maybeLoadScrollBackHistory(n, TS.groups, t);
        },
        onHistory: function(e, t, n) {
          var i = TS.groups.getGroupById(n.channel);
          if (!i) return void TS.error('error no group "' + n.channel + '"');
          if (!e || !t || !t.messages) {
            TS.error("failed to get history for group " + n.channel), i.history_is_being_fetched = !1, i.history_fetch_retries = (i.history_fetch_retries || 0) + 1;
            var r = _.random(2500, 5e3);
            return TS.info("retrying history fetch on group " + i.id + " in " + r), void window.setTimeout(function() {
              TS.info("retrying history fetch on group " + i.id + ", attempt #" + (i.history_fetch_retries || "1")), TS.groups.fetchHistory(i, n, TS.groups.onHistory);
            }, r);
          }
          i.history_fetch_retries = 0, TS.shared.onHistory(i, t, n, TS.groups) || (i.history_is_being_fetched = !1, TS.groups.history_fetched_sig.dispatch(i));
          var a = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(i);
          TS.groups.calcUnreadCnts(i, a);
        },
        fetchHistory: function(e, t, n) {
          return e ? (TS.boot_data.feature_initial_scroll_position || TS.shared.maybeClearHasAutoScrolled(e), e.history_is_being_fetched = !0, e.history_fetch_failed = !1, TS.groups.history_being_fetched_sig.dispatch(e), e.history_fetch_retries > 5 ? (e.history_fetch_retries = 0, e.history_is_being_fetched = !1, e.history_fetch_failed = !0, void(TS.client && TS.client.msg_pane.updateEndMarker())) : void(e.is_private && _.startsWith(e.id, "C") ? TS.api.call("channels.history", t, n || TS.groups.onHistory) : TS.api.call("groups.history", t, n || TS.groups.onHistory))) : void TS.error('error no group "' + e + '"');
        },
        topicChanged: function(e, t, n, i) {
          e.topic || (e.topic = {}), e.topic.creator = t, e.topic.last_set = n, e.topic.value = i, TS.groups.topic_changed_sig.dispatch(e, t, i);
        },
        purposeChanged: function(e, t, n, i) {
          e.purpose || (e.purpose = {}), e.purpose.creator = t, e.purpose.last_set = n, e.purpose.value = i, TS.groups.purpose_changed_sig.dispatch(e, t, i);
        },
        getUnarchivedClosedGroups: function() {
          var e = TS.groups.getUnarchivedGroups();
          return _.reject(e, "is_open");
        },
        getUnarchivedGroups: function() {
          var e = TS.model.groups;
          return _.reject(e, "is_archived");
        },
        getActiveMembersNotInThisGroupForInviting: function(e, t, i) {
          var r = TS.shared.getModelObById(e);
          return r ? n(t, r, i) : [];
        },
        getActiveMembersForInviting: function(e) {
          return n(e);
        },
        calcActiveMembersForGroup: function(e) {
          if (e.active_members.length = 0, e.members)
            for (var t, n = 0; n < e.members.length; n += 1)(t = TS.members.getMemberById(e.members[n])) && (t.deleted || e.active_members.push(t.id));
        },
        calcActiveMembersForAllGroups: function() {
          for (var e = TS.model.groups, t = 0; t < e.length; t += 1) TS.groups.calcActiveMembersForGroup(e[t]);
        },
        createSuggestedName: function(e) {
          var t, n, i = TS.model.user.name,
            r = [],
            a = TS.model.channel_name_max_length;
          for (n = 0; n < e.length; n += 1)(t = TS.members.getMemberById(e[n])) && r.push(t);
          for (r.sort(function(e, t) {
              var n = e._name_lc,
                i = t._name_lc;
              return n < i ? -1 : n > i ? 1 : 0;
            }), n = 0; n < r.length; n += 1) t = r[n], i += "-" + t.name.split("-")[0];
          i.length > a && (i = i.substr(0, a), "-" === i.charAt(i.length - 1) && (i = i.substr(0, a - 1)));
          for (var s, o = i, l = 1; TS.channels.getChannelByName(i) || TS.groups.getGroupByName(i) || TS.members.getMemberByName(i);) s = (l + 1).toString(), l += 1, i = o + s, i.length > a && (i = o.substr(0, a - s.length) + s);
          return i;
        },
        kickMember: function(e, t) {
          if (TS.permissions.members.canKickFromGroups()) {
            var n = TS.groups.getGroupById(e);
            if (n) return TS.shared.kickMember(n, t);
          }
        },
        canLeaveGroup: function(e) {
          if (!TS.model.user.is_restricted) return !0;
          if (TS.model.user.is_ultra_restricted) return !1;
          if (TS.channels.getChannelsForUser().length) return !0;
          for (var t, n = TS.model.groups, i = 0; i < n.length; i += 1)
            if (t = n[i], !t.is_archived && t.id !== e) return !0;
          return !1;
        },
        setDataRetention: function(e, t, n, i) {
          var r = {
            channel: e,
            retention_type: parseInt($("select[name=retention_type]").val(), 10)
          };
          1 === r.retention_type && (r.retention_duration = $("#retention_duration").val()), TS.api.call("groups.setRetention", r, function(e, t, n) {
            i && i(e, t, n), e && TS.groups.data_retention_changed_sig.dispatch(n);
          });
        },
        getDataRetention: function(e, t) {
          TS.api.call("groups.getRetention", {
            channel: e
          }, t);
        }
      });
      var e = {},
        t = {},
        n = function(e, t, n) {
          if (TS.lazyLoadMembersAndBots()) throw new Error("_getActiveMembersForInvitingWorker is incomplete when flannel is enabled. It should not be used.");
          var i = [];
          if (TS.model.user.is_ultra_restricted && !e) return i;
          for (var r, a, s = n || TS.members.getActiveMembersExceptSelfAndSlackbot(), o = 0; o < s.length; o += 1) r = s[o], r.deleted || r.is_slackbot || r.is_self || r.is_ultra_restricted || (t ? (a = TS.membership.getUserChannelMembershipStatus(r.id, t), a.is_known && !a.is_member && TS.permissions.channels.canMemberJoinChannel(t, r) && i.push(r)) : i.push(r));
          return i;
        },
        i = function(n, i) {
          var s, o = TS.groups.getGroupById(n.id);
          if (delete n.unread_count, o) {
            TS.useRedux() && (o = _.assign({}, o)), TS.has_pri[l] && TS.log(l, 'updating existing group "' + n.id + '"');
            for (var d in n)
              if ("members" === d) {
                s = n.members, o.members.length = 0;
                for (var c = 0; c < s.length; c += 1) o.members.push(s[c]);
              } else "pinned_items" === d ? TS.client && (TS.pins.upsertPinnedItems(n.pinned_items), o.pinned_items = n.pinned_items) : o[d] = n[d];
            if (r(o), n = o, TS.isPartiallyBooted() && null === n.oldest_msg_ts && (n.oldest_msg_ts = TS.storage.fetchOldestTs(n.id)), TS.shared.maybeResetHistoryFetched(n), TS.client) {
              TS.shared.checkInitialMsgHistory(n, TS.groups, !0);
            }
            TS.useRedux() && (i || TS.redux.channels.replaceEntity(n));
          } else TS.useRedux() || (TS.has_pri[l] && TS.log(l, 'adding group "' + n.id + '"'), TS.model.groups.push(n)), TS.utility.ensureInArray(TS.model.all_group_ids, n.id), a(n), TS.useRedux() ? i || TS.redux.channels.addEntity(n) : (e[n.id] = n, t[n._name_lc] = n, t[TS.model.group_prefix + n._name_lc] = n), n.pinned_items && TS.client && TS.pins.upsertPinnedItems(n.pinned_items);
          if (TS.client) {
            var u = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(n);
            TS.model.active_cid === n.id ? TS.groups.calcUnreadCnts(n, u) : o || TS.groups.calcUnreadCnts(n, u);
          }
          return TS.groups.calcActiveMembersForGroup(n), n;
        },
        r = function(e) {
          if (e.is_shared && TS.boot_data.page_needs_enterprise) {
            if (e.is_global_shared) return e.shares && (e.shares = void 0), void(e.shared_team_ids && (e.shared_team_ids = void 0));
            e.shares && (e.shared_team_ids = _(e.shared_team_ids || []).concat(_.map(e.shares, "id")).value(), e.shares && (e.shares = void 0)), e.shared_team_ids = _(e.shared_team_ids || []).uniq().value();
          }
        },
        a = function(e) {
          TS.shared.setPriorityForDev(e), e.is_group = !0, e._name_lc = _.toLower(e.name), e._show_in_list_even_though_no_unreads = !1, TS.shared.maybeResetHistoryFetched(e), e.active_members = [], e.scroll_top = -1, e.history_is_being_fetched = !1, TS.useRedux() || (e.needs_api_marking = !1), e.unread_highlight_cnt = 0, e.unread_highlights = [], e.unread_cnt = 0, e.unreads = [], TS.shared.setOldestUnreadTsForId(e.id, null), e.has_fetched_history_after_scrollback = !1, TS.client ? TS._incremental_boot && e.msgs && e.msgs.length > 0 ? (e.msgs = e.msgs.map(function(t) {
            return TS.utility.msgs.processImsg(t, e.id);
          }), TS.utility.msgs.setMsgs(e, e.msgs)) : TS.utility.msgs.setMsgs(e, []) : TS.boot_data.msgs && TS.utility.msgs.ingestMessagesFromBootData(e), e.oldest_msg_ts = TS.storage.fetchOldestTs(e.id) || null, e.last_msg_input = TS.storage.fetchLastMsgInput(e.id) || null, e.has_draft = !!e.last_msg_input, TS.model.created_groups[e.name] && delete TS.model.created_groups[e.name], r(e);
        },
        s = 999,
        o = 142,
        l = 4;
    }();
  },
  2457: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("help", {
        issues_sorted_sig: new signals.Signal,
        issues: [],
        more_url: null,
        fake_api_rsps: !1,
        max_title_chars: 100,
        onStart: function() {
          if (TS.client) {
            var e = function() {
              TS.api.call("help.issues.list", {}, TS.help.onListIssues);
            };
            TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.addOnce(e) : TS.ms.connected_sig.addOnce(e);
          }
        },
        getIssueById: function(e) {
          for (var t, n = 0; n < TS.help.issues.length; n += 1)
            if (t = TS.help.issues[n], t.id == e) return t;
          return null;
        },
        onListIssues: function(e, t) {
          TS.help.fake_api_rsps ? (TS.help.more_url = "/help", TS.help.issues = [{
            id: "T00001",
            title: "issue 1",
            ts: "1111111111",
            short_text: "blah blah blah blah blah",
            state: "resolved"
          }, {
            id: "T00002",
            title: "issue 2",
            ts: "1141111111",
            short_text: "I think this is ok",
            state: "open"
          }, {
            id: "T00003",
            title: "issue 3",
            ts: "1121111111",
            short_text: "but I am not so sure abotu this",
            state: "unread"
          }, {
            id: "T00004",
            title: "issue 4",
            ts: "1161111111",
            short_text: "what about that?",
            state: "open"
          }, {
            id: "T00005",
            title: "issue 5",
            ts: "1151111111",
            short_text: "fuck it all to hell",
            state: "open"
          }, {
            id: "T00006",
            title: "issue 6",
            ts: "1171111111",
            short_text: "MORE BATTRY PLZ",
            state: "read"
          }, {
            id: "T00007",
            title: "issue 7",
            ts: "1191111111",
            short_text: "halp",
            state: "unread"
          }, {
            id: "T00008",
            title: "issue 8",
            ts: "191111111",
            short_text: "halp",
            state: "unread"
          }, {
            id: "T00009",
            title: "issue 9",
            ts: "181111111",
            short_text: "halp",
            state: "unread"
          }, {
            id: "T000010",
            title: "issue 10",
            ts: "171111111",
            short_text: "halp halp halp halp halp halp halp halp halp halp ...",
            state: "unread"
          }]) : e && (TS.help.issues = t.issues), TS.help.sortIssues(), TS.help.updateIcon();
        },
        sortIssues: function() {
          for (var e, t = {
              unread: 4,
              open: 3,
              read: 2,
              resolved: 1
            }, n = 0; n < TS.help.issues.length; n += 1) e = TS.help.issues[n], e._sorter = parseFloat((t[e.state] || 5) + "." + e.ts);
          TS.help.issues.sort(function(e, t) {
            return e._sorter < t._sorter ? 1 : e._sorter > t._sorter ? -1 : 0;
          }), TS.help.issues_sorted_sig.dispatch();
        },
        updateIcon: function() {
          for (var e, t = "normal", n = 0, i = 0; i < TS.help.issues.length; i += 1) e = TS.help.issues[i], "unread" === e.state && (t = "unread", n += 1);
          $("#flex_menu_toggle").removeClass("normal open unread").addClass(t), $("#help_icon_circle_count, .help_icon_circle_count").addClass("hidden"), n > 9 && (n = "9+"), n && $("#help_icon_circle_count, .help_icon_circle_count").removeClass("hidden").text(n);
        },
        createIssue: function(e, t) {
          var n = e.title,
            i = e.text;
          if (n) {
            i = i || "";
            var r = {
              title: n,
              text: i
            };
            e.tags && (r.tags = e.tags), TS.api.call("help.issues.create", r, function(e, r) {
              if (!e && TS.help.fake_api_rsps) {
                var a = {
                  id: Date.now(),
                  title: n,
                  ts: Date.now() / 1e3,
                  short_text: i.substr(0, 50),
                  state: "open"
                };
                setTimeout(function() {
                  TS.ms.msg_handlers.msgReceived({
                    type: "issue_created",
                    issue: a
                  });
                }, 2e3);
              }
              t && t(e, TS.help.makeErrStr(r));
            });
          }
        },
        fetchIssueDetails: function(e, t) {
          var n = TS.help.getIssueById(e);
          if (!n) return void(t && t(!1, n, "unknown issue"));
          TS.api.call("help.issues.info", {
            id: e
          }, function(e, i) {
            var r;
            TS.help.fake_api_rsps ? (e = !0, r = _.cloneDeep(n), r.comments = [{
              ts: 112211111,
              from: "eeric",
              text: "comment 1"
            }, {
              ts: 112214444,
              from: "whoop",
              text: "comment 2"
            }]) : e && (r = i.issue), TS.help.onIssueChange(r), t && t(e, n, TS.help.makeErrStr(i));
          });
        },
        markIssueRead: function(e, t) {
          var n = TS.help.getIssueById(e);
          return n ? "unread" !== n.state ? void(t && t(!0)) : void TS.api.call("help.issues.markRead", {
            id: e
          }, function(e, i) {
            if (!e && TS.help.fake_api_rsps) {
              var r = _.cloneDeep(n);
              r.state = "read", setTimeout(function() {
                TS.ms.msg_handlers.msgReceived({
                  type: "issue_change",
                  issue: r
                });
              }, 2e3);
            }
            t && t(e, TS.help.makeErrStr(i));
          }) : void(t && t(!1, "unknown issue"));
        },
        replyToIssue: function(e, t, n) {
          TS.api.call("help.issues.replyTo", {
            id: e,
            text: t
          }, function(e, t) {
            n && n(e, TS.help.makeErrStr(t), t && t.error ? t.error : "");
          });
        },
        markIssueResolved: function(e, t) {
          var n = TS.help.getIssueById(e);
          if (!n) return void(t && t(!1, "unknown issue"));
          TS.api.call("help.issues.markResolved", {
            id: e
          }, function(e, i) {
            if (TS.help.fake_api_rsps || !e && i && "ticket_closed" === i.error) {
              e = !0;
              var r = _.cloneDeep(n);
              r.state = "resolved", setTimeout(function() {
                TS.ms.msg_handlers.msgReceived({
                  type: "issue_change",
                  issue: r
                });
              }, 1e3);
            }
            t && t(e, TS.help.makeErrStr(i));
          });
        },
        onIssueChange: function(e) {
          var t = TS.help.getIssueById(e.id);
          t ? TS.help.updateIssue(e, t) : TS.help.issues.push(e), TS.help.sortIssues(), TS.help.updateIcon();
        },
        updateIssue: function(e, t) {
          _.forOwn(e, function(e, n) {
            t[n] = e;
          }), t.comments && t.comments.sort(function(e, t) {
            return e.ts < t.ts ? 1 : e.ts > t.ts ? -1 : 0;
          });
        },
        makeErrStr: function(e) {
          if (!e) return "missing data";
          if (e.ok) return null;
          if (e.error && e.info && TS.boot_data.feature_tinyspeck) try {
            return 'api error: "' + e.error + '"<br><br><div class="admin-section" style="word-wrap: break-word; word-break: break-word;">api rsp: ' + JSON.stringify(e).replace(/,/g, ", ") + "</div>";
          } catch (e) {}
          return e.error ? 'api error: "' + e.error + '"' : void 0;
        }
      });
    }();
  },
  2459: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ims", {
        switched_sig: new signals.Signal,
        pre_switched_sig: new signals.Signal,
        history_fetched_sig: new signals.Signal,
        history_being_fetched_sig: new signals.Signal,
        message_received_sig: new signals.Signal,
        message_removed_sig: new signals.Signal,
        message_changed_sig: new signals.Signal,
        marked_sig: new signals.Signal,
        closed_sig: new signals.Signal,
        unread_changed_sig: new signals.Signal,
        unread_highlight_changed_sig: new signals.Signal,
        opened_sig: new signals.Signal,
        msg_not_sent_sig: new signals.Signal,
        data_retention_changed_sig: new signals.Signal,
        onStart: function() {
          TS.useReactSidebar() && (TS.prefs.display_real_names_override_changed_sig.add(s), TS.prefs.team_display_real_names_changed_sig.add(s), TS.members.changed_profile_sig.add(a));
        },
        addMsg: function(e, t) {
          var n = TS.ims.getImById(e);
          if (!n) return void TS.error('unknown im "' + e + '"');
          if (TS.shared.addMsg(n, t)) {
            var i = !TS.utility.msgs.isTempMsg(t);
            TS.ims.calcUnreadCnts(n, i), TS.utility.msgs.maybeTruncateMsgs(n), TS.ims.message_received_sig.dispatch(n, t), n.is_open || TS.api.call("im.open", {
              user: n.user,
              return_im: !0,
              reason: "TS.ims.addMsg"
            }, TS.ims.onOpened);
          }
        },
        calcUnreadCnts: function(e, t) {
          TS.shared.calcUnreadCnts(e, TS.ims, t);
        },
        removeMsg: function(e, t) {
          var n = TS.ims.getImById(e);
          if (!n) return void TS.error('unknown im "' + e + '"');
          n._archive_msgs && TS.utility.msgs.spliceMsg(n._archive_msgs, t);
          var i = n.msgs;
          TS.utility.msgs.spliceMsg(i, t), TS.ims.message_removed_sig.dispatch(n, t), TS.ims.calcUnreadCnts(n, !0);
        },
        sendMsg: function(e, t, n, i) {
          return TS.shared.sendMsg(e, t, TS.ims, n, i);
        },
        onSendMsg: function(e, t) {
          var n = TS.ims.getImById(t.SENT_MSG.channel);
          if (!n) return void TS.error("unknown im? " + t.SENT_MSG.channel);
          TS.shared.onSendMsg(e, t, n, TS.ims);
        },
        closeImByMemberId: function(e) {
          var t = TS.ims.getImByMemberId(e);
          t && TS.ims.closeIm(t.id);
        },
        closeIm: function(e) {
          var t = TS.ims.getImById(e);
          if (t && t.is_open) {
            t.is_open = !1;
            var n = TS.model.active_im_id == e;
            n && TS.client && TS.client.activeChannelDisplayGoneAway(), TS.ims.onClosed(!0, {
              no_op: !n
            }, {
              channel: e
            }), TS.api.call("im.close", {
              channel: e
            }).catch(function() {
              t.is_open = !0, TS.ims.onClosed(!0, {
                no_op: !n
              }, {
                channel: e
              });
            });
          }
        },
        onClosed: function(e, t, n) {
          if (e && t.no_op) {
            var i = TS.ims.getImById(n.channel);
            i && TS.ims.closed_sig.dispatch(i);
          }
        },
        startImById: function(e, t, n) {
          var i = TS.ims.getImById(e);
          if (!i) return void TS.error(e + " not an im");
          TS.ims.startImByMemberId(i.user, t, n);
        },
        startImByMemberName: function(e, t, n) {
          var i = TS.members.getMemberByName(e);
          if (!i) return void TS.error("no member?? " + e);
          TS.ims.startImByMemberId(i.id, t, n);
        },
        startImByMemberId: function(e, t, n) {
          var i = TS.ims.getImByMemberId(e);
          return i && (TS.ims.isImWithDeletedMember(i) && (TS.client.archives.previous_model_ob = TS.shared.getActiveModelOb()), TS.ims.displayIm(i.id, t), i.is_open) ? (n && TS.ims.sendMsg(i.id, $.trim(n)), Promise.resolve()) : (TS.model.requested_im_opens[e] = {
            and_send_txt: n
          }, TS.api.call("im.open", {
            user: e,
            return_im: !0,
            reason: "TS.ims.startImByMemberId"
          }, TS.ims.onOpened));
        },
        promiseToStartImByMemberId: function(e, t, n, i) {
          var r = TS.ims.startImByMemberId(e, t, n, i),
            a = function() {
              var t = TS.shared.getActiveModelOb();
              return t && t.is_im && t.user === e;
            };
          return a() ? Promise.resolve() : r.then(function() {
            if (a()) return Promise.resolve();
            var t;
            return new Promise(function(e) {
              t = function() {
                if (a()) return e();
              }, TS.ims.switched_sig.add(t);
            }).timeout(3e4).finally(function() {
              delete TS.model.requested_im_opens[e], TS.ims.switched_sig.remove(t);
            });
          });
        },
        onOpened: function(e, t, n) {
          e && n.return_im && t.channel && TS.ims.upsertIm(t.channel);
        },
        displayIm: function(e, t, n) {
          if (TS.isPartiallyBooted() && e !== TS.model.initial_cid) return TS.warn("Can't switch model objects during incremental boot; this is a programming error"), void TS.sounds.play("beep");
          TS.metrics.mark("start_channel_change_" + e);
          var i = TS.ims.getImById(e);
          return i ? (TS.utility.msgs.maybeClearPrevLastRead(), TS.utility.msgs.maybeClearPrevLastRead(i), TS.shared.maybeClearHasAutoScrolled(), TS.shared.didDeferMessageHistoryById(i.id) && TS.shared.checkInitialMsgHistory(i, TS.ims), e != TS.model.active_im_id || TS.client.activeChannelIsHidden() ? (TS.client.channelDisplaySwitched({
            id: e,
            no_history_add: t
          }) && (TS.ims.pre_switched_sig.dispatch(), TS.ims.switched_sig.dispatch()), void(n && TS.ims.sendMsg(i.id, $.trim(n)))) : void(n && TS.ims.sendMsg(i.id, $.trim(n)))) : void TS.error('im "' + e + '" unknown');
        },
        setLastRead: function(e, t, n) {
          if (e.last_read == t) return !1;
          if (t.indexOf(TS.utility.date.fake_ts_unique_padder) > -1) return TS.error("bad ts:" + t), !1;
          var i = e.id + ". last_read = " + e.last_read + " -> " + t + ", reason: " + (n || "unspecified");
          if (e.last_read > t) {
            var r = TS.model.last_reads_set_by_client[e.id + "_" + t];
            if (delete TS.model.last_reads_set_by_client[e.id + "_" + t], r) return void TS.warn("NOT going back in time on im " + i);
            TS.has_pri[d] && TS.log(d, "going back in time on im " + i), TS.utility.msgs.maybeClearPrevLastRead(e), TS.utility.msgs.setPrevLastRead(e, t);
          } else TS.has_pri[d] && TS.log(d, "TS.ims.setLastRead: " + i), TS.utility.msgs.maybeClearPrevLastRead(e), TS.utility.msgs.maybeSetPrevLastRead(e, t);
          return e.last_read = t, n && (e._marked_reason = n), TS.ims.marked_sig.dispatch(e), TS.utility.msgs.maybeClearUsersCountsInfo(e), TS.ims.calcUnreadCnts(e), !0;
        },
        markMostRecentReadMsg: function(e, t, n) {
          if (!e) return void TS.error("im unknown");
          if (e.msgs && e.msgs.length || n) {
            var i = TS.utility.msgs.getMostRecentValidTs(e);
            if (!i) return void((e.msgs && e.msgs.length || !e._latest_via_users_counts) && TS.warn('no valid tses for im "' + e.id + '"???'));
            TS.ims.markReadMsg(e.id, i, t);
          }
        },
        markReadMsg: function(e, t, n) {
          var i = TS.ims.getImById(e);
          if (!i) return void TS.error('im "' + e + '" unknown');
          if (i.last_read != t && TS.ims.setLastRead(i, t, n))
            if (i._marked_reason = n, TS.useRedux()) {
              TS.redux.channels.setMarkingState(i.id, !0);
            } else i.needs_api_marking = !0;
        },
        onMarked: function(e, t, n) {
          var i = TS.ims.getImById(n.channel);
          if (!i) return void TS.error('wtf no im "' + n.channel + '"');
          if (!e)
            if (TS.useRedux()) {
              TS.redux.channels.setMarkingState(i.id, !0);
            } else i.needs_api_marking = !0;
        },
        getImsFilteredBy: function(e) {
          return TS.shared.getEntitiesFilteredBy("ims", e);
        },
        getImById: function(t) {
          if (!t) return null;
          if (TS.useRedux()) return TS.redux.channels.getImById(t);
          var n = TS.model.ims,
            i = e[t];
          if (i) return i;
          if (!n) return null;
          for (var r = 0; r < n.length; r += 1)
            if (i = n[r], i.id == t) return TS.warn(t + " not in _id_map"), e[t] = i, i;
          return null;
        },
        getDisplayNameOfUserForIm: function(e) {
          return TS.useReactSidebar() ? r(e) : TS.members.getPrefCompliantMemberName(TS.members.getMemberById(e.user));
        },
        getDisplayNameOfUserForImLowerCase: function(e) {
          return TS.members.getPrefCompliantMemberNameLowerCase(TS.members.getMemberById(e.user));
        },
        getImByUsername: function(e) {
          var t = TS.members.getMemberByName(e);
          return t ? TS.ims.getImByMemberId(t.id) : null;
        },
        getImByMemberId: function(e) {
          if (TS.useRedux()) return TS.redux.channels.getImByMemberId(e);
          var n = TS.model.ims,
            i = t[e];
          if (i) return i;
          if (!n) return null;
          for (var r = 0; r < n.length; r += 1)
            if (i = n[r], i.user == e) return TS.warn(e + " not in _member_id_map?"), t[e] = i, i;
          return null;
        },
        getFirstOpenIm: function() {
          var e, t = TS.model.ims;
          if (!t) return null;
          for (var n = 0; n < t.length; n += 1)
            if (e = t[n], e.is_open) return e;
          return null;
        },
        isImWithDeletedMember: function(e) {
          if (!e.is_im) return !1;
          var t = TS.members.getMemberById(e.user);
          return !(!t || !t.deleted);
        },
        setNameFromMember: function(e) {
          var t = TS.ims.getImByMemberId(e.id);
          t && n(t, e);
        },
        upsertIm: function(n, r) {
          var a = TS.ims.getImById(n.id);
          if (delete n.unread_count, a) {
            if (TS.useRedux() && (a = _.assign({}, a)), TS.has_pri[l] && TS.log(l, 'updating existing im "' + n.id + '"'), _.each(_.keys(n), function(e) {
                a[e] = n[e];
              }), n = a, TS.isPartiallyBooted() && null === n.oldest_msg_ts && (n.oldest_msg_ts = TS.storage.fetchOldestTs(n.id)), TS.shared.maybeResetHistoryFetched(n), TS.client && (n.is_open || n.unread_cnt)) {
              TS.shared.checkInitialMsgHistory(n, TS.ims, !0);
            }
            TS.useRedux() && (r || TS.redux.channels.replaceEntity(n));
          } else {
            TS.useRedux() || (TS.has_pri[l] && TS.log(l, 'adding im "' + n.id + '"'), TS.model.ims.push(n)), TS.utility.ensureInArray(TS.model.all_im_ids, n.id);
            var s = TS.members.getMemberById(n.user);
            i(n, s), TS.useRedux() ? r || TS.redux.channels.addEntity(n) : (e[n.id] = n, t[n.user] = n);
          }
          if (TS.client) {
            var o = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(n);
            TS.model.active_cid == n.id ? TS.ims.calcUnreadCnts(n, o) : a || TS.ims.calcUnreadCnts(n, o);
          }
          return n;
        },
        markScrollTop: function(e, t) {
          var n = TS.ims.getImById(e);
          return !!n && (n.scroll_top != t && (n.scroll_top = t, !0));
        },
        maybeLoadScrollBackHistory: function(e, t) {
          var n = TS.ims.getImById(e);
          return !!n && TS.shared.maybeLoadScrollBackHistory(n, TS.ims, t);
        },
        onHistory: function(e, t, n) {
          var i = TS.ims.getImById(n.channel);
          if (!i) return void TS.error('wtf no im "' + n.channel + '"');
          if (!e || !t || !t.messages) {
            TS.error("failed to get history for im " + n.channel), i.history_is_being_fetched = !1, i.history_fetch_retries = (i.history_fetch_retries || 0) + 1;
            var r = _.random(2500, 5e3);
            return TS.info("retrying history fetch on im " + i.id + " in " + r), void window.setTimeout(function() {
              TS.info("retrying history fetch on im " + i.id + ", attempt #" + (i.history_fetch_retries || "1")), TS.ims.fetchHistory(i, n, TS.ims.onHistory);
            }, r);
          }
          i.history_fetch_retries = 0;
          var a = TS.shared.onHistory(i, t, n, TS.ims);
          a || (i.history_is_being_fetched = !1, TS.ims.history_fetched_sig.dispatch(i));
          var s = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(i);
          TS.ims.calcUnreadCnts(i, s), TS.view && !a && i.unread_cnt && TS.client.channel_pane.rebuild("ims");
        },
        fetchHistory: function(e, t, n) {
          return e ? (TS.boot_data.feature_initial_scroll_position || TS.shared.maybeClearHasAutoScrolled(e), e.history_is_being_fetched = !0, e.history_fetch_failed = !1, TS.ims.history_being_fetched_sig.dispatch(e), e.history_fetch_retries > 5 ? (e.history_fetch_retries = 0, e.history_is_being_fetched = !1, e.history_fetch_failed = !0, void(TS.client && TS.client.msg_pane.updateEndMarker())) : void TS.api.call("im.history", t, n || TS.ims.onHistory)) : void TS.error('wtf no im "' + e + '"');
        },
        checkForOldImsToClose: function() {
          return TS.shared.checkForOldImsToClose();
        },
        setDataRetention: function(e, t, n, i) {
          var r = {
            channel: e,
            retention_type: $("select[name=retention_type]").val()
          };
          1 == r.retention_type && (r.retention_duration = $("#retention_duration").val()), TS.api.call("im.setRetention", r, function(e, t, n) {
            i && i(e, t, n), e && TS.ims.data_retention_changed_sig.dispatch(n);
          });
        },
        getDataRetention: function(e, t) {
          TS.api.call("im.getRetention", {
            channel: e
          }, t);
        }
      });
      var e = {},
        t = {},
        n = function(e, t) {
          TS._incremental_boot && e.name || (e.name = e.user), t && (e.name = t.name), e._name_lc = _.toLower(e.name);
        },
        i = function(e, t) {
          TS.shared.setPriorityForDev(e), e.is_im = !0, n(e, t), t && (t.is_slackbot ? e.is_slackbot_im = !0 : t.is_self && (e.is_self_im = !0)), TS.shared.maybeResetHistoryFetched(e), e.opened_this_session = !1, e.scroll_top = -1, e.history_is_being_fetched = !1, TS.useRedux() || (e.needs_api_marking = !1), e.unread_highlight_cnt = 0, e.unread_highlights = [], e.unread_cnt = 0, e.unreads = [], TS.shared.setOldestUnreadTsForId(e.id, null), e.has_fetched_history_after_scrollback = !1, TS.client ? TS._incremental_boot && e.msgs && e.msgs.length > 0 ? (e.msgs = e.msgs.map(function(t) {
            return TS.utility.msgs.processImsg(t, e.id);
          }), TS.utility.msgs.setMsgs(e, e.msgs)) : TS.utility.msgs.setMsgs(e, []) : TS.boot_data.msgs && TS.utility.msgs.ingestMessagesFromBootData(e), e.oldest_msg_ts = TS.storage.fetchOldestTs(e.id) || null, e.last_msg_input = TS.storage.fetchLastMsgInput(e.id) || null, e.has_draft = !!e.last_msg_input, TS.useRedux() && t && (e.is_archived = t.deleted);
        },
        r = function(e) {
          return e._display_name ? e._display_name : (e._display_name = TS.members.getPrefCompliantMemberName(TS.members.getMemberById(e.user)), e._display_name);
        },
        a = function(e) {
          var t = _.find(TS.model.ims, {
            user: e.id
          });
          t && o(t);
        },
        s = function() {
          TS.model.ims.forEach(o);
        },
        o = function(e) {
          e._display_name = void 0;
        },
        l = 4,
        d = 142;
    }();
  },
  2460: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("incoming_call", {
        div: null,
        is_showing: !1,
        default_setting: {
          onAccept: null,
          onReject: null,
          onTimeout: null,
          onShow: null,
          onEnd: null
        },
        current_setting: null,
        Q: [],
        onKeydown: function(e) {
          e.which == TS.utility.keymap.enter ? "BODY" === TS.utility.getActiveElementProp("NODENAME") && (TS.incoming_call.accept(), e.preventDefault()) : e.which == TS.utility.keymap.esc && "BODY" === TS.utility.getActiveElementProp("NODENAME") && TS.incoming_call.reject();
        },
        start: function(e) {
          if (TS.incoming_call.is_showing) return void(e.unique && TS.incoming_call.current_setting.unique == e.unique ? TS.info("redundant generic dialog not Qed: " + e.unique) : TS.incoming_call.Q.push(e));
          TS.incoming_call.current_setting = _.defaults({}, e, TS.incoming_call.default_setting);
          var t = TS.incoming_call.current_setting;
          TS.incoming_call.div || TS.incoming_call.build();
          var n = TS.incoming_call.div,
            i = TS.templates.calls_incoming_call({
              caller: e.caller,
              name: e.name,
              is_video_call: e.is_video_call,
              team: TS.model.team.name
            });
          n.empty(), n.html(i), n.find(".accept_audio").click(function() {
            TS.incoming_call.accept(!1);
          }), n.find(".accept_video").click(function() {
            TS.incoming_call.accept(!0);
          }), n.find(".reject").click(TS.incoming_call.reject), n.modal("show"), document.activeElement && document.activeElement != document.body && document.activeElement.blur(), t.onShow && t.onShow();
        },
        accept: function(e) {
          if (!TS.incoming_call.is_showing) return void TS.error("incoming call not showing?");
          var t = TS.incoming_call.current_setting;
          TS.incoming_call.div.modal("hide"), t.onAccept(e);
        },
        reject: function() {
          var e = TS.incoming_call.current_setting;
          TS.incoming_call.div.modal("hide"), e.onReject && e.onReject();
        },
        timeout: function() {
          var e = TS.incoming_call.current_setting;
          TS.incoming_call.div.modal("hide"), e.onTimeout && e.onTimeout();
        },
        end: function() {
          var e = TS.incoming_call.current_setting;
          if (TS.model.dialog_is_showing = !1, TS.incoming_call.is_showing = !1, $(window.document).unbind("keydown", TS.incoming_call.onKeydown), TS.incoming_call.div.empty(), e.onEnd && e.onEnd(), !TS.incoming_call.is_showing && TS.incoming_call.Q.length) {
            var t = TS.incoming_call.Q.shift();
            TS.incoming_call.start(t);
          }
        },
        build: function() {
          $("body").append('<div id="incoming_call" class="modal hide" data-keyboard="false" data-backdrop="static"></div>'), TS.incoming_call.div = $("#incoming_call");
          var e = TS.incoming_call.div;
          e.on("hidden", function(e) {
            e.target == this && TS.incoming_call.end();
          }), e.on("show", function(e) {
            e.target == this && (TS.model.dialog_is_showing = !0, TS.incoming_call.is_showing = !0);
          }), e.on("shown", function(t) {
            t.target == this && setTimeout(function() {
              TS.incoming_call.is_showing && (e.find(".title_input").select(), $(window.document).bind("keydown", TS.incoming_call.onKeydown));
            }, 100);
          });
        }
      });
    }();
  },
  2462: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("inline_attachments", {
        no_scrolling: !1,
        expand_sig: new signals.Signal,
        collapse_sig: new signals.Signal,
        shouldExpand: function(e, t) {
          return !!TS.model.expandable_state["attach_" + e + t.from_url] || !1 !== TS.model.expandable_state["attach_" + e + t.from_url];
        },
        shouldShow: function(e, t) {
          if (e.is_share) return !0;
          if (t && "reply_broadcast" === t.subtype) return !0;
          if ("twitter" === e.service_name && "bot_message" === t.subtype) return !0;
          if (!e.from_url) return !0;
          if (t.standalone_attachment) return !0;
          if (t && t.text && -1 == t.text.indexOf(e.from_url)) {
            if (!TS.model.ampersands_are_inconsistent_in_from_urls) return !0;
            if (-1 == t.text.indexOf(e.from_url.replace(/&/g, "&amp;"))) return !0;
          }
          if (TS.model.prefs.expand_inline_imgs) {
            if (e.audio_html) return !0;
            if (e.other_html) return !0;
            if (e.video_html) return !0;
            if (e.image_url) return !0;
            if (e.service_name && "twitter" === e.service_name.toString().toLowerCase()) return !0;
          }
          return !!TS.model.prefs.expand_non_media_attachments;
        },
        expandAllInCurrent: function() {
          TS.inline_attachments.no_scrolling = !0, $(".msg_inline_attachment_expander").trigger("click"), TS.inline_attachments.no_scrolling = !1, TS.client && TS.client.ui.instaScrollMsgsToBottom(!1);
        },
        collapseAllInCurrent: function() {
          $(".msg_inline_attachment_collapser").trigger("click");
        },
        expand: function(e, t) {
          TS.model.expandable_state["attach_" + e + t] = !0, TS.storage.storeExpandableState(TS.model.expandable_state);
          var n = "#" + TS.utility.makeSafeForDomId(e),
            i = $(n);
          if (i.length) {
            var r = TS.client && TS.client.ui.areMsgsScrolledToBottom(),
              a = function() {
                return $(this).data("real-src") == t;
              },
              s = i.find(".inline_attachment").filter(a);
            s.removeClass("hidden"), i.find(".msg_inline_attachment_expander").filter(a).addClass("hidden"), i.find(".msg_inline_attachment_collapser").filter(a).removeClass("hidden"), TS.client && !TS.boot_data.feature_no_placeholders_in_messages && TS.client.ui.checkInlineImgsAndIframesEverywhere(), s.css("opacity", 0).stop().animate({
              opacity: 1
            }, 300), TS.inline_attachments.no_scrolling || (TS.client && r ? (TS.client.ui.instaScrollMsgsToBottom(!1), i.children().first().scrollintoview({
              duration: 0,
              offset: "top",
              px_offset: 10,
              direction: "y"
            })) : s.scrollintoview({
              duration: 200,
              offset: "bottom",
              px_offset: -10,
              direction: "y"
            })), TS.inline_attachments.expand_sig.dispatch(e), TS.client && !TS.boot_data.feature_no_placeholders_in_messages && TS.client.ui.checkInlineImgsAndIframesEverywhere();
          }
        },
        collapse: function(e, t) {
          TS.model.expandable_state["attach_" + e + t] = !1, TS.storage.storeExpandableState(TS.model.expandable_state);
          var n = "#" + TS.utility.makeSafeForDomId(e),
            i = $(n);
          if (i.length) {
            var r = function() {
                return $(this).data("real-src") == t;
              },
              a = i.find(".inline_attachment").filter(r);
            a.length || (a = i.find(".msg_inline_attachment_holder").filter(r)), a.css("visibility", "hidden"), i.find(".msg_inline_attachment_expander").filter(r).removeClass("hidden"), i.find(".msg_inline_attachment_collapser").filter(r).addClass("hidden"), TS.inline_attachments.collapse_sig.dispatch(e), setTimeout(function() {
              a.addClass("hidden"), a.css("visibility", "visible");
            }, 200);
          }
        },
        checkForInlineAttachmentClick: function(e) {
          if (e.target) {
            var t, n, i = $(e.target),
              r = i.closest(".message");
            n = r.data("ts"), t = r.attr("id");
            var a = i.closest(".msg_inline_attachment_expander");
            if (a.length) {
              if (e.preventDefault(), !t) return;
              TS.inline_attachments.expand(t, a.data("real-src"));
            }
            var s = i.closest(".msg_inline_attachment_collapser");
            if (s.length) {
              if (e.preventDefault(), !t) return;
              TS.inline_attachments.collapse(t, s.data("real-src"));
            }
            var o = i.closest(".rest_text_expander");
            if (o.length) {
              e.preventDefault();
              var l, d = TS.client && TS.client.ui.areMsgsScrolledToBottom(),
                c = o.parent().find(".short_text"),
                u = o.parent().find(".more_text");
              if (o.data("show-text")) u.length && (u.addClass("hidden"), l = o.find("a span"), o.data("hide-text", l.text()), l.text(o.data("show-text")), o.data("show-text", ""), o.find("a .ts_icon").removeClass("ts_icon_caret_down").addClass("ts_icon_caret_right"));
              else {
                var m = c.attr("data-all-text");
                m && (c.html(m), c.data("all-text", "")), u.length && u.removeClass("hidden"), u.length && o.data("hide-text") ? (l = o.find("a span"), o.data("show-text", l.text()), l.text(o.data("hide-text")), o.data("hide-text", ""), o.find("a .ts_icon").removeClass("ts_icon_caret_right").addClass("ts_icon_caret_down")) : o.css("display", "none");
              }
              c.css("opacity", 0).transition({
                opacity: 1
              }, 300), TS.inline_attachments.rest_texts_expanded[o.attr("id")] = !0, TS.client && TS.ui.utility.updateClosestMonkeyScroller(c), TS.client && d && (TS.client.ui.instaScrollMsgsToBottom(!1), c.scrollintoview({
                duration: 0,
                offset: "top",
                px_offset: 10,
                direction: "y"
              }));
            }
            var p = i.closest(".delete_attachment_link");
            if (p.length) {
              e.preventDefault();
              var f = p.data("attachment-id").toString(),
                h = r.attr("data-model-ob-id"),
                g = TS.shared.getModelObById(h);
              if (!g) return void alert("missing model_ob");
              if (!f) return void alert("missing attachment-id");
              var S = g.id,
                T = TS.utility.msgs.getMsg(n, g.msgs),
                b = "";
              if (TS.model.user.is_admin) {
                var v = _.find(T.attachments, {
                  id: f
                });
                if (v && v.from_url) {
                  var y = TS.inline_attachments.makeBlackListSelect(v.from_url),
                    w = TS.i18n.t("Disable future attachments from this website?", "inline_attachments")();
                  b = '\t\t\t\t\t\t<p class="large_left_margin ' + (y ? "no_bottom_margin" : "") + '">\t\t\t\t\t\t\t<label class="checkbox normal" style="font-size: 16px;">\t\t\t\t\t\t\t\t<input id="attachment_blacklist_cb" type="checkbox" class="small_right_margin" />' + w + "</label>", y && (b += y), b += "</p>";
                }
              }
              var k = TS.i18n.t("Are you sure you wish to remove this attachment from the message?", "inline_attachments")(),
                x = '<p class="' + (b ? "small_bottom_margin" : "") + '">' + k + "</p>" + b;
              TS.generic_dialog.start({
                title: TS.i18n.t("Remove attachment", "inline_attachments")(),
                body: x,
                go_button_text: TS.i18n.t("Yes, remove", "inline_attachments")(),
                onShow: function() {
                  $("#attachment_blacklist_cb").bind("change", function() {
                    var e = !!$("#attachment_blacklist_cb").prop("checked");
                    TS.info(e), e ? $("#attachment_blacklist_select").prop("disabled", !1) : $("#attachment_blacklist_select").prop("disabled", !0);
                  });
                },
                onGo: function() {
                  if (T.is_ephemeral) T.attachments = TS.inline_attachments.removeAttachmentById(T.attachments, f), TS.utility.msgs.replaceMsg(g, T, !1, !0);
                  else {
                    var e = !!$("#attachment_blacklist_cb").prop("checked"),
                      t = e ? $("#attachment_blacklist_select").val() : "none",
                      i = e ? $("#attachment_blacklist_select").find(":selected").data("url") : "",
                      r = {
                        channel: S,
                        ts: n,
                        attachment: f,
                        blacklist_type: t,
                        blacklist_url: i
                      };
                    TS.dir(0, r), TS.api.call("chat.deleteAttachment", r, function(e) {
                      if (e) TS.web && (T.attachments = TS.inline_attachments.removeAttachmentById(T.attachments, f), TS.utility.msgs.replaceMsg(g, T));
                      else {
                        var t = TS.i18n.t("Attachment removing failed!", "inline_attachments")();
                        TS.generic_dialog.alert(t);
                      }
                    });
                  }
                }
              });
            }
          }
        },
        makeBlackListSelect: function(e) {
          if (!e) return "";
          e = _.escape(e).replace("https://", "").replace("http://", "");
          var t = "",
            n = e.split("/"),
            i = n[0],
            r = n[n.length - 1],
            a = TS.i18n.t("All links from {host}", "inline_attachments")({
              host: i
            }),
            s = TS.i18n.t("Just the link {url}", "inline_attachments")({
              url: e
            });
          if (t += '<label class="select small full_width">\r', t += '<select id="attachment_blacklist_select" disabled="disabled" class="small" style="margin-bottom: 4px;">\r', t += '<option value="all" data-url="' + i + '">' + a + "</option>\r", t += '<option value="just" data-url="' + e + '">' + s + "</option>\r", r != i) {
            TS.info(r);
            var o = n.concat();
            o.length -= 1;
            var l = o.join("/");
            if (l != i) {
              l += "/";
              t += '<option value="under" data-url="' + l + '">' + TS.i18n.t("All links under {host_path}", "inline_attachments")({
                host_path: l
              }) + "</option>\r";
            }
          }
          return t += "</select>\r", t += "</label>\r";
        },
        rest_texts_expanded: {},
        shouldExpandText: function(e) {
          return !!TS.inline_attachments.rest_texts_expanded[e];
        },
        renderStandaloneAttachment: function(e) {
          TS.inline_attachments.massageAttachment(e, 0), e.image_url && !TS.model.inline_imgs[e.from_url] && (e.from_url || (e.from_url = e.image_url), TS.inline_imgs.makeInternalInlineImg(e.from_url, {
            link_url: e.from_url,
            bytes: e.image_bytes,
            src: e.image_url,
            width: isNaN(e.image_width) ? null : e.image_width,
            height: isNaN(e.image_height) ? null : e.image_height,
            should_expand: !0
          })), e.video_html && !TS.model.inline_videos[e.from_url] && TS.inline_videos.makeInternalInlineVideo(e.from_url, {
            src: e.thumb_url,
            html: e.video_html,
            proxied_src: e.proxied_thumb_url,
            title: e.title,
            display_h: e.video_html_height,
            display_w: e.video_html_width,
            thumbnail: {
              link_url: e.from_url,
              url: e.thumb_url,
              height: e.thumb_height,
              width: e.thumb_width
            }
          });
          var t = TS.utility.date.makeTsStamp(),
            n = TS.templates.builders.buildAttachmentHTML({
              attachment: e,
              msg: {
                enable_slack_action_links: !1,
                text: e.from_url,
                ts: t,
                url: e.from_url,
                standalone_attachment: e.standalone_attachment || !1
              },
              can_delete: !1,
              maybe_show_file_viewer: !1,
              has_content: TS.utility.attachments.hasContent(e),
              from_post: !0,
              model_ob: TS.shared.getModelObById(e.channel_id)
            });
          return '<div class="message standalone-attachment" id="' + TS.templates.makeMsgDomId(t) + '" data-ts="' + t + '">' + n + "</div>";
        },
        massageAttachment: function(e, t) {
          e._index = t, "id" in e && (e.id = e.id.toString());
          var n = "",
            i = 0;
          if (e.text) {
            for (var r, a = "", s = "", o = "", l = 0, d = !1, c = 0; c < e.text.length; c += 1)
              if (r = e.text.charAt(c), s || "<" === r) s += r, (o || "|" === r) && (o += r), ">" === r && (n += s, i += o.length - 2, i > 500 && (d = !0), s = "", o = "");
              else {
                if ("\n" === r && (l += 1), l > 4) {
                  a = e.text.replace(n, "");
                  break;
                }
                if (n += r, i += 1, i > 500 && (d = !0), d && " " === r) {
                  a = e.text.replace(n, "");
                  break;
                }
              }
            e._short_text = n == e.text ? "" : n;
            var _ = n.match(/```/g),
              u = a.match(/```/g);
            _ && u && (e._short_text += "```");
          }
          e._floated_thumb_display_height = 75, e._floated_thumb_display_width = 75, e.thumb_height && e.thumb_width && (e.thumb_height > e.thumb_width ? e._floated_thumb_display_width = parseInt(e.thumb_width * (e._floated_thumb_display_height / e.thumb_height), 10) : e._floated_thumb_display_height = parseInt(e.thumb_height * (e._floated_thumb_display_width / e.thumb_width), 10));
          var m = TS.utility.getImgProxyURL(e.thumb_url, e._floated_thumb_display_width, e._floated_thumb_display_height);
          m != e.thumb_url ? e.proxied_thumb_url = m : delete e.proxied_thumb_url;
        },
        getAttachmentByFromUrl: function(e, t) {
          if (!e) return null;
          for (var n = 0; n < e.length; n += 1)
            if (e[n]) {
              if (e[n].from_url) {
                if (e[n].from_url == t) return e[n];
                if (TS.model.ampersands_are_inconsistent_in_from_urls && e[n].from_url.replace(/&/g, "&amp;") == t) return e[n];
              }
            } else TS.info(t), TS.dir(0, e);
          return null;
        },
        getAttachmentBySlackFileId: function(e, t) {
          if (!e) return null;
          if (!t) return null;
          for (var n = 0; n < e.length; n += 1)
            if (e[n] && e[n].slack_file_id == t) return e[n];
          return null;
        },
        removeAttachmentById: function(e, t) {
          if (!e) return null;
          for (var n = [], i = 0; i < e.length; i += 1) e[i].id != t && n.push(e[i]);
          return n;
        }
      });
    }();
  },
  2464: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("inline_file_previews", {
        expand_sig: new signals.Signal,
        collapse_sig: new signals.Signal,
        onStart: function() {
          l();
        },
        checkForInlineFilePreviewClick: function(e) {
          var t, n = $(e.target),
            s = n.closest(".message");
          if (0 !== s.length && !(n.hasClass("service_link") || n.closest(".service_link") > 0)) {
            var l = s.attr("id"),
              d = n.closest(".msg_inline_file_preview_toggler");
            if (d.length > 0) return e.preventDefault(), t = d.data("file-id"), d.hasClass("collapsed") ? i(l, t) : r(l, t), !0;
            var c = n.closest(".inline_file_preview_container, .file_container");
            if (0 !== c.length) {
              var _ = n.closest("ts-message"),
                u = _.data("ts") + "",
                m = _.data("model-ob-id"),
                p = {
                  message_timestamp: u,
                  channel_id: m,
                  channel_type: m ? m.charAt(0) : "",
                  member_id: _.data("member-id"),
                  app_id: _.data("app-id"),
                  bot_id: _.data("bot-id")
                };
              if (n.closest(".preview_show.preview_show_more").length > 0) return e.preventDefault(), a(e, s, c), TS.clog.track("PREVIEW_EXPAND", p), !0;
              if (n.closest(".preview_show.preview_show_less .preview_show_btn, .preview_show_less_header").length > 0) return e.preventDefault(), o(e, s, c), TS.clog.track("PREVIEW_COLLAPSE", p), !0;
              if (n.closest("a").length) return !1;
              t = c.data("file-id");
              var f = TS.files.getFileById(t);
              return !!f && (!("space" !== f.mode && "post" !== f.mode && "arugula" !== f.mode && "email" !== f.mode && "snippet" !== f.mode || !c.hasClass("inline_collapsed")) && (e.preventDefault(), a(e, s, c), !0));
            }
          }
        },
        shouldTruncate: function(e) {
          if (!e) return !1;
          if ("snippet" === e.mode) {
            if (e.lines_more > 0 || e.preview_is_truncated) return !0;
          } else if ("post" === e.mode || "space" === e.mode) {
            if (!e.preview) return !1;
            if (e.preview.length >= 400) return !0;
            if (e.preview.split(" ").length >= 50) return !0;
            if (e.preview.split("\n").length >= 4) return !0;
            var t = e.preview.match(/<\/(?:h\d|p|li|pre|blockquote)>/g) || [],
              n = e.preview.match(/<hr>/g) || [],
              i = t.concat(n);
            if (i.length >= 4) return !0;
          } else if ("email" === e.mode) return !0;
          return !1;
        },
        isTruncated: function(e, n) {
          return !!n && !t[e + "_" + n.id];
        },
        expandableState: function(e, t) {
          return !!TS.model.expandable_state["inline_file_" + e + t] || !1 !== TS.model.expandable_state["inline_file_" + e + t] && void 0;
        },
        shouldExpand: function(e, t) {
          var n = TS.inline_file_previews.expandableState(e, t);
          return "boolean" != typeof n || n;
        },
        expandAllInCurrent: function() {
          n = !0, $(".msg_inline_file_preview_toggler").each(function(e, t) {
            var n = $(t),
              r = n.data("file-id"),
              a = n.closest(".message").attr("id");
            i(a, r);
          }), n = !1, TS.client && TS.client.ui.instaScrollMsgsToBottom(!1);
        },
        collapseAllInCurrent: function() {
          $(".msg_inline_file_preview_toggler").each(function(e, t) {
            var n = $(t),
              i = n.data("file-id"),
              a = n.closest(".message").attr("id");
            r(a, i);
          });
        },
        test: function() {
          return {
            actuallyExpandContent: s
          };
        }
      });
      var e, t = {},
        n = !1,
        i = function(e, t) {
          TS.model.expandable_state["inline_file_" + e + t] = !0, TS.storage.storeExpandableState(TS.model.expandable_state);
          var i = "#" + TS.utility.makeSafeForDomId(e),
            r = $(i);
          if (r.length) {
            var a = TS.client && TS.client.ui.areMsgsScrolledToBottom(),
              s = function() {
                return $(this).data("file-id") == t;
              },
              o = r.find(".inline_file_preview_container, .file_container").filter(s);
            r.find(".msg_inline_file_title_hider").filter(s).addClass("hidden"), r.find('.msg_inline_file_preview_toggler[data-file-id="' + t + '"]').removeClass("collapsed").addClass("expanded"), o.removeClass("hidden"), TS.client && TS.client.ui.checkInlineImgsAndIframesEverywhere(), o.css("opacity", 0).stop().animate({
              opacity: 1
            }, 300), n || (TS.client && a ? (TS.client.ui.instaScrollMsgsToBottom(!1), o.scrollintoview({
              duration: 0,
              offset: "top",
              px_offset: 0,
              direction: "y"
            })) : o.scrollintoview({
              duration: 200,
              offset: "bottom",
              px_offset: 0,
              direction: "y"
            })), TS.inline_file_previews.expand_sig.dispatch(e), TS.client && TS.ui.utility.updateClosestMonkeyScroller(r);
          }
        },
        r = function(e, t) {
          TS.model.expandable_state["inline_file_" + e + t] = !1, TS.storage.storeExpandableState(TS.model.expandable_state);
          var n = "#" + TS.utility.makeSafeForDomId(e),
            i = $(n);
          if (i.length) {
            var r = function() {
                return $(this).data("file-id") == t;
              },
              a = i.find(".inline_file_preview_container, .file_container").filter(r);
            i.find(".msg_inline_file_title_hider").filter(r).removeClass("hidden"), i.find('.msg_inline_file_preview_toggler[data-file-id="' + t + '"]').removeClass("expanded").addClass("collapsed"), a.addClass("hidden"), TS.inline_file_previews.collapse_sig.dispatch(e), setTimeout(function() {
              TS.client && TS.ui.utility.updateClosestMonkeyScroller(i);
            }, 0);
          }
        },
        a = function(e, t, n) {
          var i = n.data("file-id"),
            r = TS.files.getFileById(i);
          if (r)
            if ("post" === r.mode || "space" === r.mode || "snippet" === r.mode) {
              var a = n.find(".preview_show_more .preview_show_btn");
              a.data("stashed_text", a.html()).empty();
              var o = new Spinner({
                lines: 9,
                length: 0,
                width: 4,
                radius: 5,
                corners: 1,
                rotate: 0,
                direction: 1,
                color: "#ffffff",
                speed: 1,
                trail: 25,
                shadow: !1,
                hwaccel: !1,
                className: "spinner",
                zIndex: 2e9,
                top: "-8px",
                left: "-4px",
                opacity: .1
              });
              o.spin(a.get(0)), n.addClass("loading"), TS.files.fetchFileInfo(i, function(e, i) {
                o.stop(), a.html(a.data("stashed_text")), n.removeClass("loading"), (i.content_html || i.content_highlight_html) && s(t, i), TS.utility.welcome_post.clogWelcomePostExpand(i);
              });
            } else if ("email" === r.mode)
            if (r.simplified_html) s(t, r);
            else {
              t.find(".email_content").addClass("loading");
              var l = setTimeout(function() {
                t.find(".inline_file_preview_container, .file_container").addClass("expanded");
              }, 1e3);
              TS.files.fetchFileInfo(i, function(e, n) {
                clearTimeout(l), s(t, n), t.find(".email_content").removeClass("loading");
              });
            }
        },
        s = function(e, n) {
          var i = e.attr("id"),
            r = i + "_" + n.id;
          t[r] = !0, e.find(".inline_file_preview_container, .file_container").removeClass("inline_collapsed").addClass("inline_expanded"), TS.inline_file_previews.expand_sig.dispatch(e), TS.client && TS.ui.utility.updateClosestMonkeyScroller(e);
        },
        o = function(e, i, r) {
          var a = i.attr("id"),
            s = r.data("file-id");
          TS.files.getFileById(s) && (delete t[a + "_" + s], i.find(".inline_file_preview_container, .file_container").removeClass("inline_expanded").addClass("inline_collapsed"), n || i[0].getBoundingClientRect().top < 0 && i.scrollintoview({
            duration: 0,
            offset: "top",
            px_offset: 0,
            direction: "y"
          }), TS.inline_file_previews.collapse_sig.dispatch(i), TS.client && TS.ui.utility.updateClosestMonkeyScroller(i));
        },
        l = function() {
          e && clearInterval(e);
          var t = function() {
            var e = $("#msgs_div .file_time_ago"),
              t = [];
            e.each(function() {
              var e = $(this).data("file-id"),
                n = TS.files.getFileById(e);
              if (!n) return void t.push($(this).text());
              t.push(TS.interop.datetime.toTimeAgo(n.updated)), n = null;
            }), e.each(function(e, n) {
              $(n).text(t[e]), n = null;
            }), e = null;
          };
          t = TS.utility.throttleFunc(t, 5e3), e = setInterval(t, 6e4);
        };
    }();
  },
  2466: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("inline_others", {
        no_scrolling: !1,
        expand_sig: new signals.Signal,
        collapse_sig: new signals.Signal,
        onStart: function() {},
        shouldExpand: function(e, t) {
          return !!TS.model.expandable_state["vid_" + e + t.src] || !1 !== TS.model.expandable_state["vid_" + e + t.src] && (t.internal_file_id ? TS.model.prefs.expand_internal_inline_imgs : TS.model.prefs.expand_inline_imgs);
        },
        expandAllInCurrent: function() {
          var e = $(".msg_inline_media_toggler[data-media-type=other]:not(.expanded)");
          e.length && (TS.inline_others.no_scrolling = !0, e.trigger("click"), TS.inline_others.no_scrolling = !1, TS.client && TS.client.ui.instaScrollMsgsToBottom(!1));
        },
        collapseAllInCurrent: function() {
          $(".msg_inline_media_toggler[data-media-type=other].expanded").trigger("click");
        },
        expand: function(e, t) {
          TS.model.expandable_state["vid_" + e + t] = !0, TS.storage.storeExpandableState(TS.model.expandable_state);
          var n = "#" + TS.utility.makeSafeForDomId(e),
            i = $(n);
          if (i.length) {
            var r = TS.client && TS.client.ui.areMsgsScrolledToBottom(),
              a = function() {
                return $(this).data("real-src") == t;
              },
              s = TS.boot_data.feature_attachments_inline ? i.find(".inline_attachment").filter(a) : null;
            s && s.length || (s = i.find(".msg_inline_other_holder").filter(a)), s.removeClass("hidden"), i.find(".msg_inline_media_toggler[data-media-type=other]:not(.expanded)").filter(a).addClass("expanded"), TS.client && TS.client.ui.checkInlineImgsAndIframesEverywhere(), s.css("opacity", 0).stop().animate({
              opacity: 1
            }, 300), TS.inline_others.no_scrolling || (TS.client && r ? (TS.client.ui.instaScrollMsgsToBottom(!1), i.children().first().scrollintoview({
              duration: 0,
              offset: "top",
              px_offset: 10,
              direction: "y"
            })) : i.find(".msg_inline_other").last().scrollintoview({
              duration: 200,
              offset: "bottom",
              px_offset: -10,
              direction: "y"
            })), TS.inline_others.expand_sig.dispatch(e), TS.client && TS.client.ui.checkInlineImgsAndIframesEverywhere();
          }
        },
        collapse: function(e, t) {
          TS.model.expandable_state["vid_" + e + t] = !1, TS.storage.storeExpandableState(TS.model.expandable_state);
          var n = "#" + TS.utility.makeSafeForDomId(e),
            i = $(n);
          if (i.length) {
            var r = function() {
                return $(this).data("real-src") == t;
              },
              a = TS.boot_data.feature_attachments_inline ? i.find(".inline_attachment").filter(r) : null;
            a && a.length || (a = i.find(".msg_inline_other_holder").filter(r)), a.css("visibility", "hidden"), i.find(".msg_inline_media_toggler[data-media-type=other].expanded").filter(r).removeClass("expanded"), a.find(".msg_inline_other_iframe_div").html(""), TS.inline_others.collapse_sig.dispatch(e), setTimeout(function() {
              a.addClass("hidden"), a.css("visibility", "visible");
            }, 200);
          }
        },
        checkForInlineOtherClick: function(e) {
          if (e.target) {
            var t, n = $(e.target);
            if (t = n.closest(".message").attr("id")) {
              var i = n.closest(".msg_inline_media_toggler[data-media-type=other]");
              if (i.length) {
                e.preventDefault();
                var r = i.data("real-src");
                i.hasClass("expanded") ? TS.inline_others.collapse(t, r) : TS.inline_others.expand(t, r);
              }
            }
          }
        },
        makeInternalInlineOther: function(t) {
          t.other_html_width > 400 && (t.other_html_height = parseInt(t.other_html_height * (400 / t.other_html_width), 10), t.other_html_width = 400), t.other_html_height > 500 && (t.other_html_width = parseInt(t.other_html_width * (500 / t.other_html_height), 10), t.other_html_height = 500);
          var n;
          if (t.google_map_config && (n = TS.utility.parseJSONOrElse(t.google_map_config, void 0)), n && n.center && "string" != typeof n.center.lat) {
            n.scrollwheel = !1;
            var i = "googmap_" + (e += 1);
            t.other_html = '<div class="google-maps" id="' + i + '" style="width:100%; min-width:' + _.escape(t.other_html_width) + "px; height:" + _.escape(t.other_html_height) + 'px;"></div>\t\t\t<script>TS.inline_others.runGoogleMapCode("' + i + "\", '" + JSON.stringify(n) + "')<\/script>", t.safe_other_html = t.other_html;
          } else -1 == t.other_html.indexOf("oldwidth") && (t.other_html = t.other_html.replace(" width=", ' width="' + t.other_html_width + '" oldwidth='), t.other_html = t.other_html.replace(" height=", ' height="' + t.other_html_height + '" oldheight=')), t.safe_other_html = t.other_html, t.safe_other_html = TS.utility.swapInRedirUrlForIframe(t.safe_other_html), TS.client && !TS.boot_data.feature_no_placeholders_in_messages && (t.safe_other_html = TS.utility.getPlaceholderHTMLFromIframe(t.safe_other_html)), t.safe_audio_html = TS.utility.setCssFromHeightAndWidthAttrs(t.safe_audio_html);
          TS.model.inline_others[t.other_html] = {
            src: _.escape(t.other_html),
            attachment: t
          };
        },
        runGoogleMapCode: function(e, t) {
          if (window.google && t) {
            var n = JSON.parse(t),
              i = new google.maps.Map(document.getElementById(e), n);
            if (n.query) {
              var r = new google.maps.Geocoder,
                a = "number" == typeof n.max_results ? n.max_results : 10;
              a < 0 && (a = Number.MAX_VALUE);
              var s = function() {
                google.maps.event.clearListeners(i, "bounds_changed");
                var e = i.getBounds(),
                  t = 0,
                  s = function(e) {
                    new google.maps.Marker({
                      map: i,
                      position: e.geometry.location
                    }), t += 1;
                  },
                  o = function(r, o) {
                    var l = !1;
                    if (o == google.maps.GeocoderStatus.OK ? r.slice(0, a).forEach(function(e) {
                        s(e), l = l || !e.partial_match;
                      }) : TS.warn("Geocoder failed due to: " + o), !l && t < a) {
                      var d = new google.maps.places.PlacesService(i),
                        c = function(e, n) {
                          n == google.maps.places.PlacesServiceStatus.OK ? e.slice(0, a - t).map(s) : TS.warn("PlacesService failed due to: " + n);
                        };
                      d.nearbySearch({
                        bounds: e,
                        name: n.query
                      }, c);
                    }
                  };
                r.geocode({
                  address: n.query,
                  bounds: e
                }, o);
              };
              google.maps.event.addListener(i, "bounds_changed", s);
            }
          }
        }
      });
      var e = 0;
    }();
  },
  2467: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("inline_room_previews", {
        onStart: function() {},
        toggle_sig: new signals.Signal,
        checkForInlineRoomPreviewClick: function(e) {
          var t = $(e.target),
            n = t.closest(".message");
          if (n.length) return t.closest(".msg_inline_room_preview_expander, .msg_inline_room_preview_collapser").length ? (e.preventDefault(), void TS.inline_room_previews.toggle(n)) : void(t.closest(".screenhero_attachment").length && !t.hasClass("screenhero_room_link") && n.find(".screenhero_room_link").click());
        },
        shouldExpand: function(e) {
          var t = TS.model.expandable_state["inline_room_" + e],
            n = TS.model.prefs.expand_internal_inline_imgs;
          return void 0 === t ? n : !!t;
        },
        toggle: function(e) {
          var t = e.find(".sh_call_container"),
            n = t.hasClass("sh_call_collapsed"),
            i = TS.client && TS.client.ui.areMsgsScrolledToBottom();
          TS.model.expandable_state["inline_room_" + t.data("room-id")] = n, TS.storage.storeExpandableState(TS.model.expandable_state), t.toggleClass("sh_call_collapsed"), TS.inline_room_previews.toggleIcons(e), TS.inline_room_previews.toggle_sig.dispatch(e), TS.client && i && TS.client.ui.instaScrollMsgsToBottom(!1);
        },
        expand: function() {},
        collapse: function() {},
        toggleIcons: function(e) {
          e.find(".msg_inline_room_preview_collapser, .msg_inline_room_preview_expander").toggleClass("hidden");
        },
        expandAllInCurrent: function() {
          $(".msg_inline_room_preview_expander").trigger("click"), TS.client && TS.client.ui.instaScrollMsgsToBottom(!1);
        },
        collapseAllInCurrent: function() {
          $(".msg_inline_room_preview_collapser").trigger("click");
        }
      });
    }();
  },
  2468: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("inline_videos", {
        no_scrolling: !1,
        expand_sig: new signals.Signal,
        collapse_sig: new signals.Signal,
        onStart: function() {
          $("#messages_container").on("keydown", ".msg_inline_media_toggler", function() {
            13 != event.which && 32 != event.which || event.target.click();
          });
        },
        shouldExpand: function(e, t) {
          return !!TS.model.expandable_state["vid_" + e + t.src] || !1 !== TS.model.expandable_state["vid_" + e + t.src] && (t.internal_file_id ? TS.model.prefs.expand_internal_inline_imgs : TS.model.prefs.expand_inline_imgs);
        },
        expandAllInCurrent: function() {
          var e = $(".msg_inline_media_toggler[data-media-type=video]:not(.expanded)");
          e.length && (TS.inline_videos.no_scrolling = !0, e.trigger("click"), TS.inline_videos.no_scrolling = !1, TS.client && TS.client.ui.instaScrollMsgsToBottom(!1));
        },
        collapseAllInCurrent: function() {
          $(".msg_inline_media_toggler[data-media-type=video].expanded").trigger("click");
        },
        expand: function(e, t) {
          TS.model.expandable_state["vid_" + e + t] = !0, TS.storage.storeExpandableState(TS.model.expandable_state);
          var n = "#" + TS.utility.makeSafeForDomId(e),
            i = $(n);
          if (i.length) {
            var r = TS.client && TS.client.ui.areMsgsScrolledToBottom(),
              a = function() {
                return $(this).data("real-src") == t;
              },
              s = TS.boot_data.feature_attachments_inline ? i.find(".inline_attachment").filter(a) : null;
            s && s.length || (s = i.find(".msg_inline_video_holder").filter(a)), s.find(".msg_inline_video_thumb_div").removeClass("hidden"), s.removeClass("hidden"), i.find(".msg_inline_media_toggler[data-media-type=video]:not(.expanded)").filter(a).attr("aria-expanded", "true"), i.find(".msg_inline_media_toggler[data-media-type=video]:not(.expanded)").filter(a).addClass("expanded"), TS.client && TS.client.ui.checkInlineImgsAndIframesEverywhere(), s.css("opacity", 0).stop().animate({
              opacity: 1
            }, 300), TS.inline_videos.no_scrolling || (TS.client && r ? (TS.client.ui.instaScrollMsgsToBottom(!1), i.children().first().scrollintoview({
              duration: 0,
              offset: "top",
              px_offset: 10,
              direction: "y"
            })) : i.find(".msg_inline_video").last().scrollintoview({
              duration: 200,
              offset: "bottom",
              px_offset: -10,
              direction: "y"
            })), TS.inline_videos.expand_sig.dispatch(e), TS.client && TS.client.ui.checkInlineImgsAndIframesEverywhere();
          }
        },
        collapse: function(e, t) {
          TS.model.expandable_state["vid_" + e + t] = !1, TS.storage.storeExpandableState(TS.model.expandable_state);
          var n = "#" + TS.utility.makeSafeForDomId(e),
            i = $(n);
          if (i.length) {
            var r = function() {
                return $(this).data("real-src") == t;
              },
              a = TS.boot_data.feature_attachments_inline ? i.find(".inline_attachment").filter(r) : null;
            a && a.length || (a = i.find(".msg_inline_video_holder").filter(r)), a.css("visibility", "hidden"), i.find(".msg_inline_media_toggler[data-media-type=video].expanded").filter(r).attr("aria-expanded", "false"), i.find(".msg_inline_media_toggler[data-media-type=video].expanded").filter(r).removeClass("expanded"), a.find(".msg_inline_video_iframe_div").html(""), TS.inline_videos.collapse_sig.dispatch(e), setTimeout(function() {
              a.addClass("hidden"), a.css("visibility", "visible");
            }, 200);
          }
        },
        enCommentHTML: function(e) {
          if (!e) return "";
          var t = new DOMParser,
            n = "<body>" + e + "</body>",
            i = t.parseFromString(n, "text/html") || t.parseFromString(n, "text/xml");
          if (!i || !i.body) return "";
          if (0 === i.body.childNodes.length) return "";
          if (1 == i.body.childNodes.length && i.body.childNodes[0].nodeType == Node.COMMENT_NODE) return i.body.innerHTML;
          var r = document.createComment(e);
          return $("<div>").append(r).html();
        },
        unCommentHTML: function(e) {
          if (!e) return "";
          var t = new DOMParser,
            n = t.parseFromString("<body>" + e + "</body>", "text/html");
          if (!n || !n.body) return "";
          if (1 != n.body.childNodes.length) return "";
          var i = n.body.childNodes[0];
          return i.nodeType != Node.COMMENT_NODE ? "" : i.textContent;
        },
        checkForInlineVideoClick: function(e) {
          if (e.target) {
            var t, n = $(e.target);
            if (t = n.closest(".message").attr("id")) {
              var i = n.closest(".msg_inline_media_toggler[data-media-type=video]");
              if (i.length) {
                e.preventDefault();
                var r = i.data("real-src");
                return void(i.hasClass("expanded") ? TS.inline_videos.collapse(t, r) : TS.inline_videos.expand(t, r));
              }
              var a = n.closest(".msg_inline_video_play_button");
              if (a.length) {
                var s = a.closest(".msg_inline_video_holder"),
                  o = s.find(".msg_inline_video_iframe_div");
                o.removeClass("hidden"), s.find(".msg_inline_video_thumb_div").addClass("hidden");
                var l = o.data("url"),
                  d = TS.model.inline_videos[l];
                if (!d) {
                  var c = l.replace(/&/g, "&amp;");
                  d = TS.model.inline_videos[c];
                }
                if (d) {
                  if (o.html(TS.inline_videos.unCommentHTML(d.html)), l.indexOf(!0)) {
                    var u = o.find("video");
                    u.length && u[0].play();
                  }
                } else {
                  var m = TS.i18n.t('<div style="padding:10px; color:white">Error: unable to find "{url}" in TS.model.inline_videos</div>', "inline_videos")({
                    url: _.escape(l)
                  });
                  o.html(m);
                }
              }
            }
          }
        },
        makeInternalInlineVideo: function(e, n) {
          TS.model.inline_videos[e] = n, n.src = n.thumbnail.url || e, n.display_w = parseInt(n.thumbnail.width, 10), n.width = n.display_w, n.display_h = parseInt(n.thumbnail.height, 10), n.height = n.display_h, n.display_w > 400 && (n.display_w = 400, n.display_h = parseInt(n.height * (n.display_w / n.width), 10)), n.display_h > 500 && (n.display_h = 500, n.display_w = parseInt(n.width * (n.display_h / n.height), 10)), n.html || (n.html = "MISSING video.html"), n.html.indexOf("gfycat.com/ifr") > -1 && (n.html = t(n.html)), n.html = n.html.replace("http://", "//"), -1 == n.html.indexOf("oldwidth") && (n.html = n.html.replace(" width=", ' width="' + n.display_w + '" oldwidth='), n.html = n.html.replace(" height=", ' height="' + n.display_h + '" oldheight=')), n.html = TS.inline_videos.enCommentHTML(n.html), n.html = TS.utility.swapInRedirUrlForIframe(n.html);
          var i = TS.utility.getImgProxyURL(n.src, n.display_w, n.display_h);
          i != n.src ? n.proxied_src = i : delete n.proxied_src;
        },
        test: function() {
          return {
            maybeRewriteGfyCatHtml: t
          };
        }
      });
      var e = /^[a-zA-Z0-9]+$/,
        t = function(t) {
          var n = TS.utility.getAttributesFromHTMLString(t),
            i = n.src;
          if (!i) return t;
          var r = i.split("ifr/")[1] || "";
          if (!r.match(e)) return t;
          var a = parseInt(n.width, 10),
            s = parseInt(n.height, 10);
          return a && s ? (n.src = "https://" + document.location.host + "/gfycat_iframe.php?key=" + r + "&w=" + a + "&h=" + s + "&" + Date.now(), $("<iframe>").attr(n)[0].outerHTML) : t;
        };
    }();
  },
  2471: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("members", {
        status_changed_sig: new signals.Signal,
        presence_changed_sig: new signals.Signal,
        ds_presence_changed_sig: new signals.Signal,
        user_color_changed_sig: new signals.Signal,
        joined_team_sig: new signals.Signal,
        changed_current_status_sig: new signals.Signal,
        changed_name_sig: new signals.Signal,
        changed_real_name_sig: new signals.Signal,
        changed_deleted_sig: new signals.Signal,
        changed_profile_sig: new signals.Signal,
        changed_tz_sig: new signals.Signal,
        changed_account_type_sig: new signals.Signal,
        changed_admin_perms_sig: new signals.Signal,
        changed_owner_perms_sig: new signals.Signal,
        changed_self_sig: new signals.Signal,
        lazily_added_sig: new signals.Signal,
        batch_upserted_sig: new signals.Signal,
        non_loaded_changed_deleted_sig: new signals.Signal,
        member_was_upserted_sig: new signals.Signal,
        changed_is_unknown_sig: new signals.Signal,
        is_in_bulk_upsert_mode: !1,
        members_for_user_changed_sig: new signals.Signal,
        unknown_members_perf_exp_metrics: ["fps_median", "fps_min", "beachballs", "stutters", "client_total_members_loaded", "client_session_bytes_received", "channel_change", "initial_stutters", "initial_beachballs", "rebuild_all_throttles"],
        onStart: function() {
          I = TS.utility.throttleFunc(I, 20), TS.client && TS.client.user_added_to_team_sig.add(TS.members.userAddedToTeam), TS.client && TS.client.user_removed_from_team_sig.add(TS.members.userRemovedFromTeam), TS.channels.member_joined_sig.add(J), TS.channels.member_left_sig.add(J), TS.boot_data.feature_shared_channels_client && TS.members.lazily_added_sig.add(TS.teams.ensureTeamsInDataArePresent), TS.client && TS.client.login_sig.addOnce(function() {
            TS.membership.lazyLoadChannelMembership() && (TS.members.non_loaded_changed_deleted_sig.add(J), TS.members.changed_deleted_sig.add(J));
          }), "unknown_members" === TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics) && TS.ms.disconnected_sig.add(ee), TS.channels.switched_sig.add(se);
        },
        maybeFetchAccessibleUserIds: function() {
          return TS.isPartiallyBooted() && !TS._did_full_boot ? Promise.resolve() : TS.model.user.is_restricted && TS.membership.lazyLoadChannelMembership() ? (TS.model.guest_accessible_user_ids = TS.model.guest_accessible_user_ids || [], TS.flannel.fetchAccessibleUserIdsForGuests().then(function(e) {
            _.isEqual(_.sortBy(e), _.sortBy(TS.model.guest_accessible_user_ids)) || (m.length = 0, TS.model.guest_accessible_user_ids = e, TS.members.members_for_user_changed_sig.dispatch()), V = Date.now();
          })) : Promise.resolve();
        },
        getPotentiallyUnknownMemberById: function(e) {
          if (!e) return null;
          if ("unknown_members" !== TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics)) return TS.members.getMemberById(e);
          ae(e);
          var n = t[e];
          if (n && n.is_unknown) return n;
          if (!TS.interop.utility.looksLikeMemberId(e)) {
            var i = TS.members.getMemberByName(e);
            return i || (ne(e), {
              id: e,
              name: e,
              is_unknown: !1,
              is_non_existent: !0
            });
          }
          return TS.members.getMemberById(e) || P(e);
        },
        getMemberById: function(e) {
          if (!_.isString(e)) return null;
          if (e && "@" === e.charAt(0) && (e = e.substring(1)), TS.useRedux() && TS.boot_data.feature_store_members_in_redux) return TS.redux.members.getMemberById(e);
          ae(e);
          var n = t[e];
          return void 0 !== n ? n.is_unknown && TS.boot_data.feature_tinyspeck ? null : n : null;
        },
        getPotentiallyUnknownMemberByIdWithoutFetching: function(e) {
          var t = TS.members.getMemberById(e);
          return t || (t = re(e)), t;
        },
        getMemberByName: function(e) {
          if (e = _.toLower(e), !i.hasOwnProperty(e)) {
            var t = TS.model.members;
            Object.keys(i).length < TS.model.members.length && t.forEach(function(e) {
              i[e._name_lc] = e.id, i["@" + e._name_lc] = e.id;
            });
          }
          return i.hasOwnProperty(e) ? TS.members.getPotentiallyUnknownMemberById(i[e]) : null;
        },
        getMemberByNameAndTeamDomain: function(e, t) {
          if (!TS.boot_data.feature_shared_channels_client) return TS.members.getMemberByName(e);
          e = _.toLower(e).replace(/^@/, "");
          var n = TS.model.members,
            i = _.filter(n, {
              _name_lc: e
            });
          if (0 === i.length) return null;
          if (1 === i.length) return i[0];
          var r = TS.teams.getTeamByDomain(t);
          if (r && r.id) {
            var a = _.find(i, {
              team_id: r.id
            });
            if (a) return a;
          }
          return null;
        },
        getMemberByNameAndTeamId: function(e, t) {
          if (!TS.boot_data.feature_shared_channels_client) return TS.members.getMemberByName(e);
          e = _.toLower(e).replace(/^@/, "");
          var n = TS.model.members,
            i = _.filter(n, {
              _name_lc: e
            });
          if (0 === i.length) return null;
          if (1 === i.length) return i[0];
          var r = _.find(i, {
            team_id: t
          });
          return r || null;
        },
        getMemberByEmail: function(e) {
          e = _.toLower(e);
          for (var t, n = TS.model.members, i = 0; i < n.length; i += 1)
            if (t = n[i], t.profile && t.profile.email && _.toLower(t.profile.email) == e) return t;
          return null;
        },
        upsertAndSignal: function(e) {
          var t = TS.members.upsertMember(e);
          return ie(t, e);
        },
        upsertMember: function(n) {
          var r = TS.members.getMemberById(n.id),
            a = "NOOP",
            s = [];
          if (r || (r = re(n.id)), n.is_ultra_restricted && (n.is_restricted = !0), r) {
            TS.useRedux && TS.boot_data.feature_store_members_in_redux && (r = _.assign({}, r)), TS.has_pri[Q] && TS.log(Q, 'updating existing member "' + n.id + '"');
            var o = R(r, n);
            if (a = o.status, s = o.what_changed, TS.useRedux()) {
              if (_.includes(s, "presence") && (TS.members.is_in_bulk_upsert_mode ? TS.redux.presence.addToBulkUpsertPayload(r) : TS.redux.presence.updatePresenceForMember(r)), (_.includes(s, "is_restricted") || _.includes(s, "is_ultra_restricted")) && (TS.members.is_in_bulk_upsert_mode ? TS.redux.member_types.addToBulkUpdatePayload(r) : TS.redux.member_types.updateMemberTypeForMember(r)), _.includes(s, "deleted")) {
                var l = TS.ims.getImByMemberId(r.id);
                l && (l.is_archived = r.deleted);
              }
              _.includes(s, "current_status") && (TS.members.is_in_bulk_upsert_mode ? TS.redux.custom_status.addToBulkUpsertPayload(r) : TS.redux.custom_status.updateStatusForMember(r));
            }
            void 0 !== r.is_non_existent && delete r.is_non_existent, n = r;
          } else n.id ? (a = "ADDED", U(n), TS.has_pri[Q] && TS.log(Q, 'adding member "' + n.id + '" color:' + n.color + " member_color:" + n.member_color), n.presence && TS.useRedux() && (TS.members.is_in_bulk_upsert_mode ? TS.redux.presence.addToBulkUpsertPayload(n) : TS.redux.presence.updatePresenceForMember(n)), n.profile && n.profile.status_emoji && TS.useRedux() && (TS.members.is_in_bulk_upsert_mode ? TS.redux.custom_status.addToBulkUpsertPayload(n) : TS.redux.custom_status.updateStatusForMember(n)), TS.useRedux() && (TS.members.is_in_bulk_upsert_mode ? TS.redux.member_types.addToBulkUpdatePayload(n) : TS.redux.member_types.updateMemberTypeForMember(n)), e += 1, t[n.id] = n, i[n._name_lc] = n.id, i["@" + n._name_lc] = n.id, TS.useRedux() && TS.boot_data.feature_store_members_in_redux || TS.model.members.push(n)) : TS.error("bad error, no member.id");
          return n.is_self && n.deleted ? void TS.reload(null, "member.is_self && member.deleted") : (TS.members.is_in_bulk_upsert_mode || (TS.members.invalidateMembersUserCanSeeArrayCaches(), TS.members.invalidateActiveMembersArrayCaches()), "ADDED" !== a && "CHANGED" !== a || TS.members.maybeStoreMembers(), TS.members.member_was_upserted_sig.dispatch(), TS.useRedux() && TS.boot_data.feature_store_members_in_redux && "NOOP" !== a && (n.profile = _.assign({}, n.profile), TS.members.is_in_bulk_upsert_mode ? TS.redux.members.addToBulkUpsertPayload(n) : TS.redux.members.addMember(n)), {
            status: a,
            member: n,
            what_changed: s
          });
        },
        processExistingMemberForUpserting: function(e, t) {
          return R(e, t);
        },
        processNewMemberForUpserting: function(e) {
          U(e);
        },
        setMemberUserColor: function(e, t) {
          t = _.escape(t), e.member_color = t || e.color, t && t != e.color ? TS.model.user_colors[e.id] = t : delete TS.model.user_colors[e.id], TS.members.user_color_changed_sig.dispatch(e);
        },
        toggleUserPresence: function() {
          var e = "away" === TS.model.user.presence ? "active" : "away",
            t = {
              presence: e
            };
          return TS.api.call("presence.set", t);
        },
        usernameChanged: function(e, t) {
          delete i[t], delete i["@" + t], e._name_lc = _.toLower(e.name), i[e._name_lc] = e.id, i["@" + e._name_lc] = e.id, x(e);
        },
        getActiveMembersWithSelfAndNotSlackbot: function() {
          return r.length || (r = TS.members.fillMembersWithOptions(r, {
            include_self: !0,
            include_slackbot: !1,
            include_bots: !0
          })), r;
        },
        getActiveMembersWithSelfAndNotBots: function() {
          return a.length || (a = TS.members.fillMembersWithOptions(a, {
            include_self: !0,
            include_slackbot: !1,
            include_bots: !1
          })), a;
        },
        getActiveMembersExceptSelfAndSlackbot: function() {
          return s.length || (s = TS.members.fillMembersWithOptions(s, {
            include_self: !1,
            include_slackbot: !1,
            include_bots: !0
          })), s;
        },
        getActiveMembersExceptSelfAndBots: function() {
          return o.length || (o = TS.members.fillMembersWithOptions(o, {
            include_self: !1,
            include_slackbot: !1,
            include_bots: !1
          })), o;
        },
        getActiveMembersWithSelfAndSlackbot: function() {
          return l.length || (l = TS.members.fillMembersWithOptions(l, {
            include_self: !0,
            include_slackbot: !0,
            include_bots: !0
          })), l;
        },
        getActiveMembersWithSlackbotAndNotSelf: function() {
          return d.length || (d = TS.members.fillMembersWithOptions(d, {
            include_self: !1,
            include_slackbot: !0,
            include_bots: !0
          })), d;
        },
        getMembersWithOptions: function(e) {
          var t = TS.members.getMembersForUser();
          return _.filter(t, function(t) {
            return !t.is_stranger && (!(!e.include_deleted && t.deleted) && (!(!e.include_slackbot && t.is_slackbot) && (!(!e.include_self && t.is_self) && !(!e.include_bots && t.is_bot))));
          });
        },
        fillMembersWithOptions: function(e, t) {
          if (!_.isArray(e)) throw new TypeError("members passed to fillMembersWithOptions is not an array!");
          e.length = 0;
          var n = TS.members.getMembersWithOptions(t);
          return _.each(n, function(t) {
            e.push(t);
          }), e;
        },
        getMembersForUser: function() {
          if (!TS.model.user.is_restricted && !TS.boot_data.feature_shared_channels_client) return TS.model.members;
          if (m.length) return m;
          if (!TS.model.user.is_restricted) return m = _.filter(TS.model.members, function(e) {
            return !0 !== e.is_stranger;
          });
          var e = {};
          TS.membership.lazyLoadChannelMembership() ? (TS.model.guest_accessible_user_ids || []).forEach(function(t) {
            e[t] = !0;
          }) : TS.shared.getAllModelObsForUser().forEach(function(t) {
            t.is_group && !t.is_archived ? t.members.forEach(function(t) {
              e[t] = !0;
            }) : t.is_channel && t.is_member ? t.members.forEach(function(t) {
              e[t] = !0;
            }) : t.is_im && (e[t.user] = !0);
          });
          var t = TS.isPartiallyBooted();
          return m = Object.keys(e).map(function(e) {
            return {
              id: e,
              user: TS.members.getMemberById(e)
            };
          }).filter(function(e) {
            var n = e.user;
            return !(!n && t) && (!!n && !n.deleted);
          }).map(function(e) {
            return e.user;
          });
        },
        shouldDisplayRealNames: function() {
          var e = TS.model.prefs.display_real_names_override;
          return TS.model.team.prefs.display_real_names && -1 != e || 1 == e;
        },
        getPrefCompliantMemberNameById: function(e, t, n) {
          var i = TS.members.getPotentiallyUnknownMemberById(e);
          return i ? TS.members.getPrefCompliantMemberName(i, t, n) : e;
        },
        getPrefCompliantMemberName: function(e, t, n) {
          if (!e) return "NO MEMBER??";
          var i = function() {
            var t = n ? "@" : "";
            if (TS.boot_data.feature_name_tagging_client) {
              var i = TS.members.getMemberRealName(e);
              return !TS.members.shouldDisplayRealNames() && TS.members.getMemberProfileFieldDisplayName(e) && (i = TS.members.getMemberProfileFieldDisplayName(e)), t + i;
            }
            return TS.model.team ? TS.members.shouldDisplayRealNames() && e.profile && e.profile.real_name && e.profile.real_name.length ? e.profile.real_name : t + e.name : e.name;
          }();
          return t ? _.escape(i) : i;
        },
        getPrefCompliantMemberNameLowerCase: function(e, t) {
          return e ? TS.model.team && TS.members.shouldDisplayRealNames() && e.profile && e.profile.real_name ? t ? _.escape(e._real_name_lc) : e._real_name_lc : e._name_lc : "NO MEMBER??";
        },
        getMemberRealName: function(e) {
          return C(e, "real_name");
        },
        getMemberRealNameLowerCase: function(e) {
          return C(e, "_real_name_normalized_lc");
        },
        getMemberProfileFieldDisplayName: function(e) {
          return C(e, "display_name");
        },
        getMemberProfileFieldDisplayNameLowerCase: function(e) {
          return C(e, "_display_name_normalized_lc");
        },
        getMemberUsernameAndRealNameInCorrectOrder: function(e) {
          var t = T(e),
            n = TS.members.getPrefCompliantMemberName(t),
            i = {
              names_in_order: [],
              is_username_first: !0
            };
          if (t)
            if (n === t.name) i.names_in_order.push(t.name), t.is_self ? i.names_in_order.push(TS.i18n.t("(you)", "members")()) : t.profile.real_name && t.profile.real_name !== t.name && i.names_in_order.push(t.profile.real_name);
            else {
              i.is_username_first = !1, t.profile.real_name && t.profile.real_name !== t.name && i.names_in_order.push(t.profile.real_name);
              var r = t.is_self ? TS.i18n.t("(you)", "members")() : t.name;
              i.names_in_order.push(r);
            }
          else i.names_in_order.push(n);
          return i;
        },
        getMemberSecondaryName: function(e) {
          var t = T(e);
          if (TS.members.shouldDisplayRealNames()) {
            if (TS.boot_data.feature_name_tagging_client) return TS.members.getMemberProfileFieldDisplayName(t);
            if (t.profile && t.profile.real_name && t.profile.real_name.length) return t.name;
          }
          return TS.members.getMemberRealName(t);
        },
        getMemberCurrentStatus: function(e) {
          var t = T(e);
          return t && t.profile ? {
            emoji: t.profile.status_emoji || "",
            text: t.profile.status_text || ""
          } : {
            emoji: "",
            text: ""
          };
        },
        getMemberCurrentStatusForDisplay: function(e, t) {
          var n = TS.members.getMemberCurrentStatus(e),
            i = "";
          return n.text && (i += '<span class="prevent_copy_paste" aria-label=" "></span>' + TS.format.formatCurrentStatus(n.text, void 0, t)), TS.format.formatCurrentStatus(n.emoji, void 0, _.assign({
            transform_missing_emoji: !0
          }, t)) + i;
        },
        invalidateMembersUserCanSeeArrayCaches: function(e) {
          if (TS.model.user && (TS.boot_data.feature_shared_channels_client || TS.model.user.is_restricted)) {
            var t = m.length;
            if (t && (m.length = 0, TS.members.invalidateActiveMembersArrayCaches(), !e)) {
              TS.members.getMembersForUser().length !== t && TS.members.members_for_user_changed_sig.dispatch();
            }
          }
        },
        invalidateActiveMembersArrayCaches: function() {
          r.length = 0, a.length = 0, s.length = 0, o.length = 0, l.length = 0, d.length = 0, c.length = 0, u.length = 0;
        },
        canUserPostInGeneral: function() {
          return TS.permissions.members.canPostInGeneral(TS.model.user);
        },
        memberSorterByActive: function(e, t) {
          if (e.presence != t.presence) {
            if ("active" === e.presence) return -1;
            if ("active" === t.presence) return 1;
          }
          var n = TS.members.getPrefCompliantMemberNameLowerCase(e),
            i = TS.members.getPrefCompliantMemberNameLowerCase(t);
          return n < i ? -1 : n > i ? 1 : 0;
        },
        memberSorterByActiveWithBotsLast: function(e, t) {
          if (e.presence != t.presence) {
            if ("active" === e.presence) return -1;
            if ("active" === t.presence) return 1;
          }
          var n = e.is_bot || e.is_slackbot,
            i = t.is_bot || t.is_slackbot;
          if (n !== i) {
            if (!n) return -1;
            if (!i) return 1;
          }
          var r = TS.members.getPrefCompliantMemberNameLowerCase(e),
            a = TS.members.getPrefCompliantMemberNameLowerCase(t);
          return r < a ? -1 : r > a ? 1 : 0;
        },
        memberSorterByName: function(e, t) {
          var n = TS.members.getMemberNameForSort(e),
            i = TS.members.getMemberNameForSort(t);
          return n < i ? -1 : n > i ? 1 : 0;
        },
        getMemberNameForSort: function(e) {
          return TS.members.getPrefCompliantMemberNameLowerCase(e);
        },
        prepareMembersForLS: function() {
          var e, t, n, i, r = [];
          for (i = 0; i < TS.model.members.length; i += 1)
            if (t = TS.model.members[i]) {
              if (t._is_local) {
                e = {}, r.push(e);
                for (n in t) "files" !== n && "activity" !== n && "stars" !== n && "mentions" !== n && 0 !== n.indexOf("_") && (e[n] = t[n]);
                e.profile = D(e.profile);
              }
            } else TS.warn("prepareMembersForLS: no member at offset " + i + "??");
          return r;
        },
        maybeStoreMembers: function(e) {
          TS.storage.isUsingMemberBotCache() && (TS.members.is_in_bulk_upsert_mode || I(e || !1));
        },
        ensureMembersInDataArePresent: function(e, t, n) {
          var i = TS.utility.extractAllMemberIds(e, t, n);
          if ("T02J3DPUE" === _.get(TS, "model.team.id") && !_.isEmpty(i.m_ids)) {
            if (_.some(i.m_ids, function(e) {
                return "U" === e[0];
              })) {
              var r = {
                message: "Fetching U users on W team from source: " + t,
                stack: TS.console.getStackTrace()
              };
              $.post(TS.boot_data.beacon_error_url, {
                description: "fetch_u_on_w_team",
                error_json: JSON.stringify(r),
                team: _.get(TS, "model.team.id", "none"),
                user: TS.boot_data.user_id,
                version: TS.boot_data.version_ts
              });
            }
          }
          return TS.members.ensureMembersArePresent(i.m_ids, i.c_ids, i.t_ids);
        },
        getMemberIdsNotPresent: function(e, t, n) {
          var i = [],
            r = [],
            a = [];
          return e.forEach(function(e, s) {
            TS.members.getMemberById(e) || (i.push(e), r.push(t[s]), a.push(n[s]));
          }), {
            m_ids: i,
            c_ids: r,
            t_ids: a
          };
        },
        ensureMembersArePresent: function(e) {
          if (!e || !e.length) return Promise.resolve();
          var t = _(e).uniq().filter(TS.members.getMemberById).value(),
            n = _.difference(e, t),
            i = TS.useSocket() ? h : f,
            r = _(n).chunk(i).map(function(e) {
              return M(e).reflect();
            }).value();
          return Promise.all(r).then(function(e) {
            var t = e.filter(function(e) {
              return e.isRejected();
            }).map(function(e) {
              return e.reason();
            });
            if (t.length) {
              var n = new Error("Some member fetches failed");
              return n.rejection_reasons = t, Promise.reject(n);
            }
            return Promise.resolve();
          });
        },
        ensureMembersArePresentInSharedModelObs: function(e) {
          return e = e.filter(function(e) {
            return !!e.is_shared;
          }), TS.members.ensureMembersArePresentInModelObs(e);
        },
        ensureMembersArePresentInModelObs: function(e) {
          var t = [],
            n = [];
          return TS.boot_data.page_needs_enterprise && TS.boot_data.exclude_org_members ? Promise.resolve() : (e.forEach(function(e) {
            e.is_im ? (t.push(e.user), n.push(e.id)) : e.is_mpim ? (t.push.apply(t, e.members || []), n.push.apply(n, _.fill(Array(e.members && e.members.length || 0), e.id))) : e.is_channel || (e.is_group ? (t.push.apply(t, e.members || []), n.push.apply(n, _.fill(Array(e.members && e.members.length || 0), e.id))) : TS.warn("ensureMembersArePresentInModelObs found an unexpected model_ob type"));
          }), t.length ? TS.members.ensureMembersArePresent(t, n) : Promise.resolve());
        },
        ensureMemberIsHydrated: function(e) {
          "unknown_members" !== TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics) && TS.members.getMemberById(e);
        },
        startBatchUpsert: function() {
          return !TS.members.is_in_bulk_upsert_mode && (TS.members.is_in_bulk_upsert_mode = !0, !0);
        },
        finishBatchUpsert: function(e) {
          return !!TS.members.is_in_bulk_upsert_mode && (TS.members.is_in_bulk_upsert_mode = !1, TS.members.invalidateMembersUserCanSeeArrayCaches(), TS.members.invalidateActiveMembersArrayCaches(), TS.members.maybeStoreMembers(), _.partition(e, function(e) {
            return _.includes(e.what_changed, "is_unknown");
          })[0].length > 0 && TS.members.changed_is_unknown_sig.dispatch({}), TS.members.batch_upserted_sig.dispatch(e), !0);
        },
        allocateTeamListMembers: function(e) {
          var t, n = [],
            i = [],
            r = [],
            a = [],
            s = [],
            o = [];
          e.sort(function(e, t) {
            var n = e._real_name_lc || e._name_lc,
              i = t._real_name_lc || t._name_lc;
            return n > i ? 1 : i > n ? -1 : 0;
          });
          for (var l = 0; l < e.length; l += 1) t = e[l], t.deleted ? t.is_bot ? r.push(t) : i.push(t) : t.is_ultra_restricted ? o.push(t) : t.is_restricted ? s.push(t) : t.is_bot || t.is_slackbot ? a.push(t) : n.push(t);
          return {
            members: n,
            disabled_members: i,
            deleted_bots: r,
            bots: a,
            restricted_members: s,
            ultra_restricted_members: o
          };
        },
        promiseToSearchMembers: function(e) {
          return TS.boot_data.page_needs_enterprise || TS.boot_data.feature_shared_channels_client || TS.lazyLoadMembersAndBots() ? Promise.resolve(e).then(function(e) {
            return e ? (e.query = e.query && e.query.trim() || "", e.include_org = !!TS.boot_data.page_needs_enterprise && !!e.include_org, e.org_team_ids = e.include_org && Array.isArray(e.org_team_ids) ? e.org_team_ids : [], e = E(e, A(e)), e._is_new || e.num_remaining > 0 ? O(e) : Promise.resolve(e)) : Promise.reject(new Error("No search parameters provided"));
          }) : Promise.reject(new Error("API search not yet enabled"));
        },
        isLocalTeamMember: function(e) {
          return e ? e._is_local ? e._is_local : e.team_id === TS.model.team.id : void TS.warn("isLocalTeamMember: No member provided?");
        },
        isNewMemberSearch: function(e) {
          return A(e);
        },
        readyMemberSearcher: function(e, t) {
          return E(e, t);
        },
        buildPromiseToSearchMembersArguments: function(e) {
          return F(e);
        },
        haveAllMembersForModelOb: function(e) {
          if (!TS.lazyLoadMembersAndBots()) return !0;
          if (TS.membership.lazyLoadChannelMembership() && e.is_channel && !e.is_group) return !1;
          var t = e.members || [e.user],
            n = _.map(TS.model.members, "id");
          return !_.difference(t, n).length;
        },
        userAddedToTeam: function(e) {
          var t = _.merge({}, TS.model.user);
          t.enterprise_user.teams = _.uniq(t.enterprise_user.teams.concat(e)), TS.members.upsertMember(t);
        },
        userRemovedFromTeam: function(e) {
          var t = _.merge({}, TS.model.user);
          t.enterprise_user.teams = t.enterprise_user.teams.filter(function(t) {
            return t !== e;
          }), TS.members.upsertMember(t);
        },
        fetchMemberObjectsForUserProfileFields: function(e) {
          var t = [];
          e.is_restricted && e.profile.guest_invited_by && t.push(e.profile.guest_invited_by);
          var n = TS.team.getVisibleTeamProfileFieldsForMember(e),
            i = _.chain(n).filter({
              type: "user"
            }).reduce(function(e, t) {
              return e.concat(t.value.split(/\s*,\s*/));
            }, []).value();
          return t = _.chain(t).concat(i).compact().uniq().value(), t.length ? TS.members.ensureMembersArePresent(t) : Promise.resolve();
        },
        ditchMap: function() {
          e = 0, t = {}, i = {};
        },
        maybeUpdateMembersUserCanSee: function() {
          return J();
        },
        getMembersForTeam: function(e) {
          var t = TS.members.getMembersWithOptions({
            include_self: !0,
            include_bots: !0
          });
          return _.filter(t, function(t) {
            return !t.team_id || t.team_id === e;
          });
        },
        test: function() {
          var n = {};
          return Object.defineProperty(n, "_id_map_size", {
            get: function() {
              return e;
            },
            set: function(t) {
              e = t;
            }
          }), Object.defineProperty(n, "_id_map", {
            get: function() {
              return t;
            },
            set: function(e) {
              t = e;
            }
          }), Object.defineProperty(n, "_name_map", {
            get: function() {
              return i;
            },
            set: function(e) {
              i = e;
            }
          }), Object.defineProperty(n, "_maybeRefetchAccessibleUserIds", {
            get: function() {
              return Y;
            },
            set: function(e) {
              Y = e;
            }
          }), Object.defineProperty(n, "_is_refetching_accessible_user_ids", {
            get: function() {
              return z;
            },
            set: function(e) {
              z = e;
            }
          }), Object.defineProperty(n, "_did_receive_multiple_calls_to_refetch_accessible_user_ids", {
            get: function() {
              return K;
            },
            set: function(e) {
              K = e;
            }
          }), Object.defineProperty(n, "_accessible_user_ids_last_fetched_ts", {
            get: function() {
              return V;
            },
            set: function(e) {
              V = e;
            }
          }), Object.defineProperty(n, "_maybeSetDeletedStatus", {
            get: function() {
              return y;
            },
            set: function(e) {
              y = e;
            }
          }), Object.defineProperty(n, "_maybeSetTeamId", {
            get: function() {
              return w;
            },
            set: function(e) {
              w = e;
            }
          }), Object.defineProperty(n, "_maybeSetLocality", {
            get: function() {
              return k;
            },
            set: function(e) {
              k = e;
            }
          }), Object.defineProperty(n, "_setImAndMpimNames", {
            get: function() {
              return x;
            },
            set: function(e) {
              x = e;
            }
          }), Object.defineProperty(n, "_setLowerCaseNamesForMember", {
            get: function() {
              return N;
            },
            set: function(e) {
              N = e;
            }
          }), Object.defineProperty(n, "_setImagesForMember", {
            get: function() {
              return G;
            },
            set: function(e) {
              G = e;
            }
          }), n;
        }
      });
      var e = 0,
        t = {},
        i = {},
        r = [],
        a = [],
        s = [],
        o = [],
        l = [],
        d = [],
        c = [],
        u = [],
        m = [],
        p = [],
        f = 250,
        h = 100,
        g = {},
        S = {},
        T = function(e) {
          return _.isString(e) ? TS.members.getPotentiallyUnknownMemberById(e) : e;
        },
        b = function(e) {
          if ("unknown_members" === TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics)) {
            var t = !!e && e.is_unknown;
            return !!t && (e && e.is_unknown && (e.is_unknown = !1), _.pull(p, e.id), g[e.id] && (ne(e.id), t && TS.statsd.measure("unknown_member_resolution_timing", "unknown_member_resolution_timing_" + e.id)), t);
          }
        },
        v = function(e) {
          e.member_color || (e.member_color = e.color, TS.model.user_colors[e.id] && TS.members.setMemberUserColor(e, TS.model.user_colors[e.id]));
        },
        y = function(e, t) {
          if (TS.boot_data.page_needs_enterprise && e.enterprise_user && e.enterprise_user.teams && e.enterprise_user.teams.length > 0)
            if ("web" === TS.boot_data.app) e.enterprise_user.teams.indexOf(TS.model.team.id) > -1 && (e.deleted = !1);
            else if (t && t.length && t.indexOf("deleted") >= 0) {
            if (e.deleted) {
              e.deleted = !1;
              var n = t.indexOf("deleted");
              n >= 0 && t.splice(n, 1);
            }
          } else e.deleted = !1;
        },
        w = function(e) {
          if (!e.team_id) return e.enterprise_user && e.id === e.enterprise_user.id ? void(e.team_id = e.enterprise_user.enterprise_id) : void(e.team_id = TS.model.team.id);
        },
        k = function(e) {
          if (!e) return void TS.warn("_maybeSetLocality: No member provided?");
          e._is_local = e.team_id === TS.model.team.id, TS.boot_data.page_needs_enterprise && ("web" !== TS.boot_data.app && (e._is_local = _.includes(_.get(e, "enterprise_user.teams", []), TS.model.team.id)), e._is_from_org = !e._is_local && (e.team_id === TS.model.enterprise.id || _.get(e, "enterprise_user.enterprise_id") === TS.model.enterprise.id)), TS.boot_data.feature_shared_channels_client && (e.is_external = TS.utility.teams.isMemberExternal(e), TS.useRedux() && (TS.members.is_in_bulk_upsert_mode ? TS.redux.member_types.addToBulkUpdatePayload(e) : TS.redux.member_types.updateMemberTypeForMember(e)));
        },
        x = function(e) {
          TS.ims.setNameFromMember(e), TS.mpims.setNamesFromMember(e);
        },
        M = function e(t, n) {
          if (_.isEmpty(t)) return Promise.resolve();
          if (!Array.isArray(t)) return Promise.reject(new Error("m_ids is not an array"));
          t = _.uniq(t);
          var i, r = TS.useSocket() && !n;
          if (r) i = TS.flannel.fetchAndUpsertObjectsByIds(t);
          else {
            var a = {
              users: t
            };
            TS.lazyLoadMembersAndBots() && (a.custom_fields_mode = "user"), i = TS.api.call("users.info", a).then(function(e) {
              return e.data.users.map(function(e) {
                return TS.members.upsertAndSignal(e).member;
              });
            });
          }
          return i.then(function(n) {
            if (n.length !== t.length && r && TS.boot_data.feature_shared_channels_client) {
              var i = _.difference(t, _.map(n, "id")).join(",");
              return e(t, !0).tap(function(e) {
                e.length == t.length ? TS.warn("_fetchAndUpsertMembersWithIds tried to fetch members from Flannel but had to fall back to the API (everything worked out, though). Members: " + i) : TS.warn("_fetchAndUpsertMembersWithIds tried to fetch members from Flannel and from the API and still could not find them. Missing members: " + i);
              });
            }
            return n;
          }).tap(function(e) {
            var n = _.difference(t, _.map(e, "id"));
            return e.length !== t.length && TS.warn("_fetchAndUpsertMembersWithIds requested " + t.length + " members but received " + e.length + ". Missing members: " + n.join(", ")), e;
          });
        },
        C = function(e, t) {
          var n = T(e);
          return n ? n.profile ? n.profile[t] ? n.profile[t] : n[t] ? n[t] : n.profile[t + "_normalized"] ? n.profile[t + "_normalized"] : "" : n.is_bot && n.name ? n.name : "NO MEMBER??" : "NO MEMBER??";
        },
        I = function(e) {
          var t = TS.members.prepareMembersForLS(),
            n = !e && TS.storage.fetchMembers();
          !e && n && TS.utility.areSimpleObjectsEqual(n, t) || TS.storage.storeMembers(t);
        },
        A = function(e) {
          return e._last_query !== e.query || e._last_include_org !== e.include_org || _.xor(e._last_org_team_ids, e.org_team_ids).length;
        },
        E = function(e, t) {
          return e = e || {}, e.hasOwnProperty("_searcher_p") && t && e._searcher_p.cancel(), e.hasOwnProperty("_cursor_mark") && !t || (e._cursor_mark = ""), e.hasOwnProperty("full_profile_filter") || (e.full_profile_filter = !0), e.hasOwnProperty("include_bots") || (e.include_bots = !0), e.hasOwnProperty("include_deleted") || (e.include_deleted = !1), e.hasOwnProperty("include_self") || (e.include_self = !1), e.hasOwnProperty("include_slackbot") || (e.include_slackbot = !0), e.hasOwnProperty("items") && !t || (e.items = []), e.hasOwnProperty("not_member_of") || (e.not_member_of = []), e.hasOwnProperty("member_of") || (e.member_of = []), e.hasOwnProperty("num_found") && !t || (e.num_found = 0), e.hasOwnProperty("num_remaining") && !t || (e.num_remaining = 0), e.hasOwnProperty("num_new") && !t || (e.num_new = 0), e.hasOwnProperty("max_api_results") || (e.max_api_results = 100), t && (e._last_query = e.query, e._last_include_org = e.include_org, e._last_org_team_ids = e.org_team_ids), e._is_new = !!t, e;
        },
        O = function(e) {
          var t = function() {
            return B(e);
          };
          return e._is_new ? e._searcher_p = t() : e._searcher_p = e._searcher_p.then(t), e._searcher_p;
        },
        F = function(e) {
          var t = [TS.utility.search.makeClause("is", "user")];
          if (e._last_query) {
            var n = e._last_query.split(/\s*,\s*|\s+/).map(function(e) {
              return "@" === e.charAt("0") ? e.substring(1) : e;
            }).filter(function(e) {
              return !!e;
            }).map(function(t) {
              return 1 !== t.length && e.full_profile_filter ? TS.utility.search.makeClause("fuzzy_with_email", t) : TS.boot_data.feature_name_tagging_client ? TS.utility.search.makeConjunction("OR", [TS.utility.search.makeClause("real_name", t), TS.utility.search.makeClause("display_name", t)]) : TS.utility.search.makeConjunction("OR", [TS.utility.search.makeClause("name", t), TS.utility.search.makeClause("real_name", t)]);
            });
            t = t.concat(n);
          }
          if (e.not_member_of && e.not_member_of.length) {
            var i = e.not_member_of.map(function(e) {
              return TS.utility.search.makeClause("not_member_of", e);
            });
            t.push(i.length > 1 ? TS.utility.search.makeConjunction("OR", i) : i[0]);
          }
          if (e.member_of && e.member_of.length) {
            var r = e.member_of.map(function(e) {
              return TS.utility.search.makeClause("member_of", e);
            });
            t.push(r.length > 1 ? TS.utility.search.makeConjunction("OR", r) : r[0]);
          }
          if (e._last_include_org && e._last_org_team_ids.length) {
            var a = e._last_org_team_ids.map(function(e) {
              return TS.utility.search.makeClause("belongs_to_team_id", e);
            });
            t.push(a.length > 1 ? TS.utility.search.makeConjunction("OR", a) : a[0]);
          }
          var s = t.length > 1 ? TS.utility.search.makeConjunction("AND", t) : t[0],
            o = {
              query: s,
              count: e.max_api_results,
              include_bots: e.include_bots,
              include_deleted: e.include_deleted,
              raw_query: e.query
            };
          return e._last_include_org && (o.all_of_org = e._last_include_org), e._cursor_mark && (o.cursor_mark = e._cursor_mark), e.determine_membership_for_channel && (o.determine_membership_for_channel = e.determine_membership_for_channel), o;
        },
        B = function(e) {
          var t = F(e);
          return e.num_new = 0, TS.utility.search.promiseToSearch(t).then(function(t) {
            if (!t.data.items.length) return Promise.resolve(e);
            e.num_remaining || (e.num_remaining = t.data.num_found, e.num_found = t.data.num_found), e.num_remaining -= t.data.items.length, e._cursor_mark = t.data.next_cursor_mark;
            var n = t.data.items.map(function(t) {
              var n = TS.members.getMemberById(t.id);
              return n || (e._last_include_org && t.team_id !== TS.model.team.id && (t.is_primary_owner = !1, t.is_owner = !1, t.is_admin = !1), n = TS.members.upsertMember(t).member), n;
            }).filter(function(t) {
              return t.is_self && !e.include_self || t.is_slackbot && !e.include_slackbot ? (e.num_found -= 1, !1) : !e.limit_by_model_relevancy || TS.utility.members.isMemberRelevantToModel(t, e.limit_by_model_relevancy);
            });
            return e.num_new = n.length, e.items.push.apply(e.items, n), Promise.resolve(e);
          });
        },
        D = function(e) {
          return _.isObject(e) ? _.omitBy(e, function(e, t) {
            return 0 === t.indexOf("image_");
          }) : e;
        },
        R = function(e, t) {
          var i = "NOOP",
            r = [];
          return W(e, t), Object.keys(t).forEach(function(a) {
            if ("profile" === a) {
              var s = D(e.profile),
                o = D(t.profile);
              if (_.isObject(o)) {
                s.status_text === o.status_text && s.status_emoji === o.status_emoji || (i = "CHANGED", r.push("current_status"), e.profile.status_text = o.status_text, e.profile.status_emoji = o.status_emoji);
                var l = Object.keys(s).filter(function(e) {
                  return void 0 === o[e];
                }).concat(["status_text", "status_emoji"]);
                if (s = _.omit(s, l), o = _.omit(o, l), !_.isEqual(s, o)) {
                  var d = _.some(["real_name", "full_name", "display_name"], function(e) {
                    return o[e] != s[e];
                  });
                  !_.isUndefined(s.fields) && _.isUndefined(o.fields) && (TS.calls || TS.warn("So uh, yeah, we just tried to overwrite the `fields` value. Keeping what we have instead. User: " + t.id), o.fields = s.fields), e.profile = _.assign(e.profile, o), d && N(e);
                  s.avatar_hash != o.avatar_hash && G(e), i = "CHANGED", r.push(a);
                }
              }
            } else if ("enterprise_user" === a)
              if (e[a])
                for (var c in t[a]) _.isEqual(e[a][c], t[a][c]) || (e[a][c] = t[a][c], i = "CHANGED", r.push(a));
              else e[a] = t[a], i = "CHANGED", r.push(a);
            else if ("id" === a) {
              var u = e.id != t.id && e.enterprise_user && t.enterprise_user;
              if (u) {
                var m = e.enterprise_user.id == e.id,
                  p = t.id != t.enterprise_user.id;
                m && p && (e.id = t.id, i = "CHANGED", r.push(a));
              }
            } else if ("teams" === a) e[a] = t[a], i = "CHANGED", r.push(a);
            else if (e[a] != t[a])
              if ("is_admin" === a && TS.has_pri[Z] && (TS.console.warn(Z, a + "is changing from `" + e[a] + "` to `" + t[a] + "`"), TS.console.trace(Z)), t[a] && !TS.utility.isScalar(t[a])) e[a] = t[a], TS.warn(a + " is not scalar! it needs to be handled by upsertMember specifically to test if it has changed! " + n(t[a]));
              else if ("boolean" != typeof t[a] || !t[a] != !e[a]) {
              r.push(a), i = "CHANGED";
              var f = e[a],
                h = t[a];
              e[a] = h, "name" === a ? TS.members.usernameChanged(e, f) : "real_name" === a && (e._real_name_lc = _.toLower(e.profile.real_name));
            }
          }), b(e) && r.push("is_unknown"), v(e), y(e, r), w(e), k(e), {
            status: i,
            what_changed: r
          };
        },
        H = function e() {
          if ("unknown_members" !== TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics)) return Promise.resolve();
          if (!p.length) {
            var t = TS.shared.getActiveModelOb();
            if (t && S[t.id]) {
              var n = performance.now() - S[t.id];
              TS.metrics.store("channel_switched_to_unknown_resolution", n), delete S[t.id];
            }
            return Promise.resolve();
          }
          var i = _.clone(p);
          return M(i).then(function(t) {
            i.forEach(function(e) {
              var n = TS.members.getPotentiallyUnknownMemberByIdWithoutFetching(e);
              n && (_.find(t, {
                id: e
              }) || (n.is_non_existent = !0, b(n)));
            });
            return TS.client && TS.client.ui && TS.client.ui.rebuildAll(!1, !0), e();
          }).catch(function(e) {
            throw e.unknown_member_ids = p, e.unknown_member_ids_getting_fetched = i, TS.console.logError(e, "unknown_fetch_error", "unknown_member_error", !0), e;
          });
        },
        P = function(e) {
          if ("unknown_members" !== TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics)) return null;
          if (!e) return null;
          if (TS.model.ms_logged_in_once) {
            TS.has_pri[X] && TS.log(X, "member id " + e + " not found in members map, added unknown member to map");
            var t = j(e);
            return p.push(e), 1 === p.length && _.defer(H), t;
          }
        },
        j = function(e) {
          var t = {
            id: e,
            name: e
          };
          return t = TS.members.upsertMember(t).member, t.is_unknown = !0, t.is_non_existent = !1, L(t), te(e), TS.statsd.mark("unknown_member_resolution_timing_" + e), t;
        },
        L = function(e) {
          "unknown_members" === TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics) && _.isObject(e.profile) && (e.is_unknown || e.is_non_existent) && _.forEach(["24", "32", "48", "72", "192", "512", "1024"], function(t) {
            e.profile["image_" + t] = cdn_url + "/1e11/img/unknown_avatar.png";
          });
        },
        U = function(e) {
          e.profile && "object" === n(e.profile) || (e.profile = {}), "USLACKBOT" === e.id && (e.is_slackbot = !0), b(e), v(e), y(e), w(e), k(e), e._first_name_lc = "", e._last_name_lc = "", e._real_name_lc = "", e._real_name_normalized_lc = "", TS.boot_data.feature_name_tagging_client && (e._display_name_lc = "", e._display_name_normalized_lc = ""), N(e), G(e), e.files = [], e.activity = [], e.stars = [], e.mentions = [], q(e), x(e);
        },
        N = function(e) {
          "name" in e && (e._name_lc = _.toLower(e.name)), _.isObject(e.profile) && ("first_name" in e.profile && (e._first_name_lc = _.toLower(e.profile.first_name)), "last_name" in e.profile && (e._last_name_lc = _.toLower(e.profile.last_name)), "real_name" in e.profile && (e._real_name_lc = _.toLower(e.profile.real_name)), "real_name_normalized" in e.profile && (e._real_name_normalized_lc = _.toLower(e.profile.real_name_normalized)), TS.boot_data.feature_name_tagging_client && ("display_name" in e.profile && (e._display_name_lc = _.toLower(e.profile.display_name)), "display_name_normalized" in e.profile && (e._display_name_normalized_lc = _.toLower(e.profile.display_name_normalized))));
        },
        G = function(e) {
          if (_.isObject(e.profile)) {
            w(e);
            var t = TS.model.team.avatar_base_url + e.team_id + "-" + e.id + "-" + e.profile.avatar_hash + "-";
            _.forEach(["24", "32", "48", "72", "192", "512", "1024"], function(n) {
              e.profile["image_" + n] = t + n;
            }), delete e.profile.image_original;
          }
        },
        W = function(e, t) {
          _.get(e, "profile.always_active") !== _.get(t, "profile.always_active") && (t.presence = _.get(t, "profile.always_active") ? "active" : "away");
        },
        q = function(e) {
          if (!e.presence && !_.isEmpty(TS.model.online_users)) {
            var t = TS.model.online_users.indexOf(e.id);
            t > -1 && (e.presence = "active", TS.model.online_users.splice(t, 1));
          }
          e.presence = "active" === e.presence ? "active" : "away", _.get(e, "profile.always_active") && (e.presence = "active");
        },
        z = !1,
        K = !1,
        V = 0,
        Y = function() {
          if (TS.model.user.is_restricted && TS.membership.lazyLoadChannelMembership()) {
            if (z) return void(K = !0);
            z = !0;
            var e, t = Date.now() - V;
            return e = t < 12e4 ? new Promise(function(e) {
              setTimeout(e, 12e4 - t);
            }) : Promise.resolve(), e.then(function() {
              return K = !1, TS.members.maybeFetchAccessibleUserIds();
            }).finally(function() {
              z = !1, K && (K = !1, Y());
            }), e;
          }
        },
        J = function() {
          return TS.members.invalidateMembersUserCanSeeArrayCaches(), Y();
        },
        Q = 4,
        X = 6655,
        Z = 1975,
        ee = function() {
          0 !== _.keys(g).length && _.each(g, ne);
        },
        te = function(e) {
          if (!g[e]) {
            var t = TS.console.getStackTrace();
            g[e] = setTimeout(function() {
              if (TS.model.ms_connected) {
                if (TS.flannel.fetchAndUpsertObjectsByIds([e]).then(function() {
                    var t = TS.members.getPotentiallyUnknownMemberByIdWithoutFetching(e),
                      n = t.is_unknown ? "failure" : "success";
                    "success" === n && ne(t.id), TS.metrics.count("unknown_member_timeout_retry_" + n);
                  }), g[e]) return;
                g[e] = setTimeout(function() {
                  if (TS.model.ms_connected) {
                    var n = TS.members.getPotentiallyUnknownMemberByIdWithoutFetching(e);
                    if (!n.is_unknown) return;
                    TS.metrics.count("unknown_member_persistence_timeout"), TS.statsd.measure("unknown_member_resolution_timing", "unknown_member_resolution_timing_" + e), TS.console.logError({
                      id: e,
                      is_unknown: n.is_unknown,
                      is_non_existent: n.is_non_existent,
                      start_stack: t
                    }, "persistent unknown member", "unknown_member_error", !0);
                  }
                }, 6e4);
              }
            }, 2e4);
          }
        },
        ne = function(e) {
          clearTimeout(g[e]), delete g[e];
        },
        ie = function(e, t) {
          if ("ADDED" === e.status && TS.lazyLoadMembersAndBots()) TS.members.lazily_added_sig.dispatch(e.member);
          else if ("CHANGED" === e.status) {
            if (-1 != e.what_changed.indexOf("is_unknown") && "unknown_members" === TS.experiment.getGroup("unknown_members_perf")) return TS.members.changed_is_unknown_sig.dispatch(e.member), e;
            if (-1 != e.what_changed.indexOf("current_status") && TS.members.changed_current_status_sig.dispatch(e.member), -1 != e.what_changed.indexOf("profile") && TS.members.changed_profile_sig.dispatch(e.member), -1 == e.what_changed.indexOf("is_restricted") && -1 == e.what_changed.indexOf("is_ultra_restricted") || TS.members.changed_account_type_sig.dispatch(e.member), -1 != e.what_changed.indexOf("real_name") && TS.members.changed_real_name_sig.dispatch(e.member), -1 != e.what_changed.indexOf("name") && TS.members.changed_name_sig.dispatch(e.member), -1 != e.what_changed.indexOf("tz") && TS.members.changed_tz_sig.dispatch(e.member), -1 != e.what_changed.indexOf("deleted")) {
              TS.members.changed_deleted_sig.dispatch(e.member);
              var n = TS.ims.getImByMemberId(e.member.id);
              n && TS.ims.calcUnreadCnts(n, !0), TS.groups.calcActiveMembersForAllGroups();
            } - 1 != e.what_changed.indexOf("presence") && TS.members.presence_changed_sig.dispatch(e.member), -1 != e.what_changed.indexOf("is_owner") && TS.members.changed_owner_perms_sig.dispatch(e.member), -1 != e.what_changed.indexOf("is_admin") && TS.members.changed_admin_perms_sig.dispatch(e.member), t.is_self && (TS.members.changed_self_sig.dispatch(e.member), TS.model.makeYouRegex());
          }
          return e;
        },
        re = function(e) {
          if (e) {
            ae(e);
            var n = t[e];
            return n && n.is_unknown ? n : null;
          }
        },
        ae = function(n) {
          if (void 0 === t[n]) {
            var i = TS.model.members;
            e < i.length && (i.forEach(function(e) {
              t[e.id] = e;
            }), (e = Object.keys(t).length) !== i.length && TS.warn("member map size and member list length have diverged"));
          }
        },
        se = function() {
          var e = TS.shared.getActiveModelOb();
          p.length > 0 && e && (S[e.id] = performance.now());
        };
    }();
  },
  2472: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("members.view", {
        team_filter_changed_sig: new signals.Signal,
        filter_timer: null,
        onStart: function() {
          i = TS.web && TS.web.admin;
          e = TS.utility.debounceWithPromise(k, 500), t = TS.utility.debounceWithPromise(k, 500), n = TS.utility.debounceWithPromise(k, 500);
        },
        switchTabs: function(e) {
          i && "invites" === TS.web.admin.view ? $("#" + e + "_invites_tab").trigger("click") : TS.client ? $("#" + e + "_members_tab").find("a").trigger("click") : $("#" + e + "_members_tab").trigger("click");
        },
        bindTeamFilter: function(e, t, n) {
          n = n || {};
          var i = $(e),
            a = i.find("input.member_filter"),
            s = i.find(".icon_close");
          p(t, n), r = null, n.full_profile_filter && !n.is_long_list_view && a.on("focus", function() {
            TS.team.ensureTeamProfileFields();
          }), a.bind("keyup update-team-filter", function() {
            var i = a.val();
            TS.members.view.filter_timer && window.clearTimeout(TS.members.view.filter_timer);
            var o = function() {
              i.trim().toLocaleLowerCase() !== r && TS.members.view.filterTeam(i, e, t, n).then(function() {
                TS.view && TS.view.rebuildUserGroupList();
              }), s.toggleClass("hidden", !i.trim());
            };
            n.is_long_list_view ? o() : TS.members.view.filter_timer = window.setTimeout(o, TS.members.getMembersForUser().length > 500 ? 250 : 50);
          }), s.bind("click", function() {
            TS.members.view.clearFilter(e, t), TS.view && TS.view.rebuildUserGroupList(), r = null, setTimeout(function() {
              a.focus();
            }, 0);
          });
        },
        filterTeam: function(e, t, n, i) {
          var r = f(n);
          return _.get(i, "full_profile_filter") || _.get(r, "full_profile_filter") ? TS.team.ensureTeamProfileFields().then(function() {
            return m(r) ? b(e, t, n, r) : (x(e, t, n, i), Promise.resolve());
          }) : (x(e, t, n), Promise.resolve());
        },
        getTeamFilter: function() {
          return r;
        },
        selectMatch: function(e) {
          var t = $(e),
            n = t.data("list-items-id"),
            i = $(n),
            r = i.find(".member_item"),
            a = r.filter(".active");
          if (1 == a.length) {
            var s = a.first(),
              o = s.data("member-id");
            o && (TS.ims.startImByMemberId(o), TS.menu.end());
          }
        },
        clearFilter: function(e, t) {
          var n = f(t),
            i = $(e),
            s = i.find("input.member_filter"),
            o = i.find(".icon_close"),
            l = i.data("list-items-id"),
            d = $(l),
            c = d.find(".member_item");
          if (r = "", TS.storage.storeFilterState(r), TS.members.view.filter_timer && (window.clearTimeout(TS.members.view.filter_timer), TS.members.view.filter_timer = null), s.val(""), o.addClass("hidden"), m(n)) T(t), TS.members.view.filterTeam(r, e, t, n);
          else if ($(".restricted_header, .bot_header, .ra_invite_prompt, .restricted_info").removeClass("hidden"), d.find(".no_results").addClass("hidden"), c.addClass("active"), a[t] && (a[t].detachEvents(), delete a[t]), d.find(".member_item.clone").remove(), d.find(".filter_header").remove(), TS.members.view.team_filter_changed_sig.dispatch("", TS.members.getMembersForUser().length), TS.client && t) {
            var _ = $(t);
            _.trigger("resize-immediate"), TS.ui.utility.updateClosestMonkeyScroller(_);
          }
        },
        onTeamDirectoryItemClick: function(e) {
          if (!$(e.target).closest("a").length) {
            var t = $(this),
              n = t.data("member-id");
            TS.members.getMemberById(n) && TS.client && TS.client.ui.previewMember(n);
          }
        },
        findMatchesInMemberList: function(e, t, n) {
          return O(e, t, n);
        },
        getHeaderLabelForMatchKey: function(e) {
          return M(e);
        }
      });
      var e, t, n, i, r = "",
        a = {},
        s = {},
        o = {},
        l = {},
        d = {
          members: {},
          restricted: {},
          deleted: {}
        },
        c = TS.client ? 92 : 116,
        u = function() {
          return ("list" !== _.get(TS, "web.admin.view") || !TS.boot_data.feature_api_admin_page || !TS.boot_data.page_needs_enterprise) && TS.boot_data.page_needs_enterprise;
        },
        m = function(e) {
          return !!(TS.boot_data.page_needs_enterprise && e && e.is_long_list_view) || (!("list" !== _.get(TS, "web.admin.view") || !TS.boot_data.feature_api_admin_page || !TS.boot_data.page_needs_enterprise && !TS.boot_data.feature_api_admin_page_not_ent) || void 0);
        },
        p = function(e, t) {
          o[e] = t;
        },
        f = function(e) {
          var t = o[e];
          return t ? (_.isFunction(t) && (t = t() || {}), t.include_org = u(), t) : void TS.error("Missing arguments for a bound filter");
        },
        h = function() {
          if (!TS.lazyLoadMembersAndBots()) {
            var e = d.members.filter_num_found - d.filtered_items.bots.length,
              t = d.restricted.filter_num_found || 0,
              n = d.deleted.filter_num_found || 0,
              i = $("#restricted_members_tab");
            0 === t ? i.addClass("hidden") : i.removeClass("hidden");
            var r = $("#disabled_members_tab");
            0 === n ? r.addClass("hidden") : r.removeClass("hidden"), $("#disabled_members_count_value").text(n), $("#restricted_members_count_value").text(t), $("#active_members_count_value").text(Math.max(0, e - t));
          }
        },
        g = function(e) {
          var t = $(e).find(".ts_icon_search");
          if (!t.next().is(e + "_spinner")) {
            var n = TS.templates.loading_indicator({
              id: e.substring(1) + "_spinner"
            });
            t.after(n), t.addClass("hidden");
          }
        },
        S = function(e) {
          $(e).find(".ts_icon_search").removeClass("hidden"), $(e + "_spinner").remove();
        },
        T = function(e) {
          d.filter_p && d.filter_p.cancel(), d.filtered_items && (d.filtered_items = {}), d.filter_last_query = null, d.filter_last_include_org = null, d.members.filter_cursor_mark = "", d.members.filter_num_remaining = 0, d.members.filter_num_found = 0, d.members.filter_scroll_mark = 0, d.restricted.filter_cursor_mark = "", d.restricted.filter_num_remaining = 0, d.restricted.filter_num_found = 0, d.restricted.filter_scroll_mark = 0, d.deleted.filter_cursor_mark = "", d.deleted.filter_num_remaining = 0, d.deleted.filter_num_found = 0, d.deleted.filter_scroll_mark = 0, TS.client ? $(e).off("scroll.filter").scrollTop(0) : TS.web && $(window).off("scroll.filter").scrollTop(0);
        },
        b = function(e, t, n, i) {
          var a = e.trim();
          r = a.toLocaleLowerCase(), TS.storage.storeFilterState(r);
          var s = d.filter_last_query !== r || d.filter_last_include_org !== i.include_org || d.filter_last_sort !== i.sort || d.filter_last_sort_dir !== i.sort_dir;
          s && (T(n), d.filter_last_query = r, d.filter_last_include_org = i.include_org, i.sort && (d.filter_last_sort = i.sort), i.sort_dir && (d.filter_last_sort_dir = i.sort_dir)), g(t);
          var o = function() {
            return Promise.resolve().then(function() {
              return v(d, s, r, i);
            }).then(function(e) {
              return S(t), y(e, d, s, r, a, t, n, i);
            }).finally(function() {
              TS.utility.rAF(function() {
                TS.client && TS.ui.utility.updateClosestMonkeyScroller($(n));
              });
            });
          };
          return d.filter_p = s ? o() : d.filter_p.then(o), d.filter_p;
        },
        v = function(i, r, a, s) {
          var o = r || "active_members" === TS.model.ui_state.tab_name && i.members.filter_num_remaining,
            l = r || "restricted_members" === TS.model.ui_state.tab_name && i.restricted.filter_num_remaining,
            d = r || "disabled_members" === TS.model.ui_state.tab_name && i.members.filter_num_remaining;
          if (!o && !l && !d) return h(), Promise.resolve(i.filtered_items);
          var c = _.assign({}, s, {
            restricted: !1
          });
          i.members.filter_p = o ? e(i.members, a, c) : Promise.resolve([]);
          var u = _.assign({}, s, {
            restricted: !0
          });
          i.restricted.filter_p = l ? t(i.restricted, a, u) : Promise.resolve([]);
          var m = _.assign({}, s, {
            include_deleted: 2,
            include_restricted_and_full_members: !0
          });
          return i.deleted.filter_p = d ? n(i.deleted, a, m) : Promise.resolve([]), Promise.join(i.members.filter_p, i.restricted.filter_p, i.deleted.filter_p, function(e, t, n) {
            var a = (s.sort ? E : TS.members.allocateTeamListMembers)(e.concat(t, n));
            return a.members = _.uniqBy(a.members, function(e) {
              return e.id;
            }), a.disabled_members = _.uniqBy(a.disabled_members, function(e) {
              return e.id;
            }), a.restricted_members = _.uniqBy(a.restricted_members, function(e) {
              return e.id;
            }), a.ultra_restricted_members = _.uniqBy(a.ultra_restricted_members, function(e) {
              return e.id;
            }), r ? i.filtered_items = a : (i.filtered_items.members.push.apply(i.filtered_items.members, a.members), i.filtered_items.disabled_members.push.apply(i.filtered_items.disabled_members, a.disabled_members), i.filtered_items.deleted_bots.push.apply(i.filtered_items.deleted_bots, a.deleted_bots), i.filtered_items.bots.push.apply(i.filtered_items.bots, a.bots), i.filtered_items.restricted_members.push.apply(i.filtered_items.restricted_members, a.restricted_members), i.filtered_items.ultra_restricted_members.push.apply(i.filtered_items.ultra_restricted_members, a.ultra_restricted_members)), Promise.resolve(i.filtered_items);
          });
        },
        y = function(e, t, n, i, r, a, s, o) {
          if (e) {
            if (_.get(TS, "web.admin")) return TS.web.admin.setLongListAdminListItems({
              items: e,
              no_dividers: !!i,
              query: i,
              new_query: !!n,
              num_found: {
                members: d.members.filter_num_found || 0,
                restricted: d.restricted.filter_num_found || 0,
                disabled: d.deleted.filter_num_found || 0
              },
              remaining: {
                members: d.members.filter_num_remaining || 0,
                restricted: d.restricted.filter_num_remaining || 0,
                disabled: d.deleted.filter_num_remaining || 0
              }
            }, function() {
              b(i, a, s, o);
            });
            h(), TS.client ? l = TS.view.buildLongListTeamListItems(e, !!i) : TS.web.members && (l = TS.web.members.buildLongListTeamListItems(e, !!i));
            var u = !1;
            "disabled_members" === TS.model.ui_state.tab_name && 0 === (d.deleted.filter_num_found || 0) && (u = !0), "restricted_members" === TS.model.ui_state.tab_name && 0 === (d.restricted.filter_num_found || 0) && (u = !0);
            var m = TS.model.user_groups.filter(function(e) {
              return !e.date_delete;
            });
            "user_groups" === TS.model.ui_state.tab_name && 0 === m.length && (u = !0), u && (TS.model.ui_state.tab_name = "active_members", TS.storage.storeUIState(TS.model.ui_state), $("#active_members_tab").trigger("click"));
            var p = $("#active_members_list");
            p.length && (p.longListView("setItems", l.active_members_list_items), n && p.longListView("scrollToTop"));
            var f = $("#restricted_members_list");
            f.length && (f.longListView("setItems", l.restricted_members_list_items), n && f.longListView("scrollToTop"));
            var g = $("#deleted_members_list");
            g.length && (g.longListView("setItems", l.deleted_members_list_items), n && g.longListView("scrollToTop"));
            var S = e.members.concat(e.bots),
              T = e.restricted_members.concat(e.ultra_restricted_members),
              v = e.disabled_members.concat(e.deleted_bots);
            if ([{
                name: "active",
                label: TS.i18n.t("full team members", "members_view")(),
                matches: S
              }, {
                name: "restricted",
                label: TS.i18n.t("multi-channel guests", "members_view")(),
                matches: T
              }, {
                name: "disabled",
                label: TS.i18n.t("deactivated accounts", "members_view")(),
                matches: v
              }].forEach(function(e) {
                var t = $("#" + e.name + "_no_results");
                e.matches.length > 0 || !i ? t.addClass("hidden").empty() : function() {
                  var n = {
                      query: r,
                      tab: e,
                      active_matches: S,
                      show_active_matches: "active" !== e.name && S.length > 0,
                      restricted_matches: T,
                      show_restricted_matches: "restricted" !== e.name && T.length > 0,
                      disabled_matches: v,
                      show_disabled_matches: "disabled" !== e.name && v.length > 0
                    },
                    i = TS.templates.team_list_no_results(n);
                  t.removeClass("hidden").html(i), t.find(".clear_members_filter").one("click", function() {
                    TS.members.view.clearFilter(a, s);
                  });
                }();
              }), n) {
              if ("#team_list_scroller" === s)
                if (TS.client) {
                  var y = $(s),
                    w = y.find("#team_list_members_wrapper");
                  y.on("scroll.filter", function() {
                    var e, n = y.scrollTop() + y.height() + c;
                    if ("active_members" === TS.model.ui_state.tab_name) {
                      if (n <= t.members.filter_scroll_mark) return;
                      e = w.height(), n > e && t.members.filter_p && t.members.filter_p.isResolved() && (b(i, a, s, o), t.members.filter_scroll_mark = n);
                    }
                    if ("restricted_members" === TS.model.ui_state.tab_name) {
                      if (n <= t.restricted.filter_scroll_mark) return;
                      e = w.height(), n > e && t.restricted.filter_p && t.restricted.filter_p.isResolved() && (b(i, a, s, o), t.restricted.filter_scroll_mark = n);
                    }
                  });
                } else TS.web && $(window).off("scroll.filter").on("scroll.filter", _.throttle(function() {
                  var e = 0,
                    n = 0,
                    r = 0,
                    u = null;
                  "active_members" === TS.model.ui_state.tab_name && (e = _.parseInt($("#active_members_list > .list_items").css("height")), n = _.reject(l.active_members_list_items, {
                    is_divider: !0
                  }).length, r = t.members.filter_num_remaining, u = t.members.filter_p), "restricted_members" === TS.model.ui_state.tab_name && (e = _.parseInt($("#restricted_members_list > .list_items").css("height")), n = _.reject(l.restricted_members_list_items, {
                    is_divider: !0
                  }).length, r = t.restricted.filter_num_remaining, u = t.restricted.filter_p), "disabled_members" === TS.model.ui_state.tab_name && (e = _.parseInt($("#disabled_members_list > .list_items").css("height")), n = _.reject(l.deleted_members_list_items, {
                    is_divider: !0
                  }).length, r = t.deleted.filter_num_remaining, u = d.deleted.filter_p);
                  var m = .9 * Math.min(n, 100);
                  e = _.isNaN(e) ? 0 : e, (e -= m * c) && r && $(this).scrollTop() > e && u && u.isResolved() && b(i, a, s, o);
                }, 50, {
                  leading: !0
                }));
              var k = (t.members.filter_num_found || 0) + (t.restricted.filter_num_found || 0) + (t.deleted.filter_num_found || 0);
              TS.members.view.team_filter_changed_sig.dispatch(r, k);
            }
          }
        },
        w = function(e, t, n) {
          var i = [];
          if (t && (i = t.split(/\s*,\s*|\s+/).map(function(e) {
              return "@" === e.charAt("0") ? e.substring(1) : e;
            }).filter(function(e) {
              return !!e;
            }).map(function(e) {
              if (1 === e.length || !n.full_profile_filter) {
                var t = TS.utility.search.makeClause("real_name", e);
                if (TS.boot_data.feature_name_tagging_client) {
                  var i = TS.utility.search.makeClause("display_name", e);
                  return TS.utility.search.makeConjunction("OR", [t, i]);
                }
                var r = TS.utility.search.makeClause("name", e);
                return TS.utility.search.makeConjunction("OR", [r, t]);
              }
              return TS.utility.search.makeClause("fuzzy_with_email", e);
            })), i.push(TS.utility.search.makeClause("is", "user")), n.restricted) {
            var r = TS.utility.search.makeClause("level", "restricted"),
              a = TS.utility.search.makeClause("level", "ultra_restricted");
            i.push(TS.utility.search.makeConjunction("OR", [r, a]));
          }
          var s = i.length > 1 ? TS.utility.search.makeConjunction("AND", i) : i[0],
            o = {
              query: s,
              count: 100,
              include_bots: n.include_bots,
              exclude_slackbot: n.exclude_slackbot,
              include_deleted: n.include_deleted
            };
          return n.sort && (o.sort = n.sort), n.sort_dir && (o.sort_dir = n.sort_dir), n.include_org && (o.all_of_org = n.include_org), e.filter_cursor_mark && (o.cursor_mark = e.filter_cursor_mark), n.endpoint && (o.endpoint = n.endpoint), o;
        },
        k = function e(t, n, i) {
          var r = w(t, n, i);
          return TS.lazyLoadMembersAndBots() && (r.raw_query = n), TS.utility.search.promiseToSearch(r).then(function(r) {
            if (t.filter_num_remaining || (t.filter_num_remaining = r.data.num_found, t.filter_num_found = r.data.num_found), t.filter_num_remaining -= r.data.items.length, t.filter_cursor_mark = r.data.next_cursor_mark, !r.data.items.length) return Promise.resolve([]);
            var a = r.data.items.map(function(e) {
              var t = TS.members.getMemberById(e.id);
              return t && _.isEqual(t, e) || (i.include_org && e.team_id !== TS.model.team.id && (e.is_primary_owner = !1, e.is_owner = !1, e.is_admin = !1), t = TS.members.upsertMember(e).member), t;
            });
            return i.restricted || i.include_restricted_and_full_members || (a = a.filter(function(e) {
              return !e.is_restricted;
            })), a.length ? Promise.resolve(a) : t.filter_num_remaining ? e(t, n, i) : Promise.resolve([]);
          });
        },
        x = function(e, t, n, s) {
          var o = $(t),
            l = e.trim();
          r = l.toLocaleLowerCase();
          var d, c = o.data("list-items-id"),
            _ = $(c),
            u = _.find(".member_item:not(.clone)"),
            m = u.filter(".active"),
            p = _.find(".member_item.clone"),
            f = _.find(".filter_header"),
            h = !TS.web && "#team_filter" === t,
            g = {};
          TS.storage.storeFilterState(r);
          var S;
          i && "#team_filter" === t && (S = _.find(".tab_pane.selected")), S || TS.web || "#team_filter" !== t || (S = $("#team_list_members")), S && S.length && S.addClass("hidden"), a[n] && (a[n].detachEvents(), delete a[n]), p.remove(), f.remove(), m.removeClass("active"), _.find(".no_results").addClass("hidden");
          var T;
          if (i && "invites" === TS.web.admin.view) {
            var b = [],
              v = [],
              y = [];
            $.each(u, function(e, t) {
              var n;
              t = $(t), n = t.data("invite-id"), g[n] = t;
            }), v = O(TS.web.admin.pending_invites, r).name || [], y = O(TS.web.admin.accepted_invites, r).name || [], b = v.concat(y), b.length > 0 && ($.each(b, function(e, t) {
              t && t.member && t.member.id && g[t.member.id] && g[t.member.id].addClass("active");
            }), n && $(n).trigger("resize")), T = [{
              name: "pending",
              label: TS.i18n.t("pending invitations", "members_view")(),
              matches: v
            }, {
              name: "accepted",
              label: TS.i18n.t("accepted invitations", "members_view")(),
              matches: y
            }], T.forEach(function(e) {
              var i = $("#" + e.name + "_no_results");
              if (e.matches.length > 0) return void i.addClass("hidden").empty();
              var r = {
                  query: l,
                  tab: e,
                  pending_matches: v,
                  show_pending_matches: "pending" !== e.name && v.length > 0,
                  accepted_matches: y,
                  show_accepted_matches: "accepted" !== e.name && y.length > 0
                },
                a = TS.templates.team_list_no_results(r);
              i.removeClass("hidden").html(a), i.find(".clear_members_filter").on("click", function() {
                TS.members.view.clearFilter(t, n);
              });
            }), d = b;
          } else {
            var w, k = [],
              x = [],
              M = [];
            w = i ? e.length ? TS.members.getMembersForUser() : TS.web.admin.getMembersForUser() : TS.members.getMembersForUser(), $(".restricted_header, .bot_header, .ra_invite_prompt, .restricted_info").toggleClass("hidden", !!r), $.each(u, function(e, t) {
              var n;
              t = $(t), n = t.data("member-id"), g[n] = t;
            }), b = O(w, r, s.full_profile_filter);
            var C = Object.keys(b);
            if (C.length > 0) {
              if (A(b, C, g, M, x, k, h ? n : ""), n) {
                var I = $(n);
                I.trigger("resize"), TS.ui.utility.updateClosestMonkeyScroller(I);
              }
            } else "#file_member_filter" === t && (_.find(".query").text(l), _.find(".no_results").removeClass("hidden"));
            "#team_filter" === t && (T = [{
              name: "active",
              label: TS.i18n.t("full team members", "members_view")(),
              matches: k
            }, {
              name: "restricted",
              label: TS.i18n.t("multi-channel guests", "members_view")(),
              matches: x
            }, {
              name: "disabled",
              label: TS.i18n.t("deactivated accounts", "members_view")(),
              matches: M
            }], T.forEach(function(e) {
              var i = $("#" + e.name + "_no_results");
              if (e.matches.length > 0) return void i.addClass("hidden").empty();
              ! function() {
                var r = {
                    query: l,
                    tab: e,
                    active_matches: k,
                    show_active_matches: "active" !== e.name && k.length > 0,
                    restricted_matches: x,
                    show_restricted_matches: "restricted" !== e.name && x.length > 0,
                    disabled_matches: M,
                    show_disabled_matches: TS.web && "disabled" !== e.name && M.length > 0
                  },
                  a = TS.templates.team_list_no_results(r);
                i.removeClass("hidden").html(a), i.find(".clear_members_filter").on("click", function() {
                  TS.members.view.clearFilter(t, n);
                });
              }();
            })), d = k.concat(x, M);
          }
          S && S.length && S.removeClass("hidden"), TS.ui.utility.updateClosestMonkeyScroller($(n)), TS.members.view.team_filter_changed_sig.dispatch(l, d.length);
        },
        M = function(e) {
          return s[e] || e;
        },
        C = function(e, t) {
          var n = document.createElement("div"),
            i = document.createElement("strong");
          return n.classList.add("filter_header"), i.appendChild(document.createTextNode(e)), t.length && i.appendChild(document.createTextNode(": ")), n.appendChild(i), t.forEach(function(e, i) {
            n.appendChild(e), i < t.length - 1 && n.appendChild(document.createTextNode(", "));
          }), n;
        },
        I = function(e, t) {
          var n = document.createElement("span"),
            i = document.createElement("strong"),
            r = e.split(t);
          return i.appendChild(document.createTextNode(t)), n.appendChild(document.createTextNode(r.shift())), n.appendChild(i), n.appendChild(document.createTextNode(r.join(t))), n;
        },
        A = function(e, t, n, r, o, l, d) {
          var c, _, u, m = $(d),
            p = document.createDocumentFragment(),
            f = document.createDocumentFragment(),
            h = document.createDocumentFragment(),
            g = i && TS.web.admin.isSubsetCase();
          if (t.sort(function(e, t) {
              return TS.i18n.sorter(s[e], s[t]);
            }).forEach(function(t) {
              var i = document.createDocumentFragment(),
                a = document.createDocumentFragment(),
                s = document.createDocumentFragment(),
                d = [],
                m = [],
                S = [],
                T = {},
                b = {},
                v = {};
              g && (u || (u = $("#active_members > div:first-of-type"), _ = $("#restricted_members > div:first-of-type"), c = $("#disabled_members > div:first-of-type"))), e[t].forEach(function(e) {
                var p, f = e.member,
                  h = !1;
                f && f.id && (p = n[f.id], !p && g && (p = $(TS.web.admin.buildMemberHTML(f, !1, !1)), h = !0), p && ("name" !== t || h ? f.deleted ? (c || (c = p.parent()), e.value && !T[e.value] && (T[e.value] = d.push(I(e.value, e.match))), i.appendChild(p.clone().addClass("active clone").get(0))) : f.is_restricted ? (_ || (_ = p.parent()), e.value && !b[e.value] && (b[e.value] = m.push(I(e.value, e.match))), a.appendChild(p.clone().addClass("active clone").get(0))) : (u || (u = p.parent()), e.value && !v[e.value] && (v[e.value] = S.push(I(e.value, e.match))), s.appendChild(p.clone().addClass("active clone").get(0))) : p.addClass("active")), f.deleted ? r.push(f) : f.is_restricted ? o.push(f) : l.push(f));
              }), i.childNodes && i.childNodes.length && (p.appendChild(C(M(t), d)), p.appendChild(i)), a.childNodes && a.childNodes.length && (f.appendChild(C(M(t), m)), f.appendChild(a)), s.childNodes && s.childNodes.length && (h.appendChild(C(M(t), S)), h.appendChild(s)), i = null, a = null, s = null, d = null, m = null, S = null, T = null, b = null, v = null;
            }), c && c.append(p), _ && _.append(f), u && u.append(h), m.length) {
            var S = m.find(".member_item.clone");
            a[d] = S.find(".lazy").lazyload({
              container: m,
              ignore_when_hidden_element: m,
              all_images_same_size: !0
            }), S.one("remove", function() {
              a[d] && (a[d].detachEvents(), delete a[d]);
            });
          }
          g && (TS.web.admin.lazyload && TS.web.admin.lazyload.detachEvents && (TS.web.admin.lazyload.detachEvents(), TS.web.admin.lazyload = null), TS.web.admin.lazyload || (TS.web.admin.lazyload = $("#admin_list").find(".lazy").lazyload())), p = null, f = null, h = null, c = null, _ = null, u = null;
        },
        E = function(e) {
          return _.reduce(e, function(e, t) {
            return t.deleted ? t.is_bot ? e.deleted_bots.push(t) : e.disabled_members.push(t) : t.is_ultra_restricted ? e.ultra_restricted_members.push(t) : t.is_restricted ? e.restricted_members.push(t) : t.is_bot || t.is_slackbot ? e.bots.push(t) : e.members.push(t), e;
          }, {
            members: [],
            disabled_members: [],
            deleted_bots: [],
            bots: [],
            restricted_members: [],
            ultra_restricted_members: []
          });
        },
        O = function(e, t, n) {
          var i = new RegExp("^" + TS.utility.regexpEscape(t), "i"),
            r = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(t), "i"),
            a = {},
            o = n && t ? TS.team.getVisibleTeamProfileFields() : [];
          return s = {
            title: "What I Do",
            name: "Name"
          }, e.forEach(function(e) {
            var l;
            l = TS.boot_data.feature_name_tagging_client ? e._real_name_lc && (e._real_name_lc.match(i) || e._real_name_lc.match(r)) || e.email && (e.email.match(i) || e.email.match(r)) || e.profile && e.profile.email && (e.profile.email.match(i) || e.profile.email.match(r)) || e.profile && e.profile.real_name_normalized && (e.profile.real_name_normalized.match(i) || e.profile.real_name_normalized.match(r)) || e.profile && e.profile.real_name && (e.profile.real_name.match(i) || e.profile.real_name.match(r)) || e.profile && e.profile.display_name_normalized && (e.profile.display_name_normalized.match(i) || e.profile.display_name_normalized.match(r)) || e.profile && e.profile.preferred_name && (e.profile.preferred_name.match(i) || e.profile.preferred_name.match(r)) : e.name && (e.name.match(i) || e.name.match(r)) || e.first_name && (e.first_name.match(i) || e.first_name.match(r)) || e.last_name && (e.last_name.match(i) || e.last_name.match(r)) || e._real_name_lc && (e._real_name_lc.match(i) || e._real_name_lc.match(r)) || e.email && (e.email.match(i) || e.email.match(r)) || e.profile && e.profile.email && (e.profile.email.match(i) || e.profile.email.match(r)) || e.profile && e.profile.real_name_normalized && (e.profile.real_name_normalized.match(i) || e.profile.real_name_normalized.match(r)) || e.profile && e.profile.real_name && (e.profile.real_name.match(i) || e.profile.real_name.match(r)), l && (a.name || (a.name = []), a.name.push({
              member: e
            })), n && t && (l = e.profile && e.profile.title && (e.profile.title.match(i) || e.profile.title.match(r))) && (a.title || (a.title = []), a.title.push({
              member: e
            })), o.length && e.profile && e.profile.fields && o.forEach(function(t) {
              var n = e.profile.fields[t.id];
              if (n) {
                if (l = null, "user" === t.type) {
                  if (n.value) {
                    var o = "";
                    n.value.split(/\s*,\s*/).some(function(e) {
                      return o = TS.members.getPrefCompliantMemberNameById(e, !1), o.match(i) || o.match(r);
                    }), l && (a[t.id] || (a[t.id] = []), a[t.id].push({
                      member: e,
                      value: o,
                      match: l[0]
                    }));
                  }
                } else l = n.value && (n.value.match(i) || n.value.match(r)), l ? (a[t.id] || (a[t.id] = []), a[t.id].push({
                  member: e,
                  value: n.value,
                  match: l[0]
                })) : (l = n.alt && (n.alt.match(i) || n.alt.match(r))) && (a[t.id] || (a[t.id] = []), a[t.id].push({
                  member: e,
                  value: n.alt,
                  match: l[0]
                }));
                l && !s[t.id] && (s[t.id] = t.label);
              }
            });
          }), a;
        };
    }();
  },
  2473: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("membership", {
        membership_counts_need_refetch_sig: new signals.Signal,
        onStart: function() {
          if (TS.lazyLoadMembersAndBots()) {
            TS.channels.member_left_sig.add(u), TS.channels.member_joined_sig.add(c), TS.groups.member_left_sig.add(u), TS.groups.member_joined_sig.add(c), TS.channels.switched_sig.add(m), TS.groups.switched_sig.add(m), TS.ims.switched_sig.add(m), TS.mpims.switched_sig.add(m), TS.channels.joined_sig.add(p), TS.channels.left_sig.add(f), TS.groups.left_sig.add(f);
            var e = function() {
              TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.add(h) : TS.ms.connected_sig.add(h);
            };
            TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.addOnce(e) : TS.ms.connected_sig.addOnce(e);
            TS.members.changed_deleted_sig.add(g, this, 1 / 0), TS.members.non_loaded_changed_deleted_sig.add(g, this, 1 / 0);
          }
        },
        test: function() {
          var e = {};
          return Object.defineProperty(e, "_channel_member_counts_info", {
            get: function() {
              return t;
            },
            set: function(e) {
              t = e;
            }
          }), Object.defineProperty(e, "_promiseToGetChannelMemberCountsFromAPI", {
            get: function() {
              return l;
            },
            set: function(e) {
              l = e;
            }
          }), Object.defineProperty(e, "_isChannelMembershipKnownForUser", {
            get: function() {
              return r;
            },
            set: function(e) {
              r = e;
            }
          }), Object.defineProperty(e, "_getChannelMembershipForUser", {
            get: function() {
              return a;
            },
            set: function(e) {
              a = e;
            }
          }), Object.defineProperty(e, "_setChannelKnownMembership", {
            get: function() {
              return s;
            },
            set: function(e) {
              s = e;
            }
          }), Object.defineProperty(e, "_channel_known_member_statuses", {
            get: function() {
              return n;
            },
            set: function(e) {
              n = e;
            }
          }), e;
        },
        lazyLoadChannelMembership: function() {
          return TS.lazyLoadMembersAndBots();
        },
        lazyLoadGroupMembership: function() {
          return !1;
        },
        lazyLoadMpimMembership: function() {
          return !1;
        },
        getUserChannelMembershipStatus: function(e, t) {
          if (!_.isString(e)) throw new Error("Expected user_id to be a string");
          if (!_.isObject(t)) throw new Error("Expected channel to be an object");
          if (t.is_im) return {
            is_known: !0,
            is_member: e == TS.boot_data.user_id || e == t.user
          };
          if (!TS.membership.lazyLoadChannelMembership()) {
            return {
              is_known: !0,
              is_member: "USLACKBOT" !== e && _.includes(t.members, e)
            };
          }
          if (r(t.id, e)) return {
            is_known: !0,
            is_member: a(t.id, e)
          };
          var n = {
            is_known: !1
          };
          return Object.defineProperty(n, "is_member", {
            get: function() {
              throw new Error("Value for is_member is not known; check is_known before accessible this field");
            }
          }), n;
        },
        setUserChannelMembership: function(e, t, n) {
          if (!_.isString(e)) throw new Error("Expected user_id to be a string");
          return TS.membership.lazyLoadChannelMembership() ? s(t.id, e, n) : _.includes(t.members, e) != n && (n ? t.members.push(e) : _.pull(t.members, e), !0);
        },
        ensureChannelMembershipIsKnownForUsers: function(e, t) {
          var n = o(e, t);
          return 0 === n.length ? Promise.resolve(!1) : TS.flannel.fetchChannelMembershipForUsers(e, n).then(function(t) {
            return _.forEach(t, function(t, n) {
              s(e, n, t);
            }), !0;
          });
        },
        isChannelMembershipKnownForUsers: function(e, t) {
          return 0 === o(e, t).length;
        },
        notifyChannelMembershipChanged: function(e, t, n, i) {
          var r = TS.members.getMemberById(e);
          if (!r) {
            var a = n ? "joined" : "left";
            return void TS.warn("User " + e + " " + a + " channel " + t.id + " but we don’t have that user in our model");
          }
          n ? TS.channels.member_joined_sig.dispatch(t, r, !i) : TS.channels.member_left_sig.dispatch(t, r);
        },
        promiseToGetMembershipCounts: function(e) {
          var t = TS.membership.getMembershipCounts(e);
          return t.promise ? t.promise.then(function() {
            return Promise.resolve(TS.membership.getMembershipCounts(e).counts);
          }) : Promise.resolve(t.counts);
        },
        getMembershipCounts: function(e) {
          t[e.id] = t[e.id] || {};
          var n = t[e.id];
          return !n.promise && (!n.counts || n.should_refetch) && (n.should_refetch = !1, n.promise = l(e, n.last_fetched_ts || 0).then(function(t) {
            return n.counts = t, delete n.promise, n.should_refetch && TS.membership.getMembershipCounts(e), n.last_fetched_ts = Date.now(), null;
          })), n;
        }
      });
      var e, t = {},
        n = {},
        i = {},
        r = function(e, t) {
          return !!n[e] && (_.includes(n[e].known_members, t) || _.includes(n[e].known_non_members, t));
        },
        a = function(e, t) {
          if (n[e] && _.includes(n[e].known_members, t)) return !0;
          if (n[e] && _.includes(n[e].known_non_members, t)) return !1;
          throw new Error("Channel membership not known for the given user; this is a programming error");
        },
        s = function(e, t, i) {
          if (TS.membership.lazyLoadChannelMembership()) {
            if (!_.isString(e)) throw new Error("model_ob_id should be a string");
            if (!_.isString(t)) throw new Error("user_id should be a string");
            if (!_.isBoolean(i)) throw new Error("is_member should be a boolean");
            return n[e] || (n[e] = {
              known_members: [],
              known_non_members: []
            }), r(e, t) && a(e, t) == i ? !1 : (TS.has_pri[T] && TS.log(T, "Noting " + t + " (" + _.get(TS.members.getMemberById(t), "name", "(member not loaded)") + ") " + (i ? "is" : "is NOT") + " a member of " + e), i ? (n[e].known_members.push(t), _.pull(n[e].known_non_members, t)) : (n[e].known_non_members.push(t), _.pull(n[e].known_members, t)), !0);
          }
        },
        o = function(e, t) {
          if (!_.isString(e)) throw new Error("Expected channel_id to be a string");
          if (!_.isArray(t)) throw new Error("Expected user_ids to be an array");
          if (t.length > 0 && !_.isString(t[0])) throw new Error("Expected user_ids to be an array of strings");
          return TS.membership.lazyLoadChannelMembership() ? "D" === e[0] ? [] : t.filter(function(t) {
            return !r(e, t);
          }) : [];
        },
        l = function(e, t) {
          if (!e) return void TS.warn("_promiseToGetChannelMemberCountsFromAPI needs a model_ob!");
          var n = Date.now() - t,
            r = i[e.id];
          if (r) return r;
          r = n < 1e4 ? new Promise(function(t) {
            TS.has_pri[S] && TS.log(S, "Channel member counts (" + e.id + "): it’s only been " + n + "ms since last fetch; waiting " + (1e4 - n) + " ms before fetching"), setTimeout(t, 1e4 - n);
          }) : Promise.resolve();
          var a = e.is_group ? "groups.info" : "channels.info";
          return i[e.id] = r.then(function() {
            return TS.has_pri[S] && TS.log(S, "Channel member counts (" + e.id + "): fetching counts from API"), TS.lazyLoadMembersAndBots() ? TS.flannel.fetchMembershipCountsForChannel(e.id).then(function(t) {
              if (!t) throw new Error("Invalid membership counts response from flannel!");
              return TS.has_pri[S] && TS.log(S, "Channel member counts from flannel (" + e.id + "): " + JSON.stringify(t)), {
                member_count: t.members,
                restricted_member_count: t.guests,
                teams_member_count: t.external_teams
              };
            }).catch(function() {
              var t = Date.now();
              return i[e.id] = null, l(e, t);
            }).finally(function() {
              i[e.id] = null;
            }) : TS.api.call(a, {
              channel: e.id,
              no_members: "channels.info" === a,
              display_counts: !0
            }).then(function(t) {
              var n;
              return n = e.is_group ? t.data.group.display_counts : t.data.channel.display_counts, TS.has_pri[S] && TS.log(S, "Channel member counts (" + e.id + "): " + JSON.stringify(n)), {
                member_count: n.display_counts,
                restricted_member_count: n.guest_counts
              };
            }).finally(function() {
              i[e.id] = null;
            });
          }), i[e.id];
        },
        d = function(e, n, i) {
          if (TS.lazyLoadMembersAndBots()) {
            var r = t[e.id];
            r && (r.should_refetch = !0, r.counts && (r.counts.member_count += n, i && (r.counts.restricted_count += n)));
          }
        },
        c = function(e, t) {
          d(e, 1, t.is_restricted), TS.membership.lazyLoadChannelMembership() && s(e.id, t.id, !0);
        },
        u = function(e, t) {
          d(e, -1, t.is_restricted), TS.membership.lazyLoadChannelMembership() && s(e.id, t.id, !1);
        },
        m = function() {
          if (e) {
            var n = TS.shared.getModelObById(e);
            n && n.is_channel && !n.is_member && (TS.has_pri[S] && TS.log(S, "Channel member counts (" + n.id + "): removing local counts because we switched away and we are not a member"), delete t[n.id]);
          }
          e = TS.shared.getActiveModelOb().id;
        },
        p = function(e) {
          TS.lazyLoadMembersAndBots() && c(e, TS.model.user);
        },
        f = function(e) {
          TS.lazyLoadMembersAndBots() && (TS.has_pri[S] && TS.log(S, "Channel member counts (" + e.id + "): removing local counts because we left the channel"), delete t[e.id], delete n[e.id]);
        },
        h = function(e) {
          if (!e) {
            var r, a = TS.shared.getActiveModelOb();
            a && a.id && (r = t[a.id] || {}, r.should_refetch = !0), t = {}, n = {}, i = {}, a && a.id && (t[a.id] = r), TS.membership.membership_counts_need_refetch_sig.dispatch();
          }
        },
        g = function() {
          _.forEach(t, function(e) {
            e.should_refetch = !0;
          });
        },
        S = 1989,
        T = 1990;
    }();
  },
  2474: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("mentions", {
        mention_changed_sig: new signals.Signal,
        mention_removed_sig: new signals.Signal,
        mentions_fetched_sig: new signals.Signal,
        mentions_being_fetched_sig: new signals.Signal,
        mentions_being_fetched: !1,
        mentions_needs_fetched: !1,
        has_more: !1,
        after_ts: null,
        fetched_once: !1,
        active_tab: "all",
        test: function() {
          return {};
        },
        onStart: function() {
          TS.prefs.mentions_exclude_at_channels_changed_sig.add(n), TS.prefs.mentions_exclude_at_user_groups_changed_sig.add(i);
        },
        maybeUpdateMentions: function(e) {
          if ("client" === TS.boot_data.app && TS.model.team) return TS.mentions.mentions_being_fetched || !TS.mentions.fetched_once || "mentions" !== TS.model.ui_state.flex_name ? void(TS.mentions.mentions_needs_fetched = !0) : void TS.mentions.updateMentions(e);
        },
        updateMentions: function(t) {
          TS.mentions.mentions_being_fetched = !0, TS.mentions.mentions_needs_fetched = !1, TS.mentions.mentions_being_fetched_sig.dispatch(t);
          TS.api.call("activity.mentions", e(), TS.mentions.onFetchMentions, !0);
        },
        fetchMoreMentions: function() {
          TS.mentions.fetchMentions(TS.mentions.after_ts);
        },
        fetchMentions: function(t) {
          TS.mentions.mentions_needs_fetched = !1, TS.mentions.fetched_once = !0;
          var n = e();
          t = t || "", n.after_ts = t, TS.api.call("activity.mentions", n, TS.mentions.onFetchMentions);
        },
        getMentionByMsgId: function(e, t, n) {
          var i, r, a;
          return (i = function(e, t) {
            return _.find(e, function(n, i) {
              return !(!n.message || n.message.ts !== t) && (r = e, a = i, !0);
            });
          }(TS.model.user.mentions, e)) ? (t && i.message ? i.message = t : n && _.isArray(r) && _.isNumber(a) && r.splice(a, 1), i) : null;
        },
        onFetchMentions: function(e, t) {
          if (TS.mentions.mentions_being_fetched = !1, TS.mentions.mentions_needs_fetched && setTimeout(TS.mentions.maybeUpdateMentions, 100), !e) return void TS.error("failed fetchMentions");
          for (var n, i, r = [], a = 0; a < t.mentions.length; a += 1) {
            if (n = t.mentions[a], "reaction" === n.type)
              if ("message" === n.item.type) n.rxn_ts = n.ts, n.channel = n.item.channel, n.message = n.item.message, n.item.message._rxn_key = TS.rxns.getRxnKey("message", n.item.message.ts, n.item.channel), delete n.item;
              else {
                if ("file" !== n.item.type) continue;
                n.rxn_ts = n.ts, n.channel = _.first(n.item.file.channels), n.message = {
                  file: n.item.file,
                  subtype: "file_reaction",
                  ts: n.ts
                }, delete n.item;
              }
            var s = n.message;
            if (s) {
              var o = s.file,
                l = s.comment;
              if ("file_share" === s.subtype || "file_mention" === s.subtype || "file_comment" === s.subtype || "file_reaction" === s.subtype) {
                if (!o) continue;
                if ("file_comment" === s.subtype && !l) continue;
              }
              if ("0000000000.000000" != s.ts) {
                if ("file_share" === s.subtype || "file_mention" === s.subtype || "file_comment" === s.subtype || "file_reaction" === s.subtype) o._rxn_key = TS.rxns.getRxnKey("file", o.id), i = TS.rxns.getExistingRxnsByKey(o._rxn_key), i && !o.reactions ? TS.warn("file:" + o.id + " has reactions in local model, but we got an object in mentions that does NOT have reactions, which seems suspicious") : TS.rxns.upsertRxnsFromDataAndUpdateUI(o._rxn_key, o.reactions), "file_comment" === s.subtype && (l._rxn_key = TS.rxns.getRxnKey("file_comment", l.id), i = TS.rxns.getExistingRxnsByKey(l._rxn_key), i && !l.reactions ? TS.warn("comment:" + l.id + " has reactions in local model, but we got an object in mentions that does NOT have reactions, which seems suspicious") : TS.rxns.upsertRxnsFromDataAndUpdateUI(l._rxn_key, l.reactions));
                else {
                  TS.ui.handy_rxns.decorateMsg(s, s.text), s._rxn_key = TS.rxns.getRxnKey("message", s.ts, n.channel), i = TS.rxns.getExistingRxnsByKey(s._rxn_key), i && !s.reactions ? TS.warn("msg:" + s.ts + " has reactions in local model, but we got an object in mentions that does NOT have reactions, which seems suspicious") : TS.rxns.upsertRxnsFromDataAndUpdateUI(s._rxn_key, s.reactions);
                  var d = TS.shared.getModelObById(n.channel),
                    c = d && TS.utility.msgs.getMsg(s.ts, d.msgs);
                  c && (s.is_starred = c.is_starred);
                }
                TS.mentions.getMentionByMsgId(s.ts, s) || r.push(n);
              } else TS.warn("bad mention! msg.ts == 0000000000.000000");
            }
          }
          TS.model.user.mentions = TS.model.user.mentions.concat(r), TS.mentions.sortMentions(), TS.mentions.has_more = t.has_more, TS.model.user.mentions.length && (n = TS.model.user.mentions[TS.model.user.mentions.length - 1], TS.mentions.after_ts = "reaction" === n.type ? n.rxn_ts : n.message.ts), TS.mentions.mentions_fetched_sig.dispatch();
        },
        sortMentions: function() {
          function e(e, i) {
            return t = e.rxn_ts || e.message.ts, n = i.rxn_ts || i.message.ts, t < n ? 1 : t > n ? -1 : 0;
          }
          var t, n;
          TS.model.user.mentions.sort(e);
        },
        replaceMsg: function(e) {
          var t = TS.mentions.getMentionByMsgId(e.ts, e);
          t && TS.mentions.mention_changed_sig.dispatch(t);
        },
        removeMsg: function(e) {
          TS.mentions.getMentionByMsgId(e, null, !0) && TS.mentions.mention_removed_sig.dispatch(e);
        },
        setExcludeAtChannelsPref: function(e) {
          e = !!e, TS.model.prefs.mentions_exclude_at_channels = e, TS.prefs.setPrefByAPI({
            name: "mentions_exclude_at_channels",
            value: e
          }), n();
        },
        setExcludeAtUserGroupsPref: function(e) {
          e = !!e, TS.model.prefs.mentions_exclude_at_user_groups = e, TS.prefs.setPrefByAPI({
            name: "mentions_exclude_at_user_groups",
            value: e
          }), i();
        },
        weaveInRxnRecords: function() {
          var e, t, n, i, r, a = TS.rxns.getRxnRecords();
          TS.model.user.mentions = TS.model.user.mentions.filter(function(e) {
            return "rxn" !== e.type;
          });
          for (var s = 0; s < a.length; s += 1)
            if (t = a[s].rxn_key, e = TS.rxns.getRxnKeyParts(t), "message" === e.type) i = TS.shared.getModelObById(e.c_id), (r = i && TS.utility.msgs.getMsg(e.id, i.msgs)) && (TS.mentions.getMentionByMsgId(e.id, null, !0), n = {
              channel: e.c_id,
              type: "reaction",
              rxn_ts: a[s].last_update,
              message: _.cloneDeep(r)
            }, n.message._rxn_key = t, TS.model.user.mentions.push(n));
            else {
              if ("file" === e.type) continue;
              if ("file_comment" === e.type) continue;
            }
          TS.mentions.sortMentions();
        }
      });
      var e = function() {
          return t();
        },
        t = function() {
          var e = {
              count: 20,
              reactions: 1
            },
            t = ["thread"];
          return TS.model.prefs.mentions_exclude_at_channels && (t.push("everyone"), t.push("channel")), TS.model.prefs.mentions_exclude_at_user_groups && t.push("user_group"), t.length > 0 && (e.exclude = t.join(",")), e;
        },
        n = function() {
          TS.model.prefs.mentions_exclude_at_channels ? (r(["everyone", "channel"]), TS.mentions.mentions_fetched_sig.dispatch()) : TS.mentions.maybeUpdateMentions();
        },
        i = function() {
          TS.model.prefs.mentions_exclude_at_user_groups ? (r(["user_group"]), TS.mentions.mentions_fetched_sig.dispatch()) : TS.mentions.maybeUpdateMentions();
        },
        r = function(e) {
          for (var t, n = TS.model.user.mentions.length - 1; n >= 0; n -= 1) t = TS.model.user.mentions[n], -1 !== e.indexOf(t.type) && TS.model.user.mentions.splice(n, 1);
        };
    }();
  },
  2475: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("menu.app", {
        onStart: function() {},
        active_app: null,
        active_app_bot_id: null,
        app_item_click_sig: new signals.Signal,
        startWithApp: function(t, n, i, r, a) {
          function s(e) {
            var t = _.get(e, "bot_user.id"),
              n = TS.shared.getActiveModelOb();
            return t && (TS.model.active_channel_id || TS.model.active_group_id) ? TS.membership.ensureChannelMembershipIsKnownForUsers(n.id, [t]).then(function() {
              return e;
            }) : e;
          }

          function o(n) {
            TS.menu.app.active_app = n, a ? TS.boot_data.feature_shared_channels_client && TS.menu.app_team_id ? TS.client.ui.app_profile.openWithApp(TS.menu.app.active_app, TS.menu.app.active_app_bot_id, TS.menu.app.active_app_team_id) : TS.client.ui.app_profile.openWithApp(TS.menu.app.active_app, TS.menu.app.active_app_bot_id) : e(t, r);
          }
          TS.menu.isRedundantClick(t) || TS.client.ui.checkForEditing(t) || (a || (TS.menu.buildIfNeeded(), TS.menu.clean()), i || (i = TS.model.user.team_id), TS.menu.app.active_app_bot_id = n, TS.menu.app.active_app_team_id = i, TS.apps.promiseToGetFullAppProfile(n, i, null, !0).then(s).then(o));
        },
        onAppItemClick: function(e) {
          var t = $(this),
            n = t.data("action"),
            i = _.get(TS.menu.app.active_app, "bot_user");
          "view_details" === n ? TS.apps.isAppSpaceEnabled() && i && i.id ? TS.ims.startImByMemberId(i.id).then(function() {
            TS.client.ui.app_space.toggleView("about");
          }) : TS.client.ui.app_profile.openWithApp(TS.menu.app.active_app, TS.menu.app.active_app_bot_id, TS.menu.app.active_app_team_id) : "files" === n ? (e.preventDefault(), TS.view.files.clearFilter(), TS.client.ui.files.filterFileList(TS.menu.app.active_app.bot_user.id)) : "remove_from_channel" === n ? (e.preventDefault(), TS.model.active_channel_id ? TS.channels.kickMember(TS.model.active_channel_id, TS.menu.app.active_app.bot_user.id) : TS.model.active_group_id && TS.groups.kickMember(TS.model.active_group_id, TS.menu.app.active_app.bot_user.id)) : "invite_to_channel" === n && (e.preventDefault(), TS.ui.invite.showInviteMemberToChannelDialog(TS.menu.app.active_app.bot_user.id)), TS.clog.track("USER_CARD_CLICK", {
            app_id: TS.menu.app.active_app.id,
            bot_id: TS.menu.app.active_app_bot_id
          }), TS.menu.app.end();
        },
        end: function() {
          TS.menu.app.active_app = null, TS.menu.end();
        }
      });
      var e = function(e, t) {
        var n = TS.apps.constructTemplateArgsForCardAndProfile(TS.menu.app.active_app, TS.menu.app.active_app_bot_id, TS.menu.app.active_app_team_id),
          i = _.get(TS.menu.app.active_app, "bot_user.id");
        if (TS.menu.$menu_header.html(TS.templates.menu_app_card_header(n)), TS.menu.$menu_items.html(TS.templates.menu_app_card_items(n)), TS.menu.$menu_footer.html(TS.templates.menu_app_card_footer(n)), TS.menu.start(e, t, {
            menu_class: "app_card"
          }), i) {
          var r = TS.utility.keymap,
            a = !1;
          $("[data-js=app_card_dm]").bind("keydown", function(e) {
            var t = $(this);
            e.which != r.enter || e.shiftKey || a || "" !== $.trim(t.val()) && (e.preventDefault(), TS.ims.startImByMemberId(TS.menu.app.active_app.bot_user.id, !1, t.val()), TS.menu.app.end(), a = !0);
          });
        }
        n.hide_link_to_app_profile ? TS.menu.$menu_header.off() : TS.menu.$menu_header.on("click", function() {
          TS.client.ui.app_profile.openWithApp(TS.menu.app.active_app, TS.menu.app.active_app_bot_id, TS.menu.app.active_app_team_id), TS.menu.$menu_header.off(), TS.clog.track("USER_CARD_CLICK", {
            app_id: TS.menu.app.active_app ? TS.menu.app.active_app.id : "",
            bot_id: TS.menu.app.active_app_bot_id
          }), TS.menu.app.end();
        }), TS.menu.$menu_items.on("click.menu", "li", TS.menu.app.onAppItemClick), TS.menu.$menu_items.on("click.menu", "[data-member-profile-link]", function(e) {
          e.preventDefault(), TS.client.ui.previewMember($(this).data("member-profile-link"));
        }), TS.menu.keepInBounds();
      };
    }();
  },
  2476: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("menu.channel", {
        onStart: function() {},
        channel: null,
        startWithChannel: function(t, n) {
          if (!TS.menu.isRedundantClick(t) && !TS.client.ui.checkForEditing(t)) {
            TS.model.menu_is_showing || (e = void 0), TS.menu.buildIfNeeded(), TS.menu.clean(), TS.menu.channel.channel = TS.channels.getChannelById(n);
            var i = TS.menu.channel.channel,
              r = TS.model.team.prefs.allow_email_ingestion;
            TS.menu.$menu_header.addClass("hidden").empty();
            var a = {
              channel: i,
              user: TS.model.user,
              show_email_item: r,
              show_handy_rxns: TS.model.user.is_admin && TS.boot_data.feature_thanks,
              can_delete_channel: TS.boot_data.feature_archive_deeplink && TS.model.user.is_admin && i.is_channel && !TS.channels.isChannelRequired(i)
            };
            if (TS.channels.isChannelRequired(i) && !TS.permissions.members.canPostInChannel(i) || 0 === i.purpose.last_set && !TS.model.user.is_ultra_restricted && i.is_member && (a.show_purpose_item = !0), TS.notifs.isCorGMuted(i.id) && (a.channel_is_muted = !0), !i.is_member || TS.channels.isChannelRequired(i) && !TS.permissions.members.canPostInChannel(i) || (a.show_advanced_item = !0), TS.boot_data.page_needs_enterprise) {
              var s = TS.permissions.members.canManageOrgSharedChannels();
              TS.shared.isModelObOrgShared(i) || !s || TS.channels.isChannelRequired(i) || (a.show_convert_item = !0), TS.shared.isModelObOrgShared(i) && a.show_advanced_item && (s ? a.show_manage_teams = !i.is_global_shared : a.show_advanced_item = !1), a.is_not_allowed_integrations = !0;
            }
            a.is_moved = i.is_moved, TS.menu.$menu_items.html(TS.templates.menu_channel_items(a)), TS.menu.$menu_header.bind("click.menu", TS.menu.channel.onChannelHeaderClick), TS.menu.$menu_items.on("click.menu", "li", TS.menu.channel.onChannelItemClick), TS.kb_nav.setSubmitItemHandler(TS.menu.channel.onChannelItemClick), TS.menu.start(t), TS.menu.$menu.attr("data-qa", "channel_menu"), TS.menu.$menu.addClass("narrow_menu"), TS.ui.date_picker.getOldestMsgTs(), e || (e = $(t.target).closest("#channel_name").length);
            var o = e ? $("#channel_name") : $("#channel_actions_toggle"),
              l = o.height(),
              d = e ? l + 6 : l,
              c = e ? 18 : 6;
            TS.menu.positionAt(o, c, d);
          }
        },
        onChannelHeaderClick: function(e) {
          e.preventDefault();
        },
        onChannelItemClick: function(e) {
          var t = $(this).attr("id");
          if ($(this).hasClass("disabled")) return void TS.menu.channel.end();
          if ("channel_join_item" === t) e.preventDefault(), TS.model.archive_view_is_showing && TS.client.archives.current_model_ob.id == TS.menu.channel.channel.id ? TS.channels.joinById(TS.menu.channel.channel.id) : TS.channels.displayChannel({
            id: TS.menu.channel.channel.id
          });
          else if ("channel_details_item" === t) e.preventDefault(), TS.model.ui_state.flex_visible && "details" === TS.model.ui_state.flex_name ? $("#details_tab").highlight(null, "channel_page_details_highlighter") : TS.client.ui.flex.openFlexTab("details");
          else if ("channel_handy_rxns_item" === t) TS.ui.handy_rxns.startChannelDialog(TS.menu.channel.channel.id);
          else if ("channel_display_item" === t) e.preventDefault(), TS.channels.displayChannel({
            id: TS.menu.channel.channel.id
          });
          else if ("channel_close_archived_item" === t) e.preventDefault(), TS.channels.closeArchivedChannel(TS.menu.channel.channel.id);
          else if ("channel_leave_item" === t) e.preventDefault(), TS.channels.leave(TS.menu.channel.channel.id);
          else if ("channel_star_item" === t) e.preventDefault(), TS.stars.checkForStarClick(e);
          else if ("channel_email_item" === t);
          else if ("channel_manage_teams_item" === t) e.preventDefault(), TS.ui.channel_manage_teams_dialog.start(TS.menu.channel.channel.id);
          else if ("channel_advanced_item" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.menu.channel.channel.id);
          else if ("channel_convert_item" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.menu.channel.channel.id, "convert_shared");
          else if ("channel_delete_item" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.menu.channel.channel.id, "delete");
          else if ("channel_unarchive_item" === t) e.preventDefault(), TS.api.call("channels.unarchive", {
            channel: TS.menu.channel.channel.id
          }, function(e, t) {
            if (!e) {
              var n;
              n = "restricted_action" === t.error ? TS.i18n.t("<p>You don’t have permission to un-archive channels.</p><p>Talk to your Team Owner.</p>", "channel_menu") : TS.i18n.t("Un-archiving failed with error", "channel_menu") + ' "' + t.error + '"', setTimeout(TS.generic_dialog.alert, 100, n);
            }
          });
          else if ("channel_archives_item" === t);
          else {
            if ("channel_jump_item" === t) return e.preventDefault(), void TS.menu.startWithDatePicker(e);
            if ("channel_mute_item" === t) e.preventDefault(), TS.notifs.muteOrUnmuteCorG(TS.menu.channel.channel.id);
            else if ("channel_files_item" === t) {
              TS.client.ui.flex.openFlexTab("search"), TS.search.setFilter("files"), TS.view.resizeManually("TS.key_triggers");
              var n = "in:" + TS.shared.getActiveModelOb().name + " ";
              TS.search.setInputVal(n);
            } else if ("channel_invite_item" === t) e.preventDefault(), TS.ui.channel_invite_modal.startInviteToChannelModal(TS.menu.channel.channel.id);
            else if ("channel_prefs" === t) e.preventDefault(), TS.ui.channel_prefs_dialog.start(TS.menu.channel.channel.id);
            else if ("channel_add_service_item" !== t) return void TS.warn("not sure what to do with clicked element id:" + t);
          }
          TS.menu.channel.end();
        },
        startWithChannelPickerForChange: function(e, n) {
          if (!TS.menu.isRedundantClick(e)) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var i = TS.members.getMemberById(n),
              r = [],
              a = [];
            $.each(TS.channels.getUnarchivedChannelsForUser(), function(e, t) {
              i.channels.hasOwnProperty(t.id) || r.push(t);
            }), $.each(TS.groups.getUnarchivedGroups(), function(e, t) {
              i.groups.hasOwnProperty(t.id) || a.push(t);
            });
            var s = {
              user_id: n,
              channels: r,
              groups: a
            };
            TS.menu.$menu_header.html(TS.templates.menu_channel_picker_header(s)), TS.menu.$menu_items.html(TS.templates.menu_channel_picker(s)).css("max-height", 274), TS.menu.$menu_items.on("click.menu", "li", TS.menu.channel.onChannelPickerItemClickChangeChannel), TS.menu.start(e);
            var o = $(e.target).closest(".pill");
            "mobile" === TS.boot_data.app ? TS.menu.positionAt(o, 16 - o.offset().left, 0) : TS.menu.positionAt(o, -TS.menu.$menu.width() + o.outerWidth(), o.height() + 4), TS.menu.$menu.scrollintoview({
              duration: 500,
              offset: "bottom",
              px_offset: -25
            }), t(), TS.kb_nav.setAllowHighlightWithoutBlurringInput(!0);
          }
        },
        onChannelPickerItemClickChangeChannel: function() {
          var e = $(this).data("user-id"),
            t = $(this).data("channel-id"),
            n = $(this).data("group-id");
          t ? TS.api.call("users.admin.changeURAChannel", {
            user: e,
            channel: t
          }, TS.web.admin.onMemberURAChanged) : n && TS.api.call("users.admin.changeURAChannel", {
            user: e,
            channel: n
          }, TS.web.admin.onMemberURAChanged), TS.menu.channel.end();
        },
        startWithChannelPickerForInvite: function(e, n) {
          if (!TS.menu.isRedundantClick(e)) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var i = TS.members.getMemberById(n),
              r = [],
              a = [];
            $.each(TS.channels.getUnarchivedChannelsForUser(), function(e, t) {
              i.channels.hasOwnProperty(t.id) || r.push(t);
            }), $.each(TS.groups.getUnarchivedGroups(), function(e, t) {
              i.groups.hasOwnProperty(t.id) || a.push(t);
            });
            var s = {
              user_id: n,
              channels: r,
              groups: a
            };
            TS.menu.$menu_header.html(TS.templates.menu_channel_picker_header(s)), TS.menu.$menu_items.html(TS.templates.menu_channel_picker(s)).css("max-height", 274), TS.menu.$menu_items.on("click.menu", "li", TS.menu.channel.onChannelPickerItemClickInviteChannel), TS.menu.start(e);
            var o = $(e.target).closest(".pill");
            "mobile" === TS.boot_data.app ? TS.menu.positionAt(o, 16 - o.offset().left, 0) : TS.menu.positionAt(o, 10 - o.width(), o.height() + 4), TS.menu.$menu.scrollintoview({
              duration: 500,
              offset: "bottom",
              px_offset: -25
            }), t(), TS.kb_nav.setAllowHighlightWithoutBlurringInput(!0);
          }
        },
        onChannelPickerItemClickInviteChannel: function() {
          var e = $(this).data("user-id"),
            t = $(this).data("channel-id"),
            n = $(this).data("group-id");
          t ? TS.api.call("channels.invite", {
            users: e,
            channel: t
          }, TS.web.admin.onMemberInviteChannel) : n && TS.api.call("groups.invite", {
            users: e,
            channel: n
          }, TS.web.admin.onMemberInviteGroup), TS.menu.channel.end();
        },
        startWithChannelPicker: function(e, n, i) {
          if (!TS.menu.isRedundantClick(e)) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var r = [],
              a = [],
              s = [];
            n.forEach(function(e) {
              e.is_mpim ? s.push(e) : e.is_group || e.is_private ? a.push(e) : e.is_channel && r.push(e);
            });
            var o = {
              user_id: TS.model.user.id,
              channels: r,
              groups: a,
              mpims: s
            };
            TS.menu.$menu_header.html(TS.templates.menu_channel_picker_header(o)), TS.menu.$menu_items.html(TS.templates.menu_channel_picker(o)).css("max-height", 274), TS.menu.$menu_items.on("click.menu", "li", i), TS.menu.start(e), t(), TS.kb_nav.setAllowHighlightWithoutBlurringInput(!0);
          }
        },
        end: function() {
          TS.menu.channel.channel = null, TS.menu.end();
        }
      });
      var e, t = function() {
        var e = TS.menu.$menu.find(".no_results"),
          t = TS.menu.$menu.find(".icon_close"),
          n = TS.menu.$menu.find(".menu_filter"),
          i = "";
        t.click(function() {
          n.val("").trigger("change"), n.focus();
        }), TS.menu.$menu_items.children("li").each(function() {
          var e = $(this).data("channel-id");
          if (e) {
            var t = TS.channels.getChannelById(e);
            return void(t.is_private ? $(this).data("name", t.name) : t && $(this).data("name", "#" + t.name));
          }
          var n = $(this).data("group-id");
          if (n) {
            var i = TS.groups.getGroupById(n);
            i && $(this).data("name", i.name);
          }
          var r = $(this).data("mpim-id");
          if (r) {
            var a = TS.mpims.getMpimById(r);
            a && $(this).data("mpim", a);
          }
        }), n.on("keyup change paste", TS.utility.debounce(function() {
          var n = $(this).val();
          if (n) {
            if (i !== n) {
              for (var r = !1, a = new RegExp(TS.utility.regexpEscape(n), "i"), s = [], o = n.split(/[,| ]/).filter(function(e) {
                  return !!e;
                }), l = 0; l < o.length; l += 1) s.push(new RegExp("^" + TS.utility.regexpEscape(o[l]), "i"));
              t.removeClass("hidden"), TS.menu.$menu_items.children("li").removeClass("hidden").each(function() {
                var e = $(this).data("name"),
                  t = $(this).data("mpim");
                if (e) {
                  if (e.match(a)) return void(r = !0);
                } else if (t && TS.mpims.checkMpimMatch(t, s)) return void(r = !0);
                $(this).addClass("hidden");
              }), r ? e.addClass("hidden") : (e.removeClass("hidden"), e.find(".query").text(n)), TS.kb_nav.clearHighlightedItem();
            }
          } else TS.menu.$menu_items.children("li.hidden").removeClass("hidden"), e.addClass("hidden"), t.addClass("hidden"), i !== n && TS.kb_nav.clearHighlightedItem();
          i = n, TS.ui.utility.updateClosestMonkeyScroller(TS.menu.$menu.find("#menu_items_scroller"), !0);
        }, 250)), n.focus();
      };
    }();
  },
  2477: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("menu.enterprise_team_signin", {
        start: function(n, i, r) {
          if (!TS.menu.isRedundantClick(n) && !TS.model.menu_is_showing) {
            r = _.merge({}, r), e = r.team_id, t = r.list, TS.menu.buildIfNeeded(), TS.menu.enterprise_team_signin.clean(), TS.menu.$menu.addClass("enterprise_team_signin_menu"), TS.menu.$menu_header.addClass("hidden").empty();
            var a = TS.templates.enterprise_team_signin_menu_items({
              should_show_leave_team: r.should_show_leave_team,
              team_site_url: r.team_site_url || ""
            });
            TS.menu.$menu_items.html(a), TS.menu.$menu_items.on("click.menu", "li", TS.menu.enterprise_team_signin.onMenuItemClick), TS.kb_nav.setSubmitItemHandler(TS.menu.enterprise_team_signin.onMenuItemClick), TS.menu.start(n, !1), TS.menu.$menu.attr("data-qa", "enterprise_team_signin_menu"), TS.menu.positionAt(i, i.width() - TS.menu.$menu.width(), i.outerHeight() + 10);
          }
        },
        onMenuItemClick: function(e) {
          var t = $(this).closest("[data-which]");
          t.length || (t = $(e.target).closest("[data-which]"));
          var i = t.data("which");
          "visit_team_site" === i || ("leave_team" === i ? (e.preventDefault(), n()) : (e.preventDefault(), TS.warn("not sure what to do with clicked element:" + i))), TS.menu.enterprise_team_signin.end();
        },
        clean: function() {
          TS.menu.clean();
        },
        end: function() {
          TS.menu.end();
        }
      });
      var e, t, n = function() {
        TS.ui.leave_team_dialog.start(e, t);
        var n, i;
        "teams_on" === t ? (n = "your_workspaces", i = "your_workspaces_list") : (n = "find_workspaces", i = "workspaces_you_can_join_list"), TS.enterprise.workspaces.recordTeamLeave(e, n, i);
      };
    }();
  },
  2478: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("menu.file", {
        onStart: function() {},
        reported_no_file_reader: !1,
        startWithNewFileOptions: function(e, t) {
          if (!TS.menu.isRedundantClick(e) && !TS.client.ui.checkForEditing(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.file.clean(), TS.menu.$menu.addClass("file_menu"), TS.menu.$menu_header.addClass("hidden").empty();
            var n, i, r = window.File && "disable_all" !== TS.model.team.prefs.disable_file_uploads;
            r ? (n = "disable_all_except_images" === TS.model.team.prefs.disable_file_uploads ? TS.i18n.t("an image", "menu_file")() : TS.i18n.t("a file", "menu_file")(), i = "Upload " + n) : (TS.menu.file.reported_no_file_reader || (TS.menu.file.reported_no_file_reader = !0, TS.info("TS.menu: No File support?  navigator.userAgent: " + navigator.userAgent)), n = "", i = "");
            var a = TS.boot_data.feature_email_ingestion && TS.model.team.prefs.allow_email_ingestion,
              s = TS.boot_data.feature_thanks,
              o = TS.utility.box.isBrowserSupported() && TS.model.prefs.box_enabled,
              l = TS.boot_data.feature_arugula,
              d = window.Dropbox && Dropbox.isBrowserSupported() && TS.model.prefs.dropbox_enabled,
              c = TS.model.team.prefs.gdrive_enabled_team,
              _ = TS.features.isEnabled("onedrive_picker") && TS.model.team.prefs.onedrive_enabled_team,
              u = 0;
            o && (u += 1), d && (u += 1), c && (u += 1), _ && (u += 1);
            var m = u > 1,
              p = TS.templates.menu_file_new_file_items({
                should_show_upload_file: r,
                should_show_email: a,
                should_show_thanks: s,
                should_show_box: o,
                should_show_dropbox: d,
                should_show_gdrive: c,
                should_show_onedrive: _,
                should_show_arugula: l,
                file_type: n,
                upload_file_text: i,
                use_cloud_submenu: m
              });
            if (TS.menu.$menu_items.html(p), c && (TS.menu.addSubmenu("#gdrive_create_submenu", TS.templates.menu_file_gdrive_doc_type_items(), TS.menu.file.onGDriveDocumentTypeItemClick), TS.menu.has_submenu = !0), _ && (TS.menu.addSubmenu("#onedrive_create_submenu", TS.templates.menu_file_onedrive_doc_type_items(), TS.menu.file.onOneDriveDocumentTypeItemClick), TS.menu.has_submenu = !0), m) {
              var f = TS.templates.menu_file_cloud_service_items({
                should_show_box: o,
                should_show_dropbox: d,
                should_show_gdrive: c,
                should_show_onedrive: _
              });
              TS.menu.addSubmenu("#cloud_submenu", f, TS.menu.file.onNewFileOptionsItemClick), TS.menu.has_submenu = !0;
            }
            TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onNewFileOptionsItemClick), TS.kb_nav.setSubmitItemHandler(TS.menu.file.onNewFileOptionsItemClick);
            var h, g = t && "primary_file_button" === t.attr("id");
            TS.client && g && (h = function() {
              TS.utility.contenteditable.supportsTexty() ? TS.utility.contenteditable.focus(TS.client.msg_input.$input) : TS.client.ui.$msg_input.focus();
            }, TS.clog.track("PFP_ACTION", {
              contexts: {
                growth: {
                  action: "click",
                  trigger: "plus_menu_button"
                }
              }
            })), TS.menu.start(e, !1, {
              on_esc: h
            }), TS.menu.$menu.attr("data-qa", "file_menu"), g ? TS.menu.positionAt(t, 1, -(TS.menu.$menu.height() + 6)) : TS.menu.positionAt(t, t.width() - TS.menu.$menu.width(), t.outerHeight() + 10);
          }
        },
        onGDriveDocumentTypeItemClick: function(n) {
          var i = $(n.target),
            r = i.data("doc-type");
          if (r) {
            var a = TS.templates.loading_indicator();
            t.remove(), e.append(a), TS.files.gdrive.createAndShare(r), TS.menu.file.end(), e.toggleClass("active", !0), TS.clog.track("PFP_ACTION", {
              contexts: {
                growth: {
                  action: "click",
                  trigger: "plus_menu_subitem_gdrive_" + r.toLowerCase()
                }
              }
            });
          }
        },
        onOneDriveDocumentTypeItemClick: function(e) {
          TS.log(9999, "boop"), TS.log(9999, e);
        },
        onGDriveCreateComplete: function(n, i) {
          n && i && $("#allow_popups_banner").is(":visible") && TS.client.ui.addEphemeralBotMsg({
            text: TS.i18n.t("It looks like your browser is blocking popups so here’s a link to your <{url}|document>", "menu_file")({
              url: i.data.url
            }),
            ephemeral_type: "created_google_drive_document"
          }), e.find(".ts_icon").remove(), e.toggleClass("active", !1).append(t);
        },
        onNewFileOptionsItemClick: function(e) {
          var t = $(this).closest("[data-which]");
          t.length || (t = $(e.target).closest("[data-which]"));
          var n, i = t.data("which");
          "choose" === i ? (e.preventDefault(), TS.client.ui.files.$upload.trigger("click"), TS.clog.track("PFP_ACTION", {
            contexts: {
              growth: {
                action: "click",
                trigger: "plus_menu_item_upload"
              }
            }
          })) : "email" === i || ("reaction_poll" === i ? (e.preventDefault(), TS.boot_data.feature_thanks && TS.ui.handy_rxns.startPollDialog(TS.model.active_cid)) : "snippet" === i ? (e.preventDefault(), TS.client.msg_input.startSnippet(), TS.clog.track("PFP_ACTION", {
            contexts: {
              growth: {
                action: "click",
                trigger: "plus_menu_item_snippet"
              }
            }
          })) : "post" === i ? TS.clog.track("PFP_ACTION", {
            contexts: {
              growth: {
                action: "click",
                trigger: "plus_menu_item_post"
              }
            }
          }) : "box" === i ? (e.preventDefault(), TS.files.openBoxChooser(), TS.clog.track("PFP_ACTION", {
            contexts: {
              growth: {
                action: "click",
                trigger: "plus_menu_subitem_cloud_box"
              }
            }
          })) : "dropbox" === i ? (e.preventDefault(), TS.files.openDropboxChooser(), TS.clog.track("PFP_ACTION", {
            contexts: {
              growth: {
                action: "click",
                trigger: "plus_menu_subitem_cloud_dropbox"
              }
            }
          })) : "gdrive_import" === i ? (e.preventDefault(), TS.files.gdrive.openPickerWindow(), TS.clog.track("PFP_ACTION", {
            contexts: {
              growth: {
                action: "click",
                trigger: "plus_menu_subitem_cloud_gdrive"
              }
            }
          })) : "gdrive_create_submenu" === i ? e.preventDefault() : "onedrive_import" === i ? (e.preventDefault(), TS.files.onedrive.openPickerWindow(), TS.clog.track("PFP_ACTION", {
            contexts: {
              growth: {
                action: "click",
                trigger: "plus_menu_subitem_cloud_onedrive"
              }
            }
          })) : "cloud_submenu" === i ? e.preventDefault() : "space" === i ? (e.preventDefault(), n = TS.utility.cmdKey(e), TS.files.createAndOpenNewSpace(null, n), TS.clog.track("PFP_ACTION", {
            contexts: {
              growth: {
                action: "click",
                trigger: "plus_menu_item_space"
              }
            }
          })) : "arugula" === i ? (e.preventDefault(), n = TS.utility.cmdKey(e), TS.files.createAndOpenNewArugula(null, n), TS.clog.track("PFP_ACTION", {
            contexts: {
              growth: {
                action: "click",
                trigger: "plus_menu_item_arugula"
              }
            }
          })) : (e.preventDefault(), TS.warn("not sure what to do with clicked element:" + i))), TS.menu.file.end();
        },
        startWithFileFilter: function(e, t) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.file.clean();
            var n = "all";
            TS.model.file_list_types && (n = TS.model.file_list_types[0]);
            var i = TS.boot_data.feature_email_ingestion && TS.model.team.prefs.allow_email_ingestion || TS.model.team.plan;
            TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(TS.templates.menu_file_filter_items({
              active_type: n,
              show_email_item: i
            })), t ? TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onSearchFileFilterItemClick) : TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onFileFilterItemClick), TS.menu.start(e), t ? TS.menu.positionAt($("#search_results_container"), 8, 74) : TS.menu.positionAt($("#file_list_container"), 8, 44);
          }
        },
        onFileFilterItemClick: function(e) {
          e.preventDefault(), TS.client.ui.files.filterFileList($(this).data("filetype")), TS.view.files.setButtonState($(this).data("filetype")), TS.menu.file.end();
        },
        onSearchFileFilterItemClick: function(e) {
          e.preventDefault(), TS.search.setFiletypeFilter($(this).data("filetype")), TS.view.files.setButtonState($(this).data("filetype")), TS.menu.file.end();
        },
        startWithFileMemberPromiseFilter: function(e) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.file.clean(), TS.menu.$menu.append(TS.templates.menu_file_member_filter()), TS.menu.$menu.addClass("member_file_filter_menu"), TS.menu.start(e), TS.menu.positionAt($("#file_list_toggle_user"), 0, 35);
            var t = new TS.SearchableMemberList({
              $container: $(".member_file_filter_menu .searchable_member_list"),
              id: "member_file_filter_menu",
              show_filter_bar: !1,
              compact_results: !0,
              prevent_member_click_handler: !0,
              suppress_presence: !0
            });
            t.showInitial(), t.member_clicked_sig.add(function(e, t) {
              TS.client.ui.files.toggleFileList(t.id), TS.menu.file.end();
            });
          }
        },
        startWithFileMemberFilter: function(e, t) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.file.clean(), TS.menu.$menu_header.html(TS.templates.menu_file_member_header());
            var i = n(TS.members.getMembersForUser());
            if (TS.menu.$menu_items.html(TS.templates.menu_file_member_filter_items({
                members: i
              })), t ? TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onSearchFileMemberFilterItemClick) : TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onFileMemberFilterItemClick), TS.menu.start(e), t) TS.menu.positionAt($("#search_results_container"), 102, 100);
            else {
              var r = $("#file_list_toggle_user");
              TS.menu.positionAt($("#file_list_toggle_user"), 0, r.outerHeight());
            }
            TS.members.view.bindTeamFilter("#file_member_filter", "#menu_items_scroller"), $("#file_member_filter").find(".member_filter").focus().keydown(function(e) {
              if (e.which == TS.utility.keymap.enter) {
                var t = $("#menu_items .member_item.active");
                1 == t.length && t.find("a").click();
              }
            }), TS.members.view.team_filter_changed_sig.add(TS.kb_nav.clearHighlightedItem, TS.kb_nav), TS.kb_nav.setAllowHighlightWithoutBlurringInput(!0);
          }
        },
        onFileMemberFilterItemClick: function(e) {
          e.preventDefault();
          var t = $(e.currentTarget).data("member-id");
          TS.client.ui.files.toggleFileList(t), TS.menu.file.end();
        },
        onSearchFileMemberFilterItemClick: function(e) {
          e.preventDefault();
          var t = $(e.currentTarget).data("member-id");
          TS.search.setMember(t), TS.menu.file.end();
        },
        file_list_menu_up: !1,
        startWithFileActions: function(e, t) {
          if (TS.client && !TS.model.ms_connected) return void TS.sounds.play("beep");
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.file.clean();
            var n = TS.files.getFileById(t);
            if (n) {
              var i = TS.files.getFileActions(n),
                r = $(e.target),
                a = r.closest(".file_actions");
              i.comment && a.data("exclude-comment") && (i.comment = !1), i.download && a.data("exclude-download") && (i.download = !1), i.open_original && a.data("exclude-original") && (i.open_original = !1), i.rxn_file && a.data("exclude-rxn") && (i.rxn_file = !1), i.pin_file && (a.data("exclude-pin") || a.data("exclude-pin-file")) && (i.pin_file = !1), i.unpin_file && (a.data("exclude-pin") || a.data("exclude-unpin-file")) && (i.unpin_file = !1), i.edit && a.data("exclude-edit") && (i.edit = !1), i.edit_title && a.data("exclude-edit-title") && (i.edit_title = !1), i.print && a.data("exclude-print") && (i.print = !1), i.create_public_link && a.data("exclude-create-public-link") && (i.create_public_link = !1), i.revoke_public_link && a.data("exclude-revoke-public-link") && (i.revoke_public_link = !1), a.data("include-open-flexpane") && (i.open_in_flexpane = !0), a.data("include-open-file-page") && (i.open_file_page = !0), a.data("include-view-public-link") && (i.view_public_link = !0);
              r.closest(".file_list_item").length > 0 && ("details" !== TS.model.ui_state.flex_name && (i.share = !1), TS.menu.file.file_list_menu_up = !0);
              var s = r.closest(".inline_file_preview_container, .file_container");
              s.length > 0 && (s.addClass("file_menu_open"), i.new_window = !1), TS.menu.$menu_header.addClass("hidden").empty();
              var o = !1;
              (i.edit || TS.client && i.edit_title || i.create_public_link || i.revoke_public_link || i.print || i.save_to_dropbox || i.refresh) && (o = !0);
              var l = {
                file: n,
                actions: i,
                is_refreshing: TS.files.waiting_for_refresh[n.id],
                model_ob: TS.shared.getActiveModelOb(),
                show_workflow_divider: o
              };
              TS.model.unread_view_is_showing && (l.source_model_ob_id = r.closest(".unread_group").data("modelId")), TS.client && (l.info_pane_visible = "details" === TS.model.ui_state.flex_name), TS.menu.$menu_items.html(TS.templates.menu_file_action_items(l)), TS.boot_data.feature_fix_files && TS.menu.$menu.addClass("no_icons"), TS.web ? TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onFileActionClickWeb) : TS.client && TS.menu.$menu_items.on("click.menu", "li", TS.menu.file.onFileActionClickClient), TS.menu.start(e), r.closest(".file_list_item").addClass("active"), TS.menu.positionAt(r, -(TS.menu.$menu.width() + 6), 0), TS.menu.keepInBounds();
            }
          }
        },
        onFileActionClickClient: function(e) {
          var t = $(this).attr("id"),
            n = $(this).data("rxn-key"),
            i = TS.files.getFileById($(this).data("file-id")),
            r = TS.shared.getActiveModelOb(),
            a = $(this).data("sourceModelId");
          if (!i) return void TS.error("no file id:" + $(this).data("file-id"));
          if ("share_file" === t) e.preventDefault(), TS.view.files.shareInCurrentChannelOrIM(i.id, a);
          else if ("edit_file_snippet" === t) i.is_truncated || (e.preventDefault(), TS.ui.snippet_dialog.startEdit(i.id));
          else if ("edit_file_post" === t);
          else if ("edit_file_space" === t || "open_new_window" === t) TS.client.windows.openFileWindow(i.id) && e.preventDefault();
          else if ("edit_file_arugula" === t);
          else if ("edit_file_title" === t) e.preventDefault(), TS.client.ui.files.previewFile(i.id, "file_list"), TS.files.editFileTitle(i.id);
          else if ("delete_file" === t) e.preventDefault(), TS.view.files.delete(i.id);
          else if ("create_public_link" === t) {
            if (e.preventDefault(), TS.model.team.prefs.disallow_public_file_urls) {
              var s;
              return s = TS.boot_data.feature_external_files ? TS.i18n.t("An administator has disabled external file URL creation. You will not be able to create an external URL for this file.", "menu_file")() : TS.i18n.t("An administator has disabled public file URL creation. You will not be able to create a public URL for this file.", "menu_file")(), void TS.generic_dialog.alert(s);
            }
            TS.files.createPublicURL(i, function(e) {
              e && (TS.model.previewed_file_id && $("#file_preview_scroller").find(".file_actions_link").scrollintoview({
                duration: 500,
                offset: "top",
                px_offset: -50
              }), $(".file_public_link_" + i.id).highlightText(), TS.ui.file_share.fileShowPublicUrlDialog(i));
            });
          } else if ("revoke_public_link" === t) e.preventDefault(), TS.ui.file_share.fileRevokePublicLink(i.id);
          else if ("view_public_link" === t) e.preventDefault(), TS.ui.file_share.fileShowPublicUrlDialog(i);
          else {
            if ("refresh_file" === t) return e.preventDefault(), TS.files.refreshFile(i.id), void TS.menu.$menu.find("#refresh_file .item_label").text(TS.i18n.t("Refreshing...", "menu_file")()).end();
            if ("download_file" === t) {
              var o = !(TS.ui.fs_modal_file_viewer && TS.ui.fs_modal_file_viewer.is_showing);
              TS.client && TS.client.downloads.startDownload(i, o) && e.preventDefault();
            } else if ("open_original_file" === t);
            else if ("comment_file" === t) e.preventDefault(), TS.model.previewed_file_id != i.id ? TS.client.ui.files.previewFile(i.id, "file_list", !1, !0) : TS.utility.contenteditable.focus($("#file_comment"));
            else {
              if ("save_to_dropbox" === t) return TS.api.callImmediately("files.getTempURL", {
                file: i.id
              }, function(e, t) {
                e && Dropbox.save(t.url, i.name);
              });
              if ("rxn_file" === t) e.preventDefault(), TS.ui.react_emoji_menu.start({
                e: e,
                rxn_key: n
              });
              else if ("share_private_file" === t) e.preventDefault(), TS.files.shareOrReshareFile(i.id);
              else if ("pin_file" === t && r) e.preventDefault(), TS.pins.startPinFile(i.id, r);
              else if ("unpin_file" === t && r) e.preventDefault(), TS.pins.unPinFile(i.id, r);
              else if ("open_in_flexpane" === t) e.preventDefault(), TS.client.ui.files.previewFile(i.id);
              else if ("copy_file_link" === t) {
                e.preventDefault(), TS.clipboard.writeText(i.permalink);
                var l = TS.members.getMemberById(i.user),
                  d = {};
                if (l && l.is_bot) {
                  var c = l.profile.bot_id,
                    _ = TS.bots.getBotById(c);
                  d.app_id = _ ? _.app_id : "", d.bot_id = c;
                }
                TS.clog.track("MSG_LINK_COPY", d);
              } else {
                if ("star_file" !== t) return e.preventDefault(), void TS.warn("not sure what to do with clicked element id:" + t);
                e.preventDefault(), TS.stars.checkForStarClick(e);
              }
            }
          }
          TS.menu.file.end();
        },
        onFileActionClickWeb: function(e) {
          var t = $(this).attr("id"),
            n = $(this).data("rxn-key"),
            i = TS.files.getFileById($(this).data("file-id")),
            r = TS.shared.getActiveModelOb();
          if (!i) return void TS.error("no file id:" + $(this).data("file-id"));
          if ("share_file" === t) e.preventDefault(), TS.ui.share_dialog.start(i.id);
          else if ("share_private_file" === t) e.preventDefault(), TS.files.shareOrReshareFile(i.id);
          else if ("edit_file_snippet" === t);
          else if ("edit_file_post" === t);
          else if ("edit_file_space" === t || "open_new_window" === t);
          else if ("edit_file_title" === t);
          else if ("delete_file" === t) e.preventDefault(), TS.web.file.deleteFile(i.id);
          else if ("create_public_link" === t) e.preventDefault(), TS.model.team.prefs.disallow_public_file_urls || TS.api.callImmediately("files.sharedPublicURL", {
            file: i.id
          }, function(e, t) {
            if (e) {
              var n = $(".file_public_link_shared");
              n.slideToggle(100), TS.files.upsertAndSignal({
                id: i.id,
                public_url_shared: !0
              }), 0 === n.length && TS.ui.file_share.fileShowPublicUrlDialog(i);
            } else if (t.error && "not_allowed" === t.error) {
              TS.model.team.prefs.disallow_public_file_urls = !0;
              var r;
              r = TS.boot_data.feature_external_files ? TS.i18n.t("An administator has disabled external file URL creation. You will not be able to create an external URL for this file.", "menu_file")() : TS.i18n.t("An administator has disabled public file URL creation. You will not be able to create a public URL for this file.", "menu_file")(), TS.generic_dialog.alert(r);
            }
          });
          else if ("revoke_public_link" === t) e.preventDefault(), TS.web.file ? TS.web.file.revokePublicURL(i) : TS.ui.file_share.fileRevokePublicLink(i.id);
          else if ("view_public_link" === t) e.preventDefault(), TS.ui.file_share.fileShowPublicUrlDialog(i);
          else {
            if ("refresh_file" === t) return e.preventDefault(), TS.files.refreshFile(i.id), void TS.menu.$menu.find("#refresh_file .item_label").text("Refreshing...").end();
            if ("download_file" === t);
            else if ("print_file" === t) window.print(), e.preventDefault();
            else if ("open_original_file" === t);
            else if ("comment_file" === t) e.preventDefault(), TS.utility.contenteditable.focus($("#file_comment"));
            else {
              if ("save_to_dropbox" === t) return TS.api.callImmediately("files.getTempURL", {
                file: i.id
              }, function(e, t) {
                e && Dropbox.save(t.url, i.name);
              });
              if ("rxn_file" === t) e.preventDefault(), TS.ui.react_emoji_menu.start({
                e: e,
                rxn_key: n
              });
              else if ("pin_file" === t && r) e.preventDefault(), TS.pins.startPinFile(i.id, r);
              else if ("unpin_file" === t && r) e.preventDefault(), TS.pins.unPinFile(i.id, r);
              else if ("copy_file_link" === t) e.preventDefault(), TS.clipboard.writeText(i.permalink);
              else if ("open_file_page" !== t) return e.preventDefault(), void TS.warn("not sure what to do with clicked element id:" + t);
            }
          }
          TS.menu.file.end();
        },
        clean: function() {
          TS.menu.clean();
        },
        end: function() {
          TS.menu.end();
        }
      });
      var e = $('[data-js="primary_file_button"]'),
        t = e.find(".ts_icon_plus_thick"),
        n = function(e) {
          for (var t = [], n = [], i = 0; i < e.length; i += 1) {
            var r = e[i];
            r.is_bot || r.is_slackbot ? n.push(r) : t.push(r);
          }
          return t.concat(n);
        };
    }();
  },
  2479: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("menu.group", {
        onStart: function() {},
        group: null,
        startWithGroup: function(t, n) {
          if (!TS.menu.isRedundantClick(t) && !TS.client.ui.checkForEditing(t)) {
            TS.model.menu_is_showing || (e = void 0), TS.menu.buildIfNeeded(), TS.menu.clean(), TS.menu.group.group = TS.groups.getGroupById(n);
            var i = TS.menu.group.group,
              r = TS.model.team.prefs.allow_email_ingestion;
            TS.menu.$menu_header.addClass("hidden").empty();
            var a = {
              group: i,
              user: TS.model.user,
              show_email_item: r,
              leave_action: TS.groups.getLeaveAction(n),
              show_handy_rxns: TS.model.user.is_admin && TS.boot_data.feature_thanks,
              show_export_history: TS.permissions.members.canExportMessageHistory(i)
            };
            if (0 !== i.purpose.last_set || TS.model.user.is_ultra_restricted || (a.show_purpose_item = !0), TS.notifs.isCorGMuted(i.id) && (a.group_is_muted = !0), a.show_advanced_item = !0, TS.boot_data.page_needs_enterprise) {
              var s = TS.permissions.members.canManageOrgSharedChannels();
              !i.is_shared && s && (a.show_convert_item = !0), i.is_shared && (i.creator !== TS.model.user.id && (a.show_advanced_item = !1), s && (a.show_advanced_item = !0, a.show_manage_teams = !i.is_global_shared), a.is_not_allowed_integrations = !0);
            }
            TS.boot_data.feature_dm_retention && "" !== TS.model.team.plan && TS.model.team.prefs.allow_retention_override && (a.show_message_retention = !0), TS.menu.$menu_items.html(TS.templates.menu_group_items(a)), TS.menu.$menu_header.bind("click.menu", TS.menu.group.onGroupHeaderClick), TS.menu.$menu_items.on("click.menu", "li", TS.menu.group.onGroupItemClick), TS.menu.start(t), TS.menu.$menu.attr("data-qa", "group_menu"), TS.menu.$menu.addClass("narrow_menu"), TS.ui.date_picker.getOldestMsgTs(), $("#menu_group_topic_input").bind("keydown", TS.menu.handleTopicKeydown), e || (e = $(t.target).closest("#channel_name").length);
            var o = e ? $("#channel_name") : $("#channel_actions_toggle"),
              l = o.height(),
              d = e ? l + 6 : l,
              c = e ? 18 : 6;
            TS.menu.positionAt(o, c, d);
          }
        },
        onGroupHeaderClick: function(e) {
          e.preventDefault();
        },
        onGroupItemClick: function(e) {
          var t = $(this).attr("id");
          if ($(this).hasClass("disabled")) return void TS.menu.end();
          if ("group_display_item" === t) e.preventDefault(), TS.groups.displayGroup({
            id: TS.menu.group.group.id
          });
          else if ("group_details_item" === t) e.preventDefault(), TS.model.ui_state.flex_visible && "details" === TS.model.ui_state.flex_name ? $("#details_tab").highlight(null, "channel_page_details_highlighter") : TS.client.ui.flex.openFlexTab("details");
          else if ("group_handy_rxns_item" === t) TS.ui.handy_rxns.startChannelDialog(TS.menu.group.group.id);
          else if ("group_star_item" === t) e.preventDefault(), TS.stars.checkForStarClick(e);
          else if ("group_mute_item" === t) e.preventDefault(), TS.notifs.muteOrUnmuteCorG(TS.menu.group.group.id);
          else if ("group_email_item" === t);
          else if ("group_files_item" === t) {
            TS.client.ui.flex.openFlexTab("search"), TS.search.setFilter("files"), TS.view.resizeManually("TS.key_triggers");
            var n = "in:" + TS.shared.getActiveModelOb().name + " ";
            TS.search.setInputVal(n);
          } else if ("group_leave_item" === t) e.preventDefault(), TS.groups.leave(TS.menu.group.group.id);
          else if ("group_unarchive_item" === t) e.preventDefault(), TS.api.call("groups.unarchive", {
            channel: TS.menu.group.group.id
          });
          else if ("group_archives_item" === t);
          else {
            if ("group_jump_item" === t) return e.preventDefault(), void TS.menu.startWithDatePicker(e);
            if ("channel_manage_teams_item" === t) e.preventDefault(), TS.ui.channel_manage_teams_dialog.start(TS.menu.group.group.id);
            else if ("group_advanced_item" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.menu.group.group.id);
            else if ("group_convert_item" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.menu.group.group.id, "convert_shared");
            else if ("group_invite_item" === t) e.preventDefault(), TS.ui.channel_invite_modal.startInviteToChannelModal(TS.menu.group.group.id);
            else if ("group_prefs" === t) e.preventDefault(), TS.ui.channel_prefs_dialog.start(TS.menu.group.group.id);
            else if ("group_message_retention" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.menu.group.group.id, "retention");
            else if ("group_export_history" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.menu.group.group.id, "export");
            else if ("group_add_service_item" !== t) return void TS.warn("not sure what to do with clicked element id:" + t);
          }
          TS.menu.end();
        }
      });
      var e;
    }();
  },
  2480: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("menu.member", {
        member: null,
        member_item_click_sig: new signals.Signal,
        onStart: function() {
          e = new TS.PresenceList;
        },
        startWithMember: function(a, s, o, l, d) {
          if (!TS.menu.isRedundantClick(a) && !TS.client.ui.checkForEditing(a)) {
            TS.model.menu_is_showing || (t = void 0), TS.menu.buildIfNeeded(), TS.menu.member.member = TS.members.getMemberById(s);
            var c = TS.menu.member.member;
            if (c && TS.permissions.members.canUserSeeMember(c)) {
              if (c.is_bot && _.get(c.profile, "bot_id")) return TS.menu.app.startWithApp(a, _.get(c.profile, "bot_id"));
              TS.menu.clean(), e.add(s), TS.menu.menu_closed_sig.addOnce(function() {
                e.clear();
              });
              var u = n(c, {
                is_header_menu: l,
                is_im_menu: d
              });
              if (u.channel_kick_name && u.channel_kick_hidden) {
                var m = TS.shared.getActiveModelOb();
                TS.membership.ensureChannelMembershipIsKnownForUsers(m.id, [c.id]).then(function() {
                  TS.model.menu_is_showing && TS.menu.last_e === a && TS.membership.getUserChannelMembershipStatus(c.id, m).is_member && TS.menu.$menu_items.find("#member_kick_channel_item").removeClass("hidden");
                });
              }
              if (d ? TS.menu.$menu_header.addClass("hidden").empty() : (TS.menu.$menu_header.html(TS.templates.menu_member_header(u)), TS.client.flex_pane.startLocalTimeInterval()), c.is_stranger || TS.menu.$menu_items.html(TS.templates.menu_member_items(u)), d || c.deleted || TS.clog.track("USER_CARD_DISPLAY", {}), s == TS.model.user.id) {
                var p = "";
                d || (p += TS.templates.menu_member_footer({
                  member: c
                })), TS.menu.$menu_footer.html(p);
              } else d || TS.menu.$menu_footer.html(TS.templates.menu_member_footer({
                member: c
              }));
              TS.menu.start(a, o);
              var f = !1,
                h = $("#menu_member_dm_input");
              if (TS.boot_data.feature_texty_takes_over) {
                var g = TS.members.getPrefCompliantMemberName(c);
                TS.utility.contenteditable.create(h, {
                  modules: {
                    tabcomplete: {
                      searchOptions: {
                        complete_member_specials: !1
                      },
                      completers: [TS.tabcomplete.channels, TS.tabcomplete.emoji, TS.tabcomplete.members],
                      positionMenu: function(e) {
                        e.style.width = h.outerWidth() + "px", e.style.minWidth = "0", TS.tabcomplete.positionUIRelativeToInput(e, h);
                      }
                    }
                  },
                  singleLineInput: !0,
                  onEnter: function(e) {
                    var t = _.trim(TS.utility.contenteditable.value(h));
                    return _.keys(e).length || f || !t.length || (TS.ims.startImByMemberId(c.id, !1, t), TS.menu.member.end(), f = !0, TS.clog.track("USER_CARD_DM", {})), !1;
                  },
                  onEscape: function() {
                    TS.menu.end();
                  },
                  placeholder: TS.i18n.t("Message {name}", "menu")({
                    name: _.escape(g)
                  })
                }), TS.utility.contenteditable.enable(h);
              } else {
                var S = TS.utility.keymap;
                $("#menu_member_dm_input").bind("keydown", function(e) {
                  e.which != S.enter || e.shiftKey || f || "" !== $.trim(h.val()) && (e.preventDefault(), TS.ims.startImByMemberId(c.id, !1, h.val()), TS.menu.member.end(), f = !0, TS.clog.track("USER_CARD_DM", {}));
                });
              }
              if (c.is_self && TS.menu.$menu_header.find(".member_timezone_value a").on("click.timezone", function(e) {
                  e.preventDefault(), TS.menu.member.end();
                }), TS.menu.$menu_header.bind("click.menu", i), TS.menu.$menu_items.on("click.menu", "li", r), TS.kb_nav.setSubmitItemHandler(r), d) {
                t || (t = $(a.target).closest("#channel_name").length);
                var T = t ? $("#channel_name") : $("#channel_actions_toggle"),
                  b = T.height(),
                  v = t ? b + 6 : b,
                  y = t ? 18 : 6;
                TS.menu.positionAt(T, y, v), TS.menu.$menu.attr("data-qa", "member_menu"), TS.menu.$menu.addClass("narrow_menu"), TS.ui.date_picker.getOldestMsgTs();
              }
              d || TS.menu.keepInBounds();
            }
          }
        },
        startWithMemberPreview: function(e, t, n, i) {
          if (!TS.menu.isRedundantClick(e) && !(TS.client && TS.client.ui.checkForEditing(e) || TS.model.menu_is_showing)) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var a = $(e.target).closest(".member_preview_menu_target");
            t || (t = a.closest("[data-member-id]").data("member-id")), TS.menu.member.member = TS.members.getMemberById(t);
            var s = TS.menu.member.member,
              o = TS.ims.getImByMemberId(t),
              l = {
                member: s,
                is_team_directory: !0,
                im_id: o && o.id,
                hide_view_profile: i
              };
            if (TS.menu.$menu_header.addClass("hidden").empty(), !s.deleted && !s.is_slackbot && t != TS.model.user.id && (TS.model.user.is_ultra_restricted || s.is_ultra_restricted || (l.show_channel_invite = !0), TS.boot_data.page_needs_enterprise)) {
              var d = TS.model.team;
              d && d.id !== s.team_id && (l.show_call_action = !1);
            }
            n ? TS.menu.$menu_items.html(TS.templates.menu_member_items_short(l)) : (TS.menu.$menu_items.html(TS.templates.menu_member_items(l)), TS.menu.$menu_items.on("click.menu", "li", {
              is_member_preview: i
            }, r)), TS.menu.start(e), TS.kb_nav.setSubmitItemHandler(r);
            var c = a.outerWidth() - TS.menu.$menu.width() - 1;
            TS.menu.positionAt(a, c, a.outerHeight() + 5), TS.menu.keepInBounds();
          }
        },
        startWithEditMemberProfilePhotoActions: function(e, t) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded();
            var n = !0 === TS.model.user.profile.is_custom_image,
              i = $(e.target),
              r = i.is(".btn"),
              a = {
                show_delete: n && !r,
                is_iOS: TS.model.is_iOS
              };
            TS.menu.clean(), TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(TS.templates.menu_edit_member_profile_photo_action_items(a)), TS.menu.$menu_items.on("click.menu", "li", t), TS.menu.start(e), r ? TS.menu.positionAt(i, 0, i.outerHeight() + 5) : TS.menu.positionAt(i.closest('[data-action="edit_member_profile_photo_menu"]'), 36, 156), TS.menu.keepInBounds();
          }
        },
        startWithEnterpriseMemberHeader: function(e) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var t = {
              enterprise_name: $("[data-enterprise-name]").val(),
              signout_url: TS.boot_data.signout_url
            };
            TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(TS.templates.menu_enterprise_member_header(t)), TS.menu.$menu_items.on("click.menu", "li", a), TS.kb_nav.setSubmitItemHandler(a), TS.menu.start(e);
            var n = $("[data-header-menu-toggle]"),
              i = -TS.menu.$menu.outerWidth() + n.outerWidth(),
              r = n.outerHeight() + 15;
            TS.menu.positionAt(n, i, r), e.preventDefault();
          }
        },
        end: function() {
          TS.menu.member.member = null, TS.menu.end();
        },
        test: function() {
          var e = {};
          return Object.defineProperty(e, "_getTemplateArguments", {
            get: function() {
              return n;
            },
            set: function(e) {
              n = e;
            }
          }), e;
        }
      });
      var e, t, n = function(e, t) {
          t = t || {};
          var n = {
            member: e,
            show_dm_item: !t.is_im_menu,
            show_email_item: TS.model.team.prefs.allow_email_ingestion,
            is_im_menu: t.is_im_menu,
            show_admin_info: e.is_admin && e.team_id === TS.model.user.team_id
          };
          t.is_im_menu && (n.im = TS.ims.getImByMemberId(e.id)), t.is_header_menu && e.id === TS.model.user.id && (n.other_accounts = TS.boot_data.other_accounts, n.logout_url = TS.boot_data.logout_url, n.signin_url = TS.boot_data.signin_url), e.deleted || e.is_slackbot || e.id === TS.model.user.id || TS.utility.teams.isMemberExternal(e) || TS.model.user.is_ultra_restricted || e.is_ultra_restricted || (n.show_channel_invite = !0);
          var i = TS.shared.getActiveModelOb();
          if (TS.model.active_channel_id || TS.model.active_group_id) {
            var r = !TS.channels.isChannelRequired(i) || e.is_restricted,
              a = !TS.utility.teams.isMemberExternal(e),
              s = e.id !== TS.model.user.id,
              o = a && s;
            if (r && o) {
              var l, d = TS.membership.getUserChannelMembershipStatus(e.id, i);
              d.is_known ? l = d.is_member : (l = !0, n.channel_kick_hidden = !0), l && (i.is_group && TS.permissions.members.canKickFromGroups() || i.is_channel && TS.permissions.members.canKickFromChannels()) && (n.channel_kick_name = (TS.model.active_channel_id ? "#" : "") + i.name);
            }
          }
          if ("USLACKBOT" === e.id) {
            var c = !1;
            TS.model.user.is_admin ? c = !0 : TS.model.team.prefs.slackbot_responses_disabled || TS.model.team.prefs.slackbot_responses_only_admins || (c = !0), n.show_slackbot_responses_item = c;
          }
          return TS.utility.calls.isEnabled() && !e.is_bot && "USLACKBOT" !== e.id && (n.show_call_action = !0, e._is_local || (n.show_call_action = !1)), TS.boot_data.feature_dm_retention && "" !== TS.model.team.plan && TS.model.team.prefs.allow_retention_override && (n.show_dm_retention = !0), n.show_export_history = TS.permissions.members.canExportMessageHistory(i), n;
        },
        i = function(e) {
          e.preventDefault(), TS.client.ui.previewMember(TS.menu.member.member.id, "menu_member_header"), TS.clog.track("USER_CARD_CLICK"), TS.menu.member.end();
        },
        r = function(e) {
          var t = $(this).attr("id");
          if (clearTimeout(TS.menu.end_time), "member_photo_item" === t);
          else if ("member_details_item" === t) e.preventDefault(), TS.model.ui_state.flex_visible && "details" === TS.model.ui_state.flex_name ? $("#details_tab").highlight(null, "channel_page_details_highlighter") : TS.client.ui.flex.openFlexTab("details");
          else if ("member_dm_retention" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.shared.getActiveModelOb().id, "retention");
          else if ("member_export_history" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.shared.getActiveModelOb().id, "export");
          else if ("member_archives_item" === t);
          else {
            if ("member_jump_item" === t) return e.preventDefault(), TS.menu.startWithDatePicker(e), void TS.menu.member.member_item_click_sig.dispatch(t);
            if ("member_star_item" === t) e.preventDefault(), TS.stars.checkForStarClick(e);
            else if ("member_email_item" === t);
            else if ("member_skype_item" === t);
            else if ("member_account_item" === t);
            else if ("member_prefs_item" === t) e.preventDefault(), TS.generic_dialog.is_showing && TS.generic_dialog.cancel(), TS.ui.prefs_dialog.start();
            else if ("member_files_item" === t) e.preventDefault(), TS.view.files.clearFilter(), TS.client.ui.files.filterFileList(TS.menu.member.member.id);
            else if ("member_im_files_item" === t) {
              TS.client.ui.flex.openFlexTab("search"), TS.search.setFilter("files"), TS.view.resizeManually("TS.key_triggers");
              var n = "in:" + TS.shared.getActiveModelOb().name + " ";
              TS.search.setInputVal(n);
            } else if ("member_dm_item" === t) e.preventDefault(), TS.ims.startImByMemberId(TS.menu.member.member.id);
            else if ("member_invite_channel_item" === t) e.preventDefault(), TS.ui.invite.showInviteMemberToChannelDialog(TS.menu.member.member.id);
            else if ("member_create_group_item" === t) e.preventDefault(), TS.ui.new_channel_modal.start("", !1, [TS.menu.member.member.id]);
            else if ("member_profile_item" === t) e.preventDefault(), TS.menu.member.member.is_self ? (TS.generic_dialog.is_showing && TS.generic_dialog.cancel(), TS.ui.edit_member_profile.start()) : TS.client.ui.previewMember(TS.menu.member.member.id);
            else {
              if ("member_presence" === t) return e.preventDefault(), TS.members.toggleUserPresence(), void(TS.menu.end_time = setTimeout(function() {
                TS.menu.member.end(), TS.menu.member.member_item_click_sig.dispatch(t);
              }, 1e3));
              if ("logout" === t) e.preventDefault(), TS.client && TS.client.windows.closeAll(), TS.utility.loadUrlInWindowIfOnline(TS.boot_data.logout_url);
              else if ($(this).hasClass("switch_team")) {
                e.preventDefault();
                var i = $(this).data("team-id");
                if (TSSSB.call("displayTeam", i)) e.preventDefault();
                else {
                  var r = $(this).find("a").attr("href");
                  r && -1 == r.indexOf("?") && $(this).find("a").attr("href", r += "?" + TS.getQsArgsForUrl());
                }
              } else if ("member_kick_channel_item" === t) e.preventDefault(), TS.model.active_channel_id ? TS.channels.kickMember(TS.model.active_channel_id, TS.menu.member.member.id) : TS.model.active_group_id && TS.groups.kickMember(TS.model.active_group_id, TS.menu.member.member.id);
              else if ("member_slackbot_responses" === t);
              else if ("member_open_profile_item" === t);
              else {
                if ("member_call_item" !== t) return e.preventDefault(), void TS.warn("not sure what to do with clicked element id:" + t);
                TS.utility.calls.startCallInModelOb(TS.menu.member.member);
              }
            }
          }
          e.data && e.data.is_member_preview ? TS.clog.track("USER_PROFILE_CLICK") : TS.clog.track("USER_CARD_CLICK"), TS.menu.member.end(), TS.menu.member.member_item_click_sig.dispatch(t);
        },
        a = function(e) {
          var t = $(this).attr("id");
          "sign_out" !== t && "view_account" !== t && (e.preventDefault(), TS.warn("not sure what to do with clicked element id:" + t));
        };
    }();
  },
  2481: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("menu.mpim", {
        onStart: function() {},
        mpim: null,
        startWithMpim: function(t, n) {
          if (!TS.menu.isRedundantClick(t) && !TS.client.ui.checkForEditing(t)) {
            TS.model.menu_is_showing || (e = void 0), TS.menu.buildIfNeeded(), TS.menu.clean(), TS.menu.mpim.mpim = TS.mpims.getMpimById(n);
            var i = TS.menu.mpim.mpim,
              r = TS.model.team.prefs.allow_email_ingestion;
            TS.menu.$menu_header.addClass("hidden").empty();
            var a = {
              mpim: i,
              user: TS.model.user,
              show_email_item: r,
              show_mpim_create: TS.permissions.members.canCreateMpims(),
              show_mpim_convert: TS.permissions.members.canCreateGroups(),
              show_export_history: TS.permissions.members.canExportMessageHistory(TS.menu.mpim.mpim)
            };
            TS.boot_data.feature_dm_retention && "" !== TS.model.team.plan && TS.model.team.prefs.allow_retention_override && (a.show_message_retention = !0), TS.menu.$menu_header.addClass("hidden").empty(), TS.notifs.isCorGMuted(i.id) && (a.mpim_is_muted = !0), TS.menu.$menu_items.html(TS.templates.menu_mpim_items(a)), TS.menu.$menu_header.bind("click.menu", TS.menu.mpim.onMpimHeaderClick), TS.menu.$menu_items.on("click.menu", "li", TS.menu.mpim.onMpimItemClick), TS.menu.start(t), TS.menu.$menu.attr("data-qa", "mpim_menu"), TS.menu.$menu.addClass("narrow_menu"), TS.ui.date_picker.getOldestMsgTs(), e || (e = $(t.target).closest("#channel_name").length);
            var s = e ? $("#channel_name") : $("#channel_actions_toggle"),
              o = s.height(),
              l = e ? o + 6 : o,
              d = e ? 18 : 6;
            TS.menu.positionAt(s, d, l);
          }
        },
        onMpimHeaderClick: function(e) {
          e.preventDefault();
        },
        onMpimItemClick: function(e) {
          var t = $(this).attr("id"),
            n = TS.menu.mpim.mpim;
          if ($(this).hasClass("disabled")) return void TS.menu.mpim.end();
          if ("mpim_details_item" === t) e.preventDefault(), TS.model.ui_state.flex_visible && "details" === TS.model.ui_state.flex_name ? $("#details_tab").highlight(null, "channel_page_details_highlighter") : TS.client.ui.flex.openFlexTab("details");
          else if ("mpim_star_item" === t) e.preventDefault(), TS.stars.checkForStarClick(e);
          else if ("mpim_archives_item" === t);
          else {
            if ("mpim_jump_item" === t) return e.preventDefault(), void TS.menu.startWithDatePicker(e);
            if ("mpim_mute_item" === t) e.preventDefault(), TS.notifs.muteOrUnmuteCorG(TS.menu.mpim.mpim.id);
            else if ("mpim_email_item" === t);
            else if ("mpim_prefs" === t) e.preventDefault(), TS.ui.channel_prefs_dialog.start(TS.menu.mpim.mpim.id);
            else if ("mpim_message_retention" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.menu.mpim.mpim.id, "retention");
            else if ("mpim_export_history" === t) e.preventDefault(), TS.ui.channel_options_dialog.start(TS.menu.mpim.mpim.id, "export");
            else if ("mpim_files_item" === t) {
              TS.client.ui.flex.openFlexTab("search"), TS.search.setFilter("files"), TS.view.resizeManually("TS.key_triggers");
              var i = "in:" + TS.shared.getActiveModelOb().name + " ";
              TS.search.setInputVal(i);
            } else if ("mpim_create_mpim_item" === t) e.preventDefault(), setTimeout(function() {
              TS.ui.im_browser.startWithMpim(n);
            }, 1);
            else {
              if ("convert_to_private_channel" !== t) return void TS.warn("not sure what to do with clicked element id:" + t);
              e.preventDefault();
              var r = TS.shared.getActiveModelOb();
              TS.ui.mpim_conversion_modal.startMpimConversionModal(r);
            }
          }
          TS.menu.mpim.end();
        },
        end: function() {
          TS.menu.mpim.mpim = null, TS.menu.end();
        }
      });
      var e;
    }();
  },
  2482: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("menu", {
        $menu: null,
        $submenu: null,
        $submenu_origin: null,
        $submenu_parent: null,
        $menu_header: null,
        $menu_items: null,
        $menu_list_container: null,
        $menu_list: null,
        $menu_footer: null,
        menu_lazy_load: null,
        user_group: null,
        end_tim: 0,
        $target_element: null,
        $secondary_target_element: null,
        members_html_cache: null,
        large_list_trigger: 1500,
        large_dom_trigger: 500,
        watching_members_model: !1,
        menu_items_hidden: !0,
        has_submenu: !1,
        menu_closed_sig: new signals.Signal,
        onStart: function() {},
        buildIfNeeded: _.once(function() {
          TS.menu.$menu = $(TS.templates.menu());
          var e = TS.menu.$menu;
          if ("mobile" !== TS.boot_data.app && "0" != TS.qs_args.new_scroll) {
            if (TS.client ? e.appendTo($("#client-ui")) : e.appendTo($("body")), !TS.environment.supports_custom_scrollbar) {
              var t = "1" == TS.qs_args.debug_scroll;
              e.find("#menu_items_scroller").monkeyScroll({
                debug: t
              });
            }
            e.detach();
          }
          TS.menu.$menu_header = e.find("#menu_header"), TS.menu.$menu_body = e.find(".menu_body"), TS.menu.$menu_list_container = e.find("#menu_list_container"), TS.menu.$menu_list = e.find("#menu_list"), TS.menu.$menu_items = e.find("#menu_items"), TS.menu.$menu_footer = e.find("#menu_footer");
        }),
        handleTopicKeydown: function(e) {
          var t = TS.utility.keymap;
          if (e.which == t.enter && !e.shiftKey && !e.altKey) {
            var n = $(e.target),
              i = TS.shared.getActiveModelOb(),
              r = $.trim(n.val());
            if (i.topic.value === r) return void TS.menu.end();
            i.is_group ? TS.groups.setTopic(i.id, r) : i.is_channel && TS.channels.setTopic(i.id, r), TS.menu.end();
          }
        },
        startWithList: function(e, t, n) {
          if (t && t.length && !TS.menu.isRedundantClick(e))
            if (n = n || {}, TS.menu.buildIfNeeded(), TS.menu.clean(), TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(t.html()), TS.menu.$menu.addClass(n.menu_class), (n.close_on_click || n.onClick) && TS.menu.$menu_items.on("click.menu", "li", function(e) {
                "function" == typeof n.onClick && n.onClick(e), n.close_on_click && TS.menu.end();
              }), TS.menu.start(e, void 0, n), n.attach_to_target_at_full_width) TS.menu.$menu.css({
              width: "100%",
              top: "calc(100% + 3px)",
              left: "0"
            });
            else {
              var i = r(n.align_right);
              TS.menu.positionAt(TS.menu.$target_element, i.left, i.top);
            }
        },
        startWithDatePicker: function(e) {
          if (!TS.menu.isRedundantClick(e) && !TS.client.ui.checkForEditing(e)) {
            TS.menu.buildIfNeeded(), TS.menu.clean(), TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(TS.templates.menu_date_picker_items()), TS.menu.$menu_items.on("click.menu", "li", TS.menu.onDatePickerItemClick), TS.menu.$menu.attr("data-qa", "date_picker_menu");
            var t = $("#date_picker_cal_container");
            TS.ui.date_picker.startJumpToDatePicker(t), TS.menu.$menu.addClass("date_picker");
          }
        },
        onDatePickerItemClick: function(t) {
          var n = $(this).attr("id"),
            i = TS.shared.getActiveModelOb();
          return $(this).hasClass("disabled") ? void TS.menu.end() : "date_picker_back_item" === n ? (t.preventDefault(), e = !0, i.is_im ? TS.menu.member.startWithMember(t, i.user, !1, !1, !0) : i.is_mpim ? TS.menu.mpim.startWithMpim(t, i.id) : i.is_group ? TS.menu.group.startWithGroup(t, i.id) : i.is_channel && TS.menu.channel.startWithChannel(t, i.id), void TS.menu.$menu.removeClass("date_picker")) : void TS.warn("not sure what to do with clicked element id:" + n);
        },
        startWithMessageActions: function(e, t, n, i) {
          if (TS.client && !TS.model.ms_connected) return void TS.sounds.play("beep");
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var r = TS.utility.msgs.getMsg(t, n);
            i = i || TS.shared.getActiveModelOb(), r || (r = TS.ui.replies.getActiveMessage(i, t)), !r && TS.model.threads_view_is_showing && (r = TS.client.threads.getMessage(i, t)), !r && TS.model.unread_view_is_showing && (r = TS.client.unread.getMessage(i, t));
            var s = TS.utility.msgs.getMsgActions(r, i),
              o = TS.model.unread_view_is_showing,
              l = s.mark_unread && !r.is_briefing_message && (TS.utility.msgs.getMarkMsgTSForUnreadPoint(t, n, i) || o) && !TS.model.archive_view_is_showing && !r.is_ephemeral;
            s.mark_unread = !!l;
            var d = {
                msg: r,
                actions: s,
                model_ob: i,
                is_all_unreads_showing: TS.model.unread_view_is_showing,
                is_channel_or_group: i.is_channel && !i.is_mpim || i.is_group && !i.is_mpim
              },
              c = $(e.target);
            d.abs_permalink = TS.utility.msgs.constructAbsoluteMsgPermalink(i, r.ts, r.thread_ts), "file_share" !== r.subtype && "file_mention" !== r.subtype || r.file && (d.abs_permalink = r.file.permalink), TS.replies.canReplyToMsg(i, r) && (d.can_subscribe = !0, d.subscription = TS.replies.getSubscriptionState(i.id, r.ts), d.context = TS.ui.thread.getContextForEl(c), d.subscription || TS.replies.promiseToGetSubscriptionState(i.id, r.ts).then(function(e) {
              a(i.id, r.ts, e);
            }), d.prefs_threads_everything = _.get(TS, "model.prefs.threads_everything")), d.is_in_conversation = c.closest("ts-conversation").length > 0;
            var u = c.closest("#threads_msgs").length > 0,
              m = d.is_in_conversation || u,
              p = TS.boot_data.feature_sli_briefing && c.closest("#sli_briefing").length > 0;
            s.mark_unread = s.mark_unread && !m && !p, m && "tombstone" === r.subtype && (s.has_private_actions = !1), TS.boot_data.feature_new_broadcast && "thread_broadcast" === r.subtype && (!m && s.delete_msg && (s.delete_msg = !1), (m && s.remove_broadcast || i.is_channel && !i.is_member) && (s.remove_broadcast = !1)), TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(TS.templates.menu_message_action_items(d)), TS.menu.$menu_items.on("click.menu", "li", TS.menu.onMessageActionClick), TS.log("enabled reminders msg action menu"), TS.menu.has_submenu = !0;
            var f = TS.menu.$menu_items.find("#remind_me");
            f.on("highlighted", function() {
              f.submenu({
                items_html: TS.templates.remind_me_items(),
                onclick: _.partial(TS.menu.onMessageRemindClick, i, r, m)
              });
            }).on("unhighlighted", function() {
              TS.menu.$submenu && !TS.menu.$submenu.hasClass("kb_active") && f.submenu("destroy");
            }), TS.menu.start(e), TS.menu.$target_element = c.closest("[data-action]"), TS.menu.$target_element.addClass("active"), TS.menu.$secondary_target_element = c.closest("ts-message"), TS.menu.$secondary_target_element.addClass("active");
            var h = 0,
              g = c.width() + 10;
            TS.client && !TS.model.ui_state.flex_visible && (g = -(TS.menu.$menu.width() + 10));
            var S = TS.menu.$menu.find("#edit_link");
            if (0 === S.length && (S = TS.menu.$menu.find("#rxn_link")), S.length > 0) {
              var T = TS.menu.$menu.offset().top;
              h = -(S.offset().top - T + S.height() / 2 - 5);
            }
            TS.menu.positionAt(c, g, h), TS.menu.keepInBounds();
          }
        },
        onMessageActionClick: function(e) {
          if (e.preventDefault(), TS.isPartiallyBooted()) return void TS.incremental_boot.userDidInteractWithUI();
          var t, n = $(this),
            i = n.attr("id"),
            r = n.data("msg-ts"),
            a = n.data("model-ob-id"),
            s = n.data("rxn-key"),
            o = a ? TS.shared.getModelObById(a) : TS.shared.getActiveModelOb();
          if ("edit_link" === i) {
            var l = n.data("edit-state");
            TS.msg_edit.startEdit(r, o, l);
          } else if ("delete_link" === i) TS.msg_edit.startDelete(r, o);
          else if ("open_in_channel" === i) t = n.attr("data-thread-ts"), TS.client.ui.tryToJump(o.id, t);
          else if ("open_thread_in_flexpane" === i) {
            var d = TS.utility.msgs.findMsg(r, o.id);
            d && TS.replies && TS.replies.canReplyToMsg(o, d) && (t = d.thread_ts || d.ts, TS.ui.replies.openConversation(o, t));
          } else if ("toggle-subscription-status" === i) {
            var c, u = n.data("subscribed"),
              m = TS.utility.msgs.findMsg(r, a);
            m && m.replies && m.replies.length && (c = _.last(m.replies).ts), n.addClass("disabled"), TS.replies.setSubscriptionState(a, r, !u, c);
            var p = u ? "THREADS_UNFOLLOW_CLICKED" : "THREADS_FOLLOW_CLICKED",
              f = n.data("context"),
              h = _.get(m, ".reply_count", 0) + 1;
            TS.ui.thread.trackEvent(a, r, f, p, {
              num_msg_in_thread: h
            });
          } else if ("pin_link" === i) TS.pins.startPinMessage(r, o);
          else if ("unpin_link" === i) TS.pins.unPinMessage(r, o);
          else if ("rxn_link" === i) TS.ui.react_emoji_menu.start({
            e: e,
            rxn_key: s
          });
          else if ("mark_unread" === i) TS.model.unread_view_is_showing ? TS.client.ui.unread.setUnreadPoint(r) : (TS.info("setting unread point on " + o.id + " due to message action click (" + r + ")"), TS.client.msg_pane.setUnreadPoint(r));
          else if ("copy_link" === i) {
            TS.clipboard.writeText($(this).data("permalink"));
            var g = TS.menu.$secondary_target_element,
              S = {
                message_timestamp: r,
                channel_id: a,
                channel_type: a[0] || "",
                member_id: g.data("member-id"),
                app_id: g.data("app-id"),
                bot_id: g.data("bot-id")
              };
            TS.clog.track("MSG_LINK_COPY", S);
          } else if ("open_original_link" === i);
          else if ("share_message_link" === i) TS.ui.share_message_dialog.start(r, o);
          else if ("remove_broadcast_link" === i) TS.msg_edit.startRemoveBroadcast(r, o);
          else if ("remind_me" === i) return;
          TS.menu.end();
        },
        onMessageRemindClick: function(e, t, n, i) {
          if ("remind" === $(i.target).data("msg-action")) {
            var r = {
              time: $(i.target).data("remind-length"),
              message_channel: e.id,
              message_ts: t.ts
            };
            "thread_broadcast" !== t.subtype || n || (r.respond_in_channel = !0), TS.api.call("reminders.addFromMessage", r, function() {});
          }
          TS.menu.end();
        },
        startWithCommentActions: function(e, t, n) {
          if (TS.client && !TS.model.ms_connected) return void TS.sounds.play("beep");
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var i = TS.files.getFileById(t);
            if (i) {
              var r = TS.files.getFileCommentById(i, n);
              if (r) {
                var a = TS.shared.getActiveModelOb(),
                  s = TS.files.getFileCommentActions(r, i);
                TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(TS.templates.menu_comment_action_items({
                  model_ob: a,
                  file: i,
                  comment: r,
                  actions: s
                }));
                var o = $(e.target);
                TS.menu.$menu_items.on("click.menu", "li", function(e) {
                  var t = o.closest(".comment_actions");
                  TS.menu.onCommentActionClick(e, t);
                }), TS.menu.start(e);
                var l = 0,
                  d = -(TS.menu.$menu.width() + 10),
                  c = TS.menu.$menu.find("#edit_file_comment");
                if (0 === c.length && (c = TS.menu.$menu.find("#rxn_file_comment")), c.length > 0) {
                  var _ = TS.menu.$menu.offset().top;
                  l = -(c.offset().top - _ + c.height() / 2 - 5);
                }
                TS.menu.positionAt(o, d, l), TS.menu.keepInBounds();
              }
            }
          }
        },
        onCommentActionClick: function(e, t) {
          e.preventDefault();
          var n = $(e.target).closest("[id]"),
            i = n.attr("id"),
            r = n.data("rxn-key"),
            a = TS.shared.getActiveModelOb();
          if ("edit_file_comment" === i) TS.ui.comments.startEdit(n.data("file-id"), n.data("comment-id"), t);
          else if ("delete_file_comment" === i) TS.ui.comments.startDelete(n.data("file-id"), n.data("comment-id"));
          else if ("rxn_file_comment" === i) TS.ui.react_emoji_menu.start({
            e: e,
            rxn_key: r
          });
          else if ("pin_comment" === i && a) TS.pins.startPinFileComment(n.data("comment-id"), n.data("file-id"), a);
          else {
            if ("unpin_comment" !== i || !a) return void TS.warn("not sure what to do with clicked element id:" + i);
            TS.pins.unPinFileComment(n.data("comment-id"), n.data("file-id"), a);
          }
          TS.menu.end();
        },
        startWithSpaceWeb: function(e, t, n) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var i = TS.files.getFileById(t);
            if (i) {
              var r = TS.files.getFileActions(i),
                a = i.channels.concat(i.groups).concat(i.ims),
                s = i.user == n && a.length && "uneditable" !== i.state,
                o = {
                  file: i,
                  actions: r,
                  can_write_to_clipboard: TS.clipboard.canWriteText(),
                  can_enable_collab_editing: s,
                  collab_enabled: "locked" !== i.state && "uneditable" !== i.state
                };
              TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(TS.templates.menu_space_action_items(o)), TS.menu.$menu_items.on("click.menu", "li", TS.menu.onSpaceClickWeb), TS.kb_nav.setSubmitItemHandler(TS.menu.onSpaceClickWeb), TS.menu.start(e);
              var l = $(".space_btn_more");
              $("#toggle_input").bind("change", function() {
                e.preventDefault();
                var t = $("#toggle_collab_editing"),
                  n = $(this);
                t.addClass("disabled"), n.prop("disabled", !0), TS.web.space.lockEditingPrivilegesWithCallback(n.prop("checked"), function(e) {
                  var i = e && e.data,
                    r = i ? "locked" !== i.state : !n.prop("checked");
                  t.removeClass("disabled"), n.prop("disabled", !1), n.prop("checked", r);
                });
              });
              var d = -TS.menu.$menu.outerWidth() + l.outerWidth(),
                c = l.outerHeight() + 5;
              TS.menu.positionAt(l, d, c);
            }
          }
        },
        onSpaceClickWeb: function(e) {
          var t = $(this).attr("id"),
            n = TS.files.getFileById($(this).data("file-id"));
          if (n) {
            if ("keyboard_shortcuts" === t) e.preventDefault(), TS.ui.shortcuts_dialog.start(!0);
            else if ("learn_more" === t);
            else if ("feedback" === t) e.preventDefault(), TS.web.space.provideFeedback();
            else if ("delete_space" === t) e.preventDefault(), TS.web.file.deleteFile(n.id);
            else if ("copy_space_link" === t) e.preventDefault(), TS.clipboard.canWriteText() ? TS.clipboard.writeText(n.permalink) : TS.warn("User clicked copy link, but we can't write to the clipboard right now");
            else if ("create_public_space_link" === t) e.preventDefault(), TS.files.createPublicURL(n);
            else if ("view_public_space_link" === t) e.preventDefault(), TS.web.space.showPublicUrlDialog();
            else {
              if ("print_space" !== t) return "toggle_collab_editing" === t ? void 0 : (e.preventDefault(), void TS.warn("not sure what to do with clicked element id:" + t));
              window.print(), e.preventDefault();
            }
            TS.menu.end();
          }
        },
        startWithTeamAndUser: function(e) {
          TS.menu.isRedundantClick(e) || TS.client.ui.checkForEditing(e) || TS.model.menu_is_showing || (TS.menu.buildIfNeeded(), TS.menu.startWithTeamAndUserRebuild(e), TS.boot_data.page_needs_enterprise && TS.menu.listenForRebuildWorthiness());
        },
        did_start_slack_menu_signal_listeners: !1,
        listenForRebuildWorthiness: function() {
          TS.menu.did_start_slack_menu_signal_listeners = !0, TS.client.user_added_to_team_sig.add(TS.menu.startWithTeamAndUserRebuild), TS.client.user_removed_from_team_sig.add(TS.menu.startWithTeamAndUserRebuild);
        },
        stopListeningForRebuildWorthiness: function() {
          TS.menu.did_start_slack_menu_signal_listeners = !1, TS.client.user_added_to_team_sig.remove(TS.menu.startWithTeamAndUserRebuild), TS.client.user_removed_from_team_sig.remove(TS.menu.startWithTeamAndUserRebuild);
        },
        startWithTeamAndUserRebuild: function(t) {
          TS.menu.clean(), TS.menu.submenu_template_args = {};
          var n = TS.model && TS.model.team && TS.boot_data.feature_tinyspeck,
            i = TS.environment.is_dev,
            r = n || i,
            a = {
              user: TS.model.user,
              team: TS.model.team,
              team_name: TS.model.team.name,
              logout_url: TS.boot_data.logout_url,
              signin_url: TS.boot_data.signin_url,
              help_url: TS.boot_data.help_url,
              show_version_info: r,
              current_team_is_in_enterprise: !1,
              current_team_gets_logout_url: !0,
              show_customize_link: TS.model.user.is_admin || !TS.model.team.prefs.emoji_only_admins || !TS.model.team.prefs.slackbot_responses_only_admins || !TS.model.team.prefs.loading_only_admins,
              show_statistics_link: TS.model.user.is_admin || !TS.model.team.prefs.stats_only_admins && !TS.model.user.is_restricted,
              is_our_app: TS.model.is_our_app,
              show_team_subdivider: TS.model.user.is_admin,
              can_invite: TS.ui.admin_invites.canInvite(),
              can_view_shared_invites: TS.ui.shared_invites_modal.userCanViewSharedInvitesModal()
            };
          Object.keys(TS.boot_data.other_accounts).length && (a.other_accounts = TS.boot_data.other_accounts), TS.model.team.enterprise_id && (a.current_team_is_in_enterprise = !0);
          var s = !1,
            o = _.merge({}, TS.boot_data.other_accounts),
            l = {};
          for (var d in o) o[d].enterprise_id ? a.other_enterprise_accounts || (s = !0, a.other_enterprise_accounts = _(o).filter(function(e) {
            return e.enterprise_id;
          }).groupBy("enterprise_id").map(function(e) {
            var t = {};
            if (t.enterprise_id = e[0].enterprise_id, t.enterprise_name = e[0].enterprise_name, TS.model.user.enterprise_user && t.enterprise_id === TS.model.user.enterprise_user.enterprise_id) {
              var n = TS.model.enterprise_teams,
                i = [];
              TS.model.user.enterprise_user.teams.forEach(function(t) {
                if (t !== TS.model.team.id) {
                  var r = n.filter(function(e) {
                    return e.id === t;
                  })[0];
                  r && i.push({
                    team_id: t,
                    team_url: e[0].team_url.replace(/\/[a-z0-9]+\./i, "/" + r.domain + "."),
                    team_name: r.name
                  });
                }
              }), i = i.sort(function(e, t) {
                return e.team_name < t.team_name ? -1 : e.team_name > t.team_name ? 1 : 0;
              }), t.enterprise_teams = i;
            } else t.enterprise_teams = e;
            return t.is_currently_logged_into = !1, t.enterprise_id === TS.model.team.enterprise_id ? (t.is_enterprise_currently_logged_into = !0, a.current_team_is_in_enterprise && (a.current_team_gets_logout_url = !1), a.enterprise_logout_url = TS.boot_data.enterprise_logout_url, a.enterprise_domain = TS.boot_data.enterprise_url + "/manage") : (t.needs_other_enterprise_logout = !0, t.logout_url = TS.enterprise.workspaces.createLogoutURL(t.enterprise_id, TS.boot_data.logout_url)), t;
          }).value(), TS.model.user.enterprise_user && (a.other_enterprise_accounts = a.other_enterprise_accounts.sort(function(e, t) {
            return e.enterprise_id === TS.model.user.enterprise_user.enterprise_id ? -1 : t.enterprise_id === TS.model.user.enterprise_user.enterprise_id ? 1 : 0;
          }))) : (o[d].logout_url = TS.enterprise.workspaces.createLogoutURL(o[d].team_id, TS.boot_data.logout_url), l[o[d].team_id] = o[d]);
          s && (Object.keys(l).length ? a.other_accounts = l : Object.keys(a.other_enterprise_accounts).length && delete a.other_accounts), a.current_team_is_in_enterprise && (a.current_team_gets_logout_url = !1, a.enterprise_logout_url = TS.boot_data.enterprise_logout_url, a.enterprise_domain = TS.boot_data.enterprise_url + "/manage"), TS.boot_data.page_needs_enterprise && ((s || a.current_team_is_in_enterprise) && (a.other_enterprise_accounts && Object.keys(a.other_enterprise_accounts).length || a.other_accounts && Object.keys(a.other_accounts).length) && (a.show_switch_teams_submenu = !0), a.can_show_leave_workspace = TS.permissions.enterprise.canUserLeaveTeam(TS.model.user, TS.model.team)), a.show_shared_channels = TS.boot_data.page_needs_enterprise && !TS.model.user.is_restricted, TS.menu.$menu.addClass("team_menu slack_menu"), TS.menu.$menu.attr("data-qa", "team_menu"), TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_body.html(TS.templates.menu_slack_menu(a)), TS.menu.$menu_items.addClass("hidden");
          var c = TS.menu.$menu_body;
          c.on("click.menu", "li", TS.menu.onTeamAndUserItemClick), c.on("click.menu", ".member_preview_link", function(e) {
            e.preventDefault(), TS.client.ui.previewMember(TS.model.user.id);
          }), c.on("mouseenter.section_header", "> div.section_header", TS.kb_nav.clearHighlightedItem), TS.kb_nav.setSubmitItemHandler(TS.menu.onTeamAndUserItemClick), TS.boot_data.page_needs_enterprise && (TS.menu.submenu_template_args.administration = {}, TS.menu.submenu_template_args.switch_teams = a);
          var u = 55;
          TS.model.is_electron && TS.model.is_mac && TSSSB.call("isMainWindowFrameless") && (u += 7), TS.boot_data.page_needs_enterprise && "string" == typeof t && (e = !0), TS.menu.has_submenu = !0, TS.menu.submenu_template_args.member_current_status_item = {
            member: TS.model.user
          }, TS.menu.start(t, void 0, {
            needs_to_remain_open: function() {
              return TS.ui.react_emoji_menu.is_showing;
            }
          }), TS.menu.positionAt($("#team_menu"), 10, u), TS.view.members.updateUserDisplayName(), TS.view.members.updateUserCurrentStatus(), c.on("highlighted", "li:not(.divider)", TS.menu.onTeamAndUserItemMouseenter);
        },
        onTeamAndUserItemMouseenter: function(e) {
          if (($(this).hasClass("has_submenu") && "member_current_status_item" !== $(this).attr("id") || !TS.menu._current_status_input || !TS.menu._current_status_input.isEdited()) && (TS.menu.$submenu && TS.menu.$submenu_parent && TS.menu.$submenu_parent.submenu("destroy"), $(e.currentTarget).hasClass("has_submenu"))) {
            var t = $(this).attr("id") || $(this).data("action"),
              n = TS.menu.$menu_body,
              i = {};
            switch (TS.menu.submenu_template_args[t] && (i = TS.menu.submenu_template_args[t]), t) {
              case "administration":
                TS.model.user.enterprise_user && (TS.model.user.enterprise_user.is_admin || TS.model.user.enterprise_user.is_owner) && (i.show_org_settings = !0, i.enterprise_domain = TS.boot_data.enterprise_url + "/manage"), TS.menu.$submenu_parent = n.find("#administration"), TS.menu.$submenu_parent.submenu({
                  items_html: TS.templates.administration_items(i),
                  onclick: TS.menu.onTeamAndUserItemSubmenuClick
                });
                break;
              case "switch_teams":
                TS.menu.$submenu_parent = n.find("#switch_teams"), TS.menu.$submenu_parent.submenu({
                  items_html: TS.templates.switch_teams_items(i),
                  onclick: TS.menu.onTeamAndUserItemSubmenuClick
                });
                break;
              case "member_current_status_item":
                TS.menu.$submenu_parent = n.find("#member_current_status_item"), TS.menu.$submenu_parent.submenu({
                  items_html: TS.templates.current_status_submenu(i),
                  onclick: TS.menu.onTeamAndUserItemSubmenuClick,
                  ondestroy: TS.menu._unregisterCurrentStatusInput
                }), TS.menu._registerCurrentStatusInput();
                break;
              case "team_invitations":
                if (!TS.ui.shared_invites_modal.userCanViewSharedInvitesModal()) break;
                TS.menu.$submenu_parent = n.find("#team_invitations"), TS.menu.$submenu_parent.submenu({
                  items_html: TS.templates.shared_invites_modal()
                }), TS.clog.track("INAPP_INVITES", {
                  contexts: {
                    ui_context: {
                      step: "share_link",
                      action: "impression",
                      ui_element: "share_invite_link_modal"
                    },
                    referring_ui_context: {
                      step: "invite_people",
                      ui_element: "invite_people_menu"
                    }
                  },
                  referring_event_id: "INAPP_INVITES"
                }), TS.ui.shared_invites_modal.start();
            }
          }
        },
        onTeamAndUserItemSubmenuClick: function(e) {
          var t = $(e.target).closest("li");
          switch (t.attr("id") || t.data("action")) {
            case "team_settings":
            case "manage_team":
            case "switch_team":
            case "logout":
            case "enterprise_logout":
            case "org_settings":
              break;
            default:
              return void(e && e.target && "_blank" === e.target.getAttribute("target") || e.preventDefault());
          }
          TS.menu.$submenu && TS.menu.$submenu_parent && TS.menu.$submenu_parent.submenu("destroy"), TS.menu.end();
        },
        onTeamAndUserItemClick: function(e) {
          clearTimeout(TS.menu.end_time);
          var n = $(this);
          if (n.is("[disabled]") || n.hasClass("disabled")) return void e.preventDefault();
          var i = n.attr("id");
          switch (!i && n.hasClass("switch_team") && (i = "switch_team"), i) {
            case "leave_workspace":
              e.preventDefault(), TS.ui.leave_team_dialog.start(TS.model.team.id);
              break;
            case "workspaces":
              e.preventDefault(), TS.ui.workspaces.start();
              break;
            case "shared_channels":
              e.preventDefault(), TS.ui.shared_channels_invites.start();
              break;
            case "version_info":
              e.preventDefault(), TS.ui.showVersionInfo();
              break;
            case "member_account_item":
              e.preventDefault(), TS.client.ui.previewMember(TS.model.user.id);
              break;
            case "team_settings":
            case "manage_team":
            case "team_billing":
            case "team_pricing":
            case "team_services":
            case "team_customize":
            case "team_statistics":
              break;
            case "team_apps":
              TS.metrics.count("team_menu_download_apps"), e.preventDefault(), TS.magic_login.execute({
                fallback_to_browser: !0,
                browser_uri: "/downloads",
                app_uri: "/ssb/open"
              });
              break;
            case "team_invitations":
              if (TS.ui.shared_invites_modal.userCanViewSharedInvitesModal()) return;
              e.preventDefault(), TS.ui.admin_invites.start();
              var r = TS.clog.parseParams(this.getAttribute("data-clog-params"));
              TS.clog.track(this.getAttribute("data-clog-event"), r);
              break;
            case "member_prefs_item":
              e.preventDefault(), TS.ui.prefs_dialog.start();
              break;
            case "team_help":
              e.preventDefault(), t("team_menu");
              break;
            case "add_team":
              TSSSB.call("signInTeam") && e.preventDefault();
              break;
            case "member_presence":
              return e.preventDefault(), TS.members.toggleUserPresence(), void(TS.menu.end_time = setTimeout(TS.menu.end, 1e3));
            case "logout":
              e.preventDefault(), TS.client && TS.client.windows.closeAll(), TS.utility.loadUrlInWindowIfOnline(TS.boot_data.logout_url);
              break;
            case "enterprise_login":
              TSSSB.call("signInTeam") && e.preventDefault();
              break;
            case "enterprise_logout":
              break;
            case "switch_team":
              var a = $(this).data("user-id");
              if (TSSSB.call("displayTeam", a)) e.preventDefault();
              else {
                var s = $(this).find("a").attr("href");
                s && -1 == s.indexOf("?") && $(this).find("a").attr("href", [s, TS.getQsArgsForUrl()].join("?"));
              }
              break;
            default:
              return void e.preventDefault();
          }
          TS.menu.end();
        },
        startWithNotificationsMenu: function(e) {
          if (!TS.menu.isRedundantClick(e) && !TS.client.ui.checkForEditing(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var t, n = TS.dnd.memberDndStatus(),
              i = TS.shared.getActiveModelOb();
            t = i.is_mpim ? TS.mpims.getDisplayName(i, !1, !1) : i.is_channel || i.is_group ? "#" + i.name : i.name;
            var r = {
              user: TS.model.user,
              model_ob: i,
              model_ob_name: t,
              in_dnd: n.in_dnd,
              is_snoozing: n.snoozed,
              readable_end_time: n.readable_end_time,
              cmd_key: TS.model.is_mac ? "⌘" : "ctrl",
              meta_key: TS.model.is_mac ? "opt" : "alt"
            };
            TS.menu.has_submenu = !0, TS.menu.$menu.addClass("notifications_menu"), TS.menu.$menu_header.html(TS.templates.notifications_header(r)), TS.menu.$menu_items.html(TS.templates.notifications_items(r)), TS.menu.$menu_items.on("click.menu", "li", TS.menu.onNotificationsMenuItemClick);
            var a = TS.menu.$menu_items.find("#adjust_snooze_time");
            a.on("highlighted", function() {
              a.submenu({
                items_html: TS.templates.snooze_items(),
                onclick: TS.menu.onNotificationsMenuItemClick
              });
            }).on("unhighlighted", function() {
              TS.menu.$submenu && !TS.menu.$submenu.hasClass("kb_active") && a.submenu("destroy");
            }), TS.menu.start(e), TS.menu.positionAt($("#team_menu .notifications_menu_btn"), -10, 24);
          }
        },
        onNotificationsMenuItemClick: function(e) {
          var t = $(e.target).closest("[data-dnd-menu-action]");
          if (t.length) {
            var n = t.data("dnd-menu-action"),
              i = TS.dnd.memberDndStatus();
            if ("turn_off" === n) i.snoozed ? TS.dnd.endSnooze() : i.in_dnd && TS.dnd.endDnd();
            else if ("snooze" === n) {
              var r = parseInt(t.data("snooze-length"), 10);
              r && !isNaN(r) && TS.dnd.setSnooze(r);
            } else if ("dnd_schedule" === n) TS.boot_data.feature_notif_prefs_overhaul ? TS.ui.prefs_dialog.start("notifications", "#prefs_dnd") : TS.ui.prefs_dialog.start("notifications", null, "prefs_dnd");
            else if ("enter_focus_mode" === n) {
              if (!TS.boot_data.feature_focus_mode) return;
              TS.ui.focus_mode.start();
            } else if ("channel_settings" === n) {
              var a = TS.shared.getActiveModelOb();
              TS.ui.channel_prefs_dialog.start(a.id);
            } else "notif_prefs" === n && TS.ui.prefs_dialog.start("notifications");
            TS.menu.end();
          }
        },
        startWithFlexMenu: function(e) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.clean(), TS.menu.$menu_header.addClass("hidden").empty();
            var t;
            t = TS.boot_data.page_needs_enterprise ? TS.i18n.t("Organization Directory", "menu")() : TS.i18n.t("Team Directory", "menu")(), TS.menu.$menu_items.html(TS.templates.menu_flexpane_items({
              special_flex_panes: TS.boot_data.special_flex_panes,
              show_downloads: TS.model.supports_downloads,
              is_enterprise: TS.boot_data.page_needs_enterprise,
              show_user_groups: TS.lazyLoadMembersAndBots() && "" !== TS.model.team.plan && !TS.model.user.is_restricted,
              directory_title: t
            })), TS.menu.$menu_items.on("click.menu", "li", TS.menu.onFlexMenuItemClick), TS.menu.start(e), TS.menu.$menu.addClass("flex_menu"), TS.menu.$menu.attr("data-qa", "flex_menu");
            var n = $("#flex_menu_toggle"),
              i = -(TS.menu.$menu.width() - n.width()),
              r = 6 + n.height();
            TS.menu.positionAt(n, i, r), TS.help.updateIcon(), TS.client.whats_new.updateIcon(), $("#flex_menu_toggle").addClass("menu_open"), $("#flex_menu_callout").bind("click", function() {
              TS.menu.end();
            });
          }
        },
        onFlexMenuItemClick: function(e) {
          var n = $(this),
            i = $(this).data("tab-id");
          if (i) {
            var r = i;
            setTimeout(function() {
              if ("files" === r) TS.client.ui.files.toggleFileList("all"), TS.client.ui.files.filterFileList("all");
              else if ("team" === r) TS.client.ui.showTeamList();
              else if ("groups" === r && TS.lazyLoadMembersAndBots()) TS.client.ui.showGroupsList();
              else {
                if ("whats_new" === r) {
                  var e = !n.find("#whats_new_count").hasClass("hidden");
                  e ? TS.clog.track("WHATSNEW_ACTION", {
                    action: "open_pane_badged",
                    trigger: "flex_menu",
                    step: TS.client.whats_new.getNewestID()
                  }) : TS.clog.track("WHATSNEW_ACTION", {
                    action: "open_pane",
                    trigger: "flex_menu",
                    step: TS.client.whats_new.getNewestID()
                  });
                }
                TS.client.ui.flex.openFlexTab(r);
              }
            }, 200);
          } else if ($(this).data("filetype")) {
            var a = $(this).data("filetype"),
              s = $("#file_list");
            s.length && s.children().length || TS.view.files.last_files_html && (TS.view.files.last_files_html = ""), setTimeout(function() {
              TS.client.ui.files.toggleFileList("all"), TS.client.ui.files.filterFileList(a), TS.view.files.setButtonState(a);
            }, 200);
          } else {
            var o = $(this).attr("id");
            "help" === o && (e.preventDefault(), setTimeout(function() {
              t("flex_menu");
            }, 200));
          }
          TS.menu.end();
        },
        startWithUserGroupMenu: function(e, t) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.clean(), TS.menu.user_group = TS.user_groups.getUserGroupsById(t), TS.menu.$menu.addClass("no_min_width");
            var n = TS.permissions.members.canCreateAndDeleteUserGroups() && !TS.menu.user_group.date_delete,
              i = TS.permissions.members.canCreateAndDeleteUserGroups() && TS.menu.user_group.date_delete;
            TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(TS.templates.user_group_items({
              show_user_groups_edit: TS.permissions.members.canEditUserGroups(),
              show_user_groups_disable: n,
              show_user_groups_enable: i
            })), TS.menu.$menu_items.on("click.menu", "li", TS.menu.onUserGroupMenuItemClick), TS.menu.start(e), TS.menu.positionAt($("#user_group_menu_toggle"), -(TS.menu.$menu.width() - $("#user_group_menu_toggle").width()), 37);
          }
        },
        onUserGroupMenuItemClick: function() {
          var e = $(this).data("action");
          "edit_info" === e ? TS.ui.admin_user_groups.editInfo(TS.menu.user_group) : "edit_members" === e ? TS.ui.admin_user_groups.editMembers(TS.menu.user_group) : "disable" === e ? TS.ui.admin_user_groups.disable(TS.menu.user_group) : "enable" === e ? TS.ui.admin_user_groups.enable(TS.menu.user_group) : "delete" === e && TS.ui.admin_user_groups.remove(TS.menu.user_group), TS.menu.end();
        },
        startWithSearchFilter: function(e) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded();
            var t = {
              search_exclude_bots: TS.model.prefs.search_exclude_bots,
              search_only_my_channels: TS.model.prefs.search_only_my_channels,
              search_only_current_team: TS.model.prefs.search_only_current_team,
              result_type: "messages" === TS.search.filter ? "messages" : "files",
              is_enterprise: TS.boot_data.page_needs_enterprise
            };
            TS.menu.clean(), TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu.addClass("search_filter_menu"), TS.menu.$menu_items.html(TS.templates.menu_search_filter_items(t)), TS.menu.start(e), i();
            var n = $("#search_filter_menu_label");
            TS.menu.positionAt(n, -8, n.height() + 10), $("#search_only_my_channels_cb").bind("change", function() {
              TS.prefs.setPrefByAPI({
                name: "search_only_my_channels",
                value: !$(this).prop("checked")
              });
            }), $("#search_exclude_bots_cb").bind("change", function() {
              TS.prefs.setPrefByAPI({
                name: "search_exclude_bots",
                value: !$(this).prop("checked")
              });
            }), $("#search_only_current_team_cb").bind("change", function() {
              TS.prefs.setPrefByAPI({
                name: "search_only_current_team",
                value: !$(this).prop("checked")
              });
            }), TS.menu.search_filter_is_showing = !0, $("#search_filter_menu_label").addClass("active");
          }
        },
        startWithMentionsFilter: function(e) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded();
            var t = {
              exclude_at_channels: TS.model.prefs.mentions_exclude_at_channels,
              exclude_at_user_groups: TS.model.prefs.mentions_exclude_at_user_groups,
              show_user_group_filter: !0
            };
            TS.menu.clean(), TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu.addClass("search_filter_menu"), TS.menu.$menu_items.html(TS.templates.menu_mentions_filter_items(t)), TS.menu.start(e), i();
            var n = $("#mentions_filter_menu_label");
            TS.menu.positionAt(n, -8, n.height() + 10), $("#exclude_at_channels_cb").bind("change", function() {
              TS.prefs.setPrefByAPI({
                name: "mentions_exclude_at_channels",
                value: !$(this).prop("checked")
              });
            }), $("#exclude_at_user_groups_cb").bind("change", function() {
              TS.prefs.setPrefByAPI({
                name: "mentions_exclude_at_user_groups",
                value: !$(this).prop("checked")
              });
            }), $("#mentions_filter_menu_label").addClass("active");
          }
        },
        startWithEditTeamProfileListActions: function(e, t, n) {
          if (!TS.menu.isRedundantClick(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded();
            var i = $(e.target),
              r = TS.team.getTeamProfileFieldById(i.data("id")),
              a = {
                id: r.id,
                hidden: !(!r || !r.is_hidden),
                is_scim: n.is_scim
              };
            TS.menu.clean(), TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(TS.templates.admin_menu_edit_team_profile_list_action_items(a)), TS.menu.$menu_items.on("click.menu", "li", t), TS.menu.start(e), TS.menu.positionAt(i.find('[data-action="edit_team_profile_list_menu"]'), -(TS.menu.$menu.width() + 6), 0), TS.menu.keepInBounds();
          }
        },
        startWithAllUnreadsSortOrderMenu: function(e) {
          if (!TS.menu.isRedundantClick(e) && !TS.client.ui.checkForEditing(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var t = {
              sort_order: TS.client.unread.getSortOrder(),
              is_paid_team: "" !== TS.model.team.plan
            };
            TS.menu.has_submenu = !0, TS.menu.$menu.addClass("all_unreads_sort_order_menu selectable"), TS.menu.$menu_items.html(TS.templates.unread_sort_order_menu(t)), TS.menu.$menu_items.on("click.menu", "li", TS.menu.onAllUnreadsSortOrderMenuItemClick), TS.menu.addSubmenu(".priority", TS.templates.menu_help_submenu({
              icon: "ts_icon_emoji_objects",
              title: TS.i18n.t("Sorted by science", "all_unreads")(),
              message: TS.i18n.t("This sorts your unreads based on how you use Slack.", "all_unreads")()
            }), _.noop, !0), TS.menu.start(e), TS.menu.positionAt($(".channel_header_info_count"), 105, 20);
          }
        },
        onAllUnreadsSortOrderMenuItemClick: function(e) {
          var t = $(e.target).closest("[data-sort-order]");
          if (t.length) {
            var n = t.data("sortOrder");
            if (n === TS.client.unread.getSortOrder()) return void TS.menu.end();
            TS.model.prefs.all_unreads_sort_order = n, TS.prefs.setPrefByAPI({
              name: "all_unreads_sort_order",
              value: n
            }), TS.prefs.all_unreads_sort_order_changed_sig.dispatch(n), TS.client.ui.unread.updateChannelHeader(), TS.client.unread.reload(), TS.menu.end();
          }
        },
        startWithSearchableMemberListFilter: function(e, t, n) {
          if (!TS.menu.isRedundantClick(e) && !TS.client.ui.checkForEditing(e) && !TS.model.menu_is_showing) {
            TS.menu.buildIfNeeded(), TS.menu.clean();
            var i = {
              everyone_count: 0,
              admins_count: 0,
              guests_count: 0,
              enterprise_filter_options: TS.boot_data.page_needs_enterprise,
              is_flannel: TS.lazyLoadMembersAndBots()
            };
            if (TS.boot_data.page_needs_enterprise && _.merge(i, {
                is_enterprise: !0,
                org_name: TS.model.team.enterprise_name,
                team_name: TS.model.team.name,
                everyone_count: 0,
                org_members_count: 0,
                org_admins_count: 0,
                org_guests_count: 0
              }), _.each(t, function(e, t) {
                i[t + "_count"] = e;
              }), TS.boot_data.feature_shared_channels_client) {
              var r = [];
              _.each(t.external_teams, function(e, t) {
                r.push({
                  count: e,
                  id: t,
                  name: TS.teams.getTeamNameById(t)
                });
              }), _.merge(i, {
                ext_teams: r.sort(TS.i18n.mappedSorter("name"))
              });
            }
            TS.menu.$menu.width($(e.target).outerWidth()), TS.menu.$menu.addClass("searchable_member_list_filter_menu"), TS.menu.$menu_items.html(TS.templates.searchable_member_list_filter_items(i)), TS.menu.$menu_items.on("click.menu", "li", function(e) {
              TS.menu.end(), n(e);
            }), TS.menu.start(e), TS.menu.positionAt($(".searchable_member_list_filter"), 16, 56);
          }
        },
        startWithSharedInvitesMenu: function(e) {
          if (!TS.menu.isRedundantClick(e) && !TS.menu.menu_is_showing) {
            TS.menu.buildIfNeeded();
            var t = $(e.target);
            TS.menu.clean(), TS.menu.$menu_items.html(TS.templates.shared_invites_modal()), TS.menu.start(e), t.hasClass("channel_list_add_link_feat_link_in_sidebar") && TS.menu.positionAt(t, 0, -TS.menu.$menu.height() - 16), TS.menu.$menu_items.on("click", '[data-action="admin_invites_modal"]', function() {
              TS.menu.end();
            }), TS.menu.keepInBounds();
          }
        },
        startWithSoundsMenu: function(e, t) {
          if (!TS.menu.isRedundantClick(e) && !TS.menu.menu_is_showing) {
            TS.menu.buildIfNeeded();
            var n = TS.boot_data.notification_sounds;
            n = _.reject(n, {
              value: "none"
            });
            var i = {
              notification_sounds: n
            };
            TS.menu.clean(), TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(TS.templates.menu_sound_items(i)), TS.menu.start(e), TS.menu.$menu_items.on("click.menu", '[data-action="set_sound"]', function(e) {
              var n = $(this).data("sound");
              n && (e.preventDefault(), t(n), TS.menu.end());
            }).on("click.menu", '[data-action="play_sound"]', function(e) {
              var t = $(this).data("sound");
              t && (e.preventDefault(), TS.sounds.play(t, {
                ignore_mute: !0
              }));
            }), TS.menu.keepInBounds();
          }
        },
        startWithGeneric: function(e, t, n) {
          if (!TS.menu.isRedundantClick(e) && !TS.menu.menu_is_showing) {
            TS.menu.buildIfNeeded();
            var i = "";
            _.each(t, function(e) {
              i += TS.templates.menu_generic_item({
                label: e.label,
                value: e.value
              });
            }), TS.menu.clean(), TS.menu.$menu_header.addClass("hidden").empty(), TS.menu.$menu_items.html(i), TS.menu.start(e), TS.menu.$menu_items.on("click.menu", "a[data-value]", function() {
              e.preventDefault(), n($(this).data("value")), TS.menu.end();
            }), TS.menu.keepInBounds();
          }
        },
        positionAt: function(e, t, n) {
          t = t || 0, n = n || 0;
          var i = e.offset(),
            r = i.left + t,
            a = i.top + n;
          TS.menu.$menu.css({
            top: a,
            left: r
          });
        },
        isRedundantClick: function(e) {
          return TS.isPartiallyBooted() ? (e.preventDefault(), TS.incremental_boot.userDidInteractWithUI(), !0) : !(!e || !TS.menu.last_e || e.target != TS.menu.last_e.target && e.currentTarget != TS.menu.last_e.currentTarget);
        },
        isLarge: function() {
          return TS.menu && TS.menu.$menu && TS.menu.$menu.find("li").length > TS.menu.large_dom_trigger;
        },
        start: function(t, i, r) {
          if (r = r || {}, TS.menu.last_e = t, !e) {
            var a = $(t.target).offset(),
              s = a.left + $(t.target).width() + 10,
              o = a.top;
            i && (s = t.pageX + 10, o = t.pageY + 10);
          }
          _.isFunction(r.needs_to_remain_open) && (TS.menu.needs_to_remain_open = r.needs_to_remain_open), $(".tooltip").hide(), TS.tips.hideAll(), $(t.currentTarget).addClass("active"), TS.menu.$target_element = $(t.currentTarget), TS.model.menu_is_showing = !0;
          var l = TS.menu.$menu;
          r.onClose && l.one("closed", r.onClose), r.menu_class && l.addClass(r.menu_class);
          var d = TS.menu.isLarge();
          e || l.css({
            top: o,
            left: s
          });
          var c = l.find("#menu_items_scroller");
          c.scrollTop(0), r.attach_to_target_at_full_width ? TS.menu.$target_element.after(l) : TS.client ? l.appendTo($("#client-ui")) : l.appendTo($("body")), r.keep_menu_open_if_target_clicked_again && TS.menu.$menu.addClass("keep_menu_open_if_target_clicked_again"), d || e ? l.css("opacity", 1) : (l.css("opacity", 0), l.stop().transition({
            opacity: 1
          }, 200)), l.find(".menu_close").on("click", TS.menu.end), r.ignore_bounds || TS.menu.keepInBounds(), TS.ui.utility.updateClosestMonkeyScroller(c, !0), TS.menu.menu_lazy_load && TS.menu.menu_lazy_load.detachEvents && TS.menu.menu_lazy_load.detachEvents(), TS.menu.menu_lazy_load = TS.menu.$menu_items.find(".lazy").lazyload({
            container: $("#menu_items_scroller"),
            all_images_same_size: !0,
            throttle: 250
          }), r.ignore_bounds || $(window).bind("resize", TS.menu.keepInBounds), $(window.document).bind("keydown", TS.menu.onKeyDown), $("html").bind("mousedown touchstart", TS.menu.onMouseDown);
          var u = l.find(".menu_list"),
            m = u.length ? u : l.find("#menu_items");
          TS.menu.has_submenu ? TS.kb_nav.start(m, "li:not(.divider)", l, {
            onLeftKeyDownIfSubmenuExists: TS.menu.onLeftKeyDownIfSubmenuExists,
            onRightKeyDownIfSubmenuExists: TS.menu.onRightKeyDownIfSubmenuExists
          }) : TS.kb_nav.start(m, "li:not(.divider)");
          var p = u.length ? u.first().find("a, button").first() : null;
          TS.ui && TS.ui.a11y && TS.ui.a11y.focusAndAddTabindex(p), e = !1, n = r.on_esc;
        },
        clean: function() {
          TS.menu.$menu_footer.empty(), TS.menu.$menu_header.removeClass("hidden"), TS.menu.$menu.removeClass("no_min_width no_max_width profile_preview flex_menu search_filter_menu popover_menu no_icons team_menu file_menu notifications_menu all_unreads_sort_order_menu searchable_member_list_filter_menu selectable member_file_filter_menu app_card keep_menu_open_if_target_clicked_again member_file_filter_menu").css("max-height", ""), TS.menu.$menu.removeAttr("data-qa"), TS.menu.$menu.find("#menu_items_scroller").css("max-height", ""), TS.menu.$menu.find(".arrow, .arrow_shadow").remove(), TS.menu.$menu_items.off("mouseenter.section_header"), TS.menu.$menu.removeClass("narrow_menu"), TS.menu.$menu_body.off("mouseenter.section_header"), TS.menu.needs_to_remain_open = void 0, TS.menu.$menu.removeClass("date_picker"), TS.boot_data.page_needs_enterprise && (TS.menu.$menu_list_container.html('<div id="menu_list" role="menu"></div>').removeClass("populated"), TS.menu.$menu_list = TS.menu.$menu.find("#menu_list"), TS.menu.$menu.off("keydown", "#file_member_filter .member_filter")), TS.menu.$menu.removeAttr("data-model-ob-id"), TS.menu.$menu.removeAttr("data-thread-ts"), TS.SearchableMemberList && TS.SearchableMemberList.get("member_file_filter_menu") && (TS.menu.$menu.find(".searchable_member_list").remove(), TS.SearchableMemberList.get("member_file_filter_menu").destroy()), TS.menu.$menu.find(".member_item") && (TS.menu.$menu.find(".member_item").remove(), TS.menu.$menu.find(".list_items").css("height", 0)), n = null;
        },
        end: function() {
          if (!_.isFunction(TS.menu.needs_to_remain_open) || !TS.menu.needs_to_remain_open()) {
            TS.menu.$submenu && TS.menu.$submenu_parent && TS.menu.$submenu_parent.submenu("destroy"), TS.menu.$menu.width(""), TS.model.menu_is_showing = !1, TS.menu.menu_items_hidden = !0, TS.menu.has_submenu = !1, TS.menu.$submenu_parent = null, TS.menu.submenu_template_args = {}, TS.menu.did_start_slack_menu_signal_listeners && TS.menu.stopListeningForRebuildWorthiness();
            var t = TS.menu.$menu,
              n = function() {
                TS.model.menu_is_showing || (setTimeout(function() {
                  TS.model.menu_is_showing || (TS.menu.last_e = null);
                }, 50), t.detach(), TS.menu.$menu_header.empty(), TS.menu.$menu_footer.empty(), TS.menu.$menu_items.empty(), TS.menu.$menu_items.removeClass("hidden"), TS.menu.$menu_body.empty(), TS.menu.clean());
              };
            TS.menu.isLarge() || e ? n() : t.stop().transition({
              opacity: 0
            }, 200, n), t.trigger("closed"), TS.menu.$target_element && (TS.menu.$target_element.removeClass("active"), TS.menu.$target_element = null), TS.menu.$secondary_target_element && (TS.menu.$secondary_target_element.removeClass("active"), TS.menu.$secondary_target_element = null), TS.menu.user_group = null, TS.menu.$menu_header.unbind("click.menu"), TS.menu.$menu_items.off("click.menu"), TS.menu.$menu_body.off("click.menu"), $(window).unbind("resize", TS.menu.keepInBounds), $(window.document).unbind("keydown", TS.menu.onKeyDown), $("html").unbind("mousedown touchstart", TS.menu.onMouseDown), TS.members.view.team_filter_changed_sig.remove(TS.kb_nav.clearHighlightedItem), $(".file_list_item.active").removeClass("active"), TS.tips.unhideAll(), TS.menu.search_filter_is_showing = !1, $("#search_filter_menu_label").removeClass("active"), $("#mentions_filter_menu_label").removeClass("active"), $("#flex_menu_toggle").removeClass("menu_open"), $("#channel_actions_toggle").removeClass("active"), TS.boot_data.feature_texty_takes_over && $("#menu_member_dm_input").length && TS.utility.contenteditable.unload($("#menu_member_dm_input")), t.removeClass("narrow_menu"), setTimeout(function() {
              TS.menu.file.file_list_menu_up = !1, $(".inline_file_preview_container.file_menu_open, .file_container.file_menu_open").removeClass("file_menu_open");
            }, 100), TS.menu.menu_lazy_load && TS.menu.menu_lazy_load.detachEvents && (TS.menu.menu_lazy_load.detachEvents(), TS.menu.menu_lazy_load = null), TS.kb_nav.end(), TS.client && "team" !== TS.model.ui.active_tab_id && "details" !== TS.model.ui.active_tab_id && TS.client.flex_pane.stopLocalTimeInterval(), TS.menu.menu_closed_sig.dispatch();
          }
        },
        onKeyDown: function(e) {
          var t = TS.utility.keymap,
            i = e.which,
            r = e.metaKey || e.ctrlKey || e.altKey;
          if (i == t.esc) {
            if (TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.hasFocus($("#menu_member_dm_input"))) return;
            e.stopPropagation(), e.preventDefault(), TS.menu.end(), n && n();
          } else r || TS.utility.isArrowKey(i) || i == t.tab || i == t.enter || (TS.kb_nav.clearHighlightedItem(), TS.utility.contenteditable.focus($("#menu_member_dm_input")));
        },
        onLeftKeyDownIfSubmenuExists: function() {
          var e = !1;
          if (TS.menu.$submenu && TS.menu.$submenu.hasClass("kb_active")) {
            TS.menu.$submenu.removeClass("kb_active"), TS.kb_nav.end(), TS.kb_nav.highlightItemWithKey(TS.menu.$submenu_origin);
            var t = TS.menu.$menu.find(".menu_list"),
              n = t.length ? t : TS.menu.$menu.find("#menu_items");
            TS.kb_nav.start(n, "li:not(.divider)", TS.menu.$menu, {
              onLeftKeyDownIfSubmenuExists: TS.menu.onLeftKeyDownIfSubmenuExists,
              onRightKeyDownIfSubmenuExists: TS.menu.onRightKeyDownIfSubmenuExists
            }), -1 === ["member_current_status_item", "switch_teams"].indexOf(TS.menu.$submenu_origin.attr("id")) && TS.menu.$submenu_origin.submenu("destroy"), e = !0;
          }
          return e;
        },
        onRightKeyDownIfSubmenuExists: function() {
          var e = !1;
          return TS.kb_nav.getHighlightedItem() && TS.kb_nav.getHighlightedItem().data("has-submenu") && (TS.menu.$submenu || TS.kb_nav.getHighlightedItem().submenu({
            items_html: TS.templates.snooze_items(),
            onclick: TS.menu.onNotificationsMenuItemClick
          })), TS.menu.$submenu && (TS.menu.$submenu.hasClass("kb_active") ? (TS.menu.$submenu.removeClass("kb_active"), TS.menu.end()) : (TS.menu.$submenu.addClass("kb_active"), TS.kb_nav.end(), TS.kb_nav.highlightItemWithKey(TS.menu.$submenu.find("li:not(.divider)").first()), TS.kb_nav.start(TS.menu.$submenu.find("ul"), "li:not(.divider)", TS.menu.$submenu, {
            onLeftKeyDownIfSubmenuExists: TS.menu.onLeftKeyDownIfSubmenuExists,
            onRightKeyDownIfSubmenuExists: TS.menu.onRightKeyDownIfSubmenuExists
          })), e = !0), e;
        },
        onMouseDown: function(e) {
          var t = $(e.target);
          TS.menu.$menu && TS.menu.$menu.hasClass("keep_menu_open_if_target_clicked_again") && t.is(TS.menu.$target_element) || (0 === t.closest("#menu, .submenu, .trap_menu_clicks").length || t.hasClass("popover_mask")) && TS.menu.end();
        },
        keepInBounds: function() {
          window.requestAnimationFrame ? TS.utility.rAF(TS.menu.keepInBoundsThrottled) : TS.menu.keepInBoundsThrottled();
        },
        keepInBoundsThrottled: function() {
          var e = TS.menu.$menu,
            t = e.dimensions_rect(),
            n = {
              top: 10,
              right: $(window).width() - 10,
              bottom: $(window).height() - 24,
              left: 10
            };
          TS.utility.doesRectContainRect(n, t) || (t.left < n.left ? e.css("left", n.left) : t.right > n.right && e.css("left", Math.max(n.left, n.right - t.width)), t.top < n.top ? e.css("top", n.top) : t.bottom > n.bottom && e.css("top", Math.max(n.top, n.bottom - t.height + $(window).scrollTop())));
        },
        addSubmenu: function(e, t, n, i) {
          var r = TS.menu.$menu_items.find(e);
          r.on("highlighted", function() {
            r.submenu({
              items_html: t,
              onclick: n,
              help: i
            });
          }).on("unhighlighted", function() {
            TS.menu.$submenu && !TS.menu.$submenu.hasClass("kb_active") && r.submenu("destroy");
          });
        },
        _registerCurrentStatusInput: function() {
          TS.menu._unregisterCurrentStatusInput(), TS.menu._current_status_input = new TS.ui.CurrentStatusInput({
            $parent: $("#slack_menu_current_status_submenu"),
            onEscape: TS.menu.end,
            onSave: TS.menu.end
          }), TS.menu.$menu_body.find("#member_current_status_item").on("click.current_status_item", function() {
            TS.menu._current_status_input && TS.menu._current_status_input.focus();
          });
        },
        _unregisterCurrentStatusInput: function() {
          TS.menu._current_status_input && (TS.menu._current_status_input.destroy(), TS.menu._current_status_input = null), TS.menu.$menu_body.find("#member_current_status_item").off(".current_status_item");
        }
      });
      var e = !1,
        t = function(e) {
          TS.help_modal.start(), TS.clog.track("HELP_MODAL_ACTION", {
            action: "open_modal",
            trigger: e
          });
        },
        i = function() {
          var e = TS.menu.$menu;
          e.addClass("popover_menu"), e.prepend('<span class="arrow"></span><span class="arrow_shadow"></span>');
        },
        r = function(e) {
          var t = TS.menu.$target_element.outerHeight() + 3,
            n = 0;
          return e && (n = TS.menu.$target_element.outerWidth() - TS.menu.$menu.outerWidth()), {
            left: n,
            top: t
          };
        },
        a = function(e, t, n) {
          if (TS.model.menu_is_showing) {
            var i = $("#toggle-subscription-status");
            i.attr("data-model-ob-id") === e && i.attr("data-msg-ts") === t && (i.attr("data-subscribed", n.subscribed), i.removeClass("disabled"), TS.menu.keepInBounds());
          }
        };
      $.widget("TS.submenu", {
        _create: function() {
          this.element.data("has-submenu", !0);
          var e = TS.i18n.t("submenu", "menu_source")(),
            t = '<div class="menu submenu' + (this.options.help ? " submenu_help" : "") + '" data-origin-id="' + this.element.attr("id") + '" data-model-ob-id="' + this.element.data("modelObId") + '"><ul aria-hidden="true" aria-label="' + e + '">' + this.options.items_html + "</ul></div>",
            n = TS.menu.$menu.offset().left + TS.menu.$menu.width() + 7,
            i = this.element.offset().top - 11;
          if (this.$submenu = $(t), this.$submenu.appendTo("body"), TS.menu.$submenu = this.$submenu, TS.menu.$submenu_origin = this.element, n + this.$submenu.width() > window.innerWidth) {
            TS.menu.$menu.offset().left - 7 > window.innerWidth - n && (n = TS.menu.$menu.offset().left - this.$submenu.width() - 7);
          }
          if (i + this.$submenu.height() > window.innerHeight) {
            i > window.innerHeight - i && (i = window.innerHeight - this.$submenu.height() - 11);
          }
          this.$submenu.css({
            position: "absolute",
            left: n + "px",
            top: i + "px"
          });
          var r = this.options.onclick;
          r && this.$submenu.on("click", function(e) {
            r.call(this, e);
          });
        },
        _destroy: function() {
          TS.menu.$submenu = null, TS.menu.$submenu_origin = null, this.options.ondestroy && this.options.ondestroy(), this.$submenu.remove();
        }
      });
    }();
    var n;
  },
  2485: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("mpims", {
        switched_sig: new signals.Signal,
        pre_switched_sig: new signals.Signal,
        joined_sig: new signals.Signal,
        member_joined_sig: new signals.Signal,
        history_fetched_sig: new signals.Signal,
        history_being_fetched_sig: new signals.Signal,
        message_received_sig: new signals.Signal,
        message_removed_sig: new signals.Signal,
        message_changed_sig: new signals.Signal,
        marked_sig: new signals.Signal,
        closed_sig: new signals.Signal,
        unread_changed_sig: new signals.Signal,
        unread_highlight_changed_sig: new signals.Signal,
        opened_sig: new signals.Signal,
        msg_not_sent_sig: new signals.Signal,
        data_retention_changed_sig: new signals.Signal,
        onStart: function() {
          TS.prefs.display_real_names_override_changed_sig.add(s), TS.prefs.team_display_real_names_changed_sig.add(s), TS.members.changed_profile_sig.add(a);
        },
        getVisibleMpims: function(e) {
          return e || (e = TS.model.mpims), e.filter(function(e) {
            return !!e.is_open || (!!e.is_starred || (!!e.unread_cnt || !!(e.latest || e.msgs && e.msgs.length) && ((!e.members || 2 !== e.members.length) && (TS.model.user.is_ultra_restricted, !0))));
          });
        },
        addMsg: function(e, t) {
          var n = TS.mpims.getMpimById(e);
          if (!n) return void TS.error('unknown mpim "' + e + '"');
          if (TS.shared.addMsg(n, t)) {
            var i = !TS.utility.msgs.isTempMsg(t);
            if (TS.mpims.calcUnreadCnts(n, i), TS.utility.msgs.maybeTruncateMsgs(n), TS.mpims.message_received_sig.dispatch(n, t), !n.is_open && TS.utility.msgs.msgCanCountAsUnread(t))
              if (1 == n.members.length) {
                var r = n.members[0];
                TS.api.call("im.open", {
                  user: r,
                  return_im: !0,
                  reason: "TS.mpims.addMsg"
                }, TS.ims.onOpened);
              } else if (n.members.length > 1) {
              var a = n.members.join(",");
              TS.api.call("mpim.open", {
                users: a
              }, TS.mpims.onOpened);
            }
          }
        },
        calcUnreadCnts: function(e, t) {
          TS.shared.calcUnreadCnts(e, TS.mpims, t);
        },
        removeMsg: function(e, t) {
          var n = TS.mpims.getMpimById(e);
          if (!n) return void TS.error('unknown mpim "' + e + '"');
          n._archive_msgs && TS.utility.msgs.spliceMsg(n._archive_msgs, t);
          var i = n.msgs;
          TS.utility.msgs.spliceMsg(i, t), TS.mpims.message_removed_sig.dispatch(n, t), TS.mpims.calcUnreadCnts(n, !0);
        },
        sendMsg: function(e, t, n, i) {
          return TS.shared.sendMsgGroup(e, t, TS.mpims, n, i);
        },
        onSendMsg: function(e, t) {
          var n = TS.mpims.getMpimById(t.SENT_MSG.channel);
          if (!n) return void TS.error("unknown mpim? " + t.SENT_MSG.channel);
          TS.shared.onSendMsg(e, t, n, TS.mpims);
        },
        closeMpim: function(e) {
          TS.mpims.getMpimById(e) && TS.api.call("mpim.close", {
            channel: e
          }, TS.mpims.onClosed);
        },
        onClosed: function(e, t, n) {
          if (e && t.no_op) {
            var i = TS.mpims.getMpimById(n.channel);
            i && TS.mpims.closed_sig.dispatch(i);
          }
        },
        startMpimWithMembers: function(e, t) {
          var n = e.map(function(e) {
            return e.id;
          });
          n = n.join(","), TS.api.call("mpim.open", {
            users: n
          }, function(e, n, i) {
            if (n.group) {
              var r = TS.mpims.upsertMpim(n.group);
              r ? TS.mpims.displayMpim({
                id: r.id
              }) : TS.error("no mpim?!?");
            }
            t && t(e, n, i);
          });
        },
        onOpened: function(e) {},
        displayMpim: function(e) {
          var t = _.defaults({}, e, {
              from_history: !1,
              replace_history_state: !1
            }),
            n = t.id;
          if (!n) return void TS.error("no mpim id supplied");
          var i = t.path,
            r = t.and_send_txt,
            a = t.from_history,
            s = t.replace_history_state;
          if (TS.isPartiallyBooted() && n !== TS.model.initial_cid) return TS.warn("Can't switch model objects during incremental boot; this is a programming error"), void TS.sounds.play("beep");
          TS.metrics.mark("start_channel_change_" + n);
          var o = TS.mpims.getMpimById(n);
          if (!o) return void TS.error('mpim "' + n + '" unknown');
          if (TS.utility.msgs.maybeClearPrevLastRead(), TS.utility.msgs.maybeClearPrevLastRead(o), TS.shared.maybeClearHasAutoScrolled(), TS.shared.didDeferMessageHistoryById(o.id) && TS.shared.checkInitialMsgHistory(o, TS.mpims), n == TS.model.active_mpim_id && !s && !TS.client.activeChannelIsHidden()) return TS.warn('mpim "' + n + '" already displayed'), void(r && TS.mpims.sendMsg(n, $.trim(r)));
          var l = !s && a,
            d = i || "/messages/" + o;
          if (TS.client.channelDisplaySwitched({
              id: n,
              path: d,
              replace_history_state: s,
              no_history_add: l
            }) && (TS.mpims.pre_switched_sig.dispatch(), TS.mpims.switched_sig.dispatch()), o.is_open) return void(r && TS.mpims.sendMsg(n, $.trim(r)));
          TS.model.requested_mpim_opens[n] = {
            and_send_txt: r
          };
          var c = o.members.filter(function(e) {
            return TS.model.user.id !== e;
          });
          TS.api.call("mpim.open", {
            users: c.join(",")
          }, TS.mpims.onOpened);
        },
        setLastRead: function(e, t, n) {
          if (e.last_read == t) return !1;
          if (t.indexOf(TS.utility.date.fake_ts_unique_padder) > -1) return TS.error("bad ts:" + t), !1;
          var i = e.id + ". last_read = " + e.last_read + " -> " + t + ", reason: " + (n || "unspecified");
          if (e.last_read > t) {
            var r = TS.model.last_reads_set_by_client[e.id + "_" + t];
            if (delete TS.model.last_reads_set_by_client[e.id + "_" + t], r) return void TS.warn("NOT going back in time on mpim " + i);
            TS.has_pri[p] && TS.log(p, "going back in time on mpim " + i), TS.utility.msgs.maybeClearPrevLastRead(e), TS.utility.msgs.setPrevLastRead(e, t);
          } else TS.has_pri[p] && TS.log(p, "TS.mpims.setLastRead: " + i), TS.utility.msgs.maybeClearPrevLastRead(e), TS.utility.msgs.maybeSetPrevLastRead(e, t);
          return e.last_read = t, n && (e._marked_reason = n), TS.mpims.marked_sig.dispatch(e), TS.utility.msgs.maybeClearUsersCountsInfo(e), TS.mpims.calcUnreadCnts(e), !0;
        },
        markMostRecentReadMsg: function(e, t, n) {
          if (!e) return void TS.error("mpim unknown");
          if (e.msgs && e.msgs.length || n) {
            var i = TS.utility.msgs.getMostRecentValidTs(e);
            if (!i) return void((e.msgs && e.msgs.length || !e._latest_via_users_counts) && TS.warn('no valid tses for mpim "' + e.id + '"???'));
            TS.mpims.markReadMsg(e.id, i, t);
          }
        },
        markReadMsg: function(e, t, n) {
          var i = TS.mpims.getMpimById(e);
          if (!i) return void TS.error('mpim "' + e + '" unknown');
          if (i.last_read != t && TS.mpims.setLastRead(i, t, n))
            if (i._marked_reason = n, TS.useRedux()) {
              TS.redux.channels.setMarkingState(i.id, !0);
            } else i.needs_api_marking = !0;
        },
        onMarked: function(e, t, n) {
          var i = TS.mpims.getMpimById(n.channel);
          if (!i) return void TS.error('error no mpim "' + n.channel + '"');
          if (!e)
            if (TS.useRedux()) {
              TS.redux.channels.setMarkingState(i.id, !0);
            } else i.needs_api_marking = !0;
        },
        getMpimsFilteredBy: function(e) {
          return TS.shared.getEntitiesFilteredBy("mpims", e);
        },
        getMpimById: function(t) {
          if (!t) return null;
          if (TS.useRedux()) return TS.redux.channels.getMpimById(t);
          var n = TS.model.mpims,
            i = e[t];
          if (i) return i;
          if (!n) return null;
          for (var r = 0; r < n.length; r += 1)
            if (i = n[r], i.id == t) return TS.warn(t + " not in _id_map?"), e[t] = i, i;
          return null;
        },
        getMpimByName: function(e) {
          if (TS.useRedux()) return TS.redux.channels.getMpimByName(e);
          e = _.toLower(e);
          var n = TS.model.mpims,
            i = t[e];
          if (i) return i;
          if (!n) return null;
          for (var r = 0; r < n.length; r += 1)
            if (i = n[r], i._name_lc == e) return TS.warn(e + " not in _name_map?"), t[i._name_lc] = i, t[i._internal_name] = i, i;
          return null;
        },
        getActiveMembers: function(e) {
          return TS.mpims.getMembersInDisplayOrder(e).filter(function(e) {
            return !e.deleted;
          });
        },
        getMembersInDisplayOrder: function(e) {
          if (e) return e._members && e._members.length === e.members.length - 1 ? e._members : (e._members = _.without(e.members, TS.model.user.id).map(function(e) {
            var t = TS.members.getMemberById(e);
            return t || TS.warn("Could not find a member in model with id: " + e), t;
          }), _.compact(e._members));
        },
        getDisplayName: function(e, t, n, i, r) {
          var a = _.isInteger(i);
          if (e._display_name && !t && !n && !a && !r) return e._display_name;
          if (e._display_name_truncated && !t && !n && !r && a) return e._display_name_truncated;
          if (r) return c(e);
          if (TS.boot_data.feature_name_tagging_client) return d(e, t);
          var s = TS.mpims.getMembersInDisplayOrder(e),
            o = TS.members.shouldDisplayRealNames(),
            u = _.compact(s),
            m = s.length - u.length;
          if (m) {
            var p = _(u).map("id").value().join(",");
            TS.warn("TS.mpims.getDisplayName(): Missing " + m + " members. Valid IDs = " + p), s = u;
          }
          var f = {};
          o && s.forEach(function(e) {
            e.profile.first_name && (f[e.profile.first_name] || (f[e.profile.first_name] = []), f[e.profile.first_name].push(e));
          });
          var h, g = s.map(function(e) {
            var i = "";
            if ((TS.members.getMemberCurrentStatus(e).emoji || TS.members.getMemberCurrentStatus(e).text) && (i = " " + TS.templates.current_status({
                tip_direction: "bottom",
                member: e,
                classes: "ts_tip_float"
              })), e.profile.first_name && o) {
              var r = $.trim(e.profile.first_name),
                a = $.trim(e.profile.last_name),
                s = r;
              return a && (f[r] && f[r].length > 1 || n) && (s += " " + l(a) + "."), t && (s = _.escape($.trim(s)), s = '<span class="mpdm_member ' + TS.templates.makeMemberDomId(e) + " " + TS.templates.makeMemberPresenceStateClass(e) + '" data-member-id="' + e.id + '">' + s + i + "</span>"), s;
            }
            var d = $.trim(e.name);
            return t && (d = _.escape(d), d = '<span class="mpdm_member ' + TS.templates.makeMemberDomId(e) + " " + TS.templates.makeMemberPresenceStateClass(e) + '" data-member-id="' + e.id + '">' + d + i + "</span>"), d;
          });
          if (a && t) h = g.slice(0, i).join(" ");
          else if (t) h = g.join(" ");
          else if (a && g.length > i + 1) {
            var S = g.splice(0, i);
            h = TS.i18n.t("{names} and {others_count, number} others", "mpims")({
              names: S.join(", "),
              others_count: g.length
            });
          } else h = g.join(", ");
          return t || n || a || (e._display_name = h), t || n || !a || (e._display_name_truncated = h), h;
        },
        getDisplayNameLowerCase: function(e) {
          if (e._display_name_lc) return e._display_name_lc;
          var t = TS.mpims.getDisplayName(e);
          return e._display_name_lc = _.toLower(t), e._display_name_lc;
        },
        getTooltipText: function(e) {
          var t = TS.mpims.getMembersInDisplayOrder(e),
            n = t.map(function(e) {
              return e.profile.real_name ? e.profile.real_name : e.name;
            }),
            i = n.join(", ");
          return i === TS.mpims.getDisplayName(e) ? "" : i;
        },
        getMpimArchivesPath: function(e) {
          return "/archives/" + e.id;
        },
        getMemberCount: function(e) {
          return Math.min(Math.max(e.members.length - 1, 2), 9);
        },
        upsertMpim: function(t, n) {
          var i = TS.mpims.getMpimById(t.id);
          if (delete t.unread_count, i) {
            TS.useRedux() && (i = _.assign({}, i)), TS.has_pri[m] && TS.log(m, 'updating existing mpim "' + i.id + '"');
            for (var r in t) "name" !== r && (i[r] = t[r]);
            if (t = i, TS.isPartiallyBooted() && null === t.oldest_msg_ts && (t.oldest_msg_ts = TS.storage.fetchOldestTs(t.id)), TS.shared.maybeResetHistoryFetched(i), TS.client && (t.is_open || t.unread_cnt)) {
              TS.shared.checkInitialMsgHistory(t, TS.mpims, !0);
            }
            TS.useRedux() && (n || TS.redux.channels.replaceEntity(t));
          } else TS.useRedux() || (TS.has_pri[m] && TS.log(m, 'adding mpim "' + t.id + '"'), TS.model.mpims.push(t)), TS.utility.ensureInArray(TS.model.all_group_ids, t.id), u(t), TS.useRedux() ? n || TS.redux.channels.addEntity(t) : e[t.id] = t;
          if (TS.client) {
            var a = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(t);
            TS.model.active_cid == t.id ? TS.mpims.calcUnreadCnts(t, a) : i || TS.mpims.calcUnreadCnts(t, a);
          }
          return t;
        },
        processNewMpimForUpserting: function(e) {
          u(e);
        },
        markScrollTop: function(e, t) {
          var n = TS.mpims.getMpimById(e);
          return !!n && (n.scroll_top != t && (n.scroll_top = t, !0));
        },
        maybeLoadScrollBackHistory: function(e, t) {
          var n = TS.mpims.getMpimById(e);
          return !!n && TS.shared.maybeLoadScrollBackHistory(n, TS.mpims, t);
        },
        onHistory: function(e, t, n) {
          var i = TS.mpims.getMpimById(n.channel);
          if (!i) return void TS.error('error no mpim "' + n.channel + '"');
          if (!e || !t || !t.messages) {
            TS.error("failed to get history for mpim " + n.channel), i.history_is_being_fetched = !1, i.history_fetch_retries = (i.history_fetch_retries || 0) + 1;
            var r = _.random(2500, 5e3);
            return TS.info("retrying history fetch on mpim " + i.id + " in " + r), void window.setTimeout(function() {
              TS.info("retrying history fetch on mpim " + i.id + ", attempt #" + (i.history_fetch_retries || "1")), TS.ims.fetchHistory(i, n, TS.mpims.onHistory);
            }, r);
          }
          i.history_fetch_retries = 0;
          var a = TS.shared.onHistory(i, t, n, TS.mpims);
          a || (i.history_is_being_fetched = !1, TS.mpims.history_fetched_sig.dispatch(i));
          var s = TS.utility.msgs.shouldMarkUnreadsOnMessageFetch(i);
          TS.mpims.calcUnreadCnts(i, s), TS.view && !a && i.unread_cnt && TS.client.channel_pane.rebuild("ims");
        },
        fetchHistory: function(e, t, n) {
          return e ? (TS.boot_data.feature_initial_scroll_position || TS.shared.maybeClearHasAutoScrolled(e), e.history_is_being_fetched = !0, e.history_fetch_failed = !1, TS.mpims.history_being_fetched_sig.dispatch(e), e.history_fetch_retries > 5 ? (e.history_fetch_retries = 0, e.history_is_being_fetched = !1, e.history_fetch_failed = !0, void(TS.client && TS.client.msg_pane.updateEndMarker())) : void TS.api.call("mpim.history", t, n || TS.mpims.onHistory)) : void TS.error('error no mpim "' + e + '"');
        },
        setNamesFromMember: function(e) {
          TS.model.mpims.forEach(function(t) {
            _.includes(t.members, e.id) && (r(t), o(t));
          });
        },
        checkMpimMatch: function(e, t, n) {
          if (e) {
            for (var i = !0, r = TS.mpims.getMembersInDisplayOrder(e), a = 0; a < t.length; a += 1) {
              for (var s = !1, o = 0; o < r.length; o += 1)(TS.utility.members.checkMemberMatch(r[o], t[a], !0) || n && TS.utility.members.checkMemberMatch(r[o], n[a], !0)) && (s = !0);
              s || (i = !1);
            }
            return i;
          }
        },
        setDataRetention: function(e, t, n, i) {
          var r = {
            channel: e,
            retention_type: $("select[name=retention_type]").val()
          };
          1 == r.retention_type && (r.retention_duration = $("#retention_duration").val()), TS.api.call("mpim.setRetention", r, function(e, t, n) {
            i && i(e, t, n), e && TS.mpims.data_retention_changed_sig.dispatch(n);
          });
        },
        getDataRetention: function(e, t) {
          TS.api.call("mpim.getRetention", {
            channel: e
          }, t);
        },
        convertToGroup: function(e, t, n) {
          n = n || {};
          var i = e.id;
          return TS.api.call("mpim.convertToGroup", {
            channel: i,
            name: t,
            validate: !!n.validate_name
          });
        }
      });
      var e = {},
        t = {},
        n = !1,
        i = function(e) {
          var t = TS.mpims.getMembersInDisplayOrder(e);
          if (t.length < 2) return e._internal_name;
          if (_.compact(t).length < t.length) {
            var i = _(t).compact().map("id").value(),
              r = _.without(e.members, i);
            TS.warn("Missing some members in MPIM " + e.id + ":" + r.join(","));
            var a = _.reject(r, TS.members.getMemberById);
            a.length > 0 ? TS.warn("Some members (" + a.join(",") + ") were still unavailable when we tried again; unable to recover") : (TS.info("All members were available when we tried again; recovering"), e._members = void 0, t = TS.mpims.getMembersInDisplayOrder()), n || (n = !0, TS.console.logStackTrace("We are somehow trying to generate a name for an mpim without having all members locally. Here's a stack trace"), TS.boot_data.feature_tinyspeck ? TS.metrics.count("mpim_missing_members_bug_ts_only") : TS.metrics.count("mpim_missing_members_bug"));
          }
          return "@" + _(t).compact().map(function(e) {
            return TS.utility.teams.isMemberExternal(e) ? e.name + "_" + e.team_id : e.name;
          }).value().join(",");
        },
        r = function(e) {
          e._name_lc && (TS.useRedux() ? TS.redux.channels.removeEntityFromNameMap(e._name_lc) : delete t[e._name_lc]), e.name = i(e), e._name_lc = _.toLower(e.name), TS.useRedux() ? TS.redux.channels.addEntityToNameMap(e) : t[e._name_lc] = e;
        },
        a = function(e) {
          TS.model.mpims.forEach(function(t) {
            -1 !== t.members.indexOf(e.id) && o(t);
          });
        },
        s = function() {
          TS.model.mpims.forEach(o);
        },
        o = function(e) {
          e._display_name = void 0, e._display_name_lc = void 0;
        },
        l = function(e) {
          var t, n = e.charCodeAt(0);
          return n >= 55296 && n <= 56319 && e.length > 1 && (t = e.charCodeAt(1)) >= 56320 && t <= 57343 ? e.substring(0, 2) : e.substring(0, 1);
        },
        d = function(e, t) {
          var n = TS.mpims.getMembersInDisplayOrder(e),
            i = n.map(function(e) {
              var n = TS.members.getPrefCompliantMemberName(e);
              if (t) {
                var i = "";
                (TS.members.getMemberCurrentStatus(e).emoji || TS.members.getMemberCurrentStatus(e).text) && (i = " " + TS.templates.current_status({
                  tip_direction: "bottom",
                  member: e,
                  classes: "ts_tip_float"
                })), n = _.escape($.trim(n)), n = '<li class="mpdm_member ' + TS.templates.makeMemberDomId(e) + " " + TS.templates.makeMemberPresenceStateClass(e) + '" data-member-id="' + e.id + '">' + n + i + "</li>";
              }
              return n;
            }),
            r = t ? i.join(" ") : i.join(", ");
          return t || (e._display_name = r), r;
        },
        c = function(e) {
          var t = TS.mpims.getMembersInDisplayOrder(e),
            n = t.map(function(e) {
              return TS.members.getPrefCompliantMemberName(e);
            });
          return TS.i18n.listify(n, {
            strong: !0
          }).join("");
        },
        u = function(e) {
          e._internal_name = e.name, TS.useRedux() || (t[e._internal_name] = e), r(e), TS.shared.setPriorityForDev(e), e.is_mpim = !0, e.opened_this_session = !1, e.scroll_top = -1, e.history_is_being_fetched = !1, TS.useRedux() || (e.needs_api_marking = !1), e.unread_highlight_cnt = 0, e.unread_highlights = [], e.unread_cnt = 0, e.unreads = [], TS.shared.setOldestUnreadTsForId(e.id, null), e.has_fetched_history_after_scrollback = !1, TS.client ? (TS.shared.maybeResetHistoryFetched(e), TS._incremental_boot && e.msgs && e.msgs.length > 0 ? (e.msgs = e.msgs.map(function(t) {
            return TS.utility.msgs.processImsg(t, e.id);
          }), TS.utility.msgs.setMsgs(e, e.msgs)) : TS.utility.msgs.setMsgs(e, [])) : TS.boot_data.msgs && TS.utility.msgs.ingestMessagesFromBootData(e), e.oldest_msg_ts = TS.storage.fetchOldestTs(e.id), e.last_msg_input = TS.storage.fetchLastMsgInput(e.id), e.has_draft = !!e.last_msg_input;
        },
        m = 4,
        p = 142;
    }();
  },
  2486: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ms.flannel", {
        isFlannelMessage: function(e) {
          return "flannel" === e.type;
        },
        call: function(t, n, i) {
          if (_.isUndefined(i) && (i = 1), !_.isNumber(i) || i < 1) throw new Error("Invalid value for attempt_number");
          var r = {
            type: "flannel",
            subtype: t
          };
          if (_.isObject(n)) {
            if (n.hasOwnProperty("type") || n.hasOwnProperty("subtype")) throw new Error("Arguments must not include `type` or `subtype` fields");
            _.merge(r, n);
          }
          if (!TS.useSocket()) return Promise.reject(new Error("Flannel queries are not available on this page"));
          if (!(TS.isSocketManagerEnabled() ? TS.interop.SocketManager.hasOpenWebSocket() : TS.ms.hasOpenWebSocket())) {
            TS.log(1989, "Flannel: received a " + t + " call while we are not connected; deferring");
            var a = arguments;
            return (TS.isSocketManagerEnabled() ? TS.interop.SocketManager.promiseToHaveOpenWebSocket() : TS.ms.promiseToHaveOpenWebSocket()).then(function() {
              return TS.log(1989, "Flannel: connected! Continuing deferred " + t + " call"), TS.ms.flannel.call.apply(this, a);
            }.bind(this));
          }
          return new Promise(function(a, s) {
            var o = function() {
              if (i < e) return TS.log(1989, "Flannel: retrying " + t + " call; attempt #" + i + " of " + e), TS.ms.flannel.call(t, n, i + 1).then(a).catch(s);
              TS.log(1989, "Flannel: giving up on " + t + " call"), s(new Error("Lost Flannel connection"));
            };
            TS.isSocketManagerEnabled() ? (TS.interop.SocketManager.disconnectedSig.addOnce(o), TS.interop.SocketManager.send(r).then(function(e) {
              Promise.delay(0).then(function() {
                a(e);
              });
            }).catch(function() {
              var e = new Error("Flannel call failed");
              e.imsg = r, s(e);
            }).finally(function() {
              TS.interop.SocketManager.disconnectedSig.remove(o);
            })) : (TS.ms.disconnected_sig.addOnce(o), TS.ms.send(r, function(e, t) {
              if (TS.ms.disconnected_sig.remove(o), e) Promise.delay(0).then(function() {
                a(t);
              });
              else {
                var n = new Error("Flannel call failed");
                n.imsg = t, s(n);
              }
            }));
          });
        }
      });
      var e = 3;
    }();
  },
  2487: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("ms.msg_handlers", {
        onStart: function() {
          M = window.performance && TS.boot_data && TS.boot_data.feature_ms_msg_handlers_profiling, TS.client && TS.client.stats && (TS.client.stats.start_collecting_sig.add(function() {
            t = TS.boot_data.feature_queue_metrics && TS.utility.enableFeatureForUser(D), B.enableStatsCollecting();
          }), TS.client.stats.stop_collecting_sig.add(function() {
            t = !1, B.disableStatsCollecting();
          })), TS.isSocketManagerEnabled() ? (TS.interop.SocketManager.socketMessageReceivedSig.add(TS.ms.msg_handlers.msgReceived), TS.interop.Eventlog.messageReceivedSig.add(TS.ms.msg_handlers.msgReceived), TS.interop.SocketManager.connectedSig.add(function() {
            TS.boot_data.feature_tinyspeck && setTimeout(function() {
              o.length > 50 && (TS.warn("Looks like our msg_handlers queue might be wedged (it has " + o.length + " items in it). Kicking it and prompting user to send logs."), u(), TS.generic_dialog.alert("Hello! It looks like you may have run into a bug that @shinypb is tracking. Would you mind saving your console logs and then DMing them to him?"));
            }, 3e4);
          })) : TS.ms.on_msg_sig.add(TS.ms.msg_handlers.msgReceived);
        },
        debugGetQueueSize: function() {
          return o.length;
        },
        test: function() {
          var e = {};
          return Object.defineProperty(e, "_is_batch_upserting_users", {
            get: function() {
              return r;
            },
            set: function(e) {
              r = e;
            }
          }), e;
        },
        msgReceivedFromParentWindow: function(e) {
          TS.ms.msg_handlers.msgReceived(e);
        },
        msgReceived: function(e) {
          M && (O += 1, F || (F = Date.now())), e.reply_to || TS.ms.msg_handlers[e.type] && c(e);
        },
        message: function(e) {
          if (TS.client) {
            TS.has_pri[R] && TS.log(R, "recved message type " + e.type), e.is_ephemeral && !e.ts && (e.ts = TS.utility.date.makeTsStamp());
            var t, n = "subtype__" + e.subtype;
            if (n in TS.ms.msg_handlers) {
              if (TS.boot_data.feature_channel_eventlog_client) {
                if ("message_changed" === e.subtype || "message_deleted" === e.subtype || "channel_history_changed" === e.subtype || "group_history_changed" === e.subtype || "im_history_changed" === e.subtype || "mpim_history_changed" === e.subtype || "message_replied" === e.subtype) return e.type = e.subtype, delete e.subtype, M && (t = B.start(e.type)), TS.ms.msg_handlers[e.type](e), void(t && t());
                e.hidden && (TS.console.error(2, "WE SHOULD NOT BE GETTING ANY HIDDEN MESSAGES ANYMORE"), TS.console.dir(2, 0, e));
              }
              M && (t = B.start(n)), TS.ms.msg_handlers[n](e), t && t();
            }
            M && (t = B.start(e.type));
            var i = TS.utility.msgs.processImsg(e, e.channel);
            TS.ims.getImById(e.channel) ? ("start_profile_AAAAAA" === e.text ? TS.model.profiling_keys = !0 : "end_profile_AAAAAA" === e.text && (TS.model.profiling_keys = !1, TS.model.profiling_key_times && (TS.files.upload({
              text: JSON.stringify(TS.model.profiling_key_times, null, "\t"),
              title: "auto profile",
              filetype: "javascript",
              channels: [e.channel],
              initial_comment: ""
            }), delete TS.model.profiling_key_times)), TS.ims.addMsg(e.channel, i)) : TS.mpims.getMpimById(e.channel) ? TS.mpims.addMsg(e.channel, i) : TS.groups.getGroupById(e.channel) ? TS.groups.addMsg(e.channel, i) : TS.channels.addMsg(e.channel, i);
            var r = TS.shared.getModelObById(e.channel),
              a = TS.members.getMemberById(i.user);
            TS.typing && a && r && TS.typing.memberEnded(r, a), t && t();
          }
        },
        subtype__file_share: function(e) {
          e.file && e.file.id == TS.files.polling_file_id && TS.files.uploadProcessingOver(!0, e.file.id);
        },
        message_changed: function(e) {
          TS.has_pri[R] && TS.log(R, "recved message type " + e.type), TS.ms.msg_handlers.message_changed_worker(e);
        },
        subtype__message_changed: function(e) {
          TS.has_pri[R] && TS.log(R, "recved subtype " + e.subtype), TS.boot_data.feature_channel_eventlog_client && TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + e.subtype), TS.ms.msg_handlers.message_changed_worker(e);
        },
        message_changed_worker: function(e) {
          if (!e.message) return void TS.error("no message?");
          TS.mentions.replaceMsg(e.message);
          var t = TS.shared.getModelObById(e.channel);
          if (!t) return void TS.error("unknown imsg.channel:" + e.channel);
          TS.pins && TS.pins.replaceMsg(e.message, t), (e.message.imgs || TS.utility.msgs.hasImgs(e.message)) && (TS.model.show_inline_img_size_pref_reminder = !0);
          TS.utility.msgs.replaceMsg(t, e.message, !0);
        },
        message_deleted: function(e) {
          TS.has_pri[R] && TS.log(R, "recved message type " + e.type), TS.ms.msg_handlers.message_deleted_worker(e);
        },
        subtype__message_deleted: function(e) {
          TS.has_pri[R] && TS.log(R, "recved subtype " + e.subtype), TS.boot_data.feature_channel_eventlog_client && TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + e.subtype), TS.ms.msg_handlers.message_deleted_worker(e);
        },
        message_deleted_worker: function(e) {
          if (!e.deleted_ts) return void TS.error("no deleted_ts?");
          TS.mentions.removeMsg(e.deleted_ts);
          var t, n, i, r = TS.channels.getChannelById(e.channel);
          if (r || (t = TS.ims.getImById(e.channel)), r || t || (i = TS.mpims.getMpimById(e.channel)), r || t || i || (n = TS.groups.getGroupById(e.channel)), !(t || r || i || n)) return void TS.error("unknown imsg.channel:" + e.channel);
          var a = t || r || i || n;
          TS.pins && TS.pins.removeMsg(e.deleted_ts, a);
          var s = TS.utility.msgs.getMsg(e.deleted_ts, a.msgs);
          !s && a._archive_msgs && (s = TS.utility.msgs.getMsg(e.deleted_ts, a._archive_msgs)), s || (s = TS.client.unread.getMessage(a, e.deleted_ts)), s || (s = TS.ui.replies.getActiveMessage(a, e.deleted_ts)), s || (s = TS.client.threads.getMessage(a, e.deleted_ts)), s && (t ? TS.ims.removeMsg(a.id, s) : r ? TS.channels.removeMsg(a.id, s) : i ? TS.mpims.removeMsg(a.id, s) : n && TS.groups.removeMsg(a.id, s));
        },
        subtype__sh_room_created: function(e) {
          e.room && TS.dir(441, e);
        },
        subtype__sh_room_shared: function(e) {
          e.room && TS.dir(441, e);
        },
        channel_left: function(e) {
          TS.info("You left channel " + e.channel);
          var t = TS.channels.getChannelById(e.channel);
          if (!t) return void TS.error('unknown channel: "' + e.channel);
          t.is_member = !1, TS.model.active_channel_id != e.channel || t.was_archived_this_session || TS.client && TS.client.activeChannelDisplayGoneAway(), TS.channels.calcUnreadCnts(t, !0), TS.members.invalidateMembersUserCanSeeArrayCaches(), TS.channels.left_sig.dispatch(t);
        },
        member_left_channel: function(e) {
          var t, n = e.user;
          if ("C" === e.channel_type) {
            if (t = TS.channels.getChannelById(e.channel)) {
              if (!t.is_member) return void TS.info(n + " left channel " + e.channel + " but we are not a member; ignoring");
              TS.info(n + " left channel " + e.channel), e.no_display = TS.utility.msgs.shouldHideChannelJoinOrLeaveMsg(e, t);
              var i = !e.no_display,
                r = TS.membership.setUserChannelMembership(n, t, !1);
              r && TS.membership.notifyChannelMembershipChanged(n, t, !1, i);
            }
          } else if ("G" === e.channel_type && (t = TS.groups.getGroupById(e.channel))) {
            var a = TS.members.getMemberById(n);
            if (!a) return TS.error('unknown member: "' + n + '"'), void G("member_left_channel");
            N("member_left_channel"), TS.info(a.id + " left group " + e.channel);
            for (var s = 0; s < t.members.length; s += 1)
              if (t.members[s] == a.id) {
                t.members.splice(s, 1), TS.groups.calcActiveMembersForGroup(t);
                break;
              }
            TS.members.invalidateMembersUserCanSeeArrayCaches(), TS.groups.member_left_sig.dispatch(t, a);
          }
        },
        channel_joined: function(e) {
          TS.info("You joined channel " + e.channel.id);
          var t = TS.channels.upsertChannel(e.channel);
          TS.members.invalidateMembersUserCanSeeArrayCaches(), TS.channels.joined_sig.dispatch(t);
        },
        channel_created: function(e) {
          if (!TS.model.user.is_restricted) {
            TS.info("created channel " + e.channel.id);
            var t = TS.channels.upsertChannel(e.channel);
            TS.channels.created_sig.dispatch(t);
          }
        },
        channel_converted_to_shared: function(e) {
          if (!e.channel || !e.channel.id) return void TS.error("No channel info sent");
          var t = TS.channels.getChannelById(e.channel.id);
          if (!t) return void TS.error('unknown channel: "' + e.channel.id);
          _.isUndefined(e.channel.is_member) && (e.channel.is_member = !1), e.channel.is_member = !1, t.is_member && (e.channel.is_member = !0), TS.channels.upsertChannel(e.channel), t._name_lc !== _.toLower(e.channel.name) && TS.channels.channelRenamed(e.channel), TS.client && TS.client.channel_pane.rebuild("channels"), TS.shared.getActiveModelOb().id === t.id && TS.channels.converted_to_shared_sig.dispatch(t);
        },
        group_converted_to_shared: function(e) {
          if (!e.group || !e.group.id) return void TS.error("No group info sent");
          var t = TS.groups.getGroupById(e.group.id);
          if (!t) return void TS.error('unknown group: "' + e.group.id);
          t.is_member && (e.group.is_member = !0), TS.groups.upsertGroup(e.group), TS.client && TS.client.channel_pane.rebuild("channels"), TS.shared.getActiveModelOb().id === t.id && TS.groups.converted_to_shared_sig.dispatch(t);
        },
        teams_joined_shared_channel: function(e) {
          if (!TS.boot_data.page_needs_enterprise) return void TS.error("shared channel event sent to non-enterprise team:" + e.channel);
          var t = TS.channels.getChannelById(e.channel);
          return t || (t = TS.groups.getGroupById(e.channel)), t ? t.is_shared ? (e.is_global_shared ? (t.is_global_shared = e.is_global_shared, t.is_group ? TS.groups.upsertGroup(t) : TS.channels.upsertChannel(t)) : TS.enterprise.addTeamsToSharedForChannel(t, e.teams), void(!TS.shared.getActiveModelOb().id !== t.id && (t.is_group ? TS.groups.shared_teams_updated_sig.dispatch(t) : TS.channels.shared_teams_updated_sig.dispatch(t)))) : void TS.error("shared channel event sent for non-shared channel:" + e.channel) : void TS.error('unknown channel or group: "' + e.channel);
        },
        teams_left_shared_channel: function(e) {
          if (!TS.boot_data.page_needs_enterprise) return void TS.error("shared channel event sent to non-enterprise team:" + e.channel);
          var t = TS.channels.getChannelById(e.channel);
          return t || (t = TS.groups.getGroupById(e.channel)), t ? t.is_shared ? (TS.enterprise.updateSharesForChannel(t, e.teams), void(!TS.shared.getActiveModelOb().id !== t.id && (t.is_group ? TS.groups.shared_teams_updated_sig.dispatch(t) : TS.channels.shared_teams_updated_sig.dispatch(t)))) : void TS.error("shared channel event sent for non-shared channel:" + e.channel) : void TS.error('unknown channel or group: "' + e.channel);
        },
        enterprise_rename: function(e) {
          TS.model.enterprise.name = e.name;
          var t = $(".team_menu.slack_menu");
          t.find(".slack_menu_header .current_team_name").text(TS.model.enterprise.name), t.find(".menu_list .enterprise_logout_url a strong").text(TS.model.enterprise.name), $(".enterprise-name").text(TS.model.enterprise.name);
        },
        enterprise_team_added: function(e) {
          e.team && TS.boot_data.page_needs_enterprise && TS.enterprise.upsertEnterpriseTeam(e.team);
        },
        channel_deleted: function(e) {
          var t = TS.channels.getChannelById(e.channel);
          if (!t) return void TS.error('unknown channel: "' + e.channel);
          TS.info("deleted channel " + e.channel), TS.channels.removeChannel(t);
        },
        channel_archive: function(e) {
          var t = TS.channels.getChannelById(e.channel);
          if (!t) return void TS.error('unknown channel: "' + e.channel);
          t.is_archived || (TS.info("archived channel " + e.channel), t.is_archived = !0, e.is_moved && (t.is_moved = 1 === e.is_moved), TS.model.user.is_restricted || t.is_member && (t.was_archived_this_session = !0), TS.channels.archived_sig.dispatch(t));
        },
        channel_unarchive: function(e) {
          var t = TS.channels.getChannelById(e.channel);
          if (!t) return void TS.error('unknown channel: "' + e.channel);
          if (t.is_archived) {
            if (TS.info("unarchived channel " + e.channel), t.was_archived_this_session) {
              TS.channels.joinById(t.id, null, {
                in_background: !0
              });
            }
            e.is_moved && (t.is_moved = 1 === e.is_moved), t.is_archived = !1, t.was_archived_this_session = !1, TS.channels.unarchived_sig.dispatch(t);
          }
        },
        channel_rename: function(e) {
          if (!TS.channels.getChannelById(e.channel.id)) return void TS.error('unknown channel: "' + e.channel);
          TS.info("renamed channel " + e.channel.id), TS.channels.channelRenamed(e.channel);
        },
        member_joined_channel: function(e) {
          var t, n = e.user;
          if ("C" === e.channel_type) {
            if (t = TS.channels.getChannelById(e.channel)) {
              if (!t.is_member) return void TS.info(n + " joined channel " + e.channel + " but we are not a member; ignoring");
              TS.info(n + " joined channel " + e.channel), n == TS.model.user.id && e.inviter && (t.needs_invited_message = !0, t.inviter = e.inviter), e.no_display = TS.utility.msgs.shouldHideChannelJoinOrLeaveMsg(e, t);
              var i = !e.no_display,
                r = TS.membership.setUserChannelMembership(n, t, !0);
              r && TS.membership.notifyChannelMembershipChanged(n, t, !0, i);
            }
          } else if ("G" === e.channel_type && (t = TS.groups.getGroupById(e.channel))) {
            var a = TS.members.getMemberById(n);
            if (!a) return TS.error('unknown member: "' + n + '"'), void G("member_joined_channel");
            if (N("member_joined_channel"), e.is_mpim) return;
            TS.info(a.id + " joined group " + e.channel);
            for (var s, o = 0; o < t.members.length; o += 1)
              if (t.members[o] == a.id) {
                s = t.members[o];
                break;
              }!s && t && (t.members.push(a.id), TS.groups.calcActiveMembersForGroup(t)), a.is_self && e.inviter && (t.needs_invited_message = !0, t.inviter = e.inviter), TS.members.invalidateMembersUserCanSeeArrayCaches(), TS.groups.member_joined_sig.dispatch(t, a);
          }
        },
        channel_marked: function(e) {
          if (TS.client) {
            var t = TS.channels.getChannelById(e.channel);
            if (!t) return void TS.error('unknown channel: "' + e.channel + '"');
            t.needs_invited_message = !1, delete TS.model.last_reads_set_by_client[t.id + "_" + e.ts], TS.has_pri[H] && t.last_read !== e.ts && TS.log(H, "channel_marked for " + t.id + ", " + t.last_read + " -> " + e.ts), TS.channels.setLastRead(t, e.ts);
          }
        },
        subtype__channel_topic: function(e) {
          var t = TS.channels.getChannelById(e.channel);
          if (!t) return void TS.error('unknown channel: "' + e.channel + '"');
          var n = e.user,
            i = TS.members.getMemberById(n);
          if (!i) return TS.error('unknown member: "' + n + '"'), void G("subtype__channel_topic");
          N("subtype__channel_topic"), TS.info(i.id + " changed topic for channel " + e.channel), TS.channels.topicChanged(t, i.id, e.ts, e.topic);
        },
        subtype__channel_purpose: function(e) {
          var t = TS.channels.getChannelById(e.channel);
          if (!t) return void TS.error('unknown channel: "' + e.channel + '"');
          var n = e.user,
            i = TS.members.getMemberById(n);
          if (!i) return TS.error('unknown member: "' + n + '"'), void G("subtype__channel_purpose");
          N("subtype__channel_purpose"), TS.info(i.id + " changed purpose for channel " + e.channel), TS.channels.purposeChanged(t, i.id, e.ts, e.purpose);
        },
        channel_history_changed: function(e) {
          TS.ms.msg_handlers.channel_history_changed_worker(e);
        },
        subtype__channel_history_changed: function(e) {
          TS.boot_data.feature_channel_eventlog_client && TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + e.subtype), TS.ms.msg_handlers.channel_history_changed_worker(e);
        },
        channel_history_changed_worker: function(e) {
          return TS.info("channel_history_changed for " + e.channel), y(e, TS.channels);
        },
        mpim_joined: function(e) {
          if (!TS.mpims.getMpimById(e.channel.id)) {
            var t = TS.mpims.upsertMpim(e.channel);
            TS.members.invalidateMembersUserCanSeeArrayCaches(), TS.mpims.joined_sig.dispatch(t), TS.client && TS.shared.checkInitialMsgHistory(t, TS.mpims);
          }
        },
        subtype__mpim_join: function(e) {
          var t = e.user,
            n = TS.members.getMemberById(t);
          if (!n) return TS.error('unknown member: "' + t + '"'), void G("subtype__mpim_join");
          N("subtype__mpim_join"), TS.info(n.id + " joined mpim " + e.channel);
        },
        mpim_open: function(e) {
          var t = TS.mpims.getMpimById(e.channel);
          if (!t) return void TS.error("unknown mpim! " + e.channel);
          t.is_open = !0, TS.model.requested_mpim_opens[e.channel] && (TS.mpims.displayMpim({
            id: t.id,
            and_send_txt: TS.model.requested_mpim_opens[e.channel].and_send_txt
          }), delete TS.model.requested_mpim_opens[e.channel]), t.opened_this_session = !0, TS.mpims.opened_sig.dispatch(t), TS.client && TS.shared.checkInitialMsgHistory(t, TS.mpims);
        },
        mpim_close: function(e) {
          var t = TS.mpims.getMpimById(e.channel);
          if (!t) return void TS.error('unknown mpim: "' + e.channel + '"');
          t.is_open = !1;
          var n = e.converted_to;
          n && TS.groups.getGroupById(n) && (t.latest = null, TS.shared.moveLastMsgInput(t, TS.groups.getGroupById(n))), TS.model.active_mpim_id == e.channel && (TS.client && n && TS.groups.getGroupById(n) ? TS.groups.displayGroup({
            id: n
          }) : TS.client && TS.client.activeChannelDisplayGoneAway()), TS.mpims.closed_sig.dispatch(t);
        },
        mpim_marked: function(e) {
          if (TS.client) {
            var t = TS.mpims.getMpimById(e.channel);
            if (!t) return void TS.error('unknown mpim: "' + e.channel + '"');
            t.needs_invited_message = !1, TS.has_pri[H] && t.last_read !== e.ts && TS.log(H, "mpim_marked for " + t.id + ", " + t.last_read + " -> " + e.ts), delete TS.model.last_reads_set_by_client[t.id + "_" + e.ts], TS.mpims.setLastRead(t, e.ts);
          }
        },
        mpim_history_changed: function(e) {
          TS.ms.msg_handlers.mpim_history_changed_worker(e);
        },
        subtype__mpim_history_changed: function(e) {
          TS.boot_data.feature_channel_eventlog_client && TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + e.subtype), TS.ms.msg_handlers.mpim_history_changed_worker(e);
        },
        mpim_history_changed_worker: function(e) {
          return TS.info("mpim_history_changed for " + e.channel), y(e, TS.mpims);
        },
        group_left: function(e) {
          TS.info("You left group " + e.channel);
          var t = TS.groups.getGroupById(e.channel);
          if (!t) return void TS.error('unknown group: "' + e.channel);
          TS.groups.removeGroup(t), TS.members.invalidateMembersUserCanSeeArrayCaches(), TS.groups.left_sig.dispatch(t);
        },
        group_joined: function(e) {
          if (TS.info("You joined group " + e.channel.id), !e.channel.is_mpim) {
            if (TS.groups.getGroupById(e.channel.name)) return void TS.error("should not be getting a group_joined message if we already know about the group: " + e.channel.name + " " + e.channel.id);
            var t = TS.groups.upsertGroup(e.channel);
            TS.members.invalidateMembersUserCanSeeArrayCaches(), TS.groups.joined_sig.dispatch(t), TS.client && TS.shared.checkInitialMsgHistory(t, TS.groups);
          }
        },
        group_deleted: function(e) {
          var t = TS.groups.getGroupById(e.channel);
          if (!t) return void TS.error('unknown group: "' + e.channel);
          TS.info("deleted group " + e.channel), TS.groups.removeGroup(t);
        },
        group_archive: function(e) {
          var t = TS.groups.getGroupById(e.channel);
          if (!t) return void TS.error('unknown group: "' + e.channel);
          t.is_archived || (TS.info("archived group " + e.channel), t.is_archived = !0, e.is_moved && (t.is_moved = 1 === e.is_moved), t.is_open && (t.was_archived_this_session = !0), TS.groups.archived_sig.dispatch(t));
        },
        group_unarchive: function(e) {
          var t = TS.groups.getGroupById(e.channel);
          if (!t) return void TS.error('unknown group: "' + e.channel);
          e.is_moved && (t.is_moved = 1 === e.is_moved), t.is_archived && (TS.info("unarchived group " + e.channel), t.is_archived = !1, t.was_archived_this_session = !1, TS.groups.unarchived_sig.dispatch(t));
        },
        group_rename: function(e) {
          if (!TS.groups.getGroupById(e.channel.id)) return void TS.error('unknown group: "' + e.channel.id);
          TS.info("renamed group " + e.channel.id), TS.groups.groupRenamed(e.channel);
        },
        group_open: function(e) {
          if (TS.mpims.getMpimById(e.channel)) return TS.ms.msg_handlers.mpim_open(e);
          var t = TS.groups.getGroupById(e.channel);
          if (!t) return void TS.error("unknown group! " + e.channel);
          t.is_open = !0, TS.model.requested_group_opens[e.channel] && (TS.groups.displayGroup({
            id: t.id,
            and_send_txt: TS.model.requested_group_opens[e.channel].and_send_txt
          }), delete TS.model.requested_group_opens[e.channel]), t.opened_this_session = !0, TS.groups.opened_sig.dispatch(t), TS.client && TS.shared.checkInitialMsgHistory(t, TS.groups);
        },
        group_marked: function(e) {
          if (TS.client) {
            if (TS.mpims.getMpimById(e.channel)) return TS.ms.msg_handlers.mpim_marked(e);
            var t = TS.groups.getGroupById(e.channel);
            if (!t) return void TS.error('unknown group: "' + e.channel + '"');
            t.needs_invited_message = !1, TS.has_pri[H] && t.last_read !== e.ts && TS.log(H, "group_marked for " + t.id + ", " + t.last_read + " -> " + e.ts), delete TS.model.last_reads_set_by_client[t.id + "_" + e.ts], TS.groups.setLastRead(t, e.ts);
          }
        },
        group_close: function(e) {
          if (!TS.mpims.getMpimById(e.channel)) {
            var t = TS.groups.getGroupById(e.channel);
            if (!t) return void TS.error('unknown group: "' + e.channel + '"');
            t.is_open = !1, TS.model.active_group_id == e.channel && TS.client && TS.client.activeChannelDisplayGoneAway(), TS.groups.closed_sig.dispatch(t);
          }
        },
        subtype__group_topic: function(e) {
          if (!TS.mpims.getMpimById(e.channel)) {
            var t = TS.groups.getGroupById(e.channel);
            if (!t) return void TS.error('unknown group: "' + e.channel + '"');
            var n = e.user,
              i = TS.members.getMemberById(n);
            if (!i) return TS.error('unknown member: "' + n + '"'), void G("subtype__group_topic");
            N("subtype__group_topic"), TS.info(i.id + " changed topic for group " + e.channel + " to " + e.topic), TS.groups.topicChanged(t, i.id, e.ts, e.topic);
          }
        },
        subtype__group_purpose: function(e) {
          if (!TS.mpims.getMpimById(e.channel)) {
            var t = TS.groups.getGroupById(e.channel);
            if (!t) return void TS.error('unknown group: "' + e.channel + '"');
            var n = e.user,
              i = TS.members.getMemberById(n);
            if (!i) return TS.error('unknown member: "' + n + '"'), void G("subtype__group_purpose");
            N("subtype__group_purpose"), TS.info(i.id + " changed purpose for group " + e.channel + " to " + e.purpose), TS.groups.purposeChanged(t, i.id, e.ts, e.purpose);
          }
        },
        group_history_changed: function(e) {
          TS.ms.msg_handlers.group_history_changed_worker(e);
        },
        subtype__group_history_changed: function(e) {
          TS.boot_data.feature_channel_eventlog_client && TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + e.subtype), TS.ms.msg_handlers.group_history_changed_worker(e);
        },
        group_history_changed_worker: function(e) {
          if (!e.is_mpim) return TS.info("group_history_changed for " + e.channel), y(e, TS.groups);
        },
        im_created: function(e) {
          var t = TS.ims.getImById(e.channel.id);
          if (t) return void TS.warn("we already have an im for this user: " + e.user);
          if (TS.ims.upsertIm(e.channel), !(t = TS.ims.getImById(e.channel.id))) return void TS.error("error why can we not find this im: " + e.channel.id);
          var n = TS.members.getMemberById(e.user);
          if (!n) return TS.error('unknown member: "' + e.user + '"'), void G("im_created");
          N("im_created"), TS.members.invalidateMembersUserCanSeeArrayCaches(), t.is_open && (TS.model.requested_im_opens[n.id] && (TS.ims.displayIm(t.id, !1, TS.model.requested_im_opens[n.id].and_send_txt), delete TS.model.requested_im_opens[n.id]), TS.ims.opened_sig.dispatch(t)), t.opened_this_session = !0;
        },
        im_open: function(e) {
          var t = TS.ims.getImById(e.channel);
          if (!t) return void TS.error("unknown im! " + e.channel);
          t.is_open = !0;
          var n = TS.members.getMemberById(e.user);
          if (!n) return TS.error('unknown member: "' + e.user + '"'), void G("im_open");
          N("im_open"), TS.model.requested_im_opens[n.id] && (TS.ims.displayIm(t.id, !1, TS.model.requested_im_opens[n.id].and_send_txt), delete TS.model.requested_im_opens[n.id]), t.opened_this_session = !0, TS.ims.opened_sig.dispatch(t), TS.client && TS.shared.checkInitialMsgHistory(t, TS.ims);
        },
        im_marked: function(e) {
          if (TS.client) {
            var t = TS.ims.getImById(e.channel);
            if (!t) return void TS.error('unknown im: "' + e.channel + '"');
            TS.has_pri[H] && t.last_read !== e.ts && TS.log(H, "im_marked for " + t.id + ", " + t.last_read + " -> " + e.ts), delete TS.model.last_reads_set_by_client[t.id + "_" + e.ts], TS.ims.setLastRead(t, e.ts);
          }
        },
        im_close: function(e) {
          var t = TS.ims.getImById(e.channel);
          if (!t) return void TS.error('unknown im: "' + e.channel + '"');
          t.is_open && (t.is_open = !1, TS.model.active_im_id == e.channel && TS.client && TS.client.activeChannelDisplayGoneAway(), TS.ims.closed_sig.dispatch(t));
        },
        im_history_changed: function(e) {
          TS.ms.msg_handlers.im_history_changed_worker(e);
        },
        subtype__im_history_changed: function(e) {
          TS.boot_data.feature_channel_eventlog_client && TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + e.subtype), TS.ms.msg_handlers.im_history_changed_worker(e);
        },
        im_history_changed_worker: function(e) {
          return TS.info("im_history_changed for " + e.channel), y(e, TS.ims);
        },
        manual_presence_change: function(e) {
          var t = TS.model.user;
          if ("away" !== e.presence && "active" !== e.presence) return void TS.error('unknown presence: "' + e.presence + '"');
          t.manual_presence = e.presence, TS.members.presence_changed_sig.dispatch(t);
        },
        presence_change: function(e) {
          e.team = e.team || TS.model.team.id, e.hasOwnProperty("users") && _.isArray(e.users) ? e.users.forEach(function(t) {
            w(t, e.presence);
          }) : w(e.user, e.presence);
        },
        status_change: function(e) {
          var t = TS.members.getMemberById(e.user);
          if (!t) return TS.error('unknown member: "' + e.user + '"'), void G("status_change");
          N("status_change"), t.status != e.status && (t.status = e.status, TS.members.status_changed_sig.dispatch(t));
        },
        user_can_manage_shared_channels: function(e) {
          TS.prefs.updateTeamPrefCanUserManageSharedChannels(e);
        },
        pref_change: function(e) {
          TS.prefs.onPrefChanged(e);
        },
        team_pref_change: function(e) {
          TS.prefs.onTeamPrefChanged(e);
        },
        user_read_only_channels: function(e) {
          TS.channels.read_only.updateList(e.channel_ids);
        },
        team_profile_change: function(e) {
          TS.team.upsertAndSignal({
            profile: e.profile
          });
        },
        team_profile_reorder: function(e) {
          TS.team.upsertAndSignal({
            profile: e.profile
          });
        },
        team_profile_delete: function(e) {
          TS.team.upsertAndSignal({
            profile: e.profile
          });
        },
        team_plan_change: function(e) {
          TS.team.team_plan_changed_sig.dispatch(e);
        },
        file_created: function(e) {
          TS.files.getFileById(e.file.id) ? TS.warn("we already know about this file, which probably means the files.upload response came in before this message (so np) " + e.file.id) : TS.files.upsertAndSignal(e.file);
        },
        file_public: function(e) {
          TS.files.upsertAndSignal(e.file);
        },
        file_deleted: function(e) {
          (e.file_ids || [e.file_id]).forEach(function(e) {
            TS.files.removeFile(e);
          });
        },
        file_private: function(e) {
          TS.files.fetchFileInfo(e.file_id);
        },
        file_change: function(e) {
          TS.files.upsertAndSignal(e.file), TS.files.fileWasMaybeRefreshed(e.file);
        },
        file_shared: function(e) {
          TS.files.upsertAndSignal(e.file), TS.files.team_file_shared_sig.dispatch(e.file);
        },
        file_unshared: function(e) {
          TS.files.upsertAndSignal(e.file);
        },
        file_comment_added: function(e) {
          var t = TS.files.getFileById(e.file.id);
          t && (TS.files.editCommentOnFile(e.comment, t) || TS.files.addCommentToFile(e.comment, t), TS.files.upsertFile(e.file));
        },
        file_comment_edited: function(e) {
          var t = TS.files.getFileById(e.file.id);
          t && (TS.files.editCommentOnFile(e.comment, t), TS.files.upsertFile(e.file));
        },
        file_comment_deleted: function(e) {
          var t = TS.files.getFileById(e.file.id);
          t && (TS.files.deleteCommentOnFile(e.comment, t), TS.files.upsertFile(e.file));
        },
        hello: function() {},
        goodbye: function() {
          function e() {
            if (TS.ms.disconnected_sig.remove(e), TS.ui.window_focus_changed_sig.remove(e), TS.model.ms_connected) {
              TS.info("goodbye handler: disconnecting now");
              TS.ms.disconnect(!0);
            } else TS.info("goodbye handler: got disconnected some other way before we handled the goodbye message");
          }
          if (TS.isSocketManagerEnabled()) {
            if (TS.info("goodbye handler: disconnecting from the MS next time it is convenient"), !TS.model.ui.is_window_focused) return void e();
            TS.ms.disconnected_sig.addOnce(e), TS.ui.window_focus_changed_sig.addOnce(e);
          }
        },
        team_join: function(e) {
          var t = e.user;
          if (TS.info(t.id + " joined the team"), TS.members.upsertMember(t), !(t = TS.members.getMemberById(t.id))) return TS.error("team_join: wtf no member " + t.id + "?"), void G("team_join");
          N("team_join"), TS.members.joined_team_sig.dispatch(t), TS.client && TS.view.showProperTeamPaneFiller();
        },
        user_change: function(e) {
          var t = TS.members.getMemberById(e.user.id),
            n = e.from_flannel;
          if (!t) {
            if (!n) return TS.has_pri[j] && TS.log(j, "Flannel: user_change for member not in model; ignoring"), void G("user_change");
            TS.has_pri[j] && TS.log(j, "Flannel: user_change for member not in model; will upsert because this looks like a Flannel hint");
          }
          N("user_change");
          var i = !t && n;
          if (!i || r || TS.members.is_in_bulk_upsert_mode ? r && !i && (TS.members.finishBatchUpsert(), r = !1) : (r = !0, TS.members.startBatchUpsert()), e.user && e.user.id === TS.model.user.id && TS.model.team && TS.model.team.prefs && !TS.model.team.prefs.display_email_addresses && e.user.profile && !e.user.profile.email) {
            var a = t.profile && t.profile.email;
            a && (TS.info("user_change: email hidden via team pref. appending email from model for local user, so it is not lost in upsert."), e.user.profile.email = a);
          }
          TS.members.upsertAndSignal(e.user);
        },
        star_added: function(e) {
          if (!e.item) return void TS.error(e.type + " has no item");
          var t = TS.members.getMemberById(e.user);
          if (!t) return TS.error('unknown member: "' + e.user + '"'), void G("star_added");
          N("star_added"), t.is_self && (TS.stars.userStarStatusHasChanged(!0, e.item, e.type), TS.stars.maybeUpdateUserStarredList({
            delta: 1
          }));
        },
        star_removed: function(e) {
          if (!e.item) return void TS.error(e.type + " has no item");
          var t = TS.members.getMemberById(e.user);
          if (!t) return void TS.error('unknown member: "' + e.user + '"');
          t.is_self && (TS.stars.userStarStatusHasChanged(!1, e.item, e.type), TS.stars.maybeRemoveStarredListItem(e.item));
        },
        reaction_added: function(e) {
          if (!e.item) return void TS.error(e.type + " has no item");
          TS.rxns.changeRxnsFromIMsg(e);
        },
        reaction_removed: function(e) {
          if (!e.item) return void TS.error(e.type + " has no item");
          TS.rxns.changeRxnsFromIMsg(e);
        },
        email_domain_changed: function(e) {
          TS.team.upsertAndSignal({
            email_domain: e.email_domain
          }), TS.client && TS.view.showProperTeamPaneFiller();
        },
        team_domain_change: function(e) {
          TS.team.upsertAndSignal({
            domain: e.domain
          }), TS.model.last_team_domain = TS.model.team.domain, TSSSB.call("teamDomainChanged", e.url);
        },
        slack_broadcast: function(e) {
          var t = null,
            n = e.title || TS.i18n.t("Broadcast message", "msg_handlers")(),
            i = e.body || "",
            r = "",
            a = e.button || (e.reload ? "Reload" : "OK"),
            s = !1;
          if (e.reload) {
            if (e.force_reload ? (TS.info("reloading because imsg.force_reload"), s = !0) : TS.boot_data.version_ts ? "dev" === e.version_ts ? (TS.info("reloading because dev"), s = !0) : parseInt(TS.boot_data.version_ts, 10) < parseInt(e.version_ts, 10) && (TS.info("reloading because " + TS.boot_data.version_ts + " < " + e.version_ts), s = !0) : (TS.info("reloading because we dont have an version_ts"), s = !0), !s) return;
            t = function() {
              TS.client && TS.reload();
            };
          }
          if (s) {
            var o = _.random(10, 20);
            r = '<p class="top_margin">' + TS.i18n.t('(You will be auto reloaded in <span id="auto_secs">{secs}</span> seconds.)', "msg_handlers")({
              secs: o
            }) + "</p>", setTimeout(function() {
              TS.client && TS.reload();
            }, 1e3 * o), setInterval(function() {
              (o -= 1) < 1 || $("#auto_secs").text(o);
            }, 1e3);
          }
          TS.generic_dialog.start({
            title: TS.format.formatNoHighlightsNoSpecials(n),
            body: TS.format.formatNoHighlightsNoSpecials(i) + r,
            go_button_text: a,
            show_cancel_button: !1,
            esc_for_ok: !0,
            onGo: t
          });
        },
        team_rename: function(e) {
          e.source_team && e.source_team !== TS.model.team.id ? TS.teams.updateTeamName(e) : ($("#team_name").text(e.name), document.title = document.title.replace(TS.model.last_team_name, e.name), TS.ui.growls.original_document_title && (TS.ui.growls.original_document_title = TS.ui.growls.original_document_title.replace(TS.model.last_team_name, e.name)), TS.model.team.name = e.name, TS.model.last_team_name = TS.model.team.name, TS.team.team_name_changed_sig.dispatch(TS.model.team), TSSSB.call("teamNameChanged", e.name));
        },
        team_icon_change: function(e) {
          e.icon && (e.source_team && e.source_team !== TS.model.team.id ? TS.teams.updateTeamIcon(e) : (TS.model.team.icon = e.icon, TS.teams.changed_icon_sig.dispatch(TS.model.team), TS.client && TS.client.updateTeamIcon()));
        },
        bot_added: function(e) {
          var t = e.bot;
          if (TS.info(t.id + " was added"), TS.bots.upsertBot(t), !(t = TS.bots.getBotById(t.id))) return void TS.error("error no bot " + t.id + "?");
          TS.bots.added_sig.dispatch(t);
        },
        bot_changed: function(e) {
          !TS.bots.getBotById(e.bot.id) && TS.has_pri[j] && TS.log(j, "Flannel: bot_changed for member not in model; upserting"), TS.bots.upsertAndSignal(e.bot);
        },
        bot_removed: function(e) {
          if (!TS.bots.getBotById(e.bot.id)) return void(TS.has_pri[j] && TS.log(j, "Flannel: bot_removed for bot not in model; ignoring"));
          TS.bots.upsertAndSignal(e.bot);
        },
        error: function() {},
        user_typing: function(e) {
          if (TS.typing) {
            var t = TS.members.getMemberById(e.user);
            if (!t) return TS.error("unknown imsg.user:" + e.user), void G("user_typing");
            N("user_typing");
            var n = TS.shared.getModelObById(e.channel);
            if (!n) return void TS.error("unknown imsg.channel:" + e.channel);
            TS.typing.memberStarted(n, t);
          }
        },
        issue_change: function(e) {
          TS.help.onIssueChange(e.issue);
        },
        emoji_changed: function(e) {
          switch (e.subtype) {
            case "add":
              if (!e.hasOwnProperty("name") || !e.hasOwnProperty("value")) return void TS.warn("Bad emoji_changed__add event; expected `name` and `value` to be present");
              TS.emoji.addCustomEmoji(e.name, e.value, e.event_ts);
              break;
            case "remove":
              if (!_.isArray(e.names)) return void TS.warn("Bad emoji_changed__remove event; expected `names` to be an array");
              e.names.forEach(function(t) {
                TS.emoji.removeCustomEmoji(t, e.event_ts);
              });
              break;
            default:
              x("emoji_changed", e.event_ts, function(e) {
                e && (TS.model.emoji_cache_ts = e), TS.emoji.resetUpEmoji();
              });
          }
        },
        commands_changed: function(e) {
          if (!e.commands_removed && !e.commands_updated) return void x("commands_changed", e.event_ts, function(e) {
            e && (TS.model.commands_cache_ts = e), TS.cmd_handlers.resetUpCmds();
          });
          _.isArray(e.commands_removed) && e.commands_removed.forEach(function(t) {
            TS.cmd_handlers.removeCommand(t.name, e.event_ts);
          }), _.isArray(e.commands_updated) && e.commands_updated.forEach(function(t) {
            TS.cmd_handlers.updateCommand(t, e.event_ts);
          });
        },
        accounts_changed: function() {
          setTimeout(TS.refreshTeams, 1e3);
        },
        pin_added: function(e) {
          var t = TS.shared.getModelObById(e.channel_id);
          t && (TS.pins.pinStatusHasChanged(!0, e.item, e.item.type, t, e.pin_count), t.has_pins = !0);
        },
        pin_removed: function(e) {
          var t = TS.shared.getModelObById(e.channel_id);
          t && (TS.pins.pinStatusHasChanged(!1, e.item, e.item.type, t, e.pin_count), !1 === e.has_pins && (t.has_pins = !1));
        },
        sh_room_join: function(e) {
          TS.dir(441, e), TS.rooms.upsertAndSignal(e.room);
        },
        sh_room_leave: function(e) {
          TS.dir(441, e), TS.rooms.upsertAndSignal(e.room);
        },
        sh_room_update: function(e) {
          TS.dir(441, e), TS.rooms.upsertAndSignal(e.room);
        },
        subteam_updated: function(e) {
          TS.user_groups.upsertUserGroupAndSignal(e.subteam);
        },
        subteam_members_changed: function(e) {
          TS.boot_data.feature_subteam_members_diff && (TS.info("TS.ms.msg_handlers.subteam_members_changed", e), TS.user_groups.userGroupMembersChanged(e));
        },
        subteam_created: function(e) {
          TS.user_groups.upsertUserGroupAndSignal(e.subteam);
        },
        subteam_deleted: function(e) {
          TS.user_groups.removeUserGroupAndSignal(e.subteam);
        },
        subteam_self_added: function(e) {
          TS.user_groups.upsertSelfUserGroup(e.subteam_id);
        },
        subteam_self_removed: function(e) {
          TS.user_groups.removeSelfUserGroup(e.subteam_id);
        },
        apps_changed: function(e) {
          e.event_ts && (TS.model.apps_cache_ts = e.event_ts), TS.apps.ingestApp(e.app);
        },
        dnd_override: function(e) {
          TS.dnd.dndOverride(e.channel, e.timestamp);
        },
        dnd_updated: function(e) {
          var t = TS.members.getMemberById(e.user);
          if (!t) return void TS.error('unknown member: "' + e.user + '"');
          TS.dnd.updateUserPropsAndSignal(t.id, e.dnd_status);
        },
        dnd_updated_user: function(e) {
          var t = TS.members.getMemberById(e.user);
          if (!t) return TS.log(2002, 'unknown member in dnd_updated_user: "' + e.user + '"'), void G("dnd_updated_user");
          N("dnd_updated_user"), TS.dnd.updateUserPropsAndSignal(t.id, e.dnd_status);
        },
        reconnect_url: function(e) {
          if (!TS.isSocketManagerEnabled() && TS.ms.fast_reconnects_enabled) {
            var t = e.url;
            TS.ms.setReconnectUrl(t);
          }
        },
        message_replied: function(e) {
          var t, n = e.message;
          n && n.replies && n.replies.length && (t = _.maxBy(n.replies, "ts").ts);
          var i = TS.shared.getModelObById(e.channel);
          if (t && i && i.msgs) {
            var r = TS.utility.msgs.findMsg(n.ts, i.id);
            if (r && r.replies && r.replies.length) {
              var a = _.maxBy(r.replies, "ts").ts;
              if (t < a) return void TS.log(2004, "Not processing older message_replied event, " + t + " < " + a + ", in " + e.channel);
            }
          }
          TS.ms.msg_handlers.message_changed_worker(e);
        },
        subtype__message_replied: function(e) {
          TS.has_pri[R] && TS.log(R, "recved subtype " + e.subtype), TS.boot_data.feature_channel_eventlog_client && TS.warn("feature_channel_eventlog_client=1 so we should never be getting subtype " + e.subtype), TS.ms.msg_handlers.message_changed_worker(e);
        },
        thread_subscribed: function(e) {
          var t = e.subscription;
          t && "thread" === t.type && t.channel && t.thread_ts && TS.replies.threadSubscribed(t.channel, t.thread_ts, t);
        },
        thread_unsubscribed: function(e) {
          var t = e.subscription;
          t && "thread" === t.type && t.channel && t.thread_ts && TS.replies.threadUnsubscribed(t.channel, t.thread_ts, t);
        },
        thread_marked: function(e) {
          var t = e.subscription;
          t && "thread" === t.type && t.channel && t.thread_ts && TS.replies.threadMarked(t.channel, t.thread_ts, t.last_read, t.unread_count);
        },
        user_added_to_team: function(e) {
          TS.info("TS.ms.msg_handlers.user_added_to_team, team_id = " + e.team_id), TS.client && TS.client.user_added_to_team_sig.dispatch(e.team_id);
        },
        user_removed_from_team: function(e) {
          TS.info("TS.ms.msg_handlers.user_removed_from_team, team_id = " + e.team_id), TS.client && TS.client.user_removed_from_team_sig.dispatch(e.team_id);
        },
        update_thread_state: function(e) {
          TS.client && TS.client.threads.updateThreadState(e.has_unreads, e.mention_count, e.timestamp);
        },
        shared_invite_code_created: function() {
          TS.client && TS.ui.shared_invites_modal.updateCode();
        },
        shared_invite_code_disabled: function() {
          TS.client && TS.ui.shared_invites_modal.updateCode();
        },
        app_permission_request: function(e) {
          TS.apps.requestPermissions(e.app_user, e.scope_info, e.trigger_id);
        }
      });
      var e, t, i = 0,
        r = !1,
        a = function(e, t) {
          return !!t && (!(TS.web && TS.web.space && !TS.web.space.isFileRelevant(t)) && ("file_created" === e.type && e.user_id == TS.model.user.id || !!TS.files.getFileById(t)));
        },
        s = function(e) {
          var t = ["message", "file_deleted", "file_private"];
          if (_.includes(t, e.type)) return !1;
          if (e._file_attached) return !1;
          var n = e,
            i = e.file && e.file.id || e.file_id;
          return !i && e.item && (i = e.item.file && e.item.file.id || e.item.file_id) && (n = e.item), !!i && {
            ob_with_file: n,
            file_id: i
          };
        },
        o = [],
        l = !1,
        d = function() {
          var e = {
            trailing: !0
          };
          return _.debounce(function(e, t) {
            TS.has_pri[R] && TS.log(R, "TS.metrics: " + e + ", Q length = " + t), TS.metrics.store(e, t, {
              is_count: !0
            });
          }, 500, e);
        }(),
        c = function(e) {
          if (e._from_evt_log && (l = !0), e._enqueued_at = performance.now(), o.push(e), t && (i += 1, e._id = i, TS.metrics.mark("ms_event_queue_add_" + i)), 1 == o.length) u();
          else {
            if (TS.has_pri[R] && TS.log(R, e.type + " is Qed and not being handled immediately _Q.length:" + o.length), !TS.client || !TS.client.stats.isEnabled()) return;
            l ? o.length > 100 && d("ms_event_from_log_q", o.length) : o.length > 10 && d("ms_event_q", o.length);
          }
        },
        u = function() {
          if (o.length) {
            TS.boot_data.feature_async_queue && !e && (e = performance.now()), t && TS.metrics.mark("ms_event_processing");
            var n = o[0];
            if (n._enqueued_at && TS.client && TS.client.stats.isEnabled()) {
              var i = performance.now() - n._enqueued_at;
              TS.metrics.store("ms_time_in_queue", i, {
                allow_zero: !0
              }), delete n._enqueued_at;
            }
            m(n);
          }
        },
        m = function(e) {
          var t = s(e);
          if (!t) return g(e);
          var n = t.ob_with_file,
            i = t.file_id;
          return a(e, i) ? (TS.has_pri[P] && TS.dir(P, e, e.type + " -> _ensureFileObjectsOnMsgAndProceed()"), i ? (TS.has_pri[P] && TS.log(P, e.type + " referenced a relevant file and we have to look it up via the API: " + i), void(o.length > 1 ? f(e, i, n) : p(e, i, n))) : (TS.has_pri[P] && TS.maybeWarn(P, e.type + " referenced a relevant file but there is no file_id"), g(e))) : (TS.has_pri[P] && TS.warn(P, e.type + " referenced an irrelevant file: " + i), Promise.resolve().then(function() {
            return T();
          }));
        },
        p = function(e, t, n) {
          TS.files.fetchFileInfoRaw(t, function(i, r) {
            if (!r) return TS.has_pri[P] && TS.warn(P, e.type + " file fetch failed (or the file has been deleted)"), Promise.resolve().then(function() {
              return T();
            });
            n.file = r, TS.has_pri[P] && TS.log(P, e.type + " now has a file definition"), e._file_attached = !0, _.forEach(o, function(n) {
              var i = s(n);
              i && i.file_id === t && (i.ob_with_file.file = r, n._file_attached = !0, TS.has_pri[P] && TS.log(P, e.type + " now has a file definition (courtesy of a previously queued imsg for " + t + ")"));
            }), g(e);
          });
        },
        f = function(e, t, n) {
          var i = [t];
          if (_.forEach(o, function(e) {
              if (i.length >= 20) return !1;
              var t = s(e);
              t && !_.includes(i, t.file_id) && a(e, t.file_id) && i.push(t.file_id);
            }), i.length > 1) {
            TS.files.fetchMultipleFiles(i, function(i, r) {
              var a = r && r.files;
              if (!i || !_.isArray(a)) return TS.has_pri[P] && TS.maybeWarn(P, e.type + " multi-file fetch failed"), Promise.resolve().then(function() {
                return T();
              });
              var l = {};
              _.forEach(a, function(e) {
                l[e.id] = e;
              }), _.forEach(o, function(t) {
                var n = s(t);
                if (n) {
                  var i = l[n.file_id];
                  i && (n.ob_with_file.file = i, t._file_attached = !0, TS.has_pri[P] && TS.log(P, e.type + " now has a file definition (" + n.file_id + ")"));
                }
              }), l[t] ? g(e) : p(e, t, n);
            }, !0);
          } else p(e, t, n);
        },
        h = function(e) {
          if (!TS.boot_data.feature_stop_loud_channel_mentions) return Promise.resolve();
          if (!e || "message" !== e.type || !e.text) return Promise.resolve();
          if (TS.model.here_regex.test(e.text) || TS.model.channel_regex.test(e.text) || TS.model.everyone_regex.test(e.text) || TS.model.group_regex.test(e.text)) {
            var t = TS.shared.getModelObById(e.channel);
            return t ? t.is_im && !t.is_mpim ? Promise.resolve() : t.is_mpim && !TS.membership.lazyLoadMpimMembership() ? Promise.resolve() : t.is_group && !TS.membership.lazyLoadGroupMembership() ? Promise.resolve() : TS.membership.promiseToGetMembershipCounts(t).catch(_.noop) : (TS.maybeWarn(794, "_maybeEnsureMemberCount: Could not find model_ob for id " + e.channel), Promise.resolve());
          }
          return Promise.resolve();
        },
        g = function(t) {
          TS.has_pri[R] && TS.log(R, t.type + " is now being handled");
          var i;
          M && (i = B.start(t.type));
          var r = function() {
              return p.length ? TS.bots.ensureBotsArePresent(p).catch(_.noop).then(a) : a();
            },
            a = function() {
              return TS.members.ensureMembersArePresent(m.m_ids, m.c_ids, m.t_ids).catch(function(e) {
                if (t.user && "string" == typeof t.user && !TS.members.getMemberById(t.user) || t.channel && "object" === n(t.channel) && t.channel.user && "string" == typeof t.channel.user && !TS.members.getMemberById(t.channel.user)) return TS.error(o + " could not be handled because imsg.user or imsg.channel.user could not be fetched. full err: " + e.message), TS.warn("imsg.ts:" + t.ts + ", imsg.user:" + t.user + ", imsg.channel.user:" + t.channel && t.channel.user), i && i(!0), T();
                TS.has_pri[U] && (TS.maybeWarn(U, o + " held some references to members we could not fetch, but we have imsg.user and imsg.channel.user (or they did not exist) so we can still proceed"), TS.log(U, "imsg.ts:" + t.ts + ", missing_m_ids:" + JSON.stringify(m)));
              }).then(function() {
                return h(t);
              }).then(s);
            },
            s = function(n) {
              try {
                v(t);
              } catch (e) {
                TS.error(o + " errored out when being handled, with err: " + e.message, e), TS.console.logStackTrace();
              }
              return TS.boot_data.feature_async_queue && !n && (e = null), i && i(!0), T();
            };
          if (["channel_joined", "dnd_updated", "dnd_updated_user", "manual_presence_change", "member_left_channel", "presence_change", "status_change", "subteam_created", "user_removed_from_team", "user_change"].indexOf(t.type) >= 0) return s(!0);
          var o = "type:" + t.type + (t.subtype ? " subtype:" + t.subtype : ""),
            l = TS.utility.extractAllModelObIds(t, o),
            d = TS.utility.extractAllMemberIds(t, o),
            c = TS.utility.extractAllBotIds(t),
            u = TS.shared.getModelObIdsNotPresent(l),
            m = TS.members.getMemberIdsNotPresent(d.m_ids, d.c_ids, d.t_ids),
            p = _.reject(c, TS.bots.getBotById);
          if ((u.length || m.m_ids.length || p.length) && "user_typing" === t.type && S(t.channel)) return T();
          if (u.length) ! function() {
            TS.shared.ensureModelObsArePresent(u).then(function() {
              return r();
            }, function(e) {
              return t.channel && "string" == typeof t.channel && !TS.shared.getModelObById(t.channel) ? (TS.error(o + " could not be handled because imsg.channel could not be fetched. full err: " + e.message), TS.warn("imsg.ts:" + t.ts + ", imsg.channel:" + t.channel), i && i(!0), T()) : (TS.has_pri[U] && (TS.warn(U, o + " held some references to model_obs we could not fetch, but we have imsg.channel (or there was no imsg.channel) so we can still proceed"), TS.log(U, "imsg.ts:" + t.ts + ", missing c ids:" + JSON.stringify(u))), m.m_ids.length || p.length ? r() : h(t).then(s));
            });
          }();
          else {
            if (!m.m_ids.length && !p.length) return h(t).finally(function() {
              return s(!0);
            });
            r();
          }
        },
        S = function(e) {
          if (e === TS.model.active_cid) return !1;
          var t = TS.shared.getModelObById(e);
          return !t || !t.is_im && !t.is_mpim;
        },
        T = function() {
          if (!o.length) return Promise.resolve();
          if (t) {
            var n = o.shift();
            TS.metrics.store("ms_event_q_length", o.length, {
              is_count: !0
            }), TS.metrics.measureAndClear("ms_event_duration", "ms_event_processing"), TS.metrics.measureAndClear("ms_event_and_queue_duration", "ms_event_queue_add_" + n._id);
          } else o.shift();
          return o.length || (l = !1), b() ? new Promise(function(t) {
            setTimeout(function() {
              return TS.has_pri[U] && TS.log(U, "too much work per frame; need to take a break"), e = null, u(), t();
            }, 0);
          }) : (u(), Promise.resolve());
        },
        b = function() {
          return !!TS.boot_data.feature_async_queue && (e && o.length && performance.now() - e > 10);
        },
        v = function(e) {
          r && "user_change" !== e.type && (TS.members.finishBatchUpsert(), r = !1), TS.ms.msg_handlers[e.type](e), TS.client && TS.model.is_our_app && (TS.dir(236, e, "calling TS.client.windows.distributeMsgToWins"), TS.client.windows.distributeMsgToWins(e));
        },
        y = function(e, t) {
          var n = TS.shared.getModelObById(e.channel);
          if (!n) return void TS.error('unknown model_ob: "' + e.channel + '"');
          n.history_changed = !0, t.fetchHistory(n, {
            channel: n.id,
            latest: e.latest,
            inclusive: !0,
            count: _.clamp(n.msgs.length, TS.model.initial_msgs_cnt, 1e3)
          }, function(i, r, a) {
            if (i) {
              TS.info("_history_changed: dumping old messages for " + n.id), n.is_limited = !1, TS.utility.msgs.resetOldestMsgsTs(n), TS.warn("imsg.latest: " + e.latest);
              for (var s = n.msgs.length - 1; s > -1; s -= 1) {
                var o = n.msgs[s];
                o.ts < e.latest || r.messages.unshift(o);
              }
              n.msgs.length = 0;
            } else TS.error("could not retrieve history for " + n.id);
            if (t.onHistory(i, r, a), !n.latest) {
              TS.info("history_changed: latest not set for " + n.id, e, n);
              var l = TS.shared.getLatestMsgTs(n);
              l || (TS.warn("history_changed: could not find latest via TS.shared.getLatestMsgTs(), using live msgs"), l = n && n.msgs.length ? n.msgs[n.msgs.length - 1] : null), l ? l && (TS.info("history_changed: assigning latest of " + l + " to model_ob", l, n), n.latest = l) : TS.warn("history_changed: still no latest ts for " + n.id + "?", l);
            }
            n.history_changed = !1;
          });
        },
        w = function(e, t) {
          if ("away" !== t && "active" !== t) return void TS.error('unknown presence: "' + t + '"');
          var n = TS.members.getMemberById(e);
          if (!n) return void G("presence_change");
          N("presence_change"), n.presence != t && (_.get(n, "profile.always_active") && (t = "active"), n.is_self && (n._presence_last_changed = new Date), n.presence = t, TS.members.presence_changed_sig.dispatch(n));
        },
        k = {},
        x = function(e, t, n) {
          k[e] = k[e] || {};
          var i = k[e];
          if (t && (i.cache_ts = t), !i.timer) {
            var r = _.random(0, 5e3);
            TS.info("Waiting " + r + " ms before handling " + e + " event"), i.timer = setTimeout(function() {
              delete k[e], n(i.cache_ts);
            }, r);
          }
        },
        M = !1,
        C = !1,
        I = null,
        A = {},
        E = {},
        O = 0,
        F = 0,
        B = {
          start: function(e, t) {
            if (C) {
              t = t && parseInt(t, 10) || 1e3;
              var n = {
                start: performance.now(),
                end: 0
              };
              return function(i) {
                i = !!i, n.end = performance.now();
                var r = n.end - n.start;
                r > t && TS.warn("'" + e + "' msg_handler took " + _.round(r, 2) + "ms" + (1e3 !== t ? " (threshold = " + t + ")" : "")), B.count(e, r, i);
              };
            }
          },
          count: function(e, t, n) {
            E.start_time || (E.start_time = performance.now()), A[e] || (A[e] = {
              call_count: 0,
              elapsed_time: 0,
              async: !!n
            }), n && (A[e].async = n), A[e].call_count += 1, A[e].elapsed_time += t, B.maybeReport();
          },
          report: function() {
            if (B.finish(), _.size(A)) {
              var e = _.sum(_.map(A, "call_count"));
              TS.has_pri[L] && TS.log(L, "🏔️ MS message stats: " + e + " handler calls in " + parseInt(E.elapsed_time / 1e3, 10) + "s window, " + O + " imsgs since " + new Date(F), A), B.beacon();
            }
            B.reset();
          },
          beacon: function() {
            _.each(A, function(e, t) {
              t = e.async ? "ms_handler_async_" + t : "ms_handler_" + t, TS.metrics.count(t + "_count", e.call_count), TS.metrics.store(t + "_time", e.elapsed_time);
            }), TS.metrics.store("ms_handler_imsgs_received_total", O, {
              is_count: !0
            });
          },
          finish: function() {
            E.end_time = performance.now(), E.elapsed_time = E.end_time - E.start_time;
          },
          reset: function() {
            A = {}, E = {}, I = null;
          },
          maybeReport: function() {
            I || (I = window.setTimeout(B.report, 6e4));
          },
          enableStatsCollecting: function() {
            TS.has_pri[L] && TS.log(L, "🏔️ MS message handler stat collecting enabled"), C = !0;
          },
          disableStatsCollecting: function() {
            TS.has_pri[L] && TS.log(L, "🏔️ MS message handler stat collecting disabled"), C = !1;
          }
        },
        D = 50,
        R = 2,
        H = 141,
        P = 552,
        j = 1989,
        L = 808,
        U = 794,
        N = function(e) {
          TS.utility.enableFeatureForUser(1) && TS.metrics.count("ms_event_handled_" + e);
        },
        G = function(e) {
          TS.utility.enableFeatureForUser(1) && TS.metrics.count("ms_event_dropped_" + e);
        };
    }();
  },
  2488: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ms", {
        fast_reconnects_enabled: !0,
        calling_test_fast_reconnect: !1,
        last_pong_time: 0,
        sent_map: {},
        connected_sig: new signals.Signal,
        disconnected_sig: new signals.Signal,
        trouble_sig: new signals.Signal,
        reconnecting_sig: new signals.Signal,
        on_msg_sig: new signals.Signal,
        reconnect_requested_sig: new signals.Signal,
        errors: {
          BAD_TOKEN: 1,
          CONNECTION_TROUBLE: 1006,
          RATE_LIMIT: -1,
          UNKNOWN: 0
        },
        onStart: function() {
          if (!window.WebSocket && (window.WebSocket = window.MozWebSocket, !window.WebSocket)) return void alert(TS.i18n.t("Your browser does not support WebSockets.", "ms")());
          z(TS.model.ui.is_window_focused || !1), TS.ui.window_focus_changed_sig.add(z), setInterval(function() {
            TS.model.ms_connected && (TS.model.rtm_start_throttler < 1 || (TS.model.rtm_start_throttler -= 1));
          }, 6e4);
          a = TS.boot_data.feature_tinyspeck || TS.utility.enableFeatureForUser(10), s = Date.now(), TS.boot_data.feature_tinyspeck || (he = _.noop, ge = _.noop, fe = _.noop), TS.client && TS.client.stats && (TS.client.stats.start_collecting_sig.add(function() {
            d = TS.boot_data.feature_queue_metrics && TS.utility.enableFeatureForUser(Ee);
          }), TS.client.stats.stop_collecting_sig.add(function() {
            d = !1;
          }));
        },
        isAsleep: function() {
          return S;
        },
        test: function() {
          return {
            _createNewSocket: Te
          };
        },
        send: function(e, t, n) {
          P += 1, e.id = P;
          var i = JSON.stringify(e);
          if (i.length > 32768) {
            var r = e.subtype ? e.type + "." + e.subtype : e.type,
              a = new Error("Unable to send " + r + " message to MS because it exceeds 32768 bytes");
            TS.console.logError(a, "too_big_to_send");
            return void t(!1, {
              error: "too_big_to_send"
            });
          }
          if (TS.ms.sent_map[e.id.toString()] = {
              msg: e,
              handler: t,
              ts: Date.now(),
              temp_ts: n
            }, "ping" === e.type || "pong" === e.type ? TS.has_pri[Oe] && (TS.log(Oe, "MS sending " + e.type), TS.dir(Oe, e)) : (TS.model.last_net_send = Date.now(), TS.has_pri[Oe] && (TS.log(Oe, "sending " + e.type), TS.dir(Oe, e))), !$) {
            var s = new Error("TS.ms.send called when we have no _websocket! This is a programming error.");
            throw TS.error(s), TS.info("Some context for debugging:"), TS.info("TS.model.calling_rtm_start=" + TS.model.calling_rtm_start), TS.info("TS.model.ms_connected=" + TS.model.ms_connected), TS.info("TS.model.ms_connecting=" + TS.model.ms_connecting), TS.console.logStackTrace("TS.ms.sendMsg(...)"), s;
          }
          return TS.client && TS.client.stats.isEnabled() && "message" === e.type && (TS.metrics.mark("user_send_message_" + P), TS.metrics.mark("user_message_unprocessed_" + P)), $.send(i), e.id;
        },
        handleMsg: function(e) {
          var t, n = e.reply_to && !("ok" in e) && "message" === e.type;
          e.reply_to ? e.reply_to.toString() in TS.ms.sent_map ? t = ye(e) : n || TS.error('received msg "' + e.reply_to + '" with type "' + e.type + '" but we have no record of it in sent_map') : (e.event_ts && !e._from_evt_log && TS.ms.storeLastEventTS(e.event_ts, "handleMsg"), TS.storage.isUsingMemberBotCache() && e.cache_ts && TS.storage.rememberLastCacheTS(e.cache_ts));
          var i = function() {
            r && (r = !1, TS.info("Got pong from MS")), TS.ms.last_pong_time = Date.now(), j = !1, he();
          };
          if ("ping" === e.type || "pong" === e.type) TS.has_pri[Oe] && (t && t.ts ? TS.log(Oe, "MS msg " + e.type + " time: " + (Date.now() - t.ts) + " ms") : TS.log(Oe, "MS msg " + e.type + " time: " + Date.now() + " ms (no sent.ts)")), a && (Date.now() - s > x ? (TS.metrics.measureAndClear("ms_ping_pong_latency", "ms_ping_sent"), s = Date.now()) : TS.metrics.clearMarks("ms_ping_sent")), i(), TS.has_pri[Oe] && TS.dir(Oe, e);
          else {
            var o = Date.now() - TS.ms.last_pong_time;
            if (j && o > I && (TS.has_pri[Oe] && TS.log(Oe, "MS msg being used as an implicit pong due to excessive delay (" + o + "ms)"), i(), a && TS.metrics.clearMarks("ms_ping_sent")), ge(e), TS.has_pri[Oe]) {
              if (t) {
                var l = e.type || e.SENT_MSG.type || "";
                TS.log(Oe, "msg " + (l ? '"' + l + '" ' : "") + "rsp time " + (Date.now() - t.ts) + "ms");
              } else TS.log(Oe, 'msg "' + e.type + '"');
              TS.dir(Oe, e);
            }
          }
          "error" === e.type ? oe(e) : "hello" === e.type ? le(e) : e.reply_to || (d && TS.metrics.mark("ms_queue_processing_start"), TS.ms.on_msg_sig.dispatch(e), d && TS.metrics.measureAndClear("ms_queue_starvation_time", "ms_queue_processing_start")), t && (e.ok || "flannel" !== e.type || (e.ok = !0), e.ok || (e.error = e.error || {
            code: TS.ms.errors.UNKNOWN,
            msg: "unknown error (not specified by MS)"
          }), n && (e.ok = !0), t.handler && t.handler(e.ok, e), TS.client && TS.client.stats.isEnabled() && e.SENT_MSG && "message" === e.SENT_MSG.type && TS.metrics.measureAndClear("message_server_reply_and_render", "user_message_unprocessed_" + e.reply_to));
        },
        storeLastEventTS: function(e, t) {
          if (e) {
            var n = l || TS.storage.fetchLastEventTS();
            n && e <= n || (t || (t = "???"), o = t + " at " + Date.now() / 1e3, l = e, TS.storage.storeLastEventTS(e));
          }
        },
        onFailure: function(e) {
          if (TS.warn("TS.ms.onFailure reason_str:" + e), e && te("You got disconnected, so here are some details:\n>>>" + e), j = !1, clearInterval(M), clearInterval(C), k = !1, TS.info("Deprecating current socket in onFailure with reason: " + e), ne(4003, "Disconnecting due to failure. Reason: " + e), t) TS.ms.logConnectionFlow("on_goodbye_failure"), T = 0;
          else if (TS.model.ms_connected) TS.info("Disconnected from MS, TS.model.rtm_start_throttler:" + TS.model.rtm_start_throttler), TS.ms.logConnectionFlow("on_connected_failure"), T = 100;
          else {
            TS.ms.logConnectionFlow("on_notconnected_failure"), T = 2 * (T + 1e3);
            var n = T;
            T > 4e3 && (T = _.random(n, n + n / 2)), T = Math.min(T, 3e5);
          }
          if (!de() && TS.model.rtm_start_throttler > 5) {
            var i = 2e3 * TS.model.rtm_start_throttler;
            T < i && (TS.info("because TS.model.rtm_start_throttler:" + TS.model.rtm_start_throttler + " we are increasing time until next login call"), T = i);
          }
          return TS.model.ms_connected && (TS.model.ms_connected = !1, TS.ms.disconnected_sig.dispatch()), S ? void TS.warn("NOT doing startReconnection(), we are asleep") : TS.api.isPaused() ? (TS.warn("NOT doing startReconnection() because TS.api.isPaused(), but will try after it unpauses"), void TS.api.unpaused_sig.add(function() {
            TS.info("MS: starting reconnection after socket failure, having waited for API to unpause"), TS.ms.startReconnection();
          })) : (TS.info("MS: starting reconnection after socket failure"), void TS.ms.startReconnection());
        },
        startReconnection: function() {
          b = Date.now() + T, T ? (TS.console.logStackTrace("Attempting to reconnect in " + T + "ms"), clearTimeout(H), H = setTimeout(function() {
            TS.model.window_unloading || TS.ms.startReconnectionImmediately();
          }, T)) : (TS.console.logStackTrace("Attempting to reconnect immediately"), TS.ms.startReconnectionImmediately()), clearInterval(D), D = setInterval(ie, R), ie();
        },
        startReconnectionImmediately: function() {
          TS.info("MS wants to reconnect because of a start call"), clearTimeout(H), v && de() ? TS.ms.fastReconnect() : (v && ce(), TS.ms.reconnect_requested_sig.dispatch());
        },
        manualReconnectNow: function() {
          TS.ms.logConnectionFlow("manual_reconnect"), clearTimeout(H), clearInterval(D), clearTimeout(A), U = 0, TS.model.window_unloading || (TS.info("MS wants to reconnect because of a user interaction"), TS.ms.reconnect_requested_sig.dispatch(), TS.ms.reconnecting_sig.dispatch(0));
        },
        disconnect: function(e, n) {
          if ($ && $.readyState != WebSocket.CLOSED) {
            t = !!e, TS.ms.logConnectionFlow("disconnect"), TS.model.ms_connected ? TS.info("TS.ms.disconnect called; closing the socket") : TS.info("TS.ms.disconnect called while we have a WebSocket but are not connected; closing the socket");
            var i = "Disconnecting because TS.ms.disconnect was called. was_requested_by_server = " + !!e;
            _.isString(n) && n.length && (i = n + " was_requested_by_server = " + !!e, i = i.slice(0, 120)), $.close(4005, i), TS.model.ms_connected = !1, TS.ms.disconnected_sig.dispatch();
          } else TS.warn("TS.ms.disconnect called, but _websocket=" + $ + " TS.model.ms_connected=" + TS.model.ms_connected);
        },
        logConnectionFlow: function(e) {
          var t = TS.model.ms_conn_log,
            n = Date.now();
          t.push({
            name: e,
            time: n,
            delta: t.length ? n - t[t.length - 1].time : 0
          }), TS.has_pri[Oe] && TS.log(Oe, "logConnectionFlow " + e + " " + t[t.length - 1].delta);
        },
        getConnectionFlowLog: function() {
          for (var e = TS.model.ms_conn_log, t = [], n = 0; n < e.length; n += 1) t.push(encodeURIComponent(e[n].name + "-" + (e[n].delta ? Math.round(e[n].delta / 1e3) : 0) + "-" + Math.round(e[n].time / 1e3)));
          return TS.has_pri[Oe] && TS.dir(Oe, TS.model.ms_conn_log), "_x_connection_log=" + t.join(",");
        },
        connectImmediately: function(e) {
          if (e || (e = TS.model.team.url), !e) throw new Error("No WebSocket URL for us to connect to! 😱");
          e = me(e), xe(e), ve();
        },
        connectProvisionallyAndFetchRtmStart: function(e) {
          return e || (e = TS.model.team.url), e = me(e), xe(e), TS.boot_data.ws_refactor_bucket && TS.metrics.count("ms_flow_connect_prov"), be();
        },
        hasProvisionalConnection: function() {
          return !!f;
        },
        hasOpenWebSocket: function() {
          return _.get($, "readyState") == WebSocket.OPEN;
        },
        promiseToHaveOpenWebSocket: function() {
          return TS.ms.hasOpenWebSocket() ? Promise.resolve() : (n || (n = new Promise(function(e) {
            i = e;
          })), n);
        },
        finalizeProvisionalConnection: function() {
          return TS.boot_data.ws_refactor_bucket && TS.metrics.count("ms_flow_finalize_prov"), ke();
        },
        fastReconnect: function() {
          TS.info("Trying fast reconnect"), TS.ms.calling_test_fast_reconnect = !0, TS.api.callImmediately("rtm.checkFastReconnect").then(function(e) {
            var t = e.data;
            TS.reloadIfVersionsChanged(t) || (TS.boot_data.ws_refactor_bucket && TS.metrics.count("ms_flow_fast_reconnect"), TS.ms.connectImmediately(G));
          }, function(e) {
            var t = e.data,
              n = t && t.error;
            n && "_http_error" !== n && ce(), TS.ms.onFailure("rtm.checkFastReconnect returned not-OK. error: " + n);
          }).finally(function() {
            TS.ms.calling_test_fast_reconnect = !1, ce();
          });
        },
        setReconnectUrl: function(e) {
          G = e, W = Date.now();
        },
        getReconnectUrl: function() {
          return G;
        },
        sleep: function() {
          if (!S && TS.model.ms_connected) {
            S = !0;
            TS.ms.disconnect(!1, "Disconnecting because client is going to sleep");
          }
        },
        wake: function() {
          S && ($ && (ee(null, "Forcing disconnect because we are trying to wake up"), ne(4e3, "Forcing a disconnect of an old socket while waking up")), e = void 0, t = void 0, S = !1, TS.info("MS: starting reconnection after waking"), TS.ms.startReconnection());
        }
      });
      var e, t, n, i, r, a, s, o, l, d, c, u, m, p, f, h, g, S = !1,
        T = 0,
        b = 0,
        v = !1,
        y = 0,
        w = new signals.Signal,
        k = !1,
        x = 3e5,
        M = 0,
        C = 0,
        I = 7e3,
        A = 0,
        E = 0,
        O = 1e4,
        F = 0,
        B = 0,
        D = 0,
        R = 1e3,
        H = 0,
        $ = null,
        P = 0,
        j = !1,
        L = 0,
        U = 0,
        N = null,
        G = null,
        W = null,
        q = !1,
        z = function(e) {
          L = e ? 6e4 : 12e4, L += 1e4, TS.has_pri[Oe] && TS.log(Oe, "MS _pong_timeout_ms set to:" + L + " has_focus:" + e);
        },
        K = function(e) {
          var t = e.data;
          if (0 === t.charCodeAt(t.length - 1)) {
            var n = t.indexOf("\0");
            n >= 0 && (t = t.slice(0, n));
          }
          TS._count_bytes_received && (TS._bytes_received += t.length);
          var i = JSON.parse(t);
          TS.ms.handleMsg(i);
        },
        V = function() {
          clearTimeout(A), U = 0, Ae(), v ? (ce(), TS.metrics.measureAndClear("ms_fast_reconnect", "ms_websocket_create"), q = !0) : (TS.metrics.measureAndClear("ms_connect", "ms_websocket_create"), q = !1), h && TS.ms.send({
            type: "mp_command",
            subtype: "login",
            url: me(TS.model.team.url)
          }), Me(), $.onmessage = K, TS.model.ms_conn_log.length = 0, TS.info("MS WS connected!"), TS.ms.logConnectionFlow("on_connect"), clearTimeout(F), F = setTimeout(re, 3e4);
        },
        Y = function() {
          TS.client && TS.shared.maybeFetchHistoryAndThenCheckConsistency(TS.shared.getActiveModelOb());
        },
        J = function(e) {
          var t = e.args,
            n = e.data;
          if (TS.error("_onEventLogError " + n), TS.client && n && "timestamp_too_old" === n.error) {
            TS.storage.completelyEmptyAllStorageAndReset();
            var i = "TS.reload() after a TS.storage.completelyEmptyAllStorageAndReset() because data.error: <code>timestamp_too_old</code>";
            n.reason && (i += " data.reason: <code>" + n.reason + "</code>"), t && delete t.token;
            try {
              i += " args: <pre>" + JSON.stringify(t, null, "\t") + "</pre>";
            } catch (e) {}
            return TS.boot_data && TS.boot_data.feature_tinyspeck && (i += "<p><b>Tell #dhtml about this, please!</b></p>"), setTimeout(function() {
              TS.reload(null, i);
            }, 1), null;
          }
          return Y(), null;
        },
        Q = function(e) {
          var t = e.data;
          if (!t.events) return TS.error("_onEventLogOK missing events"), Y(), null;
          if (TS.client && t.has_more) return setTimeout(function() {
            TS.reload(null, "event log data.has_more: " + t.has_more + ")");
          }, 1), null;
          var n, i, r = [],
            a = {},
            s = function(e) {
              if (e._from_evt_log = !0, i = null, n = n || e.event_ts, "file_change" === e.type && e.file && e.file.id ? i = e.type + e.file.id : "user_change" === e.type && e.user && e.user.id ? i = e.type + e.user.id : "emoji_changed" === e.type ? i = e.type : "channel_history_changed" === e.type && e.channel ? (TS.info("eventlog: channel_history_changed for " + e.channel), i = e.type + e.channel) : "group_history_changed" === e.type && e.channel ? (TS.info("eventlog: group_history_changed for " + e.channel), i = e.type + e.channel) : "im_history_changed" === e.type && e.channel && (TS.info("eventlog: im_history_changed for " + e.channel), i = e.type + e.channel), i) {
                if (a[i]) return;
                a[i] = !0, r.unshift(e);
              } else if ("slack_broadcast" === e.type) {
                if (!e.reload) return;
                var t = N;
                t ? !t.force_reload && e.force_reload && (N = e) : N = e;
              } else r.unshift(e);
            };
          if (_.forEachRight(t.events, s), r.forEach(function(e) {
              try {
                TS.ms.handleMsg(e);
              } catch (e) {}
            }), n && TS.ms.storeLastEventTS(n, "eventlog"), N) {
            try {
              TS.ms.handleMsg(N);
            } catch (e) {}
            N = null;
          }
          return Y(), null;
        },
        X = function() {
          if (j) {
            var e = Date.now() - TS.ms.last_pong_time;
            if (TS.has_pri[Oe] && TS.log(Oe, "MS since_last_pong_ms:" + e + " pong_timeout_ms:" + L), !(e < L || TS.boot_data.feature_no_pong_timeout)) {
              TS.metrics.count("ms_pong_timeout"), TS.metrics.store("ms_time_since_pong", e), TS.warn("since_last_pong_ms too long! " + e + " > " + L), fe(), he(), TS.warn("calling disconnect(), expect to get an onDisconnect() callback"), TS.ms.logConnectionFlow("on_ping_timeout"), TS.boot_data.ws_refactor_bucket && TS.metrics.count("ms_flow_trouble_connecting"), TS.ms.trouble_sig.dispatch(), j = !1, te("You are on team Tiny Speck, so here are some pong details:\n>>>since_last_pong_ms too long! " + e + " > " + L + " ... calling disconnect(), expect to get an onDisconnect() callback");
              try {
                TS.ms.disconnect(!1, "Disconnecting because of pong timeout"), clearTimeout(B), B = setTimeout(function() {
                  TS.info("called disconnect, no onDisconnect callback happened in 5000ms, so calling _onDisconnect() manually now"), ee(null, "since_last_pong_ms too long! then called disconnect, but no onDisconnect callback happened in 5000ms, so calling _onDisconnect() manually now");
                }, 5e3);
              } catch (e) {
                TS.info("since_last_pong_ms too long! then an error calling disconnect, going to assume it is because it is already closed, calling _onDisconnect() manually now"), TS.warn(e), ee(null, "error calling disconnect, going to assume it is because it is already closed, calling _onDisconnect() manually now");
              }
            }
          }
        },
        Z = function() {
          TS.ms.send({
            type: "ping"
          }), j && k && (TS.info("Sent another ping to MS; prior ping was never replied to"), r = !0), a && TS.metrics.mark("ms_ping_sent"), j = !0, k = !0;
        },
        ee = function(n, i) {
          S || (e = e || performance.now()), !i && t && (i = "disconnected after a goodbye message"), i = i || "_onDisconnect called with event:" + n, TS.info("MS WS disconnected"), TS.ms.logConnectionFlow("on_disconnect"), clearTimeout(B), clearTimeout(F), clearTimeout(A), h = !1, f = !1, Ie(), n ? (TS.info("_onDisconnect event.code:" + n.code), n.code == TS.ms.errors.CONNECTION_TROUBLE && (TS.info("TS.ms: This was an unexpected WebSocket disconnection"), TS.boot_data.ws_refactor_bucket && TS.metrics.count("ms_flow_unexpected_close"), T && (TS.info("TS.ms: resetting ms_reconnect delay"), T = 0), TS.model.rtm_start_throttler && (TS.info("TS.ms: resetting rtm.start throttler"), TS.model.rtm_start_throttler = 0))) : TS.info("no event"), de() && (v = !0), TS.ms.onFailure(i);
        },
        te = function(e) {},
        ne = function(e, t) {
          if (TS.model.ms_connecting = !1, $) {
            $.onclose = null, $.onerror = null, $.onmessage = null, $.onopen = null;
            try {
              t && (t = t.slice(0, 120)), $.close(e, t);
            } catch (e) {
              TS.info("Problem while deprecating current socket: " + e);
            }
            var n = $;
            $ = void 0, w.dispatch(n);
          }
          f = !1, Ie();
        },
        ie = function() {
          var e = b - Date.now(),
            t = Math.round(e / 1e3);
          t >= 0 && TS.ms.reconnecting_sig.dispatch(t), TS.model.window_unloading && clearInterval(D);
        },
        re = function() {
          var e = "socket received no hello msg 30000ms after connection";
          TS.warn(e), TS.ms.logConnectionFlow("_onHelloTimeout"), TS.ms.onFailure(e);
        },
        ae = function() {
          U += 1;
          var e = "socket not connected " + E + "ms after creation. _connect_timeout_count:" + U;
          if (TS.warn(e), TS.ms.logConnectionFlow("_onConnectTimeout"), 3 == U) return void TS.client.showConnectionTroubleDialog();
          if (2 == U)
            if (window.WEB_SOCKET_USING_FLASH);
            else if (TS.model.is_chrome_desktop) return void(O = 2e4);
          TS.ms.onFailure(e);
        },
        se = function(e) {
          var t = "";
          e && (e.name && (t += " e.name=" + e.name), e.message && (t += " e.message=" + e.message), e.data && (t += " e.data=" + e.data)), TS.warn("_onError err_str: " + t), TS.dir(0, e);
        },
        oe = function(e) {
          e.error ? e.error.code == TS.ms.errors.BAD_TOKEN ? (TS.ms.logConnectionFlow("msg_error_code_1"), ce()) : (e.error.code == TS.ms.errors.RATE_LIMIT && (TS.client.activateMsgRateLimit({
            notify_user: !0
          }), TS.ms.connected_sig.addOnce(TS.client.deactivateMsgRateLimit)), TS.info("_onErrorMsg imsg.error.msg: " + e.error.msg + ", imsg.error.code: " + e.error.code), TS.ms.onFailure("_onErrorMsg imsg.error: " + JSON.stringify(e.error))) : TS.info("_onErrorMsg imsg: " + (e ? JSON.stringify(e) : "no imsg?"));
        },
        le = function(e) {
          clearTimeout(F);
          var t = Date.now() - TS.ms.last_pong_time;
          TS.info("Hello msg recvd, since_last_pong_ms:" + t), e && TS.info("host_id: " + _.get(e, "host_id") + ", server_version: " + _.get(e, "server_version")), TS.ms.logConnectionFlow("on_hello"), TS.client && t > 3e5 && !q && TS.client.ui.maybePromptForSetActive(), T = 0, clearInterval(D), j = !0, TS.ms.last_pong_time = Date.now(), clearInterval(M), M = setInterval(X, 3e3), clearInterval(C), C = setInterval(Z, 1e4), TS.model.ms_connecting = !1, TS.model.ms_connected = !0;
          var n = l || TS.storage.fetchLastEventTS();
          !!y && (n && !q ? (TS.info("calling eventlog.history with start:" + n + " (from TS.storage.fetchLastEventTS())"), o && TS.info("last_event_ts is from " + o), TS.api.callImmediately("eventlog.history", {
            start: n,
            count: 2e3,
            no_payload_if_has_more: !0,
            batch_deleted_files: !0
          }).then(Q).catch(J).finally(_.noop)) : TS.client && TS.shared.maybeFetchHistoryAndThenCheckConsistency(TS.shared.getActiveModelOb())), TS.ms.connected_sig.dispatch(q), y += 1, Z();
        },
        de = function() {
          return !!TS.ms.fast_reconnects_enabled && (!!G && (!!TS.utility.url.isValidSlackWebSocketUrl(G) && (Date.now() - W < 3e5 || (ce(), !1))));
        },
        ce = function() {
          v = !1, G = null, W = null;
        },
        _e = function(e) {
          var t = [],
            n = function() {
              if ("function" == typeof e) {
                if (!1 === e.apply(this, arguments)) return;
              }
              t.push({
                this_arg: this,
                args: arguments
              });
            };
          return n.replay = function(e) {
            t.forEach(function(t) {
              e.apply(t.this_arg, t.args);
            }), t.length = 0;
          }, n;
        },
        ue = function() {
          E = window.WEB_SOCKET_USING_FLASH ? 2e4 : O, clearTimeout(A), A = setTimeout(ae, E);
        },
        me = function(e) {
          return e = TS.utility.url.setUrlQueryStringValue(e, "version_uid", TS.boot_data.version_uid), e = TS.utility.appendLogToUrlWithLimit(e, TS.ms.getConnectionFlowLog()), e = TS.utility.url.setUrlQueryStringValue(e, "batch_presence_aware", 1);
        },
        pe = [],
        fe = function() {
          TS.info("Previous imsg events:\n========" + pe.join("\n") + "========");
        },
        he = function() {
          pe.length = 0;
        },
        ge = function(e) {
          e = e.SENT_MSG || e;
          var t = e.subtype ? e.type + "." + e.subtype : e.type;
          pe.push(TS.makeLogDate() + t);
        },
        Se = function() {
          TS.info("Finalizing provisional MS connection"), $.readyState != WebSocket.OPEN && ue(), c.replay(V), u.replay(ee), m.replay(se), p.replay(K), $.onopen = V, $.onclose = ee, $.onerror = se, c = void 0, u = void 0, m = void 0, p = void 0;
        },
        Te = function(e) {
          if (!TS.utility.url.isValidSlackWebSocketUrl(e)) return TS.error("Tried to connect to a WebSocket URL that doesn’t look right; aborting"), TS.ms.onFailure("Invalid WebSocket URL"), !1;
          TS.lazyLoadMembersAndBots() && (e = TS.utility.url.setUrlQueryStringValue(e, "flannel", 1), e = TS.utility.url.setUrlQueryStringValue(e, "token", TS.boot_data.api_token), e = TS.utility.url.setUrlQueryStringValue(e, "no_annotations", 1), "dev" === TS.boot_data.version_ts && TS.boot_data.should_use_flannel && (e = TS.utility.url.setUrlQueryStringValue(e, "api_url", TS.boot_data.flannel_api_url)), we() && (e = TS.utility.url.setUrlQueryStringValue(e, "canary", 1)), TS.has_pri[Fe] && TS.log(Fe, "Connecting to Flannel..." + e)), TS.ms.logConnectionFlow("connect");
          var t = e.replace(TS.boot_data.api_token, "REDACTED");
          TS.info("Connecting to: " + t), clearTimeout(A), TS.ms.last_url = e, TS.ms.last_start_ms = Date.now(), TS.metrics.mark("ms_websocket_create");
          try {
            $ = new WebSocket(e);
          } catch (e) {
            return TS.warn("failed to create new WebSocket"), TS.error(e), TS.ms.onFailure("failed to create new WebSocket"), !1;
          }
          return !0;
        },
        be = function() {
          TS.info("Initializing provisional MS connection and fetching rtm.start over the socket"), f = !0;
          var e = $;
          return new Promise(function(t, n) {
            var i = function(t) {
                TS.warn("Giving up on rtm.start-over-MS attempt"), clearTimeout(a), a = void 0, n(t), TS.ms.disconnected_sig.dispatch(), w.remove(r), $ && $ == e && ne(4001, "Deprecating socket because we are aborting an rtm start attempt");
              },
              r = function(t) {
                t !== e && (TS.warn("Received a call to abort RTM start attempt for a websocket that is not the current websocket, this should not be happening!"), TS.info("current_websocket defined?", !!e, "recently_deprecated_socket defined?", !!t)), i(new Error("Socket was deprecated"));
              };
            w.addOnce(r), Ce();
            var a = setTimeout(function() {
              TS.warn("Provisional WebSocket timed out"), i(new Error("Waited 90000 ms for rtm.start response but didn’t get one"));
            }, 9e4);
            c = _e(Me), u = _e(function() {
              TS.warn("Provisional WebSocket got disconnected"), i(new Error("WebSocket got disconnected"));
            }), m = _e(function(e) {
              TS.warn("Provisional WebSocket encountered an error");
              var t = new Error("WebSocket got error");
              t.event = e, i(t);
            }), p = _e(function(e) {
              var n = JSON.parse(e.data);
              if ("flannel" === n.type && "user_query_response" === n.subtype) {
                if (!n.reply_to) return void TS.error("Received a pre-connection Flannel query response without a reply_to field: " + e.data);
                if (!TS.ms.sent_map[n.reply_to.toString()]) return void TS.error("Received a pre-connection Flannel query response for a query we did not send: " + e.data);
                var s = ye(n);
                return s && _.isFunction(s.handler) && s.handler(n.ok, n), !1;
              }
              if (TS.info("Provisional WebSocket received a message of type " + n.type), "hello" === n.type)
                if (clearTimeout(a), a = void 0, n.flannel && n.start) {
                  var o = n.start;
                  t(o), w.remove(r);
                } else i(new Error("`hello` imsg did not include rtm.start data"));
              else if ("error" === n.type) {
                var l = JSON.stringify(n);
                TS.info('Provisional WebSocket "error" message: ' + l);
                var d = new Error("WebSocket returned an error: " + l);
                d.data = {
                  error: _.get(n, "error.msg")
                }, i(d);
              }
            }), $.onclose = u, $.onerror = m, $.onmessage = p, $.onopen = c, setTimeout(function() {
              $ && $.readyState == WebSocket.CLOSED && i(new Error("WebSocket already closed; maybe internet is offline?"));
            }, 100);
          }).catch(function(e) {
            throw TS.logError(e, "rtm-start-over-MS error", "error on rtm start"), e;
          });
        },
        ve = function() {
          $.onopen = V, $.onclose = ee, $.onerror = se, ue();
        },
        ye = function(e) {
          if (e.reply_to) {
            var t = TS.ms.sent_map[e.reply_to];
            if (t) return TS.client && TS.client.stats.isEnabled() && t.msg && "message" === t.msg.type && TS.metrics.measureAndClear("message_server_reply", "user_send_message_" + e.reply_to), e.SENT_MSG = t.msg, delete TS.ms.sent_map[e.reply_to], t;
          }
        },
        we = function() {
          var e = _.get(TS, "model.prefs.flannel_server_pool", TS.boot_data.flannel_server_pool);
          switch (TS.boot_data.feature_tinyspeck || TS.boot_data.feature_flannel_use_canary_sometimes || (e = "production"), e) {
            case "canary":
              return !0;
            case "random":
              return 0 == _.random(0, 1);
            case "production":
            default:
              return !1;
          }
        },
        ke = function() {
          return Ie(), f && !$ ? (f = !1, TS.warn("Tried to finalize provisional connection while _did_make_provisional_connection flag is true, but there is no _websocket. This is a programming error."), !1) : f ? (f = !1, Se(), !0) : (TS.warn("Tried to finalize provisional connection while _did_make_provisional_connection flag is false. This is a programming error."), !1);
        },
        xe = function(e) {
          if ($ && $.readyState == WebSocket.OPEN) throw TS.warn("TS.ms has an open WebSocket but we are trying to connect; TS.model.ms_connected = " + TS.model.ms_connected + "; TS.model.ms_connecting = " + TS.model.ms_connecting), new Error("TS.ms.connect called but we are already connected. This is a programming error.");
          if (!Te(e)) throw new Error("Error creating WebSocket for URL " + e);
          TS.model.ms_connecting = !0;
        },
        Me = function() {
          i && (i(), n = void 0, i = void 0);
        },
        Ce = function() {
          Ie(), TS.qs_args.no_prov_timeout || (g = setTimeout(function() {
            f ? (TS.boot_data.ws_refactor_bucket && TS.metrics.count("ms_flow_prov_timeout"), TS.warn("Giving up on provisional connection because no one ever finalized it"), ne(4002, "Deprecating socket because the provisional connection was never finalized")) : TS.warn("Provisional connection timed out, but it does not look like we have a provisional connection");
          }, 6e4));
        },
        Ie = function() {
          g && (clearTimeout(g), g = void 0);
        },
        Ae = function() {
          if (e) {
            var n = performance.now(),
              i = n - e,
              r = t ? "ms_reconnect_after_goodbye_duration" : "ms_reconnect_other_duration";
            TS.metrics.store(r, i);
          }
          e = void 0, t = void 0;
        },
        Ee = 50,
        Oe = 2,
        Fe = 1989;
    }();
  },
  2489: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("msg_edit", {
        editing: !1,
        editing_in_msg_pane: !1,
        editing_in_convo_pane: !1,
        deleting_from_editing: !1,
        current_msg: null,
        current_model_ob: null,
        mousedown_active: !1,
        edit_interv: 0,
        onStart: function() {},
        onCountDownInterval: function() {
          if (TS.msg_edit.current_msg) {
            if (-1 == TS.model.team.prefs.msg_edit_window_mins || _.get(TS.msg_edit.current_model_ob, "is_self_im")) return void $("#edit_countdown").empty();
            var e = TS.interop.datetime.toDateObject(TS.msg_edit.current_msg.ts).getTime() + 60 * TS.model.team.prefs.msg_edit_window_mins * 1e3,
              t = Math.floor((e - Date.now()) / 1e3);
            t < 1 ? $("#edit_countdown").html(TS.i18n.t("(your time to edit ran out)", "msg_edit")() + "&nbsp&nbsp&nbsp&nbsp") : t < 61 ? $("#edit_countdown").html(TS.i18n.t("(you have <strong>{seconds_count, number}</strong> seconds)", "msg_edit")({
              seconds_count: t
            }) + "&nbsp&nbsp&nbsp&nbsp") : $("#edit_countdown").empty();
          }
        },
        cancelEditingINothingHasChanged: function() {
          if (!TS.msg_edit.editing) return !0;
          var e = TS.format.unFormatMsg(TS.msg_edit.current_msg.text);
          return TS.utility.contenteditable.value($("#message_edit_form").find("#msg_text")) === e && (TS.msg_edit.onCancelEdit(), !0);
        },
        editExpiration: function(e) {
          if (e > 0) {
            var n = t(e);
            return TS.model.user.is_admin ? '<p class="no_bottom_margin">' + TS.i18n.t('On this team, you can’t edit a message after more than <strong>{msg_edit_duration_text}</strong>. Admins can adjust this in <a href="/admin/settings#message_editing" target="_new">Team&nbsp;Settings</a>.', "msg_edit")({
              msg_edit_duration_text: n
            }) + "</p>" : '<p class="no_bottom_margin">' + TS.i18n.t("On this team, you can’t edit a message after more than <strong>{msg_edit_duration_text}</strong>. Admins can adjust this in Team&nbsp;Settings.", "msg_edit")({
              msg_edit_duration_text: n
            }) + "</p>";
          }
          return TS.model.user.is_admin ? '<p class="no_bottom_margin">' + TS.i18n.t('On this team, you can’t edit messages after the fact. Admins can adjust this in <a href="/admin/settings#message_editing" target="_new">Team&nbsp;Settings</a>.', "msg_edit")() + "</p>" : '<p class="no_bottom_margin">' + TS.i18n.t("On this team, you can’t edit messages after the fact. Admins can adjust this in Team&nbsp;Settings.", "msg_edit")() + "</p>";
        },
        startEdit: function(t, n, i) {
          if ($("#message_edit_form").length && !TS.msg_edit.cancelEditingINothingHasChanged()) return void TS.msg_edit.promptEdit();
          if (!t) return TS.error("no msg_ts?"), null;
          if (!n) return TS.error("no model_ob?"), null;
          if (!n.msgs) return TS.error("no model_ob.msgs?"), null;
          var r = TS.utility.msgs.getMsg(t, e(n));
          if (r || (r = TS.ui.replies.getActiveMessage(n, t)), TS.model.threads_view_is_showing && !r && (r = TS.client.threads.getMessage(n, t)), !r) return TS.error("no msg in msgs?"), null;
          if (TS.boot_data.feature_thanks && r._handy_rxns_poll_data) return TS.ui.handy_rxns.startPollDialog(n.id, t);
          if (TS.boot_data.feature_react_messages) return void TS.redux.dispatch(TS.interop.redux.features.messagePane.startEditingMessage(t));
          var a = TS.format.unFormatMsg(r.text);
          if (!i || !i.force_reopen) {
            var s = Date.now(),
              o = TS.interop.datetime.toDateObject(r.ts),
              l = s - o,
              d = l / 6e4;
            if (TS.model.team.prefs.msg_edit_window_mins >= 0 && d > TS.model.team.prefs.msg_edit_window_mins && !n.is_self_im) {
              TS.warn("Editing unavailable on channel " + n.id + ", msg with ts = " + r.ts + ". now = " + s + ", elapsed (minutes) = " + d + ", msg_edit_window_mins = " + TS.model.team.prefs.msg_edit_window_mins);
              var c = TS.model.team.prefs.msg_edit_window_mins > 0 ? TS.i18n.t("This message can’t be edited", "msg_edit")() : TS.i18n.t("Messages can’t be edited", "msg_edit")();
              return void TS.generic_dialog.alert(TS.msg_edit.editExpiration(TS.model.team.prefs.msg_edit_window_mins), c, TS.i18n.t("Got It", "msg_edit")());
            }
          }
          var u, m = TS.client && TS.client.ui.areMsgsScrolledToBottom();
          if ("convo" === i ? (TS.msg_edit.editing_in_msg_pane = !1, TS.msg_edit.editing_in_convo_pane = !0, u = TS.msg_edit.getDivForMsgInConvoPane(r.ts)) : (TS.msg_edit.editing_in_msg_pane = !0, TS.msg_edit.editing_in_convo_pane = !1, u = TS.msg_edit.getDivForMsgInMsgPane(r.ts)), !u.length) return TS.error("no msg div for edit"), null;
          TS.msg_edit.current_msg = r, TS.msg_edit.current_model_ob = n, u.addClass("hidden");
          var p = a;
          i && i.text && (p = i.text);
          var f = TS.templates.message_edit_form({
            msg: r,
            edit_text: p,
            permalink: TS.utility.msgs.constructMsgPermalink(n, r.ts, r.thread_ts),
            include_emo: !!TS.client,
            relative_ts: TS.utility.msgs.isMsgReply(r)
          });
          u.after(f);
          var h = $("#message_edit_form"),
            g = h,
            S = h.find("#msg_text");
          TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() && (TS.utility.contenteditable.create(S, {
            modules: {
              tabcomplete: {
                positionMenu: function(e) {
                  e.style.width = S.outerWidth() + "px", TS.tabcomplete.positionUIRelativeToInput(e, S);
                }
              }
            },
            onEnter: function() {
              return TS.msg_edit.checkAndSubmit(S, h), !1;
            },
            onEscape: function() {
              TS.model.menu_is_showing || TS.model.dialog_is_showing || setTimeout(TS.msg_edit.onCancelEdit, 0);
            },
            onTextChange: function() {
              TS.msg_edit.checkLengthAndUpdateMessage(S);
            }
          }), TS.utility.contenteditable.enable(S), S.on("keyup", function() {
            if (!TS.utility.contenteditable.cursorPosition(S).length) {
              var e = TS.client && TS.client.ui.getCachedDimensionsRect("cached_msgs_scroller_rect", TS.client.ui.$msgs_scroller_div);
              (!TS.client || h.outerHeight() < e.height) && g.find(".edit_controls").scrollintoview({
                px_offset: -50
              });
            }
          }), TS.utility.contenteditable.value(S, p)), TS.msg_edit.checkLengthAndUpdateMessage(S), TS.info("message_edit_form added"), TS.msg_edit.editing = !0, h.bind("destroyed", function() {
            TS.utility.contenteditable.unload($("#message_edit_form #msg_text")), TS.info("message_edit_form removed"), TS.msg_edit.editing = !1, TS.msg_edit.editing_in_msg_pane = !1, TS.msg_edit.editing_in_convo_pane = !1, TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() || TSSSB.call("inputFieldRemoved", S.get(0)), h = null, S = null, TS.msg_edit.resetEditUI();
          }), TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() || S.TS_tabComplete({
            complete_cmds: !1,
            complete_channels: !0,
            complete_user_groups: !0,
            complete_emoji: !0,
            complete_member_specials: !0,
            no_tab_out: !0,
            onComplete: function(e, t) {
              TS.utility.populateInput(S, e, t);
            },
            sort_by_membership: !0,
            include_self: !!TS.boot_data.feature_name_tagging_client,
            model_ob: n
          });
          var T = {
            id: "msg_edit_tab_ui",
            scroll_with_element: !!TS.client,
            model_ob: n
          };
          S.closest("#col_flex").length > 0 && (T.min_width = 300, T.narrow = !!TS.client), S.tab_complete_ui(T), TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() || TSSSB.call("inputFieldCreated", S.get(0)), h.bind("submit", function(e) {
            e.preventDefault();
            var i = TS.utility.contenteditable.value(S);
            if (i === a) return void TS.msg_edit.onCancelEdit();
            if (!i) {
              var s = TS.utility.msgs.getMsgActions(r, n),
                o = TS.boot_data.feature_new_broadcast && u.attr("id") === TS.templates.makeMsgDomIdInConversation(t) || u.attr("id") === TS.templates.makeMsgDomIdInThreadsView(t);
              return void(TS.boot_data.feature_new_broadcast && s.remove_broadcast && !o ? TS.msg_edit.startRemoveBroadcast(TS.msg_edit.current_msg.ts, TS.msg_edit.current_model_ob, !0) : s.delete_msg ? TS.msg_edit.startDelete(TS.msg_edit.current_msg.ts, TS.msg_edit.current_model_ob, TS.msg_edit.onCancelEdit, !0) : TS.msg_edit.onConfirmEdit("~" + r.text.replace(/~/g, "") + "~"));
            }
            var l = TS.ui.needToBlockAtChannelKeyword(i, null, TS.msg_edit.current_model_ob.id);
            if (l) return void TS.generic_dialog.alert("<p>" + TS.i18n.t("A Team Owner has restricted the use of <strong>{blocked_keyword}</strong> messages.", "msg_edit")({
              blocked_keyword: _.escape(l)
            }) + "</p>");
            $.trim(i) && TS.msg_edit.onConfirmEdit(i);
          }), TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() || (S.bind("textchange", function() {
            TS.msg_edit.checkLengthAndUpdateMessage(S);
          }).bind("keyup", function() {
            var e, t = TS.client && TS.client.ui.getCachedDimensionsRect("cached_msgs_scroller_rect", TS.client.ui.$msgs_scroller_div);
            window.getSelection && (e = window.getSelection()) && e.toString && !e.toString() && (!TS.client || h.outerHeight() < t.height) && g.find(".edit_controls").scrollintoview({
              px_offset: -50
            });
          }).bind("keydown", function(e) {
            if (e.which == TS.utility.keymap.enter && (e.ctrlKey || e.altKey)) {
              if (!TS.model.is_mac || TS.model.is_FF || TS.model.is_electron || TS.model.is_chrome_desktop) {
                var t = S.getCursorPosition(),
                  n = S.val();
                S.val(n.substr(0, t) + "\n" + n.substr(t)), S.trigger("autosize").trigger("autosize-resize"), S.setCursorPosition(t + 1);
              }
            } else e.which == TS.utility.keymap.enter && (TS.model.prefs.enter_is_special_in_tbt && TS.utility.isCursorWithinTBTs(S) && !e.shiftKey || (TS.model.prefs.enter_is_special_in_tbt && TS.utility.isCursorWithinTBTs(S) && e.shiftKey ? (e.preventDefault(), TS.msg_edit.checkAndSubmit(S, h)) : S.tab_complete_ui("isShowing") ? e.preventDefault() : e.shiftKey || e.altKey || (e.preventDefault(), TS.msg_edit.checkAndSubmit(S, h))));
          }).autosize({
            boxOffset: 18
          }), $("body").bind("keydown.close_message_edit_form", function(e) {
            if (e.which == TS.utility.keymap.esc) {
              if (S.tab_complete_ui("isShowing") || S.tab_complete_ui("wasJustHidden")) return;
              TS.model.menu_is_showing || TS.model.dialog_is_showing || setTimeout(TS.msg_edit.onCancelEdit, 0);
            }
          })), h.find("#commit_edit").bind("click", function() {
            TS.msg_edit.checkAndSubmit(S, h);
          }), h.find("#cancel_edit").bind("click", function() {
            TS.msg_edit.onCancelEdit();
          }), h.bind("mousedown", function() {
            TS.msg_edit.mousedown_active = !0;
          }), h.bind("mouseup", function() {
            TS.msg_edit.mousedown_active = !1;
          });
          var b = h.find(".emo_menu");
          b.removeClass("hidden"), b.bind("click.open_dialog", function(e) {
            TS.ui.react_emoji_menu.start({
              e: e,
              input_to_fill: "#msg_text"
            });
          }), TS.client && m && TS.client.ui.instaScrollMsgsToBottom(!1);
          var v = TS.client && TS.client.ui.getCachedDimensionsRect("cached_msgs_scroller_rect", TS.client.ui.$msgs_scroller_div);
          !TS.client || h.outerHeight() < v.height ? g.find(".edit_controls").scrollintoview({
            duration: 500,
            px_offset: -50,
            complete: function() {
              TS.msg_edit.focusAndSetCursorPosition(S, i);
            }
          }) : (TS.msg_edit.focusAndSetCursorPosition(S, i), g.find(".edit_controls").scrollintoview({
            duration: 500,
            px_offset: -50
          })), TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() ? $("#message_edit_form [contenteditable=true]").attr("spellcheck", !!TS.model.prefs.webapp_spellcheck) : $("#msg_text").attr("spellcheck", !!TS.model.prefs.webapp_spellcheck), TS.msg_edit.onCountDownInterval(), TS.msg_edit.edit_interv = setInterval(TS.msg_edit.onCountDownInterval, 1e3);
        },
        isMessageTooLong: function(e) {
          var t = TS.format.cleanMsg(TS.utility.contenteditable.value(e));
          return TS.features.isEnabled("message_input_byte_limit") ? TS.utility.msgs.charsOverLimit(t) : t.length > TS.model.input_maxlength;
        },
        updateTooLongWarning: function(e, t) {
          var n = $(e).parent().find(".edit_warning");
          t ? (n.removeClass("hidden"), TS.features.isEnabled("message_input_byte_limit") && n.text(TS.i18n.t("Your message is {diff_count, plural, =1{# character}other{# characters}} too long.", "msg_input")({
            diff_count: t
          }))) : $(e).parent().find(".edit_warning").addClass("hidden");
        },
        checkLengthAndUpdateMessage: function(e) {
          var t = TS.msg_edit.isMessageTooLong(e);
          return TS.msg_edit.updateTooLongWarning(e, t), !t;
        },
        checkAndSubmit: function(e, t) {
          TS.msg_edit.checkLengthAndUpdateMessage(e) && t.submit();
        },
        onConfirmEdit: function(e) {
          if (!TS.msg_edit.current_msg) return TS.error("no TS.msg_edit.current_msg?"), null;
          if (!e) return TS.error("no edited_text?"), null;
          var t = TS.msg_edit.editing_in_convo_pane;
          if (TS.msg_edit.commitEditInternal(e), TS.msg_edit.resetEditUI(), TS.client)
            if (t) {
              TS.ui.replies.focusReplyInput(!0);
            } else TS.view.focusMessageInput();
        },
        onCancelEdit: function() {
          if (!TS.msg_edit.current_msg) return TS.error("no TS.msg_edit.current_msg?"), null;
          var e = TS.msg_edit.editing_in_convo_pane;
          if (TS.msg_edit.resetEditUI(), TS.client)
            if (e) {
              TS.ui.replies.focusReplyInput(!0);
            } else TS.view.focusMessageInput();
        },
        resetEditUI: function() {
          if (clearInterval(TS.msg_edit.edit_interv), !TS.msg_edit.current_msg) return TS.error("no TS.msg_edit.current_msg?"), null;
          TS.msg_edit.getDivBeingEdited().removeClass("hidden"), $("#message_edit_container").remove(), TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() || $("body").unbind("keydown.close_message_edit_form");
        },
        getDivBeingEdited: function() {
          return TS.msg_edit.editing_in_msg_pane ? TS.msg_edit.getDivForMsgInMsgPane(TS.msg_edit.current_msg.ts) : TS.msg_edit.editing_in_convo_pane ? TS.msg_edit.getDivForMsgInConvoPane(TS.msg_edit.current_msg.ts) : $();
        },
        getDivForMsgInMsgPane: function(e) {
          var t = TS.model.unread_view_is_showing,
            n = TS.model.threads_view_is_showing;
          return t ? $("#" + TS.templates.makeMsgDomIdInUnreadView(e)) : n ? $("#" + TS.templates.makeMsgDomIdInThreadsView(e)) : $("#" + TS.templates.makeMsgDomId(e));
        },
        getDivForMsgInConvoPane: function(e) {
          return $("#" + TS.templates.makeMsgDomIdInConversation(e));
        },
        getAllDivsForMsg: function(e) {
          return TS.msg_edit.getDivForMsgInMsgPane(e).add(TS.msg_edit.getDivForMsgInConvoPane(e));
        },
        commitEditInternal: function(e) {
          TS.msg_edit.commitEdit(TS.msg_edit.current_msg, TS.msg_edit.current_model_ob, e);
        },
        commitEdit: function(e, n, i, r, a) {
          return e ? n ? (r || (r = 0), a || (a = 100), void TS.api.call("chat.update", {
            channel: n.id,
            ts: e.ts,
            text: TS.format.cleanMsg(i),
            _attempts: r,
            _delay_ms: a
          }, function(r, a, s) {
            if (r) {
              if (TS.web || n.is_channel && !n.is_member) {
                var o = _.extend({}, e, {
                  text: a.text,
                  edited: {
                    ts: TS.utility.date.makeTsStamp(null, "0")
                  }
                });
                TS.utility.msgs.replaceMsg(n, o);
              }
            } else {
              if (a && a.error)
                if ("message_not_found" === a.error) {
                  if (s._attempts < 10) return s._delay_ms *= 1.75, void setTimeout(function() {
                    TS.msg_edit.commitEdit(e, n, i, s._attempts, s._delay_ms);
                  }, s._delay_ms);
                  n.is_channel ? TS.channels.removeMsg(n.id, e) : n.is_im ? TS.ims.removeMsg(n.id, e) : n.is_mpim ? TS.mpims.removeMsg(n.id, e) : n.is_group && TS.groups.removeMsg(n.id, e), TS.generic_dialog.alert(TS.i18n.t("Sorry, something went wrong with editing your message. Try again in a moment.", "msg_edit")(), TS.i18n.t("Message editing failed", "msg_edit")());
                } else if ("edit_window_closed" === a.error) {
                var l = "<p>" + TS.i18n.t("Sorry, but messages can only be edited for <strong>{msg_edit_duration_text}</strong> after posting.", "msg_edit")({
                  msg_edit_duration_text: t(TS.model.team.prefs.msg_edit_window_mins)
                }) + "</p>";
                TS.model.user.is_admin && (l += "<p>" + TS.i18n.t('(To adjust the message editing window, visit <a href="/admin/settings#message_editing" target="_new">Team&nbsp;Settings</a>.)', "msg_edit")() + "</p>"), TS.generic_dialog.alert(l, TS.i18n.t("Message editing failed", "msg_edit")());
              } else "msg_too_long" === a.error ? TS.generic_dialog.alert(TS.i18n.t("Sorry, your message is too long. Please shorten it and try again.", "msg_edit")(), TS.i18n.t("Message editing failed", "msg_edit")()) : TS.generic_dialog.alert(TS.i18n.t("Sorry, something went wrong with editing your message. Try again in a moment.", "msg_edit")(), TS.i18n.t("Message editing failed", "msg_edit")());
              else TS.generic_dialog.alert(TS.i18n.t("Sorry, something went wrong with editing your message. Try again in a moment.", "msg_edit")(), TS.i18n.t("Message editing failed", "msg_edit")());
              TS.msg_edit.startEdit(e.ts, n, {
                text: i,
                force_reopen: !0
              });
            }
          })) : (TS.error("no model_ob?"), null) : (TS.error("no msg?"), null);
        },
        promptEdit: function() {
          if ("none" !== $("#message_editing_info").css("display")) return void $("#message_edit_container").scrollintoview({
            duration: 300,
            px_offset: 0
          });
          $("#message_editing_info").css("display", ""), $("#message_editing_info").css("opacity", 0), $("#message_edit_container").scrollintoview({
            duration: 300,
            px_offset: 0,
            complete: function() {
              $("#message_editing_info").transition({
                opacity: 1
              }, 250);
            }
          });
        },
        startDelete: function(t, n, i, r) {
          if (!t) return TS.error("no msg_ts?"), null;
          if (!n) return TS.error("no model_ob?"), null;
          if (!n.msgs) return TS.error("no model_ob.msgs?"), null;
          var a = TS.utility.msgs.getMsg(t, e(n));
          if (a || (a = TS.ui.replies.getActiveMessage(n, t)), TS.model.threads_view_is_showing && !a && (a = TS.client.threads.getMessage(n, t)), !a) return TS.error("no msg in msgs?"), null;
          TS.msg_edit.deleting_from_editing = !!r, TS.msg_edit.current_msg = a, TS.msg_edit.current_model_ob = n;
          var s = TS.msg_edit.getAllDivsForMsg(a.ts),
            o = '<p class="bottom_margin">' + TS.i18n.t("Are you sure you want to delete this message? This cannot be undone.", "msg_edit")() + "</p>";
          if (a.subtype) {
            var l;
            a.file && (l = "file", "snippet" === a.file.mode ? l = "snippet" : "post" === a.file.mode && (l = "post"));
            var d = "";
            "file_upload" === a.subtype ? "file" === l ? d = TS.i18n.t("Note that deleting this message will not delete the file that was uploaded.", "msg_edit")() : "snippet" === l ? d = TS.i18n.t("Note that deleting this message will not delete the snippet that was uploaded.", "msg_edit")() : "post" === l && (d = TS.i18n.t("Note that deleting this message will not delete the post that was uploaded.", "msg_edit")()) : "file_share" === a.subtype ? "file" === l ? d = TS.i18n.t("Note that deleting this message will not unshare the file.", "msg_edit")() : "snippet" === l ? d = TS.i18n.t("Note that deleting this message will not unshare the snippet.", "msg_edit")() : "post" === l && (d = TS.i18n.t("Note that deleting this message will not unshare the post.", "msg_edit")()) : "file_comment" === a.subtype && (d = TS.i18n.t("Note that deleting this message will not delete the comment.", "msg_edit")()), d && (o += "<p>" + d + "</p>");
          }
          s.addClass("delete_mode"), TS.generic_dialog.start({
            title: TS.i18n.t("Delete message", "msg_edit")(),
            body: o + TS.templates.builders.msgs.buildHTML({
              msg: a,
              model_ob: n,
              standalone: !0
            }),
            go_button_text: TS.i18n.t("Delete", "msg_edit")(),
            go_button_class: "btn_danger",
            onGo: function() {
              TS.msg_edit.deleting_from_editing && TS.msg_edit.onCancelEdit(), TS.msg_edit.commitDeleteInternal(i);
            },
            onCancel: function() {
              TS.msg_edit.onCancelDelete();
            }
          }), TS.generic_dialog.div.find("img.msg_inline_img.hidden").each(function(e, t) {
            var n = $(t);
            n.prop("src", n.data("real-src")), n.removeClass("hidden");
          });
        },
        onCancelDelete: function() {
          if (!TS.msg_edit.current_msg) return TS.error("no TS.msg_edit.current_msg?"), null;
          TS.msg_edit.getAllDivsForMsg(TS.msg_edit.current_msg.ts).removeClass("delete_mode"), TS.msg_edit.deleting_from_editing && TS.utility.contenteditable.focus($("#msg_text"));
        },
        commitDeleteInternal: function(e) {
          TS.msg_edit.commitDelete(TS.msg_edit.current_msg, TS.msg_edit.current_model_ob, TS.msg_edit.onCancelDelete, e);
        },
        commitDelete: function(t, n, i, r, a, s, o) {
          if (!t) return TS.error("no msg?"), null;
          if (!n) return TS.error("no model_ob?"), null;
          var l = n.id;
          if (s || (s = 0), o || (o = 100), t.is_ephemeral || TS.utility.msgs.isTempMsg(t)) n.is_channel ? TS.channels.removeMsg(n.id, t) : n.is_im ? TS.ims.removeMsg(n.id, t) : n.is_mpim ? TS.mpims.removeMsg(n.id, t) : n.is_group && TS.groups.removeMsg(n.id, t);
          else {
            if (t._jl_rollup_hash && t._jl_rollup_hash.msg_ids) {
              t._jl_rollup_hash.msg_ids.forEach(function(d) {
                d != t.ts && TS.api.call("chat.delete", {
                  channel: l,
                  ts: d,
                  _attempts: s,
                  _delay_ms: o
                }, function(s, o, l) {
                  if (s || "message_not_found" === o.error) {
                    if ("message_not_found" === o.error && l._attempts < 10) return l._delay_ms *= 1.75, void setTimeout(function() {
                      TS.msg_edit.commitDelete(t, n, i, r, a, l._attempts, l._delay_ms);
                    }, l._delay_ms);
                    (TS.web || n.is_channel && !n.is_member) && (n.is_channel ? TS.channels.removeMsg(n.id, TS.utility.msgs.getMsg(l.ts, e(n))) : n.is_im ? TS.ims.removeMsg(n.id, TS.utility.msgs.getMsg(l.ts, e(n))) : n.is_mpim ? TS.mpims.removeMsg(n.id, TS.utility.msgs.getMsg(l.ts, e(n))) : n.is_group && TS.groups.removeMsg(n.id, TS.utility.msgs.getMsg(l.ts, e(n))));
                  }
                });
              });
            }
            TS.api.call("chat.delete", {
              channel: l,
              ts: t.ts,
              _attempts: s,
              _delay_ms: o
            }, function(e, s, o) {
              if (e || "message_not_found" === s.error) {
                if ("message_not_found" === s.error && o._attempts < 10) return o._delay_ms *= 1.75, void setTimeout(function() {
                  TS.msg_edit.commitDelete(t, n, i, r, a, o._attempts, o._delay_ms);
                }, o._delay_ms);
                (TS.web || n.is_channel && !n.is_member) && (n.is_channel ? TS.channels.removeMsg(n.id, t) : n.is_im ? TS.ims.removeMsg(n.id, t) : n.is_mpim ? TS.mpims.removeMsg(n.id, t) : n.is_group && TS.groups.removeMsg(n.id, t)), r && r();
              } else if (i && i(), !a) {
                var l;
                l = s && s.error ? TS.i18n.t("The message was not deleted. The error was: {error}", "msg_edit")({
                  error: s.error
                }) : TS.i18n.t("The message was not deleted. The error was: unknown", "msg_edit")(), TS.generic_dialog.start({
                  title: TS.i18n.t("Delete Message Failed", "msg_edit")(),
                  body: l,
                  show_cancel_button: !1,
                  esc_for_ok: !0
                });
              }
              if (TS.web) {
                if (!TS.utility.msgs.getDisplayedMsgs(n.msgs).length) {
                  var d = $(".pager .previous a");
                  d.attr("href") ? window.location = d.attr("href") : TS.reload(!1, "TS.msg_edit.commitEdit");
                }
              }
            });
          }
        },
        $last_clicked_cb: null,
        startBatchDelete: function() {
          $("#msgs_div").addClass("selecting_messages"), $("#channel_actions_div").addClass("hidden"), $("#batch_delete_div").removeClass("hidden"), TS.msg_edit.batchDeleteSelectionChanged();
        },
        cancelBatchDelete: function() {
          TS.msg_edit.selectNoneBatchDelete(), $("#msgs_div").removeClass("selecting_messages"), $("#channel_actions_div").removeClass("hidden"), $("#batch_delete_div").addClass("hidden");
        },
        doBatchDelete: function() {
          var t = $("#msgs_div").find(".msg_select_cb:checked"),
            n = TS.shared.getActiveModelOb();
          if (t.length) {
            var i = t.length;
            if (1 == i) return void TS.msg_edit.startDelete(t.eq(0).closest(".message").data("ts"), n, TS.msg_edit.cancelBatchDelete);
            for (var r, a, s = '<p class="small_bottom_margin">' + TS.i18n.t("Are you sure you want to delete {count, plural, =1 {this message} other {these messages}}? This cannot be undone! Note that deleting these messages will not delete any files or file comments.", "msg_edit")({
                count: i
              }) + "</p>", o = 0; o < i; o += 1) {
              a && !a.no_display && (r = a);
              var l = t.eq(o).closest(".message").data("ts");
              a = TS.utility.msgs.getMsg(l, e(n)), a && (s += TS.templates.builders.msgs.buildHTML({
                msg: a,
                prev_msg: r,
                model_ob: n,
                standalone: !0
              }));
            }
            var d = function(e) {
              function t(e) {
                TS.msg_edit.commitDelete(e, n, i, i, !0);
              }

              function i() {
                e.length ? setTimeout(function() {
                  t(e.pop());
                }, 100) : (TS.generic_dialog.cancel(), TS.generic_dialog.start({
                  title: "",
                  body: TS.i18n.t("Messages deleted.", "msg_edit")(),
                  show_cancel_button: !1,
                  esc_for_ok: !0
                }));
              }
              TS.generic_dialog.start({
                title: "",
                body: "<p>" + TS.i18n.t("Deleting messages...", "msg_edit")() + "</p>",
                show_cancel_button: !1,
                show_go_button: !1
              }), i();
            };
            TS.generic_dialog.start({
              title: TS.i18n.t("Delete Messages", "msg_edit")(),
              body: s,
              go_button_text: TS.i18n.t("Yes, delete these messages", "msg_edit")(),
              go_button_class: "btn_danger",
              onGo: function() {
                for (var r = [], a = 0; a < i; a += 1) {
                  var s = t.eq(a).closest(".message").data("ts");
                  if (!s) return void alert("no msg_ts");
                  var o = TS.utility.msgs.getMsg(s, e(n));
                  if (!o) return void alert("no msg");
                  r.push(o);
                }
                TS.msg_edit.cancelBatchDelete(), d(r);
              }
            });
          }
        },
        batchDeleteSelectionChanged: function(e, t) {
          var n = TS.msg_edit.$last_clicked_cb;
          if (n && e && t) {
            var i = $("#msgs_div").find(".msg_select_cb:visible"),
              r = i.index(n),
              a = i.index(e);
            r > a && (a = r, r = i.index(e));
            for (var s = "checked" === n.prop("checked"), o = r; o <= a; o += 1) i.eq(o).prop("checked", s);
          }
          n = e, TS.msg_edit.$last_clicked_cb = n;
          var l = TS.i18n.t("0 messages", "msg_edit")(),
            d = $("#msgs_div").find(".msg_select_cb:checked");
          $("#msgs_div").find(".multi_delete_mode").removeClass("multi_delete_mode"), d.length ? (l = TS.i18n.t("{count, plural, =1 {# message} other {# messages}}", "msg_edit")({
            count: d.length
          }), $("#batch_delete_button").removeClass("disabled"), d.each(function() {
            $(this).closest(".message").addClass("multi_delete_mode");
          })) : $("#batch_delete_button").addClass("disabled"), $("#batch_delete_count_span").html(l);
        },
        selectAllBatchDelete: function() {
          $("#msgs_div").find(".msg_select_cb:visible").prop("checked", !0), TS.msg_edit.batchDeleteSelectionChanged();
        },
        selectNoneBatchDelete: function() {
          $("#msgs_div").find(".msg_select_cb:visible").prop("checked", !1), TS.msg_edit.batchDeleteSelectionChanged();
        },
        startRemoveBroadcast: function(e, t, n) {
          var i = TS.utility.msgs.findMsg(e, t.id);
          if (!i) return void TS.error("Cannot find " + e + " for startRemoveBroadcast");
          TS.msg_edit.deleting_from_editing = !!n, TS.msg_edit.current_msg = i, TS.msg_edit.current_model_ob = t;
          var r = TS.msg_edit.getDivForMsgInMsgPane(e),
            a = t.is_channel || t.is_group && !t.is_mpim,
            s = TS.templates.builders.msgs.buildHTML({
              msg: i,
              model_ob: t,
              standalone: !0
            }),
            o = TS.templates.thread_confirm_remove_broadcast({
              is_channel_or_group: a,
              msg_html: new Handlebars.SafeString(s)
            });
          r.addClass("delete_mode");
          var l;
          l = a ? TS.i18n.t("Remove from channel", "msg_edit")() : TS.i18n.t("Remove from conversation", "msg_edit")(), TS.generic_dialog.start({
            title: l,
            body: o,
            go_button_text: TS.i18n.t("Remove message", "msg_edit")(),
            onGo: function() {
              TS.msg_edit.deleting_from_editing && TS.msg_edit.onCancelEdit(), TS.api.call("chat.delete", {
                channel: t.id,
                ts: i.ts,
                broadcast_delete: !0
              }).then(function() {
                TS.web && (t.is_channel ? TS.channels.removeMsg(t.id, i) : t.is_im ? TS.ims.removeMsg(t.id, i) : t.is_mpim ? TS.mpims.removeMsg(t.id, i) : t.is_group && TS.groups.removeMsg(t.id, i));
              }).catch(function(e) {
                TS.error("Failed to remove broadcast " + i.ts), TS.error(e), TS.msg_edit.current_msg === i && TS.msg_edit.onCancelDelete();
              });
            },
            onCancel: function() {
              TS.msg_edit.onCancelDelete();
            }
          });
        },
        pauseEditing: function() {
          if (TS.msg_edit.editing) {
            var e = $("#msg_text"),
              t = TS.utility.contenteditable.value(e),
              n = TS.utility.contenteditable.cursorPosition(e),
              i = {
                msg_ts: TS.msg_edit.current_msg.ts,
                model_ob: TS.msg_edit.current_model_ob,
                text: t,
                cursor_start: n.start,
                cursor_length: n.length
              };
            return TS.msg_edit.resetEditUI(), i;
          }
        },
        resumeEditing: function(e) {
          TS.msg_edit.editing || e && TS.model.active_cid === e.model_ob.id && TS.msg_edit.startEdit(e.msg_ts, e.model_ob, e);
        },
        focusAndSetCursorPosition: function(e, t) {
          TS.utility.contenteditable.focus(e), TS.utility.rAF(function() {
            t && _.isFinite(t.cursor_start) && _.isFinite(t.cursor_length) ? TS.utility.contenteditable.cursorPosition(e, t.cursor_start, t.cursor_length) : TS.utility.contenteditable.cursorPosition(e, 1e8, 0);
          });
        }
      });
      var e = function(e) {
          return TS.model.archive_view_is_showing && e._archive_msgs ? e._archive_msgs : e.msgs;
        },
        t = function(e) {
          return TS.interop.datetime.toTimeDuration(e, {
            units: "minutes"
          });
        };
    }();
  },
  2491: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("notifs", {
        onStart: function() {},
        canCorGHaveChannelMentions: function(e) {
          var t = TS.channels.getChannelById(e) || TS.groups.getGroupById(e) || TS.mpims.getMpimById(e);
          return t ? TS.notifs.canModelObHaveChannelMentions(t) : (TS.error("no model_ob for c_id:" + e + "?"), !0);
        },
        canModelObHaveChannelMentions: function(e) {
          if (e.is_im) return !1;
          if ("admin" === TS.model.team.prefs.who_can_at_channel || "owner" === TS.model.team.prefs.who_can_at_channel) return !0;
          if (TS.channels.isChannelRequired(e) && ("admin" === TS.model.team.prefs.who_can_at_everyone || "owner" === TS.model.team.prefs.who_can_at_everyone)) return !0;
          if (e.is_general && ("admin" === TS.model.team.prefs.who_can_post_general || "owner" === TS.model.team.prefs.who_can_post_general)) return !0;
          var t = TS.notifs.getCalculatedCorGNotifySetting(e.id);
          return "mentions" !== t && "nothing" !== t || !TS.notifs.hasUserSuppressedCorGChannelMentions(e);
        },
        hasUserSuppressedCorGChannelMentions: function(e) {
          return -1 != TS.model.at_channel_suppressed_channels.indexOf(e.id);
        },
        hasUserSuppressedCorGChannelMentionsById: function(e) {
          var t = TS.channels.getChannelById(e) || TS.groups.getGroupById(e) || TS.mpims.getMpimById(e);
          return t ? TS.notifs.hasUserSuppressedCorGChannelMentions(t) : (TS.error("no model_ob for c_id:" + e + "?"), !0);
        },
        hasUserSuppressedCorGPushChannelMentions: function(e) {
          var t = TS.channels.getChannelById(e) || TS.groups.getGroupById(e) || TS.mpims.getMpimById(e);
          return t ? -1 != TS.model.push_at_channel_suppressed_channels.indexOf(t.id) : (TS.error("no model_ob for c_id:" + e + "?"), !0);
        },
        isCorGMuted: function(e) {
          return e ? TS.model.muted_channels.indexOf(e) > -1 : (TS.error('wtf no c_id "' + e + '"'), !1);
        },
        getGlobalPushNotificationSetting: function() {
          return TS.model.prefs.push_everything ? "everything" : TS.model.prefs.push_mention_alert && TS.model.prefs.push_dm_alert ? "dm_and_mentions" : TS.model.prefs.push_mention_alert ? "mentions" : TS.model.prefs.push_dm_alert ? "dms" : "nothing";
        },
        getCorGsNotUsingGlobalPushNotificationSetting: function() {
          var e, t, n, i, r = {
              nothing: [],
              mentions: [],
              everything: []
            },
            a = {},
            s = "quiet";
          for (TS.model.prefs.push_mention_alert && (s = "mentions"), TS.model.prefs.push_everything && (s = "loud"), i = TS.model.prefs.push_loud_channels_set ? TS.model.prefs.push_loud_channels_set.split(",") : [], t = 0; t < i.length; t += 1)(n = $.trim(i[t])) && (a[n] = "quiet");
          for (i = TS.channels.getChannelsForUser(), t = 0; t < i.length; t += 1) i[t] && (n = i[t].id, "mentions" === TS.notifs.getCalculatedCorGPushNotifySetting(n) && !TS.boot_data.feature_notif_prefs_overhaul && TS.notifs.hasUserSuppressedCorGPushChannelMentions(n) && (a[n] = "mentions_suppressed", r.mentions.push(i[t])));
          for (i = TS.model.prefs.push_mention_channels ? TS.model.prefs.push_mention_channels.split(",") : [], t = 0; t < i.length; t += 1)(n = $.trim(i[t])) && a[n] && (a[n] = "mentions");
          for (i = TS.model.prefs.push_loud_channels ? TS.model.prefs.push_loud_channels.split(",") : [], t = 0; t < i.length; t += 1)(n = $.trim(i[t])) && a[n] && (a[n] = "loud");
          return _.forOwn(a, function(t, n) {
            if ((e = TS.channels.getChannelById(n) || TS.groups.getGroupById(n) || TS.mpims.getMpimById(n)) && !e.is_archived && (!e.is_channel || e.is_member))
              if ("loud" === t) {
                if ("loud" === s) return;
                r.everything.push(e);
              } else if ("mentions" === t) {
              if ("mentions" === s) return;
              r.mentions.push(e);
            } else if ("mentions_suppressed" === t);
            else {
              if ("quiet" === s) return;
              r.nothing.push(e);
            }
          }), r;
        },
        getGlobalNotificationSetting: function() {
          return TS.model.prefs.growls_enabled ? TS.model.prefs.all_channels_loud ? "everything" : "mentions" : "nothing";
        },
        getCorGsNotUsingGlobalNotificationSetting: function() {
          var e = {
              nothing: [],
              mentions: [],
              everything: [],
              muted: [],
              suppressed: []
            },
            t = TS.channels.getChannelsForUser();
          return _.forOwn(t, function(t) {
            t.is_archived || t.is_member && (i(t.id) && e.nothing.push(t), r(t.id) && e.mentions.push(t), a(t.id) && e.everything.push(t), TS.notifs.isCorGMuted(t.id) && e.muted.push(t), TS.boot_data.feature_notif_prefs_overhaul && TS.notifs.hasUserSuppressedCorGChannelMentions(t) && e.suppressed.push(t));
          }), _.forOwn(TS.model.groups, function(t) {
            t.is_archived || (i(t.id) && e.nothing.push(t), r(t.id) && e.mentions.push(t), a(t.id) && e.everything.push(t), TS.notifs.isCorGMuted(t.id) && e.muted.push(t), TS.boot_data.feature_notif_prefs_overhaul && TS.notifs.hasUserSuppressedCorGChannelMentions(t) && e.suppressed.push(t));
          }), _.forOwn(TS.model.mpims, function(t) {
            t.is_archived || (i(t.id) && e.nothing.push(t), r(t.id) && e.mentions.push(t), a(t.id) && e.everything.push(t), TS.notifs.isCorGMuted(t.id) && e.muted.push(t), TS.boot_data.feature_notif_prefs_overhaul && TS.notifs.hasUserSuppressedCorGChannelMentions(t) && e.suppressed.push(t));
          }), e;
        },
        getCalculatedCorGNotifySetting: function(i) {
          return i ? n(i) ? e(i) ? "everything" : t(i) ? "nothing" : "mentions" : TS.model.prefs.growls_enabled ? TS.model.prefs.all_channels_loud ? "everything" : "mentions" : "nothing" : (TS.error('wtf no c_id "' + i + '"'), !1);
        },
        muteOrUnmuteCorG: function(e) {
          if (e) {
            if (TS.isPartiallyBooted()) return void TS.incremental_boot.userDidInteractWithUI();
            var t = TS.shared.getModelObById(e);
            if (t && !t.is_im) {
              TS.notifs.isCorGMuted(e) ? TS.notifs.makeCorGNOTMuted(e) : (TS.notifs.makeCorGMuted(e), t.is_channel ? TS.channels.markMostRecentReadMsg(t, TS.model.marked_reasons.muted) : t.is_mpim ? TS.mpims.markMostRecentReadMsg(t, TS.model.marked_reasons.muted) : t.is_group && TS.groups.markMostRecentReadMsg(t, TS.model.marked_reasons.muted));
              var n = TS.model.muted_channels.join(",");
              TS.prefs.onPrefChanged({
                name: "muted_channels",
                value: n
              }), TS.prefs.setPrefByAPI({
                name: "muted_channels",
                value: n
              });
            }
          }
        },
        makeCorGMuted: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1; - 1 == TS.model.muted_channels.indexOf(e) && TS.model.muted_channels.push(e), TS.prefs.setMutedChannels(TS.model.muted_channels.join(",")), TS.client && (t && TS.channels.calcUnreadCnts(t), n && TS.groups.calcUnreadCnts(n), i && TS.mpims.calcUnreadCnts(i));
        },
        makeCorGNOTMuted: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1;
          var r = TS.model.muted_channels.indexOf(e); - 1 != r && TS.model.muted_channels.splice(r, 1), TS.prefs.setMutedChannels(TS.model.muted_channels.join(",")), TS.client && (t && TS.channels.calcUnreadCnts(t), n && TS.groups.calcUnreadCnts(n), i && TS.mpims.calcUnreadCnts(i));
        },
        makeCorGSuppressed: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1; - 1 == TS.model.at_channel_suppressed_channels.indexOf(e) && TS.model.at_channel_suppressed_channels.push(e), TS.prefs.setSuppressedChannels(TS.model.at_channel_suppressed_channels.join(",")), TS.client && (t && TS.channels.calcUnreadCnts(t), n && TS.groups.calcUnreadCnts(n), i && TS.mpims.calcUnreadCnts(i));
        },
        makeCorGNOTSuppressed: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1;
          var r = TS.model.at_channel_suppressed_channels.indexOf(e); - 1 != r && TS.model.at_channel_suppressed_channels.splice(r, 1), TS.prefs.setSuppressedChannels(TS.model.at_channel_suppressed_channels.join(",")), TS.client && (t && TS.channels.calcUnreadCnts(t), n && TS.groups.calcUnreadCnts(n), i && TS.mpims.calcUnreadCnts(i));
        },
        makeCorGPushSuppressed: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1; - 1 == TS.model.push_at_channel_suppressed_channels.indexOf(e) && TS.model.push_at_channel_suppressed_channels.push(e), TS.prefs.setPushSuppressedChannels(TS.model.push_at_channel_suppressed_channels.join(","));
        },
        makeCorGNOTPushSuppressed: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1;
          var r = TS.model.push_at_channel_suppressed_channels.indexOf(e); - 1 != r && TS.model.push_at_channel_suppressed_channels.splice(r, 1), TS.prefs.setPushSuppressedChannels(TS.model.push_at_channel_suppressed_channels.join(","));
        },
        makeCorGDTopNothing: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1;
          var r = TS.model.loud_channels.indexOf(e); - 1 != r && TS.model.loud_channels.splice(r, 1), TS.prefs.setLoudChannels(TS.model.loud_channels.join(",")), r = TS.model.never_channels.indexOf(e), TS.model.prefs.growls_enabled ? (-1 == r && TS.model.never_channels.push(e), d(e)) : (-1 != r && TS.model.never_channels.splice(r, 1), c(e)), TS.prefs.setNeverChannels(TS.model.never_channels.join(","));
        },
        makeCorGDTopEverything: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1;
          var r = TS.model.never_channels.indexOf(e); - 1 != r && TS.model.never_channels.splice(r, 1), TS.prefs.setNeverChannels(TS.model.never_channels.join(",")), r = TS.model.loud_channels.indexOf(e), TS.model.prefs.growls_enabled && TS.model.prefs.all_channels_loud ? (-1 != r && TS.model.loud_channels.splice(r, 1), c(e)) : (-1 == r && TS.model.loud_channels.push(e), d(e)), TS.prefs.setLoudChannels(TS.model.loud_channels.join(","));
        },
        makeCorGDTopMentions: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1;
          var r = TS.model.loud_channels.indexOf(e); - 1 != r && TS.model.loud_channels.splice(r, 1), TS.prefs.setLoudChannels(TS.model.loud_channels.join(",")), r = TS.model.never_channels.indexOf(e), -1 != r && TS.model.never_channels.splice(r, 1), TS.prefs.setNeverChannels(TS.model.never_channels.join(",")), TS.model.prefs.growls_enabled && !TS.model.prefs.all_channels_loud ? c(e) : d(e);
        },
        makeCorGPushNothing: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1;
          var r = TS.model.push_loud_channels.indexOf(e); - 1 != r && TS.model.push_loud_channels.splice(r, 1), TS.prefs.setPushLoudChannels(TS.model.push_loud_channels.join(",")), r = TS.model.push_mention_channels.indexOf(e), -1 != r && TS.model.push_mention_channels.splice(r, 1), TS.prefs.setPushMentionChannels(TS.model.push_mention_channels.join(",")), TS.model.prefs.push_everything || TS.model.prefs.push_mention_alert ? u(e) : m(e);
        },
        makeCorGPushEverything: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1;
          var r = TS.model.push_mention_channels.indexOf(e); - 1 != r && TS.model.push_mention_channels.splice(r, 1), TS.prefs.setPushMentionChannels(TS.model.push_mention_channels.join(",")), r = TS.model.push_loud_channels.indexOf(e), TS.model.prefs.push_everything ? (-1 != r && TS.model.push_loud_channels.splice(r, 1), m(e)) : (-1 == r && TS.model.push_loud_channels.push(e), u(e)), TS.prefs.setPushLoudChannels(TS.model.push_loud_channels.join(","));
        },
        makeCorGPushMentions: function(e) {
          var t = TS.channels.getChannelById(e),
            n = TS.groups.getGroupById(e),
            i = TS.mpims.getMpimById(e);
          if (!t && !n && !i) return TS.error('wtf no channel/group "' + e + '"'), !1;
          var r = TS.model.push_loud_channels.indexOf(e); - 1 != r && TS.model.push_loud_channels.splice(r, 1), TS.prefs.setPushLoudChannels(TS.model.push_loud_channels.join(",")), r = TS.model.push_mention_channels.indexOf(e), !TS.model.prefs.push_mention_alert || TS.model.prefs.push_everything ? (-1 == r && TS.model.push_mention_channels.push(e), u(e)) : (-1 != r && TS.model.push_mention_channels.splice(r, 1), m(e)), TS.prefs.setPushMentionChannels(TS.model.push_mention_channels.join(","));
        },
        getCalculatedCorGPushNotifySetting: function(e) {
          return e ? l(e) ? s(e) ? "everything" : o(e) ? "mentions" : "nothing" : TS.model.prefs.push_everything ? "everything" : TS.model.prefs.push_mention_alert ? "mentions" : "nothing" : (TS.error('wtf no c_id "' + e + '"'), !1);
        }
      });
      var e = function(e) {
          return e ? TS.model.loud_channels.indexOf(e) > -1 : (TS.error('wtf no c_id "' + e + '"'), !1);
        },
        t = function(e) {
          return e ? TS.model.never_channels.indexOf(e) > -1 : (TS.error('wtf no c_id "' + e + '"'), !1);
        },
        n = function(e) {
          return e ? !!(TS.model.loud_channels_set && TS.model.loud_channels_set.indexOf(e) > -1) : (TS.error('wtf no c_id "' + e + '"'), !1);
        },
        i = function(e) {
          return !(!TS.model.prefs.growls_enabled || "nothing" !== TS.notifs.getCalculatedCorGNotifySetting(e));
        },
        r = function(e) {
          return !("mentions" !== TS.notifs.getCalculatedCorGNotifySetting(e) || TS.model.prefs.growls_enabled && !TS.model.prefs.all_channels_loud && (TS.boot_data.feature_notif_prefs_overhaul || !TS.notifs.hasUserSuppressedCorGChannelMentionsById(e)));
        },
        a = function(e) {
          return !(TS.model.prefs.growls_enabled && TS.model.prefs.all_channels_loud || "everything" !== TS.notifs.getCalculatedCorGNotifySetting(e));
        },
        s = function(e) {
          return e ? TS.model.push_loud_channels.indexOf(e) > -1 : (TS.error('wtf no c_id "' + e + '"'), !1);
        },
        o = function(e) {
          return e ? TS.model.push_mention_channels.indexOf(e) > -1 : (TS.error('wtf no c_id "' + e + '"'), !1);
        },
        l = function(e) {
          return e ? !!(TS.model.push_loud_channels_set && TS.model.push_loud_channels_set.indexOf(e) > -1) : (TS.error('wtf no c_id "' + e + '"'), !1);
        },
        d = function(e) {
          -1 == TS.model.loud_channels_set.indexOf(e) && TS.model.loud_channels_set.push(e), TS.prefs.setLoudChannelsSet(TS.model.loud_channels_set.join(","));
        },
        c = function(e) {
          var t = TS.model.loud_channels_set.indexOf(e); - 1 != t && TS.model.loud_channels_set.splice(t, 1), TS.prefs.setLoudChannelsSet(TS.model.loud_channels_set.join(","));
        },
        u = function(e) {
          -1 == TS.model.push_loud_channels_set.indexOf(e) && TS.model.push_loud_channels_set.push(e), TS.prefs.setPushLoudChannelsSet(TS.model.push_loud_channels_set.join(","));
        },
        m = function(e) {
          var t = TS.model.push_loud_channels_set.indexOf(e); - 1 != t && TS.model.push_loud_channels_set.splice(t, 1), TS.prefs.setPushLoudChannelsSet(TS.model.push_loud_channels_set.join(","));
        };
    }();
  },
  2492: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("pending_users", {
        sanitizeNameFields: function(e) {
          if (e.invite_prefs && !e.invite_prefs.real_name) {
            var t = e.invite_prefs;
            t.first_name && t.last_name ? t.real_name = [t.first_name, t.last_name].join(" ").trim() : t.first_name ? t.real_name = t.first_name : t.last_name && (t.real_name = t.last_name);
          }
        },
        getUserNameForSort: function(e) {
          return e.invite_prefs && e.invite_prefs.real_name ? e.invite_prefs.real_name.toLowerCase() : e.email;
        },
        filterOutURAs: function(e) {
          return e.filter(function(e) {
            return !e.invite_prefs || "ultra_restricted" !== e.invite_prefs.type;
          });
        },
        checkUserMatch: function(e, t) {
          return e.invite_prefs && e.invite_prefs.real_name && e.invite_prefs.real_name.match(t) || e.email.match(t);
        },
        invitePendingUsersToChannel: function(e, t) {
          if (t && e && e.length)
            for (var n = e.map(function(e) {
                return e.email;
              }); n.length;) {
              var i = n.splice(0, 30).join(",");
              TS.api.call("channels.invitePendingUsers", {
                channel: t,
                emails: i
              });
            }
        },
        usersSorterByName: function(e, t) {
          var n = e.member ? TS.members.getMemberNameForSort(e.member) : TS.pending_users.getUserNameForSort(e),
            i = t.member ? TS.members.getMemberNameForSort(t.member) : TS.pending_users.getUserNameForSort(t);
          return n < i ? -1 : n > i ? 1 : 0;
        }
      });
    }();
  },
  2493: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("permissions.channels", {
        canMemberJoinChannel: function(e, t) {
          if (!e || !t) return !1;
          if (e.is_im || e.is_mpim) return !0;
          if (t._is_local) return !0;
          if (e.is_shared) {
            var n = e.shared_team_ids;
            if (TS.shared.isModelObOrgShared(e)) {
              if (TS.utility.teams.isMemberExternal(t)) return !1;
              if (e.is_global_shared) return !0;
              var i = _.get(t, "enterprise_user.teams") || [];
              if (_.intersection(i, n).length) return !0;
            }
            if (TS.shared.isModelObShared(e)) {
              if (t._is_from_org) return !1;
              var r = t.team_id;
              if (n.indexOf(r) > -1) return !0;
            }
          }
          return !1;
        },
        canMemberLeaveChannel: function(e, t) {
          return !(!e || !t) && (!TS.channels.isChannelRequired(e) && !t.is_restricted);
        }
      });
    }();
  },
  2494: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("permissions.enterprise", {
        canUserLeaveTeam: function(e, t) {
          return !!TS.boot_data.page_needs_enterprise && (!e.is_restricted && (!!TS.enterprise.isUserOnTeam(e, t) && !!t.can_leave));
        }
      });
    }();
  },
  2495: function(e, t) {
    ! function() {
      "use strict";

      function e() {
        TS.prefs.team_loud_channel_mentions_limit_changed_sig.add(i), i();
      }
      TS.registerModule("permissions.members", {
        onStart: function() {
          TS.boot_data.feature_stop_loud_channel_mentions && TS.client && TS.client.login_sig && TS.client.login_sig.add(e);
        },
        canPostInChannel: function(e) {
          return e.is_general ? TS.permissions.members.canPostInGeneral(TS.model.user) : !TS.ims.isImWithDeletedMember(e) && !TS.channels.read_only.isReadOnly(e.id);
        },
        canPostInGeneral: function(e) {
          return !!e && n("who_can_post_general", e);
        },
        canPostInModelOb: function(e, t) {
          return t.is_general ? TS.permissions.members.canPostInGeneral(e) : TS.boot_data.page_needs_enterprise && t.is_shared ? TS.permissions.members.canPostInChannel(t) : !TS.ims.isImWithDeletedMember(t);
        },
        canNonAdminsAtMentionEveryoneBySettings: function() {
          return n("who_can_at_everyone", TS.model.user);
        },
        canAtMentionEveryone: function() {
          if (!TS.boot_data.feature_stop_loud_channel_mentions) return TS.permissions.members.canNonAdminsAtMentionEveryoneBySettings();
          var e = TS.channels.getGeneralChannel();
          return e ? TS.permissions.members.canNonAdminsAtMentionEveryoneBySettings() && !TS.permissions.members.shouldStopChannelMentions(e.id, TS.model.user.id) : (TS.warn("WTF, could not getGeneralChannel()? Checking only team settings, skipping large channel mentions check."), TS.permissions.members.canNonAdminsAtMentionEveryoneBySettings());
        },
        canNonAdminsAtChannelOrGroupBySettings: function() {
          return n("who_can_at_channel", TS.model.user);
        },
        canAtChannelOrGroup: function(e) {
          return TS.permissions.members.canNonAdminsAtChannelOrGroupBySettings(e) && !TS.permissions.members.shouldStopChannelMentions(e, TS.model.user.id);
        },
        shouldStopChannelMentions: function(e, n) {
          if (!TS.boot_data.feature_stop_loud_channel_mentions) return !1;
          var i = TS.shared.getModelObById(e);
          if (!i) return TS.warn("shouldStopChannelMentions(): could not find model_ob for id " + e), !1;
          if (i.is_im && !i.is_mpim) return !1;
          var r = TS.membership.getMembershipCounts(i),
            a = _.get(r, "counts.member_count") || 0,
            s = a >= t;
          if (s && n) {
            var o = TS.members.getMemberById(n);
            o && o.is_admin && (s = !1);
          }
          return s;
        },
        canMsgMentionChannelIfMention: function(e, t, n) {
          if (!TS.boot_data.feature_stop_loud_channel_mentions) return !0;
          if (!e) return TS.warn("canMsgMentionChannel: WTF no msg_text?", arguments), !0;
          var i = {
            text: e,
            subtype: ""
          };
          return !TS.utility.msgs.msgContainsMention(i, !1, !0, !1, !1) || !TS.permissions.members.shouldStopChannelMentions(t, n);
        },
        canArchiveChannels: function() {
          return !TS.model.user.is_restricted && n("who_can_archive_channels", TS.model.user);
        },
        canCreateChannels: function() {
          return !TS.model.user.is_restricted && n("who_can_create_channels", TS.model.user);
        },
        canCreateGroups: function() {
          return !TS.model.user.is_ultra_restricted && n("who_can_create_groups", TS.model.user);
        },
        canCreateMpims: function() {
          return !TS.model.user.is_ultra_restricted;
        },
        canCreateAndDeleteUserGroups: function() {
          return !TS.model.user.is_restricted && n("who_can_create_delete_user_groups", TS.model.user, !0);
        },
        canEditUserGroups: function() {
          return !TS.model.user.is_restricted && n("who_can_edit_user_groups", TS.model.user, !0);
        },
        canUserSeeMember: function(e) {
          return !TS.model.user.is_restricted || (!!e.is_self || (!!e.is_slackbot || TS.members.getMembersForUser().indexOf(e) >= 0));
        },
        canKickFromChannels: function() {
          return !TS.model.user.is_restricted && n("who_can_kick_channels", TS.model.user, !0);
        },
        canKickFromGroups: function() {
          return !TS.model.user.is_restricted && n("who_can_kick_groups", TS.model.user, !0);
        },
        canCreateConvertOrgSharedChannels: function() {
          return !!TS.boot_data.page_needs_enterprise && (!(!TS.model.user.enterprise_user || !TS.model.user.enterprise_user.is_owner) || TS.permissions.members.canManageOrgSharedChannels());
        },
        canManageOrgSharedChannels: function() {
          if (!TS.model.team.prefs.who_can_manage_shared_channels) return !0;
          if (!TS.boot_data.page_needs_enterprise) return !1;
          var e = TS.model.user;
          if (e.is_restricted) return !1;
          if (void 0 !== TS.model.team.prefs.can_user_manage_shared_channels) return TS.model.team.prefs.can_user_manage_shared_channels;
          var t = TS.model.team.prefs.who_can_manage_shared_channels.type[0];
          return "regular" === t || ("admin" === t ? e.is_admin || e.is_owner || !(!e.enterprise_user || !e.enterprise_user.is_admin && !e.enterprise_user.is_owner) : "owner" === t && (!(!e.enterprise_user || !e.enterprise_user.is_admin && !e.enterprise_user.is_owner) || !!(TS.model.team.prefs.who_can_manage_shared_channels.user && TS.model.team.prefs.who_can_manage_shared_channels.user.indexOf(TS.model.user.id) > -1)));
        },
        canCreateSharedChannel: function() {
          return !!TS.boot_data.feature_shared_channels_client && !(!TS.model.user.is_owner && !TS.model.user.is_admin);
        },
        canRequestSharedChannel: function() {
          return !!TS.boot_data.feature_shared_channels_invite && !!TS.boot_data.feature_shared_channels_client;
        },
        canExportMessageHistory: function(e) {
          return !!(TS.boot_data.feature_channel_exports && TS.boot_data.feature_archive_deeplink && (TS.model.user.is_admin || e.is_im || e.is_group));
        },
        canUserInviteToChannel: function(e) {
          return !TS.model.user.is_ultra_restricted && (!(!e.is_channel || !e.is_member) || !!e.is_group);
        },
        test: function() {
          var e = {};
          return Object.defineProperty(e, "_checkPrefCascade", {
            get: function() {
              return n;
            },
            set: function(e) {
              n = e;
            }
          }), e;
        }
      });
      var t, n = function(e, t, n) {
          return void 0 === n && (n = !0), t.is_restricted ? "ra" === TS.model.team.prefs[e] : "ra" === TS.model.team.prefs[e] || ("regular" === TS.model.team.prefs[e] || ("admin" === TS.model.team.prefs[e] ? !!t.is_admin : "owner" === TS.model.team.prefs[e] ? !!t.is_owner : n));
        },
        i = function() {
          t = TS.model.team.prefs.loud_channel_mentions_limit || Math.infinity;
        };
    }();
  },
  2496: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("permissions", {});
    }();
  },
  2497: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("pins", {
        pins_fetched_sig: new signals.Signal,
        pinned_status_changed_sig: new signals.Signal,
        pinned_message_changed_sig: new signals.Signal,
        pinned_message_deleted_sig: new signals.Signal,
        onStart: function() {
          TS.files.team_file_comment_deleted_sig.add(p), TS.files.team_file_deleted_sig.add(f), TS.client && TS.client.login_sig ? TS.client.login_sig.add(h) : TS.web && TS.web.login_sig && TS.web.login_sig.add(h), TS.channels.switched_sig.add(h), TS.groups.switched_sig.add(h), TS.ims.switched_sig.add(h), TS.mpims.switched_sig.add(h), TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.add(g) : TS.ms.connected_sig.add(g), TS.channels.left_sig.add(S), TS.groups.left_sig.add(S);
        },
        fetchPins: function(n) {
          if (n) return t[n.id] = !0, TS.isPartiallyBooted() ? new Promise(function(e) {
            var t = function() {
              e(TS.pins.fetchPins(n));
            };
            TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.addOnce(t) : TS.ms.connected_sig.addOnce(t);
          }) : TS.api.call("pins.list", {
            channel: n.id
          }).then(function(t) {
            var i = t.data.items;
            TS.pins.upsertPinnedItems(i), n.pinned_items = i, n.pinned_items_count = i.length, n.has_pins = !!n.pinned_items_count, n.is_channel && !n.is_member || (e[n.id] = !0), TS.pins.pins_fetched_sig.dispatch(n, i);
          }).catch(function(e) {
            TS.logError("Failed to fetch pins for model ob: " + n.id, e);
          }).finally(function() {
            delete t[n.id];
          });
        },
        arePinsCurrentlyBeingFetched: function(e) {
          return !!t[e.id];
        },
        havePinsBeenFetched: function(t) {
          return !!e[t.id];
        },
        startPinFile: function(e, t) {
          var n = TS.files.getFileById(e);
          n && l("file", t, {
            file: n,
            type: "file"
          });
        },
        unPinFile: function(e, t) {
          var n = i(e, t);
          if (n) {
            var r = {
              file: n,
              type: "file"
            };
            m(r, t, function() {
              c(t, r);
            });
          }
        },
        startPinFileComment: function(e, t, n) {
          var i = TS.files.getFileById(t);
          if (i) {
            var r = TS.files.getFileCommentById(i, e);
            r && l("comment", n, {
              file: i,
              comment: r,
              type: "file_comment"
            });
          }
        },
        unPinFileComment: function(e, t, n) {
          var i = r(e, t, n),
            a = TS.files.getFileById(t);
          if (i && a) {
            var s = {
              file: a,
              comment: i,
              type: "file_comment"
            };
            m(s, n, function() {
              c(n, s);
            });
          }
        },
        startPinMessage: function(e, t) {
          e = e.toString();
          var n = TS.utility.msgs.findMsg(e, t.id);
          n && ("file_comment" === n.subtype ? TS.pins.startPinFileComment(n.comment.id, n.file.id, t) : n.file ? TS.pins.startPinFile(n.file.id, t) : l("message", t, {
            message: n,
            type: "message"
          }));
        },
        unPinMessage: function(e, t) {
          e = e.toString();
          var n = a(e, t);
          if (n)
            if ("file_comment" === n.subtype) TS.pins.unPinFileComment(n.comment.id, n.file.id, t);
            else if (n.file) TS.pins.unPinFile(n.file.id, t);
          else {
            var i = {
              message: n,
              type: "message"
            };
            m(i, t, function() {
              c(t, i);
            });
          }
        },
        isMessagePinned: function(e, t) {
          return "file_comment" === e.subtype ? !!e.comment && !!r(e.comment.id, e.file.id, t) : e.file ? !!i(e.file.id, t) : !!a(e.ts, t);
        },
        pinStatusHasChanged: function(e, t, n, i, r) {
          var a, l, d, c, _, u;
          "message" === n && i ? (a = TS.utility.msgs.findMsg(t.message.ts, i.id)) && (t.message = a, c = s(e, a, i)) : "file_comment" === n ? (u = TS.files.upsertFile(t.file), l = TS.files.getFileById(t.file.id), t.file = l, d = TS.files.getFileCommentById(l, t.comment.id), d ? (t.comment = d, c = s(e, d, i)) : (d = TS.files.addCommentToFile(t.comment, l), t.comment = d), c = c || "CHANGED" === u.status) : "file" === n && (u = TS.files.upsertFile(t.file), l = TS.files.getFileById(t.file.id), t.file = l, c = s(e, l, i), c = c || "CHANGED" === u.status), _ = o(e, t, n, i, r), (c || _) && TS.pins.pinned_status_changed_sig.dispatch(i, t, e);
        },
        upsertPinnedItems: function(e) {
          e.forEach(function(e) {
            if ("file" === e.type) TS.files.upsertFile(e.file), e.file = TS.files.getFileById(e.file.id);
            else if ("file_comment" === e.type) {
              TS.files.upsertFile(e.file), e.file = TS.files.getFileById(e.file.id);
              var t = TS.files.getFileCommentById(e.file, e.comment.id);
              t || (t = TS.files.addCommentToFile(e.comment, e.file)), e.comment = t;
            }
          });
        },
        replaceMsg: function(e, t) {
          t.pinned_items && t.pinned_items.forEach(function(n) {
            "message" === n.type && n.message.ts === e.ts && (n.message = e, TS.pins.pinned_message_changed_sig.dispatch(t, n));
          });
        },
        removeMsg: function(e, t) {
          t.pinned_items && (o(!1, {
            message: {
              ts: e
            }
          }, "message", t), TS.pins.pinned_message_deleted_sig.dispatch(t));
        },
        canUserPinHere: function(e) {
          return !(!TS.client || !e) && (!!TS.permissions.members.canPostInChannel(e) && !(e.is_channel && !e.is_member));
        },
        updateCount: function(e, t) {
          if (e) {
            var n = e.pinned_items_count;
            e.pinned_items_count = TS.pins.havePinsBeenFetched(e) ? _.get(e, "pinned_items.length") : t, n !== e.pinned_items_count && (e.has_pins = !!e.pinned_items_count, TS.pins.pinned_status_changed_sig.dispatch(e));
          }
        },
        getPinData: function(e) {
          var t, n = TS.shared.getActiveModelOb().pinned_items;
          if (!_.isEmpty(n) && (_.forEach(n, function(n) {
              if ("file" !== n.type || "file_share" !== e.subtype && "file_mention" !== e.subtype) {
                if ("file_comment" === n.type && "file_comment" === e.subtype) {
                  if (e.comment.id === n.comment.id) return t = n, !1;
                } else if ("message" === n.type && e.ts === n.message.ts) return t = n, !1;
              } else if (e.file.id === n.file.id) return t = n, !1;
            }), t)) {
            return {
              created: t.created,
              created_by: t.created_by
            };
          }
        },
        getUnreadPins: function(e) {
          var t, n = [];
          if (!e) return n;
          var i = e._marked_reason;
          if ("0000000000.000000" === e.last_read && "back" !== i) return n;
          if (TS.model.ui.is_window_focused)
            if ("back" === i) {
              var r = TS.utility.msgs.getDisplayedMsgAfterTS(e.last_read, e.msgs);
              t = r ? parseFloat(r.ts) - 1 : e.last_read;
            } else t = !e._prev_last_read || i && "viewed" !== i ? e.last_read : e._prev_last_read;
          else t = e.last_read;
          var a = e.pinned_items;
          return _.isEmpty(a) ? n : (_.forEach(a, function(e) {
            var r = TS.members.getMemberById(e.created_by);
            r && e.created > Math.ceil(t) && (r.is_self && "back" === i ? n.push(e) : r.is_self || n.push(e));
          }), n);
        },
        test: function() {
          return {
            fileDeleted: f,
            fileCommentDeleted: p,
            have_pins_been_fetched: e
          };
        }
      });
      var e = {},
        t = {},
        n = !1,
        i = function(e, t) {
          var n = TS.files.getFileById(e);
          return n && n.pinned_to && -1 !== n.pinned_to.indexOf(t.id) ? n : null;
        },
        r = function(e, t, n) {
          var i = TS.files.getFileById(t);
          if (!i) return null;
          var r = TS.files.getFileCommentById(i, e);
          return r && r.pinned_to && -1 !== r.pinned_to.indexOf(n.id) ? r : null;
        },
        a = function(e, t) {
          if (t.pinned_items)
            for (var n, a = 0; a < t.pinned_items.length; a += 1)
              if (n = t.pinned_items[a], "message" === n.type && n.message.ts === e) return n.message;
          var s = TS.utility.msgs.findMsg(e, t.id);
          if (!s) return null;
          if ("file_comment" === s.subtype) {
            if (r(s.comment.id, s.file.id, t)) return s;
          } else if (s.file) {
            if (i(s.file.id, t)) return s;
          } else if (s.pinned_to && -1 !== s.pinned_to.indexOf(t.id)) return s;
          return null;
        },
        s = function(e, t, n) {
          var i = !1;
          if (t.pinned_to || (t.pinned_to = []), e) - 1 === t.pinned_to.indexOf(n.id) && (t.pinned_to.push(n.id), i = !0);
          else {
            var r = t.pinned_to.indexOf(n.id); - 1 !== r && (t.pinned_to.splice(r, 1), i = !0);
          }
          return i;
        },
        o = function(e, t, n, i, r) {
          var a = !1;
          i.pinned_items || (i.pinned_items = []);
          var s = -1;
          if (i.pinned_items.some(function(e, i) {
              var r = !1;
              return "message" === n && "message" === e.type ? e.message.ts === t.message.ts && (r = !0) : "file" === n && "file" === e.type ? e.file.id === t.file.id && (r = !0) : "file_comment" === n && "file_comment" === e.type && e.comment.id === t.comment.id && (r = !0), r && (s = i), r;
            }), TS.boot_data.feature_lazy_pins && !TS.pins.havePinsBeenFetched(i)) {
            i.pinned_items_count = i.pinned_items_count || 0;
            var o = _.parseInt(r, 10);
            _.isNaN(o) ? e ? i.pinned_items_count += 1 : e || (i.pinned_items_count = Math.max(i.pinned_items_count - 1, 0)) : i.pinned_items_count = o, a = !0;
          } else e || -1 === s ? e && -1 === s && (i.pinned_items.unshift(t), i.pinned_items_count = i.pinned_items.length, a = !0) : (i.pinned_items.splice(s, 1), i.pinned_items_count = i.pinned_items.length, a = !0);
          return i.has_pins = !!i.pinned_items_count, a;
        },
        l = function(e, t, n) {
          var i = "",
            r = "",
            a = "";
          switch (e) {
            case "file":
              i = TS.i18n.t("Are you sure you want to pin this file to {pin_to_label}?", "pins")({
                type: e,
                pin_to_label: Handlebars.helpers.pinToLabel(t)
              }), r = TS.i18n.t("Pin file", "pins")(), a = TS.i18n.t("Yes, pin this file", "pins")();
              break;
            case "comment":
              i = TS.i18n.t("Are you sure you want to pin this comment to {pin_to_label}?", "pins")({
                type: e,
                pin_to_label: Handlebars.helpers.pinToLabel(t)
              }), r = TS.i18n.t("Pin comment", "pins")(), a = TS.i18n.t("Yes, pin this comment", "pins")();
              break;
            case "message":
              i = TS.i18n.t("Are you sure you want to pin this message to {pin_to_label}?", "pins")({
                type: e,
                pin_to_label: Handlebars.helpers.pinToLabel(t)
              }), r = TS.i18n.t("Pin message", "pins")(), a = TS.i18n.t("Yes, pin this message", "pins")();
          }
          var s = "<p>" + i + "</p>" + TS.client.channel_page.pinnedItemHtml(n, t);
          TS.generic_dialog.start({
            title: r,
            body: s,
            go_button_text: a,
            onGo: function() {
              d(t, n);
            }
          });
        },
        d = function(e, t) {
          var n = u(e, t),
            i = TS.utility.date.makeTsStamp(null, "0");
          TS.api.call("pins.add", n, function(n, r) {
            if (!n) {
              if ("too_many_pins" === r.error) {
                var a = "message";
                "file" === t.type && (a = "file"), "file_comment" === t.type && (a = "comment"), TS.generic_dialog.start({
                  title: TS.i18n.t("Couldn’t pin {type}", "pins")({
                    type: a
                  }),
                  body: "<p>" + TS.i18n.t("Sorry! You’ve hit the limit on how many pins you can have in this channel.", "pins")() + "</p>",
                  show_cancel_button: !1
                });
              } else TS.info("pins.add got a not ok rsp: " + r.error);
              if ("already_pinned" !== r.error) return;
            }
            TS.boot_data.feature_lazy_pins && !TS.pins.havePinsBeenFetched(e) || (t.created = i, t.created_by = TS.boot_data.user_id, TS.pins.pinStatusHasChanged(!0, t, t.type, e));
          });
        },
        c = function(e, t) {
          var n = u(e, t);
          TS.api.call("pins.remove", n, function(n, i) {
            (n || "not_pinned" === i.error) && (TS.boot_data.feature_lazy_pins && !TS.pins.havePinsBeenFetched(e) || TS.pins.pinStatusHasChanged(!1, t, t.type, e));
          });
        },
        u = function(e, t) {
          var n = {
            channel: e.id
          };
          return "message" === t.type ? n.timestamp = t.message.ts : "file" === t.type ? n.file = t.file.id : "file_comment" === t.type && (n.file_comment = t.comment.id), n;
        },
        m = function(e, t, n) {
          TS.client.channel_page.highlightPinnedItemForRemoval(e);
          var i = TS.client.channel_page.pinnedItemHtml(e, t);
          TS.generic_dialog.start({
            title: TS.i18n.t("Remove Pinned Item", "pins")(),
            body: "<p>" + TS.i18n.t("Are you sure you want to remove this pinned item?", "pins")() + "</p>" + i,
            go_button_text: TS.i18n.t("Yes, remove this pinned item", "pins")(),
            onGo: n,
            onCancel: function() {
              TS.client.channel_page.unHighlightPinnedItemForRemoval(e);
            }
          });
        },
        p = function(e, t, n) {
          n && n.pinned_to && n.pinned_to.forEach(function(e) {
            var t = TS.shared.getModelObById(e);
            if (t) {
              o(!1, {
                comment: n
              }, "file_comment", t) && TS.pins.pinned_status_changed_sig.dispatch(t);
            }
          });
        },
        f = function(e) {
          e && (e.pinned_to && e.pinned_to.forEach(function(t) {
            var n = TS.shared.getModelObById(t);
            if (n) {
              o(!1, {
                file: e
              }, "file", n) && TS.pins.pinned_status_changed_sig.dispatch(n);
            }
          }), e.comments && e.comments.forEach(function(t) {
            p(e, t.id, t);
          }));
        },
        h = function() {
          if (!TS.boot_data.feature_lazy_pins) {
            var n = TS.shared.getActiveModelOb();
            !n || e[n.id] || t[n.id] || TS.pins.fetchPins(n);
          }
        },
        g = function() {
          n ? (e = {}, t = {}) : n = !0;
        },
        S = function() {
          var n = TS.shared.getActiveModelOb();
          delete e[n.id], delete t[n.id];
        };
    }();
  },
  2498: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("prefs", {
        highlight_words_changed_sig: new signals.Signal,
        seen_welcome_2_changed_sig: new signals.Signal,
        emoji_mode_changed_sig: new signals.Signal,
        obey_inline_img_limit_changed_sig: new signals.Signal,
        messages_theme_changed_sig: new signals.Signal,
        expand_inline_imgs_changed_sig: new signals.Signal,
        expand_internal_inline_imgs_changed_sig: new signals.Signal,
        expand_non_media_attachments_changed_sig: new signals.Signal,
        webapp_spellcheck_changed_sig: new signals.Signal,
        color_names_in_list_changed_sig: new signals.Signal,
        search_only_my_channels_changed_sig: new signals.Signal,
        search_exclude_channels_changed_sig: new signals.Signal,
        search_exclude_bots_changed_sig: new signals.Signal,
        search_only_current_team_changed_sig: new signals.Signal,
        box_enabled_changed_sig: new signals.Signal,
        dropbox_enabled_changed_sig: new signals.Signal,
        read_changed_sig: new signals.Signal,
        push_changed_sig: new signals.Signal,
        time24_changed_sig: new signals.Signal,
        sidebar_behavior_changed_sig: new signals.Signal,
        dtop_notif_changed_sig: new signals.Signal,
        muted_channels_changed_sig: new signals.Signal,
        mac_ssb_bullet_changed_sig: new signals.Signal,
        team_hide_referers_changed_sig: new signals.Signal,
        team_require_at_for_mention_changed_sig: new signals.Signal,
        sidebar_theme_changed_sig: new signals.Signal,
        no_invites_widget_in_sidebar_changed_sig: new signals.Signal,
        no_omnibox_in_channels_changed_sig: new signals.Signal,
        k_key_omnibox_auto_hide_count_changed_sig: new signals.Signal,
        prev_next_btn_changed_sig: new signals.Signal,
        display_real_names_override_changed_sig: new signals.Signal,
        team_display_real_names_changed_sig: new signals.Signal,
        team_perms_pref_changed_sig: new signals.Signal,
        privacy_policy_seen_changed_sig: new signals.Signal,
        two_factor_update_seen_changed_sig: new signals.Signal,
        compliance_export_start_changed_sig: new signals.Signal,
        team_disallow_public_file_urls_changed_sig: new signals.Signal,
        msg_preview_changed_sig: new signals.Signal,
        mentions_exclude_at_channels_changed_sig: new signals.Signal,
        mentions_exclude_at_user_groups_changed_sig: new signals.Signal,
        team_auth_mode_changed_sig: new signals.Signal,
        team_sso_auth_restrictions_changed_sig: new signals.Signal,
        team_posts_migrating_changed_sig: new signals.Signal,
        preferred_skin_tone_changed_sig: new signals.Signal,
        separate_private_channels_changed_sig: new signals.Signal,
        separate_shared_channels_changed_sig: new signals.Signal,
        whats_new_read_changed_sig: new signals.Signal,
        team_dnd_enabled_changed_sig: new signals.Signal,
        team_dnd_start_hour_changed_sig: new signals.Signal,
        team_dnd_end_hour_changed_sig: new signals.Signal,
        team_invites_only_admins_changed_sig: new signals.Signal,
        tz_changed_sig: new signals.Signal,
        team_allow_calls_changed_sig: new signals.Signal,
        team_calling_app_name_changed_sig: new signals.Signal,
        team_calling_app_id_changed_sig: new signals.Signal,
        team_handy_rxns_changed_sig: new signals.Signal,
        channel_handy_rxns_changed_sig: new signals.Signal,
        frecency_jumper_changed_sig: new signals.Signal,
        jumbomoji_changed_sig: new signals.Signal,
        hide_hex_swatch_changed_sig: new signals.Signal,
        channel_sort_changed_sig: new signals.Signal,
        show_memory_instrument_changed_sig: new signals.Signal,
        enable_unread_view_changed_sig: new signals.Signal,
        measure_css_usage_changed_sig: new signals.Signal,
        enable_react_emoji_picker_changed_sig: new signals.Signal,
        team_disable_file_editing_changed_sig: new signals.Signal,
        team_disable_file_deleting_changed_sig: new signals.Signal,
        team_display_email_addresses_changed_sig: new signals.Signal,
        all_unreads_sort_order_changed_sig: new signals.Signal,
        email_alerts_changed_sig: new signals.Signal,
        team_uses_customized_custom_status_presets_changed_sig: new signals.Signal,
        team_loud_channel_mentions_limit_changed_sig: new signals.Signal,
        locale_changed_sig: new signals.Signal,
        a11y_animations_changed_sig: new signals.Signal,
        use_react_sidebar_changed_sig: new signals.Signal,
        setPrefs: function(e) {
          var t = TS.model.prefs || {};
          TS.model.prefs = e, TS.prefs.mergeEmojiUse(TS.model.prefs.emoji_use), TS.prefs.mergeFrecencyJumper(TS.ui.frecency.isEnterprise() ? TS.model.prefs.frecency_ent_jumper : TS.model.prefs.frecency_jumper), TS.prefs.setUserColors(TS.model.prefs.user_colors), TS.prefs.setLoudChannels(TS.model.prefs.loud_channels), TS.prefs.setSuppressedChannels(TS.model.prefs.at_channel_suppressed_channels), TS.prefs.setPushSuppressedChannels(TS.model.prefs.push_at_channel_suppressed_channels), TS.prefs.setNeverChannels(TS.model.prefs.never_channels), TS.prefs.setMutedChannels(TS.model.prefs.muted_channels, t.muted_channels), TS.prefs.setLoudChannelsSet(TS.model.prefs.loud_channels_set), TS.prefs.setPushLoudChannels(TS.model.prefs.push_loud_channels), TS.prefs.setPushMentionChannels(TS.model.prefs.push_mention_channels), TS.prefs.setPushLoudChannelsSet(TS.model.prefs.push_loud_channels_set), TS.prefs.setSearchExcludeChannels(TS.model.prefs.search_exclude_channels), TS.prefs.setChannelSort(TS.model.prefs.channel_sort), TS.prefs.setSidebarThemeCustomValues(TS.utility.parseJSONOrElse(TS.model.prefs.sidebar_theme_custom_values, void 0)), TS.emoji.setEmojiMode(), TS.prefs.setTheme(), TS.model.prefs.emoji_autocomplete_big = !1, TSSSB.call("runFromTray", !!TS.model.prefs.winssb_run_from_tray), TSSSB.call("windowFlashBehavior", TS.model.prefs.winssb_window_flash_behavior), TS.boot_data.feature_name_tagging_client && (TS.model.prefs.require_at || (TS.model.prefs.require_at = !0), TS.model.team.prefs.require_at_for_mention || (TS.model.team.prefs.require_at_for_mention = !0)), TS.boot_data.page_needs_enterprise && (TS.model.prefs.require_at = !0, TS.model.team.prefs.require_at_for_mention = !0), TS.useRedux() && (TS.redux.prefs.setUserPrefs(TS.model.prefs), TS.redux.prefs.setTeamPrefs(TS.model.team.prefs));
        },
        setChannelSort: function(e) {
          TS.model.channel_sort = e;
        },
        setHighlightWords: function(e) {
          TS.model.prefs.highlight_words = e, TS.boot_data.feature_name_tagging_client ? TS.model.highlight_words = [] : (TS.model.highlight_words = ["@" + TS.model.user.name], TS.model.team.prefs.require_at_for_mention || TS.model.highlight_words.push(TS.model.user.name)), TS.model.highlight_words.push("<@" + TS.model.user.id), e && "string" == typeof e && (TS.model.highlight_words = TS.model.highlight_words.concat(e.split(","))), TS.model.highlight_words_regex = null;
        },
        setSuppressedChannels: function(e) {
          TS.model.prefs.at_channel_suppressed_channels = e, TS.model.at_channel_suppressed_channels = [], e && "string" == typeof e && (TS.model.at_channel_suppressed_channels = TS.model.at_channel_suppressed_channels.concat(e.split(",")));
        },
        setPushSuppressedChannels: function(e) {
          TS.model.prefs.push_at_channel_suppressed_channels = e, TS.model.push_at_channel_suppressed_channels = [], e && "string" == typeof e && (TS.model.push_at_channel_suppressed_channels = TS.model.push_at_channel_suppressed_channels.concat(e.split(",")));
        },
        setLoudChannels: function(e) {
          TS.model.prefs.loud_channels = e, TS.model.loud_channels = [], e && "string" == typeof e && (TS.model.loud_channels = TS.model.loud_channels.concat(e.split(",")));
        },
        setNeverChannels: function(e) {
          TS.model.prefs.never_channels = e, TS.model.never_channels = [], e && "string" == typeof e && (TS.model.never_channels = TS.model.never_channels.concat(e.split(",")));
        },
        setMutedChannels: function(t, n) {
          if (n || (n = TS.model.prefs.muted_channels), n !== t || !e) {
            TS.model.prev_muted_channels = TS.model.prefs.muted_channels && "string" == typeof TS.model.prefs.muted_channels ? TS.model.prefs.muted_channels.split(",") : [], TS.model.prefs.muted_channels = t, e = !0;
            var i, r;
            for (TS.model.muted_channels = [], TS.model.newly_muted_channels = [], TS.model.newly_unmuted_channels = [], t && "string" == typeof t && (TS.model.muted_channels = TS.model.muted_channels.concat(t.split(",")), TS.model.newly_unmuted_channels = _.difference(TS.model.prev_muted_channels, TS.model.muted_channels), TS.model.newly_muted_channels = _.difference(TS.model.muted_channels, TS.model.prev_muted_channels)), i = 0; i < TS.model.muted_channels.length; i += 1)(r = TS.shared.getModelObById(TS.model.muted_channels[i])) && r.unread_cnt && (r._show_in_list_even_though_no_unreads = !0);
            TS.model.channels.forEach(function(e) {
              TS.notifs.isCorGMuted(e.id) || (e._show_in_list_even_though_no_unreads = !1);
            }), TS.model.groups.forEach(function(e) {
              TS.notifs.isCorGMuted(e.id) || (e._show_in_list_even_though_no_unreads = !1);
            }), TS.useRedux() && TS.redux.channels.updateMutedChannels();
          }
        },
        setLoudChannelsSet: function(e) {
          TS.model.prefs.loud_channels_set = e, TS.model.loud_channels_set = [], e && "string" == typeof e && (TS.model.loud_channels_set = TS.model.loud_channels_set.concat(e.split(",")));
        },
        setPushLoudChannels: function(e) {
          TS.model.prefs.push_loud_channels = e, TS.model.push_loud_channels = [], e && "string" == typeof e && (TS.model.push_loud_channels = TS.model.push_loud_channels.concat(e.split(",")));
        },
        setPushMentionChannels: function(e) {
          TS.model.prefs.push_mention_channels = e, TS.model.push_mention_channels = [], e && "string" == typeof e && (TS.model.push_mention_channels = TS.model.push_mention_channels.concat(e.split(",")));
        },
        setPushLoudChannelsSet: function(e) {
          TS.model.prefs.push_loud_channels_set = e, TS.model.push_loud_channels_set = [], e && "string" == typeof e && (TS.model.push_loud_channels_set = TS.model.push_loud_channels_set.concat(e.split(",")));
        },
        setSearchExcludeChannels: function(e) {
          TS.model.prefs.search_exclude_channels = e, TS.model.search_exclude_channels = [], e && "string" == typeof e && (TS.model.search_exclude_channels = TS.model.search_exclude_channels.concat(e.split(",")));
        },
        mergeFrecencyJumper: function(e) {
          return e && "object" === (void 0 === e ? "undefined" : n(e)) || (e = TS.utility.parseJSONOrElse(e || null) || {}), TS.model.frecency_jumper = e, !0;
        },
        mergeEmojiUse: function(e) {
          TS.model.emoji_names && TS.model.emoji_names.length || TS.emoji.makeMenuLists(), e && "object" === (void 0 === e ? "undefined" : n(e)) || (e = TS.utility.parseJSONOrElse(e || null) || {}, e = _.pickBy(e, function(e, t) {
            return _.includes(TS.model.emoji_names, t);
          }));
          var t = !1;
          for (var i in e)(!TS.model.emoji_use.hasOwnProperty(i) || e[i] > TS.model.emoji_use[i]) && (TS.model.emoji_use[i] = e[i], t = !0);
          return t ? (TS.has_pri[777] && TS.dir(777, TS.model.emoji_use, "mergeEmojiUse TS.model.emoji_use set to:"), !0) : (TS.has_pri[777] && TS.log(777, "mergeEmojiUse TS.model.emoji_use unchanged"), !1);
        },
        setUserColors: function(e) {
          TS.model.prefs.user_colors = e;
          var t = e ? JSON.parse(e) : {};
          TS.model.user_colors = t || {};
        },
        setTheme: function() {
          "default" === TS.model.prefs.messages_theme && (TS.model.prefs.messages_theme = "light_with_avatars"), TS.model.prefs.theme = "light", TS.model.prefs.avatars = !0, "dense" === TS.model.prefs.messages_theme ? (TS.model.prefs.theme = "dense", TS.model.prefs.avatars = !1) : "light" === TS.model.prefs.messages_theme ? (TS.model.prefs.theme = "light", TS.model.prefs.avatars = !1) : "light_with_avatars" === TS.model.prefs.messages_theme && (TS.model.prefs.theme = "light", TS.model.prefs.avatars = !0);
        },
        onTeamPrefChanged: function(e) {
          if ("msg_edit_window_mins" === e.name) TS.model.team.prefs.msg_edit_window_mins = e.value;
          else if ("allow_message_deletion" === e.name) TS.model.team.prefs.allow_message_deletion = !!e.value;
          else if ("hide_referers" === e.name) TS.model.team.prefs.hide_referers = !!e.value, TS.prefs.team_hide_referers_changed_sig.dispatch();
          else if ("require_at_for_mention" === e.name) TS.boot_data_feature_name_tagging_client || (TS.model.team.prefs.require_at_for_mention = !!e.value, TS.prefs.setHighlightWords(TS.model.prefs.highlight_words), TS.prefs.team_require_at_for_mention_changed_sig.dispatch());
          else if ("display_real_names" === e.name) TS.model.team.prefs.display_real_names = !!e.value, TS.prefs.team_display_real_names_changed_sig.dispatch();
          else if ("display_email_addresses" === e.name) TS.model.team.prefs.display_email_addresses = !!e.value, TS.prefs.team_display_email_addresses_changed_sig.dispatch();
          else if (0 === e.name.indexOf("who_can_")) TS.model.team.prefs[e.name] != e.value && (TS.model.team.prefs[e.name] = e.value, TS.prefs.team_perms_pref_changed_sig.dispatch(e.name));
          else if ("compliance_export_start" === e.name) TS.model.team.prefs.compliance_export_start != e.value && (TS.model.team.prefs.compliance_export_start = e.value, TS.prefs.compliance_export_start_changed_sig.dispatch());
          else if ("disallow_public_file_urls" === e.name) TS.model.team.prefs.disallow_public_file_urls = !!e.value, TS.prefs.team_disallow_public_file_urls_changed_sig.dispatch();
          else if ("auth_mode" === e.name) TS.model.team.prefs.auth_mode = e.value, TS.prefs.team_auth_mode_changed_sig.dispatch();
          else if ("sso_auth_restrictions" === e.name) TS.model.team.prefs.sso_auth_restrictions = e.value, TS.prefs.team_sso_auth_restrictions_changed_sig.dispatch();
          else if ("posts_migrating" === e.name) TS.model.team.prefs.posts_migrating = e.value, TS.prefs.team_posts_migrating_changed_sig.dispatch();
          else if ("dnd_enabled" === e.name) TS.model.team.prefs.dnd_enabled = e.value, TS.prefs.team_dnd_enabled_changed_sig.dispatch();
          else if ("dnd_start_hour" === e.name) TS.model.team.prefs.dnd_start_hour = e.value, TS.prefs.team_dnd_start_hour_changed_sig.dispatch();
          else if ("dnd_end_hour" === e.name) TS.model.team.prefs.dnd_end_hour = e.value, TS.prefs.team_dnd_end_hour_changed_sig.dispatch();
          else if ("invites_only_admins" === e.name) TS.model.team.prefs.invites_only_admins = e.value, TS.prefs.team_invites_only_admins_changed_sig.dispatch();
          else if ("allow_calls" === e.name) TS.model.team.prefs.allow_calls = e.value, TS.prefs.team_allow_calls_changed_sig.dispatch();
          else if ("calling_app_id" === e.name) TS.model.team.prefs.calling_app_id = e.value, TS.prefs.team_calling_app_id_changed_sig.dispatch();
          else if ("calling_app_name" === e.name) TS.model.team.prefs.calling_app_name = e.value, TS.prefs.team_calling_app_name_changed_sig.dispatch();
          else if ("team_handy_rxns" === e.name) TS.rxns.clearHandyRxnsDisplayDataCache(), TS.model.team.prefs.team_handy_rxns = e.value, TS.prefs.team_handy_rxns_changed_sig.dispatch();
          else if ("channel_handy_rxns" === e.name) TS.rxns.clearHandyRxnsDisplayDataCache(), TS.model.team.prefs.channel_handy_rxns = e.value, TS.prefs.channel_handy_rxns_changed_sig.dispatch();
          else if ("disable_file_editing" === e.name) TS.model.team.prefs.disable_file_editing = e.value, TS.prefs.team_disable_file_editing_changed_sig.dispatch();
          else if ("disable_file_deleting" === e.name) TS.model.team.prefs.disable_file_deleting = e.value, TS.prefs.team_disable_file_deleting_changed_sig.dispatch();
          else if ("who_can_post_general" === e.name) {
            TS.model.team.prefs[e.name] = e.value;
            var t = TS.channels.getGeneralChannel().id;
            TS.permissions.members.canPostInGeneral() ? TS.channels.read_only.removeChannelFromList(t) : TS.channels.read_only.addChannelToList(t);
          } else "uses_customized_custom_status_presets" === e.name ? (TS.model.team.prefs[e.name] = e.value, TS.prefs.team_uses_customized_custom_status_presets_changed_sig.dispatch()) : "loud_channel_mentions_limit" === e.name ? (TS.model.team.prefs[e.name] = e.value, TS.prefs.team_loud_channel_mentions_limit_changed_sig.dispatch()) : TS.model.team.prefs[e.name] = e.value;
        },
        updateTeamPrefCanUserManageSharedChannels: function(e) {
          TS.model.team.prefs.can_user_manage_shared_channels = e.can_manage;
        },
        onPrefChanged: function(e) {
          switch (e.name) {
            case "locale":
              TS.prefs.locale_changed_sig.dispatch(e.value);
              break;
            case "flannel_server_pool":
              TS.model.prefs.flannel_server_pool = e.value;
              break;
            case "color_names_in_list":
              TS.model.prefs.color_names_in_list = !!e.value, TS.prefs.color_names_in_list_changed_sig.dispatch();
              break;
            case "display_real_names_override":
              TS.model.prefs.display_real_names_override = e.value, TS.prefs.display_real_names_override_changed_sig.dispatch();
              break;
            case "growls_enabled":
              TS.model.prefs.growls_enabled = !!e.value, TS.prefs.dtop_notif_changed_sig.dispatch();
              break;
            case "sidebar_theme":
              TS.model.prefs.sidebar_theme !== e.value && (TS.model.prefs.sidebar_theme = e.value, TS.prefs.sidebar_theme_changed_sig.dispatch());
              break;
            case "sidebar_theme_custom_values":
              TS.model.prefs.sidebar_theme_custom_values !== e.value && (TS.prefs.setSidebarThemeCustomValues(JSON.parse(e.value)), TS.prefs.sidebar_theme_changed_sig.dispatch());
              break;
            case "expand_inline_imgs":
              TS.model.prefs.expand_inline_imgs = !!e.value, TS.prefs.expand_inline_imgs_changed_sig.dispatch();
              break;
            case "webapp_spellcheck":
              TS.model.prefs.webapp_spellcheck = !!e.value, TS.prefs.webapp_spellcheck_changed_sig.dispatch();
              break;
            case "expand_internal_inline_imgs":
              TS.model.prefs.expand_internal_inline_imgs = !!e.value, TS.prefs.expand_internal_inline_imgs_changed_sig.dispatch();
              break;
            case "expand_non_media_attachments":
              TS.model.prefs.expand_non_media_attachments = !!e.value, TS.prefs.expand_non_media_attachments_changed_sig.dispatch();
              break;
            case "messages_theme":
              TS.model.prefs.messages_theme = e.value, TS.prefs.setTheme(), TS.prefs.messages_theme_changed_sig.dispatch();
              break;
            case "highlight_words":
              TS.prefs.setHighlightWords(e.value), TS.prefs.highlight_words_changed_sig.dispatch();
              break;
            case "at_channel_suppressed_channels":
              TS.prefs.setSuppressedChannels(e.value), TS.prefs.dtop_notif_changed_sig.dispatch();
              break;
            case "push_at_channel_suppressed_channels":
              TS.prefs.setPushSuppressedChannels(e.value), TS.prefs.push_changed_sig.dispatch();
              break;
            case "loud_channels":
              TS.prefs.setLoudChannels(e.value);
              break;
            case "never_channels":
              TS.prefs.setNeverChannels(e.value);
              break;
            case "muted_channels":
              TS.prefs.setMutedChannels(e.value), TS.prefs.muted_channels_changed_sig.dispatch();
              break;
            case "loud_channels_set":
              TS.prefs.setLoudChannelsSet(e.value), TS.prefs.dtop_notif_changed_sig.dispatch();
              break;
            case "push_loud_channels":
              TS.prefs.setPushLoudChannels(e.value);
              break;
            case "push_mention_channels":
              TS.prefs.setPushMentionChannels(e.value);
              break;
            case "push_loud_channels_set":
              TS.prefs.setPushLoudChannelsSet(e.value), TS.prefs.push_changed_sig.dispatch();
              break;
            case "emoji_use":
              TS.prefs.mergeEmojiUse(e.value) && TS.emoji.maybeRemakeMenuListsIfFrequentsChanged();
              break;
            case "user_colors":
              _.each(_.keys(TS.model.user_colors), function(e) {
                var t = TS.members.getMemberById(e);
                t && TS.members.setMemberUserColor(t, t.color);
              }), TS.prefs.setUserColors(e.value), _.forOwn(TS.model.user_colors, function(e, t) {
                var n = TS.members.getMemberById(t);
                n && TS.members.setMemberUserColor(n, e);
              });
              break;
            case "graphic_emoticons":
              TS.rxns.clearHandyRxnsDisplayDataCache(), TS.model.prefs.graphic_emoticons = e.value, TS.emoji.setEmojiMode(), TS.prefs.emoji_mode_changed_sig.dispatch();
              break;
            case "ss_emojis":
              TS.model.prefs.ss_emojis = e.value, TS.emoji.setEmojiMode(), TS.prefs.emoji_mode_changed_sig.dispatch(), TS.emoji.makeMenuLists();
              break;
            case "emoji_mode":
              TS.rxns.clearHandyRxnsDisplayDataCache(), TS.model.prefs.emoji_mode = e.value, TS.emoji.setEmojiMode(), TS.prefs.emoji_mode_changed_sig.dispatch(), TS.emoji.makeMenuLists();
              break;
            case "obey_inline_img_limit":
              TS.model.prefs.obey_inline_img_limit = e.value, TS.prefs.obey_inline_img_limit_changed_sig.dispatch();
              break;
            case "search_only_my_channels":
              TS.model.prefs.search_only_my_channels = !!e.value, TS.prefs.search_only_my_channels_changed_sig.dispatch();
              break;
            case "search_only_current_team":
              TS.model.prefs.search_only_current_team = !!e.value, TS.prefs.search_only_current_team_changed_sig.dispatch();
              break;
            case "search_exclude_channels":
              TS.prefs.setSearchExcludeChannels(e.value), TS.prefs.search_exclude_channels_changed_sig.dispatch();
              break;
            case "search_exclude_bots":
              TS.model.prefs.search_exclude_bots = !!e.value, TS.prefs.search_exclude_bots_changed_sig.dispatch();
              break;
            case "has_uploaded":
              TS.model.prefs.has_uploaded = !!e.value;
              break;
            case "has_invited":
              TS.model.prefs.has_invited = !!e.value;
              break;
            case "has_created_channel":
              TS.model.prefs.has_created_channel = !!e.value;
              break;
            case "no_joined_overlays":
              TS.model.prefs.no_joined_overlays = !!e.value;
              break;
            case "no_created_overlays":
              TS.model.prefs.no_created_overlays = !!e.value;
              break;
            case "seen_welcome_2":
              TS.model.prefs.seen_welcome_2 = !!e.value, TS.prefs.seen_welcome_2_changed_sig.dispatch();
              break;
            case "box_enabled":
              TS.model.prefs.box_enabled = !!e.value, TS.prefs.box_enabled_changed_sig.dispatch();
              break;
            case "dropbox_enabled":
              TS.model.prefs.dropbox_enabled = !!e.value, TS.prefs.dropbox_enabled_changed_sig.dispatch();
              break;
            case "mark_msgs_read_immediately":
              TS.model.prefs.mark_msgs_read_immediately !== !!e.value && (TS.model.prefs.mark_msgs_read_immediately = !!e.value, TS.prefs.read_changed_sig.dispatch());
              break;
            case "start_scroll_at_oldest":
              TS.model.prefs.start_scroll_at_oldest !== !!e.value && (TS.model.prefs.start_scroll_at_oldest = !!e.value, TS.prefs.read_changed_sig.dispatch());
              break;
            case "mac_ssb_bullet":
              TS.model.prefs.mac_ssb_bullet !== !!e.value && (TS.model.prefs.mac_ssb_bullet = !!e.value, TS.prefs.mac_ssb_bullet_changed_sig.dispatch());
              break;
            case "all_channels_loud":
              TS.model.prefs.all_channels_loud !== !!e.value && (TS.model.prefs.all_channels_loud = !!e.value, TS.prefs.dtop_notif_changed_sig.dispatch());
              break;
            case "push_everything":
              TS.model.prefs.push_everything !== !!e.value && (TS.model.prefs.push_everything = !!e.value, TS.prefs.push_changed_sig.dispatch());
              break;
            case "push_mention_alert":
              TS.model.prefs.push_mention_alert !== !!e.value && (TS.model.prefs.push_mention_alert = !!e.value, TS.prefs.push_changed_sig.dispatch());
              break;
            case "push_dm_alert":
              TS.model.prefs.push_dm_alert !== !!e.value && (TS.model.prefs.push_dm_alert = !!e.value, TS.prefs.push_changed_sig.dispatch());
              break;
            case "time24":
              TS.model.prefs.time24 !== !!e.value && (TS.model.prefs.time24 = !!e.value, TS.prefs.time24_changed_sig.dispatch());
              break;
            case "sidebar_behavior":
              TS.model.prefs.sidebar_behavior != e.value && (TS.model.prefs.sidebar_behavior = e.value, TS.prefs.sidebar_behavior_changed_sig.dispatch());
              break;
            case "two_factor_update_seen":
              TS.model.two_factor_update_seen != e.value && (TS.mode.prefs.two_factor_update_seen = e.value, TS.prefs.two_factor_update_seen_changed_sig.dispatch());
              break;
            case "privacy_policy_seen":
              TS.model.prefs.privacy_policy_seen != e.value && (TS.model.prefs.privacy_policy_seen = e.value, TS.prefs.privacy_policy_seen_changed_sig.dispatch());
              break;
            case "last_seen_at_channel_warning":
              TS.model.prefs.last_seen_at_channel_warning != e.value && (TS.model.prefs.last_seen_at_channel_warning = e.value);
              break;
            case "msg_preview":
              TS.model.prefs.msg_preview != e.value && (TS.model.prefs.msg_preview = e.value, TS.prefs.msg_preview_changed_sig.dispatch());
              break;
            case "msg_preview_persistent":
              TS.model.prefs.msg_preview_persistent != e.value && (TS.model.prefs.msg_preview_persistent = e.value, TS.prefs.msg_preview_changed_sig.dispatch());
              break;
            case "winssb_run_from_tray":
              TS.model.prefs.winssb_run_from_tray != e.value && (TS.model.prefs.winssb_run_from_tray = e.value, TSSSB.call("runFromTray", !!TS.model.prefs.winssb_run_from_tray));
              break;
            case "winssb_window_flash_behavior":
              TS.model.prefs.winssb_window_flash_behavior != e.value && (TS.model.prefs.winssb_window_flash_behavior = e.value, TSSSB.call("windowFlashBehavior", TS.model.prefs.winssb_window_flash_behavior));
              break;
            case "mentions_exclude_at_channels":
              TS.model.prefs.mentions_exclude_at_channels != e.value && (TS.model.prefs.mentions_exclude_at_channels = e.value, TS.prefs.mentions_exclude_at_channels_changed_sig.dispatch());
              break;
            case "mentions_exclude_at_user_groups":
              TS.model.prefs.mentions_exclude_at_user_groups != e.value && (TS.model.prefs.mentions_exclude_at_user_groups = e.value, TS.prefs.mentions_exclude_at_user_groups_changed_sig.dispatch());
              break;
            case "no_invites_widget_in_sidebar":
              TS.model.prefs.no_invites_widget_in_sidebar != e.value && (TS.model.prefs.no_invites_widget_in_sidebar = e.value, TS.prefs.no_invites_widget_in_sidebar_changed_sig.dispatch());
              break;
            case "no_omnibox_in_channels":
              TS.model.prefs.no_omnibox_in_channels != e.value && (TS.model.prefs.no_omnibox_in_channels = e.value, TS.prefs.no_omnibox_in_channels_changed_sig.dispatch(), TS.model.prefs.no_omnibox_in_channels ? TS.clog.track("QUICKSWITCHER_ACTION", {
                trigger: "quick_switcher_pref_changed",
                action: "button_hidden"
              }) : TS.clog.track("QUICKSWITCHER_ACTION", {
                trigger: "quick_switcher_pref_changed",
                action: "button_shown"
              }));
              break;
            case "k_key_omnibox_auto_hide_count":
              TS.model.prefs.k_key_omnibox_auto_hide_count != e.value && (TS.model.prefs.k_key_omnibox_auto_hide_count = e.value, TS.prefs.k_key_omnibox_auto_hide_count_changed_sig.dispatch());
              break;
            case "prev_next_btn":
              TS.model.prefs.prev_next_btn != e.value && (TS.model.prefs.prev_next_btn = e.value, TS.prefs.prev_next_btn_changed_sig.dispatch());
              break;
            case "preferred_skin_tone":
              TS.model.prefs.preferred_skin_tone != e.value && (TS.rxns.clearHandyRxnsDisplayDataCache(), TS.model.prefs.preferred_skin_tone = e.value, TS.prefs.preferred_skin_tone_changed_sig.dispatch());
              break;
            case "separate_private_channels":
              TS.model.prefs.separate_private_channels != e.value && (TS.model.prefs.separate_private_channels = e.value, TS.prefs.separate_private_channels_changed_sig.dispatch());
              break;
            case "separate_shared_channels":
              TS.model.prefs.separate_shared_channels != e.value && (TS.model.prefs.separate_shared_channels = e.value, TS.prefs.separate_shared_channels_changed_sig.dispatch());
              break;
            case "whats_new_read":
              TS.model.prefs.whats_new_read != e.value && (TS.model.prefs.whats_new_read = e.value, TS.prefs.whats_new_read_changed_sig.dispatch());
              break;
            case "tz":
              TS.model.prefs.tz != e.value && (TS.model.prefs.tz = e.value, TS.prefs.tz_changed_sig.dispatch());
              break;
            case "frecency_jumper":
              if (TS.ui.frecency.isEnterprise()) break;
              TS.prefs.mergeFrecencyJumper(e.value) && TS.prefs.frecency_jumper_changed_sig.dispatch();
              break;
            case "frecency_ent_jumper":
              TS.log(666, "Received a pref_change event for frecency_ent_jumper."), TS.prefs.mergeFrecencyJumper(e.value) && TS.prefs.frecency_jumper_changed_sig.dispatch();
              break;
            case "jumbomoji":
              TS.model.prefs.jumbomoji != e.value && (TS.model.prefs.jumbomoji = e.value, TS.prefs.jumbomoji_changed_sig.dispatch());
              break;
            case "hide_hex_swatch":
              TS.model.prefs.hide_hex_swatch != e.value && (TS.model.prefs.hide_hex_swatch = e.value, TS.prefs.hide_hex_swatch_changed_sig.dispatch());
              break;
            case "a11y_animations":
              TS.model.prefs.a11y_animations !== e.value && (TS.model.prefs.a11y_animations = e.value, TS.prefs.a11y_animations_changed_sig.dispatch(), TS.client && TS.clog.track("PREF_USER_CLIENT_UPDATE", {
                a11y_animations: TS.model.prefs.a11y_animations
              }));
              break;
            case "show_memory_instrument":
              TS.model.prefs.show_memory_instrument !== e.value && (TS.model.prefs.show_memory_instrument = e.value, TS.prefs.show_memory_instrument_changed_sig.dispatch());
              break;
            case "channel_sort":
              TS.model.prefs.channel_sort !== e.value && (TS.model.prefs.channel_sort = e.value, TS.prefs.setChannelSort(TS.model.prefs.channel_sort), TS.prefs.channel_sort_changed_sig.dispatch());
              break;
            case "enable_unread_view":
              TS.model.prefs.enable_unread_view !== e.value && (TS.model.prefs.enable_unread_view = e.value, TS.prefs.enable_unread_view_changed_sig.dispatch());
              break;
            case "measure_css_usage":
              TS.model.prefs.measure_css_usage !== e.value && (TS.model.prefs.measure_css_usage = e.value, TS.prefs.measure_css_usage_changed_sig.dispatch());
              break;
            case "enable_react_emoji_picker":
              TS.model.prefs.enable_react_emoji_picker !== e.value && (TS.model.prefs.enable_react_emoji_picker = e.value, TS.prefs.enable_react_emoji_picker_changed_sig.dispatch());
              break;
            case "client_logs_pri":
              TS.model.prefs[e.name] = e.value, TS.console.setAppropriatePri();
              break;
            case "email_alerts":
              TS.model.prefs[e.name] = e.value, TS.prefs.email_alerts_changed_sig.dispatch();
              break;
            case "use_react_sidebar":
              TS.model.prefs.use_react_sidebar !== e.value && (TS.model.prefs.use_react_sidebar = e.value, TS.prefs.use_react_sidebar_changed_sig.dispatch());
              break;
            default:
              TS.model.prefs[e.name] = e.value;
          }
        },
        hex_regex: new RegExp(/^#?([0-9a-f]{6})$/i),
        setSidebarThemeCustomValues: function(e) {
          var t = !1;
          e && "object" === (void 0 === e ? "undefined" : n(e)) && void 0 === e.length && _.forOwn(e, function(n, i) {
            return t = !1, !!n && (!!n.substr && (e[i] = n.substr(0, 7), !!n.match(TS.prefs.hex_regex) && void(t = !0)));
          }), t ? TS.model.prefs.sidebar_theme_custom_values = JSON.stringify(e) : (TS.model.prefs.sidebar_theme = "default", TS.model.prefs.sidebar_theme_custom_values = JSON.stringify(TS.sidebar_themes.default_themes.default_theme));
        },
        setMultiPrefsByAPI: function(e, t) {
          var n = "";
          if (_.forOwn(e, function(e, t) {
              n += "&" + encodeURIComponent(t) + "=" + encodeURIComponent(e);
            }), !n) return void TS.error(" no prefs to set?");
          var i = {
            prefs: n
          };
          return TS.prefs.setPrefByAPI(i, t);
        },
        setPrefByAPI: function(e, t) {
          var n = function(e, n, i) {
            if (!e) {
              var r;
              i.hasOwnProperty("name") ? r = "pref name: " + i.name : i.prefs && (r = "(multiple prefs)"), TS.logError(r, "TS.prefs.setPrefByAPI call got a not ok rsp", "API response error"), setTimeout(function() {
                i.prefs ? TS.error("multi preferences setting failed.") : TS.error('"' + i.name + '" preference setting failed.');
              }, 0);
            }
            t && t(e, n, i);
          };
          return (TS.model.window_unloading ? TS.api.callSynchronously : TS.api.callImmediately)("users.prefs.set", e, n);
        },
        setTeamPrefByAPI: function(e, t, n) {
          var i = TS.model.window_unloading ? TS.api.callSynchronously : TS.api.callImmediately,
            r = $.Deferred();
          return i("team.prefs.set", {
            prefs: JSON.stringify(e)
          }, function(i, a) {
            if (i) {
              if (TS.web) {
                n = n || [];
                Object.keys(e).concat(n).forEach(function(t) {
                  a.prefs.hasOwnProperty(t) && (e.hasOwnProperty(t) || TS.model.team.prefs[t] !== a.prefs[t]) && TS.prefs.onTeamPrefChanged({
                    name: t,
                    value: a.prefs[t]
                  });
                });
              }
              r.resolve(a.prefs);
            } else r.reject(a), t && t(a);
          }), r;
        },
        saveHighlightWords: function(e, n, i) {
          var r = t(e);
          return i || TS.model.prefs.highlight_words != r ? TS.prefs.setPrefByAPI({
            name: "highlight_words",
            value: r
          }, n) : Promise.resolve();
        },
        getReadStateTrackingPref: function() {
          var e = "default";
          return TS.model.prefs.mark_msgs_read_immediately && TS.model.prefs.start_scroll_at_oldest ? e = "immediate_scroll" : TS.model.prefs.mark_msgs_read_immediately && (e = "immediate"), e;
        },
        setReadStateTrackingPref: function(e, t) {
          var n = {};
          "immediate_scroll" === e || "immediate" === e ? (n.mark_msgs_read_immediately = !0, TS.model.prefs.mark_msgs_read_immediately = !0, "immediate_scroll" === e ? (n.start_scroll_at_oldest = !0, TS.model.prefs.start_scroll_at_oldest = !0) : (n.start_scroll_at_oldest = !1, TS.model.prefs.start_scroll_at_oldest = !1)) : (n.mark_msgs_read_immediately = !1, TS.model.prefs.mark_msgs_read_immediately = !1, n.start_scroll_at_oldest = !1, TS.model.prefs.start_scroll_at_oldest = !1), TS.prefs.setMultiPrefsByAPI(n, t);
        },
        test: function() {
          return {
            _cleanHighlightWords: t
          };
        }
      });
      var e = !1,
        t = function(e) {
          return _.isString(e) ? (e = TS.format.replaceUnicodeDoppelgangers(e), _(e).split(",").map(_.trim).compact().join(",")) : "";
        };
    }();
  },
  2499: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("presence_manager", {
        sub_list_changed: new signals.Signal,
        onStart: function() {
          t = !0, c = TS.utility.enableFeatureForUser(1), r.length && g(), a.length && S(), TS.isSocketManagerEnabled() ? (TS.interop.SocketManager.disconnectedSig.add(b), TS.interop.SocketManager.connectedSig.add(T)) : (TS.ms.disconnected_sig.add(b), TS.ms.connected_sig.add(T));
        },
        addPresenceList: function(e) {
          -1 === n.indexOf(e) && (n.push(e), e.added_sig.add(m), e.removed_sig.add(p));
        },
        removePresenceList: function(e) {
          n.indexOf(e) > -1 && (n.splice(n.indexOf(e), 1), e.added_sig.remove(m), e.removed_sig.remove(p));
        },
        createNewPresenceList: function(e) {
          return new TS.PresenceList(e);
        },
        isSubscribedToMember: function(e) {
          return r.indexOf(e) >= 0;
        },
        queryMemberPresence: function(e) {
          _.isArray(e) ? e.forEach(function(e) {
            u(e);
          }) : u(e), S();
        },
        periodicallyCheckPresenceConsistency: function(t) {
          _.isUndefined(t) && (t = 1e3), e && (clearInterval(e), e = null), e = setInterval(v, t);
        },
        stopCheckingPresenceConsistency: function() {
          e && clearInterval(e), e = null;
        },
        getSubList: function() {
          return r.slice();
        },
        test: function() {
          var e = {
            getSubObject: function() {
              var e, t = {};
              for (e in i) i[e] && (t[e + " " + TS.members.getMemberById(e).name] = i[e]);
              return t;
            },
            getSubList: function() {
              return r;
            }
          };
          return Object.defineProperty(e, "_is_first_connection", {
            get: function() {
              return d;
            },
            set: function(e) {
              d = e;
            }
          }), Object.defineProperty(e, "_handleConnect", {
            get: function() {
              return T;
            },
            set: function(e) {
              T = e;
            }
          }), Object.defineProperty(e, "_addMemberToQueryList", {
            get: function() {
              return u;
            },
            set: function(e) {
              u = e;
            }
          }), Object.defineProperty(e, "_sendSubList", {
            get: function() {
              return g;
            },
            set: function(e) {
              g = e;
            }
          }), Object.defineProperty(e, "_sendQueryList", {
            get: function() {
              return S;
            },
            set: function(e) {
              S = e;
            }
          }), e;
        }
      });
      var e, t = !1,
        n = [],
        i = {},
        r = [],
        a = [],
        s = !1,
        o = !1,
        l = !1,
        d = !0,
        c = !1,
        u = function(e) {
          r.indexOf(e) > -1 || a.indexOf(e) > -1 || a.push(e);
        },
        m = function(e) {
          _.isArray(e) || (e = [e]), e.forEach(function(e) {
            f(e);
          });
        },
        p = function(e) {
          _.isArray(e) || (e = [e]), e.forEach(function(e) {
            h(e);
          });
        },
        f = function(e) {
          if ("USLACKBOT" !== e) return i[e] ? i[e] += 1 : (i[e] = 1, r.push(e), g()), null;
        },
        h = function(e) {
          if (i[e] && (i[e] -= 1, !i[e])) {
            var t = r.indexOf(e);
            r.splice(t, 1), g();
          }
          return null;
        },
        g = function() {
          if (!t || 0 === r.length || s) return null;
          (TS.isSocketManagerEnabled() ? TS.interop.SocketManager.isConnected() : TS.model.ms_connected) && (s = !0, Promise.resolve().then(function() {
            s = !1, c && TS.metrics.count("presence_manager", r.length), r && r.length > 1300 && (l || (TS.console.logError({}, "presence_sub_list_too_long", "List length is " + r.length), l = !0), r = r.slice(0, 1300));
            var e = {
              type: "presence_sub",
              ids: r
            };
            return TS.isSocketManagerEnabled() ? TS.interop.SocketManager.send(e) : TS.ms.send(e), TS.presence_manager.sub_list_changed.dispatch(), null;
          }));
        },
        S = function() {
          if (!t || 0 === a.length || o) return null;
          (TS.isSocketManagerEnabled() ? TS.interop.SocketManager.isConnected() : TS.model.ms_connected) && (o = !0, Promise.resolve().then(function() {
            return o = !1, _.chunk(a, 1300).forEach(function(e) {
              var t = {
                type: "presence_query",
                ids: e
              };
              TS.isSocketManagerEnabled() ? TS.interop.SocketManager.send(t) : TS.ms.send(t);
            }), a = [], null;
          }));
        };
      g = _.throttle(g, 1e3), S = _.throttle(S, 1e3);
      var T = function(e) {
          if (TS.client && !d && !e) {
            var t = _.map(TS.model.members, "id"),
              n = _.map(TS.model.bots, "id");
            t.concat(n).forEach(function(e) {
              u(e);
            });
          }
          d = !1, g(), S();
        },
        b = function() {
          var e = function() {
            g(), S();
          };
          TS.isSocketManagerEnabled() ? TS.interop.SocketManager.promiseToHaveOpenWebSocket().then(e) : TS.ms.promiseToHaveOpenWebSocket().then(e);
        },
        v = function() {
          var e, t = [],
            n = [],
            i = [];
          if (Array.prototype.slice.call(document.querySelectorAll("[data-member-presence]")).forEach(function(t) {
              e = t.getAttribute("data-member-presence"), $(t).is(":visible") ? n.push(e) : i.push(e);
            }), n = _.uniq(n), _.difference(n, r).length) {
            var a = _.map(_.difference(n, r), TS.members.getMemberById);
            TS.warn("There are members needing presence updates in the DOM that are not in the presence subscription list"), TS.warn("Missing Names:", _.map(a, "name")), TS.warn("Missing Ids:", _.map(a, "id"));
          }
          if (t = _.uniq(n.concat(i)), _.difference(r, t).length) {
            var s = _.map(_.difference(r, t), TS.members.getMemberById);
            TS.warn("There are members in the presence subscription list that are no longer in the DOM."), TS.warn("This might be fine if a longListView of members is showing, but once that list is removed these errors should go away."), TS.warn("Extra Names:", _.map(s, "name")), TS.warn("Extra Ids:", _.map(s, "id"));
          }
        };
    }();
  },
  2501: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.channels", {
        onStart: function() {
          TS.useRedux() && (e = TS.interop.redux.entities.channels.isGroup, t = TS.interop.redux.entities.channels.isChannel, n = TS.interop.redux.entities.channels.isMpim, i = TS.interop.redux.entities.channels.isIm, r = TS.redux.bindSingleArgSelectorToStore(TS.interop.redux.entities.channels.getAllChannels), a = TS.redux.bindSingleArgSelectorToStore(TS.interop.redux.entities.channels.getChannelById), s = TS.redux.bindSingleArgSelectorToStore(TS.interop.redux.entities.channelsMeta.channelNamesToIds.getChannelIdByName), o = TS.redux.bindSingleArgSelectorToStore(TS.interop.redux.entities.channelsMeta.needsApiMarking.getAllIdsNeedingMarking), Object.defineProperty(TS.model, "channels", {
            get: function() {
              return m("channels");
            }
          }), Object.defineProperty(TS.model, "groups", {
            get: function() {
              return m("groups");
            }
          }), Object.defineProperty(TS.model, "mpims", {
            get: function() {
              return m("mpims");
            }
          }), Object.defineProperty(TS.model, "ims", {
            get: function() {
              return m("ims");
            }
          }));
        },
        forceUpdateOfEntityById: function(e) {
          e && e.id && TS.redux.dispatch(TS.interop.redux.entities.channels.forceUpdateOfChannelById(e.id));
        },
        clearAllShowInListEvenThoughUnreadsFlags: function() {
          TS.redux.dispatch(TS.interop.redux.entities.channels.clearAllShowInListEvenThoughUnreadsFlags());
        },
        dangerouslyGetChannelsForUser: function() {
          var e = _.filter(r(), t);
          return TS.model.user.is_restricted ? _.filter(e, "is_member") : e;
        },
        dangerouslyGetGroups: function() {
          return _.filter(r(), e);
        },
        dangerouslyGetMpims: function() {
          return _.filter(r(), n);
        },
        isChannel: function(e) {
          return t(e);
        },
        isMpim: function(e) {
          return n(e);
        },
        isGroup: function(t) {
          return e(t);
        },
        isIm: function(e) {
          return i(e);
        },
        setMarkingState: function(e, t) {
          TS.redux.dispatch(TS.interop.redux.entities.channelsMeta.needsApiMarking.setMarkingState({
            id: e,
            needsApiMarking: t
          }));
        },
        clearAllMarkingFlags: function() {
          TS.redux.dispatch(TS.interop.redux.entities.channelsMeta.needsApiMarking.clearAllMarkingFlags());
        },
        getAllIdsNeedingMarking: function() {
          return o();
        },
        bulkAddEntities: function(e) {
          TS.redux.dispatch(TS.interop.redux.entities.channels.bulkAddChannels(e));
        },
        addEntity: function(e) {
          if (e) {
            if (e._is_interop_channel_object) {
              var t = "Attempting to add a channel interop object, not a channel. Only raw channel objects can be added. Take this to #devel-redux";
              if (u()) throw new Error(t);
              return void TS.console.error(t);
            }
            TS.redux.dispatch(TS.interop.redux.entities.channels.addChannel(e));
          }
        },
        removeEntity: function(e) {
          e && (e._is_interop_channel_object && !(e = a(e.id)) || TS.redux.dispatch(TS.interop.redux.entities.channels.removeChannel(e)));
        },
        removeEntityFromNameMap: function(e) {
          TS.redux.dispatch(TS.interop.redux.entities.channelsMeta.channelNamesToIds.removeChannelFromNameMap({
            name: e
          }));
        },
        addEntityToNameMap: function(e) {
          if (e && e.id) {
            var t = e._is_interop_channel_object ? a(e.id) : e;
            TS.redux.dispatch(TS.interop.redux.entities.channelsMeta.channelNamesToIds.addChannelToNameMap(t));
          }
        },
        replaceEntity: function(e) {
          if (e) {
            if (e._is_interop_channel_object) {
              var t = "Attempting to replace a channel object with a channel interop object. If you are trying to update a property for this channel you should change the property directly. Take this to #devel-redux";
              if (u()) throw new Error(t);
              return void TS.console.error(t);
            }
            var n = a(e.id);
            n && TS.redux.channels.removeEntity(n), TS.redux.channels.addEntity(e);
          }
        },
        updateMutedChannels: function() {
          var e = _.reduce(TS.model.muted_channels, function(e, t) {
            return e[t] = !0, e;
          }, {});
          TS.redux.dispatch(TS.interop.redux.entities.channelsMeta.mutedChannels.setMutedChannels(e));
        },
        getEntityById: function(e) {
          var t = a(e);
          return TS.redux.channels.interop.maybeWrapEntity(t);
        },
        getEntityByName: function(e) {
          var t = s(e);
          return t ? TS.redux.channels.getEntityById(t) : null;
        },
        getChannelById: function(e) {
          var n = TS.redux.channels.getEntityById(e);
          return t(n) ? n : null;
        },
        getChannelByName: function(e) {
          var n = TS.redux.channels.getEntityByName(e);
          return t(n) ? n : null;
        },
        getGroupById: function(t) {
          var n = TS.redux.channels.getEntityById(t);
          return e(n) ? n : null;
        },
        getGroupByName: function(t) {
          var n = TS.redux.channels.getEntityByName(t);
          return e(n) ? n : null;
        },
        getMpimById: function(e) {
          var t = TS.redux.channels.getEntityById(e);
          return n(t) ? t : null;
        },
        getMpimByName: function(e) {
          var t = TS.redux.channels.getEntityByName(e);
          return n(t) ? t : null;
        },
        getImById: function(e) {
          var t = TS.redux.channels.getEntityById(e);
          return i(t) ? t : null;
        },
        getImByMemberId: function(e) {
          var t = TS.redux.channels.getEntityByName(e);
          return i(t) ? t : null;
        },
        test: function() {
          return {};
        }
      });
      var e, t, n, i, r, a, s, o, l, d = {},
        c = {
          channels: void 0,
          groups: void 0,
          mpims: void 0,
          ims: void 0
        },
        u = function() {
          return TS.boot_data && ("dev" === TS.boot_data.version_ts || "local_js" === TS.boot_data.version_ts);
        },
        m = function(a) {
          var s, o = r();
          switch (a) {
            case "channels":
              s = t;
              break;
            case "groups":
              s = e;
              break;
            case "ims":
              s = i;
              break;
            case "mpims":
              s = n;
          }
          return o === l && d[a] ? d[a] : (o !== l && (l = o, d = {}), d[a] = _.filter(o, s), d[a] = _.map(d[a], TS.redux.channels.interop.maybeWrapEntity), c[a] || (c[a] = _.defer(function() {
            delete d[a], delete c[a], l = null;
          })), d[a]);
        };
    }();
  },
  2502: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.dnd", {
        onStart: function() {
          TS.useRedux() && (e = TS.redux.bindSingleArgSelectorToStore(TS.interop.redux.features.dnd.getDndByMemberId));
        },
        isMemberInDndById: function(t) {
          return e(t);
        },
        updateDndForMember: function(e, t) {
          e && TS.redux.dispatch(TS.interop.redux.features.dnd.updateDnd({
            memberId: e,
            isInDnd: t
          }));
        },
        test: function() {
          return {};
        }
      });
      var e;
    }();
  },
  2503: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.member_types", {
        onStart: function() {
          TS.useRedux() && n();
        },
        updateMemberTypeForMember: function(e) {
          e && e.id && TS.redux.dispatch(TS.interop.redux.entities.memberTypesById.updateMemberType(e));
        },
        addToBulkUpdatePayload: function(t) {
          e.push(t);
        },
        test: function() {
          return {};
        }
      });
      var e = [],
        t = function() {
          e.length && (TS.redux.dispatch(TS.interop.redux.entities.memberTypesById.bulkUpdateMemberType(e)), e = []);
        },
        n = function() {
          TS.members.changed_account_type_sig.add(TS.redux.member_types.updateMemberTypeForMember), TS.members.batch_upserted_sig.add(t);
        };
    }();
  },
  2504: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.presence", {
        onStart: function() {
          TS.useRedux() && n();
        },
        updatePresenceForMember: function(e) {
          e && e.id && TS.redux.dispatch(TS.interop.redux.features.presence.updatePresence({
            memberId: e.id,
            presence: e.presence
          }));
        },
        addToBulkUpsertPayload: function(t) {
          if (t) {
            var n = t.id,
              i = t.presence;
            e.push({
              id: n,
              presence: i
            });
          }
        },
        test: function() {
          return {};
        }
      });
      var e = [],
        t = function() {
          e.length && (TS.redux.dispatch(TS.interop.redux.features.presence.bulkUpdatePresence(e)), e = []);
        },
        n = function() {
          TS.members.presence_changed_sig.add(TS.redux.presence.updatePresenceForMember), TS.members.batch_upserted_sig.add(t);
        };
    }();
  },
  2505: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux", {
        onStart: function() {
          (TS.useRedux() || TS.useReactDownloads()) && (e = TS.interop.redux.configureStore(), TS.redux.dispatch(TS.interop.redux.features.bootData.setBootData(TS.boot_data)));
        },
        bindSingleArgSelectorToStore: function(e) {
          return function(t) {
            if (arguments.length > 1) throw new Error("bindSingleArgSelectorToStore only supports zero or one arguments");
            return e.call(void 0, TS.redux.getState(), t);
          };
        },
        getState: function() {
          return e && e.getState && e.getState();
        },
        getStoreInstance: function() {
          return e;
        },
        dispatch: function(t) {
          if (t && e && e.dispatch) return e.dispatch(t);
        },
        test: function() {
          return {};
        }
      });
      var e;
    }();
  },
  2506: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("replies", {
        thread_marked_sig: new signals.Signal,
        thread_subscription_changed_sig: new signals.Signal,
        sanity_check_failed_sig: new signals.Signal,
        reply_changed_sig: new signals.Signal,
        reply_deleted_sig: new signals.Signal,
        DEFAULT_HISTORY_API_LIMIT: 100,
        onStart: function() {
          TS.channels.message_received_sig.add(d), TS.groups.message_received_sig.add(d), TS.ims.message_received_sig.add(d), TS.mpims.message_received_sig.add(d), TS.channels.message_removed_sig.add(l), TS.groups.message_removed_sig.add(l), TS.ims.message_removed_sig.add(l), TS.mpims.message_removed_sig.add(l), TS.channels.message_changed_sig.add(o), TS.groups.message_changed_sig.add(o), TS.ims.message_changed_sig.add(o), TS.mpims.message_changed_sig.add(o), TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.add(s) : TS.ms.connected_sig.add(s);
        },
        canReplyToMsg: function(e, t, n) {
          return !!TS.client && (!!t && (!TS.utility.msgs.isAutomatedMsg(t) && (!TS.utility.msgs.isFileMsg(t) && (!TS.utility.msgs.isTempMsg(t) && !t.is_ephemeral && (!TS.utility.msgs.isMsgReply(t) && (!TS.ims.isImWithDeletedMember(e) && !(!n && e.is_channel && !e.is_member)))))));
        },
        getMessage: function(e, t) {
          var n = TS.utility.msgs.getMsg(t, e.msgs) || TS.utility.msgs.getMsg(t, e._archive_msgs);
          return n || (TS.ui.replies ? TS.ui.replies.getActiveMessage(e, t) : null);
        },
        getThread: function(t, n, i) {
          if (!i) {
            var r = c(t, n);
            if (r) return u(t, n) && m(t, n, r), Promise.resolve(r);
          }
          var a = {
              channel: t,
              thread_ts: n
            },
            s = {
              D: "im.replies",
              C: "channels.replies",
              G: "groups.replies"
            },
            o = t[0],
            l = s[o];
          if (!l) return TS.error("Unable to get thread for message in unsupported model object type with ID" + t), Promise.reject(new Error("missing api endpoint"));
          var d = p(t, n);
          return e[d] ? e[d] : (TS.has_pri[S] && (i ? TS.log(S, "Calling " + l + " for " + n + " because always_make_api_call") : TS.log(S, "Calling " + l + " for " + n + " because local history is incomplete")), e[d] = TS.api.call(l, a).then(function(e) {
            var i = e.data.messages.map(function(e) {
              return TS.utility.msgs.processImsgFromHistory(e, t);
            });
            f(t, i);
            var r = TS.shared.getModelObById(t);
            if (r && r.msgs && r.msgs.length) {
              var a = _.filter(r.msgs, function(e) {
                return e.thread_ts === n && TS.utility.msgs.isTempMsg(e);
              });
              a.length && (i = _.sortBy(i.concat(a), "ts"));
            }
            return h(r, i), i;
          }).finally(function() {
            delete e[d];
          }), e[d]);
        },
        getThreadLazy: function(n, i, a, s) {
          if (!s) {
            var o = c(n, i);
            if (o) {
              u(n, i) && m(n, i, o, a);
              var l = _.find(o, {
                ts: i
              });
              return Promise.resolve({
                root_msg: l,
                messages: o,
                has_more_beginning: !1,
                has_more_end: !1
              });
            }
          }
          var d = TS.shared.getModelObById(n),
            f = r(d);
          TS.has_pri[S] && (s ? TS.log(S, "Calling " + f + " for " + i + " because always_make_api_call") : TS.log(S, "Calling " + f + " for " + i + " because local history is incomplete"));
          var h = p(n, i);
          return a ? t[h] ? t[h] : (t[h] = TS.replies.getThreadBefore(n, i).then(function(e) {
            return e.has_more_beginning = e.has_more, e.has_more_end = !1, e;
          }).finally(function() {
            delete t[h];
          }), t[h]) : e[h] ? e[h] : (e[h] = TS.replies.getThreadAfter(n, i).then(function(e) {
            return e.has_more_beginning = !1, e.has_more_end = e.has_more, e;
          }).finally(function() {
            delete e[h];
          }), e[h]);
        },
        getThreadBefore: function(e, t, n, i) {
          var s = {
            channel: e,
            thread_ts: t,
            count: TS.replies.DEFAULT_HISTORY_API_LIMIT
          };
          n && (s.latest = n, i && (s.inclusive = i));
          var o = TS.shared.getModelObById(e),
            l = r(o);
          return TS.api.call(l, s).then(function(e) {
            var n = a(o, t, e);
            return n.has_more || n.messages.unshift(n.root_msg), n;
          });
        },
        getThreadAfter: function(e, t, n, i) {
          var s = {
              channel: e,
              thread_ts: t,
              count: TS.replies.DEFAULT_HISTORY_API_LIMIT
            },
            o = !1;
          n ? (s.oldest = n, i && (s.inclusive = i)) : (o = !0, s.oldest = t, s.inclusive = !0);
          var l = TS.shared.getModelObById(e),
            d = r(l);
          return TS.api.call(d, s).then(function(e) {
            var n = a(l, t, e);
            return o && n.messages.unshift(n.root_msg), n;
          });
        },
        getThreadAround: function(e, t, n) {
          var i = c(e, t);
          if (i) {
            u(e, t) && m(e, t, i, !1);
            var r = _.find(i, {
              ts: t
            });
            return Promise.resolve({
              root_msg: r,
              messages: i,
              has_more_beginning: !1,
              has_more_end: !1
            });
          }
          var a = TS.replies.getThreadBefore(e, t, n),
            s = TS.replies.getThreadAfter(e, t, n, !0);
          return Promise.join(a, s, function(e, t) {
            var n = e.has_more,
              i = t.has_more,
              r = e.messages.concat(t.messages);
            return n || r.unshift(e.root_msg), {
              has_more_beginning: n,
              has_more_end: i,
              messages: r,
              root_msg: e.root_msg
            };
          });
        },
        getSubscriptionState: function(e, t) {
          var n = p(e, t);
          return i[n];
        },
        promiseToGetSubscriptionState: function(r, a) {
          var s = p(r, a),
            o = i[s];
          if (o) return Promise.resolve(o);
          var l = e[s] || t[s];
          return l ? l.then(function() {
            return TS.replies.getSubscriptionState(r, a);
          }) : n[s] ? n[s] : (n[s] = TS.api.call("subscriptions.thread.get", {
            channel: r,
            thread_ts: a
          }).then(function(e) {
            var t = e.data.subscriptions,
              n = _.includes(t, a),
              o = {
                model_ob_id: r,
                thread_ts: a,
                subscribed: n
              };
            return i[s] = o, o;
          }).finally(function() {
            delete n[s];
          }), n[s]);
        },
        markThread: function(e, t, n) {
          var r = p(e, t),
            a = i[r];
          return a && a.last_read === n ? Promise.resolve() : (a && (a._pending || (a._pending = {}), a._pending[n] = !0), TS.api.call("subscriptions.thread.mark", {
            channel: e,
            thread_ts: t,
            ts: n
          }).finally(function() {
            a && a._pending && delete a._pending[n];
          }));
        },
        markAllThreads: function(e) {
          var t = {};
          return e && (t.max_ts = e), TS.api.call("subscriptions.thread.clearAll", t);
        },
        threadMarked: function(e, t, n, r) {
          var a = p(e, t),
            s = i[a];
          s && (s.last_read = n, s.unread_count = r), TS.replies.thread_marked_sig.dispatch(e, t, s);
        },
        threadSubscribed: function(e, t, n) {
          var i = g(e, t, !0, n);
          TS.replies.thread_subscription_changed_sig.dispatch(e, t, i);
        },
        threadUnsubscribed: function(e, t, n) {
          var i = g(e, t, !1, n);
          TS.replies.thread_subscription_changed_sig.dispatch(e, t, i);
        },
        setSubscriptionState: function(e, t, n, r) {
          var a = TS.shared.getModelObById(e);
          if (a) {
            var s = p(e, t),
              o = i[s];
            o && (o.subscribed = n);
            var l = {
              channel: e,
              thread_ts: t
            };
            if (r && (l.last_read = r), n) return TS.api.call("subscriptions.thread.add", l);
            var d = TS.replies.getMessage(a, t);
            return d && !d.thread_ts && (l.preemptive_remove = !0, TS.replies.thread_subscription_changed_sig.dispatch(e, t, o)), TS.api.call("subscriptions.thread.remove", l);
          }
        },
        maybeSlurpSubscriptionState: function(e, t) {
          return f(e, t);
        },
        updateThreadBroadcastRoots: function(e, t) {
          var n = e.msgs;
          n && n.length && _.forEach(n, function(n) {
            n.ts !== t.ts && n.thread_ts === t.ts && "thread_broadcast" === n.subtype && n.root && (n.root = t, e.is_channel ? TS.channels.message_changed_sig.dispatch(e, n) : e.is_im ? TS.ims.message_changed_sig.dispatch(e, n) : e.is_group && e.is_mpim ? TS.mpims.message_changed_sig.dispatch(e, n) : e.is_group && !e.is_mpim && TS.groups.message_changed_sig.dispatch(e, n));
          });
        }
      });
      var e = {},
        t = {},
        n = {},
        i = {},
        r = function(e) {
          return e.is_channel ? "channels.replies" : e.is_im ? "im.replies" : "groups.replies";
        },
        a = function(e, t, n) {
          var i = n.data.messages.map(function(t) {
              return TS.utility.msgs.processImsgFromHistory(t, e.id);
            }),
            r = !!n.data.has_more;
          if (f(e.id, i), e && e.msgs && e.msgs.length) {
            var a = _.filter(e.msgs, function(e) {
              return e.thread_ts === t && TS.utility.msgs.isTempMsg(e);
            });
            a.length && (i = _.sortBy(i.concat(a), "ts"));
          }
          h(e, i);
          var s = _.find(i, {
            ts: t
          });
          return s && (i = _.without(i, s)), {
            messages: i,
            has_more: r,
            root_msg: s
          };
        },
        s = function(e) {
          e || i && _(i).values().forEach(function(e) {
            delete e.sanity_check_status;
          });
        },
        o = function(e, t) {
          var n = TS.replies.getSubscriptionState(e.id, t.ts);
          !1 === _.get(n, "sanity_check_status") && (TS.has_pri[S] && TS.log(S, "Clearing previous sanity check failure for " + t.ts), delete n.sanity_check_status), TS.replies.reply_changed_sig.dispatch(e, t);
        },
        l = function(e, t) {
          TS.replies.reply_deleted_sig.dispatch(e, t);
        },
        d = function(e, t) {
          o(e, t);
        },
        c = function(e, t) {
          var n = TS.shared.getModelObById(e);
          if (n && (!n.is_channel || n.is_member)) {
            var i = TS.replies.getSubscriptionState(e, t);
            if (!1 === _.get(i, "sanity_check_status")) return void(TS.has_pri[S] && TS.log(S, "Sanity check for " + t + " failed earlier, not using local messages"));
            var r, a;
            if (a || (r = n.msgs, a = TS.utility.msgs.getMsg(t, r)), a || (r = n._archive_msgs, a = TS.utility.msgs.getMsg(t, r)), a) {
              var s = r.filter(function(e) {
                  return e.ts == t || e.thread_ts == t;
                }),
                o = s.filter(function(e) {
                  return !e.is_ephemeral && !TS.utility.msgs.isTempMsg(e);
                }),
                l = a.reply_count || 0;
              if (!(o.length < l + 1)) return _.sortBy(s, "ts");
            }
          }
        },
        u = function(e, t) {
          if (!TS.model.ms_connected || TS.api.isPaused()) return !1;
          var n = TS.replies.getSubscriptionState(e, t);
          return !_.get(n, "sanity_check_status", !1) || (TS.has_pri[S] && TS.log(S, "Skipping sanity check for " + t + " because it passed previously"), !1);
        },
        m = function(e, t, n, i) {
          n = n.filter(function(e) {
            return !e.is_ephemeral && !TS.utility.msgs.isTempMsg(e);
          });
          return TS.replies.getThreadLazy(e, t, i, !0).then(function(i) {
            var r = i.messages;
            i.has_more_beginning ? n = _.takeRight(n, r.length) : i.has_more_end && (n = _.take(n, r.length));
            var a = _.map(n, "ts"),
              s = _.map(r, "ts"),
              o = _.map(n, "text"),
              l = _.map(n, "text"),
              d = TS.replies.getSubscriptionState(e, t);
            if (_.isEqual(a, s) && _.isEqual(o, l)) return TS.has_pri[S] && TS.log(S, "Replies sanity check passed for " + t), void(d && (d.sanity_check_status = !0));
            var c = _.intersection(a, s),
              u = _.difference(s, c),
              m = _.difference(a, c);
            if (0 == m.length && u.length > 0) {
              var p = _(r).filter(function(e) {
                return "tombstone" === e.subtype;
              }).map("ts").value();
              if (_.isEqual(u.sort(), p.sort())) return TS.has_pri[S] && TS.log(S, "Replies sanity check passed (except tombstones) for " + t), void TS.metrics.count("replies_sanity_check_passed_except_tombstones");
            }
            if (m.length > 0 && 0 == u.length) {
              var f = _.max(s);
              if (_.every(m, function(e) {
                  return e > f;
                })) return TS.has_pri[S] && TS.log(S, "Replies sanity check passed (except newer local msgs) for " + t), void TS.metrics.count("replies_sanity_check_passed_except_newer_local_msgs");
            }
            var h = {
              version_ts: TS.boot_data.version_ts,
              channel_id: e,
              thread_ts: t,
              messages_from_api: s,
              messages_from_model_ob: a
            };
            TS.warn("Replies sanity check failed. Here's the debug info: " + JSON.stringify(h)), TS.metrics.count("replies_sanity_check_failed"), d && (d.sanity_check_status = !1);
            var g = TS.shared.getModelObById(e);
            if (g) {
              var T = TS.replies.getMessage(g, t);
              if (T) return TS.replies.sanity_check_failed_sig.dispatch(g, T, r, i.has_more_beginning, i.has_more_end), null;
            }
          }), null;
        },
        p = function(e, t) {
          return e + "_" + t;
        },
        f = function(e, t) {
          t.forEach(function(t) {
            if (t.hasOwnProperty("_subscribed")) {
              var n = p(e, t.ts);
              i[n] && i[n].last_read ? t._last_read && t._last_read > i[n].last_read && (i[n].last_read = t._last_read) : i[n] = {
                model_ob_id: e,
                thread_ts: t.ts,
                subscribed: t._subscribed,
                last_read: t._last_read,
                unread_count: t._unread_count
              };
            }
          });
        },
        h = function(e, t) {
          if (e && e.msgs && e.msgs.length && t && t.length) {
            var n = _.find(t, TS.utility.msgs.msgHasReplies);
            if (n && n.ts === n.thread_ts && TS.utility.msgs.getMsg(n.ts, e.msgs)) {
              var i = _.differenceBy(t, e.msgs, "ts");
              if (i.length) {
                var r = e.msgs.concat(i);
                TS.utility.msgs.setMsgs(e, r);
              }
            }
          }
        },
        g = function(e, t, n, r) {
          var a = p(e, t),
            s = i[a];
          return s ? s.subscribed = n : (s = {
            subscribed: n,
            model_ob_id: e,
            thread_ts: t
          }, i[a] = s), r.last_read && (s.last_read = r.last_read), r.unread_count && (s.unread_count = r.unread_count), s;
        },
        S = 2004;
    }();
  },
  2507: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("rooms", {
        added_sig: new signals.Signal,
        changed_name_sig: new signals.Signal,
        changed_participants_sig: new signals.Signal,
        changed_date_end_sig: new signals.Signal,
        changed_channels_sig: new signals.Signal,
        onStart: function() {},
        getRoomById: function(e) {
          return TS.rooms.getRoomByProp("id", e);
        },
        getRoomByProp: function(e, t) {
          if (!e) return null;
          var n = null;
          return _.forOwn(TS.model.rooms, function(i) {
            if (i[e] === t) return n = i, !1;
          }), n;
        },
        upsertAndSignal: function(e) {
          var t = TS.rooms.upsertRoom(e);
          return "CHANGED" === t.status ? (-1 != t.what_changed.indexOf("name") && TS.rooms.changed_name_sig.dispatch(t.room), -1 != t.what_changed.indexOf("participants") && TS.rooms.changed_participants_sig.dispatch(t.room), -1 != t.what_changed.indexOf("date_end") && TS.rooms.changed_date_end_sig.dispatch(t.room), -1 != t.what_changed.indexOf("channels") && TS.rooms.changed_channels_sig.dispatch(t.room)) : "ADDED" === t.status && TS.rooms.added_sig.dispatch(t.room), t;
        },
        upsertRoom: function(t) {
          var i, r = TS.model.rooms,
            a = TS.rooms.getRoomById(t.id),
            s = "NOOP",
            o = [];
          return t.date_start && (t.date_start = Number(t.date_start)), t.date_end && (t.date_end = Number(t.date_end)), t.was_rejected && (t.was_rejected = Boolean(t.was_rejected)), t.is_dm_call && (t.is_dm_call = Boolean(t.is_dm_call)), t.was_missed && (t.was_missed = Boolean(t.was_missed)), a ? (TS.log(4, 'updating existing room "' + t.id + '"'), i = a.channels || [], _.forOwn(t, function(r, l) {
            -1 !== e.indexOf(l) ? r && !TS.utility.areSimpleObjectsEqual(r, a[l]) && (o.push(l), a[l] = r, s = "CHANGED", "channels" === l && (i = i.concat(r || []))) : a[l] != r && (r && !TS.utility.isScalar(r) ? (a[l] = r, TS.warn(l + " is not scalar! it needs to be handled by upsertRoom specifically to test if it has changed! " + n(t[l]))) : "boolean" == typeof r && !r == !a[l] || (o.push(l), a[l] = r, s = "CHANGED"));
          }), t = a) : t.id ? (s = "ADDED", TS.log(4, 'adding room "' + t.id), r.push(t)) : TS.error("bad error, no room.id"), {
            status: s,
            room: t,
            what_changed: o
          };
        }
      });
      var e = ["participants", "channels", "participant_history", "participants_camera_on", "participants_camera_off", "participants_screenshare_on", "participants_screenshare_off"];
    }();
  },
  2508: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("rxns", {
        rxn_records_changed_sig: new signals.Signal,
        member_rxns_fetched_sig: new signals.Signal,
        member_rxns_being_fetched_sig: new signals.Signal,
        need_alerts: {},
        onStart: function() {
          if (TS.client) {
            TS.prefs.team_handy_rxns_changed_sig.add(C), TS.prefs.channel_handy_rxns_changed_sig.add(C), TS.prefs.preferred_skin_tone_changed_sig.add(C), TS.prefs.emoji_mode_changed_sig.add(C), k = function() {};
            var e = function() {};
            TS.client.login_sig.add(function() {
              k = TS.utility.throttleFunc(w, 100), e = TS.utility.throttleFunc(s, 1e3);
            }), o = function(t, n) {
              e(t, void 0, void 0, n);
            };
          }
        },
        upsertRxnsFromDataAndUpdateUI: function(e, t) {
          var n = u(e, t);
          return "NOOP" !== n.status && o(e), n;
        },
        getRxnKey: function(e, t, n) {
          return "message" !== e || n || TS.error("getRxnKey: no c_id provided for message rxn_key"), "message" !== e && n && TS.error("getRxnKey: c_id provided for but this is not a message rxn_key"), e + "-" + t + "-" + (n || "");
        },
        getRxnKeyByMsgType: function(e) {
          var t;
          return "file_upload" === e.subtype || "file_share" === e.subtype || "file_mention" === e.subtype || "file_reaction" === e.subtype ? e.file && (t = e.file._rxn_key) : "file_comment" === e.subtype ? e.comment && (t = e.comment._rxn_key) : t = e._rxn_key, t;
        },
        getRxnKeyFromData: function(e) {
          var t;
          if ("message" === e.type) t = e.ts || e.message.ts;
          else if ("file" === e.type) t = e.file.id || e.file;
          else {
            if ("file_comment" !== e.type) throw new Error("item.type not handled");
            t = e.file_comment || e.comment.id;
          }
          return TS.rxns.getRxnKey(e.type, t, e.channel);
        },
        getExistingRxnsByKey: function(e) {
          return i[e] || null;
        },
        getRxnRecordByKey: function(e) {
          if (n[e]) return n[e];
          for (var i = t.length - 1; i > -1; i -= 1)
            if (t[i].rxn_key === e) return n[e] = t[i], n[e];
          return null;
        },
        getNextRxnRecordThatNeedsAlert: function() {
          for (var e, n = t.length - 1; n > -1 && TS.rxns.need_alerts[t[n].rxn_key]; n -= 1) e = t[n];
          return e;
        },
        getRxnsFromData: function(e) {
          return "message" === e.type ? e.message && e.message.reactions : "file" === e.type ? e.file && e.file.reactions : "file_comment" === e.type ? e.comment && e.comment.reactions : null;
        },
        doesRxnsHaveRxnFromMember: function(e, t, n) {
          var i = TS.emoji.nameToCanonicalName(t);
          if (!e) return !1;
          var r = TS.rxns.getRxnFromRxns(e, t) || TS.rxns.getRxnFromRxns(e, i);
          return !!r && (!!r.count && (!!r.users && -1 !== r.users.indexOf(n)));
        },
        doesRxnsHaveRxnFromUser: function(e, t) {
          return TS.rxns.doesRxnsHaveRxnFromMember(e, t, TS.model.user.id);
        },
        doesRxnsHaveRxn: function(e, t) {
          return !!e && !!TS.rxns.getRxnFromRxns(e, t);
        },
        doesRxnsHaveSkinlessRxn: function(e, t) {
          if (!e) return !1;
          var n = [t.replace(/(::skin-tone-[2-6])/, "")];
          TS.emoji.spliceSkinToneVariationsIntoAnArrayOfEmojiNames(n);
          for (var i = 0; i < n.length; i += 1)
            if (TS.rxns.getRxnFromRxns(e, n[i])) return !0;
          return !1;
        },
        countAllRxns: function(e) {
          if (!e) return 0;
          var t = 0;
          return e.forEach(function(e) {
            t += e.count || 0;
          }), t;
        },
        countAllEmoji: function(e) {
          return e ? e.length : 0;
        },
        countAllUsersRxns: function(e, t) {
          if (!e) return 0;
          var n = 0;
          return e.forEach(function(e) {
            e.users.indexOf(t) > -1 && (n += 1);
          }), n;
        },
        getAllUniqueRxners: function(e, t) {
          if (!e) return [];
          var n = [];
          return e.forEach(function(e) {
            e && e.count && e.users && e.users.forEach(function(e) {
              t != e && -1 == n.indexOf(e) && n.push(e);
            });
          }), n;
        },
        getRxnFromRxns: function(e, t) {
          return e ? e.filter(function(e) {
            return e.name == t;
          })[0] || null : null;
        },
        changeRxnsFromIMsg: function(e) {
          if (e.item) {
            var t = !1;
            if ("message" === e.item.type && e.item.ts ? t = !0 : "file" === e.item.type && "string" == typeof e.item.file ? t = !0 : "file_comment" === e.item.type && e.item.file_comment && "string" == typeof e.item.file && (t = !0), t && v(e.item)) {
              var n, i = e.user == TS.model.user.id,
                r = TS.rxns.getRxnKeyFromData(e.item),
                a = TS.rxns.getExistingRxnsByKey(r),
                l = "reaction_added" === e.type;
              n = d(l, _.cloneDeep(a) || [], e.reaction, e.user, e.url);
              var c = u(r, n);
              TS.has_pri[F] && TS.dir(F, c, "handleRxnChangeFromMS upsert status:" + c.status), b(e), "NOOP" !== c.status && (i && !e._from_evt_log ? s(r, e.reaction, e.user, e.item.type) : o(r, e.item.type));
            }
          }
        },
        changeRxnsFromUserAction: function(e, t, n) {
          var i = TS.emoji.nameToCanonicalName(t),
            o = TS.rxns.getExistingRxnsByKey(e),
            d = TS.rxns.getRxnFromRxns(o, t);
          if (!n && d || (t = i), TS.has_pri[F] && TS.log(F, "changeRxnsFromUserAction rxn_key:" + e + " name:" + t + " adding:" + n), n && !TS.emoji.isValidName(t) && (!d || !d.url)) return void TS.error('"' + t + '" is not a valid emoji');
          n && TS.boot_data.feature_thanks && TS.rxns.getHandyRxnsDisplayDataByRxnKey(e).is_poll && O(e);
          var u = TS.rxns.getExistingRxnsByKey(e) || [];
          if (n) {
            var m = TS.rxns.countAllEmoji(u),
              S = TS.rxns.countAllUsersRxns(u, TS.model.user.id);
            if (m >= 50 && !TS.rxns.doesRxnsHaveRxn(u, t)) return void M(A);
            if (S >= 23) return void M(I);
          }
          var T = l(n, _.cloneDeep(u), t);
          TS.has_pri[F] && (TS.dir(F, u, "existing_rxns"), TS.dir(F, T, "new_rxns"));
          var b = c(e, T);
          if (TS.has_pri[F] && TS.dir(F, b, "changeRxnsFromUserAction upsert status:" + b.status), "NOOP" === b.status) return void TS.error("changeRxnsFromUserAction called but no NOOP?");
          s(e, t, TS.model.user.id);
          var v = n ? "reactions.add" : "reactions.remove",
            y = h(e, {
              name: t
            }),
            w = $('[data-rxn-key="' + e + '"]'),
            k = {},
            x = w.closest("ts-message"),
            C = x.data("ts") + "",
            B = x.data("model-ob-id");
          k = {
            message_timestamp: C,
            channel_id: B,
            channel_type: B ? B.charAt(0) : "",
            member_id: x.data("member-id"),
            app_id: x.data("app-id"),
            bot_id: x.data("bot-id")
          };
          var D = n ? "REACTION_ADDED" : "REACTION_REMOVED";
          TS.model.unread_view_is_showing && y.timestamp && (_.merge(k, TS.client.ui.unread.getTrackingData(y.timestamp)), TS.client.ui.unread.incrementTrackingSeqId()), _.merge(k, TS.ui.thread.getTrackingPayloadForEl(w)), "threads_view" === TS.ui.thread.getContextForEl(w) && TS.client.ui.threads.incrementTrackingSeqId(), TS.clog.track(D, k), p(e), TS.api.call(v, y, function(i, o, d) {
            f(e);
            var u = !1;
            if (i);
            else if (!n && o.error && "no_reaction" === o.error);
            else {
              o.error == A || o.error == I ? M(o.error) : o.error == E && TS.warn("Attempted to add/remove invalid emoji and the API complained: " + d.name);
              var m = TS.rxns.getExistingRxnsByKey(e) || [],
                p = l(!n, _.cloneDeep(m), t),
                h = c(e, p);
              TS.has_pri[F] && TS.dir(F, h, "changeRxnsFromUserAction UNDO upsert status:" + h.status), "NOOP" === h.status ? TS.has_pri[F] && TS.log(F, "changeRxnsFromUserAction trying to undo because of API rsp, but no NOOP?") : u = !0;
            }((function() {
              if (TS.has_pri[F] && TS.log(F, "maybeUpdateModel pending:" + r[e] + " _pending_last:" + a[e]), r[e]) return !1;
              if (!a.hasOwnProperty(e)) return !1;
              var t = c(e, a[e]);
              return delete a[e], TS.has_pri[F] && TS.dir(F, t, "maybeUpdateModel status:" + t.status), "NOOP" !== t.status && (s(e), g(e), !0);
            })() || u) && s(e);
          });
        },
        checkForRxnClick: function(e) {
          if (e && e.target) {
            var t = $(e.target),
              n = t.closest(".rxn");
            if (n.length) {
              var i, r = String(n.data("emoji")),
                a = t.closest(".rxn_panel"),
                s = a.data("rxn-key"),
                o = n.hasClass("is_handy");
              if (n.hasClass("menu_rxn")) TS.ui.react_emoji_menu.start({
                e: e,
                rxn_key: s
              });
              else if (!(i = !n.hasClass("user_reacted")) && e.shiftKey) O(s);
              else {
                var l = o && TS.emoji.isNameSkinToneModifiable(r) ? ":" + TS.emoji.getChosenSkinToneModifier() : "";
                TS.rxns.changeRxnsFromUserAction(s, r + l, i);
              }
            }
          }
        },
        getRxnRecords: function() {
          return t;
        },
        getRxnKeyParts: function(e) {
          var t = e.split("-");
          return {
            type: t[0],
            id: t[1],
            c_id: t[2]
          };
        },
        test: function() {
          return {
            updateUI: s,
            addOrRemoveRxnFromRxns: d,
            upsertRxnsFromData: u,
            upsertRxns: m,
            incrementPendingCnt: p,
            decrementPendingCnt: f,
            fetchAndUpdateRxns: g,
            displayTooManyError: M,
            TOO_MANY_REACTIONS: I,
            TOO_MANY_EMOJI: A
          };
        },
        clearHandyRxnsDisplayDataCache: function() {
          e = {};
        },
        getHandyRxnsDisplayDataByCidAndMsgId: function(t, n) {
          var i, r = t || "team";
          if (t && n && TS.boot_data.feature_thanks) {
            var a = TS.utility.msgs.getMsg(n, TS.shared.getModelObById(t).msgs);
            a && a._handy_rxns_poll_data && (r = t + "-" + n, i = a._handy_rxns_poll_data);
          }
          return e[r] ? e[r] : (i = i || TS.rxns.getHandyRxnsByCidAndMsgId(t, n, TS.model.team.prefs.team_handy_rxns)) ? (e[r] = {
            items: {},
            restrict: !!i.restrict,
            is_poll: !!i.is_poll
          }, i.list.forEach(function(t) {
            var n = TS.emoji.isNameSkinToneModifiable(t.name) ? TS.emoji.getChosenSkinToneModifier() : "",
              i = ":" + t.name + ":" + n;
            e[r].items[t.name] = {
              html: new Handlebars.SafeString(TS.emoji.graphicReplace(i, {
                no_skin_tone_squares: !0
              })),
              name: i,
              title: t.title,
              use_title: TS.boot_data.feature_thanks && t.title && t.title != t.name,
              names: i
            };
          }), e[r]) : {
            list: [],
            restrict: !1,
            is_poll: !1
          };
        },
        getMemberRxnsFromMessage: function(e, t) {
          if (e && t) {
            var n = TS.rxns.getRxnKeyByMsgType(e);
            if (n) {
              var i = TS.rxns.getExistingRxnsByKey(n);
              if (i) {
                return i.filter(function(e) {
                  return _.includes(e.users, t);
                });
              }
            }
          }
        },
        getHandyRxnsDisplayDataByRxnKey: function(e) {
          e = e || "";
          var t = TS.rxns.getRxnKeyParts(e),
            n = t.c_id || "",
            i = "message" === t.type && t.id;
          return TS.rxns.getHandyRxnsDisplayDataByCidAndMsgId(n, i);
        },
        getHandyRxnsByCidAndMsgId: function(e, t, n) {
          if (n = n || null, e && t && TS.boot_data.feature_thanks) {
            var i = TS.utility.msgs.getMsg(t, TS.shared.getModelObById(e).msgs);
            if (i && i._handy_rxns_poll_data) return i._handy_rxns_poll_data;
          }
          var r = TS.model.team.prefs.channel_handy_rxns;
          return r && r[e] && Object.keys(r[e]).length && r[e] || n;
        },
        getHandyRxnsTitleForEmojiByRxnKey: function(e, t) {
          e = TS.emoji.stripWrappingColons(e).replace(/(::skin-tone-[2-6])/g, "");
          var n = TS.rxns.getHandyRxnsDisplayDataByRxnKey(t).items[e];
          return n && n.use_title && n.title || "";
        }
      });
      var e = {},
        t = [],
        n = {},
        i = {},
        r = {},
        a = {},
        s = function(e, t, n, i) {
          var r, a = TS.rxns.getRxnKeyParts(e);
          if (a && a.c_id) {
            var s = TS.shared.getActiveModelOb();
            s && s.id !== a.c_id && (r = !0);
          }
          var o, l = TS.boot_data.feature_initial_scroll_position ? 0 : void 0;
          r || (o = TS.client && TS.client.ui && TS.client.ui.areMsgsScrolledToBottom(l)), TS.templates.builders.updateRxnPanels(e, t, n), "file" === i && (TS.log("(Temporary) Rebuilding mentions due to file reaction."), TS.view.rebuildMentions()), TS.client && o && TS.client.ui.instaScrollMsgsToBottom(!0);
        },
        o = function(e, t) {
          s(e, void 0, void 0, t);
        },
        l = function(e, t, n) {
          return d(e, t, n, TS.model.user.id);
        },
        d = function(e, t, n, i, r) {
          var a = TS.rxns.getRxnFromRxns(t, n);
          if (e) a ? TS.utility.ensureInArray(a.users, i) && (a.count += 1) : t.push({
            users: [i],
            count: 1,
            name: n,
            url: r
          });
          else if (a) {
            var s = a.users.indexOf(i) >= 0;
            s && (_.pull(a.users, i), a.count -= 1, (a.count < 1 || 0 === a.users.length) && _.pull(t, a), t.length || (t = null));
          }
          return t;
        },
        c = function(e, t) {
          return m(e, t, !0);
        },
        u = function(e, t) {
          return m(e, t, !1);
        },
        m = function(e, t, n) {
          var s = {
            status: "NOOP",
            what_changed: [],
            rxns: t
          };
          if (!n && r[e]) return a[e] = _.cloneDeep(t), TS.has_pri[F] && TS.log(F, "_upsertRxns call ignored because !force && _pending_counts[" + e + "]:" + r[e]), s;
          var o = TS.rxns.getExistingRxnsByKey(e);
          return t ? o ? TS.utility.areSimpleObjectsEqual(o, t, "rxn_key:" + e) || (s.status = "CHANGED", i[e] = t) : (s.status = "ADDED", i[e] = t) : o && (s.status = "CHANGED", delete i[e]), s.rxns = i[e] || null, TS.useRedux() && TS.boot_data.feature_react_messages && TS.redux.reactions.updateReaction(e, t), TS.has_pri[F] && TS.dir(F, s, e), s;
        },
        p = function(e) {
          e && (r[e] = r[e] || 0, r[e] += 1, TS.has_pri[F] && TS.log(F, "_incrementPendingCnt " + e + ": " + r[e]));
        },
        f = function(e) {
          if (!r[e]) return void(TS.has_pri[F] && TS.log(F, "_decrementPendingCnt " + e + ": " + r[e]));
          r[e] -= 1, 0 === r[e] && delete r[e], TS.has_pri[F] && TS.log(F, "_decrementPendingCnt " + e + ": " + r[e]);
        },
        h = function(e, t) {
          t = t || {};
          var n = TS.rxns.getRxnKeyParts(e);
          if ("message" === n.type) t.channel = n.c_id, t.timestamp = n.id;
          else if ("file" === n.type) t.file = n.id;
          else {
            if ("file_comment" !== n.type) throw new Error("type not handled");
            t.file_comment = n.id;
          }
          return t;
        },
        g = function e(t, n) {
          n = n || 1;
          var i = h(t, {
            full: !0
          });
          TS.has_pri[F] && TS.log(F, "_fetchAndUpdateRxns rxn_key:" + t + " attempt:" + n), p(t), TS.api.call("reactions.get", i, function(i, r) {
            if (f(t), i) {
              var a = TS.rxns.getRxnsFromData(r),
                o = u(t, a);
              if (TS.has_pri[F] && TS.dir(F, o, "_fetchAndUpdateRxns upsert status:" + o.status), "NOOP" === o.status) return;
              s(t);
            } else TS.error("_fetchAndUpdateRxns got an err:" + JSON.stringify(r || null));
            n < 2 && (n += 1, e(t, n));
          });
        },
        S = function(e, t, n) {
          if (!e) return null;
          if (!e.emoji) return null;
          if (!e.emoji.hasOwnProperty(t)) return null;
          for (var i = 0; i < e.emoji[t].length; i += 1)
            if (e.emoji[t][i].id === n) return e.emoji[t][i];
          return null;
        },
        T = function(e) {
          return !!TS.client && (e.user != TS.model.user.id && (("message" !== e.item.type || void 0 === e.item.message || e.item.message.user == TS.model.user.id) && (("file" !== e.item.type || void 0 === e.item.file || e.item.file.user == TS.model.user.id) && ("file_comment" !== e.item.type || void 0 === e.item.comment || e.item.comment.user == TS.model.user.id))));
        },
        b = function(e) {
          if (T(e)) {
            var t = TS.rxns.getRxnKeyFromData(e.item);
            if ("reaction_added" === e.type) {
              if ("message" === e.item.type) var n = e.item.channel;
              var i = !e._from_evt_log && "message" === e.item.type;
              y(e.reaction, t, e.user, e.event_ts, i, n, e.url);
            } else x(e.reaction, t, e.user);
          }
        },
        v = function(e) {
          if (!e) return !1;
          if ("message" === e.type) {
            var t = TS.utility.msgs.findMsg(e.ts, e.channel);
            return !!t && (e.message = t, !0);
          }
          if ("file" === e.type || "file_comment" === e.type) {
            var n = TS.files.getFileById(e.file);
            if (!n) return !1;
            if (e.file = n, "file_comment" === e.type) {
              var i = TS.files.getFileCommentById(n, e.file_comment);
              if (!i) return !1;
              e.comment = i;
            }
            return !0;
          }
          return !1;
        },
        y = function(e, i, r, a, s, o, l) {
          a = a || TS.utility.date.makeTsStamp(), s = !!s;
          var d = !1,
            c = n[i];
          c || (d = !0, t[t.length] = {
            rxn_key: i
          }, n[i] = t[t.length - 1], c = n[i]), c.last_update = a, s && (TS.rxns.need_alerts[i] = TS.rxns.need_alerts[i] || a), c.emoji = c.emoji || {}, c.source = o || "", c.url = l, c.emoji[e] = c.emoji.hasOwnProperty(e) && c.emoji[e] || [];
          var _ = c.emoji[e],
            u = S(c, e, r);
          u || (_[_.length] = {
            id: r
          }, u = _[_.length - 1]), u.when = a, TS.dir(877, t, e + " " + i + " " + r);
          var m = t.length;
          d && m > 1 && t[m - 1].last_update < t[m - 2].last_update && t.sort(function(e, t) {
            return e.last_update < t.last_update ? -1 : e.last_update > t.last_update ? 1 : 0;
          }), k(s);
        },
        w = function(e) {
          TS.rxns.rxn_records_changed_sig.dispatch(e);
        },
        k = function() {
          w();
        },
        x = function(e, i, r) {
          var a = TS.rxns.getRxnRecordByKey(i),
            s = S(a, e, r);
          s && a && (_.pull(a.emoji[e], s), a.emoji[e].length || delete a.emoji[e], Object.keys(a.emoji).length || (delete n[i], _.pull(t, a))), TS.rxns.rxn_records_changed_sig.dispatch();
        },
        M = function(e) {
          var t = TS.i18n.t("Reaction Limit Reached", "rxns")(),
            n = TS.i18n.t("A message can contain up to 23 different emojis from a single person. Sorry, you can’t add any more than this!", "rxns")(),
            i = TS.i18n.t("A message can contain up to 50 different emojis in its reactions. Sorry, you can’t add any more than this!", "rxns")();
          e == I ? TS.generic_dialog.alert(n, t) : e == A && TS.generic_dialog.alert(i, t);
        },
        C = function() {
          $(".msgs_holder").find("ts-message").each(function() {
            var e = $(this),
              t = e.find(".rxn_panel").data("rxn-key") || "";
            TS.ui.messages.maybeUpdateMessageHoverContainer(e), TS.templates.builders.updateRxnPanelsAndHandyRxns(t);
          });
        },
        I = "too_many_reactions",
        A = "too_many_emoji",
        E = "invalid_name",
        O = function(e) {
          var t = TS.rxns.getExistingRxnsByKey(e);
          t && t.forEach(function(n) {
            TS.rxns.doesRxnsHaveRxnFromUser(t, n.name) && TS.rxns.changeRxnsFromUserAction(e, n.name, !1);
          });
        },
        F = "888";
    }();
  },
  2511: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("search", {
        search_dispatched_sig: new signals.Signal,
        quick_search_results_fetched_sig: new signals.Signal,
        all_search_results_fetched_sig: new signals.Signal,
        message_search_results_fetched_sig: new signals.Signal,
        file_search_results_fetched_sig: new signals.Signal,
        autosuggest_search_results_fetched_sig: new signals.Signal,
        search_filter_set_sig: new signals.Signal,
        search_filetype_filter_set_sig: new signals.Signal,
        search_sort_set_sig: new signals.Signal,
        search_channel_set_sig: new signals.Signal,
        search_group_set_sig: new signals.Signal,
        search_member_set_sig: new signals.Signal,
        message_search_more_results_fetched_sig: new signals.Signal,
        query: "",
        query_string: "",
        last_search_query: "",
        previous_query: "",
        sort: "timestamp",
        filter: "messages",
        filetype: "all",
        results: {},
        submit_tim: 0,
        delay: 500,
        suggestions: [],
        input: "",
        from_regex: /from:[@*\-.\w]+/gi,
        member: null,
        from: null,
        in_regex: /in:[#*\-.\w]+/gi,
        channel: null,
        group: null,
        im: null,
        per_page: -1,
        keyword_modifiers: ["after", "before", "bot", "during", "from", "to", "has", "in", "on"],
        keyword_modifier_pair_regex: null,
        keyword_modifier_extract_regex: null,
        search_query_max_length: 250,
        onStart: function() {
          TS.search.keyword_modifier_pair_regex = new RegExp("^(" + TS.search.keyword_modifiers.join("|") + "):S+$"), TS.search.keyword_modifier_extract_regex = new RegExp("^(" + TS.search.keyword_modifiers.join("|") + "):w*"), TS.search.per_page = parseInt(TS.qs_args.search_count, 10) || 20, TS.client && (TS.search.delay = 10), TS.client ? TS.client.login_sig.add(TS.search.loggedIn, TS.search) : TS.web && TS.web.login_sig.add(TS.search.loggedIn, TS.search), TS.search.search_channel_set_sig.add(TS.search.searchAll, TS.search), TS.search.search_group_set_sig.add(TS.search.searchAll, TS.search), TS.search.search_member_set_sig.add(TS.search.searchAll, TS.search), TS.prefs.search_only_my_channels_changed_sig.add(TS.search.searchAll, TS.search), TS.prefs.search_only_current_team_changed_sig.add(TS.search.searchAll, TS.search), TS.prefs.search_exclude_bots_changed_sig.add(TS.search.searchAll, TS.search), TS.files.team_file_changed_sig.add(d), TS.qs_args.delay && (TS.search.delay = TS.qs_args.delay), TS.search.input = $("#search_terms"), TS.boot_data.feature_texty_search || TSSSB.call("inputFieldCreated", TS.search.input.get(0)), TS.boot_data.feature_texty_search && TS.utility.contenteditable.create(TS.search.input, {
            modules: {
              slacksearch: !0,
              tabcomplete: {
                completers: [TS.tabcomplete.members],
                matchOptions: {
                  allowed_preceding_symbols: [":"]
                },
                positionMenu: function(e) {
                  var t = $(TS.search.input),
                    n = t.offset(),
                    i = 355 - t.outerWidth(),
                    r = n.left - i + 31,
                    a = n.top + t.height() + 12;
                  e.style.width = "355px", e.style.top = a + "px", e.style.left = r + "px";
                },
                render: TS.tabcomplete.render
              }
            },
            singleLineInput: !0,
            placeholder: TS.i18n.t("Search", "page_client")(),
            onFocus: function() {
              $("#client-ui").addClass("search_focused"), TS.utility.contenteditable.setCursorAtEnd(TS.search.input), TS.search.autocomplete.setUpMenu(), TS.search.autocomplete.onInputFocus(), TS.search.autocomplete.triggerInputEvent("focus");
            },
            onBlur: function() {
              $("#client-ui").removeClass("search_focused"), TS.search.autocomplete.maybeLogSearchInputBlur(), TS.search.autocomplete.triggerInputEvent("blur");
            },
            onEnter: function() {
              return TS.search.submitSearch(), TS.search.autocomplete.triggerInputEvent("on-enter"), !0;
            },
            onTextChange: function() {
              var e = TS.utility.contenteditable.isEmpty(TS.search.input);
              $("#header_search_form").toggleClass("active", !e), TS.search.autocomplete.triggerInputEvent("input");
            },
            onEscape: function() {
              TS.utility.contenteditable.blur(TS.search.input), TS.search.autocomplete.triggerInputEvent("on-escape");
            },
            onTab: function() {
              return TS.search.autocomplete.triggerInputEvent("on-tab"), TS.boot_data.feature_keyboard_navigation;
            }
          });
        },
        loggedIn: function() {
          TS.search.sort = "timestamp";
        },
        startSearchTimer: function(e, t, n) {
          clearTimeout(TS.search.submit_tim), TS.search.submit_tim = setTimeout(TS.search.dispatchSearch, TS.search.delay, e, t, n), TS.search.search_dispatched_sig.dispatch();
        },
        getNextPageOfSearchResults: function(e, t) {
          TS.search.dispatchSearch(e, TS.search.per_page, TS.search.onSearchAll, t);
        },
        getNextPageOfMessageResults: function(e, t) {
          a("search.messages", e, TS.search.per_page, t, s);
        },
        getNextPageOfFileResults: function(e, t) {
          a("search.files", e, TS.search.per_page, t, o);
        },
        extractNonModifierSearchTxt: function(e) {
          var t = "";
          return e.split(" ").forEach(function(e) {
            e.match(TS.search.keyword_modifier_extract_regex) || (t += " " + e);
          }), t = $.trim(t);
        },
        dispatchSearch: function(e, n, i, r) {
          if (TS.isPartiallyBooted()) {
            if (!t) {
              var s = this,
                o = function() {
                  TS.search.dispatchSearch.apply(s, t), t = void 0;
                };
              TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.addOnce(o) : TS.ms.connected_sig.addOnce(o);
            }
            return void(t = arguments);
          }
          if (!r || 1 === r) {
            var d = TS.search.extractNonModifierSearchTxt(e);
            d && TSSSB.call("writeFindString", d);
          }
          if (TS.search.separateMessagesAndFiles()) {
            r && 1 !== r || (TS.search.results[e] = null);
            var c = l();
            a("search.messages", e, n, r, c.msgs), a("search.files", e, n, r, c.files);
          } else a("search.all", e, n, r, i);
        },
        setFilter: function(e) {
          TS.search.filter = e, TS.search.search_filter_set_sig.dispatch();
        },
        setFiletypeFilter: function(e) {
          TS.search.filetype = e, TS.search.search_filetype_filter_set_sig.dispatch();
        },
        moreTopResults: function() {
          TS.search.sort = "score", TS.search.switchToRelevant(!0), TS.clog.track("SEARCH_OPEN", {
            open_method: "top_results_see_more",
            click_module_position: 0,
            click_module_name: "score",
            request_id: TS.search.last_request_id
          });
        },
        hasCachedRelevantResults: function() {
          return "messages" === TS.search.filter && _.has(TS.search.results[TS.search.query].messages, "modules.score");
        },
        hasCachedRecentResults: function() {
          return "messages" === TS.search.filter && _.has(TS.search.results[TS.search.query].messages, "timestamp_messages");
        },
        switchToRelevant: function(e) {
          var t = TS.search.results[TS.search.query].messages;
          TS.search.results[TS.search.query].messages = t.modules.score, TS.search.results[TS.search.query].messages.timestamp_messages = t, TS.search.results[TS.search.query].messages.order = 0, TS.search.search_sort_set_sig.dispatch(e), TS.search.view.renderResults(!0);
        },
        switchToRecent: function() {
          TS.search.results[TS.search.query].messages = TS.search.results[TS.search.query].messages.timestamp_messages, TS.search.view.renderResults(!0);
        },
        topResultsFeedback: function(e, t) {
          var n = [":bow:"];
          if ("top_results_useful" === t) {
            n = [":tada:", ":raised_hands::skin-tone-" + (Math.floor(5 * Math.random()) + 2) + ":"];
          }
          var i = n[Math.floor(Math.random() * n.length)];
          $(e).closest(".top_results_feedback").html("Thanks for your feedback! " + TS.emoji.graphicReplace(i)), TS.clog.track("SEARCH_FEEDBACK", {
            search_feedback_value: t,
            request_id: TS.search.last_request_id
          });
        },
        setSort: function(e, t) {
          TS.search.sort !== e && ($(".search_toggle").toggleClass("active"), TS.search.sort = e, TS.search.search_sort_set_sig.dispatch(), "score" !== e && "model" !== e && (e = "timestamp"), TS.prefs.setPrefByAPI({
            name: "search_sort",
            value: e
          }), TS.clog.track("SEARCH_OPEN", {
            open_method: "set_sort_" + e,
            request_id: TS.search.last_request_id
          }), "timestamp" === e && TS.search.hasCachedRecentResults() ? TS.search.switchToRecent() : "score" === e && TS.search.hasCachedRelevantResults() ? TS.search.switchToRelevant() : t || TS.search.searchAll());
        },
        setChannel: function(e) {
          var t = TS.channels.getChannelById(e);
          t ? (TS.search.channel = t, TS.search.group = null, TS.search.im = null) : TS.search.channel = null, TS.search.search_channel_set_sig.dispatch();
        },
        setGroup: function(e) {
          var t = TS.groups.getGroupById(e);
          t ? (TS.search.group = t, TS.search.channel = null, TS.search.im = null) : TS.search.group = null, TS.search.search_group_set_sig.dispatch();
        },
        setMember: function(e) {
          var t = TS.members.getMemberById(e);
          if (t) TS.search.member = t;
          else {
            TS.search.member = null, TS.search.from = null;
            var n = TS.utility.contenteditable.value(TS.search.input).trim(),
              i = n.match(TS.search.from_regex);
            i && ($.each(i, function(e, t) {
              n = $.trim(n.replace(t, ""));
            }), TS.utility.contenteditable.value(TS.search.input, n));
          }
          TS.search.search_member_set_sig.dispatch();
        },
        searchAll: function(t) {
          TS.client || clearTimeout(TS.search.widget.key_tim), TS.search.previous_query = TS.search.query, e = new Date, TS.search.query = t || TS.utility.contenteditable.value(TS.search.input).trim(), TS.search.query = $.trim(TS.search.query), TS.search.query_string = TS.search.query, TS.search.query_string ? TS.search.startSearchTimer(TS.search.query_string, TS.search.per_page, TS.search.onSearchAll) : (TS.search.view.updateOptions(), TS.client ? TS.search.autocomplete.stopSpinner() : TS.search.widget.stopSpinner());
        },
        onSearchAll: function(e, t, n) {
          if ("1" === TS.qs_args.force_search_fail && (window.failed_once = !0, e = !1, t = {
              ok: !1,
              error: "solr_failed"
            }), !e) {
            var i = t && t.error ? t.error : "unknown_error";
            t || (t = {
              ok: !1,
              error: i
            }), t.query = t.query || n.query, t.messages = t.messages || {
              total: 0,
              paging: {
                count: TS.search.per_page,
                total: 0,
                page: 1,
                pages: 0
              },
              matches: []
            }, t.files = t.files || {
              total: 0,
              paging: {
                count: TS.search.per_page,
                total: 0,
                page: 1,
                pages: 0
              },
              matches: []
            };
          }
          if (n.query === TS.search.query_string || TS.search.results[n.query] && TS.search.results[n.query].error)
            if (TS.search.last_search_query = n.query, TS.client && TS.search.upsertFiles(t), TS.search.expandChannelsAndCheckForMsgsInModel(t), 1 === n.page) TS.search.results[n.query] = t, TS.search.results[n.query]._time_of_search = Date.now(), TS.search.all_search_results_fetched_sig.dispatch(t, n), TS.search.getNextPageOfSearchResults(n.query, 2);
            else {
              var r = TS.search.results[n.query];
              r.messages.matches && (t.messages.matches = r.messages.matches.concat(t.messages.matches)), r.files.matches && (t.files.matches = r.files.matches.concat(t.files.matches)), TS.search.results[n.query] = t, TS.search.all_search_results_fetched_sig.dispatch(t, n);
            }
        },
        searchSuggest: function(e) {
          TS.api.call("search.autocomplete", {
            query: e
          }, TS.search.onSearchSuggest);
        },
        onSearchSuggest: function(e, t, n) {
          if (!TS.client && TS.search.widget.suppress_suggestions) return void(TS.search.widget.suppress_suggestions = !1);
          e && (TS.search.suggestions = [], t.suggestions[0] === TS.search.query && 1 === t.suggestions.length ? TS.search.suggestions = [] : $.each(t.suggestions, function(e, t) {
            TS.search.suggestions[e] = {
              value: t,
              highlighted: TS.search.highlightSuggestion(_.escape(t))
            };
          }), TS.search.autosuggest_search_results_fetched_sig.dispatch(t, n));
        },
        highlightSuggestion: function(e) {
          var t = TS.utility.contenteditable.value(TS.search.input),
            n = new RegExp("(" + TS.utility.preg_quote(t) + ")", "gi");
          return e.replace(n, "<b>$1</b>");
        },
        expandChannelsAndCheckForMsgsInMatch: function(e) {
          var t, n, a = e.channel.id;
          r(e, a), i.forEach(function(t) {
            e[t] && r(e[t], a);
          }), n = TS.rxns.getExistingRxnsByKey(e._rxn_key), n && !e.reactions ? TS.warn("msg:" + e.ts + " has reactions in local model, but we got an object in search results that does NOT have reactions, which seems suspicious") : TS.rxns.upsertRxnsFromDataAndUpdateUI(e._rxn_key, e.reactions), (t = TS.shared.getModelObById(a)) && ("im" !== e.type || TS.ims.isImWithDeletedMember(t) || (e.im_exists = !0), t.msgs ? e.is_loaded = !!TS.utility.msgs.getMsg(e.ts, t.msgs) : TS.client && TS.warn(t.id + " has no msgs"), e.channel = t, e.permalink || (e.permalink = TS.utility.msgs.constructMsgPermalink(t, e.ts)));
        },
        expandChannelsAndCheckForMsgsInModel: function(e) {
          var t, n;
          if (e.messages && e.messages.matches) {
            for (n = 0; n < e.messages.matches.length; n += 1)(t = e.messages.matches[n]) && TS.search.expandChannelsAndCheckForMsgsInMatch(t);
            if (e.messages.modules && e.messages.modules.score) {
              for (n = 0; n < e.messages.modules.score.matches.length; n += 1)(t = e.messages.modules.score.matches[n]) && TS.search.expandChannelsAndCheckForMsgsInMatch(t);
              if (e.messages.modules.score.top_results)
                for (n = 0; n < e.messages.modules.score.top_results.length; n += 1)(t = e.messages.modules.score.top_results[n]) && TS.search.expandChannelsAndCheckForMsgsInMatch(t);
            }
          }
        },
        upsertFiles: function(e) {
          if (e.files && e.files.matches)
            for (var t = 0; t < e.files.matches.length; t += 1) e.files.matches[t].preview && (e.files.matches[t].preview_search = e.files.matches[t].preview, delete e.files.matches[t].preview), e.files.matches[t] = TS.files.upsertFile(e.files.matches[t]).file;
        },
        getResultsByQuery: function(e) {
          return TS.search.results[e];
        },
        getMatchByQueryAndTs: function(e, t) {
          return TS.search.getMatchByQueryByThings(e, t);
        },
        getMatchByQueryAndChannelAndTs: function(e, t, n) {
          return TS.search.getMatchByQueryByThings(e, n, t);
        },
        getMatchByQueryAndChannelAndTsAndModule: function(e, t, n, i, r) {
          var a = TS.search.getResultsByQuery(t);
          if (!a) return TS.error("WTF no results?"), null;
          if (!a.messages.modules) return TS.error("WTF no results.messages.modules?"), null;
          a.messages.modules[r] || TS.error("WTF no results.messages.modules." + r + "?");
          for (var s, o = 0; o < a.messages.modules[r].top_results.length; o += 1)
            if (s = a.messages.modules[r].top_results[o]) {
              if ((!n || s.channel.id === n) && s.ts === i) return e ? {
                match: s,
                index: o
              } : s;
            } else TS.error("WTF no match?");
          return null;
        },
        getMatchByQueryByThings: function(e, t, n) {
          var i = TS.search.getResultsByQuery(e);
          return i ? TS.search.getMatchFromResultsByThings(!0, i, t, n) : (TS.error("WTF no results?"), null);
        },
        getMatchFromResultsByThings: function(e, t, n, i) {
          if (!t) return TS.error("WTF no results?"), null;
          if (!t.messages) return TS.error("WTF no results.messages?"), null;
          if (!t.messages.matches) return TS.error("WTF no results.messages.matches?"), null;
          for (var r, a = 0; a < t.messages.matches.length; a += 1)
            if (r = t.messages.matches[a]) {
              if ((!i || r.channel.id === i) && r.ts === n) return e ? {
                match: r,
                index: a
              } : r;
            } else TS.error("WTF no match?");
          return null;
        },
        truncateQuery: function(e) {
          return e.length > TS.search.search_query_max_length ? e.substring(0, TS.search.search_query_max_length) : e;
        },
        resetSearchOptions: function() {
          TS.search.channel = null, TS.search.group = null, TS.search.im = null, TS.search.member = null, TS.search.from = null, TS.search.searchAll();
        },
        saveSearch: function(e, t) {
          e.terms && (e.terms = $.trim(e.terms), TS.search.keyword_modifier_pair_regex.test(e.terms) || TS.api.call("search.save", e, t));
        },
        separateMessagesAndFiles: function() {
          return !!TS.client;
        },
        setInputVal: function(e) {
          TS.utility.contenteditable.value(TS.search.input, e), TS.utility.contenteditable.focus(TS.search.input);
        },
        appendToInputAndSelect: function(e) {
          var t = TS.utility.contenteditable.value(TS.search.input);
          t && !/\s$/.test(t) && (t += " "), TS.utility.contenteditable.value(TS.search.input, t + e), TS.boot_data.feature_texty_search || TS.search.input.textrange("set", t.length, t.length + e.length);
        },
        submitSearch: function() {
          TS.search.input.closest("form").trigger("submit");
        },
        searchSessionExpired: function() {
          return e && Date.now() - e > n;
        },
        debugQuery: function(e, t) {
          var n = "/mc/search_eval_query.php?team_id=" + e + "&user_id=" + t + "&query=" + encodeURIComponent(TS.search.query_string);
          window.open(n);
        },
        getSort: function(e) {
          return "search.files" === e ? "auto" : TS.search.sort;
        }
      });
      var e, t, n = 3e5,
        i = ["next", "next_2", "previous", "previous_2"],
        r = function(e, t) {
          e._rxn_key = TS.rxns.getRxnKey("message", e.ts, t), TS.utility.msgs.processAttachments(e.attachments), TS.ui.handy_rxns.decorateMsg(e, TS.format.replaceHighlightMarkers(e.text)), e.extracts && e.extracts.length && e.extracts.forEach(function(t) {
            t._rxn_key = e._rxn_key, TS.ui.handy_rxns.decorateMsg(t, TS.format.replaceHighlightMarkers(t.text));
          });
        },
        a = function(e, t, n, i, r) {
          var a = {
            query: TS.emoji.maybeGetCanonicalEmojiString(t),
            highlight: !0,
            count: n,
            types: [TS.search.filetype],
            sort: TS.search.getSort(e),
            page: i || 1,
            extracts: 1,
            extra_message_data: 1,
            max_extract_len: 150,
            highlight_attachments: 1,
            active_cid: TS.model.active_cid,
            top_results: 1,
            experts: 1,
            locale: TS.i18n.localeOrPseudo()
          };
          "search.all" === e && (a.no_posts = 1), "search.files" !== e && (a.more_matches = !0), TS.boot_data.page_needs_enterprise && TS.boot_data.enterprise_api_token && (a.enterprise_token = TS.boot_data.enterprise_api_token, "search.messages" === e && (a.team = TS.model.team.id)), TS.api.call(e, a, r);
        },
        s = function(e, t, n, i) {
          if (!e || !t.messages) {
            var r = t && t.error ? t.error : "unknown_error";
            t || (t = {
              ok: !1,
              error: r
            }), t.query = t.query || n.query, t.messages = t.messages || {
              total: 0,
              paging: {
                count: TS.search.per_page,
                total: 0,
                page: 1,
                pages: 0
              },
              matches: []
            };
          }
          if (t.query = TS.emoji.maybeGetLocalizedEmojiString(t.query), n.query = TS.emoji.maybeGetLocalizedEmojiString(n.query), n.query === TS.search.query_string || TS.search.results[n.query] && TS.search.results[n.query].error) {
            TS.search.last_search_query !== n.query && delete TS.search.results[TS.search.last_search_query], TS.search.last_search_query = n.query, TS.search.last_request_id = i, TS.search.expandChannelsAndCheckForMsgsInModel(t);
            var a = TS.search.results[n.query];
            1 == n.page ? (a ? $.extend(a, t) : (TS.search.results[n.query] = t, a = t), a.initial_messages_total = t.messages.total, a.messages.pages = [{
              start: 0,
              count: _.get(t.messages, "matches.length", 0)
            }], _.has(a, "messages.modules.score.matches") && (a.messages.modules.score.pages = [{
              start: 0,
              count: _.get(a.messages.modules.score, "matches.length", 0)
            }]), a._time_of_search = Date.now(), TS.search.message_search_results_fetched_sig.dispatch(a, n)) : (a.messages && a.messages.matches && (t.messages.matches = a.messages.matches.concat(t.messages.matches), t.messages.pages = a.messages.pages.concat([{
              start: a.messages.matches.length,
              count: _.get(t.messages, "matches.length", 0)
            }])), $.extend(a, t), TS.search.message_search_results_fetched_sig.dispatch(a, n));
          }
        },
        o = function(e, t, n, i) {
          if (!e || !t.files) {
            var r = t && t.error ? t.error : "unknown_error";
            t || (t = {
              ok: !1,
              error: r
            }), t.query = t.query || n.query, t.files = t.files || {
              total: 0,
              paging: {
                count: TS.search.per_page,
                total: 0,
                page: 1,
                pages: 0
              },
              matches: []
            };
          }
          if (t.query = TS.emoji.maybeGetLocalizedEmojiString(t.query), n.query = TS.emoji.maybeGetLocalizedEmojiString(n.query), n.query === TS.search.query_string || TS.search.results[n.query] && TS.search.results[n.query].error) {
            TS.search.last_search_query !== n.query && delete TS.search.results[TS.search.last_search_query], TS.search.last_search_query = n.query, TS.search.last_files_request_id = i, TS.client && TS.search.upsertFiles(t);
            var a = TS.search.results[n.query];
            1 === n.page ? (a ? $.extend(a, t) : (TS.search.results[n.query] = t, a = t), a.initial_files_total = t.files.total, a._time_of_search = Date.now(), TS.search.file_search_results_fetched_sig.dispatch(a, n)) : (a.files && a.files.matches && (t.files.matches = a.files.matches.concat(t.files.matches)), $.extend(a, t), TS.search.file_search_results_fetched_sig.dispatch(a, n));
          }
        },
        l = function() {
          var e = !1,
            t = !1,
            n = function() {
              e && t && TS.search.all_search_results_fetched_sig.dispatch();
            };
          return {
            msgs: function() {
              e = !0, s.apply(this, arguments), n();
            },
            files: function() {
              t = !0, o.apply(this, arguments), n();
            }
          };
        },
        d = function(e) {
          TS.files.updateFileListItem(e, $("#search_results_items"));
        };
    }();
  },
  2513: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("searcher", {
        search: function(t, n) {
          n.limit ? n.limit_option = {
            limit: n.limit
          } : n.limit_option = {
            limit: e
          };
          var i = p(t, n);
          if (n.tiered) {
            var r = a(t, n);
            return r.promise = i, Promise.resolve(r);
          }
          return i;
        },
        test: function() {
          return {
            count: g
          };
        }
      });
      var e = 24,
        t = {
          prefer_exact_match: !0,
          frecency: !0,
          prefer_channels_user_belongs_to: !0,
          search_previous_channel_names: !0
        },
        n = {
          include_archived: !0,
          only_if_member: !1
        },
        i = {
          include_archived: !0
        },
        r = {
          include_self: !1,
          include_slackbot: !0,
          include_bots: !0
        },
        a = function(e, n) {
          var i = {};
          if (n.members && (i.members = s(n.members)), n.channels && (i.channels = o(n.channels)), n.groups && (i.groups = l(n.groups)), n.mpims && (i.mpims = d(n.mpims)), n.teams && (i.teams = c(n.teams)), n.usergroups && (i.usergroups = u(n.usergroups)), n.views && (i.views = m(n.views)), n.filter && (i = n.filter(i)), n.sort) {
            var r = h(n.sort, n.limit_option, t);
            return TS.sorter.search(e, i, r);
          }
          return i;
        },
        s = function(e) {
          return e = h(e, r), TS.members.getMembersWithOptions(e);
        },
        o = function(e) {
          e = h(e, n);
          var t;
          return t = TS.useRedux() ? TS.redux.channels.dangerouslyGetChannelsForUser() : TS.channels.getChannelsForUser().slice(), e.include_archived || (t = _.reject(t, "is_archived")), e.only_if_member && (t = _.filter(t, "is_member")), e.can_post && (t = _.filter(t, _.curry(TS.permissions.members.canPostInModelOb)(TS.model.user))), t;
        },
        l = function(e) {
          if (e = h(e, i), TS.useRedux()) {
            var t = TS.redux.channels.dangerouslyGetGroups();
            return e.include_archived || (t = _.reject(t, "is_archived")), t;
          }
          return e.include_archived ? TS.model.groups : TS.groups.getUnarchivedGroups();
        },
        d = function() {
          return TS.useRedux() ? TS.mpims.getVisibleMpims(TS.redux.channels.dangerouslyGetMpims()) : TS.mpims.getVisibleMpims().slice();
        },
        c = function() {
          return _.values(TS.boot_data.other_accounts);
        },
        u = function() {
          return TS.user_groups.getActiveUserGroups().slice();
        },
        m = function() {
          var e = [];
          return TS.client.unread.isEnabled() && e.push(_.find(TS.model.NAMED_VIEWS, {
            id: "Vall_unreads"
          })), e.push(_.find(TS.model.NAMED_VIEWS, {
            id: "Vall_threads"
          })), TS.apps.isAppSpaceEnabled() && e.push(_.find(TS.model.NAMED_VIEWS, {
            id: "Vapp_space"
          })), e;
        },
        p = function(e, t) {
          if (!TS.lazyLoadMembersAndBots()) return Promise.resolve(a(e, t));
          var n = [];
          return t.members && n.push(f(e, t)), Promise.all(n).then(function() {
            return a(e, t);
          });
        },
        f = function(e, t) {
          return t = h(t.members, t.limit_option, r), t.max_api_results = t.limit, "@" === e.charAt(0) && (e = e.slice(1)), t.query = e, TS.members.promiseToSearchMembers(t);
        },
        h = function(e, t) {
          return !0 === e && (e = {}), _.defaultsDeep.apply(null, arguments);
        },
        g = function(e) {
          return _.size(_.flatten(_.values(e)));
        };
    }();
  },
  2514: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("selection", {
        isAnyTextSelected: function() {
          return "" != window.getSelection().toString().trim();
        },
        selectNode: function(e) {
          if (e) {
            if (!document.body.contains(e)) return void TS.warn("TS.selection.selectNode: node is not in DOM");
            var t = document.createRange();
            t.selectNode(e);
            var n = window.getSelection();
            return n.removeAllRanges(), n.addRange(t), n;
          }
        },
        selectNodeContents: function(e) {
          if (e) {
            if (!document.body.contains(e)) return void TS.warn("TS.selection.selectNodeContents: node is not in DOM");
            var t = document.createRange();
            t.selectNodeContents(e);
            var n = window.getSelection();
            return n.removeAllRanges(), n.addRange(t), n;
          }
        },
        selectCharacters: function(e, t, n) {
          if (e) {
            if (!document.body.contains(e)) return void TS.warn("TS.selection.selectCharacters: node is not in DOM");
            if (_.isNumber(t) || (t = 0), _.isNumber(n) || (n = t), "setSelectionRange" in e) return e.focus(), void e.setSelectionRange(t, n);
            if (e.childNodes.length) {
              var i, r, a = 0,
                s = 0,
                o = 0,
                l = TS.utility.getChildTextNodes(e);
              if (_.each(l, function(e) {
                  var l = e.textContent.length;
                  if (!i && a + l >= t && (i = e, s = t - a), !r && a + l >= n && (r = e, o = n - a), i && r) return !1;
                  a += l;
                }), !i || !r) return void TS.warn("TS.selection.selectCharacters: could not find start and end nodes");
              var d = document.createRange();
              d.setStart(i, s), d.setEnd(r, o);
              var c = window.getSelection();
              c.removeAllRanges(), c.addRange(d);
            }
          }
        },
        snapshot: function() {
          var e, t = window.getSelection();
          return t.rangeCount && (e = t.getRangeAt(0).cloneRange()),
            function() {
              var t = window.getSelection();
              t.removeAllRanges(), e && t.addRange(e);
            };
        },
        toCharacterRange: function(e) {
          var t = {
            start: 0,
            end: 0
          };
          if (!e) return t;
          if (!document.body.contains(e)) return void TS.warn("TS.selection.toCharacterRange: node is not in DOM");
          var n = rangy.getSelection();
          return n.rangeCount ? t = n.getRangeAt(0).toCharacterRange(e) : t;
        },
        insertAtCaret: function(e) {
          _.isString(e) || (e = "");
          var t = window.getSelection();
          t.rangeCount || TS.warn("TS.selection.insertAtCaret: no range");
          var n = t.getRangeAt(0);
          n.deleteContents();
          var i = document.createTextNode(e);
          n.insertNode(i), n.setStartAfter(i), t.removeAllRanges(), t.addRange(n);
        },
        removeNextChars: function(e) {
          if (_.isNumber(e) && e) {
            var t = rangy.getSelection(),
              n = t.getRangeAt(0);
            e > 0 ? n.moveEnd("character", e) : n.moveStart("character", e), n.deleteContents();
          }
        }
      });
    }();
  },
  2516: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("shared", {
        msg_sent_sig: new signals.Signal,
        onStart: function() {
          if (TS.client) {
            TS.channels.switched_sig.add(m), TS.ims.switched_sig.add(m), TS.groups.switched_sig.add(m), TS.mpims.switched_sig.add(m), TS.client && TS.client.unread && TS.client.unread.switched_sig.add(m), TS.client && TS.client.threads && TS.client.threads.switched_sig.add(m);
            var e = function() {
              i = !0, b();
            };
            TS.isSocketManagerEnabled() ? (TS.interop.SocketManager.connectedSig.addOnce(e), TS.interop.SocketManager.connectedSig.add(w)) : (TS.ms.connected_sig.addOnce(e), TS.ms.connected_sig.add(w));
          }
        },
        test: function() {
          var e = {};
          return Object.defineProperty(e, "_queried_usernames", {
            get: function() {
              return v;
            },
            set: function(e) {
              v = e;
            }
          }), e;
        },
        didDeferMessageHistoryById: function(e) {
          return !!e && r[e];
        },
        setDeferMessageHistoryForId: function(e, t) {
          e && (r[e] = !!t);
        },
        getUserCountsInfoById: function(e) {
          if (e) return s[e];
        },
        setUserCountsInfoForId: function(e, t) {
          e && (s[e] = t);
        },
        deleteUserCountsInfoForId: function(e) {
          e && delete s[e];
        },
        getOldestUnreadTsForId: function(e) {
          if (e) return o[e];
        },
        setOldestUnreadTsForId: function(e, t) {
          e && (o[e] = t);
        },
        calcUnreadCnts: function(e, t, n) {
          if (!TS.boot_data.feature_react_messages && !TS._incremental_boot) {
            if (TS.shared.didDeferMessageHistoryById(e.id))
              if (!TS.boot_data.feature_disable_history_prefetch || e.is_im || e.msgs.length) {
                if (e.is_im || e.is_mpim) return void TS.shared.checkInitialMsgHistory(e, t);
                if (!a[e.id]) {
                  var i = _.random(2500, 1e4);
                  TS.has_pri[k] && TS.log(k, "calcUnreadCnts (" + e.id + "): no history in model, no history call yet - delaying " + i + " ms before history fetch."), a[e.id] = window.setTimeout(function() {
                    TS.has_pri[k] && TS.log(k, "calcUnreadCnts (" + e.id + "): fetching after " + i + " ms delay."), delete a[e.id], TS.shared.checkInitialMsgHistory(e, t);
                  }, i);
                }
              } else TS.has_pri[k] && TS.log(k, "calcUnreadCnts (" + e.id + "): History prefetch disabled. msgs.length: " + (e.msgs && e.msgs.length));
            e.unreads.length = 0, e.unread_highlights.length = 0, TS.shared.setOldestUnreadTsForId(e.id, null);
            var r, o = e.msgs,
              l = e.unread_cnt,
              d = e.unread_highlight_cnt,
              c = !1,
              u = !1,
              m = !0,
              p = "away" === TS.model.user.presence;
            if (e.was_archived_this_session || (e.is_archived && (m = !1), e.is_channel && !e.is_member && (m = !1)), e.is_im) {
              var f = TS.members.getMemberById(e.user);
              f && f.deleted && (m = !1);
            }
            var h, g = TS.notifs.isCorGMuted(e.id),
              S = e.is_im || e.is_mpim || TS.notifs.canModelObHaveChannelMentions(e);
            if (m && o)
              for (var T = 0; T < o.length; T += 1)
                if (r = o[T], !(r.ts <= e.last_read) && (!TS.utility.msgs.isTempMsg(r) || r._alert_even_though_temp) && (u = TS.utility.msgs.msgCanCountAsUnread(r), c = c || u, u)) {
                  e.unreads.push(r.ts);
                  var b = TS.shared.getOldestUnreadTsForId(e.id);
                  if ((!b || r.ts < b) && TS.shared.setOldestUnreadTsForId(e.id, r.ts), "thread_broadcast" !== r.subtype)
                    if (S) {
                      var v = 1e3 * parseFloat(r.ts);
                      h = p || v < TS.model.user._presence_last_changed, TS.utility.msgs.msgContainsMention(r, h) && (TS.permissions.members.canMsgMentionChannelIfMention(r.text, e.id, r.user) ? (TS.log(99, "allowing channel mention for msg.ts " + r.ts + " from member " + r.user + " in " + e.id), e.unread_highlights.push(r.ts)) : TS.log(99, "ignoring large channel mention for msg.ts " + r.ts + " from member " + r.user + " in " + e.id + " because member is not an admin."));
                    } else TS.utility.msgs.getMsgMentionData(r).non_channel_mentions && e.unread_highlights.push(r.ts);
                }
            if (!c && e.unreads.length && (e.unreads.length = 0, e.unread_highlights.length = 0, TS.shared.setOldestUnreadTsForId(e.id, null), n && t.markMostRecentReadMsg(e, TS.model.marked_reasons.none_qualify)), TS.has_pri[x] && TS.log(x, "TS.shared.calcUnreadCnts: " + e.id + ", unreads.length: " + e.unreads.length + " and_mark: " + n), e.unread_cnt = e.unreads.length, g && e.unread_cnt && (e._show_in_list_even_though_no_unreads = !0), e.unread_highlight_cnt = e.unread_highlights.length, TS.shared.maybeMarkReadIfMuted(e, t), TS.utility.msgs.countAllUnreads(), l != e.unread_cnt && t.unread_changed_sig.dispatch(e), d != e.unread_highlight_cnt && t.unread_highlight_changed_sig.dispatch(e), TS.client) {
              if (!s[e.id] || !s[e.id].has_unreads) return;
              if (!e._history_fetched_since_last_connect || e.history_is_being_fetched) return;
              if (!e.msgs.length || e.unread_cnt) return;
              if (delete s[e.id], TS.notifs.isCorGMuted(e.id)) return void(TS.has_pri[x] && TS.log(x, "TS.shared.calcUnreadCnts: " + e.id + ": ignoring possible users.counts has_unreads discrepancy because channel is muted."));
              var y = TS.shared.getActiveModelOb();
              if (y && y.id === e.id) return void(TS.has_pri[x] && TS.log(x, "TS.shared.calcUnreadCnts: " + e.id + ": ignoring possible users.counts has_unreads discrepancy due to active channel."));
              var w = TS.utility.msgs.getMostRecentValidTs(e),
                M = TS.model.marked_reasons.none_qualify;
              if (TS.warn('Found users.counts discrepancy: has_unreads = true for "' + e.id + '", but client calculated 0 unreads after fetching history (' + e.msgs.length + ' msgs). Marking now with reason="' + M + '" to correct discrepancy, assuming last_read (' + e.last_read + ") < latest (" + w + ")."), parseFloat(e.last_read) >= parseFloat(w)) return void TS.warn('Error last >= latest for "' + e.id + '"? Bailing, not attempting to mark.');
              t.markMostRecentReadMsg(e, M);
            }
          }
        },
        getLatestMsgTs: function(e) {
          if (e.latest && e.latest.ts) return TS.has_pri[k] && TS.log(k, "getLatestMsgTs (" + e.id + "): returning model_ob.latest.ts of " + e.latest.ts), e.latest.ts;
          var t = e.latest || e._latest_via_users_counts;
          return TS.has_pri[k] && TS.console.log(k, "getLatestMsgTs (" + e.id + "): no latest.ts, returning latest || _latest_via_users_counts (" + e.latest + " || " + e._latest_via_users_counts + ") -> " + t), t;
        },
        queueConsistencyCheckAfterHistory: function(e) {
          if (!e) return void TS.warn("queueConsistencyCheck: no model_ob");
          if (!e._consistency_is_being_checked && !e._consistency_has_been_checked) {
            TS.shared.getControllerForModelOb(e).history_fetched_sig.addOnce(function(t) {
              t && (t._consistency_is_being_checked || t._consistency_has_been_checked || (TS.has_pri[k] && TS.log(k, '"' + e.id + '": fetched history, now checking consistency.'), TS.utility.msgs.checkConsistencyViaApi(t.id)));
            });
          }
        },
        maybeFetchHistoryAndThenCheckConsistency: function(e) {
          TS.shared.maybeFetchHistory(e, !0);
        },
        maybeFetchHistory: function(e, t) {
          if (!e) return void TS.warn("maybeFetchHistory: no model_ob?");
          var n;
          if (TS.has_pri[k] && (n = 'maybeFetchHistory: "' + e.id + '": '), e.history_is_being_fetched) return TS.has_pri[k] && TS.log(k, n + "history is being fetched already. Queueing consistency check and exiting."), void TS.shared.queueConsistencyCheckAfterHistory(e);
          if (e._history_fetched_since_last_connect) return TS.has_pri[k] && TS.log(k, n + "history already fetched."), void TS.utility.msgs.checkConsistencyViaApi(TS.model.active_cid);
          TS.has_pri[k] && (t ? TS.log(k, n + "checking history first, then consistency.") : TS.log(k, n + "checking history.")), t && TS.shared.queueConsistencyCheckAfterHistory(e);
          var i = TS.shared.getControllerForModelOb(e);
          TS.shared.checkInitialMsgHistory(e, i), TS.client && TS.client.msg_pane && TS.client.msg_pane.maybeClearNewMsgsTimer(e);
        },
        checkInitialMsgHistory: function(e, t, n) {
          if (!TS.boot_data.feature_react_messages) {
            if (e.history_is_being_fetched) return void TS.warn('checkInitialMsgHistory NOT DOING ANYTHING, because "' + e.id + '" history_is_being_fetched:true');
            if (!(TS.isPartiallyBooted() || !i) || !TS._did_incremental_boot || e.id !== TS.model.active_channel_id) {
              a[e.id] && (TS.has_pri[k] && TS.log(k, "checkInitialMsgHistory (" + e.id + "): Clearing _delayed_fetch_timer and fetching immediately"), window.clearTimeout(a[e.id]), delete a[e.id]), TS.shared.setDeferMessageHistoryForId(e.id, !1), n ? e._needs_unread_recalc = !0 : TS.utility.msgs.maybeFetchUserDataFromLS(e);
              var r = TS.model.initial_msgs_cnt,
                s = TS.shared.getLatestMsgTs(e),
                o = TS.utility.msgs.getMsg(s, e.msgs);
              o && !e._history_fetched_since_last_connect && (TS.has_pri[k] && TS.log(k, 'We have all recent "' + e.id + '" messages, but have not fetched history since last connect. Will fetch, omitting "latest".'), o = null, s = null);
              var l;
              if (o) {
                TS.has_pri[k] && TS.log(k, 'we have all recent "' + e.id + '" msgs unread_count:' + e.unread_count + " unread_cnt:" + e.unread_cnt + " initial_count:" + r), TS.shared.maybeDealWithAllSentTempMsgs(e, t);
                var d = TS.utility.msgs.getOlderMsgsStatus(e);
                if (e.msgs.length < TS.model.initial_msgs_cnt && d.more) return TS.isPartiallyBooted() || (TS.error("calling loadHistory because status.more=true && model_ob.msgs.length < TS.model.initial_msgs_cnt: " + e.msgs.length + " < " + TS.model.initial_msgs_cnt), TS.dir(0, d, e.id), TS.shared.loadHistory(e, t, r)), !0;
              } else if (n) TS.shared.setDeferMessageHistoryForId(e.id, !0);
              else {
                if (TS.boot_data && TS.boot_data.feature_disable_history_prefetch)
                  if (TS.shared.getActiveModelOb().id === e.id) TS.has_pri[k] && TS.log(k, "checkInitialMsgHistory: Allowing fetch for active of " + e.id);
                  else if (e.is_im) TS.has_pri[k] && TS.log(k, "checkInitialMsgHistory: Allowing fetch for IM of " + e.id);
                else {
                  if (!e.msgs.length) return void(TS.has_pri[k] && TS.log(k, "checkInitialMsgHistory: NOT fetching for " + e.id + " until view because !msgs.length"));
                  TS.notifs.isCorGMuted(e.id) && TS.has_pri[k] && TS.log(k, "checkInitialMsgHistory: NOT fetching for " + e.id + " until view because muted");
                }
                TS.has_pri[k] && TS.log(k, 'WE DO NOT HAVE ALL RECENT MESSAGES for "' + e.id + '" unread_count:' + e.unread_count + " unread_cnt:" + e.unread_cnt + " initial_count:" + r);
                e.msgs.length, l = {
                  channel: e.id,
                  count: r,
                  inclusive: "string" == typeof e.latest,
                  ignore_replies: !0,
                  include_pin_count: !!TS.boot_data.feature_lazy_pins
                }, s && (l.latest = s), e.msgs.length && !TS.utility.msgs.isTempMsg(e.msgs[0]) ? (TS.has_pri[k] && TS.log(k, 'we have some but not all recent "' + e.id + '" msgs'), l.oldest = e.msgs[0].ts) : TS.has_pri[k] && TS.log(k, 'we have no "' + e.id + '" msgs'), e._history_fetched_since_last_connect || (e.msgs.length ? 1 !== e.msgs.length || TS.utility.msgs.isTempMsg(e.msgs[0]) ? (TS.has_pri[k] && TS.log(k, "we have some (" + e.msgs.length + ') but not all recent msgs for "' + e.id + '", and have not fetched history since last connection'), l.latest && (TS.has_pri[k] && TS.log(k, 'first history fetch since connect for "' + e.id + '" - deleting api_args.latest of ' + l.latest), delete l.latest), l.oldest && l.count && TS.has_pri[k] && TS.log(k, "We have api_args.oldest, fetching oldest + " + l.count + ' messages on "' + e.id + '" to get client up-to-date.')) : (TS.has_pri[k] && TS.log(k, 'first new message on "' + e.id + ", fetching history without any latest/oldest"), delete l.latest, delete l.oldest) : (TS.has_pri[k] && TS.log(k, 'we have no msgs for "' + e.id + '", and have not fetched history since last connection'), l.latest && (TS.has_pri[k] && TS.log(k, "no msgs.length. dropping api_args.latest of " + l.latest + ' for "' + e.id + '"'), delete l.latest), l.oldest && (TS.has_pri[k] && TS.log(k, "no msgs.length. dropping api_args.oldest of " + l.oldest + ' for "' + e.id + '"'), delete l.oldest)));
                var c = function() {
                    e.history_is_being_fetched ? TS.has_pri[k] && TS.log(k, 'NOT fetching history on "' + e.id + '", history already being fetched') : (TS.has_pri[k] && TS.log(k, 'fetching history for "' + e.id + '" with api_args', l), t.fetchHistory(e, l));
                  },
                  _ = TS.isSocketManagerEnabled() ? TS.interop.SocketManager.isConnected() : TS.model.ms_connected;
                _ ? c() : TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.addOnce(c) : TS.ms.connected_sig.addOnce(c);
              }
            }
          }
        },
        maybeLoadScrollBackHistory: function(e, t, n) {
          if (!n && 0 !== e.scroll_top) return !1;
          var i = TS.utility.msgs.getOlderMsgsStatus(e);
          if (!i.more) {
            if (TS.info("Not loading scrollback in " + e.id + ": " + i.text), 3 === i.code) {
              var r = _.map(e.msgs, "ts");
              TS.shared.checkForMoreMsgs(e).then(function() {
                var n;
                n = "more messages than expected in " + e.id, TS.logError(n, "oldest_msg_ts or is_limited is wrong", "Scrollback history error");
                var i = _.map(e.msgs, "ts"),
                  a = _.difference(r, i),
                  s = _.difference(i, r);
                a.length || s.length ? (n = "timestamps not present in new data:" + a.toString() + "; timestamps not present in old data: " + s.toString(), TS.logError(n, "Found a difference in timestamps before and after history call", "Scrollback history error")) : TS.log(null, "Did not find a difference between old and new timestamp data after history API call."), TS.shared.getActiveModelOb().id !== e.id || e.history_is_being_fetched || (e.is_limited && (e.is_limited = !1), e.oldest_msg_ts && TS.utility.msgs.resetOldestMsgsTs(e), TS.shared.loadScrollBackHistory(e, t));
              }, _.noop);
            }
            return !1;
          }
          return TS.shared.loadScrollBackHistory(e, t);
        },
        loadScrollBackHistory: function(e, t) {
          return e.msgs.length ? (TS.info(e.id + " HAS MORE"), TS.shared.loadHistory(e, t), e.has_fetched_history_after_scrollback = !0, e.fetched_history_after_scrollback_time = Date.now(), !0) : (TS.has_pri[k] && TS.log(k, "TS.shared.loadScrollbackHistory: No messages in " + e.id + " yet; not loading scrollback history."), void(e._history_fetched_since_last_connect || (TS.has_pri[k] && TS.log(k, "TS.shared.loadScrollBackHistory: No messages, and history has not been fetched since last connect; doing an initial fetch."), TS.shared.checkInitialMsgHistory(e, t))));
        },
        loadHistory: function(e, t, n) {
          var i = {
            channel: e.id,
            latest: e.msgs[e.msgs.length - 1].ts,
            count: n || TS.model.subsequent_msgs_cnt,
            ignore_replies: !0,
            include_pin_count: !!TS.boot_data.feature_lazy_pins
          };
          t.fetchHistory(e, i);
        },
        checkForMoreMsgs: function(e) {
          var t = {
            channel: e.id,
            latest: e.msgs[e.msgs.length - 1].ts,
            count: 1,
            ignore_replies: !0,
            include_pin_count: !!TS.boot_data.feature_lazy_pins
          };
          return TS.api.call(TS.shared.getHistoryApiMethodForModelOb(e), t).then(function(e) {
            return e.data.messages && e.data.messages.length > 0 ? Promise.resolve(e) : Promise.reject(new Error("No more messages"));
          });
        },
        onSendMsg: function(e, t, n, i) {
          var r = t.temp_ts ? TS.utility.msgs.getMsgByProp("temp_ts", t.temp_ts, n.msgs) : null;
          if (!e) return void(r ? (TS.model.unsent_msgs[r.ts] = !0, i.msg_not_sent_sig.dispatch(n, r, t)) : TS.error("that makes no sense"));
          TS.view.scroll_down_when_msg_from_user_is_added = !0;
          var a;
          r ? (a = _.cloneDeep(r), a.text = t.text, a.ts = t.ts, delete a.is_pending, i.removeMsg(n.id, r)) : (TS.warn("no temp msg for " + t.reply_to), a = {
            text: t.text,
            user: TS.model.user.id,
            ts: t.ts
          }), t.SENT_MSG.thread_ts && (a.thread_ts = t.SENT_MSG.thread_ts), i.addMsg(t.SENT_MSG.channel || n.id, TS.utility.msgs.processImsg(a, n.id));
          var s;
          if (n.is_channel) s = TS.i18n.t("channel", "shared")();
          else {
            if (!n.is_group || n.is_mpim) return;
            s = TS.i18n.t("private channel", "shared")();
          }
          var o = t.text.match(/<!subteam(.*?)>/g);
          if (o)
            for (var l = 0; l < o.length; l += 1) {
              var d = o[l].replace(">", "").replace("<", "");
              d = d.split("|")[0];
              var c = d.split("^")[1];
              c && function(e) {
                TS.user_groups.getUserGroupMembers(e, function(i) {
                  var r = _.uniq(i.users);
                  r && TS.membership.ensureChannelMembershipIsKnownForUsers(n.id, r).then(function() {
                    var i = [];
                    if (r.forEach(function(e) {
                        TS.membership.getUserChannelMembershipStatus(e, n).is_member || i.push(e);
                      }), i.length) {
                      var o = TS.utility.date.makeTsStamp(),
                        l = "<!subteam^" + e + ">",
                        d = i.length,
                        c = "TS.client.ui.promptForGroupOrChannelInvite('" + n.id + "', '" + i.join(",") + "', '" + o + "')",
                        _ = "TS.client.ui.sendChannelMsgThroughSlackBot('" + n.id + "', '" + t.ts + "', '" + i.join(",") + "', '" + o + "')",
                        u = "TS.utility.msgs.removeEphemeralMsg('" + n.id + "', '" + o + "')";
                      TS.client.msg_pane.addMaybeClick(c, TS.client.ui.promptForGroupOrChannelInvite.bind(Object.create(null), n.id, i.join(","), o)), TS.client.msg_pane.addMaybeClick(_, TS.client.ui.sendChannelMsgThroughSlackBot.bind(Object.create(null), n.id, t.ts, i.join(","), o)), TS.client.msg_pane.addMaybeClick(u, TS.utility.msgs.removeEphemeralMsg.bind(Object.create(null), n.id, o));
                      var m = "";
                      m = TS.i18n.t("{member_count, plural, =1 {One member} =2 {Two members} =3 {Three members} =4 {Four members} =5 {Five members} =6 {Six members} =7 {Seven members} =8 {Eight members} =9 {Nine members} =10 {Ten members} other {# members}} of the {name} group {member_count, plural, =1 {isn’t} other {aren’t}} in this {channel}. ", "shared")({
                        name: l,
                        member_count: d,
                        channel: s
                      }), "G" === n.id.charAt(0) ? m += TS.i18n.t("If you’d like I can <javascript:{prompt}|invite them to join>, or, <javascript:{nothing}|do nothing>.", "shared")({
                        prompt: c,
                        nothing: u
                      }) : m += TS.i18n.t("If you’d like Slack can <javascript:{message}|notify them about your message>.", "shared")({
                        message: _
                      }), TS.client.ui.addEphemeralBotMsg({
                        channel: n.id,
                        ts: o,
                        text: m,
                        thread_ts: a.thread_ts
                      });
                    }
                  });
                });
              }(c);
            }
          TS.client && TS.client.stats && TS.client.stats.isEnabled() && TS.metrics.measureAndClear("send_msg_" + TS.shared.getTypeForModelOb(), "msg_input_try_to_submit");
        },
        sendMsg: function(e, t, i, r, a) {
          if (!t) return !1;
          var s = TS.shared.getModelObById(e),
            o = s && s.msgs && s.msgs[0] && TS.interop.datetime.toDateObject(s.msgs[0].ts + 1) || Date.now(),
            l = TS.utility.date.makeTsStamp(o),
            d = TS.format.cleanMsg(t);
          if (!TS.boot_data.feature_name_tagging_client) {
            var c = _(TS.utility.members.getUsernamesMentionedInString(t)).reject(TS.members.getMemberByName).reject(TS.user_groups.getUserGroupsByHandle).reject(function(e) {
              return v[e];
            }).value();
            if (c.length > 0) {
              var u = this,
                m = arguments;
              return y(c).then(function() {
                return TS.shared.sendMsg.apply(u, m), null;
              }), !0;
            }
          }
          var p = {
            type: "message",
            channel: e,
            text: $.trim(d)
          };
          r && (p.thread_ts = r.thread_ts || r.ts, p.reply_broadcast = a), TS.isSocketManagerEnabled() ? (TS.interop.SocketManager.send(p).then(function(e) {
            e.temp_ts = l, i.onSendMsg(!0, e);
          }).catch(function(e) {
            e.msg.temp_ts = l, i.onSendMsg(!1, e.msg);
          }).finally(function() {
            _.pull(n[e], l);
          }), n[e] = n[e] || [], n[e].push(l)) : TS.ms.send(p, function(e, t) {
            return t.temp_ts = l, i.onSendMsg(e, t);
          }, l), TS.typing.userEnded(s);
          var f = {
            type: "message",
            text: d,
            user: TS.model.user.id,
            ts: l,
            is_pending: !0,
            temp_ts: l
          };
          return TS.ui.handy_rxns.decorateMsg(f, f.text), p.thread_ts && (f.thread_ts = p.thread_ts, f._hidden_reply = !0, f._was_reply_broadcast = p.reply_broadcast), i.addMsg(e, f), TS.shared.msg_sent_sig.dispatch(s), !0;
        },
        sendMsgGroup: function(e, t, n, i, r) {
          var a = TS.shared.getModelObById(e),
            s = a.is_mpim ? TS.i18n.t("conversation", "shared")() : TS.i18n.t("channel", "shared")(),
            o = a.is_mpim ? "conversation" : "channel";
          if (!a) return !1;
          if (a.is_archived) return !1;
          var l, d = TS.channels.getGeneralChannel(),
            c = function(e) {
              TS.generic_dialog.alert(e).then(function() {
                i ? TS.ui.replies.focusReplyInput() : TS.view.focusMessageInput();
              }), i ? TS.ui.replies.populateReplyInput(t) : TS.utility.contenteditable.value(TS.client.ui.$msg_input, t);
            },
            u = TS.format.cleanMsg(t),
            m = !!i;
          if (TS.model.everyone_regex.test(u) && !m) return TS.permissions.members.canAtMentionEveryone() ? (d && d.is_member ? TS.generic_dialog.start({
            title: TS.i18n.t("Send {everyone} a message", "shared")({
              everyone: TS.templates.builders.atLabel("everyone")
            }),
            body: TS.i18n.t('<p class="bold">Would you like to switch to {general_channel} and send your message?</p><p class="">Using <strong>{everyone}</strong> in a message is a way to address your whole team, but it must be done in the {general_channel} channel.</p><p class="no_bottom_margin">If you just want to address everyone in this {conversation_or_channel}, use <strong>{channel}</strong> instead.</p>', "shared")({
              general_channel: "#" + _.escape(d.name),
              conversation_or_channel: s,
              everyone: TS.templates.builders.atLabel("everyone"),
              channel: TS.templates.builders.atLabel("channel")
            }),
            show_cancel_button: !0,
            show_go_button: !0,
            go_button_text: TS.i18n.t("Yes, send it", "shared")(),
            onGo: function() {
              TS.channels.displayChannel({
                id: d.id,
                and_send_txt: t
              });
            },
            onCancel: function() {
              TS.utility.contenteditable.value(TS.client.ui.$msg_input, t), TS.view.focusMessageInput();
            }
          }) : (l = "<p>" + TS.i18n.t("You cannot send <strong>{everyone}</strong> messages.", "shared")({
            everyone: TS.templates.builders.atLabel("everyone")
          }) + "</p>", TS.permissions.members.canAtChannelOrGroup() && (l += '<p class="no_bottom_margin">' + TS.i18n.t("If you just want to address everyone in this {conversation_or_channel}, use <strong>{at_label}</strong> instead.", "shared")({
            conversation_or_channel: s,
            at_label: TS.templates.builders.atLabel(o)
          }) + "</p>"), c(l)), !1) : (l = TS.permissions.members.canNonAdminsAtMentionEveryoneBySettings() ? "<p>" + TS.i18n.t("Usage of <strong>{everyone}</strong> is restricted to Team Admins in the large general channel.", "shared")({
            everyone: TS.templates.builders.atLabel("everyone")
          }) + "</p>" : "<p>" + TS.i18n.t("A Team Owner has restricted the use of <strong>{everyone}</strong> messages.", "shared")({
            everyone: TS.templates.builders.atLabel("everyone")
          }) + "</p>", TS.permissions.members.canAtChannelOrGroup(a.id) ? l += '<p class="no_bottom_margin">' + TS.i18n.t("If you just want to address everyone in this {conversation_or_channel}, use <strong>{at_label}</strong> instead.", "shared")({
            conversation_or_channel: s,
            at_label: TS.templates.builders.atLabel(o)
          }) + "</p>" : TS.model.user.is_restricted && (l = "<p>" + TS.i18n.t("Your account is restricted, and you cannot send <strong>{everyone}</strong> messages.", "shared")({
            everyone: TS.templates.builders.atLabel("everyone")
          }) + "</p>"), c(l), !1);
          var p = TS.model.here_regex.test(u);
          if (((TS.model.channel_regex.test(u) || TS.model.group_regex.test(u)) && !m || p) && !TS.permissions.members.canAtChannelOrGroup()) {
            var f = p ? TS.templates.builders.atLabel("here") : TS.templates.builders.atLabel("channel");
            return l = "<p>" + TS.i18n.t("A Team Owner has restricted the use of <strong>{key_word}</strong> messages.", "shared")({
              key_word: f
            }) + "</p>", c(l), !1;
          }
          return !m && TS.ui.needToShowAtChannelWarning(e, t) ? (TS.ui.at_channel_warning_dialog.startInMessagePane(e, t, n), !1) : TS.shared.sendMsg(e, t, n, i, r);
        },
        onHistory: function(e, t, n, i) {
          var r, a = e.msgs;
          t.is_limited && (TS.has_pri[k] && TS.log(k, 'data.is_limited case: setting has_more = false, is_limited = true for "' + e.id + '"', n), t.has_more = !1, e.is_limited = !0);
          var s;
          if (!e._history_fetched_since_last_connect)
            if (TS.has_pri[k] && TS.log(k, 'first history fetch for "' + e.id + '"', n), TS.client && TS.client.msg_pane && TS.client.msg_pane.maybeResetUnreadsCheck(e), n.oldest) {
              if (t.has_more) return e.msgs = [], d = {
                channel: e.id,
                count: TS.model.initial_msgs_cnt,
                inclusive: !0
              }, TS.has_pri[k] && TS.log(k, 'first history fetch. has_more is TRUE for "' + e.id + '" - dumping history and fetching most recent ' + TS.model.initial_msgs_cnt + " msgs. prior history call data follows.", n), i.fetchHistory(e, d), !0;
              TS.has_pri[k] && TS.log(k, 'first history fetch. has_more is false for "' + e.id + '" - we should have all recent msgs. Setting _history_fetched_since_last_connect.', n), e._history_fetched_since_last_connect = !0, e.history_is_being_fetched && (TS.has_pri[k] && TS.log(k, 'Resetting history_is_being_fetched for "' + e.id + '"'), e.history_is_being_fetched = !1), s = !0, TS.client && TS.client.msg_pane && TS.client.msg_pane.maybeStartNewMsgsTimer(e);
            } else {
              if (TS.boot_data.feature_scrollback_half_measures && TS.model.prefs.start_scroll_at_oldest) {
                var o = parseInt(e.last_read, 10) ? e.last_read : null;
                if (t.messages && o && !n._second_attempt_for_last_read) {
                  var l = _.minBy(t.messages, "ts");
                  if (l && l.ts > o) {
                    var d = {
                      channel: e.id,
                      count: 3 * TS.model.initial_msgs_cnt,
                      inclusive: !0,
                      _second_attempt_for_last_read: !0
                    };
                    return TS.has_pri[k] && TS.log(k, "last_read for " + e.id + " is older than the first history response, trying again with a larger count"), i.fetchHistory(e, d), !0;
                  }
                }
              }
              TS.has_pri[k] && TS.log(k, 'first history fetch. no "oldest" param for "' + e.id + '", marking _history_fetched_since_last_connect = true.', n), e._history_fetched_since_last_connect = !0, e.history_is_being_fetched && (TS.has_pri[k] && TS.log(k, 'Resetting history_is_being_fetched for "' + e.id + '"'), e.history_is_being_fetched = !1), s = !0, TS.client && TS.client.msg_pane && TS.client.msg_pane.maybeStartNewMsgsTimer(e);
            }
          n.oldest && t.has_more && (TS.info(e.id + " has more than one page of msg history between what is in cache and the latest, so let's dump what we have and just use this page of results"), TS.info(e.id + " args.oldest:" + n.oldest), a.length = 0, e.is_limited && (e.is_limited = !1));
          var c = [],
            u = [];
          if (t.messages) {
            for (var m = 0; m < t.messages.length; m += 1) TS.utility.msgs.getMsg(t.messages[m].ts, a) || (r = t.messages[m], c.push(TS.utility.msgs.processImsgFromHistory(r, e.id)), u.push(r.ts));
            TS.has_pri[k] && TS.log(k, 'got history for "' + e.id + '", added ' + c.length + " new messages out of " + t.messages.length + " total.");
          }
          if (c.length && !TS.utility.msgs.getDisplayedMsgs(c).length && TS.warn("no displayed msgs in this page for " + e.id + " ! We expect TS.client.ui.afterHistoryFetch to detect this and load another page"), a = c.concat(a), a = TS.utility.msgs.setMsgs(e, a), TS.has_pri[C] && TS.log(C, e.id + " msgs has more history now"), e.latest && e.latest.ts && !TS.utility.msgs.getMsg(e.latest.ts, a) && (TS.has_pri[C] && TS.log(C, "tacking on latest msg " + e.latest.ts), r = e.latest, TS.utility.msgs.appendMsg(a, TS.utility.msgs.processImsgFromHistory(r, e.id)), TS.utility.msgs.sortMsgs(a)), n.oldest || t.has_more || t.is_limited || TS.utility.msgs.setOldestMsgsTs(e), TS.shared.maybeDealWithAllSentTempMsgs(e, i), s) {
            TS.has_pri[k] && TS.log(k, "onHistory: post-message merge, doing recalc of unread counts for " + e.id);
            i.calcUnreadCnts(e, !1);
          }
          TS.boot_data.feature_lazy_pins && TS.pins && TS.pins.updateCount(e, t.pin_count);
        },
        maybeDealWithAllSentTempMsgs: function(e, t) {
          function i(n) {
            var i = TS.utility.msgs.getMsg(n, e.msgs);
            if (i) {
              var r = TS.utility.msgs.getNonTempMsgFromUserMatchingText(i.text, TS.model.user.id, e.msgs);
              if (r) {
                TS.interop.datetime.toDateObject(r.ts) < TS.interop.datetime.toDateObject(n) && (TS.info("existing_msg time is older than temp_msg time, so it can’t be the message we were looking for"), r = null);
              }
              return r ? (TS.info("removing temp_msg: " + i.ts + " existing_msg:" + r.ts), t || (t = TS.shared.getControllerForModelOb(e)), _.isFunction(t.removeMsg) && t.removeMsg(e.id, i), !0) : (TS.warn("not removing, we don’t appear to have this non-temp message: " + i.ts), TS.model.unsent_msgs[i.ts] = !0, void t.msg_not_sent_sig.dispatch(e, i));
            }
          }
          if (TS.useSocket())
            if (TS.isSocketManagerEnabled()) {
              if (!n.hasOwnProperty(e.id)) return;
              n[e.id].forEach(function(e) {
                i(e);
              }), delete n[e.id];
            } else _.forOwn(TS.ms.sent_map, function(t, n) {
              if (t.msg.channel == e.id) {
                i(t.temp_ts) && delete TS.ms.sent_map[n];
              }
            });
        },
        getControllerForModelOb: function(e) {
          return e ? e.is_im ? TS.ims : e.is_mpim ? TS.mpims : e.is_group ? TS.groups : TS.channels : {};
        },
        getActiveModelOb: function() {
          var e;
          return TS.client ? TS.model.active_channel_id ? e = TS.channels.getChannelById(TS.model.active_channel_id) : TS.model.active_im_id ? e = TS.ims.getImById(TS.model.active_im_id) : TS.model.active_mpim_id ? e = TS.mpims.getMpimById(TS.model.active_mpim_id) : TS.model.active_group_id && (e = TS.groups.getGroupById(TS.model.active_group_id)) : TS.boot_data.channel_id ? e = TS.channels.getChannelById(TS.boot_data.channel_id) : TS.boot_data.im_id ? e = TS.ims.getImById(TS.boot_data.im_id) : TS.boot_data.mpim_id ? e = TS.mpims.getMpimById(TS.boot_data.mpim_id) : TS.boot_data.group_id ? e = TS.groups.getGroupById(TS.boot_data.group_id) : (TS.warn("error getActiveModelOb found no ob"), TS.warn("TS.boot_data.channel_id: " + TS.boot_data.channel_id), TS.warn("TS.boot_data.im_id: " + TS.boot_data.im_id), TS.warn("TS.boot_data.group_id: " + TS.boot_data.group_id)), e;
        },
        getDisplayNameForModelOb: function(e) {
          if (e.is_mpim) return TS.mpims.getDisplayName(e);
          if (e.is_im) {
            return TS.members.getPrefCompliantMemberNameById(e.user, !1, !0);
          }
          return e.is_group || e.is_private ? e.name : e.is_channel ? "#" + e.name : (TS.warn("getDisplayNameForModelOb: unknown model_ob type: " + e.id), e.id);
        },
        getTypeForModelOb: function(e) {
          return e = e || TS.shared.getActiveModelOb(), e ? e.is_mpim ? "mpim" : e.is_slackbot_im ? "slackbot" : e.is_im ? "im" : e.is_group ? "group" : e.is_channel ? "channel" : "" : "";
        },
        getDisplayNameForModelObNoSigns: function(e) {
          if (e.is_mpim) return TS.mpims.getDisplayName(e);
          if (e.is_im) {
            return TS.members.getPrefCompliantMemberNameById(e.user, !1, !1);
          }
          return e.is_group || e.is_channel ? e.name : (TS.warn("getDisplayNameForModelOb: unknown model_ob type: " + e.id), e.id);
        },
        getEntitiesFilteredBy: function(e, t) {
          return e ? t ? _.filter(TS.model[e], t) : TS.model[e] : [];
        },
        getModelObById: function(e) {
          if (!e) return null;
          var t = e[0];
          return "C" === t ? TS.channels.getChannelById(e) : "G" === t ? TS.mpims.getMpimById(e) || TS.groups.getGroupById(e) : "S" === t ? TS.user_groups.getUserGroupsById(e) : "E" === t ? TS.emoji.getEmojiById(e) : "B" === t ? TS.bots.getBotById(e) : "U" === t || "W" === t ? TS.members.getMemberById(e) : TS.ims.getImById(e);
        },
        getAllModelObsForUser: function() {
          return TS.channels.getChannelsForUser().concat(TS.model.groups, TS.model.ims, TS.model.mpims);
        },
        getShareModelObId: function(e, t) {
          var n, i, r = function(e) {
            TS.model.archive_view_is_showing && TS.client.archives.current_model_ob.id == e && TS.client.archives.cancel();
          };
          e && TS.interop.utility.looksLikeMemberId(e) ? (n = TS.ims.getImByMemberId(e), n ? (e = n.id, r(e), t(e)) : TS.api.call("im.open", {
            user: e,
            return_im: !0,
            reason: "TS.shared.getShareModelObId"
          }, function(i, r, a) {
            i ? (TS.ims.onOpened(i, r, a), n = TS.ims.getImByMemberId(e), n ? t(n.id) : TS.web ? t(r.channel.id) : TS.error("getShareModelObId opened an IM, but it is not in the model? data.channel.id: " + r.channel.id)) : TS.error("getShareModelObId try to open an IM, but failed data: " + JSON.stringify(r || null));
          })) : e && "C" === e.charAt(0) ? (i = TS.channels.getChannelById(e), i.is_member || i.is_archived ? (r(e), t(e)) : TS.channels.joinById(i.id, function(n) {
            t(n ? e : e);
          })) : (r(e), t(e));
        },
        getModelObIdForSendingMsg: function(e, t) {
          var n, i;
          e && TS.interop.utility.looksLikeMemberId(e) ? (n = TS.ims.getImByMemberId(e), n ? (e = n.id, t(e)) : TS.api.call("im.open", {
            user: e,
            return_im: !0,
            reason: "TS.shared.getModelObIdForSendingMsg"
          }, function(i, r, a) {
            i ? (TS.ims.onOpened(i, r, a), n = TS.ims.getImByMemberId(e), n ? t(n.id) : TS.web ? t(r.channel.id) : TS.error("getModelObIdForSendingMsg opened an IM, but it is not in the model? data.channel.id: " + r.channel.id)) : TS.error("getModelObIdForSendingMsg try to open an IM, but failed data: " + JSON.stringify(r || null));
          })) : e && "C" === e.charAt(0) ? (i = TS.channels.getChannelById(e), i.is_member || i.is_archived ? t(e) : TS.channels.joinById(i.id, function(n) {
            t(n ? e : e);
          })) : t(e);
        },
        maybeMarkReadIfMuted: function(e) {
          if (e && TS.notifs.isCorGMuted(e.id) && e.unreads.length && !e.unread_highlights.length) {
            if ("hide_read_channels" === TS.model.prefs.sidebar_behavior) {
              if (TS.model.active_cid == e.id) return;
            } else if ("hide_read_channels_unless_starred" === TS.model.prefs.sidebar_behavior && !e.is_starred && TS.model.active_cid == e.id) return;
            e.is_mpim ? TS.mpims.markMostRecentReadMsg(e, TS.model.marked_reasons.muted) : e.is_group ? TS.groups.markMostRecentReadMsg(e, TS.model.marked_reasons.muted) : TS.channels.markMostRecentReadMsg(e, TS.model.marked_reasons.muted);
          }
        },
        markReadMsg: function(e, t, n) {
          var i = TS.shared.getModelObById(e),
            r = TS.shared.getControllerForModelOb(i);
          _.isFunction(r.markReadMsg) && r.markReadMsg(i.id, t, n);
        },
        moveLastMsgInput: function(e, t) {
          e.last_msg_input && (t.last_msg_input = e.last_msg_input, t.has_draft = !!t.last_msg_input, e.last_msg_input = "", e.has_draft = !!e.last_msg_input, TS.storage.storeLastMsgInput(e.id, e.last_msg_input), TS.storage.storeLastMsgInput(t.id, t.last_msg_input));
        },
        closeArchivedChannel: function(e) {
          var t = TS.shared.getModelObById(e);
          t && t.is_archived && (t.was_archived_this_session = !1, TS.client.activeChannelDisplayGoneAway());
        },
        getLastMsg: function(e) {
          if (!e.msgs || 0 === e.msgs.length) return null;
          for (var t = 0; t < e.msgs.length; t += 1)
            if (!TS.utility.msgs.isMsgHidden(e.msgs[t]) && !e.msgs[t].is_ephemeral) return e.msgs[t];
          return null;
        },
        sorterByLastMsg: function(e, t) {
          var n, i, r = e && TS.shared.getLastMsg(e),
            a = t && TS.shared.getLastMsg(t);
          if (r ? n = parseFloat(r.ts) : e && (n = TS.shared.getLatestMsgTs(e)) && (n = parseFloat(n)), a ? i = parseFloat(a.ts) : t && (i = TS.shared.getLatestMsgTs(t)) && (i = parseFloat(i)), n && i) {
            if (n > i) return -1;
            if (i > n) return 1;
          } else {
            if (n) return -1;
            if (i) return 1;
          }
          return 0;
        },
        hasUnreads: function(e) {
          if (!e) return !1;
          var t = TS.shared.getLatestMsgTs(e);
          return !!t && t > e.last_read;
        },
        checkForOldImsToClose: function() {
          var e, t, n, i, r, a = TS.model.ims,
            s = TS.model.mpims,
            o = a.concat(s),
            l = 0;
          for (r = 0; r < o.length; r += 1) e = o[r], (e.is_open || e.unread_cnt) && (l += 1);
          var d = l - 11;
          if (!(d < 1)) {
            TS.info("checkForOldImsToClose might close some. this_too_many:" + d);
            var c = [];
            for (r = 0; r < o.length; r += 1) e = o[r], e.is_slackbot_im || e.is_self_im || e.is_open && (e.unread_cnt || e.is_starred || e.opened_this_session || e != TS.shared.getActiveModelOb() && (t = TS.shared.getLatestMsgTs(e) || "", e.msgs && e.msgs.length && e.msgs[0] && e.msgs[0].ts > t && (t = e.msgs[0].ts), n = t ? TS.interop.datetime.toDateObject(t) : new Date(1e3 * e.created), (i = new Date - n) > 6048e5 && (TS.info(e.id + " " + n + " ms_since_activity:" + i + " allow_elapsed_ms:604800000"), c.push({
              model_ob: e,
              ms_since_activity: i
            }))));
            for (c.length || TS.info("checkForOldImsToClose found no candidates for closing"), c.sort(function(e, t) {
                var n = e.ms_since_activity,
                  i = t.ms_since_activity;
                return n < i ? 1 : n > i ? -1 : 0;
              }), c.length = c.length > d ? d : c.length, r = 0; r < c.length; r += 1) e = c[r].model_ob, TS.warn("checkForOldImsToClose CLOSING:" + e.id + " ms_since_activity:" + c[r].ms_since_activity), e.is_im ? TS.ims.closeIm(e.id) : e.is_mpim && TS.mpims.closeMpim(e.id);
          }
        },
        ensureModelObIsPresent: function(e) {
          return new Promise(function(t, n) {
            return e ? "string" != typeof e ? t() : void d(e).then(t, n) : t();
          });
        },
        getModelObIdsNotPresent: function(e) {
          return e.filter(function(e) {
            return !TS.shared.getModelObById(e);
          });
        },
        promiseToHaveAllRelevantImIds: function() {
          return e = e || new Promise(function(t, n) {
            TS.api.callImmediately("im.list").then(function(e) {
              e.data && e.data.ims && e.data.ims.length && (e.data.ims.forEach(function(e) {
                TS.utility.ensureInArray(TS.model.all_im_ids, e.id);
              }), TS.log(48, "TS.model.all_im_ids: " + TS.model.all_im_ids)), t();
            }, function(t) {
              e = null, n(t);
            });
          });
        },
        promiseToHaveAllRelevantGroupIds: function() {
          return t = t || new Promise(function(e, n) {
            TS.api.callImmediately("groups.list", {
              no_sort: !0
            }).then(function(t) {
              t.data && t.data.groups && t.data.groups.length && (t.data.groups.forEach(function(e) {
                TS.utility.ensureInArray(TS.model.all_group_ids, e.id);
              }), TS.log(48, "TS.model.all_group_ids: " + TS.model.all_group_ids)), e();
            }, function(e) {
              t = null, n(e);
            });
          });
        },
        ensureModelObsArePresent: function(e) {
          if (!e || !e.length) return Promise.resolve();
          var t = e.map(function(e) {
            return TS.shared.ensureModelObIsPresent(e).reflect();
          });
          return Promise.all(t).then(function(e) {
            var t = [];
            return e.forEach(function(e) {
              e.isFulfilled() || t.push(e.reason());
            }), t.length ? Promise.reject(new Error("some ensureModelObsArePresent c_ids failed:\n" + t.join("\n"))) : Promise.resolve();
          });
        },
        ensureModelObsInDataArePresent: function(e, t) {
          var n = TS.utility.extractAllModelObIds(e, t);
          return TS.shared.ensureModelObsArePresent(n);
        },
        getHistoryApiMethodForModelOb: function(e) {
          return e.is_mpim ? "mpim.history" : !e.is_group || e.is_private || _.startsWith(e.id, "C") ? e.is_im ? "im.history" : "channels.history" : "groups.history";
        },
        addMsg: function(e, t) {
          return l(e, [t]);
        },
        addMsgs: function(e, t) {
          if (l(e, t)) {
            var n = TS.shared.getControllerForModelOb(e);
            if (_.isFunction(n.calcUnreadCnts) && n.calcUnreadCnts(e, !1), TS.utility.msgs.maybeTruncateMsgs(e), TS.client)
              if (TS.model.active_cid !== e.id) TS.has_pri[k] && TS.log(k, 'Got message(s) for "' + e.id + '", but not active_cid "' + TS.model.active_cid + '" (yet.) NOT rebuilding.');
              else {
                TS.has_pri[k] && TS.log(k, "Got messages on active channel, rebuilding.");
                TS.client.msg_pane.rebuildMsgsWithReason("addMsgs: got messages on active channel " + e.id, !0);
              }
            return !0;
          }
          return !1;
        },
        kickMember: function(e, t) {
          if (e.is_channel || e.is_group && !e.is_mpim) {
            if (e.is_group) {
              if (!TS.permissions.members.canKickFromGroups()) return;
            } else if (!TS.permissions.members.canKickFromChannels()) return;
            var n = TS.members.getMemberById(t);
            if (n) {
              var i = TS.members.getPrefCompliantMemberName(n, !0, !0),
                r = TS.shared.getDisplayNameForModelOb(e);
              TS.membership.ensureChannelMembershipIsKnownForUsers(e.id, [t]).then(function() {
                if (!TS.membership.getUserChannelMembershipStatus(t, e).is_member) return TS.generic_dialog.alert(TS.i18n.t("<strong>{user_name}</strong> is not a member of {channel_name}.", "shared")({
                  user_name: i,
                  channel_name: r
                })), null;
                var a;
                a = e.is_group ? "<p>" + TS.i18n.t("If you remove <strong>{user_name}</strong> from {channel_name}, they will no longer be able to see any of its messages. To rejoin the private channel, they will have to be re-invited.</p><p>Are you sure you wish to do this?", "shared")({
                  user_name: i,
                  channel_name: r
                }) + "</p>" : "<p>" + TS.i18n.t("Are you sure you wish to remove <strong>{user_name}</strong> from {channel_name}?", "shared")({
                  user_name: i,
                  channel_name: r
                }) + "</p>";
                var s = e.is_group ? "groups.kick" : "channels.kick";
                return TS.generic_dialog.start({
                  title: TS.i18n.t("Remove {user_name}", "shared")({
                    user_name: i
                  }),
                  body: a,
                  go_button_text: TS.i18n.t("Yes, remove them", "shared")(),
                  onGo: function() {
                    TS.api.call(s, {
                      channel: e.id,
                      user: t
                    }).catch(function(e) {
                      TS.info("Removing user failed; api=" + s + "; error=" + e.data.error), setTimeout(function() {
                        var t = n.is_ultra_restricted ? TS.i18n.t("Single-channel guests", "shared")() : TS.i18n.t("Multi-channel guests", "shared")();
                        if ("cant_kick_from_last_channel" === e.data.error && TS.model.user.is_admin) return void TS.generic_dialog.start({
                          title: TS.i18n.t("Removing {member_display_name} failed", "shared")({
                            member_display_name: i
                          }),
                          body: TS.i18n.t("<p>{account_type} (like <strong>{member_display_name}</strong>) can’t be removed from channels.</p><p>If <strong>{member_display_name}</strong> should no longer have access to your Slack team, we suggest deactivating their account.</p>", "shared")({
                            account_type: t,
                            member_display_name: i
                          }),
                          go_button_text: TS.i18n.t("Manage Team Members", "shared")(),
                          show_cancel_button: !0,
                          onGo: function() {
                            TS.utility.openInNewTab("/admin#restricted", TS.templates.builders.newWindowName());
                          }
                        });
                        var a;
                        switch (e.data.error) {
                          case "cant_kick_from_last_channel":
                            a = TS.i18n.t("<p>{account_type} (like <strong>{member_display_name}</strong>) can’t be removed from channels.</p><p>Please contact a Team Admin if <strong>{member_display_name}</strong> should no longer have access to your Slack team.</p>", "shared")({
                              account_type: t,
                              member_display_name: i
                            });
                            break;
                          case "restricted_action":
                            a = TS.i18n.t("<p>Hmm, looks like you don’t have permission to kick from channels.</p><p>Please contact a Team Admin if <strong>{member_display_name}</strong> should no longer have access to your Slack team.</p>", "shared")({
                              member_display_name: i
                            });
                            break;
                          default:
                            a = TS.i18n.t("<p>Something’s gone wrong, and we couldn’t remove <strong>{member_display_name}</strong> from {channel}. We suspect this is only temporary. Try again in a bit?</p>", "shared")({
                              member_display_name: i,
                              channel: r
                            });
                        }
                        TS.generic_dialog.alert(a, TS.i18n.t("Removing {member_display_name} failed", "shared")({
                          member_display_name: i
                        }));
                      }, 500);
                    });
                  }
                }), null;
              });
            }
          }
        },
        maybeResetHistoryFetchedOnAll: function() {
          function e(e) {
            TS.shared.maybeResetHistoryFetched(e);
          }
          TS.client && (TS.has_pri[k] && TS.log(k, "maybeResetHistoryFetchedOnAll()"), _.forEach(TS.model.channels, e), _.forEach(TS.model.ims, e), _.forEach(TS.model.mpims, e), _.forEach(TS.model.groups, e));
        },
        maybeResetHistoryFetched: function(e) {
          if (TS.client) return e ? void(e._history_fetched_since_last_connect && (TS.has_pri[k] && e._history_fetched_since_last_connect && TS.log(k, 'resetting history_fetched_since_last_connect for "' + e.id + '"'), e._history_fetched_since_last_connect = !1)) : void TS.warn("maybeResetHistoryFetched: WTF no model_ob", e);
        },
        maybeClearHasAutoScrolled: function() {
          var e = TS.shared.getActiveModelOb();
          e && e._has_auto_scrolled && (TS.has_pri[k] && TS.log(k, 'resetting _has_auto_scrolled for "' + e.id + '"'), e._has_auto_scrolled = !1);
        },
        setPriorityForDev: function(e) {
          TS.boot_data.feature_sli_channel_priority && "dev" === TS.boot_data.version_ts && (e.priority || 0 === e.priority || (e.priority = TS.utility.strToApparentlyRndPerc(e.id)));
        },
        isModelObShared: function(e) {
          return !!_.isObject(e) && !(!e.is_shared || e.is_org_shared);
        },
        isModelObOrgShared: function(e) {
          return !!(e && TS.model && TS.model.team) && (TS.boot_data.page_needs_enterprise && e.is_org_shared);
        },
        isRelevantTeam: function() {
          var e = !0;
          if (!TS.model.is_our_app || !window.winssb) return e;
          if (!(TS.boot_data.page_needs_enterprise && TS.model.team && TS.model.team.enterprise_id && TS.boot_data.other_accounts)) return e;
          if (!window.winssb) return e;
          TS.has_pri[M] && TS.log(M, "isRelevantTeam()");
          var t = TS.model.enterprise_teams;
          if (1 === t.length) return e;
          var n, i = _.map(t, function(e) {
              return e.id;
            }),
            r = TSSSB.call("getLastActiveTeamIdForTeamIds", i);
          return TS.has_pri[M] && TS.log(M, "isRelevantTeam(): Got relevant team IDs from SSB", r), r instanceof Array && r.length ? (n = r[0], TS.has_pri[M] && TS.log(M, "isRelevantTeam(): Array case - taking the first relevant team id", n, r)) : TS.has_pri[M] && (TS.log(M, "isRelevantTeam(): relevant_team_ids is not an array, OR, is empty?", r), TS.log(M, "isRelevantTeam(): Electron did not provide any matches for the given team_ids", i)), n ? (TS.has_pri[M] && TS.log(M, "comparing most_relevant_team_id ( " + n + ") -> TS.model.team_id (" + TS.model.team.id + ")"), n === TS.model.team.id ? TS.has_pri[M] && TS.log(M, "isRelevantTeam(): " + TS.model.team.id + " is relevant. Including.") : (TS.has_pri[M] && TS.log(M, "isRelevantTeam(): " + TS.model.team.id + " is NOT relevant. Excluding."), e = !1), e) : (TS.has_pri[M] && TS.log(M, "Invalid response from SSB lastActiveTeamIdForTeamIds() call? Exiting."), e);
        },
        isRelevantTeamForSharedModelOb: function(e) {
          var t = !0;
          if (!e) return t;
          if (!window.winssb) return t;
          if (!(TS.boot_data.page_needs_enterprise && TS.model.team && TS.model.team.enterprise_id && TS.boot_data.other_accounts)) return t;
          if (!e.is_org_shared && !e.is_shared) return t;
          var n;
          if (TS.has_pri[M] && TS.log(M, "isRelevantTeamForSharedModelOb(): " + e.id), !(n = e.is_im || e.is_global_shared ? _.map(TS.model.enterprise_teams, "id") : e.shared_team_ids)) return TS.has_pri[M] && TS.log(M, "Could not find shared team IDs for " + e.id + "? Exiting."), t;
          var i, r = TSSSB.call("getLastActiveTeamIdForTeamIds", n);
          return TS.has_pri[M] && TS.log(M, "Got relevant team IDs from SSB", r), r instanceof Array && r.length ? (i = r[0], TS.has_pri[M] && TS.log(M, "Array case - taking the first relevant team id", i, r)) : (TS.has_pri[M] && TS.log(M, "relevant_team_ids is not an array, OR, is empty?", r), n && n.length ? (TS.has_pri[M] && TS.log(M, "we have enterprise_team_ids, looking there and taking the first item.", n), i = n[0]) : TS.has_pri[M] && TS.log(M, "WTF no enterprise_team_ids, either?")), i ? (TS.has_pri[M] && TS.log(M, "comparing most_relevant_team_id ( " + i + ") -> TS.model.team_id (" + TS.model.team.id + ")"), i === TS.model.team.id ? TS.has_pri[M] && TS.log(M, "Shared channel " + e.id + " is relevant for this team (" + TS.model.team.id + "). Including.") : (TS.has_pri[M] && TS.log(M, "Shared channel " + e.id + " is NOT relevant for this team (" + TS.model.team.id + "). Excluding."), t = !1), t) : (TS.has_pri[M] && TS.log(M, "Invalid response from SSB lastActiveTeamIdForTeamIds() call on " + e.id + "? Exiting."), t);
        },
        checkDisplayEmailAddressPref: function() {
          if (TS.client && TS.model.team && TS.model.team.prefs) {
            var e = 0,
              t = 0,
              n = 0;
            TS.model.members && _.each(TS.model.members, function(n) {
              n.is_bot && (t += 1), n && n.profile && n.profile.email && n.id !== TS.model.user.id && (e += 1);
            }), n = TS.model.members.length - t, TS.model.team.prefs.display_email_addresses ? e ? e / n < .5 && (TS.warn("Email display allowed for this team, but < 50% of non-bot members (" + e + "/" + n + ") in model have email fields. Dumping LS cache to correct inconsistency."), TS.shared.onDisplayEmailAddressesPrefChanged()) : (TS.info("Email display allowed for this team, but no email fields found in TS.model.members."), TS.shared.onDisplayEmailAddressesPrefChanged()) : e ? (TS.info("Email display hidden for this team, but found " + e + " email fields in TS.model.members."), TS.shared.onDisplayEmailAddressesPrefChanged()) : TS.info("Email display hidden for this team. Client model OK. ✓");
          }
        },
        onDisplayEmailAddressesPrefChanged: function() {
          if (TS.model && TS.model.team && TS.model.team.prefs) {
            TS.info('Team pref "display_email_addresses" -> ' + TS.model.team.prefs.display_email_addresses);
            var e = 0;
            if (TS.model.members && (TS.model.members = _.map(TS.model.members, function(t) {
                return t.profile && t.profile.email ? t.id === TS.model.user.id ? t : (e += 1, TS.model.team.prefs.display_email_addresses || (t.profile.email = void 0), t) : t;
              })), TS.model.team.prefs.display_email_addresses ? e || TS.info("display_email_addresses check: pref enabled, but 0 email fields found in TS.model.members.") : e ? TS.info("display_email_addresses check: found and cleared " + e + " email fields from TS.model.members.") : TS.info("display_email_addresses check: TS.model.members is already clear of email fields. ✓"), TS.storage) {
              TS.info("display_email_addresses check: clearing members from LS, disabling member/bot cache for remainder of session."), TS.storage.clearBufferAndCache();
              var t = [];
              TS.storage.storeMembers(t), TS.storage.disableMemberBotCache();
            }
            TS.client && TS.client.ui && !TS.model.ms_logged_in_once && TS.client.ui.rebuildAll(!1, !0);
          }
        }
      });
      var e, t, n = {},
        i = !1,
        r = {},
        a = {},
        s = {},
        o = {},
        l = function(e, t) {
          var n = !1;
          if (!e._history_fetched_since_last_connect) {
            var i;
            TS.has_pri[k] && (i = 'Defer case: First new message on "' + e.id + '" - '), t && t.length || TS.warn("_addMsgsWorker(" + e.id + "): WTF no msgs to add?"), e.is_im || e.is_mpim || e.msgs.length ? e.msgs.length ? e.history_is_being_fetched ? TS.pri && TS.log(58, i + "some history, history fetch is already underway - attaching " + t.length + " message(s) to model.") : e._history_fetched_since_last_connect || (TS.pri && TS.log(58, i + "some history, have not fetched history since last reconnect - attaching " + t.length + " new messages to model."), TS.shared.maybeFetchHistoryAndThenCheckConsistency(e)) : e.history_is_being_fetched ? TS.has_pri[k] && TS.log(k, i + "no history in model, but history is already pending - adding " + t.length + " message(s) to model.") : e._history_fetched_since_last_connect ? TS.pri && TS.has_pri[k] && TS.log(k, i + "Edge case - " + t.length + " new message(s) to add, but no history and we have called history, too?") : (TS.has_pri[k] && TS.log(k, i + "no history in model, no history call yet - fetching, and adding " + t.length + " message(s) to model."), TS.shared.maybeFetchHistoryAndThenCheckConsistency(e)) : TS.has_pri[k] && TS.log(k, i + "no history in model, no history call yet - waiting for calcUnreadCnts() which will trigger a delayed history fetch.");
          }
          return t = _.filter(t, function(t) {
            var n = t.ts && TS.utility.msgs.getMsg(t.ts, e.msgs);
            return n && TS.has_pri[k] && TS.log(k, "Not adding duplicate message " + t.ts + ", already in " + e.id), !n;
          }), t.length ? (TS.has_pri[k] && TS.log(k, "Adding " + (t.length > 1 ? "messages" : "message") + " to " + e.id), t.forEach(function(t) {
            TS.utility.msgs.validateMsg(e.id, t, e.msgs) && (n = !0, TS.utility.msgs.appendMsg(e.msgs, t));
          }), !!n && (TS.utility.msgs.sortMsgs(e.msgs), TS.utility.msgs.maybeSetOldestMsgsTsAfterMsgAdded(e), !0)) : (TS.has_pri[k] && TS.log(k, "No messages to add to " + e.id + " - exiting."), !1);
        },
        d = function(e) {
          if ("string" != typeof e) return Promise.reject(Error('c_id: "' + e + '" is not a String'));
          TS.has_pri[I] && TS.log(I, '_getModelObByIdFromModelOrApi c_id: "' + e + '"');
          var t = TS.shared.getModelObById(e);
          return t ? Promise.resolve(t) : "C" === e.charAt(0) ? c(e) : "G" === e.charAt(0) ? TS.shared.promiseToHaveAllRelevantGroupIds().then(function() {
            return -1 == TS.model.all_group_ids.indexOf(e) ? (TS.maybeWarn(48, "c_id:" + e + " is not in TS.model.all_group_ids, not calling the API"), Promise.resolve()) : c(e);
          }).catch(function(t) {
            return t && "groups.list" === t.method ? c(e) : Promise.reject(t);
          }) : TS.shared.promiseToHaveAllRelevantImIds().then(function() {
            return -1 == TS.model.all_im_ids.indexOf(e) ? (TS.maybeWarn(48, "c_id:" + e + " is not in TS.model.all_im_ids, not calling the API"), Promise.resolve()) : c(e);
          }).catch(function(t) {
            return t && "im.list" === t.method ? c(e) : Promise.reject(t);
          });
        },
        c = function(e) {
          return TS.has_pri[I] && TS.log(I, '_getModelObByIdFromApi c_id: "' + e + '"'), new Promise(function(t, n) {
            var i = TS.model.incrementUnknownIdHandled(e);
            if ("C" === e.charAt(0)) {
              var r = {
                channel: e
              };
              TS.membership && TS.membership.lazyLoadChannelMembership() && (r.no_members = !0), TS.api.callImmediately("channels.info", r).then(function(n) {
                t(TS.channels.upsertChannel(n.data.channel)), TS.model.reportResultOfUnknownIdHandled(e, !0);
              }, function(r) {
                if (TS.boot_data.page_needs_enterprise && r.data && r.data.error && "channel_not_found" === r.data.error) return TS.maybeWarn(98765, "_getModelObByIdFromApi called for a channel but it is not found for enterprise. Channel:", e), t(), void TS.model.reportResultOfUnknownIdHandled(e, !0);
                n(Error((r.data && r.data.error || "unknown error") + " try #" + i + " calling channels.info with channel:" + e)), TS.model.reportResultOfUnknownIdHandled(e, !1);
              });
            } else "G" === e.charAt(0) ? TS.api.callImmediately("groups.info", {
              channel: e
            }).then(function(n) {
              t(n.data.group.is_mpim ? TS.mpims.upsertMpim(n.data.group) : TS.groups.upsertGroup(n.data.group)), TS.model.reportResultOfUnknownIdHandled(e, !0);
            }, function(t) {
              n(Error((t.data && t.data.error || "unknown error") + " try #" + i + " calling groups.info with channel:" + e)), TS.model.reportResultOfUnknownIdHandled(e, !1);
            }) : TS.api.callImmediately("im.info", {
              channel: e
            }).then(function(n) {
              t(TS.ims.upsertIm(n.data.im)), TS.model.reportResultOfUnknownIdHandled(e, !0);
            }, function(t) {
              n(Error((t.data && t.data.error || "unknown error") + " try #" + i + " calling im.info with channel:" + e)), TS.model.reportResultOfUnknownIdHandled(e, !1);
            });
          });
        },
        u = null,
        m = function(e) {
          var t = TS.client.activeChannelIsHidden() ? null : TS.shared.getActiveModelOb(),
            n = u;
          if (n && n.id && f(n), t && t.id) {
            p(t, e);
            "D" === t.id.charAt(0) && T(t);
          }
          u = t;
        },
        p = function(e, t) {
          var n = e.id,
            i = n.charAt(0),
            r = {
              channel_id: n,
              channel_type: i,
              is_boot: !!t,
              unread_channel_ids: h(),
              mentioned_channel_ids: g()
            };
          t || (r.num_unreads = e.unread_cnt), TS.clog.track("CHANNEL_SWITCHED", r);
        },
        f = function(e) {
          var t = e.id,
            n = t.charAt(0),
            i = {
              channel_id: t,
              channel_type: n
            };
          TS.clog.track("CHANNEL_SWITCHED_OUT", i);
        },
        h = function() {
          return S(function(e) {
            return e.unread_cnt > 0;
          });
        },
        g = function() {
          return S(function(e) {
            return e.unread_highlight_cnt > 0;
          });
        },
        S = function(e) {
          if (!TS.model) return [];
          var t = [],
            n = function(e) {
              return e.id;
            };
          return TS.model.channels && (t = t.concat(_.map(_.filter(TS.model.channels, e), n))), TS.model.groups && (t = t.concat(_.map(_.filter(TS.model.groups, e), n))), TS.model.ims && (t = t.concat(_.map(_.filter(TS.model.ims, e), n))), t;
        },
        T = function(e) {
          var t = e.id,
            n = {},
            i = TS.ims.getImById(t),
            r = i ? TS.members.getMemberById(i.user) : null;
          if (r && r.is_bot) {
            var a = r.profile.bot_id,
              s = TS.bots.getBotById(a);
            n.app_id = s ? s.app_id : "", n.bot_id = a;
          }
          TS.clog.track("DM_OPEN", n);
        },
        b = function() {
          m(!0);
        },
        v = {},
        y = function(e) {
          TS.log(1989, "Flannel: seeing if usernames might reference users we have not loaded yet: ", e.join(", "));
          var t = e.map(function(e) {
            return v[e] = !0, TS.flannel.fetchAndUpsertObjectsWithQuery(e).catch(_.noop);
          });
          return Promise.all(t);
        },
        w = function(n) {
          n || (e = null, t = null);
        },
        k = 58,
        x = 99,
        M = 1701,
        C = 4,
        I = 529;
    }();
  },
  2518: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("signup", {
        ERROR_BAD_EMAIL_DOMAIN: "bad_email_domain",
        ERROR_DOMAIN_NOT_FOUND: "domain_not_found",
        ERROR_INVALID_CODE: "invalid_code",
        ERROR_MISC: "misc",
        ERROR_MISSING_ARGS: "missing_args",
        ERROR_MISSING_USERNAME: "missing_username",
        ERROR_NO_EMAIL: "no_email",
        ERROR_NO_EMAIL_MISC: "no_email_misc",
        ERROR_NO_TEAM_NAME: "no_team_name",
        ERROR_NO_URL: "no_url",
        ERROR_NO_USERNAME: "no_username",
        ERROR_RATELIMITED: "ratelimited",
        ERROR_URL_BAD: "url_bad",
        ERROR_URL_LONG: "url_long",
        ERROR_URL_NO_LETTER: "url_no_letter",
        ERROR_URL_START_END_DASH: "url_start_end_dash",
        ERROR_URL_TAKEN: "url_taken",
        ERROR_USERNAME_BAD: "username_bad",
        ERROR_USERNAME_LONG: "username_long",
        ERROR_USERNAME_NOT_ALLOWED: "username_not_allowed",
        ERROR_USERNAME_START: "username_start",
        ERROR_USERNAME_TAKEN: "username_taken",
        ERROR_NAME_IS_SLACKBOT: "name_is_slackbot",
        onStart: function() {
          e = window.callSlackAPIUnauthed ? window.callSlackAPIUnauthed : TS.api.call;
        },
        isBadSignupDomain: function(t) {
          return void 0 !== d[t] ? Promise.resolve(d[t]) : new Promise(function(n) {
            e("signup.checkEmailDomain", {
              domain: t
            }, function(e, i) {
              d[t] = !i.ok, n(!i.ok);
            });
          });
        },
        checkEmail: function(e, t) {
          var n = TS.utility.email.validateEmail(e, 1);
          if (!n.is_valid) return Promise.resolve({
            is_valid: !1,
            error_key: n.error_key,
            error_message: n.error_message
          });
          t = t || {};
          var i = t.timeout || 2e3,
            r = e.split("@")[1];
          t.get_info = t.get_info && void 0 === c[r];
          var a = t.get_info;
          if (a && i) {
            var s, o, l;
            return m(e, r, t).then(function(e) {
              o || (o = !0, s(e), clearInterval(l));
            }), l = setTimeout(function() {
              o || m(e, r).then(function(e) {
                o || (o = !0, s(e));
              });
            }, i), new Promise(function(e) {
              s = e;
            });
          }
          return m(e, r, {
            get_info: a
          });
        },
        verifyEmailConfirmationCode: function(t, n) {
          var i = {
            email: t,
            code: n
          };
          return new Promise(function(t) {
            e("signup.confirmCode", i, function(e, n) {
              if (e) return t({
                is_valid: !0,
                api_response: n
              });
              var i = n.error;
              return "failed" === i && (i = TS.signup.ERROR_INVALID_CODE), t({
                is_valid: !1,
                error_key: i,
                error_message: TS.signup.getErrorMessage(i)
              });
            });
          });
        },
        checkUsernameSyntax: function(e) {
          var t;
          return e && e.length ? e.length > i ? t = TS.signup.ERROR_USERNAME_LONG : o.test(e) ? l.test(e) || (t = TS.signup.ERROR_USERNAME_START) : t = TS.signup.ERROR_USERNAME_BAD : t = TS.signup.ERROR_MISSING_USERNAME, t ? {
            is_valid: !1,
            error_key: t,
            error_message: TS.signup.getErrorMessage(t)
          } : {
            is_valid: !0
          };
        },
        checkUsernameAvailability: function(n, i) {
          var r = TS.signup.checkUsernameSyntax(n);
          if (!r.is_valid) return Promise.resolve({
            is_valid: !1,
            error_key: r.error_key,
            error_message: r.error_message
          });
          var a = {
            username: n
          };
          return i = i || {}, i.team_id && (a.team_id = i.team_id), i.lead_id && (a.lead_id = i.lead_id), new Promise(function(r) {
            e("signup.checkUsername", a, function(e, a) {
              if (e) return r({
                is_valid: !0
              });
              var s, o = a.error;
              a.error === TS.signup.ERROR_USERNAME_NOT_ALLOWED ? s = t[o]({
                username: _.escape(n)
              }) : "taken" === a.error && (o = TS.signup.ERROR_USERNAME_TAKEN);
              var l = {
                is_valid: !1,
                error_key: o,
                error_message: s || TS.signup.getErrorMessage(o)
              };
              return i.get_suggestions ? i.email ? void TS.signup.suggestUsernameFromEmail(i.email).then(function(e) {
                return e.has_suggestion && (l.has_suggestion = !0, l.suggestion = e.username), r(l);
              }) : (TS.warn("TS.signup.checkUsernameAvailability can only try to get username suggestions when options.email is set"), r(l)) : r(l);
            });
          });
        },
        suggestUsernameFromEmail: function(e, t) {
          var n = e.toLocaleLowerCase().match(/^[a-z0-9]+/gi);
          return n && (n = n[0]), !n || n.length > i ? Promise.resolve({
            has_suggestion: !1
          }) : new Promise(function(e) {
            t = t || {};
            var i = {
              lead_id: t.lead_id,
              get_suggestions: !1
            };
            TS.signup.checkUsernameAvailability(n, i).then(function(t) {
              return e(t.is_valid ? {
                has_suggestion: !0,
                username: n
              } : {
                has_suggestion: !1
              });
            });
          });
        },
        checkNameSyntax: function(e) {
          if (e && "slackbot" === e.toLocaleLowerCase()) {
            var t = TS.signup.ERROR_NAME_IS_SLACKBOT;
            return {
              is_valid: !1,
              error_key: t,
              error_message: TS.signup.getErrorMessage(t)
            };
          }
          return {
            is_valid: !0
          };
        },
        checkURLSyntax: function(e) {
          var t;
          return e.length > n ? t = TS.signup.ERROR_URL_LONG : r.test(e) ? s.test(e) ? t = TS.signup.ERROR_URL_START_END_DASH : a.test(e) || (t = TS.signup.ERROR_URL_NO_LETTER) : t = TS.signup.ERROR_URL_BAD, t ? {
            is_valid: !1,
            error_key: t,
            error_message: TS.signup.getErrorMessage(t)
          } : {
            is_valid: !0
          };
        },
        checkURLAvailability: function(t, n, i) {
          if (!t || !n) return TS.error("TS.signup.checkURLAvailability missing arguments"), Promise.resolve({
            is_valid: !1,
            error_key: TS.signup.ERROR_MISSING_ARGS,
            error_message: TS.signup.getErrorMessage(TS.signup.ERROR_MISSING_ARGS)
          });
          var r = TS.signup.checkURLSyntax(t);
          if (!r.is_valid) return Promise.resolve({
            is_valid: !1,
            error_key: r.error_key,
            error_message: r.error_message
          });
          var a = {
            email: n,
            url: t
          };
          return i = i || {}, i.lead_id && (a.lead_id = i.lead_id), new Promise(function(r) {
            e("signup.checkURL", a, function(e, a) {
              if (e) return r({
                is_available: !0
              });
              if ("ratelimited" === a.error) return r({
                error_key: TS.signup.ERROR_RATELIMITED,
                error_message: TS.signup.getErrorMessage(TS.signup.ERROR_RATELIMITED)
              });
              "bad" === a.error && (a.error = TS.signup.ERROR_URL_BAD), "taken" === a.error && (a.error = TS.signup.ERROR_URL_TAKEN);
              var s = {
                is_available: !1,
                error_key: a.error,
                error_message: TS.signup.getErrorMessage(a.error)
              };
              if (!i.get_suggestions) return r(s);
              TS.signup.suggestURL(t, n).then(function(e) {
                return s.available = e.available, s.unavailable = e.unavailable, r(s);
              });
            });
          });
        },
        suggestURL: function(t, n) {
          if (!t || !n) return TS.error("TS.signup.suggestURL missing arguments"), Promise.resolve({
            error_key: TS.signup.ERROR_MISSING_ARGS,
            error_message: TS.signup.getErrorMessage(TS.signup.ERROR_MISSING_ARGS)
          });
          var i = {
            email: n,
            url: t
          };
          return new Promise(function(t) {
            e("signup.suggestURL", i, function(e, n) {
              return t(e ? {
                available: n.available,
                unavailable: n.unavailable
              } : {
                error_key: n.error
              });
            });
          });
        },
        createTeam: function(n) {
          return u ? Promise.resolve(!1) : (u = !0, new Promise(function(i) {
            e("signup.createTeam", n, function(e, r) {
              if (u = !1, e) return i({
                team_created: !0,
                signin_url: r.url,
                user_id: r.user_id,
                team_id: r.team_id,
                team_id_raw: r.team_id_raw,
                api_token: r.api_token,
                valid_signup_domain: r.valid_signup_domain
              });
              var a;
              if (r.error === TS.signup.ERROR_BAD_EMAIL_DOMAIN && TS.utility.email_regex.test(n.email)) {
                var s = _.escape(n.email.split("@")[1]);
                a = t[r.error]({
                  email_domain: s
                });
              }
              return i({
                team_created: !1,
                error_key: r.error,
                error_message: a || TS.signup.getErrorMessage(r.error)
              });
            });
          }));
        },
        getErrorMessage: function(e, n) {
          return (t[e] || t[TS.signup.ERROR_MISC])(n || {});
        },
        test: function() {
          return {
            error_messages: t
          };
        }
      });
      var e, t = {
          bad_email_domain: TS.i18n.t("Sorry, but we do not allow signups from @{email_domain}. Please pick a different email address!", "signup"),
          domain_not_found: TS.i18n.t("Are you sure that address is typed correctly? If there are no mistakes, carry on!", "signup"),
          invalid_code: TS.i18n.t("That code wasn’t valid. Give it another go!", "signup"),
          missing_username: TS.i18n.t("Please fill in a username.", "signup"),
          name_is_slackbot: TS.i18n.t("Sorry, slackbot is a reserved word. Try something else!", "signup"),
          misc: TS.i18n.t("For some weird reason, that didn’t work. Please try again to continue.", "signup"),
          no_email: TS.i18n.t("For some really weird reason, we’re having trouble with your email. Please try again.", "signup"),
          no_email_misc: TS.i18n.t("For some really weird reason, we’re having trouble with your email preferences. Please try again.", "signup"),
          no_team_name: TS.i18n.t("For some really weird reason, we’re having trouble with your team name. Please try again.", "signup"),
          no_url: TS.i18n.t("For some reason, we’re having trouble with your team URL. Please try again.", "signup"),
          no_username: TS.i18n.t("For some really weird reason, we’re having trouble with your username. Please try again.", "signup"),
          ratelimited: TS.i18n.t("Sorry, you’ve hit the rate limit. You’ll be able to try again soon.", "signup"),
          url_bad: TS.i18n.t("Team URLs can only have letters, numbers, and dashes.", "signup"),
          url_long: TS.i18n.t("Please enter up to 21 characters for your Team URL.", "signup"),
          url_no_letter: TS.i18n.t("Please enter at least one letter for your Team URL.", "signup"),
          url_start_end_dash: TS.i18n.t("Team URLs can’t start or end with a dash. Sorry!", "signup"),
          url_taken: TS.i18n.t("This URL is not available. Sorry!", "signup"),
          username_bad: TS.i18n.t("Sorry, usernames can only contain letters, numbers, periods, hyphens, and underscores, with no spaces!", "signup"),
          username_long: TS.i18n.t("Usernames cannot be longer than 21 characters.", "signup"),
          username_not_allowed: TS.i18n.t("Oops, sorry! Your username can’t be {username}, as it’s reserved for other uses.", "signup"),
          username_start: TS.i18n.t("Sorry, usernames must begin with a letter or number!", "signup"),
          username_taken: TS.i18n.t("Sorry, but this username is not available! Please pick another one.", "signup")
        },
        n = 21,
        i = 21,
        r = new RegExp("^[a-z0-9-]+$", "i"),
        a = new RegExp("[a-z]", "i"),
        s = new RegExp("(^[-])|(.*[-])$", "i"),
        o = new RegExp("^[a-z0-9-._]+$", "i"),
        l = new RegExp("^[a-z0-9][a-z0-9-._]*$", "i"),
        d = {},
        c = {},
        u = !1,
        m = function(n, i, r) {
          var a = r && r.get_info,
            s = {
              email: n,
              get_info: a
            };
          return new Promise(function(n) {
            e("signup.checkEmail", s, function(e, r) {
              if (e) return n({
                is_ok: !0,
                api_response: r
              });
              var s;
              return r.error === TS.signup.ERROR_BAD_EMAIL_DOMAIN ? s = t[r.error]({
                email_domain: i
              }) : r.error === TS.signup.ERROR_DOMAIN_NOT_FOUND ? c[i] = !1 : a && (c[i] = !0), n({
                is_ok: !1,
                error_key: r.error,
                error_message: s || TS.signup.getErrorMessage(r.error)
              });
            });
          });
        };
    }();
  },
  2519: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("sli_expert_search", {
        is_expanded: !1,
        last_query: "",
        last_api_response: {},
        sli_expert_search_group: null,
        sli_expert_search_debug_group: null,
        onStart: function() {
          TS.client && TS.experiment.loadUserAssignments().then(function() {
            TS.sli_expert_search.sli_expert_search_group = TS.experiment.getGroup("sli_expert_search"), TS.sli_expert_search.sli_expert_search_debug_group = TS.experiment.getGroup("sli_expert_search_debug");
          });
        },
        isEnabled: function() {
          return "show_experts" === TS.sli_expert_search.sli_expert_search_group;
        },
        render: function(i, r, a) {
          TS.sli_expert_search.last_api_response = {
            experts: r,
            channels: a
          }, TS.sli_expert_search.last_query !== i && (TS.sli_expert_search.is_expanded = !1, TS.sli_expert_search.last_query = i);
          var s = "",
            o = _(r).map(function(e) {
              return _.map(e.users, function(e) {
                return TS.members.getMemberById(e.id);
              });
            }).flatten().uniqBy("id").value(),
            l = o.length,
            d = o.length > 4;
          o = _.take(o, 4);
          var c = _.map(r, function(r, a) {
            if ("order" !== a) {
              var s = _.map(r.users, function(e) {
                  return TS.members.getMemberById(e.id);
                }),
                o = _.map(r.channels, function(e) {
                  return TS.channels.getChannelById(e.id);
                });
              return {
                users: s,
                faces: _.take(s, 2),
                description: e(s, o),
                channels: o,
                partial_terms: !t(i, r.terms),
                terms: n(i, r.terms)
              };
            }
          });
          c = _.compact(c);
          var u = [];
          if (!_.isEmpty(a)) {
            var m = _.map(a, function(e, t) {
              if ("order" !== t) {
                var n = TS.channels.getChannelById(e.id);
                return TS.templates.builders.makeChannelLink(n);
              }
            });
            m = _.compact(m), u.push({
              channels: new Handlebars.SafeString(TS.i18n.listify(m, {
                no_escape: !0
              }).join(""))
            });
          }
          return s += TS.templates.sli_expert_search_results({
            query: i,
            users: o,
            user_count: l,
            show_plus_sign_on_last_face: d,
            terms: i,
            results: c,
            channel_matches: u,
            expanded: TS.sli_expert_search.is_expanded,
            debug: "sli_expert_search_debug" === TS.sli_expert_search.sli_expert_search_debug_group
          });
        },
        toggleExpand: function() {
          TS.sli_expert_search.is_expanded = !TS.sli_expert_search.is_expanded, $("[data-js=sli_expert_search]").toggleClass("sli_expert_search--collapsed", !TS.sli_expert_search.is_expanded), TS.clog.track(TS.sli_expert_search.is_expanded ? "SEARCH_OPEN" : "SEARCH_CLOSE", {
            request_id: TS.search.last_request_id,
            open_method: TS.sli_expert_search.is_expanded ? "experts_expand" : "experts_collapse"
          });
        },
        handleExpertsClick: function(e, t, n) {
          var i, r, a;
          r = $(e.target).parents("[data-expert-search-group-index]").data("expert-search-group-index"), "experts" === t ? "user" === n ? (i = $(e.target).parents(".sli_expert_search__description").find(".member").index(e.target), a = _.get(TS.sli_expert_search.last_api_response, ["experts", r, "users", i, "iid"])) : (i = $(e.target).parents(".sli_expert_search__description").find(".channel_link").index(e.target), a = _.get(TS.sli_expert_search.last_api_response, ["experts", r, "channels", i, "iid"])) : "channels" === t && "channel" === n && (i = $(e.target).parents(".sli_expert_search__result").find(".channel_link").index(e.target), a = _.get(TS.sli_expert_search.last_api_response, ["channels", i, "iid"]));
          var s = {
            request_id: TS.search.last_request_id,
            click_iid: a,
            click_target_type: "experts_" + n,
            click_module_name: t,
            click_module_position: TS.sli_expert_search.last_api_response[t].order,
            click_sort: "timestamp",
            click_position: r
          };
          s["click_" + n + "_id"] = $(e.target).data(("user" === n ? "member" : "channel") + "-id"), a && TS.clog.track("SEARCH_CLICK", s);
        }
      });
      var e = function(e, t) {
          var n = _.map(e, TS.templates.builders.makeMemberPreviewLink),
            i = TS.i18n.listify(n, {
              no_escape: !0
            }).join(""),
            r = _.map(t, function(e) {
              return TS.templates.builders.makeChannelLink(e);
            }),
            a = TS.i18n.listify(r, {
              strong: !0,
              no_escape: !0
            }).join("");
          return TS.i18n.t("{user_link_text} in {channel_link_text}", "search")({
            user_link_text: i,
            channel_link_text: a
          });
        },
        t = function(e, t) {
          return _(e).split(" ").map(function(e) {
            return t[e];
          }).every(Boolean);
        },
        n = function(e, t) {
          return _.map(e.split(" "), function(e) {
            return {
              word: e,
              present: t[e]
            };
          });
        };
    }();
  },
  2520: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("sorter", {
        onStart: function() {},
        search: function(e, t, n) {
          return l(e, t, n);
        },
        printTest: function(e, t) {
          var n, i, r, a = TS.members.getActiveMembersWithSlackbotAndNotSelf(),
            s = _.values(TS.boot_data.other_accounts),
            o = TS.user_groups.getActiveUserGroups(),
            l = TS.model.emoji_map,
            d = TS.utility.members.getBroadcastKeywordsForUser(),
            c = TS.model.NAMED_VIEWS;
          TS.useRedux() ? (n = _.reject(TS.redux.channels.dangerouslyGetChannelsForUser(), "is_archived"), i = _.reject(TS.redux.channels.dangerouslyGetGroups(), "is_archived"), r = TS.mpims.getVisibleMpims(TS.redux.channels.dangerouslyGetMpims())) : (n = TS.channels.getUnarchivedChannelsForUser(), i = TS.groups.getUnarchivedGroups(), r = TS.mpims.getVisibleMpims());
          var u = {
            members: a,
            channels: n,
            groups: i,
            mpims: r,
            teams: s,
            usergroups: o,
            emoji: l,
            broadcast_keywords: d,
            views: c
          };
          TS.sorter.search(e, u, _.extend({
            print: !0
          }, t));
        },
        test: function() {
          var e = {
            sortFuzzy: u,
            frecencyBonusPoints: m,
            getFilteredMatchesForFrecency: d,
            scoreMember: a,
            _scoreUserGroup: s,
            getSubQueryMatchers: t
          };
          return Object.defineProperty(e, "_meta_fields", {
            get: function() {
              return n;
            },
            set: function(e) {
              n = e;
            }
          }), e;
        }
      });
      var e = function(e, n) {
          var r = null != n.fuzzy_limit ? n.fuzzy_limit : 10;
          e = TS.i18n.deburr(e.toLocaleLowerCase());
          var l = "@" === e.charAt(0),
            d = "#" === e.charAt(0),
            c = ":" === e.charAt(0);
          (l || d || c) && (e = e.substring(1));
          var u = {
              fuzzy_limit: r
            },
            m = {
              fuzzy_limit: r,
              search_forward_only: !0
            },
            p = {
              fuzzy_limit: r,
              substrings_only: !0
            },
            f = TS.fuzzy.makeFuzzyMatcher(e, u),
            h = TS.fuzzy.makeFuzzyMatcher(e, m),
            g = t(e, m),
            S = TS.fuzzy.makeFuzzyMatcher(e, p);
          return {
            query: e,
            only_channels: d,
            only_members: l,
            only_emoji: c,
            matchesChannel: function(t) {
              if (l || c) return !1;
              if ((n.allow_empty_query || d) && !e) return i(t.id, "jumper_score", 0), !0;
              var a = f.score(t.name_normalized || t.name);
              if (i(t.id, "jumper_score", a), n.search_previous_channel_names && t.previous_names && t.previous_names.length) {
                var s = _.map(t.previous_names, function(e) {
                  return {
                    score: f.score(e),
                    name: e
                  };
                });
                i(t.id, "jumper_previous_name_scores", s);
                var o = _.some(s, function(e) {
                  return e.score <= r;
                });
                if (o && a > r) {
                  var u = _.minBy(s, "score");
                  t._jumper_previous_name_match = u && u.name;
                } else t._jumper_previous_name_match = null;
                return a <= r || o;
              }
              return a <= r;
            },
            matchesGroup: function(t) {
              if (d || l || c) return !1;
              if (n.allow_empty_query && !e) return i(t.id, "jumper_score", 0), !0;
              var a = f.score(t.name_normalized || t.name);
              return i(t.id, "jumper_score", a), a <= r;
            },
            matchesMember: function(t) {
              if (d || c) return !1;
              if ((n.allow_empty_query || l) && !e) return i(t.id, "jumper_score", 0), !0;
              var s = a(t, h, e, l);
              return i(t.id, "jumper_score", s), s <= r;
            },
            matchesMpim: function(t) {
              if (d || l || c) return !1;
              if (n.allow_empty_query && !e) return i(t.id, "jumper_score", 0), !0;
              var s = TS.mpims.getMembersInDisplayOrder(t),
                o = g.map(function(e) {
                  var t = s.map(function(t) {
                    return a(t, e);
                  });
                  return _.min(t);
                }),
                u = _.sum(o);
              return i(t.id, "jumper_score", u), u <= r;
            },
            matchesTeam: function(e) {
              if (d || l || c) return !1;
              var t = f.score(e.team_name.toLocaleLowerCase());
              return i(e.id, "jumper_score", t), t <= r;
            },
            matchesUserGroup: function(t) {
              if (d || c) return !1;
              if ((n.allow_empty_query || l) && !e) return i(t.id, "jumper_score", 0), !0;
              var a = s(t, f);
              return i(t.id, "jumper_score", a), a <= r;
            },
            matchesEmoji: function(t) {
              if (d || l) return !1;
              if (n.allow_empty_query && !e) return i(t.id, "jumper_score", 0), !0;
              var a = TS.i18n.deburr(t.display_name || t.name),
                s = S.score(a);
              if (t.display_name && t.display_name !== t.name) {
                var o = S.score(t.name);
                o < s && (s = o);
              }
              return i(t.id, "jumper_score", s), s <= r;
            },
            matchesBroadcastKeyword: function(t) {
              if (d || c) return !1;
              if ((n.allow_empty_query || l) && !e) return i(t.id, "jumper_score", 0), !0;
              var a = o(t, f);
              return i(t.id, "jumper_score", a), a <= r;
            },
            matchesView: function(e) {
              if (d || c) return !1;
              var t = f.score(e.name.toLocaleLowerCase());
              return 1 / 0 === t && e.alt_names && (t = _.reduce(e.alt_names, function(e, t) {
                return Math.min(e, f.score(t.toLocaleLowerCase()));
              }, t)), i(e.id, "jumper_score", t), t <= r;
            }
          };
        },
        t = function(e, t) {
          return e.split(/[,| ]/).filter(function(e) {
            return !!e;
          }).map(function(e) {
            return e = "@" === e.charAt("0") ? e.substring(1) : e, TS.fuzzy.makeFuzzyMatcher(e, t);
          });
        },
        a = function(e, t, n, i) {
          var r;
          if (TS.utility.queryIsMaybeSelf(n) && e.is_self) return 0;
          if (TS.boot_data.feature_name_tagging_client) {
            var a = 1 / 0,
              s = 1 / 0,
              o = 1 / 0,
              l = 1 / 0;
            a = t.score(e._real_name_lc), e._real_name_lc !== e._real_name_normalized_lc && (s = t.score(e._real_name_normalized_lc)), e._display_name_lc && (o = t.score(e._display_name_lc), e._display_name_lc !== e._display_name_normalized_lc && (l = t.score(e._display_name_normalized_lc))), r = Math.min(a, s, o, l);
          } else {
            var d = 1 / 0,
              c = 1 / 0,
              _ = 1 / 0;
            d = t.score(e.name), e._real_name_lc && !i && (c = t.score(e._real_name_lc), e._real_name_lc !== e._real_name_normalized_lc && (_ = t.score(e._real_name_normalized_lc))), r = Math.min(d, c, _);
          }
          return r;
        },
        s = function(e, t) {
          var n = 1 / 0,
            i = 1 / 0;
          return n = t.score(e.name), i = t.score(e.handle), Math.min(n, i);
        },
        o = function(e, t) {
          var n = 1 / 0,
            i = 1 / 0;
          if (n = t.score(e.name), e.ms_name !== e.name && (i = t.score(e.ms_name)), !e.alias) return Math.min(n, i);
          var r = 1 / 0;
          return r = t.score(e.alias), Math.min(n, i, r);
        },
        l = function(t, n, a) {
          var s = e(t, a || {}),
            o = [],
            l = [],
            c = [],
            p = [],
            f = [],
            h = [],
            g = [],
            S = [],
            T = [],
            b = [],
            v = [],
            y = [],
            w = [];
          n.members = n.members || [], n.channels = n.channels || [], n.groups = n.groups || [], n.mpims = n.mpims || [], n.teams = n.teams || [], n.usergroups = n.usergroups || [], n.emoji = n.emoji || [], n.broadcast_keywords = n.broadcast_keywords || [], n.views = n.views || [], s.only_channels || s.only_emoji || (l = n.members.filter(function(e) {
            if (TS.boot_data.feature_name_tagging_client) {
              if (a.prefer_exact_match && (TS.members.getMemberProfileFieldDisplayName(e).toLocaleLowerCase() === s.query || TS.members.getMemberRealName(e).toLocaleLowerCase() === s.query)) return i(e.id, "jumper_exact_match", !0), o.push(e), !1;
              i(e.id, "jumper_exact_match", !1);
            }
            return a.prefer_exact_match && e.name === s.query ? (i(e.id, "jumper_exact_match", !0), o.push(e), !1) : (i(e.id, "jumper_exact_match", !1), s.matchesMember(e));
          }), b = n.usergroups.filter(function(e) {
            return a.prefer_exact_match && e.handle === s.query || e.name_lc === s.query ? (o.push(e), !1) : s.matchesUserGroup(e);
          }), y = n.broadcast_keywords.filter(function(e) {
            return a.prefer_exact_match && e.name === s.query ? (o.push(e), !1) : s.matchesBroadcastKeyword(e);
          })), s.only_members || s.only_emoji || _.forEach(n.channels, function(e) {
            if (a.prefer_exact_match && e.name === s.query) return i(e.id, "jumper_exact_match", !0), void o.push(e);
            i(e.id, "jumper_exact_match", !1), s.matchesChannel(e) && (e.is_member ? c.push(e) : e.is_archived ? f.push(e) : p.push(e));
          }), s.only_channels || s.only_members || s.only_emoji || (_.forEach(n.groups, function(e) {
            if (a.prefer_exact_match && e.name === s.query) return i(e.id, "jumper_exact_match", !0), void o.push(e);
            i(e.id, "jumper_exact_match", !1), s.matchesGroup(e) && (e.is_archived ? g.push(e) : h.push(e));
          }), S = n.mpims.filter(function(e) {
            return s.matchesMpim(e);
          }), T = n.teams.filter(function(e) {
            return a.prefer_exact_match && e.team_name.toLocaleLowerCase() === s.query ? (i(e.id, "jumper_exact_match", !0), o.push(e), !1) : (i(e.id, "jumper_exact_match", !1), s.matchesTeam(e));
          })), s.only_channels || s.only_members || (v = n.emoji.filter(function(e) {
            return a.prefer_exact_match && (e.display_name || e.name) === s.query ? (i(e.id, "jumper_exact_match", !0), o.push(e), !1) : (i(e.id, "jumper_exact_match", !1), s.matchesEmoji(e));
          })), TS.client && n.views && (s.only_channels || s.only_members || (w = n.views.filter(function(e) {
            return a.prefer_exact_match && e.name === s.query ? (o.push(e), !1) : s.matchesView(e);
          })));
          var k, x, M;
          k = l.concat(c, h, S, v, b, y, w), k.sort(_.partial(u, !0)), x = p.concat(T), x.sort(_.partial(u, !0)), M = g.concat(f), M.sort(_.partial(u, !0));
          var C = k.concat(x, M),
            I = C;
          if (a.prefer_exact_match && o.length > 0)
            for (var A = 0; A < o.length; A += 1) I.unshift(o[A]);
          if (a.frecency && (a.normalize = !0, I = TS.ui.frecency.query(I, t, m, a)), a.limit && (I = _.take(I, a.limit)), a.frecency && (I = d(I)), a.print) {
            var E = "\n";
            _.forEach(I, function(e) {
              var t = a.frecency ? e.model_ob : e;
              a.frecency && (E += "[" + e.score + "] "), null != r(t.id, "jumper_score") && (E += "[" + r(t.id, "jumper_score") + "] "), t.is_mpim ? E += TS.mpims.getDisplayName(t) : t.is_channel ? E += "#" + t.name : t.is_group ? E += t.name : t.team_name ? E += t.team_name : t.is_usergroup ? E += "@" + t.name : t.presence ? E += "@" + t.name : E += e.model_ob.name, E += "\n";
            }), TS.info(E);
          }
          return I;
        },
        d = function(e) {
          var t = [];
          return TS.boot_data.page_needs_enterprise && (e = _.uniqBy(e, function(e) {
            return e.id;
          })), _.forEach(e, function(e) {
            var n;
            if (TS.interop.utility.looksLikeMemberId(e.id)) {
              var i = TS.members.getMemberById(e.id);
              if (i) return void t.push({
                model_ob: i,
                score: e.score
              });
            }
            var r = _.find(TS.boot_data.other_accounts, function(t) {
                return t.id === e.id && t.team_id != TS.model.team.id;
              }),
              a = 0 === e.id.indexOf("BK"),
              s = 0 === e.id.indexOf("V");
            (n = r || (a ? TS.model.getBroadcastKeywordById(e.id) : s ? TS.model.getViewById(e.id) : TS.shared.getModelObById(e.id))) && t.push({
              model_ob: n,
              score: e.score
            });
          }), t;
        },
        c = function(e) {
          return e.is_mpim ? TS.mpims.getDisplayNameLowerCase(e) : e.is_usergroup ? e.handle : e._name_lc ? e._name_lc : e.team_name ? e.team_name.toLocaleLowerCase() : e.name;
        },
        u = function(e, t, n) {
          if (t.is_mpim && !n.is_mpim) return 1;
          if (n.is_mpim && !t.is_mpim) return -1;
          if (!t.is_mpim && !n.is_mpim) {
            var i = r(t.id, "jumper_score") - r(n.id, "jumper_score");
            if (0 !== i) return i;
          }
          if (t.is_mpim && n.is_mpim) {
            var a = r(t.id, "jumper_score") - r(n.id, "jumper_score");
            if (0 !== a) return a;
            var s = TS.mpims.getMemberCount(t) - TS.mpims.getMemberCount(n);
            if (0 !== s) return s;
          }
          var o = c(t),
            l = c(n);
          return e ? TS.i18n.sorter(o, l) : o > l ? 1 : l > o ? -1 : 0;
        },
        m = function(e, t) {
          if (e.is_mpim) return 0;
          var n = 0;
          return r(e.id, "jumper_exact_match") ? n += TS.ui.frecency.bonus_points.exact_match : n += p(e), r(e.id, "jumper_previous_name_scores") && (n += TS.ui.frecency.bonus_points.matches_previous_name), t.prefer_channel_members && e.presence && t.model_ob && f(e.id, t.model_ob) && (n += TS.ui.frecency.bonus_points.member_of_this_channel), e.is_starred && (n += TS.ui.frecency.bonus_points.starred_channel), e.is_emoji && ("thumbsup" !== e.name && "point_up" !== e.name || (n += 1)), (e.is_channel || e.is_group) && (e.is_archived && (n += TS.ui.frecency.bonus_points.archived_channel_or_group), e.is_channel && t.prefer_channels_user_belongs_to && (e.is_archived || f(TS.model.user.id, TS.shared.getModelObById(e.id)) || (n += TS.ui.frecency.bonus_points.not_in_channel))), (e.is_usergroup || e.is_broadcast_keyword) && (n += TS.ui.frecency.bonus_points.usergroup_or_keyword), n;
        },
        p = function(e) {
          var t = r(e.id, "jumper_score");
          if (!_.isFinite(t)) return 0;
          var n = Math.pow(.5, t);
          return Math.round(TS.ui.frecency.bonus_points.fuzzy_match * n);
        },
        f = function(e, t) {
          if (t.is_channel && e === TS.model.user.id) return t.is_member;
          var n = TS.membership.getUserChannelMembershipStatus(e, t);
          return n.is_known && n.is_member;
        };
    }();
    var n = {},
      i = function(e, t, i) {
        e && t && (n[e] || (n[e] = {}), n[e][t] = i);
      },
      r = function(e, t) {
        if (e && t && e && n[e]) return n[e][t];
      };
  },
  2524: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("stars", {
        member_stars_fetched_sig: new signals.Signal,
        member_stars_being_fetched_sig: new signals.Signal,
        channel_starred_sig: new signals.Signal,
        channel_unstarred_sig: new signals.Signal,
        has_more: !1,
        fetched_once: !1,
        onStart: function() {
          TS.files.team_file_changed_sig.add(s), TS.files.team_file_deleted_sig.add(TS.stars.maybeUpdateUserStarredList), TS.files.team_file_comment_deleted_sig.add(TS.stars.maybeUpdateUserStarredList), TS.channels.message_changed_sig.add(r), TS.ims.message_changed_sig.add(r), TS.mpims.message_changed_sig.add(r), TS.groups.message_changed_sig.add(r), e = $("#member_stars_more_btn");
        },
        maybeUpdateUserStarredList: function(e) {
          if (TS.client && TS.model.team) return n || !TS.stars.fetched_once ? void(i = !0) : void a(e);
        },
        maybeRemoveStarredListItem: function(e) {
          if (TS.client) {
            var t = _.findIndex(TS.model.user.stars, function(t) {
              if (t.type !== e.type) return !1;
              switch (t.type) {
                case "message":
                  return t.message.ts === e.message.ts;
                case "file":
                  return t.file.id === e.file_id;
                case "file_comment":
                  return t.comment.id === e.comment.id;
              }
              return !1;
            });
            if (-1 !== t && TS.model.user.stars.splice(t, 1), "stars" === TS.model.ui_state.flex_name) {
              var n, i;
              if ("file" === e.type) i = ".star_item #file_" + e.file_id, n = $(i).parent(".star_item");
              else if ("message" === e.type) i = '.star_item .message[data-ts="' + e.message.ts + '"]', n = $(i).parent(".star_item");
              else {
                if ("file_comment" !== e.type) return;
                i = '.star_item .star_comment[data-comment-id="' + e.comment.id + '"]', n = $(i).parents(".star_item");
              }
              n.remove();
            }
          }
        },
        fetchUserStarredItems: function() {
          var e = l();
          return TS.stars.fetched_once || (TS.stars.fetched_once = !0), TS.api.call("stars.list", e, o);
        },
        userStarStatusHasChanged: function(e, t, n) {
          if (d(t, n), "message" === t.type) c(t.message.ts, t.channel, e, !1);
          else if ("file" === t.type) t.file.is_starred != e && m(t.file.id, e);
          else if ("file_comment" === t.type) t.comment.is_starred != e && u(t.comment.id, t.file.id, e);
          else if ("channel" === t.type) {
            var i = TS.channels.getChannelById(t.channel);
            i ? i.is_starred != e && p(t.channel, e) : TS.warn("userStarStatusHasChanged channel_id:" + t.channel + " not found");
          } else if ("group" === t.type) {
            var r = TS.groups.getGroupById(t.channel);
            r || (r = TS.mpims.getMpimById(t.channel)), r ? r.is_starred != e && (r.is_mpim ? g(t.channel, e) : f(t.channel, e)) : TS.warn("userStarStatusHasChanged group_id:" + t.channel + " not found");
          } else if ("im" === t.type) {
            var a = TS.ims.getImById(t.channel);
            a ? a.is_starred != e && h(t.channel, e) : TS.warn("userStarStatusHasChanged im_id:" + t.channel + " not found");
          } else TS.error("userStarStatusHasChanged needs to handle star item type:" + t.type);
        },
        checkForStarClick: function(e) {
          if (!e.target) return !1;
          var t, n = $(e.target);
          t = n.closest(".star").length ? n.closest(".star") : n.closest(".star_link");
          var i = !1;
          if (t && t.length || (n.is("button.file_star") ? t = n.children(".star") : n.closest(".starred_icon").length && (i = !0, t = n.closest(".starred_icon"))), !t || !t.length) return !1;
          if (t.hasClass("not-clickable")) return !1;
          var r, a = t.hasClass("starred"),
            s = {};
          if (i) {
            var o = TS.shared.getModelObById(t.data("c-id"));
            o && (s.channel = o.id, a = o.is_starred, r = function(e) {
              o.is_channel ? p(s.channel, e) : o.is_im ? h(s.channel, e) : o.is_mpim ? g(s.channel, e) : o.is_group && f(s.channel, e);
            });
          } else if (t.hasClass("star_message")) s.channel = t.data("c-id"), s.timestamp = t.data("msg-id"), r = function(e) {
            c(s.timestamp, s.channel, e, !0);
          };
          else if (t.hasClass("star_file")) s.file = t.data("file-id"), r = function(e) {
            m(s.file, e);
          };
          else if (t.hasClass("star_file_comment")) s.file_comment = t.data("comment-id"), r = function(e) {
            u(s.file_comment, t.data("file-id"), e);
          };
          else if (t.hasClass("star_channel")) s.channel = t.data("channel-id"), r = function(e) {
            p(s.channel, e);
          };
          else if (t.hasClass("star_group")) s.channel = t.data("group-id"), r = function(e) {
            f(s.channel, e);
          };
          else if (t.hasClass("star_im")) s.channel = t.data("im-id"), r = function(e) {
            h(s.channel, e);
          };
          else {
            if (!t.hasClass("star_mpim")) return TS.error("checkForStarClick doesn't know what to do with a click on " + t[0].outerHTML), !1;
            s.channel = t.data("mpim-id"), r = function(e) {
              g(s.channel, e);
            };
          }
          return e.preventDefault(), r(!a), a ? TS.api.call("stars.remove", s, function(e, t) {
            e || r("not_starred" === t.error ? !1 : !0);
          }) : TS.api.call("stars.add", s, function(e, t) {
            e || r("already_starred" === t.error ? !0 : !1);
          }), !0;
        },
        updateFileStar: function(e, t) {
          m(e, t);
        },
        toggleStarOnMsg: function(e, t, n) {
          if (e && t) {
            var i = TS.utility.msgs.findMsg(e, t.id);
            if (i) {
              var r = {
                  channel: t.id,
                  timestamp: e
                },
                a = i.is_starred ? "stars.remove" : "stars.add";
              TS.api.call(a, r, function(e, i) {
                e ? n && n(t) : i.error && TS.error(i.error);
              });
            }
          }
        },
        toggleStarOnActiveModelObject: function(e) {
          var t = TS.shared.getActiveModelOb();
          if (t && !TS.client.activeChannelIsHidden()) {
            var n = t.is_starred,
              i = {};
            i.channel = t.id, n ? TS.api.call("stars.remove", i, function(n, i) {
              n ? e && e(t) : i.error && TS.error(i.error);
            }) : TS.api.call("stars.add", i, function(n, i) {
              n ? e && e(t) : i.error && TS.error(i.error);
            });
          }
        }
      });
      var e, t = 1,
        n = !1,
        i = !1,
        r = function(e, t) {
          !0 === t.is_starred && TS.stars.maybeUpdateUserStarredList();
        },
        a = function(e) {
          n = !0, i = !1, TS.stars.member_stars_being_fetched_sig.dispatch(TS.model.user, !0);
          var t = l();
          t.page = 1, t._update = !0, t.count = Math.max(TS.model.user.stars.length, 20), e && e.delta && (t.count += e.delta), TS.api.call("stars.list", t, o, !0);
        },
        s = function(e) {
          e.hasOwnProperty("is_starred") && (m(e.id, e.is_starred, e.id), TS.files.updateFileListItem(e, $(".star_item")));
        },
        o = function(r, a, s) {
          if (n = !1, TS.stars.member_stars_being_fetched_sig.dispatch(TS.model.user, !1), i) return void TS.stars.maybeUpdateUserStarredList();
          if (!r) return void TS.stars.member_stars_fetched_sig.dispatch({
            error: "api_not_ok"
          });
          for (var o = 0; o < a.items.length; o += 1) {
            var l = a.items[o];
            TS.stars.userStarStatusHasChanged(!0, l, "stars.list");
          }
          1 == s.page ? TS.model.user.stars = a.items : (TS.model.user.stars = TS.model.user.stars.concat(a.items), TS.model.user.stars = _.uniqWith(TS.model.user.stars, _.isEqual)), e.data("ladda") && e.data("ladda").stop(), TS.stars.has_more = a.paging.pages > a.paging.page, s._update || (t += 1), TS.stars.member_stars_fetched_sig.dispatch(null, TS.model.user);
        },
        l = function() {
          return {
            user: TS.model.user.id,
            exclude: "Ch,Gh,Dh",
            page: t,
            count: 20
          };
        },
        d = function(e, t) {
          var n;
          if ("message" === e.type) e.message._rxn_key = TS.rxns.getRxnKey("message", e.message.ts, e.channel), "channel_topic" !== e.message.type && "channel_purpose" !== e.message.type && "channel_join" !== e.message.type && "channel_leave" !== e.message.type || (e.message.subtype = e.message.type), e.message.type = "message";
          else if ("file" === e.type || "file_comment" === e.type) {
            if (!e.file) return TS.error("WTF no file in type " + e.type + " in " + t), !1;
            if (n = TS.files.upsertAndSignal(e.file), e.file = n.file, "file_comment" === e.type) {
              if (!e.comment) return TS.error("WTF no comment in type " + e.type + " in " + t), !1;
              e.comment = TS.files.addCommentToFile(e.comment, e.file);
            }
          } else if ("channel" === e.type);
          else if ("group" === e.type);
          else if ("im" !== e.type) return TS.error("need to handle star item type:" + e.type + " in " + t), !1;
          return !0;
        },
        c = function(e, t, n, i) {
          var r, a = TS.shared.getModelObById(t);
          a && (r = TS.utility.msgs.findMsg(e, t));
          var s = '.star_message[data-msg-id="' + e + '"][data-c-id="' + t + '"]',
            o = $(s);
          if (i) {
            var l = {},
              d = n ? "STAR_ADD_CLICKED" : "STAR_REMOVE_CLICKED";
            TS.model.unread_view_is_showing && (_.merge(l, TS.client.ui.unread.getTrackingData(e)), TS.client.ui.unread.incrementTrackingSeqId()), _.merge(l, TS.ui.thread.getTrackingPayloadForEl(o)), "threads_view" === TS.ui.thread.getContextForEl(o) && TS.client.ui.threads.incrementTrackingSeqId(), TS.clog.track(d, l);
          }
          S(o, n, r, s);
        },
        u = function(e, t, n) {
          var i, r = TS.files.getFileById(t);
          r ? i = TS.files.getFileCommentById(r, e) : TS.warn("updateFileCommentStar file_id:" + t + " not found");
          var a = '.star_comment[data-comment-id="' + e + '"]';
          S($(a), n, i, a);
        },
        m = function(e, t) {
          var n = TS.files.getFileById(e);
          n || TS.warn("updateFileStar file_id:" + e + " not found");
          var i = '.star_file[data-file-id="' + e + '"]';
          S($(i), t, n, i);
        },
        p = function(e, t) {
          var n = TS.channels.getChannelById(e);
          n || TS.warn("updateChannelStar channel_id:" + e + " not found"), n.is_starred = t;
          var i = '.star_channel[data-channel-id="' + e + '"]';
          if (S($(i), t, n, i), TS.client) {
            TS.client.channel_pane.rebuild("channels", "starred");
            var r = TS.shared.getModelObById(e);
            if (!r) return;
            t ? TS.stars.channel_starred_sig.dispatch(r) : TS.stars.channel_unstarred_sig.dispatch(r);
          }
        },
        f = function(e, t) {
          var n = TS.groups.getGroupById(e);
          n || TS.warn("updateGroupStar group_id:" + e + " not found"), n.is_starred = t;
          var i = '.star_group[data-group-id="' + e + '"]';
          S($(i), t, n, i), TS.client && TS.client.channel_pane.rebuild("channels", "starred");
        },
        h = function(e, t) {
          var n = TS.ims.getImById(e);
          n || TS.warn("updateImStar im_id:" + e + " not found"), n.is_starred = t;
          var i = '.star_im[data-im-id="' + e + '"]';
          S($(i), t, n, i), TS.client && TS.client.channel_pane.rebuild("ims", "starred");
        },
        g = function(e, t) {
          var n = TS.mpims.getMpimById(e);
          n || TS.warn("updateMpimStar mpim_id:" + e + " not found"), n.is_starred = t;
          var i = '.star_mpim[data-mpim-id="' + e + '"]';
          S($(i), t, n, i), TS.client && TS.client.channel_pane.rebuild("ims", "starred", "apps");
        },
        S = function(e, t, n) {
          t ? e.hasClass("starred") || e.addClass("starred ts_icon_star").removeClass("ts_icon_star_o") : e.removeClass("starred ts_icon_star").addClass("ts_icon_star_o"), n && (n.is_starred = t);
        };
    }();
  },
  2526: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("storage", {
        version: "0.85",
        msgs_version: window.boot_data && boot_data.cache_version || "unknown_version",
        cache_ts_version: window.boot_data && boot_data.cache_ts_version || "unknown_version",
        do_compression: !(TS.model.is_our_app || void 0 === window.Worker || window.bowser && (bowser.phantom || bowser.msie)),
        test: function() {
          return {
            getLocalStorage: B,
            setLocalStorage: D,
            getKeys: f,
            set: I
          };
        },
        onStart: function() {
          TS.storage.onStart = function() {}, TS.boot_data.page_has_incomplete_user_model && (TS.lazyLoadMembersAndBots() && TS.has_pri[j] && TS.log(j, "Flannel: disabling member bot cache"), TS.storage.disableMemberBotCache()), TS.storage.do_compression || TS.boot_data.feature_disable_ls_compression || !TS.boot_data.feature_force_ls_compression || (TS.warn("Special case: force-enabling LS compression for this session."), TS.storage.do_compression = !0), TS.storage.do_compression && TS.boot_data.feature_disable_ls_compression && (TS.has_pri[P] && TS.log(P, "TS.storage: disabling compression"), TS.storage.do_compression = !1), TS.storage.version += TS.storage.do_compression ? "-compressed-LZString" : "";
          var t = e || "1" == TS.qs_args.ls_disabled || !F || TS.boot_data && TS.boot_data.ls_disabled || function() {
            return !TS.storage.storageAvailable() && (g(), !TS.storage.storageAvailable()) && (TS.warn("TS.storage.storageAvailable() = false in onStart after flushing all our keys, so disabling"), !0);
          }();
          TS.has_pri[P] && (TS.log(P, "TS.storage.onStart should_disable:" + t), TS.log(P, "TS.storage.do_compression:" + TS.storage.do_compression + " (_ls.getItem('is_compressed') === 'yes'):" + (F && "yes" === F.getItem("is_compressed")))), TS.ui.window_unloaded_sig.add(T), TS.ui.window_focus_changed_sig.add(b), TS.storage.setDisabled(t), I("rxn_records", null);
        },
        setDisabled: function(t) {
          e != t && (t || !F ? (e = !0, F && g()) : (e = !1, h()), TS.info("_disabled:" + e));
        },
        storageAvailable: function() {
          if (!F) return !1;
          try {
            var e = "test_to_see_if_we_can_write_to_local_storage";
            return F.setItem(e, "foo"), F.removeItem(e), !0;
          } catch (e) {
            return !1;
          }
        },
        storageSize: function(e) {
          var t = 0;
          if (!F) return t;
          for (var i, r, a = f(), s = 0, o = 0; o < a.length; o += 1) s += 1, i = a[o], r = F.getItem(i), r || "" === r ? (t += r.length, e && TS.info(i + "=" + (2 * r.length / 1024).toFixed(2) + "KB (total=" + (t / 1024).toFixed(2) + "KB)")) : TS.warn(i + " not measurable value, typeof:" + (void 0 === r ? "undefined" : n(r)));
          return e && TS.info("total for " + s + " items is " + (t / 1024).toFixed(2) + "KB"), t;
        },
        isUsingMemberBotCache: function() {
          return !r && TS.model && TS.model.supports_user_bot_caching;
        },
        disableMemberBotCache: function() {
          TS.has_pri[P] && TS.log(P, 'disableMemberBotCache(): _user_bot_caching_disabled is currently "' + r + '"'), r = !0;
        },
        completelyEmptyAllStorageAndReset: function() {
          TS.info("completelyEmptyAllStorageAndReset running"), S(), TS.storage.storeLastEventTS("", !0, !0);
          var e = TS.storage.fetchLastEventTS(!0);
          TS.info("completelyEmptyAllStorageAndReset fetched_b4_flush:" + e), e && (TS.info("completelyEmptyAllStorageAndReset _getKeys:" + f().join(", ")), TS.info("completelyEmptyAllStorageAndReset Object.keys(_buffer):" + Object.keys(o).join(", "))), x(!0, "completelyEmptyAllStorageAndReset");
          var t = TS.storage.fetchLastEventTS(!0);
          TS.info("completelyEmptyAllStorageAndReset fetched_after_flush:" + t), t && (TS.info("completelyEmptyAllStorageAndReset _getKeys:" + f().join(", ")), TS.info("completelyEmptyAllStorageAndReset Object.keys(_buffer):" + Object.keys(o).join(", ")));
        },
        cleanOutCacheTsStorage: function() {
          var e = f();
          TS.dir(488, e, "_getKeys()"), TS.storage.storeBots(), TS.storage.storeMembers(), e = f(), TS.dir(488, e, "_getKeys()");
        },
        flush: function(e) {
          TS.has_pri[P] && TS.log(P, "TS.storage.flush()"), g(), e && TS.storage.clearBufferAndCache();
        },
        clearBufferAndCache: function() {
          TS.has_pri[P] && TS.log(P, "TS.storage.clearBufferAndCache()"), o = {}, l = {}, s = null, TS.compresion && TS.compression.terminate();
        },
        fetchLastActiveModelObId: function() {
          return M("last_active_model_ob_id", void 0);
        },
        storeLastActiveModelObId: function(e) {
          I("last_active_model_ob_id", e || void 0, !0);
        },
        fetchStorageVersion: function() {
          return M("storage_version");
        },
        storeStorageVersion: function(e) {
          I("storage_version", e, !0);
        },
        fetchCacheTSStorageVersion: function() {
          return M("storage_cache_ts_version");
        },
        storeCacheTSStorageVersion: function(e) {
          I("storage_cache_ts_version", e, !0);
        },
        _makeMsgInputId: function(e) {
          return "msg_input_" + e;
        },
        fetchLastMsgInput: function(e) {
          return M(TS.storage._makeMsgInputId(e), null);
        },
        storeLastMsgInput: function(e, t) {
          I(TS.storage._makeMsgInputId(e), t);
        },
        _makeCommentInputId: function(e) {
          return "comment_input_" + e;
        },
        fetchLastCommentInput: function(e) {
          return M(TS.storage._makeCommentInputId(e), null);
        },
        storeLastCommentInput: function(e, t) {
          I(TS.storage._makeCommentInputId(e), t);
        },
        fetchOldestTs: function(e) {
          return M(i(e), null);
        },
        storeOldestTs: function(e, t) {
          I(i(e), t);
        },
        fetchActiveHistory: function() {
          return M("active_history", []) || [];
        },
        storeActiveHistory: function(e) {
          I("active_history", e, !0);
        },
        fetchLastEventTS: function(e) {
          return M("last_event_ts", "", e) || "";
        },
        storeLastEventTS: function(e, t, n) {
          I("last_event_ts", e, t, n);
        },
        fetchUIState: function() {
          return M("ui_state", {}) || {};
        },
        storeUIState: function(e) {
          I("ui_state", e);
        },
        fetchExpandableState: function() {
          var e = M("expandable_state", {});
          return e && "object" === (void 0 === e ? "undefined" : n(e)) ? e : {};
        },
        storeExpandableState: function(e) {
          I("expandable_state", e);
        },
        fetchClientWindows: function() {
          return M("client_windows", {}) || {};
        },
        storeClientWindows: function(e) {
          I("client_windows", e);
        },
        fetchInputHistory: function() {
          var e = M("input_history", []) || [];
          "string" == typeof e && (e = [e]);
          return e.length > 300 && (e.length = 300), e;
        },
        storeInputHistory: function(e) {
          I("input_history", e);
        },
        fetchCustomEmoji: function() {
          return M("custom_emoji", null) || null;
        },
        storeCustomEmoji: function(e) {
          I("custom_emoji", e);
        },
        fetchApps: function() {
          return M("apps", null) || null;
        },
        storeApps: function(e) {
          I("apps", e);
        },
        fetchAppsSearchResults: function() {
          return M("apps_search", null) || null;
        },
        storeAppsSearchResults: function(e) {
          I("apps_search", e);
        },
        fetchCmds: function() {
          return M("cmds", null) || null;
        },
        storeCmds: function(e) {
          I("cmds", e);
        },
        fetchChannelPageState: function() {
          return M("channel_page_state", {}) || {};
        },
        storeChannelPageState: function(e) {
          I("channel_page_state", e);
        },
        fetchInvitesState: function() {
          return M("invites_state", []) || [];
        },
        storeInvitesState: function(e) {
          I("invites_state", e);
        },
        fetchBriefingOpensCount: function() {
          return Number(M("briefing_opens_count", 0)) || 0;
        },
        storeBriefingOpensCount: function(e) {
          I("briefing_opens_count", e);
        },
        fetchReplyInput: function(e, t) {
          var n = M("reply_inputs") || [],
            i = _.find(n, {
              model_ob_id: e,
              thread_ts: t
            });
          return i ? i.text : "";
        },
        storeReplyInput: function(e, t, n) {
          var i = M("reply_inputs") || [];
          i = _.reject(i, {
            model_ob_id: e,
            thread_ts: t
          }), i.length > 10 && i.shift(), i.push({
            model_ob_id: e,
            thread_ts: t,
            text: n
          }), I("reply_inputs", i);
        },
        fetchFilterState: function() {
          return M("team_filter_state", "") || "";
        },
        storeFilterState: function(e) {
          I("team_filter_state", e);
        },
        fetchCallsState: function() {
          return M("calls_state", {}) || {};
        },
        storeCallsState: function(e) {
          I("calls_state", e);
        },
        fetchMembers: function() {
          if (!TS.storage.isUsingMemberBotCache()) return [];
          var e = M("members_data");
          return e ? e.members || [] : [];
        },
        storeMembers: function(e) {
          TS.storage.isUsingMemberBotCache() || (e = []), I("last_cache_ts", null, !0), I("members_data", e ? {
            members: e,
            cache_ts: s
          } : null);
        },
        fetchBots: function() {
          if (!TS.storage.isUsingMemberBotCache()) return [];
          var e = M("bots_data");
          return e ? e.bots || [] : [];
        },
        storeBots: function(e) {
          TS.storage.isUsingMemberBotCache() || (e = []), I("last_cache_ts", null, !0), I("bots_data", e ? {
            bots: e,
            cache_ts: s
          } : null);
        },
        rememberLastCacheTS: function(e) {
          if (!TS.storage.isUsingMemberBotCache()) return void(TS.has_pri[P] && e && TS.log(P, "rememberLastCacheTS: Exiting because isUsingMemberBotCache() returned false."));
          if (e) {
            if (s && e <= s) return void(TS.has_pri[P] && TS.log(P, "rememberLastCacheTS: provided ts of " + e + " <= _last_cache_ts_possible of " + s + " - exiting."));
            TS.has_pri[P] && TS.log(P, "rememberLastCacheTS(" + e + ")"), s = e;
          }
        },
        fetchLastCacheTS: function() {
          var e = parseInt(s, 10) || 0;
          if (!TS.storage.isUsingMemberBotCache()) return e ? (TS.warn("fetchLastCacheTS: isUsingMemberBotCache() = false, but returning last_possible of " + e + " instead of 0."), e) : (TS.has_pri[P] && TS.log(P, "fetchLastCacheTS: returning 0 because isUsingMemberBotCache() returned false, and no last_possible from _last_cache_ts_possible.", e, s), 0);
          var t = parseInt(M("last_cache_ts"), 10) || 0,
            n = t || e;
          return TS.has_pri[P] && TS.log(P, 'fetchLastCacheTS: _get returned "' + t + '", last_possible = "' + e + '" - returning "' + n + '"'), n;
        },
        fetchFrecency: function(e) {
          return M("frecency_" + e);
        },
        storeFrecency: function(e, t) {
          I("frecency_" + e, t);
        },
        clearFrecency: function(e) {
          I("frecency_" + e, "");
        },
        fetchEnterpriseState: function() {
          return M("enterprise_state", {}) || {};
        },
        storeEnterpriseState: function(e) {
          I("enterprise_state", e);
        },
        fetchLastTraceTS: function() {
          return M("last_trace_ts", "") || "";
        },
        storeLastTraceTS: function() {
          I("last_trace_ts", Date.now());
        }
      });
      var e, t = window.boot_data.user_id + "_",
        i = function(e) {
          return "oldest_msg_ts_" + e;
        },
        r = !1,
        a = !1,
        s = null,
        o = {},
        l = {},
        d = !1,
        c = !1,
        u = !1,
        m = !1,
        p = null,
        f = function() {
          var e = [];
          if (!F) return e;
          var t = F.length;
          if (!t) return e;
          for (var n = 0; n < t; n += 1) e.push(F.key(n));
          return e;
        },
        h = function() {
          var n;
          if (!e) {
            var i = TS.storage.fetchStorageVersion() || "",
              r = -1 != i.indexOf("-compressed") || "yes" === F.getItem("is_compressed");
            TS.storage.do_compression && !r ? (TS.warn("migrating to compressed format"), n = f(), n.forEach(function(e) {
              var n = e.replace(t, ""),
                i = C(e, F.getItem(e)),
                r = "converting: " + e + " -> " + n + " val.length: " + (void 0 === i || null === i ? -1 : String(i).length);
              I(n, null), I(n, i), M(n) == i ? TS.has_pri[P] && TS.log(P, r + " SUCCESS _get(name) has a value:" + !!M(n) + ", and it it the same as val") : TS.error(r + " FAILURE _get(name) !== val");
            }), TS.warn("migration to compressed format complete, " + n.length + " migrated"), TS.storage.storeStorageVersion(TS.storage.version)) : TS.has_pri[P] && TS.log(P, "no migration needed"), F.setItem("is_compressed", TS.storage.do_compression ? "yes" : "no");
          }
          var a = TS.storage.fetchCacheTSStorageVersion();
          TS.has_pri[P] && (TS.log(P, "TS.storage.cache_ts_version:" + TS.storage.cache_ts_version), TS.log(P, "storage_cache_ts_version:" + a));
          var s = TS.storage.fetchStorageVersion() || "";
          TS.has_pri[P] && (TS.log(P, "TS.storage.version:" + TS.storage.version), TS.log(P, "storage_version:" + s), TS.log(P, "TS.storage last_unload_flushing: " + M("last_unload_flushing")), TS.log(P, "TS.storage.storageAvailable(): " + TS.storage.storageAvailable())), n = f(), TS.has_pri[P] && TS.dir(P, n, "_getKeys()"), TS.storage.storageAvailable() ? s != TS.storage.version ? (TS.warn("storage_version:" + s + " does not match TS.storage.version:" + TS.storage.version + " so flushing all our keys: " + n.join(", ")), g()) : TS.storage.fetchLastEventTS() ? a != TS.storage.cache_ts_version && (TS.warn("storage_cache_ts_version:" + a + " does not match TS.storage.cache_ts_version:" + TS.storage.cache_ts_version + " so flushing user/bot data"), TS.storage.cleanOutCacheTsStorage()) : (TS.warn("TS.storage.fetchLastEventTS() is empty so flushing channel data"), S()) : (TS.warn("TS.storage.storageAvailable() = false so flushing all our keys"), g()), TS.storage.storeStorageVersion(TS.storage.version), TS.storage.storeCacheTSStorageVersion(TS.storage.cache_ts_version), TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.addOnce(v) : TS.ms.connected_sig.addOnce(v);
        },
        g = function() {
          f().forEach(function(e) {
            0 === e.indexOf(t) && F.removeItem(e);
          });
        },
        S = function() {
          var e = f();
          TS.has_pri[P] && TS.log(P, e, "_getKeys()");
          for (var n, i = 0; i < e.length; i += 1) n = e[i], 0 === n.indexOf(t) && (-1 == n.indexOf("channel_msgs_") && -1 == n.indexOf("oldest_msg_ts_") || (F.removeItem(n), delete o[n], TS.warn("_ls.removeItem:" + n)));
          for (n in o) 0 === n.indexOf(t) && (-1 == n.indexOf("channel_msgs_") && -1 == n.indexOf("oldest_msg_ts_") || (delete o[n], TS.warn("delete _buffer:" + n)));
          l = {}, e = f(), TS.dir(488, e, "_getKeys()");
        },
        T = function() {
          a = !0, I("last_unload_flushing", (new Date).toString(), !0), x(!0, "_windowUnloaded"), TS.compression.terminate();
        },
        b = function() {
          x(!0, "_windowBlurred");
        },
        v = function() {
          p && (window.clearInterval(p), p = null), p = window.setInterval(y, 3e5);
        },
        y = function() {
          if (TS.model) {
            var e = Object.keys(o).length;
            if (e) {
              var t = !1,
                n = "";
              TS.model.ui.is_window_focused || (n = "window blurred!", t = !0);
              var i = Date.now() - TS.model.client.last_user_active_timestamp;
              if (t || i >= 1e4 && (n = "window focused, but user has been idle long enough " + i + " >= 10000", t = !0), TS.has_pri[P] && TS.log(P, "_maybeFlushBuffer ok_to_flush_all:" + t), t) return void x(!0, "maybeFlushBuffer (" + e + ") " + n);
              var r = i > 1e3;
              TS.has_pri[P] && TS.log(P, "_maybeFlushBuffer ok_to_flush_some:" + r), n = "window focused, but user has been idle long enough " + i + " >= 1000", r && x(!1, "maybeFlushBuffer (" + e + ") " + n);
            }
          }
        },
        w = function(e) {
          return "string" != typeof e && "number" != typeof e && e ? JSON.stringify(e) : e;
        },
        k = function(e) {
          return "undefined" === e ? null : "null" === e ? null : e;
        },
        x = function(t, n) {
          if (!e) {
            var i, r, a, s, d, c, _, p = new Date,
              f = Date.now(),
              h = 0,
              S = TS.model && TS.model.team && TS.model.team.domain && TS.boot_data.feature_tinyspeck;
            for (r in o)
              if (!o[r].being_flushed) {
                if (void 0 === (c = w(o[r].val)) || null === c) F.removeItem(r), delete o[r], delete l[r];
                else try {
                  R(r, c);
                } catch (e) {
                  TS.warn("_flushBuffer _ls.setItem failed once, flushing all our keys. TS.storage.storageSize():" + TS.storage.storageSize(!1)), TS.error(0, e), g(), delete o[r], delete l[r];
                  continue;
                }
                if (h += 1, i = Date.now() - f, S && TS.has_pri[P] && TS.log(P, "_flushBuffer _ls.setItem " + r + ": " + i + "ms " + (o[r] && o[r].val && o[r].val.toString ? o[r].val.toString().substr(0, 100) : "NULL?")), !t && (a = new Date - p, !u && a > 1e3)) {
                  u = !0, d = new Date;
                  try {
                    s = TS.storage.storageSize();
                  } catch (e) {}
                  d = new Date - d, _ = "Took " + a + "ms for " + h + " item (!all case) (threshold is 1000 ms). Key: " + r + ". Buffer length: " + (o[r] && o[r].val && o[r].val.toString() ? o[r].val.toString().length : "unknown (not a string)") + ". localStorage size: " + (s || "unknown") + ". Time to read LS size: " + d, TS.info("_flushBuffer exceeded slow write threshold: " + _);
                }
                if (o[r] && (o[r].being_flushed = !0), !t) return void(TS.has_pri[P] && TS.log(P, "_flushBuffer: Wrote one item. why: " + n));
                l = {};
              }
            if (h && !m && (a = new Date - p) > 1e3) {
              m = !0;
              try {
                s = TS.storage.storageSize();
              } catch (e) {}
              _ = "Took " + a + "ms for " + h + " items (threshold is 1000 ms). localStorage size: " + s + ". App open for " + ((Date.now() - TS.boot_data.start_ms) / 1e3 / 60).toFixed(2) + " min. why: " + n, TS.info("_flushBuffer exceeded slow write threshold (all case): " + _);
            }
            TS.has_pri[P] && (0 === h ? TS.log(P, "_flushBuffer: Nothing to save.") : TS.log(P, "_flushBuffer: Saved " + h + (1 === h ? " item" : " items") + " why: " + n));
          }
        },
        M = function(n, i, r) {
          var a = t + n;
          if (r && TS.info("_get name:" + n + " k:" + a + " disabled:" + e + ' _buffer["' + a + '"].val:' + (o[a] && o[a].val)), e) return o[a] && o[a].val || i;
          if (a in o) return o[a] && o[a].val || i;
          if (l.hasOwnProperty(a)) return l[a];
          var s = C(a, $(a, F.getItem(a)), i, r);
          return l[a] = s, s;
        },
        C = function(e, t, i, r) {
          var a = new Date,
            s = k(t);
          r && TS.info("_get _correctBadValsFromStorage(_ls.getItem(k)) k:" + e + " typeof result:" + (void 0 === s ? "undefined" : n(s)) + " /^[{[]/.test(result):" + /^[{[]/.test(s));
          var o;
          if (s && "string" == typeof s && /^[{[]/.test(s) && (s = TS.utility.parseJSONOrElse(s) || s), s = s || (void 0 !== i ? i : null), a = new Date - a, !d && a > 1e3) {
            d = !0;
            try {
              o = TS.storage.storageSize();
            } catch (e) {}
            var l = "_get took longer than threshold: Took " + a + "ms to read " + e + " (theshold is 1000ms), length = " + (s && !isNaN(s.length) ? s.length : "unknown") + ". Storage size: " + o;
            TS.info(l);
          }
          return s;
        },
        I = function(n, i, r, a) {
          var s, d = !1,
            _ = new Date,
            u = t + n;
          if (o[u] = {
              val: i,
              being_flushed: !1
            }, l[u] = o[u].val, a && TS.info("_set immediate:" + r + " name:" + n + " k:" + u + " disabled:" + e + " do_compression:" + TS.storage.do_compression + ' _buffer["' + u + '"].val:' + o[u].val), r) {
            if (!e) {
              var m = w(i);
              if (void 0 === m || null === m) F.removeItem(u), delete o[u];
              else try {
                R(u, m, r);
              } catch (e) {
                TS.warn("_set _ls.setItem failed, flushing. TS.storage.storageSize():" + TS.storage.storageSize(!1)), d = !0;
              }
            }
            if (a && TS.info("_set failed:" + d), !d)
              if (a && TS.info('_set _buffer["' + u + '"]:' + (o[u] && JSON.stringify(o[u]))), (_ = new Date - _) > 1e3) {
                if (TS.warn("_set immediately " + n + ": " + _ + "ms " + (i && i.toString ? i.toString().substr(0, 100) : "NULL?")), !c) {
                  c = !0;
                  try {
                    s = TS.storage.storageSize();
                  } catch (e) {}
                  var p = "_set exceeded slow set threshold (immediate): Took " + _ + "ms to write " + u + " (theshold is 1000ms), length = " + (i && !isNaN(i.length) ? i.length : "unknown") + ". Storage length: " + s;
                  TS.info(p);
                }
              } else TS.has_pri[P] && TS.log(P, "_set GOOD immediately: " + r + " " + n + ": " + _ + "ms", i);
          }
        },
        A = function() {
          var e = t + "bots_data",
            n = F.getItem(e),
            i = n && JSON.parse(k($(e, n))) || null,
            r = F.getItem(e),
            a = r && JSON.parse(k($(e, r))) || null;
          return !TS.model.bots.length && a && a.cache_ts ? (TS.has_pri[P] && TS.log(P, "_calcLastCacheTS: no TS.model.bots.length, but we have members_data && members_data.cache_ts = " + a.cache_ts), a.cache_ts) : i && i.cache_ts && a && a.cache_ts ? (TS.has_pri[P] && TS.log(P, "_calcLastCacheTS: bots_data && members_data && both have cache_ts, returning the lesser of " + i.cache_ts + " and " + a.cache_ts), i.cache_ts < a.cache_ts ? i.cache_ts : a.cache_ts) : (TS.has_pri[P] && TS.log(P, "_calcLastCacheTS: WTF maybe no members or bots data at all? Returning 0", a, i), 0);
        },
        E = function() {
          if (!TS.storage.isUsingMemberBotCache()) return void(TS.has_pri[P] && TS.log(P, "_storeLastCacheTS(): Exiting because isUsingMemberBotCache() returned false."));
          var e = A();
          TS.has_pri[P] && TS.log(P, "setting last_cache_ts from _calcLastCacheTS(): " + e), I("last_cache_ts", e, !0);
        },
        O = !(!window.macgap || !macgap.ls),
        F = O ? macgap.ls : window.localStorage,
        B = function() {
          return F;
        },
        D = function(e) {
          F = e;
        },
        R = function(e, t, n) {
          if (t = String(t), TS.storage.do_compression) return void TS.compression.compress(e, t, n || a, H);
          H({
            k: e,
            str: t
          });
        },
        H = function(e) {
          F.setItem(e.k, e.str);
          ! function i(r) {
            var a = F.getItem(e.k);
            if (a === e.str) {
              r > 1 && TS.warn(e.k + " now saved, try #" + r), delete o[e.k], delete l[e.k];
              var s = e.k.replace(t, "");
              return void("bots_data" !== s && "members_data" !== s || E());
            }
            if (r > 1 && (!o[e.k] || o[e.k].val != e.str)) return void TS.error("buffer changed for " + e.k + " so we don't care anymore, a new value is being set for it, try #" + r);
            TS.error("WTF not saved, try #" + r + " " + e.k + " " + (e.str || "").length + " typeof ob.str:" + n(e.str) + " from_ls:" + (void 0 === a ? "undefined" : n(a))), F.setItem(e.k, e.str), setTimeout(i, 1e3, r + 1);
          }(1);
        },
        $ = function(e, t) {
          if (!TS.storage.do_compression) return t;
          var n = Date.now();
          t && (t = LZString.decompress(t));
          var i = Date.now() - n;
          return t && TS.has_pri[P] && TS.log(P, e + " took " + i + "ms to _decompress str.length: " + t.length), t;
        },
        P = 488,
        j = 1989;
    }();
  },
  2527: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("team", {
        team_profile_changed_sig: new signals.Signal,
        team_plan_changed_sig: new signals.Signal,
        team_email_domain_changed_sig: new signals.Signal,
        team_domain_changed_sig: new signals.Signal,
        team_name_changed_sig: new signals.Signal,
        onStart: function() {
          TS.useSocket() && (TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.add(i, TS.team) : TS.ms.connected_sig.add(i, TS.team)), a();
        },
        upsertAndSignal: function(e) {
          if (e) {
            var t = TS.team.upsertTeam(e);
            return "CHANGED" === t.status && (-1 != t.what_changed.indexOf("profile") && TS.team.team_profile_changed_sig.dispatch(t.team), -1 != t.what_changed.indexOf("email_domain") && TS.team.team_email_domain_changed_sig.dispatch(t.team), -1 != t.what_changed.indexOf("domain") && TS.team.team_domain_changed_sig.dispatch(t.team)), t;
          }
        },
        upsertTeam: function(e, t) {
          a();
          var i = TS.model.team,
            r = "NOOP",
            l = [];
          if (e) {
            TS.has_pri[4] && TS.log(4, 'updating team "' + e.id + '"');
            for (var d in e) "profile" === d ? e.profile.fields && e.profile.fields.length && ("object" === n(e.profile.fields[0]) ? s(e.profile.fields) : "string" == typeof e.profile.fields[0] && o(e.profile.fields), l.push(d), r = "CHANGED") : "prefs" === d || "icon" === d || "cannot_leave_reasons" === d ? i[d] = e[d] : i[d] != e[d] && (e[d] && !TS.utility.isScalar(e[d]) ? (i[d] = e[d], TS.warn(d + " is not scalar! it needs to be handled by upsertTeam specifically to test if it has changed! " + n(e[d]))) : "boolean" == typeof e[d] && !e[d] == !i[d] || (i[d] = e[d], l.push(d), r = "CHANGED"));
            if (TS.boot_data.page_needs_enterprise) {
              var c = TS.enterprise.getTeamById(e.id);
              i = _.merge({}, i, c), TS.model.team = i, t || (t = !0, TS.enterprise.upsertEnterpriseTeam(i, t));
            }
          }
          return {
            status: r,
            team: i,
            what_changed: l
          };
        },
        ensureTeamProfileFields: function() {
          return e || (e = TS.api.call("team.profile.get").then(function(e) {
            TS.team.upsertTeam({
              profile: e.data.profile
            });
          }));
        },
        getTeamProfileFieldById: function(e) {
          TS.model.team.profile.fields.length || TS.warn("Ensure profile fields exist before calling getTeamProfileFieldById");
          for (var t = 0; t < TS.model.team.profile.fields.length; t += 1)
            if (TS.model.team.profile.fields[t].id === e) return TS.model.team.profile.fields[t];
          return null;
        },
        getVisibleTeamProfileFields: function() {
          return TS.model.team.profile.fields.length || TS.warn("Ensure profile fields exist before calling getVisibleTeamProfileFields"), TS.model.team.profile.fields.filter(function(e) {
            return !e.is_hidden;
          });
        },
        getHiddenTeamProfileFields: function() {
          return TS.model.team.profile.fields.length || TS.warn("Ensure profile fields exist before calling getHiddenTeamProfileFields"), TS.model.team.profile.fields.filter(function(e) {
            return e.is_hidden;
          });
        },
        getTeamCustomStatusPresets: function() {
          return _.map(TS.model.team.prefs.custom_status_presets, function(e) {
            return {
              text: e[1],
              emoji: e[0]
            };
          });
        },
        sortTeamProfileFieldsByOrdering: function() {
          TS.model.team.profile.fields.length ? TS.model.team.profile.fields.sort(function(e, t) {
            return e.ordering - t.ordering;
          }) : TS.warn("Ensure profile fields exist before calling sortTeamProfileFieldsByOrdering");
        },
        getVisibleTeamProfileFieldsForMember: function(e, t) {
          return e && e.profile ? (TS.model.team.profile.fields.length || TS.warn("Ensure profile fields exist before calling getVisibleTeamProfileFieldsForMember"), TS.model.team.profile.fields.filter(function(n) {
            return (t || _.get(e.profile, ["fields", n.id, "value"])) && !n.is_hidden;
          }).map(function(t) {
            var n = _.get(e.profile, ["fields", t.id, "value"]),
              i = _.get(e.profile, ["fields", t.id, "alt"]),
              r = n && "date" === t.type ? TS.interop.datetime.convertISOtoUTCReadableDate(n) : i;
            return $.extend(!0, {
              value: n,
              alt: r
            }, t);
          })) : [];
        },
        isEntireTeamLoaded: function() {
          return t;
        }
      });
      var e, t = !1,
        i = function() {
          e = null;
        },
        r = function(e) {
          return e && e.length && _.remove(e, function(e) {
            return !e;
          }), !(e && e.length);
        },
        a = function() {
          _.get(window, "TS.model.team.profile.fields") || (TS.model.team = TS.model.team || {}, TS.model.team.profile = TS.model.team.profile || {}, TS.model.team.profile.fields = TS.model.team.profile.fields || []);
        },
        s = function(e) {
          if (!r(e)) {
            var t = !1,
              n = !1,
              i = TS.model.team.profile.fields.reduce(function(e, t) {
                return e[t.id] = t, e;
              }, {});
            e.forEach(function(e) {
              var r = i[e.id];
              r ? (n = n || d(r, e), t = t || r.ordering !== e.ordering, $.extend(!0, r, e)) : (TS.model.team.profile.fields.push(e), TS.model.members && "options_list" === e.type && (n = !0));
            }), t && TS.team.sortTeamProfileFieldsByOrdering(), n && l(e);
          }
        },
        o = function(e) {
          r(e) || (_.remove(TS.model.team.profile.fields, function(t) {
            return -1 !== e.indexOf(t.id);
          }), l(e));
        },
        l = function(e) {
          e && e.length && TS.model.members && e.forEach(function(e) {
            TS.model.members.forEach(function(t) {
              if (t.profile.fields && t.profile.fields[e.id || e]) {
                if (e.id) {
                  if ("options_list" !== e.type) return;
                  if (-1 !== e.possible_values.indexOf(t.profile.fields[e.id].value)) return;
                }
                var n = $.extend(!0, {}, t);
                delete n.profile.fields[e.id || e], TS.members.upsertMember(n);
              }
            });
          });
        },
        d = function(e, t) {
          return !(!TS.model.members || "options_list" !== t.type) && t.possible_values.some(function(t) {
            return -1 === e.possible_values.indexOf(t);
          });
        };
    }();
  },
  2528: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("teams", {
        added_sig: new signals.Signal,
        rename_sig: new signals.Signal,
        changed_sig: new signals.Signal,
        unlinked_sig: new signals.Signal,
        changed_icon_sig: new signals.Signal,
        onStart: function() {
          TS.boot_data.feature_shared_channels_client && (TS.isSocketManagerEnabled() ? TS.interop.SocketManager.socketMessageReceivedSig.add(TS.teams.ensureTeamsInDataArePresent) : TS.ms.on_msg_sig.add(TS.teams.ensureTeamsInDataArePresent), TS.teams.changed_icon_sig.add(i), TS.teams.rename_sig.add(i), TS.team.team_name_changed_sig.add(a));
        },
        getTeamById: function(t) {
          if (TS.boot_data.feature_shared_channels_client) {
            if (!_.isString(t)) return null;
            if (e[t]) return e[t];
            if (TS.model.team.id === t) return TS.model.team;
            if (_.find(TS.model.enterprise_teams, {
                id: t
              })) return _.find(TS.model.enterprise_teams, {
              id: t
            });
            var n = TS.model.teams;
            if (!n) return TS.console.warn("Trying to look up team by id (" + t + ") but TS.model.teams is not present."), null;
            for (var i, r = 0; r < n.length; r += 1)
              if (i = n[r], i.id === t) return e[t] = i, i;
            return TS.console.warn("team " + t + " not in local model"), null;
          }
        },
        getTeamByDomain: function(e) {
          if (!TS.boot_data.feature_shared_channels_client) return void TS.console.warn("external shared channels must be on to use this");
          if (!_.isString(e)) return null;
          if (TS.model.team.domain === e) return TS.model.team;
          if (!TS.model.teams) return TS.console.warn("TS.teams.getTeamByDomain() → TS.model.teams is missing."), null;
          var t = _.find(TS.model.teams, {
            domain: e
          });
          return t || null;
        },
        getTeamByMsg: function(e) {
          if (!TS.boot_data.feature_shared_channels_client) return void TS.console.warn("external shared channels must be on to use this");
          if (!_.isObject(e)) return null;
          var t = e.source_team_id;
          if (!t) return null;
          var n = TS.teams.getTeamById(t);
          return n || null;
        },
        getTeamNameByMember: function(e) {
          if (TS.boot_data.feature_shared_channels_client) {
            if (!_.isObject(e)) return null;
            var t = TS.teams.getTeamById(e.team_id);
            return t && t.name ? t.name : null;
          }
        },
        getTeamNameById: function(e) {
          if (TS.boot_data.feature_shared_channels_client) {
            var t = TS.teams.getTeamById(e);
            return _.isObject(t) && t && t.name ? t.name : null;
          }
        },
        updateTeamName: function(e) {
          if (e.name) {
            var t = TS.teams.getTeamById(e.source_team);
            t && (t = _.clone(t), t.name = e.name, TS.teams.upsertAndSignal(t));
          }
        },
        updateTeamIcon: function(e) {
          if (e.icon) {
            var t = TS.teams.getTeamById(e.source_team);
            t && (t = _.clone(t), t.icon = e.icon, TS.teams.upsertAndSignal(t));
          }
        },
        upsertAndSignal: function(e) {
          if (!TS.boot_data.feature_shared_channels_client) return void TS.console.warn("external shared channels must be on to use this");
          var t = TS.teams.upsertTeam(e);
          return "CHANGED" === t.status ? (-1 != t.what_changed.indexOf("icon") && TS.teams.changed_icon_sig.dispatch(t.team), -1 != t.what_changed.indexOf("name") && TS.teams.rename_sig.dispatch(t.team), -1 != t.what_changed.indexOf("unlinked") && TS.teams.unlinked_sig.dispatch(t.team)) : "ADDED" === t.status && TS.teams.added_sig.dispatch(t.team), t;
        },
        upsertTeam: function(n) {
          if (!TS.boot_data.feature_shared_channels_client) return void TS.console.warn("external shared channels must be on to use this");
          var i = TS.model.teams,
            r = TS.teams.getTeamById(n.id),
            a = "NOOP",
            s = [];
          if (r) {
            for (var o in n) "icon" === o ? n[o] && !TS.utility.areSimpleObjectsEqual(n[o], r[o]) && (r.icon = n.icon, a = "CHANGED", s.push(o)) : r[o] != n[o] && ("boolean" == typeof n[o] && !n[o] == !r[o] || (s.push(o), r[o] = n[o], a = "CHANGED"));
            n = r;
          } else a = "ADDED", TS.has_pri[4] && TS.log(4, 'adding team "' + n.id + '"'), t(), i.push(n), e[n.id] = n;
          return {
            status: a,
            team: n,
            what_changed: s
          };
        },
        ensureTeamsArePresent: function(e) {
          if (!TS.boot_data.feature_shared_channels_client) return TS.console.warn("external shared channels must be on to use this"), Promise.resolve();
          if (!_.isArray(e)) return Promise.reject(Error("t_ids is not an array"));
          var t = _.reject(e, TS.teams.getTeamById);
          return t.length ? n(t) : Promise.resolve();
        },
        ensureTeamsInDataArePresent: function(e) {
          if (!TS.boot_data.feature_shared_channels_client) return Promise.resolve();
          var t = TS.utility.extractAllTeamIds(e);
          return TS.teams.ensureTeamsArePresent(t);
        }
      });
      var e = {},
        t = function() {
          TS.boot_data.feature_shared_channels_client || TS.console.warn("external shared channels must be on to use this");
        },
        n = function(e) {
          if (!_.isArray(e)) return Promise.reject(Error("t_ids is not an array"));
          var t = {
            teams: e
          };
          return new Promise(function(e, n) {
            TS.api.callImmediately("team.info", t).then(function(t) {
              var n = [];
              t.data.teams.forEach(function(e) {
                n.push(TS.teams.upsertAndSignal(e).team);
              }), e(n);
            }, function(e) {
              n(Error(e.data && e.data.error || "unknown error"));
            });
          });
        },
        i = function(e) {
          e != TS.model.team && r(e), a(e);
        },
        r = function(e) {
          if (_.isObject(e)) {
            var t = TS.utility.teams.getMembersForTeam(e);
            t.length && _.forEach(t, function(e) {
              TS.members.changed_profile_sig.dispatch(e);
            });
          }
        },
        a = function(e) {
          if (_.isObject(e)) {
            var t = TS.shared.getActiveModelOb();
            TS.shared.isModelObShared(t) && TS.channels.shared_teams_updated_sig.dispatch(t);
          }
        };
    }();
  },
  2529: function(e, t, n) {
    ! function() {
      "use strict";

      function e(e, t) {
        var n = ["message"];
        return e.subtype && ("channel_join" === e.subtype || "group_join" === e.subtype ? n.push("joined", "automated") : "channel_leave" === e.subtype || "group_leave" === e.subtype ? n.push("left", "automated") : "channel_topic" === e.subtype || "group_topic" === e.subtype ? n.push("topic", "automated") : "channel_name" === e.subtype || "group_name" === e.subtype ? n.push("rename", "automated") : "channel_purpose" === e.subtype || "group_purpose" === e.subtype ? n.push("purpose", "automated") : "channel_archive" === e.subtype || "group_archive" === e.subtype ? n.push("archived", "automated") : "channel_unarchive" === e.subtype || "group_unarchive" === e.subtype ? n.push("unarchived", "automated") : "bot_message" === e.subtype ? n.push("bot_message") : "sh_room_shared" === e.subtype ? n.push("sh_shared", "automated") : "sh_room_created" === e.subtype ? n.push("sh_created", "automated") : "bot_add" === e.subtype || "bot_remove" === e.subtype || "bot_enable" === e.subtype || "bot_disable" === e.subtype ? n.push("bot_change", "automated") : "reminder_add" !== e.subtype && "reminder_delete" !== e.subtype || n.push("reminder_change", "automated")), TS.boot_data.feature_fix_files && n.push("feature_fix_files"), e.no_display && n.push("hidden"), t.for_search_display && n.push("for_search_display"), t.for_top_results_search_display && n.push("for_top_results_search_display"), t.starred_items_list && n.push("for_star_display"), t.for_mention_display && n.push("for_mention_display"), t.for_mention_rxn_display && n.push("for_mention_rxn_display"), t.is_ephemeral && n.push("ephemeral"), t.unprocessed && n.push("unprocessed"), t.show_resend_controls && n.push("resend"), t.highlight && n.push("highlight"), t.highlight_as_new && n.push("new"), t.app_id && n.push("is_app"), t.is_pinned && n.push("is_pinned"), t.show_channel_highlight && TS.boot_data.feature_sli_recaps_interface && n.push("show_recap"), t.is_highlighted_unfurl && TS.boot_data.feature_sli_recaps_interface && n.push("is_recap_unfurl"), t.highlight_feedback_options && TS.boot_data.feature_sli_recaps_interface && n.push("has_feedback_options"), t.highlight_is_leaving_feedback && TS.boot_data.feature_sli_recaps_interface && n.push("is_leaving_feedback"), t.highlight_has_left_feedback && TS.boot_data.feature_sli_recaps_interface && n.push("has_left_feedback"), t.standalone ? n.push("standalone") : n.push("dirty_hover_container"), t.show_user ? n.push("first") : (t.file && n.push("first"), t.is_in_conversation && n.push("first")), t.file && (n.push("file_reference"), t.is_mention ? n.push("file_mention") : n.push("file_share")), t.comment && (t.is_file_convo_continuation ? n.push("comment_continuation") : n.push("first")), t.is_root_msg && n.push("selected"), t.is_new_reply && n.push("new_reply"), t.is_tombstone && n.push("deleted"), TS.boot_data.feature_sli_recaps && (t.is_recap && (n.push("is_recap"), TS.boot_data.feature_sli_recaps_interface && n.push("show_recap_highlight")), t.show_recap_debug && n.push("show_recap_debug")), TS.boot_data.feature_new_broadcast && t.is_broadcast && n.push("thread_broadcast"), "unknown_members" === TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics) && _.get(t.member, "is_unknown") && n.push("member_is_unknown"), n;
      }

      function t(e) {
        return e.file.name === TS.utility.welcome_post.WELCOME_POST_NAME && "USLACKBOT" === e.user && e.file.user === TS.model.user.id;
      }
      TS.registerModule("templates.builders.msgs", {
        buildHTML: function(i, r) {
          r && TS.dir(0, i);
          try {
            var a = i.msg,
              s = i.model_ob,
              o = i.prev_msg,
              l = !!i.highlight,
              d = !!i.no_attachments,
              c = !!i.standalone,
              u = !(!c && !i.hide_actions),
              m = !!i.full_date;
            TS.model.prefs.fuller_timestamps && !m && (m = !TS.interop.datetime.isSameDay(TS.interop.datetime.toDateObject(a.ts), new Date));
            var p, f = !!i.relative_ts,
              h = i.jump_link ? new Handlebars.SafeString(i.jump_link) : "",
              g = !!i.starred_items_list,
              S = i.starred_items_actions,
              T = i.container_id ? "#" + i.container_id : "",
              b = !!i.enable_slack_action_links,
              v = !(!i || !i.highlight_as_new),
              y = "",
              w = TS.utility.members.getEntityFromMessage(a),
              k = !0,
              x = TS.interop.datetime.toDateObject(a.ts),
              M = !1,
              C = !1,
              I = !!a.is_pending,
              A = a.user,
              E = a.is_ephemeral,
              O = TS.templates.makeMsgDomId(a.ts),
              F = TS.utility.msgs.getMsgActions(a, s);
            A || (A = TS.templates.builders.getBotIdentifier(a));
            var B, D, R, H, P = TS.utility.msgs.shouldHaveBotLabel(a, w);
            O = i.msg_dom_id || O;
            var j = !!i.is_in_conversation,
              L = !!i.is_threads_view;
            if (P) {
              var U = TS.bots.getBotInfoByMsg(a);
              U && (B = _.get(U, "app_id"), D = _.get(U, "bot_id"), R = _.get(U, "team_id") ? U.team_id : _.get(a, "source_team_id")), H = !0;
            }
            if (o && ((p = "file_comment" === o.subtype && o.comment ? o.comment.user : o.user) || (p = TS.templates.builders.getBotIdentifier(o))), !a.no_display && !c)
              if (o) {
                var N = TS.interop.datetime.toDateObject(o.ts);
                if (a.subtype && "file_comment" === a.subtype && a.comment && (A = a.comment.user), -1 != TS.utility.msgs.automated_subtypes.indexOf(a.subtype) || "thread_broadcast" === a.subtype) k = !0;
                else if (p == A && -1 === TS.utility.msgs.automated_subtypes.indexOf(o.subtype))
                  if (!a.subtype && o.subtype && "file_comment" === o.subtype) k = !0;
                  else {
                    if (!o.subtype || TS.templates.builders.getBotIdentifier(o)) {
                      var G = o.thread_ts || o.ts,
                        W = a.thread_ts == G,
                        q = !a.thread_ts && !o.thread_ts;
                      (W || q) && (k = !1);
                    }!TS.utility.msgs.isTempMsg(a) || "bot_message" !== a.type && "USLACKBOT" !== a.user || (k = !0);
                  }
                if (!I && !TS.interop.datetime.isSameDay(x, N) && !j) {
                  M = !0;
                  var z = $(T + " div.day_divider");
                  if (z.length > 0) {
                    var K, V = $(z[z.length - 1]);
                    if (V.length) {
                      K = "";
                      try {
                        K = TS.templates.messages_day_divider({
                          ts: V.data("ts")
                        });
                      } catch (e) {
                        e.message || (e.message = ""), e.message += " $last_divider.data('ts'):" + V.data("ts"), TS.info("Problem with TS.templates.messages_day_divider 2.1: " + JSON.stringify(e));
                      }
                      V.replaceWith(K);
                    }
                    if (z.length > 1) {
                      var Y = $(z[z.length - 2]);
                      if (Y.length) {
                        K = "";
                        try {
                          K = TS.templates.messages_day_divider({
                            ts: Y.data("ts")
                          });
                        } catch (e) {
                          e.message || (e.message = ""), e.message += " $second_last_divider.data('ts'):" + Y.data("ts"), TS.info("Problem with TS.templates.messages_day_divider 3.1: " + JSON.stringify(e));
                        }
                        Y.replaceWith(K);
                      }
                    }
                  }
                }!I && TS.interop.datetime.distanceInMinutes(x, N) > TS.model.msg_activity_interval && (C = !0);
              } else j || (C = !0);
            C && (k = !0), "message" !== a.type && (k = !0), ("me_message" === a.subtype || o && "me_message" === o.subtype) && (k = !0);
            var J = !0;
            c && (J = !1);
            var Q = !1;
            TS.rxns.getExistingRxnsByKey(a._rxn_key) && (Q = !0), i.for_mention_rxn_display && (k = !1);
            var X, Z, ee = "#msgs_div" === T || "#unread_msgs_div" === T;
            TS.client && TS.client.highlights && !c && (X = ee && TS.client.highlights.msgIsHighlight(s.id, a.ts), Z = ee && TS.client.highlights.msgIsHighlightUnfurl(s.id, a.ts)), u = !(!u && !I);
            var te = {
              msg: a,
              model_ob: s,
              member: w,
              actions: F,
              show_user: k,
              unprocessed: I,
              highlight: l,
              do_inline_imgs: J,
              msg_dom_id: O,
              standalone: c,
              hide_actions: u,
              full_date: m,
              relative_ts: f,
              jump_link: h,
              show_resend_controls: a.ts in TS.model.display_unsent_msgs,
              starred_items_list: g,
              starred_items_actions: S,
              no_attachments: d,
              is_ephemeral: E,
              enable_slack_action_links: b,
              is_bot: P,
              bot_id: D,
              app_id: B,
              team_id: R,
              is_app_data_enabled: H,
              highlight_as_new: v,
              show_star: !g && !E,
              has_rxns: Q,
              for_mention_display: i.for_mention_display,
              for_mention_rxn_display: i.for_mention_rxn_display,
              for_search_display: i.for_search_display,
              for_top_results_search_display: i.for_top_results_search_display,
              ts_tip_delay_class: "ts_tip_delay_600",
              is_root_msg: i.is_root_msg,
              is_in_conversation: j,
              is_threads_view: L,
              file_title_only: "file_reaction" === a.subtype,
              is_slackbot_response: "slackbot_response" === a.subtype,
              show_channel_highlight: X,
              is_highlighted_unfurl: Z,
              show_briefing_feedback: i.briefing || l
            };
            (F.add_rxn || F.add_file_rxn || F.add_file_comment_rxn) && (te.show_rxn_action = !0), te.star_components = TS.templates.builders.buildStarComponents("message", a, s);
            var ne = !0;
            if (c && (ne = !1), TS.utility.msgs.isFileMsg(a) && (ne = !1), te.selectable = ne, j && (te.msg_dom_id = TS.templates.makeMsgDomIdInConversation(a.ts)), TS.utility.msgs.isMsgReply(a)) te.show_reply_action = !1;
            else {
              te.show_reply_action = TS.replies.canReplyToMsg(s, a, !0) && !i.is_root_msg, !te.show_reply_action && TS.utility.msgs.isFileMsg(a) && a.file && (te.show_comment_action = !0);
            }
            var ie = a.ts == a.thread_ts;
            if ((ie || !a.thread_ts) && j && TS.client && (te.format_for_thread_root = !0, s.is_im || s.is_mpim ? te.model_ob_name = TS.i18n.t("Direct message", "messages")() : te.model_ob_name = TS.i18n.t("in {channel_display_name}", "messages")({
                channel_display_name: TS.shared.getDisplayNameForModelOb(s)
              })), !ie || !a.reply_count || j || c || i.for_search_display || i.for_top_results_search_display || i.is_threads_view || (te.show_reply_bar = !0), te.is_tombstone = "tombstone" === a.subtype, te.is_new_reply = !!i.is_new_reply, !TS.boot_data.feature_new_broadcast || !TS.utility.msgs.isMsgReply(a) || "thread_broadcast" !== a.subtype || j || c || i.is_threads_view || (te.is_broadcast = !0, te.show_reply_action = !0), te.is_broadcast && a.root && (te.root_repliers_summary = new Handlebars.SafeString(TS.templates.builders.buildBroadcastRepliersSummaryHTML(a.root)), "tombstone" !== a.root.subtype)) {
              var re = a.root.text,
                ae = _.first(a.root.attachments);
              if (_.get(ae, "is_msg_unfurl")) {
                var se = ae.from_url && a.root.text === "<" + ae.from_url + ">";
                re && !se || (re = ae.text);
              }
              if (re) {
                var oe = TS.format.formatBroadcastExcerpt(re, a.root);
                oe.length > 150 && (oe = TS.utility.truncateHTML(oe, 150)), te.root_excerpt = new Handlebars.SafeString(oe);
              }
            }
            var le;
            if (le = "file_share" === a.subtype || "file_mention" === a.subtype ? a.file : "file_comment" === a.subtype ? a.comment : a, le && le.pinned_to && le.pinned_to.length > 0 ? te.is_pinned = _.some(le.pinned_to, function(e) {
                return e === s.id;
              }) : te.is_pinned = !1, te.is_pinned ? te.pin_html = TS.templates.builders.buildPinInfoHtml(a) : te.pin_html = "", TS.client && TS.client.highlights && !c && (te.is_recap = X, TS.client.highlights.shouldRenderHighlightsUI(s.id, a.ts) && (te.highlights_html = TS.templates.builders.buildHighlightsInfoHtml({
                recap: {
                  data: TS.client.highlights.getHighlight(s.id, a.ts)
                }
              })), te.show_recap_debug = TS.client.highlights.canShowRecapDebug(s.id, a.ts), te.highlight_is_leaving_feedback = TS.client.highlights.msgIsLeavingFeedback(s.id, a.ts)), TS.boot_data.feature_sli_briefing && TS.highlights_briefing && i.briefing && (te.show_recap_debug = "sli_debug_info" === TS.highlights_briefing.sli_recaps_debug_group), !a.subtype && (i.for_search_display || i.for_top_results_search_display) && a.file && (a.comment ? te.star_components = TS.templates.builders.buildStarComponents("file_comment", a.comment, a.file) : te.star_components = TS.templates.builders.buildStarComponents("file", a.file, null)), TS.utility.msgs.isTempMsg(a) || a.is_ephemeral || (i.for_search_display && TS.boot_data.page_needs_enterprise && a.team && TS.model.team_id != a.team && a.channel && !a.channel.is_shared && a.permalink ? te.permalink = a.permalink : te.permalink = TS.utility.msgs.constructMsgPermalink(s, a.ts, a.thread_ts), te.abs_permalink = TS.utility.msgs.constructAbsoluteMsgPermalink(s, a.ts, a.thread_ts)), i.for_top_results_search_display && TS.boot_data.page_needs_enterprise && a.team && TS.model.team.id != a.team && !a.channel.is_shared && (te.abs_permalink = a.permalink, te.archive_link = a.permalink, te.permalink = a.permalink), "file_share" === a.subtype || "file_mention" === a.subtype || "file_reaction" === a.subtype) {
              if (a.file) {
                var de, ce, _e = !0;
                if (te.file = a.file, te.edit = TS.files.getFileActions(a.file).edit, te.download = !("snippet" === a.file.mode || "post" === a.file.mode || "space" === a.file.mode || a.file.is_external), te.new_window = !te.edit && !te.download, te.abs_permalink = a.file.permalink, g || (te.star_components = TS.templates.builders.buildStarComponents("file", a.file, null)), te.lightbox = !1, 360 != a.file.thumb_360_w && 360 != a.file.thumb_360_h || (te.lightbox = !0), $.extend(te, TS.files.getFileTemplateArguments(a.file, 360)), te.is_message = !0, te.image_lazyload = !!TS.client && !TS.boot_data.feature_no_placeholders_in_messages, te.lightbox = !0, "file_share" === a.subtype && a.upload ? ("email" === a.file.mode && (te.is_added = !0), te.icon_class = TS.utility.getImageIconClass(a.file, "thumb_80")) : a.file.user != a.user && (te.uploader = TS.utility.members.getEntityFromFile(a.file), _e = !t(a)), ce = n.test(a.file.mode) ? TS.i18n.t("{file_pretty_name} snippet", "message")({
                    file_pretty_name: a.file.pretty_type
                  }) : /(email)/.test(a.file.mode) ? TS.i18n.t("email", "message")() : /(post|space)/.test(a.file.mode) ? TS.i18n.t("post", "message")() : (a.file.thumb_360 || a.file.thumb_360_gif) && -1 !== a.file.mimetype.indexOf("image/") ? TS.i18n.t("image", "message")() : TS.i18n.t("file", "message")(), te.uploader && _e) {
                  "file_share" === a.subtype && a.upload ? a.file.initial_comment ? (te.show_initial_comment = !0, de = n.test(a.file.mode) ? TS.i18n.t("added and commented on {uploader_name_possessive_html} {file_display_name}", "message") : TS.i18n.t("uploaded and commented on {uploader_name_possessive_html} {file_display_name}", "message")) : de = n.test(a.file.mode) ? TS.i18n.t("added {uploader_name_possessive_html} {file_display_name}", "message") : TS.i18n.t("uploaded {uploader_name_possessive_html} {file_display_name}", "message") : de = "file_mention" === a.subtype ? TS.i18n.t("mentioned {uploader_name_possessive_html} {file_display_name}", "message") : TS.i18n.t("shared {uploader_name_possessive_html} {file_display_name}", "message");
                  var ue = TS.templates.builders.makeMemberPreviewLink(te.uploader, !1),
                    me = TS.i18n.possessive(TS.members.getPrefCompliantMemberName(te.uploader)),
                    pe = "client" === TS.boot_data.app ? 'target="' + a.file.permalink + '" ' : "",
                    fe = '<a href="' + a.file.permalink + '" ' + pe + 'data-file-id="' + a.file.id + '">',
                    he = TS.i18n.t("{uploader_name}{uploader_name_affix}", "message")({
                      uploader_name: ue,
                      uploader_name_affix: me
                    }),
                    ge = "</a> " + he + fe;
                  te.file_share_html = de({
                    file_display_name: ce,
                    uploader_name_possessive_html: ge
                  });
                } else "file_share" === a.subtype && a.upload ? a.file.initial_comment ? (te.show_initial_comment = !0, de = n.test(a.file.mode) ? TS.i18n.t("added and commented on this {file_display_name}", "message") : TS.i18n.t("uploaded and commented on this {file_display_name}", "message")) : de = n.test(a.file.mode) ? TS.i18n.t("added this {file_display_name}", "message") : TS.i18n.t("uploaded this {file_display_name}", "message") : de = "file_mention" === a.subtype ? TS.i18n.t("mentioned this {file_display_name}", "message") : TS.i18n.t("shared this {file_display_name}", "message"), te.file_share_html = de({
                  file_display_name: ce
                });
              }
              te.file_share_html = new Handlebars.SafeString(te.file_share_html);
            } else "file_comment" === a.subtype && (o && !o.no_display && o.file && a.file && a.file.id == o.file.id && (M || (te.is_file_convo_continuation = !0)), te.show_comment_quote_icon = !0, o && !o.no_display && o.file && a.file && a.file.id == o.file.id && ("file_share" === o.subtype && o.upload && o.file.initial_comment && (M || (te.show_comment_quote_icon = !1)), "file_comment" === o.subtype && (M || (te.show_comment_quote_icon = !1))), te.file = a.file, te.icon_class = TS.utility.getImageIconClass(a.file, "thumb_40"), te.comment = a.comment, te.member = TS.utility.members.getEntityFromMessage(a), a.file && a.file.user != a.comment.user && (te.uploader = TS.utility.members.getEntityFromFile(a.file)), g || (te.star_components = TS.templates.builders.buildStarComponents("file_comment", a.comment, a.file)));
            var Se = e(a, te);
            return te.msg_classes = Se.join(" "), y += TS.templates.message(te), y = TS.format.replaceHighlightMarkers(y);
          } catch (e) {
            var Te = "";
            if (a) {
              Te = "msg.ts:" + a.ts, delete i.model_ob;
              try {
                i.msg = _.cloneDeep(a), i.msg.text = "REDACTED", Te += " " + JSON.stringify(i, null, "  ");
              } catch (e) {}
            }
            return e.message || (e.message = ""), e.message += " " + Te, TS.warn("Problem in TS.templates.builders.msgs.buildHTML with args: " + JSON.stringify(e.message)), TS.boot_data.feature_tinyspeck ? TS.templates.message_failed({
              subtype: a && a.subtype ? a.subtype : "",
              msg_ts: a ? a.ts : "",
              model_ob_id: s ? s.id : ""
            }) : "";
          }
        }
      });
      var n = /(snippet)/;
    }();
  },
  2530: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";

      function e(e) {
        var t = "",
          n = e.unread_highlight_cnt,
          i = e.unread_cnt;
        return n && !e.is_im ? t += n + " " + TS.i18n.t("unread highlight", "templates_builders")() + " " : i && (t += i + " " + TS.i18n.t("unread", "templates_builders")() + " "), i && (t += TS.i18n.t("{count, plural, =1 {message} other {messages}}", "templates_builders")({
          count: i
        })), t;
      }

      function t(e, t, n) {
        if (!e) return {};
        if (!t || "string" != typeof t || "channel" !== e && "group" !== e && "mpim" !== e && "im" !== e || (t = TS.shared.getModelObById(t)), !t) return {};
        if ("message" === e && n && "string" == typeof n) {
          var i = n;
          n = TS.channels.getChannelById(i), n || (n = TS.ims.getImById(i)), n || (n = TS.groups.getGroupById(i));
        }
        var r = {},
          a = [],
          s = [];
        s = ["star", "ts_icon", "ts_icon_star_o", "ts_icon_inherit"];
        var o = "ts_tip_top",
          l = t.id || t.ts,
          d = n ? n.id : null;
        if ("message" === e) {
          if (!d) return {};
          r["data-msg-id"] = l, r["data-c-id"] = d, TS.utility.msgs.isTempMsg(t) && s.push("invisible");
        } else if ("file" === e) r["data-file-id"] = l;
        else if ("file_comment" === e) r["data-comment-id"] = l, r["data-file-id"] = d, s.push("star_comment");
        else if ("channel" === e) o = "ts_tip_bottom", r["data-channel-id"] = l;
        else if ("group" === e) o = "ts_tip_bottom", r["data-group-id"] = l;
        else if ("im" === e) o = "ts_tip_bottom", r["data-im-id"] = l;
        else {
          if ("mpim" !== e) return TS.error("buildStar needs to handle star item type:" + e), {};
          o = "ts_tip_bottom", r["data-mpim-id"] = l;
        }
        s = _.concat(s, o), t.is_starred && (s.push("starred", "ts_icon_star"), s.splice(s.indexOf("ts_icon_star_o"), 1)), s.push("star_" + e), $.each(r, function(e, t) {
          a.push(e + '="' + t + '"');
        });
        var c = {
          message: TS.i18n.t("message", "templates_builders")(),
          file: TS.i18n.t("file", "templates_builders")(),
          file_comment: TS.i18n.t("file comment", "templates_builders")(),
          channel: TS.i18n.t("channel", "templates_builders")(),
          group: TS.i18n.t("channel", "templates_builders")(),
          im: TS.i18n.t("direct message", "templates_builders")(),
          mpim: TS.i18n.t("direct message", "templates_builders")()
        };
        return {
          attributes: a,
          class_names: s,
          html_attrs: r,
          readable_type: c[e],
          is_starred: t.is_starred
        };
      }
      TS.registerModule("templates.builders", {
        debug_items: {},
        debug_items_index: 0,
        buildStarComponents: function(e, n, i) {
          return t(e, n, i);
        },
        fileHTML: function(e, t) {
          t = t || {};
          var n = TS.utility.members.getEntityFromFile(e),
            i = TS.files.getFileActions(e),
            r = "hosted" === e.mode || "external" === e.mode,
            a = {
              member: n,
              file: e,
              for_search: t.for_search,
              is_enterprise: t.is_enterprise,
              for_files_list: !t.for_share_dialog,
              icon_class: TS.utility.getImageIconClass(e, "thumb_80"),
              is_email: "email" === e.mode,
              is_space: "space" === e.mode,
              is_post: "post" === e.mode,
              is_snippet: "snippet" === e.mode,
              is_hosted_or_external: r,
              has_image: r && e.thumb_80 && !e.has_rich_preview,
              can_share: !!i.share
            };
          return TS.client && (a.info_pane_visible = "details" === TS.model.ui_state.flex_name), a.supports_line_clamp = TS.environment.supports_line_clamp, "external" === e.mode && (a.external_filetype_html = TS.templates.builders.makeExternalFiletypeHTML(e)), "email" === e.mode && (a.to_more_count = e.to.length - 1, a.cc_more_count = e.cc.length - 1), TS.templates.file_list_item(a);
        },
        buildReplyBarHTML: function(e, t) {
          var n = {
              msg: e,
              model_ob: t,
              conversation_permalink: TS.utility.msgs.constructConversationPermalink(t, e.thread_ts)
            },
            i = e.replies;
          if (i && i.length) {
            n.num_replies = i.length;
            var r = _.chain(i).map(function(e) {
              return TS.members.getPotentiallyUnknownMemberById(e.user);
            }).compact().uniq().value();
            n.first_repliers = _.take(r, 5), n.additional_reply_count = r.length - n.first_repliers.length;
            var a = _.last(i).ts,
              s = TS.interop.datetime.toDateObject(a);
            TS.interop.datetime.isSameDay(s, new Date) ? 1 === n.num_replies ? n.last_reply_at = TS.i18n.t("Today at {time}", "threads")({
              time: TS.interop.datetime.toTime(a, {
                do24hrTime: TS.utility.date.do24hrTime()
              })
            }) : n.last_reply_at = TS.i18n.t("Last reply today at {time}", "threads")({
              time: TS.interop.datetime.toTime(a, {
                do24hrTime: TS.utility.date.do24hrTime()
              })
            }) : 1 === n.num_replies ? n.last_reply_at = TS.interop.datetime.toTimeAgo(a) : n.last_reply_at = TS.i18n.t("Last reply {time_ago}", "threads")({
              time_ago: TS.interop.datetime.toTimeAgo(a)
            });
          }
          return TS.templates.message_reply_bar(n);
        },
        formatSoundUrl: function(e, t) {
          return "";
        },
        buildAttachmentActions: function(e, t) {
          return e.actions.map(function(e) {
            switch (e.type) {
              case "button":
                return TS.templates.builders.buildAttachmentActionButtonHTML(e, t);
              case "select":
                return TS.templates.builders.buildAttachmentActionSelectHTML(e, t);
            }
          }).join("");
        },
        buildAttachmentHTML: function(e) {
          var t = e.msg_dom_id || TS.templates.makeMsgDomId(e.msg.ts),
            n = e.attachment,
            i = e.model_ob || TS.shared.getActiveModelOb();
          if (TS.templates.builders.shouldDoSimpleAttachment(n, e.msg)) {
            if (n.video_html) return TS.templates.builders.buildInlineVideoTogglerAndDiv(n.from_url, t);
            if (n.image_url) return TS.templates.builders.buildInlineImgTogglerAndDiv(n.from_url, t, e);
            if (n.audio_url) return " " + TS.templates.builders.formatSoundUrl(n, e.msg);
          }
          n.color && ("number" == typeof n.color && (n.color = n.color.toString()), n.color.indexOf ? n.color = n.color.replace(/#/g, "") : (TS.warn("msg " + e.msg.ts + " has an invalid (non string) color:" + n.color + " (removed in client)"), delete n.color));
          var r = [],
            a = [];
          if (n.fields)
            for (var s, o, l, d = 0; d < n.fields.length; d += 1) o = !0, s = n.fields[d], l && s.short && l.short && l._new_row && (o = !1), s._new_row = o, l = s, s.short ? r.push(s) : a.push(s);
          var c = !n._always_expand && n._short_text && !TS.inline_attachments.shouldExpandText(TS.templates.makeMsgAttachmentTextExpanderDomId(e.msg.ts, n._index)),
            u = !!n.more,
            m = n.from_url || n.ts_link || n.title_link || n.author_link,
            p = "reply_broadcast" === _.get(e.msg, "subtype"),
            f = n.thumb_link || m,
            h = !1;
          i ? !1 !== e.can_delete && (h = (n.id || 0 === n.id) && (n.from_url || e.msg.text) && (TS.model.user.is_admin && !i.is_im || TS.model.user.id == e.msg.user) && "pinned_item" !== e.msg.subtype && !p) : TS.warn("need to get model_ob passed in here somehow! for expanding messages in activity feed");
          var g = n.thumb_url && !n.image_url && !n.video_html && !n.audio_html,
            S = g ? n.proxied_thumb_url || n.thumb_url : null,
            T = !1,
            b = "";
          if (n.is_msg_unfurl) {
            var v = TS.utility.msgs.getMsg(n.ts, i.msgs);
            v && v.pinned_to && v.pinned_to.length > 0 && (T = _.some(v.pinned_to, function(e) {
              return e === i.id;
            })) && !p && (b = TS.templates.builders.buildPinInfoHtml(v));
          }
          var y = !1;
          p && (y = n.ts ? TS.interop.datetime.toTime(n.ts, {
            do24hrTime: TS.utility.date.do24hrTime()
          }) : TS.interop.datetime.toTime(e.msg.ts, {
            do24hrTime: TS.utility.date.do24hrTime()
          }));
          var w = n.from_url && e.has_container;
          p && (w = !0);
          var k = {
            is_text_collapsed: c,
            has_more: u,
            attachment: n,
            attachment_meta: y,
            pin_html: b,
            short_fields: r,
            long_fields: a,
            msg: e.msg,
            msg_dom_id: t,
            real_src: TS.utility.attachments.getMediaSource(n),
            is_standalone: !e.msg.text || e.msg.ignore_if_attachments_supported || !n.pretext,
            show_fields_table: "0" != TS.qs_args.show_fields_table,
            can_delete: h,
            thumb_link: f,
            small_thumb_url: S,
            show_fallback: TS.model.show_attachment_fallback,
            enable_slack_action_links: !0 === e.enable_slack_action_links
          };
          if (!e.from_post) {
            var x, M = "web" === TS.boot_data.app || !0 !== e.enable_slack_action_links;
            return M && (x = "web" === TS.boot_data.app ? "ARCHIVES" : TS.shared.getActiveModelOb().is_channel && !TS.shared.getActiveModelOb().is_member ? "CHANNEL_PREVIEW" : "OTHER"), k = _.assign(k, {
              attachment: n,
              has_actions: !(_.isEmpty(n.actions) && _.isEmpty(n.legacy_actions)),
              has_source: _.some(n._source),
              has_border: e.has_border,
              has_indent: n.indent,
              has_container: e.has_container,
              has_media: e.show_media_caret,
              has_text_content: !(!n.text && !n.title),
              has_thumb: !!g,
              has_footer: !!(n.footer || n.footer_icon || n.ts || n._attribution) && !p,
              disable_actions: M,
              disable_actions_reason: x,
              border_color: n.color && "#" + n.color || null,
              break_border: e.break_border,
              caret_location: TS.utility.attachments.getMediaCaretLocation(n)
            }), k.applied_classes = TS.utility.getAppliedClasses({
              inline_attachment: !0,
              standalone: k.is_standalone,
              has_thumb: k.has_thumb,
              can_delete: k.can_delete,
              clickable: w,
              message_unfurl: n._unfurl_type_message,
              reply_broadcast: p,
              is_pinned: T
            }), k.has_footer && k.attachment.is_msg_unfurl && k.attachment.channel_name && ("Direct Message" === k.attachment.channel_name ? k.attachment.footer = TS.i18n.t("Direct Message", "chat_messages")() : "External Message" === k.attachment.channel_name ? k.attachment.footer = TS.i18n.t("From {team_name}", "chat_messages")({
              team_name: k.attachment.team_name
            }) : k.attachment.is_thread_root_unfurl ? k.attachment.footer = TS.i18n.t("Thread in #{channel_name}", "chat_messages")({
              channel_name: k.attachment.channel_name
            }) : k.attachment.is_reply_unfurl ? k.attachment.footer = TS.i18n.t("From a thread in #{channel_name}", "chat_messages")({
              channel_name: k.attachment.channel_name
            }) : k.attachment.footer = TS.i18n.t("Posted in #{channel_name}", "chat_messages")({
              channel_name: k.attachment.channel_name
            })), TS.templates.message_attachment(k);
          }
          var C = !0,
            I = "";
          if (e.show_initial_caret || e.show_media_caret) {
            switch (TS.utility.attachments.getMediaType(n)) {
              case "video":
                var A = TS.model.inline_videos[n.from_url || n.thumb_url];
                if (A) {
                  I = TS.templates.builders.buildInlineVideoToggler(n.from_url || n.thumb_url, t, !0), C = TS.inline_videos.shouldExpand(t, A);
                }
                break;
              case "audio":
                var E = TS.model.inline_audios[n.audio_html || n.audio_url];
                E && (I = TS.templates.builders.buildInlineAudioToggler(n.audio_html || n.audio_url, t), C = TS.inline_audios.shouldExpand(t, E));
                break;
              case "other":
                var O = TS.model.inline_others[n.other_html];
                O && (I = TS.templates.builders.buildInlineOtherToggler(n.other_html, t), C = TS.inline_others.shouldExpand(t, O));
                break;
              case "image":
                var F = TS.model.inline_imgs[n.from_url || n.image_url];
                if (F) {
                  var B = !e.show_media_caret;
                  I = TS.templates.builders.buildInlineImgToggler(n.from_url || n.image_url, t, B), C = TS.inline_imgs.shouldExpand(t, F);
                }
                break;
              default:
                var D = TS.model.inline_attachments[n.from_url];
                D ? (I = TS.templates.builders.buildInlineAttachmentToggler(n.from_url, t), C = TS.inline_attachments.shouldExpand(t, D)) : TS.warn("no inline_attachment for " + n.from_url);
            }
          }
          return _.assign(k, {
            initial_caret_html: e.show_initial_caret ? new Handlebars.SafeString(I) : "",
            media_caret_html: e.show_media_caret ? new Handlebars.SafeString(I) : "",
            expand_media: !e.show_media_caret || C,
            expand_it: !e.show_initial_caret || C,
            bg_color: n.color || "e3e4e6",
            thumb_at_top: !window.attach_thumb_align_title,
            ts_link: m,
            small_thumb: g,
            max_width_class: g ? "right_thumb_max_w" : "",
            show_action_links: !0 === e.enable_slack_action_links,
            has_content: e.has_content
          }), TS.templates.spaces_attachment(k);
        },
        buildAttachmentActionButtonHTML: function(e, t) {
          t = !0 === t;
          var n = {
              _disabled: t,
              _loading: !1,
              id: "",
              name: "",
              style: "default",
              text: "",
              value: ""
            },
            i = {
              default: "",
              primary: "btn_primary",
              danger: "btn_danger"
            },
            r = e.clicked && e.clicked_text ? e.clicked_text : e.text,
            a = TS.emoji.graphicReplace(r),
            s = _.merge({}, n, e, {
              btn_class: i[e.style],
              current_text: new Handlebars.SafeString(a)
            });
          return TS.templates.attachment_actions_button(s);
        },
        buildAttachmentActionSelectHTML: function(e, t) {
          var n = TS.attachment_actions.select.getActionModel(e, t);
          return TS.templates.attachment_actions_select(n);
        },
        shouldDoSimpleAttachment: function(e, t) {
          var n = !1;
          return !t.standalone_attachment && ((e.image_url || e.audio_url) && e.from_url && (t && t.text && (-1 != t.text.indexOf(e.from_url) && (n = !0), TS.model.ampersands_are_inconsistent_in_from_urls && -1 != t.text.indexOf(e.from_url.replace(/&/g, "&amp;")) && (n = !0)), (e.service_name || e.title) && (n = !1)), n);
        },
        formatAttachments: function(e, t, n, i) {
          if (!e.attachments) return "";
          var r, a, s = "",
            o = [],
            l = e.attachments.length;
          for (e.attachments.length >= 20 && (e._shown_attachments || (e._shown_attachments = 20), l = e._shown_attachments), r = 0; r < l; r += 1) a = e.attachments[r], (a.pretext || 0 === r) && o.push([]), _.last(o).push(a);
          for (r = 0; r < o.length; r += 1) s += TS.templates.builders.formatAttachmentGroup(o[r], e, n, i, t);
          return e._shown_attachments < e.attachments.length && (s += TS.templates.builders.getShowMoreAttachmentHTML(e)), s;
        },
        formatAttachmentGroup: function(e, t, n, i, r) {
          n = !0 === n;
          var a = "",
            s = !1;
          e = e.map(function(e) {
            return TS.utility.attachments.getDecoratedAttachment(e, t);
          });
          var o = t && "reply_broadcast" === t.subtype;
          o && (s = !0);
          var l = s && _.some(e, TS.utility.attachments.getMediaType),
            d = !s || _.some(e, "color"),
            c = _.some(e, "from_url"),
            u = _.some(e, "indent"),
            m = !1;
          if (o) {
            var p = t.channel_id || _.get(e[1], "channel_id"),
              f = t.broadcast_thread_ts;
            if ((!p || !/\d+\.\d+/.test(f)) && e[1] && e[1].from_url) {
              var h = e[1].from_url,
                g = TS.utility.url.urlQueryStringParse(h);
              g.cid && (p = g.cid), g.thread_ts && (f = g.thread_ts);
            }
            if ((r = TS.shared.getModelObById(p)) && f) {
              f.indexOf(".") < 0 && (f = f.substr(0, 10) + "." + f.substr(10));
              var S = {
                thread_ts: f,
                model_ob_id: r.id,
                convo_href: TS.utility.msgs.constructConversationPermalink(r, f)
              };
              m = TS.templates.reply_broadcast_preamble(S), m = new Handlebars.SafeString(m);
            }
          }
          for (var T, b = 0; b < e.length; b += 1)
            if (T = e[b])
              if (T.from_url && (TS.boot_data.feature_attachments_inline || TS.templates.builders.shouldDoSimpleAttachment(T, t))) a += "";
              else if (T.ts && (T.ts_link = TS.utility.msgs.constructMsgPermalink(r, T.ts.toString())), TS.inline_attachments.shouldShow(T, t)) {
            if (T.actions && T.actions.length) {
              for (var v, y = ["button", "select"], w = [], k = [], x = 0; x < T.actions.length; x += 1) v = T.actions[x], _.includes(y, v.type) ? k.push(v) : w.push(v);
              w.length && (T.legacy_actions = w), k.length && (T.actions = k);
            }
            var M = TS.utility.attachments.hasContent(T, ["pretext"]);
            if (M) {
              var C = e[b + 1];
              a += TS.templates.builders.buildAttachmentHTML({
                model_ob: r,
                attachment: T,
                has_border: d,
                has_indent: u,
                has_container: s,
                break_border: d && C && T.color != C.color,
                url: null,
                msg: t,
                msg_dom_id: i,
                show_initial_caret: TS.templates.builders.shouldDoSimpleAttachment(T, t),
                show_media_caret: T.video_html || T.image_url || T.audio_html || T.audio_url || T.other_html,
                enable_slack_action_links: n,
                has_content: M
              });
            }
            o && 0 === b && (a += TS.templates.reply_broadcast_count(T));
          } else a += "";
          else TS.info("formatAttachments bad attach"), TS.dir(0, t);
          return a || T.pretext ? TS.templates.attachment_group({
            model_ob: r,
            first_attachment: e[0],
            preamble: m,
            msg: t,
            has_border: d,
            has_indent: u,
            has_container: s,
            has_link: c,
            use_shrink_wrap: l,
            attachments_html: a && new Handlebars.SafeString(a),
            enable_slack_action_links: n
          }) : a;
        },
        getShowMoreAttachmentHTML: function(e) {
          var t = e.attachments.length - e._shown_attachments,
            n = "",
            i = e.ts,
            r = TS.shared.getActiveModelOb(),
            a = !1;
          return !TS.client || r.is_channel && !r.is_member ? n = TS.i18n.t("{count, plural, =1 {# more attachment} other {# more attachments}}", "attachments")({
            count: t
          }) : (a = !0, n = e.attachments.length - e._shown_attachments > 20 ? TS.i18n.t("Show next 20 items", "attachments")() : TS.i18n.t("{count, plural, =1 {Show remaining # item} other {Show remaining # items}}", "attachments")({
            count: t
          })), TS.templates.show_more_attachment({
            ts: i,
            btn_text: n,
            clickable_show_more_link: a
          });
        },
        formatMessageAsAttachment: function(e, t) {
          var n, i, r;
          if (e.user ? i = e.user : "file_comment" === e.subtype && e.comment && e.comment.user ? i = e.comment.user : e.bot_id && (r = e.bot_id), !e.text && e.attachments && e.attachments.length >= 1 && e.attachments[0].is_share) n = {
            author_name: e.attachments[0].author_name,
            author_subname: e.attachments[0].author_subname,
            author_icon: e.attachments[0].author_icon,
            author_link: e.attachments[0].author_link
          };
          else if (i) {
            var a = TS.members.getMemberById(i);
            n = {
              author_name: TS.members.getMemberRealName(a),
              author_subname: TS.boot_data.feature_name_tagging_client ? TS.members.getMemberProfileFieldDisplayName(a) : a.name,
              author_icon: a.profile.image_24,
              author_link: TS.boot_data.feature_name_tagging_client || TS.boot_data.feature_shared_channels_client ? "/team/" + i : "/team/" + _.escape(a.name)
            };
          } else if (r) {
            var s = TS.bots.getBotByMsg(e);
            n = {
              author_subname: e.username || s.name,
              author_icon: s && s.icons.image_48,
              author_link: "/services/" + r
            }, e.icons && e.icons.emoji && e.icons.image_64 && (n.author_icon = e.icons.image_64);
          }
          if (!n) return TS.error("no author for msg " + e.ts), "";
          var o = _.extend({}, n, {
            is_msg_unfurl: !0,
            id: 1,
            ts: e.ts,
            from_url: TS.utility.msgs.constructAbsoluteMsgPermalink(t, e.ts),
            msg_subtype: e.subtype
          });
          if (e.text) o.text = e.text, o.mrkdwn_in_hash = {
            text: !0
          };
          else if (e.attachments && e.attachments.length >= 1) {
            var l = e.attachments[0];
            o.text = l.text || l.pretext;
          }
          TS.inline_attachments.massageAttachment(o, 0), o = TS.utility.attachments.getDecoratedAttachment(o, e), o.from_url = null;
          var d = TS.templates.builders.buildAttachmentHTML({
            attachment: o,
            msg: e,
            can_delete: !1,
            has_content: !0,
            has_border: !0
          });
          return d = TS.templates.attachment_group({
            msg: e,
            attachments_html: new Handlebars.SafeString(d)
          });
        },
        buildSHRoomAttachment: function(e) {
          var t = e.participants.map(function(e) {
              return TS.members.getPotentiallyUnknownMemberById(e);
            }),
            n = e.created_by === TS.model.user.id,
            i = TS.model.active_im_id ? TS.members.getMemberById(TS.ims.getImById(TS.model.active_im_id).user) : null,
            r = i ? TS.members.getPrefCompliantMemberName(i) : "",
            a = e.date_end ? e.date_end - e.date_start : 0,
            s = TS.i18n.t("Shared a call", "calls")();
          e.channels && e.channels[0] === TS.model.active_cid && (s = TS.i18n.t("Started a call", "calls")());
          var o = "";
          o = e.date_end ? e.is_dm_call && e.was_missed ? e.was_rejected ? n ? TS.i18n.t("{name} declined the call", "calls")({
            name: r
          }) : TS.i18n.t("You declined the call", "calls")() : n ? TS.i18n.t("{name} missed the call", "calls")({
            name: r
          }) : TS.i18n.t("You missed the call", "calls")() : TS.i18n.t("This call has ended", "calls")() : e.is_dm_call ? 2 === e.participants.length ? TS.i18n.t("On a call with {name}", "calls")({
            name: r
          }) : (n ? TS.i18n.t("Calling {name}", "calls") : TS.i18n.t("{name} is calling you", "calls"))({
            name: r
          }) : -1 != e.participants.indexOf(TS.model.user.id) ? TS.i18n.t("You are on this call", "calls")() : TS.i18n.t("Join this call", "calls")();
          var l;
          return l = e.name ? TS.i18n.t("{room_name} call", "calls")({
            room_name: e.name
          }) : TS.i18n.t("Untitled", "calls")(), TS.templates.message_screenhero_attachment({
            room: e,
            participants: t,
            room_url: TS.utility.calls.getUrlForRoom(e),
            meta_room_name: _.escape(l),
            room_name: _.escape(e.name),
            title: s,
            description: o,
            show_description_ellipsis: 2 === e.participants.length,
            show_room_link: !e.date_end,
            expand_it: TS.inline_room_previews.shouldExpand(e.id),
            duration: a
          });
        },
        buildJoinLeaveRollUpStr: function(e) {
          return e.is_in ? e.joined && e.left ? TS.i18n.t("left and rejoined", "templates_builders")() : TS.i18n.t("joined", "templates_builders")() : e.joined && e.left ? TS.i18n.t("joined and left", "templates_builders")() : TS.i18n.t("left", "templates_builders")();
        },
        buildBotStr: function(e, t) {
          var n;
          n = t && t.is_shared ? e.bot_link ? TS.bots.getBotNameByBotLink(e.bot_link) : TS.bots.getBotNameByBotLink(e.text) : TS.bots.getBotNameById(e.bot_id);
          var i = "<" + TS.boot_data.team_url + "services/" + e.bot_id + "/|" + n + ">";
          switch (e.subtype) {
            case "bot_add":
              return TS.i18n.t("added an integration to this channel: {bot_url}", "templates_builders")({
                bot_url: i
              });
            case "bot_enable":
              return TS.i18n.t("enabled an integration in this channel: {bot_url}", "templates_builders")({
                bot_url: i
              });
            case "bot_disable":
              return TS.i18n.t("disabled an integration in this channel: {bot_url}", "templates_builders")({
                bot_url: i
              });
            case "bot_remove":
              return TS.i18n.t("removed an integration from this channel: {bot_url}", "templates_builders")({
                bot_url: i
              });
            default:
              return TS.i18n.t("updated an integration in this channel: {bot_url}", "templates_builders")({
                bot_url: i
              });
          }
        },
        formatMessageByType: function(e, t, n, a, s) {
          var o, l = "";
          if (e.ignore_if_attachments_supported) return l;
          t = !0 === t, n = !0 === n;
          var d, c, u, m, p, f, h, g, S, T, b, v;
          if ((e._jl_rollup_hash || e._jl_rolled_up_in) && r && (!e._jl_rolled_up_in || e._jl_rolled_up_in !== e.ts)) return l;
          if (r = !1, e._jl_rollup_hash && e.user in e._jl_rollup_hash.users) {
            c = TS.members.getPotentiallyUnknownMemberById(e.inviter);
            var y = e._jl_rollup_hash.users[e.user],
              w = TS.templates.builders.buildJoinLeaveRollUpStr(y);
            m = a.is_group || a.is_private ? TS.model.group_prefix + a.name : a ? "#" + a.name : TS.i18n.t("the channel", "templates_builders")(), w += " " + m, y.is_in && c && (w = TS.i18n.t("{join_or_leave} {channel_name} by invitation from {inviter}", "templates_builders")({
              join_or_leave: TS.templates.builders.buildJoinLeaveRollUpStr(y),
              channel_name: m,
              inviter: "<@" + c.id + "|" + c.name + ">"
            }));
            var k, x = [],
              M = [],
              C = TS.i18n.t("along with", "templates_builders")();
            y.is_in && c && (k = "<@" + c.id + "|" + c.name + ">");
            var I, A, E, O = 0;
            for (var F in e._jl_rollup_hash.users)
              if (F != e.user) {
                if (O == i) {
                  r = !0;
                  break;
                }
                E = e._jl_rollup_hash.users[F], E.is_in === y.is_in ? E.is_in ? (E.inviter == e.user && (C = TS.i18n.t("and invited", "templates_builders")(), I = !0), !E.inviter || E.inviter != y.inviter && E.inviter != e.user ? M.push("<@" + F + "> " + TS.templates.builders.buildJoinLeaveRollUpStr(E)) : x.push("<@" + F + ">")) : x.push("<@" + F + ">") : M.push("<@" + F + "> " + TS.templates.builders.buildJoinLeaveRollUpStr(E)), O += 1;
              }
            if (x.length) {
              if (A = I ? M.length ? r ? k ? TS.i18n.t('{joined_or_left} {channel_name} by invitation from {inviter}, and invited {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders") : TS.i18n.t('{joined_or_left} {channel_name}, and invited {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders") : k ? TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}, and invited {users}. Also, {others}.", "templates_builders") : TS.i18n.t("{joined_or_left} {channel_name}, and invited {users}. Also, {others}.", "templates_builders") : r ? k ? TS.i18n.t('{joined_or_left} {channel_name} by invitation from {inviter}, and invited {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders") : TS.i18n.t('{joined_or_left} {channel_name}, and invited {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders") : k ? TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}, and invited {users}", "templates_builders") : TS.i18n.t("{joined_or_left} {channel_name}, and invited {users}", "templates_builders") : M.length ? r ? k ? TS.i18n.t('{joined_or_left} {channel_name} by invitation from {inviter}, along with {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders") : TS.i18n.t('{joined_or_left} {channel_name}, along with {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders") : k ? TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}, along with {users}. Also, {others}.", "templates_builders") : TS.i18n.t("{joined_or_left} {channel_name}, along with {users}. Also, {others}.", "templates_builders") : r ? k ? TS.i18n.t('{joined_or_left} {channel_name} by invitation from {inviter}, along with {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders") : TS.i18n.t('{joined_or_left} {channel_name}, along with {users} and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders") : k ? TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}, along with {users}", "templates_builders") : TS.i18n.t("{joined_or_left} {channel_name}, along with {users}", "templates_builders"), w += ", " + C + " " + x.join(", "), l = TS.format.formatNoHighlightsNoSpecials(w), r && (l += TS.i18n.t(' and <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>', "templates_builders")()), M.length) {
                var B = TS.i18n.t(". Also, {others}", "templates_builders")({
                  others: M.join(", ")
                });
                l += TS.format.formatNoHighlightsNoSpecials(B), r && (l += TS.i18n.t(' along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>', "templates_builders")()), l += ".";
              }
            } else M.length ? (A = r ? k ? TS.i18n.t('{joined_or_left} {channel_name} by invitation from {inviter}. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders") : TS.i18n.t('{joined_or_left} {channel_name}. Also, {others} along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>.', "templates_builders") : k ? TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}. Also, {others}.", "templates_builders") : TS.i18n.t("{joined_or_left} {channel_name}. Also, {others}.", "templates_builders"), w += TS.i18n.t(". Also, {others}", "templates_builders")({
              others: M.join(", ")
            }), l = TS.format.formatNoHighlightsNoSpecials(w), r && (l += TS.i18n.t(' along with <a onclick="TS.client.channel_page.showMemberSectionAndHighlight();">some others</a>', "templates_builders")()), l += ".") : (l = TS.format.formatNoHighlightsNoSpecials(w), A = k ? TS.i18n.t("{joined_or_left} {channel_name} by invitation from {inviter}", "templates_builders") : TS.i18n.t("{joined_or_left} {channel_name}", "templates_builders"));
            if (TS.boot_data.feature_tinyspeck) {
              l = A({
                joined_or_left: TS.templates.builders.buildJoinLeaveRollUpStr(y),
                channel_name: m,
                inviter: c ? TS.format.formatNoHighlightsNoSpecials("<@" + c.id + "|" + c.name + ">") : "",
                users: TS.format.formatNoHighlightsNoSpecials(x.join(", ")),
                others: TS.format.formatNoHighlightsNoSpecials(M.join(", "))
              });
            }
          } else if ("channel_join" === e.subtype) c = TS.members.getMemberById(e.inviter), m = a.is_private ? TS.model.group_prefix + a.name : a ? "#" + a.name : TS.i18n.t("the channel", "templates_builders")(), c ? (p = "<@" + c.id + "|" + c.name + ">", o = TS.i18n.t("joined {channel_name} from an invitation by {inviter}", "templates_builders")({
            channel_name: m,
            inviter: p
          }), l = TS.format.formatNoHighlightsNoSpecials(o, e)) : l = TS.i18n.t("joined {channel_name}", "templates_builders")({
            channel_name: m
          });
          else if ("channel_leave" === e.subtype) m = a.is_private ? TS.model.group_prefix + a.name : a ? "#" + a.name : TS.i18n.t("the channel", "templates_builders")(), l = TS.i18n.t("left {channel_name}", "templates_builders")({
            channel_name: m
          });
          else if ("channel_name" === e.subtype) l = TS.i18n.t('renamed the channel from "{old_name}" to "{new_name}"', "templates_builders")({
            old_name: e.old_name,
            new_name: e.name
          });
          else if ("channel_topic" === e.subtype) e.topic ? (TS.boot_data.feature_name_tagging_client && (h = _.unescape(e.topic)), h = TS.format.formatWithOptions(e.topic, e, {
            no_highlights: !0
          }), l = TS.i18n.t('set the channel topic: <span class="topic no_jumbomoji">{topic}</span>', "templates_builders")({
            topic: h
          })) : l = TS.i18n.t("cleared the channel topic", "templates_builders")();
          else if ("channel_purpose" === e.subtype) e.purpose ? (g = e.purpose, TS.boot_data.feature_name_tagging_client && (g = _.unescape(g)), g = TS.format.formatWithOptions(g, e, {
            no_highlights: !0
          }), l = TS.i18n.t('set the channel purpose: <span class="purpose no_jumbomoji">{purpose}</span>', "templates_builders")({
            purpose: g
          })) : l = TS.i18n.t("cleared the channel purpose", "templates_builders")();
          else if ("group_join" === e.subtype) d = a, f = d ? TS.model.group_prefix + d.name : TS.i18n.t("the private channel", "templates_builders")(), c = TS.members.getMemberById(e.inviter), c ? (p = "<@" + c.id + "|" + c.name + ">", o = TS.i18n.t("joined {group_name} from an invitation by {inviter}", "templates_builders")({
            group_name: f,
            inviter: p
          }), l = TS.format.formatNoHighlightsNoSpecials(o, e)) : l = TS.i18n.t("joined {group_name}", "templates_builders")({
            group_name: f
          });
          else if ("group_leave" === e.subtype) d = a, f = d ? TS.model.group_prefix + d.name : TS.i18n.t("the private channel", "templates_builders")(), l = TS.i18n.t("left {group_name}", "templates_builders")({
            group_name: f
          });
          else if ("group_name" === e.subtype) l = TS.i18n.t('renamed the private channel from "{old_name}" to "{new_name}"', "templates_builders")({
            old_name: e.old_name,
            new_name: e.name
          });
          else if ("group_topic" === e.subtype) e.topic ? (h = TS.format.formatWithOptions(e.topic, e, {
            no_highlights: !0
          }), l = TS.i18n.t('set the channel topic: <span class="no_jumbomoji">{topic}</span>', "templates_builders")({
            topic: h
          })) : l = TS.i18n.t("cleared the channel topic", "templates_builders")();
          else if ("group_purpose" === e.subtype) e.purpose ? (g = TS.format.formatWithOptions(e.purpose, e, {
            no_highlights: !0
          }), l = TS.i18n.t('set the channel purpose: <span class="no_jumbomoji">{purpose}</span>', "templates_builders")({
            purpose: g
          })) : l = TS.i18n.t("cleared the channel purpose", "templates_builders")();
          else if ("group_archive" === e.subtype)
            if (d = a, f = d ? TS.model.group_prefix + d.name : TS.i18n.t("the private channel", "templates_builders")(), S = _.get(TS.model.enterprise, "name", ""), b = TS.i18n.t("your team admin", "templates_builders")(), e.user && (T = TS.members.getMemberById(e.user), b = TS.format.formatNoHighlightsNoSpecials("<@" + T.id + "|" + T.name + ">")), TS.client && d && d.is_archived)
              if (TS.model.archive_view_is_showing) l = 1 == d.is_moved ? TS.i18n.t("moved {group_name} to another {enterprise_name} team. The contents up until this point are still browsable and available in search.", "templates_builders")({
                group_name: f,
                enterprise_name: S,
                mover_name: b,
                name_for_url: d.id
              }) : TS.i18n.t("archived {group_name}. The contents will still be browsable and available in search.", "templates_builders")({
                group_name: f,
                name_for_url: d.id
              });
              else {
                var D = "'" + d.id + "'";
                l = 1 == d.is_moved ? TS.i18n.t("moved {group_name} to another {enterprise_name} team. The contents up until this point are still browsable and available in search.", "templates_builders")({
                  group_name: f,
                  enterprise_name: S,
                  mover_name: b,
                  name_for_url: d.id
                }) : TS.i18n.t('archived {group_name}. The contents will still be browsable and available in search. \t\t\t\t\t\t\tIt can also be un-archived at any time. To close it now, <a onclick="{method}({group_id})">click here</a>.', "templates_builders")({
                  group_name: f,
                  name_for_url: d.id,
                  method: "TS.shared.closeArchivedChannel",
                  group_id: D
                });
              }
          else 1 == d.is_moved ? l = TS.i18n.t("moved {group_name} to another {enterprise_name} team", "templates_builders")({
            group_name: f,
            enterprise_name: S
          }) : 0 == d.is_moved && (l = TS.i18n.t("archived {group_name}", "templates_builders")({
            group_name: f
          }));
          else if ("group_unarchive" === e.subtype) d = a, f = d ? TS.model.group_prefix + d.name : TS.i18n.t("the private channel", "templates_builders")(), l = TS.i18n.t("un-archived {group_name}", "templates_builders")({
            group_name: f
          });
          else if ("channel_archive" === e.subtype) {
            var R = "'" + a.id + "'";
            m = a.is_private ? TS.model.group_prefix + a.name : a ? "#" + a.name : TS.i18n.t("the channel", "templates_builders")(), S = _.get(TS.model.enterprise, "name", ""), TS.client && 1 == a.is_moved ? (e.user && (T = TS.members.getMemberById(e.user), b = TS.format.formatNoHighlightsNoSpecials("<@" + T.id + "|" + T.name + ">")), l = TS.model.archive_view_is_showing ? TS.i18n.t("moved {channel_name} to another {enterprise_name} team. The contents up until this point are still browsable and available in search.", "templates_builders")({
              channel_name: m,
              enterprise_name: S,
              mover_name: b,
              name_for_url: a.id
            }) : TS.i18n.t('moved {channel_name} to another {enterprise_name} team. The contents up until this point are still browsable and available in search. \t\t\t\t\t\tTo close it now, <a onclick="TS.channels.closeArchivedChannel({channel_id})">click here</a>.', "templates_builders")({
              channel_name: m,
              enterprise_name: S,
              mover_name: b,
              name_for_url: a.id,
              channel_id: R
            })) : TS.client && a ? l = TS.model.archive_view_is_showing ? TS.i18n.t("archived {channel_name}. The contents will still be browsable and available in search.", "templates_builders")({
              channel_name: m,
              name_for_url: a.id
            }) : TS.i18n.t('archived {channel_name}. The contents will still be browsable and available in search. \t\t\t\t\t\tIt can also be un-archived at any time. To close it now, <a onclick="TS.channels.closeArchivedChannel({channel_id})">click here</a>.', "templates_builders")({
              channel_name: m,
              name_for_url: a.id,
              channel_id: R
            }) : a && 1 == a.is_moved && (l = TS.i18n.t("moved {channel_name} to another {enterprise_name} team", "templates_builders")({
              channel_name: m,
              enterprise_name: S
            }));
          } else "channel_unarchive" === e.subtype ? (m = a.is_private ? TS.model.group_prefix + a.name : a ? "#" + a.name : TS.i18n.t("the channel", "templates_builders")(), l = TS.i18n.t("un-archived {channel_name}", "templates_builders")({
            channel_name: m
          })) : "me_message" === e.subtype ? l = "<i>" + TS.format.formatWithOptions(e.text, e, {
            do_inline_imgs: t
          }) + "</i>" : "play_sound" === e.subtype ? l = TS.i18n.t('played "{msg_sound}"', "templates_builders")({
            msg_sound: e.sound
          }) : "sh_room_shared" === e.subtype || "sh_room_created" === e.subtype ? (e.subtype, !s && e._room_id && (u = TS.rooms.getRoomById(e._room_id)), s ? l += "<span>" + TS.i18n.t("Shared a call", "templates_builders")() + "</span>" : u && (l += TS.templates.builders.buildSHRoomAttachment(u))) : "bot_add" === e.subtype || "bot_enable" === e.subtype || "bot_updated" === e.subtype || "bot_disable" === e.subtype || "bot_remove" === e.subtype ? (v = TS.templates.builders.buildBotStr(e, a), l = TS.format.formatWithOptions(v, e, {
            do_inline_imgs: t,
            enable_slack_action_links: n,
            no_highlights: !0
          })) : l = "reminder_add" === e.subtype || "reminder_delete" === e.subtype ? TS.format.formatWithOptions(e.text, e, {
            do_inline_imgs: t,
            enable_slack_action_links: n,
            no_highlights: !0
          }) : TS.format.formatWithOptions(e.text, e, {
            do_inline_imgs: t,
            enable_slack_action_links: n
          });
          return l || "" === l ? l = TS.utility.msgs.handleSearchHighlights(l) : (TS.warn("no html msg.subtype:" + e.subtype), "");
        },
        msgHtmlForSearch: function(e, t, n, i, r) {
          "bot_message" !== e.subtype && (e.subtype = null);
          var a = "";
          return "extract" === n ? (a += '<div class="search_result_with_extract">', a += '<div class="extract_expand_text">' + TS.i18n.t("Expand", "template_builders")() + "</div>", a += '<div class="extract_expand_icons blue"><i class="ts_icon ts_icon_chevron_up up_arrow"></i><i class="ts_icon ts_icon_chevron_down down_arrow"></i></div>') : a += "context" === n ? '<div class="search_result_for_context">' : '<div class="search_result_for_extra_context">', a += TS.templates.builders.msgs.buildHTML({
            msg: e,
            msg_dom_id: TS.templates.makeMsgDomIdInSearch(e.ts, i),
            model_ob: t,
            container_id: "search_message_results",
            standalone: !0,
            for_search_display: !0,
            search_result_type: n,
            prev_msg: r
          }), a += "</div>";
        },
        msgHtmlForSearchTopResults: function(e) {
          "bot_message" !== e.subtype && (e.subtype = null);
          var t = (!e.extracts || 0 == e.extracts.length) && e.attachments;
          return TS.templates.builders.msgs.buildHTML({
            msg: e,
            msg_dom_id: TS.templates.makeMsgDomIdInSearchTopResults(e.ts, e, "sort_top_results"),
            model_ob: e.channel,
            container_id: "search_message_results",
            standalone: !0,
            for_top_results_search_display: !0,
            no_attachments: !t
          });
        },
        buildMsgHTMLForSearchTopResults: function(e) {
          return TS.templates.builders.msgHtmlForSearchTopResults(e);
        },
        buildMsgHTMLForSearch: function(e) {
          var t = e.channel,
            n = "",
            i = [];
          e.previous_2 && i.push(e.previous_2), e.previous && i.push(e.previous), i.push(e), e.next && i.push(e.next), e.next_2 && i.push(e.next_2), i.length > 1 && !TS.search.view.resultHasExtracts(e) && (e.force_extract_type = "extract", e.previous && (e.previous.force_extract_type = "context"), e.next && (e.next.force_extract_type = "context"));
          var r;
          return i.forEach(function(a, s) {
            var o;
            o = a.force_extract_type ? a.force_extract_type : TS.search.view.determineMessageResultType(i, s), !a.permalink && e.permalink && "extract" !== o && (a.permalink = e.permalink), !a.team && e.team && "extract" !== o && (a.team = e.team), n += TS.templates.builders.msgHtmlForSearch(a, t, o, e, r), r = a;
          }), n;
        },
        search_ellipsis: '<span class="extract_ellipsis">&hellip;</span>',
        buildStar: function(e, n, i) {
          var r = t(e, n, i);
          return _.isObject(r) ? TS.templates.star(r) : {};
        },
        buildStarWithTip: function(e, n, i) {
          var r = t(e, n, i);
          return _.isObject(r) ? TS.templates.star_with_tip(r) : {};
        },
        buildMentionHTML: function(e) {
          var t = e.message,
            n = "";
          if (!t) return n;
          if (("file_share" === t.subtype || "file_mention" === t.subtype || "file_comment" === t.subtype || "file_reaction" === t.subtype) && !t.file) return n;
          var i = TS.shared.getModelObById(e.channel);
          if (!i) return n;
          var r, a = [],
            s = "",
            o = "",
            l = "",
            d = "reaction" === e.type;
          if (o = TS.templates.builders.strBuilder('<button type="button" class="btn_link msg_right_link msg_jump" data-cid="${cid}">' + TS.i18n.t("Jump", "templates_builders")() + "</button>", {
              cid: i.id
            }), l = TS.templates.builders.msgs.buildHTML({
              msg: t,
              model_ob: i,
              standalone: !0,
              jump_link: o,
              no_attachments: !!t.text,
              for_mention_display: !0,
              for_mention_rxn_display: d
            }), n = l, d) {
            var c = TS.rxns.getRxnKeyByMsgType(t);
            if (!(r = TS.rxns.getExistingRxnsByKey(c))) return "";
            var _ = r[r.length - 1],
              u = _.users[_.users.length - 1];
            if (!TS.rxns.getRxnFromRxns(r, _.name)) return "";
            var m, p = TS.members.getMemberById(u),
              f = TS.rxns.getAllUniqueRxners(r, u),
              h = f.length + 1,
              g = "file_reaction" === t.subtype;
            if (2 == h) {
              var S = TS.members.getMemberById(f[0]);
              m = g ? TS.i18n.t('<span class="mention_rxn_summary_members">{user} & {another_user}</span> reacted to your file.', "rxn") : TS.i18n.t('<span class="mention_rxn_summary_members">{user} & {another_user}</span> reacted to your message.', "rxn"), s = m({
                user: TS.templates.builders.makeMemberPreviewLink(p, !0),
                another_user: TS.templates.builders.makeMemberPreviewLink(S)
              });
            } else if (h > 2) {
              var T = f.map(function(e) {
                  return TS.members.getPrefCompliantMemberNameById(e, !0, !0);
                }),
                b = h - 1;
              m = g ? TS.i18n.t('<span class="mention_rxn_summary_members">{user} & <span class="ts_tip ts_tip_multiline ts_tip_lazy ts_tip_top" title="{names}">{count, plural, =1 {# other} other {# others}}</span></span> reacted to your file.', "rxn") : TS.i18n.t('<span class="mention_rxn_summary_members">{user} & <span class="ts_tip ts_tip_multiline ts_tip_lazy ts_tip_top" title="{names}">{count, plural, =1 {# other} other {# others}}</span></span> reacted to your message.', "rxn"), s = m({
                user: TS.templates.builders.makeMemberPreviewLink(p, !0),
                names: TS.i18n.listify(T).join(""),
                count: b
              });
            } else m = g ? TS.i18n.t('<span class="mention_rxn_summary_members">{user}</span> reacted to your file.', "rxn") : TS.i18n.t('<span class="mention_rxn_summary_members">{user}</span> reacted to your message.', "rxn"), s = m({
              user: TS.templates.builders.makeMemberPreviewLink(p, !0)
            });
            a = r.filter(function(e) {
              return TS.emoji.isValidName(e.name);
            }).slice(0, 4).map(function(e) {
              return new Handlebars.SafeString(TS.emoji.graphicReplace(":" + e.name + ":"));
            });
            var v = {
              ts: t.ts,
              rxns_to_display: a,
              msg_html: new Handlebars.SafeString(l),
              rxn_members: new Handlebars.SafeString(s),
              jump_link_html: new Handlebars.SafeString(o),
              is_file_reaction: g
            };
            t.thread_ts && (v.thread_ts = t.thread_ts), n = TS.templates.mentions_rxn(v);
          }
          return n;
        },
        buildMentions: function() {
          TS.mentions.weaveInRxnRecords();
          var e = "",
            t = null,
            n = TS.model.user;
          if (!n.mentions || !n.mentions.length) return e;
          var i = [];
          return i = n.mentions, $.each(i, function(n, i) {
            var r;
            try {
              r = TS.templates.builders.buildMentionHTML(i);
            } catch (e) {
              TS.error("Problem building mention html for " + i.message.ts + " in " + i.channel), TS.error(e);
            }
            if (r) {
              var a = "",
                s = TS.shared.getModelObById(i.channel),
                o = i.message,
                l = !t;
              t && !TS.utility.date.sameDay(TS.interop.datetime.toDateObject(t.rxn_ts || t.message.ts), TS.interop.datetime.toDateObject(i.rxn_ts || o.ts)) && (l = !0), l && (t && (a = "</div>"), a += '<div class="mention_day_container_div">' + TS.templates.messages_day_divider({
                ts: i.rxn_ts || o.ts
              }));
              var d = t && t.channel;
              s && (s.is_channel || s.is_mpim || s.is_group) && (d != s.id || l) && (a += TS.templates.mentions_item({
                model_ob: s
              })), e += a + r, t = i;
            }
          }), e && (e += "</div>"), e;
        },
        buildStarredItemHTML: function(e) {
          var t, n = "<div class='star_item'>",
            i = {
              star: e,
              current_user_id: TS.model.user.id
            };
          if ("message" === e.type) {
            var r = e.message,
              a = !1;
            if (!(t = TS.shared.getModelObById(e.channel))) return TS.warn("channel " + e.channel + " for this starred message was probably deleted"), "";
            if (t.is_im) {
              var s = TS.members.getMemberById(t.user);
              e.message.recipient = s, TS.ims.isImWithDeletedMember(t) && (a = !0);
            }
            var o = "";
            a || (o = TS.templates.builders.strBuilder('<button type="button" class="btn_unstyle star_jump msg_right_link btn btn_outline" data-cid="${cid}">' + TS.i18n.t("Jump", "templates_builders")() + "</button>", {
              cid: t.id
            })), n += TS.templates.builders.msgs.buildHTML({
              msg: r,
              model_ob: t,
              standalone: !0,
              starred_items_list: !0,
              starred_items_actions: !0,
              jump_link: o,
              no_attachments: !!r.text,
              full_date: !0
            });
          } else if ("file" === e.type) n += TS.templates.builders.fileHTML(e.file);
          else if ("channel" === e.type || "group" === e.type) {
            if (!(t = TS.shared.getModelObById(e.channel))) return TS.warn("channel or group " + e.channel + " was probably deleted"), "";
            i.model_ob = t, n += TS.templates.star_item(i);
          } else i.from_starred_item = !0, n += TS.templates.star_item(i);
          return n += "</div>";
        },
        buildPinInfoHtml: function(e) {
          var t = {},
            n = TS.pins.getPinData(e);
          if (n && n.created_by && n.created) {
            var i = TS.members.getMemberById(n.created_by);
            t.user = i, t.ts = n.created, t.complete_data = t.user && t.ts;
          } else t.complete_data = !1;
          var r = TS.templates.pinned_message_info(t);
          return new Handlebars.SafeString(r);
        },
        buildHighlightsInfoHtml: function(e) {
          var t = TS.templates.highlights_message_info(e);
          return new Handlebars.SafeString(t);
        },
        buildInlineImgTogglerAndDiv: function(e, t, n) {
          return TS.model.inline_imgs[e] ? TS.templates.builders.buildInlineImgToggler(e, t) + " " + TS.templates.builders.buildInlineImgDiv(e, t, n) : "";
        },
        buildInlineImgToggler: function(e, t, n, i) {
          var r = TS.model.inline_imgs[e];
          if (!r) return TS.console.warn(8675309, "buildInlineImgToggler did not find anything in TS.model.inline_imgs for key:" + e), "";
          var a = TS.inline_imgs.shouldExpand(t, r, i),
            s = r.link_url || e,
            o = r.bytes && r.bytes > TS.model.inline_img_byte_limit,
            l = r.width && r.height && r.width * r.height > TS.model.inline_img_pixel_limit,
            d = !l,
            c = "",
            u = "";
          if (!a && (!TS.model.prefs.obey_inline_img_limit || o) || l) {
            var m = !r.internal_file_id && TS.model.prefs.expand_inline_imgs && !1 !== TS.model.expandable_state["img_" + t + r.src];
            if (m && l) d = !1, u = TS.i18n.t("(Not automatically expanded because {img_width}x{img_height} is too large to display inline.)", "templates_builders")({
              img_width: r.width,
              img_height: r.height
            }), c = '<span class="too_large_for_auto_expand"> ' + u + "</span>";
            else if (m && o) {
              var p = TS.i18n.t("Open original in new tab", "templates_builders")(),
                f = "<a " + TS.utility.makeRefererSafeLink(s) + ' target="_blank" title="' + p + '">';
              TS.model.show_inline_img_size_pref_reminder && !TS.model.shown_inline_img_size_pref_reminder_once ? (u = TS.i18n.t('(Not automatically expanded because {file_size} is too large. \t\t\t\t\t\tYou can <a class="cursor_pointer too_large_but_expand_anyway" data-real-src="{real_src}">expand it anyway</a> or {referer_link_a_tag}open it in a new window</a>. \t\t\t\t\t\tYou can also <a class="cursor_pointer" onclick="TS.ui.prefs_dialog.start(\'messages_media\', \'#prefs_inline_media\')">change your preferences</a> to allow images of any file size to auto expand.)', "templates_builders")({
                file_size: TS.utility.convertFilesize(r.bytes),
                real_src: _.escape(r.src),
                referer_link_a_tag: f
              }), TS.model.shown_inline_img_size_pref_reminder_once = !0) : u = TS.i18n.t('(Not automatically expanded because {file_size} is too large. \t\t\t\t\t\tYou can <a class="cursor_pointer too_large_but_expand_anyway" data-real-src="{real_src}">expand it anyway</a> or {referer_link_a_tag}open it in a new window</a>.)', "templates_builders")({
                file_size: TS.utility.convertFilesize(r.bytes),
                real_src: _.escape(r.src),
                referer_link_a_tag: f
              }), c = '<span class="too_large_for_auto_expand"> ' + u + "</span>";
            }
          }
          var h = r.bytes && !0 !== n ? '<span class="inline_img_bytes ' + (c ? "hidden" : "") + '"> (' + TS.utility.convertFilesize(r.bytes) + ")</span>" : "",
            g = {
              collapser_class: "msg_inline_img_collapser",
              expander_class: "msg_inline_img_expander",
              real_src: r.src,
              expand_it: a
            },
            S = TS.templates.inline_attachment_toggler({
              inline_attachment: g
            });
          return h + c + (d ? S : "");
        },
        buildInlineImgDiv: function(e, t, n) {
          n = n || {};
          var i = TS.model.inline_imgs[e];
          if (!i) return "";
          var r, a = TS.inline_imgs.shouldExpand(t, i, n),
            s = i.link_url || e,
            o = !n.flush_with_attachment && i.width > 0 && i.height > 0;
          i.internal_file_id && (r = TS.files.getFileById(i.internal_file_id));
          var l = !!TS.client && !TS.boot_data.feature_no_placeholders_in_messages,
            d = "",
            c = "clear_both msg_inline_img_holder msg_inline_holder";
          a || (c += " hidden");
          var u = i.height < 50,
            m = i.width < 200,
            p = m || u;
          p && (c += " overflow_preview_actions", m && (c += " overflow_preview_actions_width")), r && (c += " file_container"), c += " msg_inline_holder_rounded", o || (c += " file_container_fixed_dimensions"), d += '<div data-real-src="' + _.escape(i.src) + '" class="' + c + '" ', i.internal_file_id && (d += 'data-file-id="' + i.internal_file_id + '" '), o && (d += 'style="width:' + i.width + 'px;" '), d += ">";
          var f = "ctrl";
          TS.model.is_mac && (f = "cmd");
          var h, g = TS.i18n.t("{cmd_key}+click to open original in new tab", "templates_builders")({
              cmd_key: f
            }),
            S = !n || !n.hasOwnProperty("maybe_show_file_viewer") || n.maybe_show_file_viewer;
          if (i.internal_file_id)
            if (r && 0 === r.mimetype.indexOf("image/"))
              if (h = S, "dropbox" === r.external_type || "gdrive" === r.external_type || "box" === r.external_type || "onedrive" === r.external_type) {
                var T = r.thumb_720 ? r.thumb_720 : r.thumb_360;
                d += "<a " + TS.utility.makeRefererSafeLink(s) + ' target="_blank" title="' + g + '" class="file_viewer_external_link" data-src="' + _.escape(T) + '"data-link-url="' + _.escape(s) + '">';
              } else d += h ? '<a href="' + s + '" target="_blank" class="file_viewer_channel_link file_viewer_link" data-file-id="' + i.internal_file_id + '">' : '<a href="' + s + '" target="_blank" title="' + g + '" class="file_preview_link thumbnail_link" data-file-id="' + i.internal_file_id + '">';
          else d += "<a " + TS.utility.makeRefererSafeLink(s) + ' target="_blank" class="' + r.filetype + '">';
          else {
            var b = "",
              v = "";
            S ? b = "file_viewer_external_link" : v = TS.i18n.t("Click to open original in new tab", "templates_builders")(), d += "<a " + TS.utility.makeRefererSafeLink(s) + ' target="_blank" title="' + v + '" class="' + b + '" data-src="' + _.escape(i.src) + '" data-link-url="' + _.escape(i.link_url) + '"', i.width && (d += ' data-width="' + _.escape(i.width) + '"'), i.height && (d += ' data-height="' + _.escape(i.height) + '"'), i.rotation && (d += ' data-rotation="' + _.escape(i.rotation) + '"'), i.content_type && (d += ' data-content-type="' + _.escape(i.content_type) + '"'), d += ">";
          }
          if (o && (d = d.replace("<a ", '<a style="width:' + i.width + 'px;" ')), d += '<div class="msg_inline_img_container">', d += '<div class="file_preview_preserve_aspect_ratio" ', o)
            if (r && p) d += 'style="padding-top: ' + i.height + 'px;" ';
            else {
              var y = "calc(" + i.height + " / " + i.width + " * 100% )";
              d += 'style="padding-top: -moz-' + y + "; padding-top: -webkit-" + y + "; padding-top: " + y + ';" ';
            }
          else {
            var w, k, x = i.display_w || i.width,
              M = i.display_h || i.height,
              C = x / M;
            x <= 574 && M <= 300 ? (w = x, k = M) : 574 / 300 > C ? (w = 300 * x / M, k = 300) : (w = 574, k = 574 * M / x), d += 'style="width: ' + Math.round(w) + "px; height: " + Math.round(k) + 'px;"';
          }
          d += ">", i.proxied_src = TS.utility.getImgProxyURLWithOptions(i.src, {});
          var I = _.escape(i.proxied_src || i.src),
            A = l ? "msg_inline_img msg_inline_child hidden" : "msg_inline_img msg_inline_child",
            E = l ? 'data-real-background-image="' + I + '"' : 'style="background-image:url(' + I + ');"',
            O = l ? 'data-real-src="' + I + '"' : 'src="' + I + '"';
          return d += '<figure class="' + A + '" ' + E + ">", d += "<img " + O + " />", d += "</figure>", d += "</div>", d += "</div>", d += "</a>", r && (d += TS.templates.message_file_preview_actions({
            file: r,
            download: "hosted" === r.mode,
            new_window: !0
          })), d += "</div>";
        },
        buildInlineEmailDiv: function(e, t) {
          var n = TS.files.getFileById(e);
          if (!n) return "";
          var i = {
            file: n,
            is_message: !0,
            to_more_count: n.to.length - 1,
            cc_more_count: n.cc.length - 1,
            msg_dom_id: t
          };
          return TS.templates.file_email(i);
        },
        buildInlineAttachmentToggler: function(e, t) {
          var n = TS.model.inline_attachments[e];
          if (!n) return "";
          var i = TS.inline_attachments.shouldExpand(t, n),
            r = {
              real_src: n.from_url,
              expand_it: i
            };
          return TS.templates.inline_attachment_toggler({
            inline_attachment: r
          });
        },
        buildInlineRoomPreviewToggler: function(e) {
          var t = TS.inline_room_previews.shouldExpand(e),
            n = {
              collapser_class: "msg_inline_room_preview_collapser",
              expander_class: "msg_inline_room_preview_expander",
              expand_it: t
            };
          return " " + TS.templates.inline_attachment_toggler({
            inline_attachment: n
          });
        },
        buildInlineAudioToggler: function(e, t) {
          var n = TS.model.inline_audios[e];
          return n ? TS.templates.attachment_inline_media_toggler({
            is_expanded: TS.inline_audios.shouldExpand(t, n),
            src: n.src,
            media_type: "audio"
          }) : "";
        },
        buildInlineAudioDiv: function(e, t, n) {
          var i = TS.model.inline_audios[e];
          if (!i) return "";
          var r = TS.inline_audios.shouldExpand(t, i),
            a = {
              src: i.src,
              expand_it: r,
              content: n
            };
          return TS.templates.attachment_inline_audio_div({
            inline_audio: a
          });
        },
        buildInlineOtherToggler: function(e, t) {
          var n = TS.model.inline_others[e];
          return n ? TS.templates.attachment_inline_media_toggler({
            is_expanded: TS.inline_others.shouldExpand(t, n),
            src: n.src,
            media_type: "other"
          }) : "";
        },
        buildInlineOtherDiv: function(e, t, n) {
          var i = TS.model.inline_others[e];
          if (!i) return "";
          var r = TS.inline_others.shouldExpand(t, i);
          return '<div data-real-src="' + _.escape(i.src) + '" class="clear_both msg_inline_other_holder msg_inline_holder ' + (r ? "" : "hidden") + '">' + n + "</div>";
        },
        buildInlineVideoTogglerAndDiv: function(e, t) {
          return TS.model.inline_videos[e] ? TS.templates.builders.buildInlineVideoToggler(e, t) + " " + TS.templates.builders.buildInlineVideoDiv(e, t) : "";
        },
        buildInlineVideoToggler: function(e, t, n) {
          var i = TS.model.inline_videos[e];
          return i ? TS.templates.attachment_inline_media_toggler({
            is_expanded: TS.inline_videos.shouldExpand(t, i),
            src: i.src,
            title: n ? "" : i.title,
            media_type: "video",
            is_keyboard_navigable: !0
          }) : "";
        },
        buildInlineVideoDiv: function(e, t) {
          var n = TS.model.inline_videos[e];
          if (!n) return "";
          var i = TS.inline_videos.shouldExpand(t, n),
            r = n.link_url || e,
            a = !!TS.client && !TS.boot_data.feature_no_placeholders_in_messages,
            s = !0;
          n.html || (s = !1);
          var o = {
            real_src: n.src,
            data_url: e,
            referrer_safe_url_attributes: TS.utility.makeRefererSafeLink(r),
            hide_by_default: a,
            show_play: s,
            proxied_src_or_src: n.proxied_src || n.src,
            display_w: n.display_w,
            display_h: n.display_h,
            expand_it: i
          };
          return TS.templates.message_inline_video({
            inline_video: o
          });
        },
        buildComments: function(e) {
          for (var t, n = e.comments, i = "", r = 0; r < n.length; r += 1) t = TS.members.getPotentiallyUnknownMemberById(n[r].user), i += TS.templates.builders.buildCommentHTML({
            file: e,
            comment: n[r],
            show_comment_actions: !0,
            member: t
          });
          return i;
        },
        buildCommentHTML: function(e) {
          return TS.templates.comment(e);
        },
        buildCommentStandalone: function(e, t) {
          var n, i = TS.utility.members.getEntityFromFile(t);
          return "snippet" === t.mode ? n = TS.i18n.t("snippet", "comments")() : "post" === t.mode ? n = TS.i18n.t("post", "comments")() : "space" === t.mode ? n = TS.i18n.t("space", "comments")() : "hosted" !== t.mode && "external" !== t.mode || (n = TS.i18n.t("file", "comments")()), TS.templates.comment_standalone({
            comment: e,
            file: t,
            file_type: n,
            entity: i,
            current_user_id: TS.model.user.id
          });
        },
        buildTeamListHTML: function(e, t, n) {
          var i = TS.members.allocateTeamListMembers(e),
            r = i.members,
            a = i.disabled_members,
            s = i.deleted_bots,
            o = i.bots,
            l = i.restricted_members,
            d = i.ultra_restricted_members,
            c = !1;
          (o.length || s.length) && (c = !0);
          var _ = !1;
          (l.length || d.length || n) && (_ = !0);
          var u = !1;
          (a.length || n) && (u = !0);
          var m, p = !1,
            f = !1;
          p = "" !== TS.model.team.plan && !TS.model.user.is_restricted, m = TS.model.user_groups.filter(function(e) {
            return !e.date_delete;
          }), f = !m.length;
          var h = $("#team_tabs"),
            g = TS.permissions.members.canEditUserGroups(),
            S = TS.permissions.members.canCreateAndDeleteUserGroups();
          h.html(TS.templates.user_group_tabs({
            show_members: !!r.length,
            members: n ? [] : r,
            show_restricted_members: _,
            restricted_members: n ? [] : l.concat(d),
            show_disabled_members: u,
            disabled_members: n ? [] : a,
            show_user_groups: p,
            user_groups: m,
            show_user_groups_edit: g,
            show_user_groups_add: S,
            is_enterprise: TS.boot_data.page_needs_enterprise
          }));
          var T = {
            full_profile_filter: !0,
            is_long_list_view: t,
            include_bots: !0,
            include_deleted: !1
          };
          if (TS.members.view.bindTeamFilter("#team_filter", "#team_list_scroller", T), $("#team_filter input").bind("focus", function() {
              $("#team_filter .icon_search").addClass("indifferent_grey");
            }).bind("blur", function() {
              $("#team_filter .icon_search").removeClass("indifferent_grey");
            }), p) {
            var b = h.find(".tab_action:not(#search)"),
              v = $("#team_block");
            h.find("li a").on("click", function() {
              var e = $(this).data("action"),
                t = TS.permissions.members.canEditUserGroups(),
                n = TS.permissions.members.canCreateAndDeleteUserGroups();
              if (b.addClass("hidden"), "user_group_edit" === e) {
                if (!t && !n) return;
                b.removeClass("hidden"), v.addClass("hidden");
              } else v.removeClass("hidden");
              h.find("#" + e).removeClass("hidden");
            });
          }
          return $("#team_tabs").find("li.tab").on("click", function(e) {
            var t = $(e.currentTarget).find("a").data("name");
            TS.model.ui_state.tab_name = t, TS.storage.storeUIState(TS.model.ui_state);
            var n = $("#search");
            TS.client && TS.ui.utility.updateClosestMonkeyScroller($("#team_list_members")), TS.web && TS.web.members && TS.web.members.lazyload && TS.web.members.lazyload.trigger("resize"), $("#team_list_members").trigger("resize"), "user_groups" === t ? (TS.view.rebuildUserGroupList(), n.toggleClass("hidden", !TS.model.user_groups.length)) : n.removeClass("hidden");
          }), TS.templates.team_list({
            members: r,
            bots: o,
            show_bots: c,
            show_restricted_members: _,
            restricted_members: l,
            ultra_restricted_members: d,
            show_disabled_members: u,
            disabled_members: a,
            deleted_bots: s,
            show_user_groups: p,
            user_groups: m,
            show_user_groups_help: f,
            is_long_list_view: t
          });
        },
        buildUserGroupHTML: function(e, t) {
          return TS.templates.user_group_list_item({
            user_group: e,
            is_flexpane: t
          });
        },
        buildUserGroupListHTML: function(e, t) {
          for (var n, i = [], r = [], a = TS.permissions.members.canCreateAndDeleteUserGroups(), s = 0; s < e.length; s += 1) n = e[s], n.date_delete ? (n.can_delete = !n.auto_type && !n.is_external, r.push(n)) : i.push(n);
          var o = !t && !i.length && !r.length || t && !i.length;
          return TS.templates.user_group_list({
            user_groups: i,
            disabled_user_groups: r,
            show_toggle: a,
            is_flexpane: t,
            show_user_groups_help: o
          });
        },
        makeChannelPrefix: function(e) {
          return e ? e.is_group || e.is_private ? '<ts-icon class="ts_icon_lock"></ts-icon>' : e.is_channel ? "#" : "" : "";
        },
        makeChannelLink: function(e, t, n, i) {
          if (!e) return "ERROR: MISSING CHANNEL";
          var r = "";
          TS.shared.isModelObOrgShared(e) ? r = _.trim(TS.templates.shared_channel_icon({
            tooltip: n,
            tooltip_position: i
          })) : TS.shared.isModelObShared(e) && (r = _.trim(TS.templates.shared_channels_icon({
            tooltip: n,
            tooltip_position: i
          })));
          var a = TS.utility.getChannelStringIdentifierForUrl(e),
            s = TS.utility.shouldLinksHaveTargets() ? 'target="/archives/' + a + '"' : "",
            o = TS.templates.builders.makeChannelPrefix(e);
          return '<a href="/archives/' + a + '" ' + s + ' class="channel_link" data-channel-id="' + e.id + '">' + (t ? "" : o) + e.name + r + "</a>";
        },
        makeChannelLinkEnterpriseSearchResult: function(e) {
          return '<a href="' + e.permalink + '"target="' + TS.templates.builders.newWindowName() + '" data-channel-id="' + e.channel.id + '">#' + e.channel.name + "</a>";
        },
        makeChannelPath: function(e) {
          return "/messages/" + TS.utility.getChannelStringIdentifierForUrl(e);
        },
        makeChannelLinkAriaLabelSafe: function(t) {
          t || TS.warn("No valid channel to make channel link aria label");
          var n = _.escape(t.name),
            i = TS.model.active_channel_id === t.id ? TS.i18n.t("active channel", "templates_builders")() : TS.i18n.t("channel", "templates_builders")(),
            r = e(t),
            a = null;
          TS.templates.builders.showDraftIcon(t) && (a = TS.i18n.t("draft", "messages")());
          var s = n + ", " + i + (r ? ", " + r : "") + (a ? ", " + a : "");
          return new Handlebars.SafeString(s);
        },
        makeGroupLink: function(e, t, n, i) {
          if (!e) return "ERROR: MISSING GROUP";
          var r = "";
          e.is_shared && (r = TS.templates.shared_channel_icon({
            tooltip: n,
            tooltip_position: i
          }));
          var a = TS.utility.shouldLinksHaveTargets() ? 'target="/archives/' + e.id + '"' : "";
          return '<a href="/archives/' + e.id + '" ' + a + ' class="group_link" data-group-id="' + e.id + '">' + (t ? "" : TS.model.group_prefix) + e.name + r + "</a>";
        },
        makeGroupLinkAriaLabelSafe: function(t) {
          t || TS.warn("No valid group to make private channel link aria label");
          var n = _.escape(t.name),
            i = TS.model.active_group_id === t.id ? TS.i18n.t("active channel", "templates_builders")() : TS.i18n.t("channel", "templates_builders")(),
            r = e(t),
            a = null;
          TS.templates.builders.showDraftIcon(t) && (a = TS.i18n.t("draft", "messages")());
          var s = n + ", " + i + (r ? ", " + r : "") + (a ? ", " + a : "");
          return new Handlebars.SafeString(s);
        },
        makeTeamsThatHaveComplianceExportsBlurb: function(e) {
          if (!e || !e.is_shared) return "";
          var t;
          t = e.is_global_shared ? _.filter(TS.model.enterprise_teams, "has_compliance_export") : _(e.shared_team_ids).map(function(e) {
            return TS.enterprise.getTeamById(e);
          }).filter("has_compliance_export").value();
          var n = TS.i18n.listify(_.map(t, "name")).join(""),
            i = TS.i18n.t('{team_or_teams} {teams_count, plural, =1 {has} other {have}} <a href="https://get.slack.help/hc/{locale}/articles/204897248-Understanding-Slack-data-exports" target="_blank">Compliance Exports</a> enabled which allows their Team Owners to export communication history.', "templates_builders")({
              team_or_teams: n,
              teams_count: n.length,
              locale: TS.i18n.zdLocale()
            });
          return new Handlebars.SafeString(i);
        },
        makeMpimLink: function(e, t) {
          if (!e) return "ERROR: MISSING MPIM";
          var n, i, r = TS.mpims.getMpimArchivesPath(e);
          return TS.utility.shouldLinksHaveTargets() && (n = TS.mpims.getMpimArchivesPath(e)), t && (i = TS.mpims.getTooltipText(e)), TS.templates.mpim_link({
            target: n,
            href: r,
            title: i,
            mpim: e
          });
        },
        makeMemberPreviewLink: function(e, t) {
          if (!e) return "";
          !0 !== t && (t = !1);
          var n, i, r = TS.boot_data.feature_name_tagging_client || TS.boot_data.feature_shared_channels_client ? e.id : _.escape(e.name),
            a = TS.templates.builders.makeMemberColorClass(e);
          return e.is_service ? (i = TS.utility.shouldLinksHaveTargets() ? 'target="/services/' + e.id + '"' : "", a += " app_preview_link", n = '<a href="/services/' + e.id + '" ' + i + ' class="message_sender service_link ' + a + '">') : (i = TS.utility.shouldLinksHaveTargets() ? 'target="/team/' + r + '"' : "", a += e.is_bot ? " app_preview_link" : " member member_preview_link", a += " " + TS.templates.builders.makeMemberTypeBadgeClass(e), n = '<a href="/team/' + r + '" ' + i + ' class="message_sender ' + a + '" data-member-id="' + e.id + '">'), t && e.id == TS.model.user.id ? n += TS.i18n.t("You", "templates_builders")() : n += TS.members.getPrefCompliantMemberName(e, !0), n += TS.templates.builders.makeMemberTypeBadgeCompact(e, !1), n += "</a>", (e.is_bot || e.is_service) && (n += '<span class="bot_label">' + TS.i18n.t("APP", "templates_builders")() + "</span>"), "unknown_members" === TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics) && e.is_unknown && (n = TS.templates.message_member_unknown()), n;
        },
        showDraftIcon: function(e) {
          if (!_.isObject(e)) return !1;
          var t, n = e.id;
          if (!(t = e.last_msg_input) && e.presence) {
            var i = TS.ims.getImByMemberId(e.id);
            t = i && i.last_msg_input, n = i && i.id;
          }
          var r = TS.shared.getActiveModelOb();
          if (r) {
            var a = r.id;
            a && a == n && !TS.client.activeChannelIsHidden() && (t = null);
          }
          return e.is_channel && (!e.is_archived && e.is_member || (t = null)), e.is_group && !e.is_mpim && e.is_archived && (t = null), TS.permissions.members.canPostInChannel(e) || (t = null), !!_.trim(t);
        },
        makeProfileImage: function(e, t) {
          function n(e, t) {
            var n = "image_" + t;
            return !!e.hasOwnProperty(n) && (TS.environment.is_retina ? e[TS.constants.avatar_size_map[t].retina] || e[TS.constants.avatar_size_map[t].standard] : e[TS.constants.avatar_size_map[t].standard]);
          }
          if (_.isString(e)) {
            var i = TS.members.getMemberById(e);
            e = i || TS.bots.getBotById(e);
          }
          if (!e) return !1;
          var r, a = t.hash.is_lazy || !1,
            s = e.profile || e.icons || {},
            o = t.hash.title || !1;
          r = s.emoji ? "64" : "48";
          var l = t.hash.size || r,
            d = Object.keys(TS.constants.avatar_size_map).reduce(function(e, t) {
              return t === l && n(s, t) ? t : e;
            }, r),
            c = {
              entity: e,
              size: l,
              css_classes: function(e, t) {
                var n = [];
                return n.push("thumb_" + t), e.is_bot ? (n.push("is_bot"), n.push("app_preview_link")) : n.push("member_preview_link"), n.join(" ");
              }(e, l),
              image: function(e, t) {
                var n = [];
                return n.push("url('" + t + "')"), n.join(",");
              }(e, n(s, d)),
              is_lazy: a,
              is_targettable: TS.utility.shouldLinksHaveTargets(),
              title: o
            };
          return new Handlebars.SafeString(TS.templates.member_profile_image(c));
        },
        makeMemberPreviewLinkImage: function(e, t, i, r, a, s, o) {
          var l;
          if (!(l = "object" === (void 0 === e ? "undefined" : n(e)) ? e : TS.members.getPotentiallyUnknownMemberById(e)) || !l.profile) return "";
          i = !0 === i, r = !0 === r, a = !0 === a, s = !0 === s, o = "string" == typeof o && o, "USLACKBOT" === e && o && (l = TS.utility.slackbot.getWithFeels(o));
          var d = TS.templates.builders.getImageStyleForMemberPreviewImage(l, t, i),
            c = {
              omit_link: r,
              omit_badge: a,
              lazy: i,
              member: l,
              size: t,
              include_restricted_overlay: !s || !0,
              bg_img_style: d
            };
          return TS.templates.member_preview_link_image(c);
        },
        getImageStyleForMemberPreviewImage: function(e, t, n) {
          var i, r, a;
          switch (r = "background-image: ", a = [], t) {
            case 20:
            case 24:
              i = TS.environment.is_retina ? e.profile.image_48 : e.profile.image_24;
              break;
            case 32:
              i = TS.environment.is_retina ? e.profile.image_72 : e.profile.image_32;
              break;
            case 36:
            case 48:
              i = TS.environment.is_retina ? e.profile.image_72 : e.profile.image_48;
              break;
            case 72:
              i = TS.environment.is_retina ? e.profile.image_192 : e.profile.image_72;
              break;
            case 192:
              i = TS.environment.is_retina ? e.profile.image_512 || e.profile.image_192 : e.profile.image_192;
              break;
            case 512:
              i = TS.environment.is_retina ? e.profile.image_1024 || e.profile.image_512 || e.profile.image_192 : e.profile.image_512 || e.profile.image_192;
              break;
            default:
              i = TS.environment.is_retina ? e.profile.image_72 : e.profile.image_48;
          }
          if (a.push("url('" + i + "')"), 512 === t) {
            var s = TS.environment.is_retina ? e.profile.image_72 : e.profile.image_48;
            a.push("url('" + s + "')");
          }
          return r = n ? a.length ? a.join(", ") : "" : a.length ? r + a.join(", ") : "";
        },
        makeMemberPreviewCardLinkImage: function(e) {
          var t = TS.members.getPotentiallyUnknownMemberById(e);
          if (!t || !t.profile) return "";
          var n = TS.boot_data.feature_name_tagging_client || TS.boot_data.feature_shared_channels_client ? t.id : t.name,
            i = TS.templates.builders.makeMemberPreviewCardLinkImageBackground(e);
          return ['<a href="/team/', n, '" ', TS.utility.shouldLinksHaveTargets() ? 'target="/team/' + n + '"' : "", ' class="member_preview_link member_image thumb_512" data-member-id="', t.id, '" data-thumb-size="512" style="background-image: ', i, '" aria-hidden="true"></a>'].join("");
        },
        makeMemberPreviewCardLinkImageBackground: function(e) {
          var t = TS.members.getPotentiallyUnknownMemberById(e);
          if (!t || !t.profile) return "";
          var n;
          n = TS.environment.is_retina ? t.profile.image_1024 || t.profile.image_512 || t.profile.image_192 : t.profile.image_512 || t.profile.image_192;
          var i = TS.environment.is_retina ? t.profile.image_72 : t.profile.image_48;
          return [(!TS.model.mac_version || 0 !== TS.utility.compareSemanticVersions(TS.model.mac_version, "10.7") && 0 !== TS.utility.compareSemanticVersions(TS.model.mac_version, "10.8") ? "" : "-webkit-") + "linear-gradient(rgba(0,0,0,0), rgba(0,0,0,0) 34%, rgba(0,0,0,0.2) 66%, rgba(0,0,0,0.2) 83%, rgba(0,0,0,0.6))", "url('" + n + "')", "url('" + i + "')"].join(", ");
        },
        makeMemberLinkAriaLabelSafe: function(t) {
          t || TS.warn("No valid direct message object to make member link aria label");
          var n = t.member,
            i = t.model_ob,
            r = "";
          if (n && i) {
            var a = _.escape(TS.ims.getDisplayNameOfUserForIm(i)),
              s = TS.model.active_im_id === n.id ? TS.i18n.t("active direct message", "templates_builders")() : TS.i18n.t("direct message", "templates_builders")(),
              o = TS.templates.makeMemberPresenceStateAriaLabel(n),
              l = e(i),
              d = null;
            TS.templates.builders.showDraftIcon(i) && (d = TS.i18n.t("draft", "messages")()), r = a + ", " + s + ", " + o + (l ? ", " + l : "") + (d ? ", " + d : "");
          }
          return new Handlebars.SafeString(r);
        },
        makePendingUserImage: function(e, t) {
          if (!e || !t) return "";
          var n, i = [],
            r = [];
          switch (t) {
            case 24:
              n = 48;
              break;
            case 36:
              n = 72;
              break;
            default:
              n = 48;
          }
          var a = "/img/new_channel_modal/airplane_" + n.toString() + ".png";
          r.push("url('" + vvv(a) + "')");
          var s = r.join(","),
            o = {
              restricted: e.invite_prefs && "restricted" === e.invite_prefs.type,
              img_classes: i.join(" "),
              bg_img_urls: s,
              size: t
            };
          return TS.templates.pending_user_image(o);
        },
        newWindowName: function() {
          return "web" === TS.boot_data.app || "calls" === TS.boot_data.app ? "_self" : "new_" + a.toString();
        },
        getBotIdentifier: function(e) {
          if (!e.bot_id && !e.username) return null;
          var t = TS.bots.getBotByMsg(e),
            n = !e.username && t && t.name ? t.name : e.username;
          return (t ? t.id : "NOBOTID") + "_" + n;
        },
        getBotName: function(e) {
          var t = e.username;
          if (!t) {
            var n = TS.bots.getBotByMsg(e);
            n && n.name && (t = n.name);
          }
          return t;
        },
        getBotNameWithLink: function(e) {
          var t = e.username,
            n = TS.bots.getBotByMsg(e),
            i = TS.templates.builders.makeBotLink(n, e.username);
          return t || n && n.name && (t = n.name), new Handlebars.SafeString(i.start_a + _.escape(t) + i.end_a);
        },
        makeBotLink: function(e) {
          var t = "",
            n = "";
          return e && !e.deleted ? (t = '<a class="app_preview_link" target="/services/' + e.id + '" href="/services/' + e.id + '">', n = "</a>") : (t = '<a class="app_preview_link">', n = "</a>"), {
            start_a: t,
            end_a: n
          };
        },
        makeFiletypeHTML: function(e) {
          if (e.external_type) return TS.templates.builders.makeExternalFiletypeHTML(e);
          var t = "";
          return t += '<a href="' + e.url_private_download + '" ', t += 'target="' + e.url_private_download + '" ', t += 'title="' + TS.i18n.t("Download this file", "templates_builders")() + '" ', t += 'data-file-id="' + e.id + '" ', t += 'class="subtle_silver file_ssb_download_link">', t += TS.utility.convertFilesize(e.size) + " ", t += "<span>" + e.pretty_type + "</span>", "snippet" === e.mode && (t += " " + TS.i18n.t("snippet", "templates_builders")()), t += "</a>";
        },
        makeExternalFiletypeHTML: function(e) {
          if (e.is_external) {
            var t = "";
            switch (e.external_type) {
              case "gdrive":
                switch (e.filetype) {
                  case "gsheet":
                    t = TS.i18n.t("Spreadsheet from Google Drive", "templates_builders")();
                    break;
                  case "gdoc":
                    t = TS.i18n.t("Document from Google Drive", "templates_builders")();
                    break;
                  case "gpres":
                    t = TS.i18n.t("Presentation from Google Drive", "templates_builders")();
                    break;
                  case "gdraw":
                    t = TS.i18n.t("Drawing from Google Drive", "templates_builders")();
                    break;
                  default:
                    t = TS.i18n.t("<span>{file_type}</span> from Google Drive", "templates_builders")({
                      file_type: e.pretty_type
                    });
                }
                break;
              case "dropbox":
                t = TS.i18n.t("<span>{file_type}</span> from Dropbox", "templates_builders")({
                  file_type: e.pretty_type
                });
                break;
              case "box":
                t = TS.i18n.t("<span>{file_type}</span> from Box", "templates_builders")({
                  file_type: e.pretty_type
                });
                break;
              case "onedrive":
                t = TS.i18n.t("<span>{file_type}</span> from OneDrive", "templates_builders")({
                  file_type: e.pretty_type
                });
                break;
              default:
                t = TS.i18n.t("File", "templates_builders")();
            }
            return t;
          }
        },
        makeUnshareLink: function(e, t) {
          var n = (e.is_channel ? "#" : "") + e.name,
            i = TS.i18n.t("Unshare from {channel}", "templates_builders")({
              channel: n
            });
          return '<a class="unshare_link ts_tip ts_tip_top ts_tip_float ts_tip_unshare_link ts_tip_multiline" onclick="TS.files.promptForFileUnshare(\'' + t.id + "', '" + e.id + '\')"><span class="ts_tip_tip"><span class="ts_tip_multiline_inner">' + i + '</span></span><i class="ts_icon ts_icon_minus_circle_small"></i></a>';
        },
        updateFileShareLabels: function(e) {
          $('.file_share_label[data-file-id="' + e.id + '"]').each(function() {
            $(this).replaceWith(TS.templates.builders.makeFileShareLabel(e));
          }), e.is_shared ? ($('.file_share_shared_label[data-file-id="' + e.id + '"]').removeClass("hidden"), $('.file_share_unshared_label[data-file-id="' + e.id + '"]').addClass("hidden")) : ($('.file_share_shared_label[data-file-id="' + e.id + '"]').addClass("hidden"), $('.file_share_unshared_label[data-file-id="' + e.id + '"]').removeClass("hidden")), e.is_public ? ($('.file_share_private_label[data-file-id="' + e.id + '"]').addClass("hidden"), $('.file_share_public_label[data-file-id="' + e.id + '"]').removeClass("hidden")) : ($('.file_share_private_label[data-file-id="' + e.id + '"]').removeClass("hidden"), $('.file_share_public_label[data-file-id="' + e.id + '"]').addClass("hidden"));
        },
        makeFileShareLabel: function(e) {
          var t = '<span class="file_share_label" data-file-id="' + e.id + '">',
            n = TS.templates.builders.makeFileGroupChannelList(e);
          return n.length ? t += TS.i18n.t("in {share_list}", "templates_builders")({
            share_list: n
          }) : e.is_public || e.user === TS.model.user.id || (t += TS.i18n.t("shared with you", "templates_builders")()), t += "</span>";
        },
        makeFileGroupChannelList: function(e) {
          var t, n, i, r = [];
          for (i = 0; i < e.channels.length; i += 1)(n = TS.channels.getChannelById(e.channels[i])) && (t = '<span class="no_wrap">', t += TS.templates.builders.makeChannelLink(n, e), t += "&nbsp;" + TS.templates.builders.makeUnshareLink(n, e), t += "</span>", r.push(t));
          var a;
          for (i = 0; i < e.groups.length; i += 1)(a = TS.groups.getGroupById(e.groups[i])) && (t = '<span class="no_wrap">', t += TS.templates.builders.makeGroupLink(a, e), t += "&nbsp;" + TS.templates.builders.makeUnshareLink(a, e), t += "</span>", r.push(t));
          return r.length ? r.join(", ") : "";
        },
        makeFileCommentHelpHTML: function(e) {
          if (e && e.is_public && (e.channels && e.channels.length || e.groups && e.groups.length)) {
            var t = [];
            return e.channels && e.channels.length && (t = t.concat(e.channels)), e.groups && e.groups.length && (t = t.concat(e.groups)), TS.i18n.t("Commenting in {channel_names}", "templates_builders")({
              channel_names: TS.templates.builders.makeLinksFromChannelOrGroupIds(t)
            });
          }
          return "";
        },
        makeLinksFromChannelOrGroupIds: function(e, t) {
          t = t || {}, e = TS.utility.parseJSONOrElse(e, e), e = _.isArray(e) ? e : [e];
          var n = 0,
            i = t.new_lines ? " block" : "",
            r = e.map(function(e) {
              return TS.channels.getChannelById(e) || TS.groups.getGroupById(e);
            }).filter(function(e) {
              return e || (n += 1), !!e;
            }),
            a = TS.sorter.search("", {
              groups: r
            }, {
              allow_empty_query: !0
            }),
            s = a.sort().map(function(e) {
              var t = '<span class="no_wrap' + i + '">';
              return t += e.is_channel ? TS.templates.builders.makeChannelLink(e) : TS.templates.builders.makeGroupLink(e), t += "</span>";
            });
          if (n) {
            var o = TS.i18n.t("{private_channel_or_group_count, plural, =1{# private channel}other{# private channels}}", "templates_builders")({
              private_channel_or_group_count: n
            });
            s.push('<span class="no_wrap' + i + '">' + o + "</span>");
          }
          return t.new_lines ? s.join("") : TS.i18n.listify(s, {
            no_escape: !0
          }).join("");
        },
        makeMessageShareLabelSafe: function(e) {
          var t = '<span class="message_share_label">',
            n = "";
          return e.is_channel ? n = TS.templates.builders.makeChannelLink(e) : e.is_group && (n = TS.templates.builders.makeGroupLink(e)), t += TS.i18n.t("in {channel}", "templates_builders")({
            channel: n
          }), t += "</span>", new Handlebars.SafeString(t);
        },
        makeMessageLinkLabelSafe: function(e) {
          var t = TS.i18n.t("From URL:", "templates_builders")() + " <a " + TS.utility.makeRefererSafeLink(e) + ' class="external_link"title="' + _.escape(e) + '"target="_blank">' + _.escape(e) + "</a>";
          return new Handlebars.SafeString(t);
        },
        makeSHRoomParticipantList: function(e) {
          var t = e.date_end ? e.participant_history : e.participants,
            n = _.compact(t.map(function(e) {
              var t = TS.members.getMemberById(e),
                n = TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics);
              return t && t.is_unknown && "unknown_members" === n ? TS.templates.message_member_unknown() : t ? _.escape(TS.members.getPrefCompliantMemberName(t)) : void 0;
            })).join(", ");
          return new Handlebars.SafeString(n);
        },
        makeSHRoomSharedList: function(e) {
          if (!e.channels || !e.channels.length) return "";
          for (var t, n, i, r = [], a = 0; a < e.channels.length; a += 1)
            if (i = TS.shared.getModelObById(e.channels[a])) {
              if (i.is_channel) t = TS.templates.builders.makeChannelLink(i);
              else if (i.is_group) t = TS.templates.builders.makeGroupLink(i);
              else {
                if (!i.is_im) continue;
                if (!(n = TS.members.getMemberById(i.user))) continue;
                t = TS.templates.builders.makeMemberPreviewLink(n);
              }
              r.push(t);
            }
          return r.length ? r.join(", ") : "";
        },
        buildFileSharingControls: function(e, t, n, i, r) {
          var a, s;
          TS.client ? TS.client.activeChannelIsHidden() || (s = TS.shared.getActiveModelOb()) : TS.web && TS.web.space && (s = TS.shared.getModelObById(TS.web.space.getOriginChannel())), s ? s.is_im ? a = "im" : s.is_mpim ? a = "mpim" : s.is_group || s.is_private ? a = "group" : s.is_channel && (a = "channel") : a = "channel", s && TS.channels.isChannelRequired(s) && !TS.permissions.members.canPostInChannel(s) && (s = {});
          var o = [],
            l = [],
            d = [];
          "group" === a && l && !l.length && (a = "channel"), n = n || "", $("#file_sharing_div").remove();
          var c = !1,
            u = !1;
          if (e) {
            if (e.user === TS.model.user.id) c = !0;
            else if (e.user) {
              var m = TS.members.getMemberById(e.user);
              m && m.is_external && (u = TS.teams.getTeamNameByMember(m));
            }
          } else c = !0;
          var p = TS.i18n.t("Files are private until they are shared in a public channel.", "templates_builders")();
          e && (e.is_public && (p = TS.i18n.t("Files you share into a channel are visible to all team members.", "templates_builders")()), e.type && -1 != e.type.indexOf("application/vnd.google-apps") && (p = TS.model.team.name ? TS.i18n.t("Anyone at {team_name} with the link will be able to edit this Google {file_type}", "templates_builders")({
            team_name: TS.model.team.name,
            file_type: _.capitalize(e.type.replace("application/vnd.google-apps", ""))
          }) : TS.i18n.t("Anyone with the link will be able to edit this Google {file_type}", "templates_builders")({
            file_type: _.capitalize(e.type.replace("application/vnd.google-apps", ""))
          })));
          var f = TS.web && TS.web.space && c && !TS.model.team.prefs.disable_file_editing && !e.channels.concat(e.groups).concat(e.ims).length;
          return TS.templates.file_sharing({
            share_context: a,
            channels: o,
            groups: l,
            members: d,
            model_ob: s,
            file: e,
            file_sharing_notice: p,
            is_owner: c,
            owner_team: u,
            has_title: i,
            hide_checkbox: t,
            comment: n,
            selection: r,
            show_channel_join_note: s && s.is_channel && !s.is_member && !s.is_archived,
            enable_collab_editing: f
          });
        },
        buildNonDefaultNotificationBlock: function(e) {
          e = e || "";
          var t, n = "",
            i = TS.notifs.getCorGsNotUsingGlobalNotificationSetting();
          if (i.everything.length) {
            for (n += '<div class="' + e + '">' + TS.i18n.t("Set to notify for <strong>all activity</strong>:", "templates_builders")(), t = 0; t < i.everything.length; t += 1) n += " " + ("C" === i.everything[t].id.charAt(0) ? "#" : "") + i.everything[t].name + (t != i.everything.length - 1 ? "," : "");
            n += "</div>";
          }
          if (i.mentions.length) {
            for (n += '<div class="' + e + '">' + TS.i18n.t("Set to notify only for <strong>Highlight Words</strong>:", "templates_builders")(), t = 0; t < i.mentions.length; t += 1) n += " " + ("C" === i.mentions[t].id.charAt(0) ? "#" : "") + i.mentions[t].name + (t != i.mentions.length - 1 ? "," : "");
            n += "</div>";
          }
          if (i.nothing.length) {
            for (n += '<div class="' + e + '">' + TS.i18n.t("Set to <strong>never notify</strong>:", "templates_builders")(), t = 0; t < i.nothing.length; t += 1) n += " " + ("C" === i.nothing[t].id.charAt(0) ? "#" : "") + i.nothing[t].name + (t != i.nothing.length - 1 ? "," : "");
            n += "</div>";
          }
          return n;
        },
        strBuilder: function(e, t) {
          return e.replace(/\${([a-z_]+)}/g, function(e, n) {
            return n.indexOf("_html") > -1 ? t[n] : _.escape(t[n]);
          });
        },
        buildRxnTitle: function(e, t) {
          if ("unknown_members" !== TS.experiment.getGroup("unknown_members_perf", TS.members.unknown_members_perf_exp_metrics) || t) {
            var n, i = TS.rxns.getHandyRxnsTitleForEmojiByRxnKey(e.name, e.rxn_key),
              r = ":" + e.name + ":";
            if (TS.i18n.locale() !== TS.i18n.DEFAULT_LOCALE && (r = TSFEmoji.translateEmojiStringToLocal(r, TS.i18n.locale())), e.is_handy || e.is_poll && !e.count) return e.is_poll ? "Vote for “" + _.escape(i || e.name) + "”" : i ? "Say “" + _.escape(i) + "”" : (n = _.escape(r || e.name), TS.i18n.t("Add reaction {emoji}", "rxn")({
              emoji: n
            }));
            var a;
            if (e.is_poll ? a = "voted for “" + _.escape(i || e.name) + "”" : i ? a = "said “" + _.escape(i) + "”" : (n = _.escape(r || e.name), a = TS.i18n.t("{reactionCount, plural, other{reacted with {emoji}}}", "rxn")({
                emoji: n,
                reactionCount: e.count
              })), TS.emoji.isValidName(e.name) || e.url || (a += " " + TS.i18n.t("(emoji has been removed)", "rxn")()), a = ' <span class="subtle_silver">' + a + "</span>", 1 == e.count) return e.user_reacted ? TS.boot_data.feature_thanks ? TS.i18n.t("You", "rxn")() + a : TS.i18n.t("You (click to remove)", "rxn")() + a : _.escape(TS.members.getPrefCompliantMemberNameById(e.member_ids[0], !1, !0)) + a;
            var s = e.member_ids.length != e.count,
              o = e.member_ids.map(function(e, t) {
                return TS.model.user.id === e ? 0 === t ? TS.i18n.t("You", "rxn")() : TS.i18n.t("you", "rxn")() : TS.members.getPrefCompliantMemberNameById(e, !1, !0);
              });
            return s && o.push(TS.i18n.t("others", "rxn")()), _.escape(TS.i18n.listify(o, {
              no_escape: !0
            }).join("")) + a;
          }
        },
        buildRxnHtml: function(e) {
          var t;
          if (e.url) t = '<span class="emoji-outer emoji-sizer emoji-bg-contain" style="background-image: url(' + e.url + ');"></span>';
          else if (TS.emoji.isValidName(e.name)) {
            var n = e.is_handy && TS.emoji.isNameSkinToneModifiable(e.name) ? TS.emoji.getChosenSkinToneModifier() : "";
            t = TS.emoji.graphicReplace(":" + e.name + ":" + n, {
              no_skin_tone_squares: e.is_handy
            });
          } else t = TS.emoji.MISSING_EMOJI_HTML;
          var i = TS.templates.builders.buildRxnTitle(e),
            r = [];
          return e.user_reacted && r.push("user_reacted"), e.is_handy && r.push("is_handy"), e.is_hidden && r.push("hidden"), TS.templates.rxns_rxn({
            name: e.name,
            url: e.url,
            css_classes: r.join(" "),
            emoji_html: new Handlebars.SafeString(t),
            title: i,
            count: e.count,
            is_handy: !!e.is_handy
          });
        },
        updateRxnHtml: function(e, t) {
          var n = e.children('.rxn[data-emoji="' + t.name + '"]');
          if (n.length) {
            n.find(".emoji_rxn_count").attr("aria-label", t.count), n.toggleClass("user_reacted", t.user_reacted);
            var i = TS.templates.builders.buildRxnTitle(t, !0),
              r = n.find(".ts_tip_tip_inner");
            r.length || (r = n.find(".ts_tip_multiline_inner")), r.length ? r.html() != i && TS.tips.updateTipTitle(n, i) : n.prop("title") != i && TS.tips.updateTipTitle(n, i), t.animate_it_dramatically ? setTimeout(t.animate_callback, 0) : t.animate_it && setTimeout(t.animate_callback, 0);
          } else e.children(".rxn_hover_container").before($(TS.templates.builders.buildRxnHtml(t))), n = e.children('.rxn[data-emoji="' + t.name + '"]'), t.animate_it_dramatically ? n.css("opacity", 0).transition({
            opacity: 1
          }, 300, t.animate_callback) : t.animate_it && n.css("opacity", 0).transition({
            opacity: 1
          }, 300, t.animate_callback);
        },
        updateRxnPanels: function(e, t, n) {
          var i = TS.rxns.getExistingRxnsByKey(e),
            r = $("." + TS.templates.makeRxnKeyDomClass(e)),
            a = TS.boot_data.feature_thanks ? TS.rxns.getHandyRxnsDisplayDataByRxnKey(e) : {},
            s = function(t) {
              _.each(_.keys(a.items), function(n) {
                var r = TS.rxns.getRxnFromRxns(i, n);
                TS.templates.builders.updateRxnHtml(t, {
                  name: n,
                  url: r && r.url,
                  count: r && r.count || 0,
                  user_reacted: TS.rxns.doesRxnsHaveRxnFromUser(i, n),
                  member_ids: r && r.users || [],
                  rxn_key: e,
                  is_poll: !0
                });
              });
            },
            o = function(r) {
              var a, s;
              i && i.forEach(function(o) {
                a = o.name == t, s = a && n == TS.model.user.id, TS.templates.builders.updateRxnHtml(r, {
                  animate_it: a,
                  animate_it_dramatically: s,
                  name: o.name,
                  url: o.url,
                  count: o.count,
                  user_reacted: TS.rxns.doesRxnsHaveRxnFromUser(i, o.name),
                  member_ids: o.users,
                  rxn_key: e
                });
              }), r.children(".rxn").each(function(e, t) {
                var n = $(t),
                  r = String(n.data("emoji"));
                TS.rxns.doesRxnsHaveRxn(i, r) || (n.addClass("going_away"), n.transition({
                  opacity: 0
                }, 300, function() {
                  n.remove();
                }));
              }), TS.ui.messages.maybeUpdateMessageHoverContainer(r.closest("ts-message")), r.children(".rxn_hover_container").find(".rxn.is_handy").each(function(e, t) {
                var n = $(t),
                  r = String(n.data("emoji"));
                n.toggleClass("hidden", TS.rxns.doesRxnsHaveSkinlessRxn(i, r));
              });
            };
          r.each(function(t, n) {
            var r = $(n);
            if (!i && !a.is_poll) return r.empty(), void TS.ui.messages.maybeUpdateMessageHoverContainer(r.closest("ts-message"));
            r.children().length || (r = $(TS.templates.builders.rxnPanel(e)).replaceAll(r)), a.is_poll ? s(r) : o(r);
          });
        },
        rxnPanel: function(e) {
          if (e) {
            var t = [],
              n = TS.boot_data.feature_thanks ? TS.rxns.getHandyRxnsDisplayDataByRxnKey(e) : {},
              i = "",
              r = TS.rxns.getExistingRxnsByKey(e),
              a = "";
            return n.is_poll ? function() {
              t.push("handy_rxns_poll"), a = '<span class="handy_rxns_poll_label">' + TS.i18n.t("Poll:", "rxn")() + "</span> ", _.each(_.keys(n.items), function(t) {
                var n = TS.rxns.getRxnFromRxns(r, t);
                a += TS.templates.builders.buildRxnHtml({
                  name: t,
                  url: n && n.url,
                  count: n && n.count || 0,
                  user_reacted: TS.rxns.doesRxnsHaveRxnFromUser(r, t),
                  member_ids: n && n.users || [],
                  rxn_key: e,
                  is_poll: !0
                });
              });
            }() : function() {
              r && (r = _.sortBy(r, function(e) {
                return TS.emoji.isValidName(e.name) ? 0 : 1;
              }), r.forEach(function(t) {
                a += TS.templates.builders.buildRxnHtml({
                  name: t.name,
                  url: t.url,
                  count: t.count,
                  user_reacted: TS.rxns.doesRxnsHaveRxnFromUser(r, t.name),
                  member_ids: t.users,
                  rxn_key: e
                });
              })), _.each(_.keys(n.items), function(t) {
                i += TS.templates.builders.buildRxnHtml({
                  name: t,
                  is_handy: !0,
                  is_hidden: TS.rxns.doesRxnsHaveSkinlessRxn(r, t),
                  rxn_key: e
                });
              });
            }(), TS.templates.rxns_panel({
              css_classes: t.join(" "),
              rxn_key: e,
              rxns_html: new Handlebars.SafeString(a),
              handy_rxns_html: new Handlebars.SafeString(i),
              show_adder: !n.restrict,
              id_class: TS.templates.makeRxnKeyDomClass(e),
              has_hovers: !n.is_poll
            });
          }
        },
        updateRxnPanelsAndHandyRxns: function(e) {
          if (e && TS.boot_data.feature_thanks) {
            var t = $("." + TS.templates.makeRxnKeyDomClass(e));
            if (t.length) {
              TS.templates.builders.updateRxnPanels(e);
              var n = TS.rxns.getExistingRxnsByKey(e),
                i = TS.rxns.getHandyRxnsDisplayDataByRxnKey(e),
                r = "";
              _.each(_.keys(i.items), function(t) {
                r += TS.templates.builders.buildRxnHtml({
                  name: t,
                  is_handy: !0,
                  is_hidden: TS.rxns.doesRxnsHaveSkinlessRxn(n, t),
                  rxn_key: e
                });
              }), t.each(function(e, t) {
                var n = $(t).find(".rxn_hover_container"),
                  a = n.find(".menu_rxn");
                a.toggleClass("hidden", i.restrict), n.html(r).prepend(a);
              });
            }
          }
        },
        buildHistoryNavBtnHtml: function() {
          var e = TS.model.prefs.no_omnibox_in_channels,
            t = TS.model.prefs.prev_next_btn,
            n = 0;
          t || (n += 2), e || (n += 1);
          var i = TS.templates.footer_nav_btn({
              id: "left_arrow_btn",
              col: n,
              type: "ts_icon_arrow_large_left",
              name: "Previous",
              mac_or_pc: TS.model.is_mac ? "⌘" : "Alt",
              prev_or_next: "ts_icon_arrow_left_medium"
            }),
            r = TS.templates.footer_nav_btn({
              id: "right_arrow_btn",
              col: n,
              type: "ts_icon_arrow_large_right",
              name: "Next",
              mac_or_pc: TS.model.is_mac ? "⌘" : "Alt",
              prev_or_next: "ts_icon_arrow_right_medium"
            }),
            a = TS.templates.footer_nav_btn({
              id: "quickswitcher_btn",
              col: n,
              type: "ts_icon_filter",
              name: "Quick Switcher",
              mac_or_pc: TS.model.is_mac ? "⌘ K" : "Alt K"
            }),
            s = "";
          return t || (s += i + r), e || (s += a), s;
        },
        filePreviewBackIcon: function() {
          return '<i class="ts_icon ts_icon_chevron_medium_left back_icon"></i>';
        },
        buildQuickSwitcherBtnHtml: function(e) {
          var t, n = TS.i18n.t("Quick Switcher", "templates_builders")();
          if (e) t = ['<i class="ts_icon ts_icon_filter"><span class="ts_tip_tip">' + n + ' <span class="subtle_silver">', TS.model.is_mac ? "&#8984K" : "Ctrl+K", "</span></span></i>"].join("");
          else if (t = TS.model.is_mac || !TS.model.is_our_app && !TS.model.prefs.k_key_omnibox ? '<i class="ts_icon ts_icon_filter"></i><span id="quick_switcher_label">' + n + "</span>" : '<i class="ts_icon ts_icon_filter"></i><span id="quick_switcher_label" class="quick_switcher_label_windows_alignment">' + n + "</span>", TS.model.is_our_app || TS.model.prefs.k_key_omnibox) return [t, '<span id="quick_switcher_shortcut">', TS.model.is_mac ? "&#8984K" : "Ctrl+K", "</span>"].join("");
          return t;
        },
        atLabel: function(e) {
          var t = e;
          switch (e) {
            case "channel":
              t = "@channel";
              break;
            case "everyone":
              t = "@everyone";
              break;
            case "here":
              t = "@here";
              break;
            case "group":
              t = "@group";
          }
          return t;
        },
        makeMemberTypeBadge: function(e, t, n, i) {
          if (!TS.boot_data.page_needs_enterprise) return "";
          t = parseInt(t, 10), isNaN(t) && (t = 16), "boolean" != typeof n && (n = !1), "boolean" != typeof i && (i = !1);
          var r = {
            size: "member_type_badge_" + t,
            big: t >= 20,
            is_standalone: n,
            with_tooltip: i
          };
          return e.is_external ? "" : e.is_ultra_restricted ? TS.templates.member_type_guest_badge(r) : e.is_restricted ? TS.templates.member_type_restricted_badge(r) : "";
        },
        makeMemberTypeBadgeClass: function(e) {
          return TS.boot_data.page_needs_enterprise && e.is_restricted ? "has_member_type_badge" : "";
        },
        makeMemberColorClass: function(e) {
          var t = "color_";
          return t += e ? e.id + " color_" + e.color : "unknown";
        },
        makeMemberTypeBadgeCompact: function(e, t) {
          if (!TS.boot_data.page_needs_enterprise) return "";
          "boolean" != typeof t && (t = !1);
          var n = {
              icon_class: "",
              with_tooltip: t,
              tooltip: {
                member_type: "",
                type_description: ""
              }
            },
            i = TS.boot_data.page_needs_enterprise ? TS.i18n.t("organization directory", "templates_builders")() : TS.i18n.t("team directory", "templates_builders")();
          return e.is_external ? "" : e.is_ultra_restricted ? (n.icon_class = "ts_icon_single_channel_guest", n.tooltip.member_type = TS.i18n.t("Single-Channel Guests", "templates_builders")(), n.tooltip.type_description = TS.i18n.t("see a partial {directory_name} and can only access messages and files from the channel they belong to.", "templates_builders")({
            directory_name: i
          }), TS.templates.member_type_icon(n)) : e.is_restricted ? (n.icon_class = "ts_icon_restricted_user", n.tooltip.member_type = TS.i18n.t("Multi-Channel Guests", "templates_builders")(), n.tooltip.type_description = TS.i18n.t("see only a partial {directory_name} and can only access messages and files from selected channels.", "templates_builders")({
            directory_name: i
          }), TS.templates.member_type_icon(n)) : "";
        },
        getMemberTypeClass: function(e) {
          return e.is_restricted ? " ra" : "";
        },
        makeTeamlabel: function(e) {
          if (!e) return "ERROR: MISSING TEAM ID";
          var t, n = TS.model.enterprise_teams;
          return n ? (t = _.find(n, function(t) {
            return t.id === e;
          }), '<span class="org_team_tag_name">' + _.escape(t.name) + "</span>") : "ERROR: UNABLE TO GET TEAMS INFO";
        },
        loadingHTML: function() {
          var e = cdn_url + "/9c217/img/loading_hash_animation_@2x.gif",
            t = cdn_url + "/9c217/img/loading_hash_animation.gif",
            n = TS.i18n.t("loading&hellip;", "templates_builders")();
          return '<div class="loading_hash_animation"><img src="' + e + '" alt="' + n + '" srcset="' + t + " 1x, " + e + ' 2x" /><br />' + n + "</div>";
        },
        buildThreadMsgHTML: function(e, t, n, i) {
          var r = !!_.get(i, "inline"),
            a = r ? TS.templates.makeMsgDomId(e.ts) : TS.templates.makeMsgDomIdInThreadsView(e.ts);
          return TS.templates.builders.msgs.buildHTML({
            msg_dom_id: a,
            model_ob: t,
            msg: e,
            is_threads_view: !0,
            is_new_reply: TS.utility.msgs.isMsgReply(e) && n && e.ts > n.initial_last_read,
            relative_ts: !0,
            enable_slack_action_links: !0
          });
        },
        buildThreadParticipantListHTML: function(e) {
          var t = _.map(e.replies, "user"),
            n = _.map(e.replies, "bot_id");
          t = t.concat(n), t = _.without(t, "U00", void 0), "tombstone" !== e.subtype && e.user && t.unshift(e.user), t = _.uniq(t), _.includes(t, TS.model.user.id) && (t = _.without(t, TS.model.user.id), t.push(TS.model.user.id));
          var i = _.map(t, function(e) {
            return "B" === e.charAt(0) ? TS.bots.getBotNameById(e) : e === TS.model.user.id ? TS.i18n.t("you", "threads")() : TS.members.getPrefCompliantMemberNameById(e);
          });
          if (1 === t.length) return t[0] === TS.model.user.id ? TS.i18n.t("Just you", "threads")() : _.escape(i[0]);
          if (2 === t.length) return t[1] === TS.model.user.id ? TS.i18n.t("{user_name} and you", "threads")({
            user_name: _.escape(i[0])
          }) : TS.i18n.t("{user_name1} and {user_name2}", "threads")({
            user_name1: _.escape(i[0]),
            user_name2: _.escape(i[1])
          });
          if (3 === t.length) return t[2] === TS.model.user.id ? TS.i18n.t("{user_name1}, {user_name2}, and you", "threads")({
            user_name1: _.escape(i[0]),
            user_name2: _.escape(i[1])
          }) : TS.i18n.t("{user_name1}, {user_name2}, and {user_name3}", "threads")({
            user_name1: _.escape(i[0]),
            user_name2: _.escape(i[1]),
            user_name3: _.escape(i[2])
          });
          if (t.length > 3) {
            var r = t.length - 2,
              a = _.drop(i, 2);
            a.length > 25 && (a = _.take(a, 25), a.push(TS.i18n.t("others", "threads")()));
            var s = TS.i18n.listify(a, {
              no_escape: !0
            }).join("");
            return TS.templates.thread_participants_with_overflow({
              num_others: r,
              user_name1: i[0],
              user_name2: i[1],
              other_names: s
            });
          }
        },
        buildBroadcastRepliersSummaryHTML: function(e) {
          var t = e.reply_count,
            n = e.replies;
          if (!n || !n.length) return "";
          var i = _.map(n, "user");
          i = _.uniq(i);
          var r = i.length,
            a = _.map(i, function(e) {
              if ("U00" === e) return null;
              var t = e.charAt(0);
              return "B" === t ? TS.bots.getBotById(e) : TS.members.getPotentiallyUnknownMemberById(e);
            });
          if (a = _.compact(a), !t || !a.length) return "";
          if (1 === t) return TS.i18n.t("1 reply", "threads")();
          var s = !!_.find(a, {
            is_self: !0
          });
          s && (a = _.reject(a, {
            is_self: !0
          }), a.push(TS.model.user));
          var o = _.map(a, function(e) {
            return e.is_bot ? e.name : e.is_self ? TS.i18n.t("you", "threads")() : TS.members.getPrefCompliantMemberName(e);
          });
          if (1 === a.length) return s ? TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from you", "threads")({
            reply_count: t
          }) : TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from {user_name}", "threads")({
            reply_count: t,
            user_name: _.escape(o[0])
          });
          if (2 === a.length) return s ? TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from {user_name} and you", "threads")({
            reply_count: t,
            user_name: _.escape(o[0])
          }) : TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from {user_name1} and {user_name2}", "threads")({
            reply_count: t,
            user_name1: _.escape(o[0]),
            user_name2: _.escape(o[1])
          });
          if (3 === a.length) return s ? TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from {user_name1}, {user_name2}, and you", "threads")({
            reply_count: t,
            user_name1: _.escape(o[0]),
            user_name2: _.escape(o[1])
          }) : TS.i18n.t("{reply_count, plural, =1{1 reply} other{# replies}} from {user_name1}, {user_name2}, and {user_name3}", "threads")({
            reply_count: t,
            user_name1: _.escape(o[0]),
            user_name2: _.escape(o[1]),
            user_name3: _.escape(o[2])
          });
          if (a.length > 3) {
            var l = _.drop(o, 2);
            l.length < r - 2 && l.push(TS.i18n.t("others", "threads")());
            var d = TS.i18n.listify(l, {
              no_escape: !0
            }).join("");
            return TS.templates.thread_broadcast_repliers_with_overflow({
              reply_count: t,
              num_others: r - 2,
              user_name1: o[0],
              user_name2: o[1],
              other_names: d
            });
          }
          return "";
        },
        test: function() {
          var e = {};
          return Object.defineProperty(e, "_buildStarComponents", {
            get: function() {
              return t;
            },
            set: function(e) {
              t = e;
            }
          }), e;
        }
      });
      var i = 8,
        r = !1,
        a = Date.now();
    }();
  },
  2531: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("templates.helpers", {
        onStart: function() {
          TS.templates.helpers.register();
        },
        register: function() {
          function i(e) {
            var t = TS.members.getMemberById(e.user),
              n = {
                im_exists: !TS.ims.isImWithDeletedMember(e),
                im_member_id: t.id,
                im_name: TS.ims.getDisplayNameOfUserForIm(e),
                im_id: e.id,
                member_color: "color_" + (t ? t.id + " color_" + t.color : "unknown")
              };
            if (TS.utility.shouldLinksHaveTargets()) {
              var i = "/messages/@" + t.id;
              TS.boot_data.feature_name_tagging_client && (i = "/messages/" + e.id), TS.ims.isImWithDeletedMember(e) && (i = TS.templates.builders.newWindowName()), n.target = i;
            }
            return TS.templates.search_im_link(n);
          }

          function r(e) {
            var t, n = _.escape(e.username),
              i = TS.bots.getBotByMsg(e);
            e.icons ? t = e.icons : i && i.icons && (t = i.icons), !n && i && i.name && (n = _.escape(i.name));
            var r = TS.templates.builders.makeBotLink(i, e.username);
            if (!t) return r.start_a + n + r.end_a;
            return t.emoji && ":" === t.emoji.substr(0, 1) && ":" === t.emoji.substr(t.emoji.length - 1, 1) ? r.start_a + TS.emoji.graphicReplace(_.escape(t.emoji)) + r.end_a + " " + r.start_a + n + r.end_a : t.image_36 && !TS.environment.is_retina ? r.start_a + '<img src="' + t.image_36 + '" class="inline_bot_icon">' + r.end_a + " " + r.start_a + n + r.end_a : t.image_72 && TS.environment.is_retina ? r.start_a + '<img src="' + t.image_72 + '" class="inline_bot_icon">' + r.end_a + " " + r.start_a + n + r.end_a : t.image_48 ? r.start_a + '<img src="' + t.image_48 + '" class="inline_bot_icon">' + r.end_a + " " + r.start_a + n + r.end_a : r.start_a + n + r.end_a;
          }

          function a(e) {
            return e ? "color_bot_" + TS.utility.makeSafeForDomClass(e) : "color_unknown";
          }

          function s(e) {
            var t = TS.members.getMemberById(e);
            return t ? "color_" + t.id + " color_" + t.color : "color_unknown";
          }
          Handlebars.registerHelper("debugger", function() {}), Handlebars.registerHelper("i18n_ns", function(e) {
            if (!_.isObject(this)) return void TS.warn('Cannot set i18n namespace "' + e + '". Chances are you‘ve inadvertently changed the context in a Handlebars partial to something that‘s not an object.');
            this._i18n_ns && (this._i18n_ns_history ? this._i18n_ns_history.push(this._i18n_ns) : this._i18n_ns_history = [this._i18n_ns]), this._i18n_ns = e;
          }), Handlebars.registerHelper("_i18n_ns_end", function() {
            this._i18n_ns_history && this._i18n_ns_history.length && (this._i18n_ns = this._i18n_ns_history.pop());
          }), Handlebars.registerHelper("i18n_img", function(e) {
            var t = e.fn(this),
              n = e && e.hash && e.hash.locales ? e.hash.locales : null;
            return n && (n = n.replace(/\s/g, ""), n.split(",").indexOf(TS.i18n.locale()) > -1 && (t = t.replace(/(\..+$)/, "." + TS.i18n.locale() + "$1"))), t;
          }), Handlebars.registerHelper("t", function(e) {
            var t;
            "string" == typeof e ? (t = e, e = arguments[1]) : t = e.fn();
            var n;
            n = void 0 !== e.hash.ns ? e.hash.ns : void 0 !== this._i18n_ns ? this._i18n_ns : e.data.root && e.data.root._i18n_ns ? e.data.root._i18n_ns : "";
            var i = this;
            _.isObject(i) || (i = {
              this: i
            });
            var r, a = {};
            _.forOwn(e.hash, function(e, t) {
              a[t] = i[t], i[t] = Handlebars.Utils.escapeExpression(e);
            });
            var s = t.match(/{[^\s}]+}/g);
            if (s && s.length) {
              var o, l = 0,
                d = s.length;
              for (l; l < d; l += 1) r = s[l].substr(1, s[l].length - 2), void 0 === e.hash[r] && void 0 !== (o = function(e) {
                var t = e.split(".");
                if (t.length > 1) {
                  var n = 0,
                    r = t.length,
                    a = i;
                  for (n; n < r; n += 1)
                    if (void 0 === (a = a[t[n]])) return;
                  return a;
                }
                return i[e];
              }(r)) && (a[r] = i[r], i[r] = Handlebars.Utils.escapeExpression(o));
            }
            return e.hash.debug && (TS.info("debug handlerbars t helper"), TS.info(this)), t = TS.i18n.t(t, n)(i), _.forOwn(a, function(e, t) {
              i[t] = e;
            }), t;
          }), Handlebars.registerHelper("zdLocale", function() {
            return TS.i18n.zdLocale();
          }), Handlebars.registerHelper("convertTimestampToMilliseconds", function(e) {
            return 1e3 * e;
          }), Handlebars.registerHelper("i18n_number", function(e) {
            return TS.i18n.number(e);
          }), Handlebars.registerHelper("listify", function(e, t) {
            t.hash.map && (e = _.map(e, t.hash.map));
            var n = _.get(t.hash, "conjunction"),
              i = _.get(t.hash, "strong"),
              r = _.get(t.hash, "no_escape"),
              a = _.get(t.hash, "item_prefix"),
              s = TS.i18n.listify(e, {
                conj: n,
                strong: i,
                no_escape: r,
                item_prefix: a
              });
            return new Handlebars.SafeString(s.join(""));
          }), Handlebars.registerHelper("ifInArray", function(e, t, n) {
            return t.indexOf(e) > -1 ? n.fn(this) : n.inverse(this);
          }), Handlebars.registerHelper("getDisplayNames", function(e) {
            return e.map(function(e) {
              var t = _.isString(e) ? e : e.id;
              return TS.members.getPrefCompliantMemberNameById(t, !0, !1);
            });
          }), Handlebars.registerHelper("isClient", function(e) {
            return "client" === TS.boot_data.app ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("isChrome", function(e) {
            return TS.model.is_chrome_desktop || TS.model.is_chrome_mobile ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("isFF", function(e) {
            return TS.model.is_FF ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("isSafariDesktop", function(e) {
            return TS.model.is_safari_desktop ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("isWeb", function(e) {
            return "web" === TS.boot_data.app || "space" === TS.boot_data.app || "calls" === TS.boot_data.app ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("isMac", function(e) {
            return TS.model.is_mac ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("isWin", function(e) {
            return TS.model.is_win ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("isLin", function(e) {
            return TS.model.is_lin ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("isOurApp", function(e) {
            return TS.model.is_our_app ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("unlessOurApp", function(e) {
            return Handlebars.helpers.isOurApp.call(this, {
              fn: e.inverse,
              inverse: e.fn,
              hash: e.hash
            });
          }), Handlebars.registerHelper("isMacAppStorebuild", function(e) {
            return TSSSB.call("isAppStoreBuild") && navigator.userAgent.match("MacAppStore") ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("feature", function(e) {
            var t = e.hash.flag;
            return 1 == TS.qs_args[t] || 1 == TS.boot_data[t] ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("pageNeedsEnterprise", function(e) {
            return TS.boot_data.page_needs_enterprise ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("sharedChannelsEnabled", function(e) {
            return TS.boot_data.page_needs_enterprise || TS.boot_data.feature_shared_channels_client ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("isChannelRequired", function(e, t) {
            return TS.channels.isChannelRequired(e) ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("experiment", function(e) {
            var t = e.hash.name,
              n = e.hash.group || "treatment";
            return TS.experiment.getGroup(t) === n ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("enterprisePOEmail", function() {
            return TS.boot_data.page_needs_enterprise ? TS.model.enterprise.primary_owner.email : "";
          }), Handlebars.registerHelper("versioned_x_icon", function() {
            return cdn_url + "/52b9/img/enterprise/icon_times_in_circle.svg";
          }), Handlebars.registerHelper("pageNeedsEnterpriseOrIsLazyLoadMembersAndBots", function(e) {
            return TS.boot_data.page_needs_enterprise || TS.lazyLoadMembersAndBots() ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("comments", function(e) {
            return new Handlebars.SafeString(TS.templates.builders.buildComments(e));
          }), Handlebars.registerHelper("comment_standalone", TS.templates.builders.buildCommentStandalone), Handlebars.registerHelper("star", function(e, t, n) {
            return new Handlebars.SafeString(TS.templates.builders.buildStar(e, t, n));
          }), Handlebars.registerHelper("starWithTip", function(e, t, n) {
            return new Handlebars.SafeString(TS.templates.builders.buildStarWithTip(e, t, n));
          }), Handlebars.registerHelper("inlineRoomPreviewToggler", TS.templates.builders.buildInlineRoomPreviewToggler), Handlebars.registerHelper("isInlineFilePreviewExpanded", function(e) {
            var n = e.hash.container_id,
              i = e.hash.file_id,
              r = !1,
              a = t(i, 360);
            return r = a ? TS.inline_imgs.shouldExpand(n, TS.model.inline_imgs[a]) : TS.inline_file_previews.shouldExpand(n, i), r ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("shouldTruncateInlineFilePreview", function(e, t) {
            return "string" == typeof e && (e = TS.files.getFileById(e)), e && TS.inline_file_previews.shouldTruncate(e) ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("shouldNotTruncateInlineFilePreview", function(e, t) {
            return Handlebars.helpers.shouldTruncateInlineFilePreview.call(this, e, {
              fn: t.inverse,
              inverse: t.fn,
              hash: t.hash
            });
          }), Handlebars.registerHelper("isInlineFilePreviewTruncated", function(e, t, n) {
            return "string" == typeof t && (t = TS.files.getFileById(t)), t && TS.inline_file_previews.isTruncated(e, t) ? n.fn(this) : n.inverse(this);
          }), Handlebars.registerHelper("isInlineFilePreviewNotTruncated", function(e, t, n) {
            return Handlebars.helpers.isInlineFilePreviewTruncated.call(this, e, t, {
              fn: n.inverse,
              inverse: n.fn,
              hash: n.hash
            });
          }), Handlebars.registerHelper("formatActionLink", function(e, t, n) {
            if (!e) return "";
            var i = "<" + e.url + "|" + e.title + ">",
              r = TS.format.formatWithOptions(i, t, {
                no_highlights: !0,
                no_specials: !0,
                enable_slack_action_links: !0 === n
              });
            return new Handlebars.SafeString(r);
          }), Handlebars.registerHelper("ellipsize", function(e, t) {
            return TS.info("len" + t), TS.utility.ellipsize(e, t);
          }), Handlebars.registerHelper("stripWhitespace", function(e) {
            return e.replace(/\s+/g, "");
          }), Handlebars.registerHelper("cash", function(e) {
            var t = e.hash.all_digits || !1,
              n = e.hash.currency_code || "USD",
              i = parseInt(e.hash.value, 10);
            return TS.utility.money.formatMoney(i, n, {
              all_digits: t
            });
          }), Handlebars.registerHelper("possessive", function(e) {
            return TS.i18n.possessive(e);
          }), Handlebars.registerHelper("fullPossessiveString", function(e) {
            return TS.i18n.fullPossessiveString(e);
          }), Handlebars.registerHelper("possessiveForMemberById", function(e) {
            var t = TS.members.getMemberById(e);
            return t ? Handlebars.helpers.possessiveForMember(t) : "";
          }), Handlebars.registerHelper("possessiveForMember", function(e) {
            var t = TS.members.getPrefCompliantMemberName(e);
            return TS.i18n.possessive(t);
          }), Handlebars.registerHelper("concatStr", function() {
            return Array.prototype.slice.call(arguments, 0, arguments.length - 1).join("");
          }), Handlebars.registerHelper("initialsSafe", function(e) {
            if ("string" != typeof e) return "";
            for (var t = e.split(" ").slice(0, 2), n = "", i = 0; i < t.length; i += 1) n += t[i][0];
            return new Handlebars.SafeString(n);
          }), Handlebars.registerHelper("json", function(e) {
            return "object" === (void 0 === e ? "undefined" : n(e)) && null !== e && "json" === e.name ? JSON.stringify(this) : JSON.stringify(e);
          }), Handlebars.registerHelper("prettyJson", function(e) {
            return "object" === (void 0 === e ? "undefined" : n(e)) && null !== e && "json" === e.name ? JSON.stringify(this, null, 2) : JSON.stringify(e, null, 2);
          }), Handlebars.registerHelper("currentTeamName", function() {
            return TS.model.team.name || "";
          }), Handlebars.registerHelper("currentTeamHostSafe", function() {
            return new Handlebars.SafeString(window.location.hostname);
          }), Handlebars.registerHelper("canUserCreateGroups", function(e) {
            return TS.permissions.members.canCreateGroups() ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("canCreateMpims", function(e) {
            return TS.permissions.members.canCreateMpims() ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("canKickFromChannels", function(e) {
            return TS.permissions.members.canKickFromChannels() ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("canKickFromGroups", function(e) {
            return TS.permissions.members.canKickFromGroups() ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("shouldShowMemberEmail", function(e) {
            return e.is_self || TS.model.team.prefs.display_email_addresses;
          }), Handlebars.registerHelper("teamUsesCustomizedCustomStatusPresets", function(e) {
            return TS.model.team.prefs.uses_customized_custom_status_presets ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("numberWithMax", function(e, t) {
            return e >= t ? t - 1 + "+" : e;
          }), Handlebars.registerHelper("convertFilesize", function(e) {
            return TS.utility.convertFilesize(e);
          }), Handlebars.registerHelper("roundToThree", function(e) {
            return TS.utility.roundToThree(e);
          }), Handlebars.registerHelper("toDate", function(e) {
            return TS.interop.datetime.toDate(e);
          }), Handlebars.registerHelper("toCalendarDate", function(e) {
            return TS.interop.datetime.toCalendarDate(e);
          }), Handlebars.registerHelper("toCalendarDateShort", function(e) {
            var t = {
              shortenMonth: !0
            };
            return TS.interop.datetime.toCalendarDate(e, t);
          }), Handlebars.registerHelper("toCalendarDateOrNamedDay", function(e) {
            return TS.interop.datetime.toCalendarDateOrNamedDay(e);
          }), Handlebars.registerHelper("toCalendarDateIfYesterdayOrToday", function(e) {
            return TS.interop.datetime.toCalendarDateIfYesterdayOrToday(e);
          }), Handlebars.registerHelper("toCalendarDateOrNamedDayShort", function(e) {
            return TS.interop.datetime.toCalendarDateOrNamedDay(e, {
              shortenMonth: !0
            });
          }), Handlebars.registerHelper("toTime", function(e, t, n) {
            return TS.interop.datetime.toTime(e, {
              do24hrTime: TS.utility.date.do24hrTime(),
              includeMeridiem: !1 !== t,
              includeSeconds: !0 === n
            });
          }), Handlebars.registerHelper("toTimeAgo", function(e) {
            return TS.interop.datetime.toTimeAgo(e);
          }), Handlebars.registerHelper("toTimeAgoShort", function(e, t) {
            t = !!_.isBoolean(t) && t;
            var n = TS.interop.datetime.toTimeAgo(e, {
                compact: t
              }),
              i = '<span class="relative_ts" data-ts="' + _.escape(e) + '" data-really-short="' + !!t + '">' + _.escape(n) + "</span>";
            return new Handlebars.SafeString(i);
          }), Handlebars.registerHelper("toTimeDuration", function(e) {
            return TS.interop.datetime.toTimeDuration(e);
          }), Handlebars.registerHelper("msgTsTitle", function(e, t, n) {
            var i, r, a = e.is_ephemeral || TS.utility.msgs.isTempMsg(e),
              s = TS.model.unread_view_is_showing && _.isString(t) && t === TS.templates.makeMsgDomIdInUnreadView(e.ts),
              o = TS.model.threads_view_is_showing && _.isString(t) && t === TS.templates.makeMsgDomIdInThreadsView(e.ts),
              l = TS.client && TS.ui.replies.activeConvoThreadTs() === e.thread_ts && _.isString(t) && TS.templates.makeMsgDomIdInConversation(e.ts) === t;
            s ? r = TS.i18n.t("Jump to conversation", "templates_helpers")() : o ? r = e.ts === e.thread_ts ? TS.i18n.t("Open in channel", "templates_helpers")() : TS.i18n.t("Open in sidebar", "templates_helpers")() : l ? e.ts === e.thread_ts && (r = TS.i18n.t("Open in channel", "templates_helpers")()) : TS.client && !a && n && (TS.boot_data.feature_archive_deeplink || (r = TS.i18n.t("Open in archives", "templates_helpers")()));
            var d = TS.i18n.t("{date} at {time}", "templates_helpers")({
              date: TS.interop.datetime.toCalendarDateOrNamedDay(e.ts, {
                shortenMonth: !0
              }),
              time: TS.interop.datetime.toTime(e.ts, {
                do24hrTime: TS.utility.date.do24hrTime(),
                includeSeconds: !0
              })
            }).replace(/\s/g, "&nbsp;");
            return i = r ? r + '<br><span class="subtle_silver no_wrap">' + d + "</span>" : d, new Handlebars.SafeString(i);
          }), Handlebars.registerHelper("toHour", function(e) {
            return TS.utility.date.toHour(e);
          }), Handlebars.registerHelper("memberLocalTime", function(e) {
            return new Handlebars.SafeString(TS.utility.date.memberLocalTime(e));
          }), Handlebars.registerHelper("memberUTCOffset", function(e) {
            return TS.utility.date.memberUTCOffset(e);
          }), Handlebars.registerHelper("isInDifferentTimeZone", function(e, t) {
            return e.tz_offset !== TS.model.user.tz_offset ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("isToday", function(e, t) {
            return TS.interop.datetime.isToday(TS.interop.datetime.toDateObject(e)) ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("toMonthYearFormat", function(e) {
            return TS.interop.datetime.toCalendarDate(e, {
              excludeDay: !0
            });
          }), Handlebars.registerHelper("if_equal", function(t, n) {
            return n = e(n), t == n.hash.compare ? n.fn(this) : n.inverse(this);
          }), Handlebars.registerHelper("if_not_equal", function(t, n) {
            return n = e(n), t != n.hash.compare ? n.fn(this) : n.inverse(this);
          }), Handlebars.registerHelper("if_gt", function(e, t) {
            return e > t.hash.compare ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("if_lt", function(e, t) {
            return e < t.hash.compare ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("or", function(t, n, i) {
            return i = e(i), t || n ? i.fn(this) : i.inverse(this);
          }), Handlebars.registerHelper("and", function(t, n, i) {
            return i = e(i), t && n ? i.fn(this) : i.inverse(this);
          }), Handlebars.registerHelper("foreach", function(e, t) {
            return t.inverse && !e.length ? t.inverse(this) : e.map(function(n, i) {
              var r = {
                index: i,
                value: n,
                length: e.length
              };
              return r.first = 0 === i, r.last = i === e.length - 1, t.fn(r);
            }).join("");
          }), Handlebars.registerHelper("repeat", function(e, t) {
            for (var n = "", i = 0; i < e; i += 1) n += t.fn(i);
            return n;
          }), Handlebars.registerHelper("makeDayDividerDomId", function(e) {
            return TS.templates.makeDayDividerDomId(e);
          }), Handlebars.registerHelper("formatFileTitle", function(e) {
            if (!e || !e.title) return "";
            var t = e.title;
            return t = _.unescape(t), t = _.escape(t), new Handlebars.SafeString(TS.format.formatWithOptions(t, null, {
              no_specials: !0
            }));
          }), Handlebars.registerHelper("formatMessageByType", function(e, t, n, i, r) {
            return new Handlebars.SafeString(TS.templates.builders.formatMessageByType(e, t, n, i, r));
          }), Handlebars.registerHelper("formatAttachments", function(e, t, n, i) {
            return new Handlebars.SafeString(TS.templates.builders.formatAttachments(e, t, n, i));
          }), Handlebars.registerHelper("formatMessage", function(e, t) {
            return new Handlebars.SafeString(TS.format.formatDefault(e, t));
          }), Handlebars.registerHelper("formatNoHighlightsNoSpecials", function(e, t) {
            return TS.format.formatNoHighlightsNoSpecials(e, t);
          }), Handlebars.registerHelper("formatMessageAttachmentPartEscaped", TS.utility.attachments.formatMessageAttachmentPart), Handlebars.registerHelper("formatMessageAttachmentPart", function(e, t, n, i, r, a) {
            return new Handlebars.SafeString(TS.utility.attachments.formatMessageAttachmentPart(e, t, n, i, r, a));
          }), Handlebars.registerHelper("formatMessageAttachmentSlackFooter", function(e) {
            var t = TS.format.formatJustText(TS.format.cleanMsg(e));
            return new Handlebars.SafeString(t);
          }), Handlebars.registerHelper("formatTopicOrPurpose", function(e) {
            return new Handlebars.SafeString(TS.utility.formatTopicOrPurpose(e));
          }), Handlebars.registerHelper("unFormatMessage", function(e, t) {
            return TS.format.unFormatMsg(e, t);
          }), Handlebars.registerHelper("formatMessageResult", function(e) {
            return e = TS.format.formatJustText(e), e = TS.utility.msgs.handleSearchHighlights(e);
          }), Handlebars.registerHelper("formatCurrentStatus", function(e) {
            return new Handlebars.SafeString(TS.format.formatCurrentStatus(e));
          }), Handlebars.registerHelper("formatCurrentStatusWithoutAnimations", function(e, t) {
            return t = t || {}, t = t.hash || t, new Handlebars.SafeString(TS.format.formatCurrentStatus(e, void 0, _.assign({
              stop_animations: !0
            }, t)));
          }), Handlebars.registerHelper("rxnPanel", function(e) {
            var t = TS.templates.builders.rxnPanel(e);
            return t ? new Handlebars.SafeString(t) : "";
          }), Handlebars.registerHelper("makeRefererSafeLink", function(e) {
            return "string" != typeof e.hash.url ? "" : new Handlebars.SafeString(TS.utility.makeRefererSafeLink(e.hash.url));
          }), Handlebars.registerHelper("makeSafeForDomId", TS.utility.makeSafeForDomId), Handlebars.registerHelper("makeMsgAttachmentTextExpanderDomId", TS.templates.makeMsgAttachmentTextExpanderDomId), Handlebars.registerHelper("makeMsgDomId", TS.templates.makeMsgDomId), Handlebars.registerHelper("makeMsgLabelDomId", TS.templates.makeMsgLabelDomId), Handlebars.registerHelper("makeMSRDomId", TS.templates.makeMSRDomId), Handlebars.registerHelper("makeMSRDomIdWithModule", TS.templates.makeMSRDomIdWithModule), Handlebars.registerHelper("makeSHRoomClass", TS.templates.makeSHRoomClass), Handlebars.registerHelper("makeMemberColorClass", function() {
            return TS.templates.builders.makeMemberColorClass.apply(this, arguments);
          }), Handlebars.registerHelper("buildMsgHTMLForSearch", function() {
            var e = TS.templates.builders.buildMsgHTMLForSearch.apply(this, arguments);
            return new Handlebars.SafeString(e);
          }), Handlebars.registerHelper("buildMsgHTMLForSearchTopResults", function() {
            var e = TS.templates.builders.buildMsgHTMLForSearchTopResults.apply(this, arguments);
            return new Handlebars.SafeString(e);
          }), Handlebars.registerHelper("ifExtracts", function(e, t) {
            return e.previous || e.previous_2 || e.next || e.next_2 ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("willForceExtracts", function(e, t) {
            if (!e.previous && !e.next || TS.search.view.resultHasExtracts(e)) return t.inverse(this);
            var n, i, r = TS.search.query_string,
              a = r.split(" "),
              s = !1;
            for (n = 0; n < a.length; n += 1)
              if (i = _.trim(a[n]), i.length > 0 && !TS.search.keyword_modifier_pair_regex.test(i)) {
                s = !0;
                break;
              }
            return s ? t.inverse(this) : t.fn(this);
          }), Handlebars.registerHelper("formatAttachmentExtracts", function(e, t) {
            var n = e.color || "e3e4e6";
            return TS.templates.search_attachment_extracts({
              attachment: e,
              message: t,
              bg_color: n
            });
          }), Handlebars.registerHelper("getAttachmentAuthorMemberId", function(e) {
            var t = TS.utility.attachments.getDecoratedAttachment(e);
            return t ? t._slack_author_id || "" : "";
          }), Handlebars.registerHelper("concatMsgExtracts", function(e) {
            if (!e.extracts || 0 === e.extracts.length) return "";
            var t = TS.templates.builders.search_ellipsis,
              n = e.extracts.map(function(n) {
                n.text && (n.text = n.text.replace(/&&gt;t;>&gt;/g, "&gt;&gt;&gt;"));
                var i = TS.format.replaceHighlightMarkers(n.text);
                if (TSF.jumbomoji_rx.match(i)) return TS.format.formatDefault(i, e);
                var r = TS.format.formatWithOptions(n.text, e, {
                  custom_linebreak: t
                });
                return r = TS.utility.msgs.handleSearchHighlights(r);
              }),
              i = n.join(t);
            return e.extracts[0].truncated_head && (i = t + i), e.extracts[e.extracts.length - 1].truncated_tail && (i += t), i;
          }), Handlebars.registerHelper("concatAttachmentExtracts", function(e, t) {
            var n, i = [],
              r = e.extracts,
              a = TS.templates.builders.search_ellipsis;
            if (!r || 0 === r.length) return "";
            ["title", "text"].forEach(function(e) {
              r[e] && r[e].forEach(function(e) {
                var r = TS.format.formatWithOptions(e.text, t, {
                  custom_linebreak: a
                });
                r = TS.utility.msgs.handleSearchHighlights(r), 0 === i.length && e.truncated_head && (r = a + r), n = e, i.push(r);
              });
            });
            var s = i.join(a);
            if (s && n && n.truncated_tail && (s += a), s || !r.fields || r.fallback || r.fields.forEach(function(e) {
                var t = _.escape(e.value.text);
                t = TS.utility.msgs.handleSearchHighlights(t), e.value.truncated_head && (t = a + t), e.value.truncated_tail && (t += a), s += "<strong>" + _.escape(e.title) + "</strong> &bull; " + t + "<br>";
              }), !s && e.fallback) {
              var o = e.fallback;
              r.fallback && r.fallback.length > 0 && (o = r.fallback[0].text);
              var l = TS.format.formatWithOptions(o, t, {
                custom_linebreak: a
              });
              return l = TS.utility.msgs.handleSearchHighlights(l);
            }
            return s;
          }), Handlebars.registerHelper("newWindowName", TS.templates.builders.newWindowName), Handlebars.registerHelper("nl2br", function(e) {
            return e ? (e = _.escape(e), e.replace(/\n/g, "<br />").replace(/&amp;#95;/g, "_")) : e;
          }), Handlebars.registerHelper("smartnl2br", function(e) {
            return e ? (e = _.escape(e), e = e.replace(/\n\r\n\r/g, '<span class="para_break"><br /></span>'), e = e.replace(/\n\r\n/g, '<span class="para_break"><br /></span>'), e = e.replace(/\n\n/g, '<span class="para_break"><br /></span>'), e = e.replace(/\n/g, "<br />"), new Handlebars.SafeString(e.replace(/&amp;#95;/g, "_"))) : e;
          }), Handlebars.registerHelper("truncate", function(e, t) {
            return truncate(e, t).replace(/&#64;/g, "@");
          }), Handlebars.registerHelper("truncateToNearestWordBoundary", TS.utility.truncateToNearestWordBoundary), Handlebars.registerHelper("proxyImgUrls", function(e) {
            var t = $("<div>" + e + "</div>");
            return t.find("img").each(function() {
              var e, t = $(this).attr("src"),
                n = $(this).attr("width"),
                i = $(this).attr("height");
              e = n && i ? TS.utility.getImgProxyURL(t, n, i) : TS.utility.getImgProxyURL(t), $(this).attr("src", e);
            }), t.html();
          }), Handlebars.registerHelper("stripImageTags", function(e) {
            var t = $("<div>" + e + "</div>"),
              n = t.find("img").remove().end().html();
            return new Handlebars.SafeString(n);
          }), Handlebars.registerHelper("generalName", function() {
            var e = TS.channels.getGeneralChannel();
            return e ? e.name : "";
          }), Handlebars.registerHelper("makeChannelDomId", function(e) {
            return TS.templates.makeChannelDomId(e);
          }), Handlebars.registerHelper("makeLinksFromChannelOrGroupIds", function(e) {
            return new Handlebars.SafeString(TS.templates.builders.makeLinksFromChannelOrGroupIds(e, {
              new_lines: !0
            }));
          }), Handlebars.registerHelper("makeChannelDragData", function(e) {
            return TS.templates.makeChannelDragData(e);
          }), Handlebars.registerHelper("makeFileDragData", function(e) {
            return TS.templates.makeFileDragData(e);
          }), Handlebars.registerHelper("firstListedChannel", function() {
            var e = TS.channels.getChannelsForUser()[0];
            if (e) return "#" + e.name;
          }), Handlebars.registerHelper("ChannelNameMaxLength", function() {
            return TS.model.channel_name_max_length;
          }), Handlebars.registerHelper("ChannelPurposeMaxLength", function() {
            return TS.model.channel_purpose_max_length;
          }), Handlebars.registerHelper("ChannelTopicMaxLength", function() {
            return TS.model.channel_topic_max_length;
          }), Handlebars.registerHelper("makeUnreadMsgsDomId", function(e) {
            return TS.templates.makeUnreadMsgsDomId(e);
          }), Handlebars.registerHelper("getCorGNameWithPrefixById", function(e, t) {
            var n = TS.shared.getModelObById(e);
            if (!n) {
              var i = "getCorGNameWithPrefixById: Could not find model ob for ID " + e;
              if (TS.warn(i), t) return;
              return e;
            }
            if (n.is_group) return TS.model.group_prefix + n.name;
            if (n.is_channel) return TS.templates.builders.makeChannelPrefix(n) + n.name;
            if (!t) return e;
          }), Handlebars.registerHelper("makeChannelPrefix", function(e) {
            return new Handlebars.SafeString(TS.templates.builders.makeChannelPrefix(e));
          }), Handlebars.registerHelper("makeChannelLink", function(e) {
            return new Handlebars.SafeString(TS.templates.builders.makeChannelLink(e));
          }), Handlebars.registerHelper("makeChannelPath", TS.templates.builders.makeChannelPath), Handlebars.registerHelper("makeChannelLinkEnterpriseSearchResult", function(e) {
            return new Handlebars.SafeString(TS.templates.builders.makeChannelLinkEnterpriseSearchResult(e));
          }), Handlebars.registerHelper("makeChannelLinkById", function(e) {
            var t = TS.channels.getChannelById(e);
            if (t) return TS.templates.builders.makeChannelLink(t);
          }), Handlebars.registerHelper("makeChannelLinkAriaLabelSafe", TS.templates.builders.makeChannelLinkAriaLabelSafe), Handlebars.registerHelper("makeUnreadHighlightDomId", function(e) {
            return TS.templates.makeUnreadHighlightDomId(e);
          }), Handlebars.registerHelper("makeChannelDomClass", function(e) {
            var t = "";
            return TS.model.active_channel_id != e.id || TS.client.activeChannelIsHidden() || (t += "active "), e.unread_cnt > 0 && (t += "unread "), e.unread_highlight_cnt > 0 && (t += "mention "), e.is_starred && (t += "is_starred "), TS.notifs.isCorGMuted(e.id) && (t += "muted_channel "), (e._show_in_list_even_though_no_unreads || _.trim(e.last_msg_input)) && (t += "show_in_list_even_though_no_unreads "), t;
          }), Handlebars.registerHelper("makeChannelOrGroupLinkById", function(e, t) {
            var n = TS.shared.getModelObById(e),
              i = "";
            return n.is_mpim ? i = TS.templates.builders.makeMpimLink(n, !1) : n.is_group ? i = TS.templates.builders.makeGroupLink(n, t) : n.is_channel && (i = TS.templates.builders.makeChannelLink(n, t)), new Handlebars.SafeString(i);
          }), Handlebars.registerHelper("makeChannelOrGroupSSBLinkById", function(e) {
            var t = TS.shared.getModelObById(e);
            if (t) {
              var n, i = "slack://channel?team=" + TS.model.team.id + "&id=" + e;
              if (t.is_group || t.is_private) return n = TS.model.group_prefix + t.name, "<a href=" + i + ">" + n + "</a>";
              if (t.is_channel) {
                return n = "#" + TS.channels.getChannelById(e).name, "<a href=" + i + ">" + n + "</a>";
              }
            }
          }), Handlebars.registerHelper("isThereComplianceExportsTeam", function(e, t) {
            if (!TS.boot_data.page_needs_enterprise) return t.inverse(this);
            var n = !1;
            if (e.is_shared) {
              var i;
              i = e.is_global_shared ? TS.model.enterprise_teams : _.map(e.shared_team_ids, function(e) {
                return TS.enterprise.getTeamById(e);
              }), n = i.some(function(e) {
                return e.has_compliance_export;
              });
            }
            return n ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("makeTeamsThatHaveComplianceExportsBlurb", TS.templates.builders.makeTeamsThatHaveComplianceExportsBlurb), Handlebars.registerHelper("isEnterpriseTeam", function(e) {
            return TS.boot_data.page_needs_enterprise ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("isLocalTeam", function(t, n) {
            return n = e(n), TS.boot_data.page_needs_enterprise && t == TS.model.team.id ? n.fn(this) : n.inverse(this);
          }), Handlebars.registerHelper("currentEnterpriseName", function() {
            return TS.boot_data.page_needs_enterprise ? TS.model.enterprise.name || "" : "";
          }), Handlebars.registerHelper("isOnEnterpriseTeam", function(e) {
            return TS.boot_data.page_needs_enterprise && TS.model.user.enterprise_user.teams.indexOf(e.hash.team_id) > -1 ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("makeTeamlabel", function(e, t) {
            var n = TS.templates.builders.makeTeamlabel(e, t);
            return new Handlebars.SafeString(n);
          }), Handlebars.registerHelper("makeGroupDomId", function(e) {
            return TS.templates.makeGroupDomId(e);
          }), Handlebars.registerHelper("groupPrefix", function() {
            return new Handlebars.SafeString(TS.model.group_prefix);
          }), Handlebars.registerHelper("makeGroupLink", function() {
            var e = TS.templates.builders.makeGroupLink.apply(this, arguments);
            return new Handlebars.SafeString(e);
          }), Handlebars.registerHelper("makeGroupLinkById", function(e) {
            var t = TS.groups.getGroupById(e);
            if (t) return TS.templates.builders.makeGroupLink(t);
          }), Handlebars.registerHelper("makeGroupLinkAriaLabelSafe", TS.templates.builders.makeGroupLinkAriaLabelSafe), Handlebars.registerHelper("makeGroupDomClass", function(e) {
            var t = "";
            return TS.model.active_group_id != e.id || TS.client.activeChannelIsHidden() || (t += "active "), e.unread_cnt > 0 && (t += "unread "), e.unread_highlight_cnt > 0 && (t += "mention "), e.is_starred && (t += "is_starred "), TS.notifs.isCorGMuted(e.id) && (t += "muted_channel "), (e._show_in_list_even_though_no_unreads || _.trim(e.last_msg_input)) && (t += "show_in_list_even_though_no_unreads "), t;
          }), Handlebars.registerHelper("mpimMemberCount", function(e) {
            return TS.mpims.getMemberCount(e);
          }), Handlebars.registerHelper("mpimDisplayName", function(e, t, n, i, r) {
            t = !0 === t, r = !0 === r;
            var a = TS.mpims.getDisplayName(e, t, !0 === n, i, r);
            return t || r ? new Handlebars.SafeString(a) : a;
          }), Handlebars.registerHelper("makeMpimDomClass", function(e) {
            var t = "";
            return e ? (e.id !== TS.model.active_mpim_id || TS.client.activeChannelIsHidden() || (t += "active "), (e.unread_cnt > 0 || e.unread_highlight_cnt > 0) && (t += "unread mention "), TS.notifs.isCorGMuted(e.id) && (t += "muted_channel "), e.is_starred && (t += "is_starred "), _.trim(e.last_msg_input) && (t += "show_in_list_even_though_no_unreads "), t) : t;
          }), Handlebars.registerHelper("makeMpimDomId", function(e) {
            return TS.templates.makeMpimDomId(e);
          }), Handlebars.registerHelper("makeMpimLink", function(e, t) {
            var n = TS.templates.builders.makeMpimLink(e, t);
            return new Handlebars.SafeString(n);
          }), Handlebars.registerHelper("mpimArchivesPath", function(e) {
            return TS.mpims.getMpimArchivesPath(e);
          }), Handlebars.registerHelper("isCorGMuted", function(e, t) {
            return TS.notifs.isCorGMuted(e) ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("currentUserId", function() {
            return TS.model.user.id;
          }), Handlebars.registerHelper("makeMemberDomId", function(e) {
            return TS.templates.makeMemberDomId(e);
          }), Handlebars.registerHelper("makeChannelListDomId", function(e) {
            return TS.templates.makeChannelListDomId(e);
          }), Handlebars.registerHelper("makeMemberPresenceDomClass", function(e) {
            return TS.templates.makeMemberPresenceDomClass(e.id);
          }), Handlebars.registerHelper("makeMemberPresenceIcon", function(e) {
            return TS.client || TS.warn("Presence icons should not be used outside of the client application, because they rely on a WS connection to keep presence up to date. Rendering anyway, but be careful out there!"), new Handlebars.SafeString(TS.templates.makeMemberPresenceIcon(e));
          }), Handlebars.registerHelper("makeMemberTypeBadge", function() {
            var e = TS.templates.builders.makeMemberTypeBadge.apply(this, arguments);
            return new Handlebars.SafeString(e);
          }), Handlebars.registerHelper("makeMemberTypeBadgeCompact", function() {
            var e = TS.templates.builders.makeMemberTypeBadgeCompact.apply(this, arguments);
            return new Handlebars.SafeString(e);
          }), Handlebars.registerHelper("makeMemberStatusDomClass", function(e) {
            return TS.templates.makeMemberStatusDomClass(e.id);
          }), Handlebars.registerHelper("makeMemberDomClass", function(e) {
            var t = "";
            if (!e) return t;
            if (e.is_self || "away" !== e.presence || (t += "away "), TS.model.active_im_id) {
              TS.ims.getImById(TS.model.active_im_id).user != e.id || TS.client.activeChannelIsHidden() || (t += "active ");
            }
            var n = TS.ims.getImByMemberId(e.id);
            return n && ((n.unread_cnt > 0 || n.unread_highlight_cnt > 0) && (t += "unread mention "), n.is_starred && (t += "is_starred "), _.trim(n.last_msg_input) && (t += "show_in_list_even_though_no_unreads ")), t;
          }), Handlebars.registerHelper("showDraftIcon", function(e, t) {
            return TS.templates.builders.showDraftIcon(e) ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("makeMemberListDomClass", function(e) {
            var t = "member ";
            return "away" === e.presence && (t += "away "), t;
          }), Handlebars.registerHelper("makeMemberPreviewLink", function() {
            var e = TS.templates.builders.makeMemberPreviewLink.apply(this, arguments);
            return new Handlebars.SafeString(e);
          }), Handlebars.registerHelper("makeMemberPreviewLinkById", function(e, t) {
            !0 !== t && (t = !1);
            var n = TS.members.getPotentiallyUnknownMemberById(e) || TS.bots.getBotById(e);
            return n ? new Handlebars.SafeString(TS.templates.builders.makeMemberPreviewLink(n, t)) : new Handlebars.SafeString(_.escape(e));
          }), Handlebars.registerHelper("makeMemberPreviewLinkImage", function() {
            return new Handlebars.SafeString(TS.templates.builders.makeMemberPreviewLinkImage.apply(this, arguments));
          }), Handlebars.registerHelper("makeMemberPreviewCardLinkImage", function() {
            return new Handlebars.SafeString(TS.templates.builders.makeMemberPreviewCardLinkImage.apply(this, arguments));
          }), Handlebars.registerHelper("makeProfileImage", TS.templates.builders.makeProfileImage), Handlebars.registerHelper("makePendingUserImage", function() {
            return new Handlebars.SafeString(TS.templates.builders.makePendingUserImage.apply(this, arguments));
          }), Handlebars.registerHelper("emojiGraphicReplace", function(e, t) {
            var n = {};
            return t && "string" == typeof t ? n.force_style = t : n.obey_emoji_mode_pref = !0, new Handlebars.SafeString(TS.emoji.graphicReplace(e, n));
          }), Handlebars.registerHelper("emojiGraphicReplaceByName", function(e) {
            return TS.emoji.graphicReplace(":" + e + ":");
          }), Handlebars.registerHelper("emojiModePref", function() {
            return TS.model.prefs.emoji_mode;
          }), Handlebars.registerHelper("makeUsernameImage", function(e, t) {
            var n, i, r, a, s, o = TS.bots.getBotByMsg(e);
            e.icons ? s = e.icons : o && o.icons && (s = o.icons), s && (s.image_36 && !TS.environment.is_retina ? n = s.image_36 : s.image_72 && TS.environment.is_retina ? n = s.image_72 : s.image_48 ? n = s.image_48 : s.emoji && ":" === s.emoji.substr(0, 1) && ":" === s.emoji.substr(s.emoji.length - 1, 1) && (r = s.emoji));
            var l = TS.templates.builders.makeBotLink(o, e.username),
              d = e && e.is_ephemeral && "slackbot" === e.username ? TS.members.getMemberById("USLACKBOT") : null;
            switch (t) {
              case 24:
                i = "thumb_24", a = cdn_url + "/66f9/img/avatars/ava_0002-24.png", d && (a = d.profile.image_24);
                break;
              case 32:
                i = "thumb_32", a = cdn_url + "/0180/img/avatars/ava_0002-32.png", d && (a = d.profile.image_32);
                break;
              case 36:
                i = "thumb_36", a = cdn_url + "/66f9/img/avatars/ava_0002-48.png", d && (a = d.profile.image_48);
                break;
              case 72:
                i = "thumb_72", a = cdn_url + "/66f9/img/avatars/ava_0002-72.png", d && (a = d.profile.image_72);
                break;
              case 192:
                i = "thumb_192", a = cdn_url + "/7fa9/img/avatars/ava_0002-192.png", d && (a = d.profile.image_192);
                break;
              default:
                i = "thumb_48", a = cdn_url + "/7fa9/img/avatars/ava_0002-192.png", d && (a = d.profile.image_48);
            }
            var c;
            return c = n ? l.start_a + '<img style="border: 0" src="' + n + '" class="member_image ' + i + '" />' + l.end_a : r ? l.start_a + '<div style="border: 0" class="member_image ' + i + '">' + TS.emoji.graphicReplace(_.escape(r)) + "</div>" + l.end_a : d ? l.start_a + '<img src="' + a + '" class="member_image ' + i + '" />' + l.end_a : l.start_a + '<img src="' + a + '" class="member_image bot_icon_default ' + i + '" />' + l.end_a, new Handlebars.SafeString(c);
          }), Handlebars.registerHelper("getMemberPreviewLinkImageArgs", function(e, t, i, r, a, s, o) {
            var l;
            if (!(l = "object" === (void 0 === e ? "undefined" : n(e)) ? e : TS.members.getMemberById(e)) || !l.profile) return "";
            i = !0 === i, r = !0 === r, a = !0 === a, s = !0 === s, o = "string" == typeof o && o, "USLACKBOT" === e && o && (l = TS.utility.slackbot.getWithFeels(o));
            var d, c, _;
            switch (c = "background-image: ", _ = [], t) {
              case 20:
              case 24:
                d = TS.environment.is_retina ? l.profile.image_48 : l.profile.image_24;
                break;
              case 32:
                d = TS.environment.is_retina ? l.profile.image_72 : l.profile.image_32;
                break;
              case 36:
              case 48:
                d = TS.environment.is_retina ? l.profile.image_72 : l.profile.image_48;
                break;
              case 56:
              case 72:
                d = TS.environment.is_retina ? l.profile.image_192 : l.profile.image_72;
                break;
              case 192:
                d = TS.environment.is_retina ? l.profile.image_512 || l.profile.image_192 : l.profile.image_192;
                break;
              case 512:
                d = TS.environment.is_retina ? l.profile.image_1024 || l.profile.image_512 || l.profile.image_192 : l.profile.image_512 || l.profile.image_192;
                break;
              default:
                d = TS.environment.is_retina ? l.profile.image_72 : l.profile.image_48;
            }
            if (_.push("url('" + d + "')"), 512 === t) {
              var u = TS.environment.is_retina ? l.profile.image_72 : l.profile.image_48;
              _.push("url('" + u + "')");
            }
            return c = i ? _.length ? _.join(", ") : "" : _.length ? c + _.join(", ") : "", {
              omit_link: r,
              omit_badge: a,
              lazy: i,
              member: l,
              size: t,
              include_restricted_overlay: !s || !0,
              bg_img_style: c
            };
          }), Handlebars.registerHelper("getGuestBadgeSize", function(e) {
            var t;
            switch (e) {
              case 24:
                t = 10;
                break;
              case 32:
              case 36:
              case 48:
                t = 16;
                break;
              case 72:
                t = 24;
                break;
              case 192:
                t = 48;
                break;
              case 512:
                t = 96;
                break;
              default:
                t = 16;
            }
            return t;
          }), Handlebars.registerHelper("getTeamBadgeSize", function(e) {
            var t;
            switch (e) {
              case 32:
              case 36:
              case 48:
                t = 16;
                break;
              case 72:
                t = 22;
                break;
              case 192:
              case 512:
                break;
              default:
                t = 16;
            }
            return t;
          }), Handlebars.registerHelper("getMemberNameById", function(e) {
            var t = TS.members.getMemberById(e);
            return t ? t.name : e;
          }), Handlebars.registerHelper("getPrefCompliantMemberNameById", function(e) {
            return TS.members.getPrefCompliantMemberNameById(e);
          }), Handlebars.registerHelper("getMemberNameNoModel", function(e, t) {
            return TS.boot_data.name_tagging_client ? e.display_name || e.real_name || t : e.real_name || t;
          }), Handlebars.registerHelper("getPrefCompliantMemberName", function(e, t, n) {
            return TS.members.getPrefCompliantMemberName(e, !0 === t, !0 === n);
          }), Handlebars.registerHelper("shouldShowMemberRestrictionBanner", function(t, n) {
            return n = e(n), _.isString(t) && (t = TS.members.getMemberById(t)), t && (t.is_restricted || t.is_external && TS.boot_data.feature_shared_channels_client) ? n.fn(this) : n.inverse(this);
          }), Handlebars.registerHelper("shouldUseUnifiedMemberDisplay", function(t) {
            return t = e(t), TS.boot_data.feature_shared_channels_client ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("unlessUseUnifiedMemberDisplay", function(e) {
            return Handlebars.helpers.shouldUseUnifiedMemberDisplay.call(this, {
              fn: e.inverse,
              inverse: e.fn,
              hash: e.hash
            });
          }), Handlebars.registerHelper("getTeamNameByMember", function(e) {
            return TS.teams.getTeamNameByMember(e);
          });
          Handlebars.registerHelper("getTeamById", function(e) {
            return TS.teams.getTeamById(e);
          }), Handlebars.registerHelper("getTeamNameById", function(e) {
            return TS.teams.getTeamNameById(e);
          }), Handlebars.registerHelper("getSharedTeamsList", function(e) {
            var t = e.shared_team_ids.map(function(e) {
              return TS.teams.getTeamNameById(e);
            });
            return TS.i18n.listify(t).join("");
          }), Handlebars.registerHelper("getMemberPreviewLinkTarget", function(e) {
            var t = TS.boot_data.feature_name_tagging_client || TS.boot_data.feature_shared_channels_client ? e.id : e.name;
            return TS.utility.shouldLinksHaveTargets() ? new Handlebars.SafeString('target="/team/' + t + '"') : "";
          }), Handlebars.registerHelper("getMemberProfileFieldDisplayName", function(e) {
            return TS.members.getMemberProfileFieldDisplayName(e);
          }), Handlebars.registerHelper("getMemberSecondaryName", function(e) {
            return TS.members.getMemberSecondaryName(e);
          }), Handlebars.registerHelper("memberHasSecondaryName", function(e, t) {
            var n = !1;
            return e && (n = !!TS.members.getMemberSecondaryName(e)), n ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("unlessMemberHasSecondaryName", function(e, t) {
            return Handlebars.helpers.memberHasSecondaryName.call(this, e, {
              fn: t.inverse,
              inverse: t.fn,
              hash: t.hash
            });
          }), Handlebars.registerHelper("getMemberRealName", function(e) {
            return TS.members.getMemberRealName(e);
          }), Handlebars.registerHelper("getMemberUsernameAndRealNameInCorrectOrder", function(e) {
            var t = ["member_username", "member_real_name"],
              n = TS.members.getMemberUsernameAndRealNameInCorrectOrder(e);
            n.is_username_first || t.reverse();
            var i = n.names_in_order.map(function(e, n) {
              return '<span class="' + _.get(t, n, "") + '">' + _.escape(e) + "</span>";
            }).join("");
            return new Handlebars.SafeString(i);
          }), Handlebars.registerHelper("getMemberProfileFieldDisplayNameandRealNameInCorrectOrder", function(e) {
            var t, n = _.escape(TS.members.getPrefCompliantMemberName(e));
            t = e.is_self ? TS.i18n.t("(you)", "templates_helpers")() : _.escape(TS.members.getMemberSecondaryName(e));
            var i = '<span class="member_real_name">' + n + "</span>",
              r = '<span class="member_preferred_name">' + t + "</span>";
            return new Handlebars.SafeString(i + r);
          }), Handlebars.registerHelper("getMemberCurrentStatusEmoji", function(e, t) {
            return t = t || {}, t = t.hash || t, Handlebars.helpers.formatCurrentStatusWithoutAnimations(TS.members.getMemberCurrentStatus(e).emoji, _.assign({
              transform_missing_emoji: !0,
              show_icon_for_emoji_in_as_text_mode: !0
            }, t));
          }), Handlebars.registerHelper("getMemberCurrentStatusText", function(e) {
            return Handlebars.helpers.formatCurrentStatusWithoutAnimations(TS.members.getMemberCurrentStatus(e).text, {
              prevent_copy_paste: !1
            });
          }), Handlebars.registerHelper("getMemberCurrentStatusForDisplay", function(e) {
            return new Handlebars.SafeString(TS.members.getMemberCurrentStatusForDisplay(e));
          }), Handlebars.registerHelper("getMemberCurrentStatusForDisplayWithoutAnimations", function(e) {
            return new Handlebars.SafeString(TS.members.getMemberCurrentStatusForDisplay(e, {
              stop_animations: !0
            }));
          }), Handlebars.registerHelper("seesCurrentStatusInProfileView", function(t, n) {
            return n = e(n), t.profile.status_text || t.profile.status_emoji || "client" === TS.boot_data.app && t.is_self ? n.fn(this) : n.inverse(this);
          }), Handlebars.registerHelper("getTeamCustomStatusPresets", function() {
            return TS.team.getTeamCustomStatusPresets();
          }), Handlebars.registerHelper("getDisplayNameOfUserForIm", function(e) {
            return e ? TS.ims.getDisplayNameOfUserForIm(e) : "MISSING_IM";
          }), Handlebars.registerHelper("getIMIdByMemberId", function(e) {
            var t = TS.ims.getImByMemberId(e);
            return t ? t.id : "";
          }), Handlebars.registerHelper("memberHasIm", function(e) {
            var t = e.hash.member,
              n = !1;
            return t && TS.ims.getImByMemberId(t.id) && (n = !0), n ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("memberHasImUnreadCount", function(e) {
            var t = e.hash.member,
              n = !1;
            if (t) {
              var i = TS.ims.getImByMemberId(t.id);
              i && i.unread_cnt && (n = !0);
            }
            return n ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("getUnreadCountForIMByMemberId", function(e) {
            var t = TS.ims.getImByMemberId(e);
            return t ? t.unread_cnt : "";
          }), Handlebars.registerHelper("makeMemberLinksWithDisplayNames", function(e) {
            return e ? e.split(/\s*,\s*/).map(function(e) {
              return TS.templates.builders.makeMemberPreviewLink(TS.members.getMemberById(e));
            }).join(", ") : "";
          }), Handlebars.registerHelper("makeIMLink", function(e) {
            return new Handlebars.SafeString(i(e));
          }), Handlebars.registerHelper("makeIMLinkById", function(e) {
            var t = TS.ims.getImById(e);
            if (t) return new Handlebars.SafeString(i(t));
          }), Handlebars.registerHelper("getBotNameAndIcon", r), Handlebars.registerHelper("getBotName", TS.templates.builders.getBotName), Handlebars.registerHelper("getBotNameWithLink", TS.templates.builders.getBotNameWithLink), Handlebars.registerHelper("getBotColorClassByUserName", a), Handlebars.registerHelper("getMemberColorClassById", s), Handlebars.registerHelper("getMemberColorClassByImId", function(e) {
            var t = TS.ims.getImById(e);
            return t ? s(t.user) : "color_unknown";
          }), Handlebars.registerHelper("makeMemberLinkAriaLabelSafe", TS.templates.builders.makeMemberLinkAriaLabelSafe), Handlebars.registerHelper("msgIsFromSelf", function(e) {
            var t = e.hash.msg,
              n = t.user;
            !n && "file_comment" === t.subtype && t.comment && (n = t.comment.user);
            var i = TS.members.getMemberById(n);
            return i && i.is_self ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("memberIsSelf", function(e) {
            var t = TS.members.getMemberById(e.hash.id);
            return t && t.is_self ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("memberIsAdmin", function(e) {
            var t = TS.members.getMemberById(e.hash.id);
            return t && t.is_admin ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("currentUserIsAdmin", function(e) {
            return TS.model.user.is_admin ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("currentUserIsOwner", function(e) {
            return TS.model.user.is_owner ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("currentUserIsRA", function(e) {
            return TS.model.user.is_restricted ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("currentUserIsURA", function(e) {
            return TS.model.user.is_ultra_restricted ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("tinyspeck", function(e) {
            return TS.boot_data.feature_tinyspeck ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("makeUnshareLinkById", function(e) {
            var t = TS.files.getFileById(TS.web.file.file_id),
              n = TS.shared.getModelObById(e);
            if (n) return TS.templates.builders.makeUnshareLink(n, t);
          }), Handlebars.registerHelper("makeUnshareLink", function(e) {
            var t = TS.files.getFileById(TS.web.file.file_id);
            return TS.templates.builders.makeUnshareLink(e, t);
          }), Handlebars.registerHelper("makeFileDomId", function(e) {
            return TS.templates.makeFileDomId(e);
          }), Handlebars.registerHelper("makeFileCommentsDomId", function(e) {
            return TS.templates.makeFileCommentsDomId(e);
          }), Handlebars.registerHelper("makeFileContentsDomId", function(e) {
            return TS.templates.makeFileContentsDomId(e);
          }), Handlebars.registerHelper("makeFileCommentHelpHTML", function(e) {
            return new Handlebars.SafeString(TS.templates.builders.makeFileCommentHelpHTML(e));
          }), Handlebars.registerHelper("makeFileHeader", function(e, t) {
            var n = TS.files.getFileActions(e);
            return n.file = e, n.is_post = "space" === e.mode || "post" === e.mode, n.download = "hosted" === e.mode, n.member = t, TS.templates.file_header(n);
          }), Handlebars.registerHelper("makeFilePreviewHeader", function(e, t, n) {
            var i = TS.files.getFileActions(e);
            return i.file = e, i.member = t, i.download = "hosted" === e.mode, i.edit_link = "post" === e.mode ? e.edit_link : e.permalink, i.is_post = "space" === e.mode || "post" === e.mode, i.is_snippet = "snippet" === e.mode, i.preview = !0, TS.boot_data.feature_file_threads && n && (i.model_ob = n), new Handlebars.SafeString(TS.templates.file_header(i));
          }), Handlebars.registerHelper("makeFileSize", function(e) {
            return TS.utility.convertFilesize(e.size) + " " + e.pretty_type;
          }), Handlebars.registerHelper("formatSpaceHtml", function(e) {
            function t(e) {
              if (e.childNodes)
                for (var n = 0; n < e.childNodes.length; n += 1) t(e.childNodes[n]);
              if (e.nodeType == Node.TEXT_NODE) {
                var i = _.escape(e.textContent),
                  r = TS.emoji.graphicReplace(TS.emoji.replaceEmoticons(i), {
                    include_title: !0,
                    include_text: !1
                  });
                if (r !== i) {
                  var a = $("<span>").html(r)[0];
                  [].slice.apply(a.childNodes).forEach(function(t) {
                    e.parentNode.insertBefore(t, e);
                  }), e.parentNode.removeChild(e);
                }
              }
            }
            var n = $("<div>").html(e);
            return t(n[0]), TS.utility && TS.utility.attachments && TS.utility.attachments.unfurlPlaceholders(n), new Handlebars.SafeString(n.html());
          }), Handlebars.registerHelper("fileIsImage", function(e) {
            var t = TS.files.getFileById(e.hash.id);
            return t && t.mimetype && 0 === t.mimetype.indexOf("image/") ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("mimeTypeIsImage", function(e) {
            return e.hash.type && 0 === e.hash.type.indexOf("image/") ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("fileDefaultIsNewWindow", function(t) {
            t = e(t);
            var n = TS.files.getFileById(t.hash.id);
            if (!n) return t.inverse(this);
            var i = n.mimetype && 0 === n.mimetype.indexOf("image/") && -1 === n.mimetype.indexOf("svg"),
              r = "pdf" === n.filetype;
            return i || r ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("fileIconTypeDownload", function() {
            var t = Array.prototype.slice.call(arguments),
              n = e(t.pop()),
              i = t[0];
            if ("string" == typeof i && (i = TS.files.getFileById(i)), !i) return n.inverse(this);
            var r = "external" === i.mode,
              a = i.mimetype && 0 === i.mimetype.indexOf("image/") && -1 === i.mimetype.indexOf("svg"),
              s = "pdf" === i.filetype;
            return r || a || s ? n.inverse(this) : n.fn(this);
          }), Handlebars.registerHelper("nonImageCanUseFSFV", function(e, t) {
            return e && TS.model.pdf_viewer_enabled && "hosted" === e.mode && TS.files.fileIsPDF(e) && e.size <= 5e7 ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("makeFilePrivacyLabel", function(e) {
            return e.is_public ? TS.i18n.t("Shared", "templates_helpers")() : e.groups.length > 0 || e.ims.length > 0 ? TS.i18n.t("Private", "templates_helpers")() : TS.i18n.t("Draft", "templates_helpers")();
          }), Handlebars.registerHelper("makeExternalFiletypeHTML", function(e) {
            return new Handlebars.SafeString(TS.templates.builders.makeExternalFiletypeHTML(e));
          }), Handlebars.registerHelper("makeFileShareLabel", function(e) {
            return new Handlebars.SafeString(TS.templates.builders.makeFileShareLabel(e));
          }), Handlebars.registerHelper("makeFileGroupChannelList", function(e) {
            return TS.templates.builders.makeFileGroupChannelList(e);
          }), Handlebars.registerHelper("nl2brAndHighlightSearchMatches", function(e) {
            if (e) return e = _.escape(e), e = e.replace(/\n/g, "<br />"), new Handlebars.SafeString(TS.utility.msgs.handleSearchHighlights(e));
          }), Handlebars.registerHelper("maybeGetIconForTeamProfileField", function(e) {
            var t = ["slack", "apple", "android", "twitter", "github", "google", "windows", "youtube", "skype", "facebook", "asana", "linkedin", "tumblr", "instagram", "soundcloud", "flickr", "pinterest", "tripit", "hangouts", "viber", "line"];
            if (e = e.toLowerCase(), t.indexOf(e) > -1) return '<i class="ts_icon ts_icon_' + e + '"></i>';
          }), Handlebars.registerHelper("getVisibleTeamProfileFieldsForMember", function(e, t) {
            var n = TS.team.getVisibleTeamProfileFieldsForMember(e);
            return new Handlebars.SafeString(TS.templates.team_profile_fields({
              fields: n,
              lazy_load_profile_fields: t && t.hash.lazy_load_profile_fields
            }));
          }), Handlebars.registerHelper("isSkypeTeamProfileField", function(e, t) {
            return "text" === e.type && "skype" === e.label.toLocaleLowerCase() ? t.fn(this) : t.inverse(this);
          }), Handlebars.registerHelper("getSafeSkypeURLComponent", function(e) {
            var t = e.match(/^[a-zA-Z][a-zA-Z0-9.,\-_@]{5,31}/);
            return t ? t[0] : "";
          }), Handlebars.registerHelper("highlightSearchMatches", function(e) {
            if (e) return e = _.escape(e), TS.utility.msgs.handleSearchHighlights(e);
          }), Handlebars.registerHelper("highlightSearchMatchesInSpacesHtml", function(e) {
            if (e) {
              var t = Handlebars.helpers.formatSpaceHtml(e);
              return new Handlebars.SafeString(TS.utility.msgs.handleSearchHighlights(t));
            }
          }), Handlebars.registerHelper("highlightSearchMatchesInFileTitle", function(e) {
            if (e) return e = _.unescape(e), e = _.escape(e), e = TS.emoji.graphicReplace(e), new Handlebars.SafeString(TS.utility.msgs.handleSearchHighlights(e));
          }), Handlebars.registerHelper("searchFilter", function() {
            if (TS.search.filter) return TS.search.filter;
          }), Handlebars.registerHelper("searchSort", function() {
            if (TS.search.sort) return TS.search.sort;
          }), Handlebars.registerHelper("makeUnreadMessagesDomId", function(e) {
            return TS.templates.makeUnreadMessagesDomId(e);
          }), Handlebars.registerHelper("makeUnreadGroupMessagesDomId", function(e) {
            return TS.templates.makeUnreadGroupMessagesDomId(e);
          }), Handlebars.registerHelper("makeUnreadDmsDomId", function(e) {
            return TS.templates.makeUnreadDmsDomId(e);
          }), Handlebars.registerHelper("makeSentMessagesDomId", function(e) {
            return TS.templates.makeSentMessagesDomId(e);
          }), Handlebars.registerHelper("makeSentGroupMessagesDomId", function(e) {
            return TS.templates.makeSentGroupMessagesDomId(e);
          }), Handlebars.registerHelper("makeSentDmsDomId", function(e) {
            return TS.templates.makeSentDmsDomId(e);
          }), Handlebars.registerHelper("makeIssueListDomId", function(e) {
            return TS.templates.makeIssueListDomId(e);
          }), Handlebars.registerHelper("math", function(e, t, n) {
            return arguments.length < 4 && (n = t, t = "+"), e = parseFloat(e), n = parseFloat(n), {
              "+": e + n,
              "-": e - n,
              "*": e * n,
              "/": e / n,
              "%": e % n
            }[t];
          }), Handlebars.registerHelper("loadingHTML", function() {
            return new Handlebars.SafeString(TS.templates.builders.loadingHTML());
          }), Handlebars.registerHelper("versioned_loading_animation", function() {
            return cdn_url + "/9c217/img/loading.gif";
          }), Handlebars.registerHelper("versioned_loading_hash_animation", function() {
            return cdn_url + "/9c217/img/loading_hash_animation_@2x.gif";
          }), Handlebars.registerHelper("versioned_mac_dock_badge", function() {
            return cdn_url + "/9135/img/prefs_mac_dock_badge@2x.png";
          }), Handlebars.registerHelper("versioned_prefs_messages_clean", function() {
            return cdn_url + "/e5d8/img/prefs_messages_clean@2x.png";
          }), Handlebars.registerHelper("versioned_prefs_messages_compact", function() {
            return cdn_url + "/e5d8/img/prefs_messages_compact@2x.png";
          }), Handlebars.registerHelper("versioned_services_box_32", function() {
            return cdn_url + "/2fac/plugins/box/assets/service_32.png";
          }), Handlebars.registerHelper("versioned_services_gdrive_16", function() {
            return cdn_url + "/66f9/img/services/gdrive_16.png";
          }), Handlebars.registerHelper("versioned_services_onedrive_32", function() {
            return cdn_url + "/a82d/plugins/onedrive/assets/service_32.png";
          }), Handlebars.registerHelper("versioned_slackbot_48", function() {
            return cdn_url + "/2fac/plugins/slackbot/assets/service_48.png";
          }), Handlebars.registerHelper("versioned_slackbot_72", function() {
            return cdn_url + "/0180/img/slackbot_72.png";
          }), Handlebars.registerHelper("versioned_theme_thumb_brinjal", function() {
            return cdn_url + "/52841/img/themes/brinjal@2x.png";
          }), Handlebars.registerHelper("versioned_theme_thumb_chocolate", function() {
            return cdn_url + "/52841/img/themes/chocolate@2x.png";
          }), Handlebars.registerHelper("versioned_theme_thumb_default", function() {
            return cdn_url + "/52841/img/themes/aubergine@2x.png";
          }), Handlebars.registerHelper("versioned_theme_thumb_hoth", function() {
            return cdn_url + "/52841/img/themes/hoth@2x.png";
          }), Handlebars.registerHelper("versioned_theme_thumb_monument", function() {
            return cdn_url + "/52841/img/themes/monument@2x.png";
          }), Handlebars.registerHelper("versioned_theme_thumb_ocean", function() {
            return cdn_url + "/52841/img/themes/ochin@2x.png";
          }), Handlebars.registerHelper("versioned_theme_thumb_solanum", function() {
            return cdn_url + "/52841/img/themes/solanum@2x.png";
          }), Handlebars.registerHelper("versioned_theme_thumb_workhard", function() {
            return cdn_url + "/52841/img/themes/workhard@2x.png";
          }), Handlebars.registerHelper("versioned_twitter_64", function() {
            return cdn_url + "/66f9/img/services/twitter_64.png";
          }), Handlebars.registerHelper("versioned_upload_file_icon", function(e) {
            return "1x" === e ? cdn_url + "/a079/img/upload_file_icon.png" : "2x" === e ? cdn_url + "/a079/img/upload_file_icon@2x.png" : void 0;
          }), Handlebars.registerHelper("versioned_default_application_icon", function() {
            return cdn_url + "/bfaba/img/apps/default_new_app_icon.png";
          }), Handlebars.registerHelper("versioned_join_shared_channel", function(e) {
            return "1x" === e ? cdn_url + "/742c/img/join-channel/join_shared_channel.png" : "2x" === e ? cdn_url + "/742c/img/join-channel/join_shared_channel@2x.png" : void 0;
          }), Handlebars.registerHelper("versioned_join_team_channel", function(e) {
            return "1x" === e ? cdn_url + "/742c/img/join-channel/join_team_channel.png" : "2x" === e ? cdn_url + "/742c/img/join-channel/join_team_channel@2x.png" : void 0;
          }), Handlebars.registerHelper("versioned_signin_no_teams", function(e) {
            return "1x" === e ? cdn_url + "/7c9e4/img/enterprise/signin-no-teams.png" : "2x" === e ? cdn_url + "/7c9e4/img/enterprise/signin-no-teams@2x.png" : void 0;
          }), Handlebars.registerHelper("versioned_basic_analytics_coming_soon", function(e) {
            return "1x" === e ? cdn_url + "/7573/img/enterprise/ent_basic_analytics_coming_soon.png" : "2x" === e ? cdn_url + "/7573/img/enterprise/ent_basic_analytics_coming_soon@2x.png" : void 0;
          }), Handlebars.registerHelper("versioned_slack_logo_240", function() {
            return cdn_url + "/66f9/img/slack_logo_240.png";
          }), Handlebars.registerHelper("versioned_file_drop_blue", function() {
            return cdn_url + "/c3881/img/file-drop-blue@2x.png";
          }), Handlebars.registerHelper("versioned_focus_rocks", function() {
            return cdn_url + "/883cf/img/focus-rocks-0.png";
          }), Handlebars.registerHelper("versioned_ill_team", function(e) {
            return "1x" === e ? cdn_url + "/9288/img/quick_promo/ill_team.png" : "2x" === e ? cdn_url + "/9288/img/quick_promo/ill_team@2x.png" : void 0;
          }), Handlebars.registerHelper("versioned_basic_analytics_upsell_banner_image", function() {
            return cdn_url + "/9fe6/img/enterprise/ent_basic_analytics_upsell_banner_image.gif";
          }), Handlebars.registerHelper("pinToLabel", function(e) {
            var t = "";
            return e.is_channel && (t += "#"), e.is_im || e.is_mpim ? t += TS.i18n.t("this conversation", "pins")() : t += _.escape(e.name), new Handlebars.SafeString(t);
          }), Handlebars.registerHelper("preventWidow", function(e) {
            var t = e.split(" ");
            return t.length > 1 && (t[t.length - 2] += "&nbsp;" + t[t.length - 1], t.pop(), e = t.join(" ")), new Handlebars.SafeString(e);
          }), Handlebars.registerHelper("numberWithCommas", function(e) {
            return TS.utility.numberWithCommas(e);
          }), Handlebars.registerHelper("buildReplyBarHTML", function(e, t) {
            return new Handlebars.SafeString(TS.templates.builders.buildReplyBarHTML(e, t));
          }), Handlebars.registerHelper("makeSHRoomParticipantList", TS.templates.builders.makeSHRoomParticipantList), Handlebars.registerHelper("makeSHRoomSharedList", TS.templates.builders.makeSHRoomSharedList), Handlebars.registerHelper("atLabel", function(e) {
            return TS.templates.builders.atLabel(e);
          }), Handlebars.registerHelper("renderAttachmentActions", function(e, t) {
            return new Handlebars.SafeString(TS.templates.builders.buildAttachmentActions(e, t));
          }), Handlebars.registerHelper("renderAttachmentActionSelectOption", function(e, t) {
            var n = _.merge({}, e, {
                is_group_item: t.hash.is_group_item
              }),
              i = TS.templates.attachment_actions_select_option(n);
            return new Handlebars.SafeString(i);
          }), Handlebars.registerHelper("renderAttachmentMedia", function(e, t) {
            var n, i, r = TS.utility.attachments.getMediaType(e);
            switch (r) {
              case "other":
                e.other_html && (n = TS.templates.builders.buildInlineOtherDiv(e.other_html, t, e.safe_other_html));
                break;
              case "video":
                e.video_html && e.thumb_url && (i = e.from_url || e.thumb_url, n = TS.templates.builders.buildInlineVideoDiv(i, t));
                break;
              case "image":
                if (e.image_url) {
                  i = e.from_url || e.image_url;
                  var a = {};
                  a.flush_with_attachment = !0, a.is_giphy_shuffle = e.fallback && e.fallback.indexOf("giphy") >= 0 && e.actions && e.actions[1] && "shuffle" === e.actions[1].name, n = TS.templates.builders.buildInlineImgDiv(i, t, a);
                }
                break;
              case "audio":
                e.audio_html ? n = TS.templates.builders.buildInlineAudioDiv(e.audio_html, t, e.safe_audio_html) : e.audio_url && (n = TS.templates.builders.formatSoundUrl(e));
            }
            if (n) return new Handlebars.SafeString(n);
          }), Handlebars.registerHelper("getMemberTypeClass", TS.templates.builders.getMemberTypeClass), Handlebars.registerHelper("inlineSaver", function(e) {
            var t = TS.templates.inline_saver({
              hide_text: e.hash.hide_text,
              target: e.hash.target
            });
            return new Handlebars.SafeString(t);
          }), Handlebars.registerHelper("dangerouslyRenderHTML", function(e) {
            return new Handlebars.SafeString(e);
          }), Handlebars.registerHelper("attachmentMediaCaret", function(e, t) {
            var n, i = "",
              r = TS.utility.attachments.getMediaType(e);
            switch (r) {
              case "video":
                n = e.from_url || e.thumb_url, i = TS.templates.builders.buildInlineVideoToggler(n, t, !0);
                break;
              case "audio":
                n = e.audio_html || e.audio_url, i = TS.templates.builders.buildInlineAudioToggler(n, t);
                break;
              case "other":
                i = TS.templates.builders.buildInlineOtherToggler(e.other_html, t);
                break;
              case "image":
                n = e.from_url || e.image_url;
                var a = {};
                a.is_giphy_shuffle = e.fallback && e.fallback.indexOf("giphy") >= 0 && e.actions && e.actions[1] && "shuffle" === e.actions[1].name, i = TS.templates.builders.buildInlineImgToggler(n, t, !1, a);
                break;
              default:
                i = TS.templates.builders.buildInlineAttachmentToggler(e.from_url, t);
            }
            return i && (i = '<span class="media_caret">' + i + "</span>"), new Handlebars.SafeString(i);
          }), Handlebars.registerHelper("isMsgReply", function(e) {
            var t = e.hash.msg;
            return TS.utility.msgs.isMsgReply(t) ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("buildMsgHTMLForThreadsView", function(e, t, n, i) {
            var r = TS.templates.builders.buildThreadMsgHTML(e, t, n, i);
            return new Handlebars.SafeString(r);
          }), Handlebars.registerHelper("buildThreadParticipantListHTML", function(e) {
            return new Handlebars.SafeString(TS.templates.builders.buildThreadParticipantListHTML(e));
          }), Handlebars.registerHelper("supportsTextyTakesOver", function(e) {
            return TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("supportsTextyMentions", function(e) {
            return TS.boot_data.feature_texty_mentions && TS.utility.contenteditable.supportsTexty() ? e.fn(this) : e.inverse(this);
          }), Handlebars.registerHelper("getTeamIconOfSize", function(e, t) {
            return e && e.icon ? e.icon["image_" + t] : null;
          }), Handlebars.registerHelper("listItemCount", function(e) {
            return e = TS.utility.parseJSONOrElse(e, e), _.isString(e) && e.length ? e.split(",").length : e.length;
          }), Handlebars.registerHelper("getIconSizeToFit", function(e) {
            var t = [230, 132, 102, 88, 68, 44, 34];
            if (e >= _.first(t)) return _.first(t);
            if (e <= _.last(t)) return _.last(t);
            for (var n = _.first(t), i = 0; i < t.length; i += 1) t[i] >= e && (n = t[i]);
            return n;
          }), Handlebars.registerHelper("prefsNotificationExampleAll", function() {
            var e = _.escape(TS.model.team.name);
            TS.model.is_mac || (e = TS.i18n.t("from {team_name}", "prefs")({
              team_name: e
            }));
            var t = TS.templates.prefs_notification_example({
              name: e,
              text: TS.i18n.t("Good morning everyone!", "prefs")()
            });
            return new Handlebars.SafeString(t);
          }), Handlebars.registerHelper("prefsNotificationExampleMentions", function() {
            var e = _.escape(TS.model.team.name);
            TS.model.is_mac || (e = TS.i18n.t("from {team_name}", "prefs")({
              team_name: e
            }));
            var t = ":wave:",
              n = TS.emoji.getChosenSkinTone();
            n && (t += ":" + n + ":");
            var i = TS.emoji.graphicReplace(t),
              r = TS.templates.prefs_notification_example({
                name: e,
                text: new Handlebars.SafeString(TS.i18n.t("{wave_emoji} Hi <strong>@{username}</strong>", "prefs")({
                  wave_emoji: i,
                  username: _.escape(TS.model.user.name)
                }))
              });
            return new Handlebars.SafeString(r);
          }), Handlebars.registerHelper("prefsNotificationSettingReadable", function(e) {
            if (!e.desktop && !e.mobile) return "";
            var t = "";
            return e.desktop === e.mobile ? "everything" === e.desktop ? t += TS.i18n.t("<strong>Desktop and Mobile:</strong> All new messages", "prefs")() : "mentions" === e.desktop ? t += TS.i18n.t("<strong>Desktop and Mobile:</strong> Direct messages, mentions &amp; keywords", "prefs")() : t += TS.i18n.t("<strong>Desktop and Mobile:</strong> Nothing", "prefs")() : (e.desktop && ("everything" === e.desktop ? t += TS.i18n.t("<strong>Desktop:</strong> All new messages", "prefs")() : "mentions" === e.desktop ? t += TS.i18n.t("<strong>Desktop:</strong> Direct messages, mentions &amp; keywords", "prefs")() : t += TS.i18n.t("<strong>Desktop:</strong> Nothing", "prefs")()), e.desktop && e.mobile && (t += "<br>"), e.mobile && ("everything" === e.mobile ? t += TS.i18n.t("<strong>Mobile:</strong> All new messages", "prefs")() : "mentions" === e.mobile ? t += TS.i18n.t("<strong>Mobile:</strong> Direct messages, mentions &amp; keywords", "prefs")() : t += TS.i18n.t("<strong>Mobile:</strong> Nothing", "prefs")())), new Handlebars.SafeString(t);
          });
        },
        test: function() {
          return {
            _optionsFnInverseBooleanHelper: e,
            _inlineImgSrcForFile: t
          };
        }
      });
      var e = function(e) {
          return "function" != typeof e.fn && (e.fn = function() {
            return !0;
          }), "function" != typeof e.inverse && (e.inverse = function() {
            return !1;
          }), e;
        },
        t = function(e, t) {
          return "string" == typeof e && (e = TS.files.getFileById(e)), !!e && (!!TS.files.fileIsImage(e) && (t || (t = 480), TS.files.getThumbSrcForFile(e, {
            max_size: t
          })));
        };
    }();
  },
  2532: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("templates", {
        onStart: function() {
          n(), TS.members && TS.members.user_color_changed_sig.add(TS.templates.memberUserColorChanged, TS.templates), TS.prefs && TS.prefs.sidebar_behavior_changed_sig.add(TS.templates.sidebarBehaviorPrefChanged, TS.templates), TS.environment.retina_changed_sig.add(e);
        },
        makeUnreadMessagesDomId: function(e) {
          return TS.utility.makeSafeForDomId("activity_unread_messages_" + e.id);
        },
        makeRxnKeyDomClass: function(e) {
          return TS.utility.makeSafeForDomId("rxns_key_" + e);
        },
        makeUnreadGroupMessagesDomId: function(e) {
          return TS.utility.makeSafeForDomId("activity_unread_group_messages_" + e.id);
        },
        makeUnreadDmsDomId: function(e) {
          return TS.utility.makeSafeForDomId("activity_unread_dms_" + e.id);
        },
        makeSentMessagesDomId: function(e) {
          return TS.utility.makeSafeForDomId("activity_sent_messages_" + e.id);
        },
        makeSentGroupMessagesDomId: function(e) {
          return TS.utility.makeSafeForDomId("activity_sent_group_messages_" + e.id);
        },
        makeIssueListDomId: function(e) {
          return "issue_list_" + e;
        },
        makeSentDmsDomId: function(e) {
          return TS.utility.makeSafeForDomId("activity_sent_dms_" + e.id);
        },
        makeMsgDomId: function(e) {
          return TS.utility.makeSafeForDomId("msg_" + e);
        },
        makeMsgLabelDomId: function(e) {
          return TS.utility.makeSafeForDomId("msg_" + e + "_label");
        },
        makeMsgAttachmentTextExpanderDomId: function(e, t) {
          return TS.utility.makeSafeForDomId("msg_rest_text_expander_" + e + "_" + t);
        },
        makeMSRDomId: function(e) {
          return TS.utility.makeSafeForDomId("MSR_" + e.channel.id + "_" + e.ts);
        },
        makeMSRDomIdWithModule: function(e, t) {
          return TS.utility.makeSafeForDomId("MSR_" + e.channel.id + "_" + e.ts + "_" + t);
        },
        makeSHRoomClass: function(e) {
          return TS.utility.makeSafeForDomId("screenhero_room_" + e);
        },
        makeChannelDomId: function(e) {
          return "channel_" + e.id;
        },
        makeChannelDragData: function(e) {
          return JSON.stringify({
            id: e.id,
            name: e.name,
            is_channel: e.is_channel || !1,
            is_group: e.is_group || !1,
            is_im: e.is_im || !1,
            is_mpim: e.is_mpim || !1,
            is_self_im: e.is_self_im || !1,
            is_slackbot_im: e.is_slackbot_im || !1,
            purpose: e.purpose ? e.purpose.value : "",
            topic: e.topic ? e.topic.value : ""
          });
        },
        makeFileDragData: function(e) {
          return JSON.stringify({
            id: e.id,
            name: e.name,
            title: e.title,
            mimetype: e.mimetype,
            filetype: e.filetype,
            size: e.size
          });
        },
        makeDayDividerDomId: function(e) {
          return TS.utility.makeSafeForDomId("day_divider_" + e);
        },
        makeGroupDomId: function(e) {
          return "group_" + e.id;
        },
        makePriorityIconDomId: function(e) {
          return "priority_" + e.id;
        },
        makeStarredIconDomId: function(e) {
          return "starred_" + e.id;
        },
        makeMutedIconDomId: function(e) {
          return "muted_" + e.id;
        },
        makeMemberDomId: function(e) {
          if (e) return TS.templates.makeMemberDomIdById(e.id);
        },
        makeMemberDomIdById: function(e) {
          if (e) return "member_" + e;
        },
        makeMpimDomId: function(e) {
          return "mpim_" + e.id;
        },
        makeChannelListDomId: function(e) {
          return "channel_" + e.id + "_member_list";
        },
        makeFileDomId: function(e) {
          return "file_" + e.id;
        },
        makeFileCommentsDomId: function(e) {
          return "file_comments_" + e.id;
        },
        makeFileContentsDomId: function(e) {
          return "file_contents_" + e.id;
        },
        makeUnreadMsgsDomId: function(e) {
          return "unread_msg_" + e.id;
        },
        makeUnreadHighlightDomId: function(e) {
          if (e) return "unread_highlight_" + e.id;
        },
        makeMemberPresenceDomClass: function(e) {
          return "member_presence_" + e;
        },
        makeMemberPresenceStateClass: function(e) {
          var t = e.presence;
          return TS.dnd.isMemberInDnd(e) && (t += " dnd"), t;
        },
        makeMemberPresenceStateAriaLabel: function(e) {
          var t = e.presence,
            n = "";
          return "active" === t ? n += "active" : "away" === t && (n += "away"), TS.dnd.isMemberInDnd(e) && (n += ", do not disturb"), n;
        },
        makeMemberPresenceIcon: function(e) {
          if (e.deleted) return "";
          var t = TS.templates.makeMemberPresenceDomClass(e.id),
            n = "ts_icon_presence",
            i = "active" === e.presence ? TS.i18n.t("active", "templates_helpers")() : TS.i18n.t("away", "templates_helpers")();
          e.is_ultra_restricted ? (t += " ura", n = "ts_icon_presence_ura") : e.is_restricted ? (t += " ra", n = "ts_icon_presence_ra") : TS.utility.teams.isMemberExternal(e) ? (t += " external", n = "ts_icon_presence_external") : e.is_slackbot && (n = "ts_icon_heart");
          var r = '<i aria-hidden="true" class="ts_icon ' + n + ' presence_icon"></i>',
            a = TS.templates.makeMemberPresenceStateClass(e);
          return '<span data-member-presence="' + e.id + '" class="presence ' + a + " " + t + '" title="' + i + '">' + r + "</span>";
        },
        makeMemberStatusDomClass: function(e) {
          return "member_status_" + e;
        },
        memberUserColorChanged: function(e) {
          var t = "color_" + e.id;
          if (e.color == e.member_color) {
            var n = "color_rule_" + t;
            return void $("#" + n).remove();
          }
          TS.templates.makeUserColorRule(e);
        },
        makeUserColorRule: function(e) {
          var t, n = "color_" + e.id,
            i = "#" + _.escape(e.member_color);
          t = TS.client ? "\t\t\t\t." + n + ":not(.nuc), \t\t\t\t#col_channels ul li:not(.active):not(.away) > ." + n + ":not(.nuc) {\t\t\t\t\tcolor:" + i + ";\t\t\t\t}\t\t\t" : "\t\t\t\t." + n + ":not(.nuc) {\t\t\t\t\tcolor:" + i + ";\t\t\t\t}\t\t\t";
          var r = "color_rule_" + n,
            a = $("#" + r);
          a.length ? a.text(t) : $('<style type="text/css" id="' + r + '">' + t + "</style>").appendTo("body");
        },
        sidebarBehaviorPrefChanged: function() {
          TS.templates.makeSidebarBehaviorRule();
        },
        makeSidebarBehaviorRule: function() {
          var e, t = "sidebar_behavior",
            n = $("#" + t);
          "hide_read_channels" === TS.model.prefs.sidebar_behavior ? e = "\t\t\t\t.channels_list_holder ul li:not(.unread):not(.active):not(.show_in_list_even_though_no_unreads) {\t\t\t\t\tdisplay: none;\t\t\t}" : "hide_read_channels_unless_starred" === TS.model.prefs.sidebar_behavior && (e = "\t\t\t\t.channels_list_holder div:not(#starred_div)>ul li:not(.unread):not(.active):not(.is_starred):not(.show_in_list_even_though_no_unreads) {\t\t\t\t\tdisplay: none;\t\t\t}"), e ? n.length ? n.text(e) : $('<style type="text/css" id="' + t + '">' + e + "</style>").appendTo("head") : $("#" + t).remove();
        },
        makeMsgDomIdInConversation: function(e) {
          return TS.templates.makeMsgDomId(e) + "_conversation";
        },
        makeMsgDomIdInSearch: function(e, t) {
          return TS.templates.makeMsgDomId(e) + "_" + TS.templates.makeMSRDomId(t);
        },
        makeMsgDomIdInSearchTopResults: function(e, t, n) {
          return TS.templates.makeMsgDomId(e) + "_" + TS.templates.makeMSRDomId(t) + "_" + n;
        },
        makeMsgDomIdInUnreadView: function(e) {
          return TS.templates.makeMsgDomId(e) + "_unread_view";
        },
        makeMsgDomIdInThreadsView: function(e) {
          return TS.templates.makeMsgDomId(e) + "_threads_view";
        },
        promiseToRenderAsync: function(e, t) {
          return e ? Promise.resolve(t).then(function(t) {
            return e(t);
          }) : Promise.reject(new Error("No template to render"));
        }
      });
      var e = function() {
          var e, t, n, i;
          $(".member_image").each(function() {
            i = $(this), e = i.data("member-id"), t = i.data("thumb-size"), n = !i.is("a"), e && t && $(this).replaceWith(TS.templates.builders.makeMemberPreviewLinkImage(e, t, !1, n));
          }), i = null;
        },
        t = /{{\s*i18n_ns\s*('|")[a-zA-Z0-9]+('|")\s*}}/,
        n = function() {
          Object.keys(TS.raw_templates).forEach(function(e) {
            TS.templates[e] = i(e, TS.raw_templates[e]), Handlebars.registerPartial(e, TS.templates[e]);
          }), delete TS.raw_templates;
        },
        i = function(e, n) {
          if (!n) return TS.warn(e + " was passed no html"), null;
          t.test(n) && (n += " {{_i18n_ns_end}}");
          var i = Handlebars.compile(n);
          return function(e) {
            return e = e || {}, i(e);
          };
        };
    }();
  },
  2533: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("tips", {
        onStart: function() {
          e.delegate(".ts_tip_lazy, .ts_tip_float", "mouseenter", s), e.delegate(".ts_tip_float", "mouseleave", o), e.on("click", ".ts_tip", function(e) {
            if (TS.isPartiallyBooted()) return e.preventDefault(), e.stopPropagation(), void TS.incremental_boot.userDidInteractWithUI();
            c($(this));
          });
        },
        hideAll: function() {
          $(".ts_tip").addClass("ts_tip_hide");
        },
        unhideAll: function() {
          $(".ts_tip").removeClass("ts_tip_hide");
        },
        updateTipTitle: function(e, t) {
          var i = u(e);
          i.length ? i.html(t) : e.attr("title", t), n && n[0] == e[0] && (t ? (r.html(t), d()) : l());
        },
        updateFloater: function(e) {
          r && e.title && r.text(e.title), i && e.classes_to_add && i.addClass(e.classes_to_add.join(" "));
        }
      });
      var e = $("BODY"),
        t = null,
        n = null,
        i = null,
        r = null,
        a = 0,
        s = function(s) {
          n = $(s.currentTarget);
          var o = n.hasClass("ts_tip_multiline");
          if (n.addClass("ts_tip_hidden"), 0 == n.children(".ts_tip_tip").length && p(n, o), n.removeAttr("title"), n.removeClass("ts_tip_lazy"), $("#ts_tip_float_floater").remove(), n.hasClass("ts_tip_float")) {
            var c = n.attr("class").split(/\s+/).filter(function(e) {
                return "ts_tip_float" !== e && ("ts_tip_lazy" !== e && 0 === e.indexOf("ts_tip"));
              }),
              _ = TS.templates.builders.strBuilder('<div id="ts_tip_float_floater" style="width:${w}px; height:${h}px;" class="${classes}">${tip_html}</div>', {
                w: n.outerWidth(),
                h: n.outerHeight(),
                classes: c.join(" "),
                tip_html: n.find(".ts_tip_tip").clone()[0].outerHTML
              });
            i = $(_), e.append(i), a = setTimeout(function() {
              i.removeClass("ts_tip_hidden"), d();
            }, 10), t = n.closest(":scrollable(vertical)"), t.on("scroll.ts_tip_removal", l), n.on("destroyed.ts_tip_removal", l), n.hasClass("ts_tip_hide_on_click") && n.on("click.ts_tip_removal", l), o ? r = i.find(".ts_tip_multiline_inner") : (r = i.find(".ts_tip_tip_inner"), r.length || (r = i.find(".ts_tip_tip")));
          } else setTimeout(function() {
            n.removeClass("ts_tip_hidden");
          }, 10);
        },
        o = function() {
          l();
        },
        l = function() {
          clearTimeout(a), i && i.addClass("ts_tip_hidden"), n && n.length && (n.off("click.ts_tip_removal"), n.off("destroyed.ts_tip_removal")), t && t.off("scroll.ts_tip_removal"), t = null, n = null, i = null, r = null;
        },
        d = function() {
          var e = n.offset(),
            t = window.innerWidth - 2,
            r = window.innerHeight - 2,
            a = i.hasClass("ts_tip_multiline"),
            s = function() {
              return a ? i.find(".ts_tip_multiline_inner").dimensions_rect() : i.find(".ts_tip_tip").dimensions_rect();
            },
            o = function(e) {
              i.removeClass("\t\t\tts_tip_right \t\t\tts_tip_rightish \t\t\tts_tip_left \t\t\tts_tip_leftish \t\t\tts_tip_multiline_top_leftish \t\t\tts_tip_multiline_top_left \t\t\tts_tip_multiline_top_right \t\t\tts_tip_multiline_top_rightish \t\t").addClass(e);
            };
          i.css("left", e.left).css("top", e.top);
          var l = s();
          l.bottom > r ? i.removeClass("ts_tip_bottom").addClass("ts_tip_top") : l.top < 2 && i.removeClass("ts_tip_top").addClass("ts_tip_bottom"), a ? (l.right > t ? o("ts_tip_multiline_top_rightish") : l.left < 2 && o("ts_tip_multiline_top_leftish"), l = s(), l.right > t ? o("ts_tip_multiline_top_right") : l.left < 2 && o("ts_tip_multiline_top_left")) : (l.right > t ? o("ts_tip_rightish") : l.left < 2 && o("ts_tip_leftish"), l = s(), l.right > t ? o("ts_tip_right") : l.left < 2 && o("ts_tip_left"));
        },
        c = function(e) {
          var t, n = u(e);
          if (e.data("tip-toggle-auto") ? t = e : n.data("tip-toggle-auto") && (t = n), t && t.length) {
            var i = n.html(),
              r = t.data("tip-toggle-auto");
            if (!r) return TS.warn("No toggle state text defined on tipped element. Please add text to data-tip-toggle-text or data-tip-toggle-auto attribute");
            TS.tips.updateTipTitle(e, r), t.data("tip-toggle-auto", i);
          }
        },
        u = function(e) {
          var t = e.find(".ts_tip_multiline_inner");
          return t.length || (t = e.find(".ts_tip_tip_inner")), t.length || (t = e.find(".ts_tip_tip")), t;
        },
        m = function(e) {
          if (!e.text().trim().length && !e.attr("aria-label")) return _.uniqueId("ts_tip_tip_");
        },
        p = function(e, t) {
          var n = e.prop("title"),
            i = m(e),
            r = i ? ' id="' + i + '"' : "",
            a = t ? '<span class="ts_tip_multiline_inner">' + n + "</span>" : n,
            s = ["<span", r, ' class="ts_tip_tip"', ">", a, "</span>"];
          e.append(s.join("")), e.attr("aria-labelledby", i);
        };
    }();
  },
  2535: function(e, t) {
    ! function() {
      "use strict";
      TS.registerComponent("ui.ContextualDropDown", {
        _constructor: function(_, u) {
          u = u || {}, this._show_description = u.show_description, this.updated_sig = new signals.Signal;
          var m = Array.prototype.slice.call(_.querySelectorAll("select option"));
          _.innerHTML = TS.templates.contextual_dropdown({
            show_description: u.show_description
          }), this._dropdown = _.querySelector(".contextual_dropdown"), this._dropdown_label = _.querySelector(".contextual_dropdown_label"), this._dropdown_container = _.querySelector(".contextual_dropdown_container"), u.show_description && (this._dropdown_desc = _.querySelector(".contextual_dropdown_desc")), this._onOpen = r.bind(this), this._onClose = a.bind(this), this._onItemClicked = o.bind(this), this._onItemMouseOver = l.bind(this), this._onItemMouseOut = d.bind(this), this._onItemPress = c.bind(this), this._onFocus = e.bind(this), this._onBlur = t.bind(this), this._onEnterPress = n.bind(this), this._onArrowPress = i.bind(this), this._dropdown_label.addEventListener("click", this._onOpen), this._dropdown_label.addEventListener("focus", this._onFocus), this._dropdown_label.addEventListener("blur", this._onBlur);
          var p, f, h, g = /(<([^>]+)>)/gi,
            S = "";
          m.forEach(function(e) {
            p = e.getAttribute("data-desc") || "", f = e.getAttribute("data-desc-disabled") || "", h = !!e.getAttribute("disabled"), S += TS.templates.contextual_dropdown_item({
              label: e.label,
              value: e.value,
              desc: p,
              desc_disabled: f,
              disabled: h,
              aria_label: (p || e.label).replace(g, "")
            });
          });
          var T = _.querySelector(".contextual_dropdown_items");
          T.innerHTML = S, this._items = Array.prototype.slice.call(T.querySelectorAll(".contextual_dropdown_item")), this._items.forEach(function(e) {
            e.addEventListener("click", this._onItemClicked), e.addEventListener("keydown", this._onItemPress), u.show_description && (e.addEventListener("mousemove", this._onItemMouseOver), e.addEventListener("focus", this._onItemMouseOver), e.addEventListener("mouseout", this._onItemMouseOut));
          }.bind(this)), this._items.length && (u.start_value ? s.call(this, T.querySelector('[data-value="' + u.start_value + '"]')) : u.select_first && s.call(this, this._items[0]));
        },
        getSelectedItem: function() {
          return this._current_item || null;
        },
        getSelectedValue: function() {
          return this._current_item ? this._current_item.getAttribute("data-value") : null;
        },
        destroy: function() {
          this._onClose(), this._dropdown_label.removeEventListener("click", this._onOpen), this._dropdown_label.removeEventListener("focus", this._onFocus), this._dropdown_label.removeEventListener("blur", this._onBlur), this._items.forEach(function(e) {
            e.removeEventListener("click", this._onItemClicked), e.removeEventListener("keydown", this._onItemPress), this._show_description && (e.removeEventListener("mousemove", this._onItemMouseOver), e.removeEventListener("focus", this._onItemMouseOver), e.removeEventListener("mouseout", this._onItemMouseOut));
          }.bind(this));
        }
      });
      var e = function() {
          document.addEventListener("keydown", this._onEnterPress);
        },
        t = function() {
          document.removeEventListener("keydown", this._onEnterPress);
        },
        n = function(e) {
          "Enter" === e.key ? this._is_open ? this._onClose() : this._onOpen() : this._is_open || "ArrowDown" !== e.key || (this._onOpen(), this._onArrowPress(e));
        },
        i = function(e) {
          var t;
          "ArrowDown" === e.key ? (t = this._items.indexOf(this._focused_item), t < this._items.length - 1 ? t += 1 : t = 0) : "ArrowUp" === e.key && (t = this._items.indexOf(this._focused_item), t > 0 ? t -= 1 : t = this._items.length - 1), void 0 !== t && this._items[t].focus();
        },
        r = function(e) {
          if (e && e.stopPropagation(), this._dropdown_label.removeEventListener("click", this._onOpen), document.body.addEventListener("click", this._onClose), document.addEventListener("keydown", this._onArrowPress), this._current_item) {
            var t = this._current_item.getAttribute("data-desc");
            this._dropdown_desc.innerHTML = t;
          }
          this._dropdown.classList.add("is_open"), this._is_open = !0, this._focused_item = null, this._dropdown_container.setAttribute("aria-hidden", !1);
        },
        a = function() {
          document.body.removeEventListener("click", this._onClose), document.removeEventListener("keydown", this._onArrowPress), this._dropdown_label.addEventListener("click", this._onOpen), this._dropdown.classList.remove("is_open"), this._is_open = !1, this._dropdown_container.setAttribute("aria-hidden", !0);
        },
        s = function(e, t) {
          if ((!this._current_item || this._current_item !== e) && e) {
            if (e.getAttribute("disabled")) return void(t && t.stopPropagation());
            this._current_item && this._current_item.classList.remove("is_selected"), this._current_item = e, this._current_item.classList.add("is_selected"), this._dropdown_label.innerHTML = this._current_item.getAttribute("data-label");
            var n = this._current_item.getAttribute("data-desc");
            this._dropdown_desc && (this._dropdown_desc.innerHTML = n), this.updated_sig.dispatch(this.getSelectedValue());
          }
        },
        o = function(e) {
          s.call(this, e.target, e);
        },
        l = function(e) {
          if (this._focused_item !== e.target) {
            var t = e.target.getAttribute("disabled") ? e.target.getAttribute("data-desc-disabled") : e.target.getAttribute("data-desc");
            this._dropdown_desc.innerHTML = t, this._focused_item && this._focused_item.blur(), this._focused_item = e.target, this._focused_item.focus();
          }
        },
        d = function(e) {
          this._focused_item === e.target && (this._focused_item.blur(), this._focused_item = null);
        },
        c = function(e) {
          "Enter" === e.key && (s.call(this, e.target, e), this._dropdown_label.focus(), this._onClose(), e.stopPropagation());
        };
    }();
  },
  2537: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.a11y", {
        focus_stack: [],
        unread_message_strings: {},
        $aria_live_div: null,
        zoom_level_changed_sig: new signals.Signal,
        zoomPercentToLevel: function(e) {
          return n[e];
        },
        zoomLevelToPercent: function(e) {
          return i[e];
        },
        onStart: function() {
          o(), f(), g(), TS.channels.switched_sig.add(TS.ui.a11y.annouceCurrentChannelOrImOrGroup), TS.ims.switched_sig.add(TS.ui.a11y.annouceCurrentChannelOrImOrGroup), TS.groups.switched_sig.add(TS.ui.a11y.annouceCurrentChannelOrImOrGroup), TS.mpims.switched_sig.add(TS.ui.a11y.annouceCurrentChannelOrImOrGroup), TS.prefs.a11y_animations_changed_sig.add(TS.ui.a11y.replaceAnimatedImages), $(document).on("focus", "input[placeholder],textarea[placeholder]", function(e) {
            s($(e.target));
          }), $(document).on("blur", "input[placeholder],textarea[placeholder]", function(e) {
            s($(e.target));
          });
        },
        focusOnNextMessage: function() {
          var e, t = $(document.activeElement);
          e = t.is(r) && t.next().length ? t.next() : d(), TS.ui.a11y.focusAndAddTabindex(e);
        },
        focusOnPreviousMessage: function() {
          var e, t = $(document.activeElement),
            n = c(),
            i = t.is(r);
          e = i && t.prev().length ? t.prev() : i && TS.model.archive_view_is_showing ? d() : t.is("#end_display_meta") ? d() : n.children(r).length && n.children(r).last() ? n.children(r).last() : d(), TS.ui.a11y.focusAndAddTabindex(e);
        },
        focusOnOldestUnreadMessage: function() {
          TS.client.ui.$msgs_unread_divider && TS.client.ui.$msgs_unread_divider.next().length ? TS.ui.a11y.focusAndAddTabindex(TS.client.ui.$msgs_unread_divider.next()) : TS.ui.a11y.ariaLiveAnnounce(TS.i18n.t("No unread messages.", "a11y")(), !0);
        },
        focusOnMessageInput: function() {
          TS.ui.a11y.focusAndAddTabindex(d());
        },
        focusAndAddTabindex: function(e) {
          e && (e.attr("tabindex") && e.data("previous-tabindex", e.attr("tabindex")), e.attr("tabindex", "0"), e.focus());
        },
        cleanUpTabindex: function(e) {
          e && (e.data("previous-tabindex") ? e.attr("tabindex", e.data("previous-tabindex")) : e.removeAttr("tabindex"));
        },
        saveCurrentFocus: function() {
          return TS.ui.a11y.focus_stack.push(document.activeElement), document.activeElement;
        },
        saveCurrentFocusAndFocusOnElement: function(e) {
          var t = TS.ui.a11y.saveCurrentFocus();
          return TS.ui.a11y.focusAndAddTabindex(e), t;
        },
        restorePreviousFocus: function() {
          var e = TS.ui.a11y.focus_stack.pop();
          if (e && "function" == typeof e.focus) return e.focus(), e;
        },
        restorePreviousFocusAndCleanUpElement: function(e) {
          var t = TS.ui.a11y.restorePreviousFocus();
          return TS.ui.a11y.cleanUpTabindex(e), t;
        },
        ariaLiveAnnounce: function(e, t) {
          TS.ui.a11y.$aria_live_div.empty(), TS.ui.a11y.$aria_live_div.attr("aria-live", t ? "assertive" : "polite"), TS.ui.a11y.$aria_live_div.text(e);
        },
        assembleActiveModelName: function() {
          var e = TS.shared.getActiveModelOb(),
            t = "";
          return TS.model.unread_view_is_showing ? t = TS.i18n.t("All unreads", "a11y")() : TS.model.threads_view_is_showing ? t = TS.i18n.t("Threads", "a11y")() : e.is_channel ? t = TS.i18n.t("Channel #{model_name}", "a11y")({
            model_name: e.name
          }) : e.is_im ? t = TS.boot_data.feature_name_tagging_client ? TS.i18n.t("Direct message with {model_name}", "a11y")({
            model_name: TS.members.getPrefCompliantMemberNameById(e.user)
          }) : TS.i18n.t("Direct message with {model_name}", "a11y")({
            model_name: e.name
          }) : e.is_mpim ? t = TS.i18n.t("Direct message with {model_name}", "a11y")({
            model_name: TS.mpims.getDisplayName(e)
          }) : e.is_group && (t = TS.i18n.t("Private Channel {model_name}", "a11y")({
            model_name: e.name
          })), t;
        },
        saveUnreadCountMessage: function(e, t) {
          e && e.name && t && (TS.ui.a11y.unread_message_strings[e.name] = t);
        },
        annouceCurrentChannelOrImOrGroup: function() {
          var e = TS.ui.a11y.assembleActiveModelName(),
            t = e,
            n = TS.shared.getActiveModelOb();
          if (n) {
            if (TS.model.archive_view_is_showing) return void TS.ui.a11y.focusAndAddTabindex(d());
            TS.ui.a11y.unread_message_strings[n.name] && (t += ", " + TS.ui.a11y.unread_message_strings[n.name], delete TS.ui.a11y.unread_message_strings[n.name]), TS.ui.a11y.ariaLiveAnnounce(t, !0), TS.boot_data.feature_texty || TS.client.ui.$msg_input.attr("aria-label", TS.i18n.t("Message input for {model_name}", "a11y")({
              model_name: e
            }));
          }
        },
        resetMessageInput: function() {
          TS.client.msg_input.$input.trigger("autosize-resizeIncludeStyle"), TS.client.msg_input.resized(), TS.view.onResize();
        },
        replaceAnimatedImages: function() {
          TS.ui.a11y.replaceAnimatedFiles(), TS.ui.a11y.replaceEmoji();
        },
        replaceAnimatedFiles: function() {
          var e, t, n = TS.model.prefs.a11y_animations;
          if (a) return void m();
          var i, r = TS.utility.msgs.getDisplayedMsgs(TS.shared.getActiveModelOb().msgs);
          if (!1 === n)
            for (i = 0; i < r.length; i += 1) r[i].file ? (e = r[i].file, "gif" === e.filetype ? (e.deanimate_gif ? t = e.deanimate_gif : e.thumb_160 && (t = e.thumb_160), t && _(e.id, t)) : "space" === e.filetype && m(r[i].ts)) : r[i].attachments && u(r[i].ts, r[i].attachments[0]);
          else
            for (i = 0; i < r.length; i += 1) r[i].file ? (e = r[i].file, "gif" === e.filetype ? (e.thumb_360_gif ? t = e.thumb_360_gif : e.thumb_360 && (t = e.thumb_360), t && _(e.id, t)) : "space" === e.filetype && m(r[i].ts)) : r[i].attachments && u(r[i].ts, r[i].attachments[0]);
        },
        replaceEmoji: function() {
          for (var e, t = emoji, n = $(".emoji:not(.stop_animations)"), i = 0; i < n.length; i += 1) {
            var r = t.replace_colons(n[i].innerText);
            if (!r) {
              var a = ":" + n[i].parentNode.getAttribute("data-emoji") + ":";
              r = t.replace_colons(a);
            }
            r && r.match(/.+background-image:url\((.+)\).*/) && (e = r.match(/.+background-image:url\((.+)\).*/)[1]), n[i].style.backgroundImage = 'url("' + e + '")';
          }
          TS.emoji.makeMenuLists();
        },
        getContrastColor: function(e) {
          var t = !1;
          if (e = e.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function(e, t, n, i) {
              return t + t + n + n + i + i;
            }), e = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e)) {
            t = (299 * parseInt(e[1], 16) + 587 * parseInt(e[2], 16) + 114 * parseInt(e[3], 16)) / 1e3 >= 128 ? "#000000" : "#FFFFFF";
          }
          return t;
        },
        test: function() {
          return {
            createAriaLiveElement: o,
            destroyAriaLiveElement: l,
            getMessageInputElement: d,
            getMessageDivElement: c
          };
        }
      });
      var e, t, n = {
          70: "-3",
          80: "-2",
          90: "-1",
          normal: "0",
          110: "1",
          125: "2",
          150: "3"
        },
        i = Object.keys(n).reduce(function(e, t) {
          return e[n[t]] = t, e;
        }, {}),
        r = ".message, .day_divider, .unread_divider",
        a = TS.web && TS.web.space,
        s = function(e) {
          var t = e.attr("placeholder"),
            n = e.attr("aria-label") || "",
            i = !!n.length,
            r = !!e.val().trim().length;
          if (r && !i && t.length) return void e.attr("aria-label", t);
          !r && i && n == t && e.removeAttr("aria-label");
        },
        o = function() {
          return TS.ui.a11y.$aria_live_div = $('<div id="aria_live_announcer" role="status"></div>'), $("body").append(TS.ui.a11y.$aria_live_div), TS.ui.a11y.$aria_live_div;
        },
        l = function() {
          TS.ui.a11y.$aria_live_div.remove(), delete TS.ui.a11y.$aria_live_div;
        },
        d = function() {
          return TS.model.archive_view_is_showing && TS.client.archives.not_member ? $("#footer_archives") : TS.client.ui.$msg_input;
        },
        c = function() {
          return TS.model.archive_view_is_showing ? TS.client.archives.$archives_msgs_div : TS.client.ui.$msgs_div;
        },
        _ = function(e, t) {
          var n = $('.image_gif[data-file-id="' + e + '"]');
          n.attr("data-src", t), n.find(".image_bg").attr("data-real-background-image", t), n.find(".image_bg").css("backgroundImage", "url(" + t + ")"), n.find("img").data("real-src", t), n.find("img").attr("src", t);
        },
        u = function(e, t) {
          if (t && (t.is_animated || t.image_url && t.image_url.match(/\.gifv?$/))) {
            var n = $('.message[data-ts="' + e + '"]'),
              i = n.find(".msg_inline_img img"),
              r = !1 === TS.model.prefs.a11y_animations ? TS.utility.getImgProxyURL(t.image_url, t.image_width, t.image_height) : t.image_url;
            p(i, r);
          }
        },
        m = function(e) {
          var t = a ? $("ts-space .msg_inline_img img") : $('.message[data-ts="' + e + '"] .post_container .msg_inline_img img');
          $.each(t, function() {
            var e = $(this),
              t = TS.utility.getImgProxyURL(e.attr("src"));
            p(e, t);
          });
        },
        p = function(e, t) {
          e.attr({
            "data-real-src": t,
            src: t
          });
          var n = e.closest(".msg_inline_img");
          n.attr("data-real-background-image", t), n.css("backgroundImage", "url(" + t + ")");
        },
        f = function() {
          TSSSB.supports_zoom_api && (e = TSSSB.call("getZoom"), $(window).on("resize", h));
        },
        h = function() {
          var t = TSSSB.call("getZoom");
          e != t && (e = t, TS.ui.a11y.zoom_level_changed_sig.dispatch({
            zoom_level: t
          }));
        },
        g = function() {
          TSSSB.supports_zoom_api && ($("body").append('<div class="zoom_level_indicator hidden"></div>'), TS.ui.a11y.zoom_level_changed_sig.add(T));
        },
        S = function(e) {
          var t = i[e] || "100",
            n = "normal" === t ? "100" : t,
            r = TS.i18n.t("zoom: <strong>{zoom_percentage}%</strong>", "a11y")({
              zoom_percentage: n
            });
          $(".zoom_level_indicator").html(r);
        },
        T = function(e) {
          if (!TS._incremental_boot && !$("body").hasClass("loading")) {
            var n = $(".prefs_modal.active");
            if (!n.length || !n.find(".a11y_pref_zoom").length) {
              t && (clearTimeout(t), t = null), S(e.zoom_level);
              var i = $(".zoom_level_indicator");
              i.insertAfter(document.body.lastElementChild), i.removeClass("hidden").show(0);
              var r = i.outerWidth() / 2,
                a = "calc(50vw - " + r + "px)";
              i.css("left", a), t = setTimeout(function() {
                i.fadeOut(100);
              }, 1e3);
            }
          }
        };
    }();
  },
  2538: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.admin_edit_team_profile", {
        onStart: function() {
          $("body").on("click", '[data-action="edit_team_profile_modal"]', TS.ui.admin_edit_team_profile.start);
        },
        start: function() {
          x() && r();
        }
      });
      var e, t, n, i = [],
        r = function() {
          var e = {
            body_template_html: TS.templates.admin_edit_team_profile_modal(),
            onShow: a,
            onCancel: s
          };
          TS.ui.fs_modal.start(e);
        },
        a = function() {
          e = $("#edit_team_profile_container"), t = $("body"), e.on("click", '[data-action="edit_team_profile_to_custom"]', T), e.on("click", '[data-action="edit_team_profile_to_add"]', S), e.on("click", '[data-action="edit_team_profile_to_edit"]', b), e.on("click", '[data-action="edit_team_profile_to_hide"]', v), e.on("click", '[data-action="edit_team_profile_to_delete"]', y), e.on("click", '[data-action="edit_team_profile_cancel"]', g), e.on("click", '[data-action="edit_team_profile_confirm_edit"]', f), e.on("click", '[data-action="edit_team_profile_confirm_hide"]', u), e.on("click", '[data-action="edit_team_profile_confirm_delete"]', c), e.on("click", '[data-action="edit_team_profile_remove_option"]', A), e.on("click", '[data-action="edit_team_profile_add_option"]', E), e.on("focusin", '[data-action="edit_team_profile_update_preview_label"], [data-action="edit_team_profile_update_preview_hint"], .option_header_row + .option_row [data-action="edit_team_profile_update_preview_option"]', B), e.on("focusout", '[data-action="edit_team_profile_update_preview_label"], [data-action="edit_team_profile_update_preview_hint"], .option_header_row + .option_row [data-action="edit_team_profile_update_preview_option"]', D), e.on("input", '[data-action="edit_team_profile_update_preview_label"], [data-action="edit_team_profile_update_preview_hint"], .option_header_row + .option_row [data-action="edit_team_profile_update_preview_option"]', F), e.on("click", '[data-action="edit_team_profile_list_menu"]', j), e.on("input", "input", K), t.on("keydown.admin_submit", o), l().then(g).catch(TS.error);
        },
        s = function() {
          M(!0), e = null, i = [], n = null, t.off("keydown.admin_submit"), t = null, TS.web && TS.web.account_profile && TS.web.account_profile.render(), TS.web && TS.web.members && TS.web.members.render();
        },
        o = function(e) {
          if (e.which == TS.utility.keymap.enter) return $(n).find('button[type="submit"]').trigger("click"), !1;
        },
        l = function() {
          return TS.team.ensureTeamProfileFields();
        },
        d = function(e, t) {
          if (e) return TS.api.call(e, t).then(function(n) {
            return TS.web && ("team.profile.delete" === e ? TS.team.upsertTeam({
              profile: JSON.parse(t.profile)
            }) : TS.team.upsertTeam(n.data)), Promise.resolve(n);
          }, function(e) {
            return Promise.reject(e);
          });
        },
        c = function(e) {
          var t = $(e.target),
            n = t.data("id");
          if (n || (t = t.closest("[data-id]")), n = t.data("id")) {
            TS.team.getTeamProfileFieldById(n) && h("team.profile.delete", [n]).then(function() {
              g();
            }, _.noop);
          }
        },
        u = function(e) {
          p(e, !0);
        },
        m = function(e) {
          p(e, !1);
        },
        p = function(e, t) {
          var n = $(e.target),
            i = n.data("id");
          if (i || (n = n.closest("[data-id]")), i = n.data("id")) {
            var r = TS.team.getTeamProfileFieldById(i);
            r && (r = $.extend({}, r), r.is_hidden = t, t && (r.ordering = P()), h("team.profile.set", [r]).then(function() {
              return TS.api.call("team.profile.get");
            }).then(function(e) {
              TS.model.team.profile.fields = _.get(e, "data.profile.fields"), g(), z(i);
            }, _.noop));
          }
        },
        f = function(t) {
          function n() {
            g(), z(a);
          }
          var i = e.find("#edit_team_profile_edit");
          if (!TS.ui.validation.validate(i, {
              quiet: !0,
              fast: !0
            })) return TS.ui.validation.validate(i), Ladda.stopAll(), void $("#edit_team_profile_confirm_edit_btn").addClass("disabled");
          var r = $(t.target),
            a = r.data("id");
          a || (r = r.closest("[data-id], [data-type]")), a = r.data("id");
          var s = e.find('input[name="label"]'),
            o = e.find('input[name="hint"]'),
            l = TS.team.getTeamProfileFieldById(a) || {},
            d = JSON.stringify(l);
          l = $.extend({}, l), l.type = l.type || r.data("type") || "text", l.label = s.val().trim(), l.hint = o.val().trim(), l.ordering = void 0 !== l.ordering ? l.ordering : P(), "options_list" === l.type && (l.possible_values = e.find('input[name^="option_"]').map(function() {
            return $(this).val().trim();
          }).toArray()), JSON.stringify(l) == d ? (n(), Ladda.stopAll()) : h("team.profile.set", [l]).then(n, _.noop);
        },
        h = function(e, t) {
          t = t && t.length ? t : TS.model.team.profile.fields;
          var n = {
            profile: JSON.stringify({
              fields: t
            })
          };
          return d(e, n).catch(function(e) {
            if ("no_perms" !== e.data.error && "missing_scope" !== e.data.error) return "field_bad_order" === e.data.error ? (TS.error("Failed to create profile field: " + e.data.error), TS.generic_dialog.alert(TS.i18n.t("Apologies, but the maximum number of profile fields you can add is {max_no_of_fields, number}. Please remove some existing fields if you’d like to add different ones.", "team_profile")({
              max_no_of_fields: 50
            }))) : (TS.error("Failed to customize profile: " + e.data.error), TS.generic_dialog.alert(TS.i18n.t("Sorry! Something went wrong. Please try again.", "team_profile")()));
            TS.generic_dialog.start({
              body: TS.i18n.t("Sorry! An owner on your team has restricted who can customize your team’s profile.", "team_profile")(),
              show_cancel_button: !1,
              esc_for_ok: !0,
              fullscreen: !1,
              onEnd: TS.ui.fs_modal.close
            });
          }).finally(Ladda.stopAll);
        },
        g = function t() {
          i.length = 0, i.push({
            back: t
          });
          var n = {};
          n.team_profile_fields = N(), n.hidden_team_profile_fields = G(), n.default_team_profile_fields = q();
          var r = TS.templates.admin_edit_team_profile_list(n);
          e.find("#edit_team_profile_header").text(TS.i18n.t("Customize profile", "team_profile")()).removeClass("hidden center_and_narrow");
          var a;
          a = TS.model.team.profile && TS.model.team.profile.fields.length >= 50 ? '<div class="alert alert_info"><i class="ts_icon ts_icon_info_circle"></i>' + TS.i18n.t("You have reached the maximum number of fields that can be added to profiles.", "team_profile")() + "</div>" : TS.i18n.t("Expand your team’s profiles by adding additional fields below", "team_profile")(), e.find("#edit_team_profile_value_note").html(a).removeClass("hidden center_and_narrow"), e.find("#edit_team_profile_list").html(r), U("#edit_team_profile_list"), H(), k(), M(!0);
        },
        S = function t() {
          i.push({
            back: t
          });
          var n = {};
          n.default_team_profile_fields = q();
          var r = TS.templates.admin_edit_team_profile_add(n);
          e.find("#edit_team_profile_header").text(TS.i18n.t("Select a field type", "team_profile")()).removeClass("center_and_narrow"), e.find("#edit_team_profile_value_note").addClass("hidden"), e.find("#edit_team_profile_add").html(r), U("#edit_team_profile_add"), k(), M();
        },
        T = function t() {
          i.push({
            back: t
          });
          var n = TS.templates.admin_edit_team_profile_custom();
          e.find("#edit_team_profile_header").text(TS.i18n.t("Create a new field", "team_profile")()).removeClass("center_and_narrow"), e.find("#edit_team_profile_value_note").text(TS.i18n.t("Which type of field would you like to create?", "team_profile")()).removeClass("hidden center_and_narrow"), e.find("#edit_team_profile_custom").html(n), U("#edit_team_profile_custom"), k(), M(), R();
        },
        b = function t(n) {
          var r = $(n.target);
          if (r.hasClass("ts_icon_grabby_patty")) return !1;
          var a = r.data("id");
          a || (r = r.closest("[data-id], [data-type]")), a = r.data("id");
          var s, o = {};
          if (a) {
            if (!(o = TS.team.getTeamProfileFieldById(a))) return;
            s = TS.i18n.t("Edit profile field", "team_profile")();
          } else o.type = r.data("type"), o.label = r.data("label"), s = TS.i18n.t("Customize profile field", "team_profile")();
          n.stopPropagation(), i.push({
            back: t,
            event: n
          });
          var l = TS.templates.admin_edit_team_profile_edit(o);
          e.find("#edit_team_profile_header").text(s).removeClass("center_and_narrow"), e.find("#edit_team_profile_value_note").addClass("hidden"), e.find("#edit_team_profile_edit").html(l), U("#edit_team_profile_edit"), C(), I(), R(), Ladda.bind("#edit_team_profile_confirm_edit_btn"), k(), M(), K();
        },
        v = function t(n) {
          var r = $(n.target),
            a = r.data("id");
          if (a || (r = r.closest("[data-id]")), a = r.data("id")) {
            var s = TS.team.getTeamProfileFieldById(a);
            if (s) {
              n.stopPropagation(), i.push({
                back: t,
                event: n
              });
              var o = TS.templates.admin_edit_team_profile_hide({
                  id: s.id,
                  can_delete: !_.get(s, "options.is_scim", !1)
                }),
                l = TS.i18n.t('Hide "{field_label}"', "team_profile")({
                  field_label: s.label
                });
              e.find("#edit_team_profile_header").text(l).addClass("center_and_narrow");
              var d = TS.i18n.t("All data entered for this field will no longer be visible on your team’s profiles. You can un-hide it later.", "team_profile")();
              e.find("#edit_team_profile_value_note").text(d).addClass("center_and_narrow").removeClass("hidden"), e.find("#edit_team_profile_hide").html(o), U("#edit_team_profile_hide"), Ladda.bind("#edit_team_profile_confirm_hide_btn"), w(), M();
            }
          }
        },
        y = function t(n) {
          var r = $(n.target),
            a = r.data("id");
          if (a || (r = r.closest("[data-id]")), a = r.data("id")) {
            var s = TS.team.getTeamProfileFieldById(a);
            if (s) {
              n.stopPropagation(), i.push({
                back: t,
                event: n
              });
              var o = TS.templates.admin_edit_team_profile_delete(s),
                l = TS.i18n.t('Delete "{field_label}"', "team_profile")({
                  field_label: s.label
                });
              e.find("#edit_team_profile_header").text(l).addClass("center_and_narrow");
              var d = TS.i18n.t("<strong>Are you sure?</strong> All data associated with this field will be permanently deleted. This <strong>cannot be undone</strong>.", "team_profile")();
              e.find("#edit_team_profile_value_note").html(d).addClass("center_and_narrow").removeClass("hidden"), e.find("#edit_team_profile_delete").html(o), U("#edit_team_profile_delete"), Ladda.bind("#edit_team_profile_confirm_delete_btn"), w(), M();
            }
          }
        },
        w = function() {
          e.closest(".contents").addClass("display_flex flex_direction_column").css("height", "70vh"), e.css({
            margin: "auto 0",
            height: "auto",
            "padding-top": 0
          });
        },
        k = function() {
          e.closest(".contents").removeClass("display_flex flex_direction_column").css("height", ""), e.css({
            margin: "",
            height: "",
            "padding-top": ""
          });
        },
        x = function() {
          if (!TS.model.team || !TS.model.team.plan) return !1;
          var e = TS.model.user;
          return !!e && ("admin" === TS.model.team.prefs.who_can_change_team_profile ? e.is_admin : "owner" !== TS.model.team.prefs.who_can_change_team_profile || e.is_owner);
        },
        M = function(e) {
          e ? (TS.ui.fs_modal.unbindBackButton(), TS.ui.fs_modal.hideBackButton()) : (TS.ui.fs_modal.bindBackButton(function() {
            i.pop();
            var e = i.pop();
            e.back(e.event);
          }), TS.ui.fs_modal.showBackButton());
        },
        C = function() {
          var t = e.find(".option_row");
          t.length >= 3 ? t.addClass("show_remove_action") : t.removeClass("show_remove_action");
        },
        I = function() {
          F({
            target: e.find('.option_header_row + .option_row [data-action="edit_team_profile_update_preview_option"]')
          });
        },
        A = function(e) {
          $(e.target).closest(".row.option_row").remove(), K(), C(), I(), O();
        },
        E = function() {
          var t = TS.templates.admin_edit_team_profile_option_row({
            index: e.find(".row.option_row").length
          });
          e.find("#option_rows").append(t).find(".row.option_row").last().find("input").focus(), K(), C(), O();
        },
        O = function() {
          50 === e.find(".row.option_row").length ? e.find('[data-action="edit_team_profile_add_option"]').addClass("hidden").next().removeClass("hidden") : e.find('[data-action="edit_team_profile_add_option"]').removeClass("hidden").next().addClass("hidden");
        },
        F = function(t) {
          var n = $(t.target),
            i = n.val();
          i && (i = i.trim()), void 0 === i || i.length || (i = n.data("default")), e.find('.profile_field_preview [data-id="' + n.data("target") + '"]').text(i);
        },
        B = function(t) {
          var n = e.find('.profile_field_preview [data-id="' + $(t.target).data("target") + '"]'),
            i = n.closest("select");
          i.length && (n = i), n.addClass("highlight_yellow_bg");
        },
        D = function(t) {
          var n = e.find('.profile_field_preview [data-id="' + $(t.target).data("target") + '"]'),
            i = n.closest("select");
          i.length && (n = i), n.removeClass("highlight_yellow_bg");
        },
        R = function() {
          var t = e.find(".edit_team_profile_lazy_filter_select");
          if (t.length) {
            var n = {
              append: !0,
              classes: "disabled",
              preselected_ids: [TS.members.getMemberByName("slackbot").id]
            };
            TS.ui.people_picker.make(t, n);
          }
        },
        H = function() {
          e.find("#edit_team_profile_list_drag_and_drop_area").sortable({
            items: ".visible_row[data-id]",
            handle: ".ts_icon_grabby_patty",
            forcePlaceholderSize: !0
          }).on("sortupdate", function(e) {
            e.stopPropagation();
            var t = [];
            $(this).find(".row[data-id]").each(function(e) {
              var n = TS.team.getTeamProfileFieldById($(this).data("id"));
              n && n.ordering != e && (n.ordering = e, t.push({
                id: n.id,
                ordering: e
              }));
            }), TS.team.sortTeamProfileFieldsByOrdering(), h("team.profile.reorder", t);
          });
        },
        P = function() {
          return TS.model.team.profile.fields.length ? _.max(TS.model.team.profile.fields.map(function(e) {
            return e.ordering;
          })) + 1 : 0;
        },
        j = function(e) {
          e.stopPropagation();
          var t = $(e.target).closest("[data-id]").get(0),
            n = {};
          n.is_scim = $(e.target).closest("[data-is-scim]").data("is-scim");
          var i = jQuery.Event("click", {
            target: t,
            currentTarget: t
          });
          TS.menu.startWithEditTeamProfileListActions(i, L, n);
        },
        L = function(e) {
          e.preventDefault();
          var t = $(e.target).closest("[data-id]");
          t.is('[data-action="edit_team_profile_to_show"]') ? m(e) : t.is('[data-action="edit_team_profile_to_hide"]') ? v(e) : t.is('[data-action="edit_team_profile_to_delete"]') && y(e), TS.menu.end();
        },
        U = function(t) {
          var i = ["#edit_team_profile_loading", "#edit_team_profile_list", "#edit_team_profile_add", "#edit_team_profile_custom", "#edit_team_profile_edit", "#edit_team_profile_hide", "#edit_team_profile_delete"].filter(function(e) {
            return e !== t;
          }).join(", ");
          e.find(i).addClass("hidden"), e.find(t).removeClass("hidden"), n = t;
        },
        N = function() {
          var e = TS.team.getVisibleTeamProfileFields();
          return e.length ? e : null;
        },
        G = function() {
          var e = TS.team.getHiddenTeamProfileFields();
          return e.length ? e : null;
        },
        W = function() {
          return TS.model.team.profile.fields.reduce(function(e, t) {
            return e[t.label.toLowerCase()] = !0, e;
          }, {});
        },
        q = function() {
          var e = W(),
            t = [{
              type: "text",
              label: TS.i18n.t("Address", "team_profile")()
            }, {
              type: "date",
              label: TS.i18n.t("Birthdate", "team_profile")()
            }, {
              type: "user",
              label: TS.i18n.t("Direct Reports", "team_profile")()
            }, {
              type: "link",
              label: TS.i18n.t("Facebook", "team_profile")()
            }, {
              type: "link",
              label: TS.i18n.t("Flickr", "team_profile")()
            }, {
              type: "link",
              label: TS.i18n.t("GitHub", "team_profile")()
            }, {
              type: "link",
              label: TS.i18n.t("Instagram", "team_profile")()
            }, {
              type: "link",
              label: TS.i18n.t("LinkedIn", "team_profile")()
            }, {
              type: "user",
              label: TS.i18n.t("Manager", "team_profile")()
            }, {
              type: "link",
              label: TS.i18n.t("Pinterest", "team_profile")()
            }, {
              type: "text",
              label: TS.i18n.t("Skype", "team_profile")()
            }, {
              type: "link",
              label: TS.i18n.t("SoundCloud", "team_profile")()
            }, {
              type: "date",
              label: TS.i18n.t("Start Date", "team_profile")()
            }, {
              type: "link",
              label: TS.i18n.t("Tumblr", "team_profile")()
            }, {
              type: "link",
              label: TS.i18n.t("Twitter", "team_profile")()
            }, {
              type: "link",
              label: TS.i18n.t("YouTube", "team_profile")()
            }].filter(function(t) {
              return !e[t.label.toLowerCase()];
            });
          return t.length ? t : [];
        },
        z = function(t) {
          var n = t ? "[data-id=" + t + "]" : ".visible_row[data-id]",
            i = e.find("#edit_team_profile_list").find(n).last(),
            r = -2 * i.outerHeight();
          i.highlight(1500, "", null, 0), i.scrollintoview({
            duration: 200,
            px_offset: r,
            direction: "y"
          });
        },
        K = function() {
          $("#edit_team_profile_confirm_edit_btn").toggleClass("disabled", !TS.ui.validation.validate(e.find("#edit_team_profile_edit"), {
            quiet: !0,
            fast: !0
          }));
        };
    }();
  },
  2539: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.admin_user_groups", {
        user_groups_fetched: new signals.Signal,
        onStart: function() {
          $("body").on("click", '[data-action="admin_user_groups_modal"]', function() {
            c();
          }), $("body").on("click", '[data-action="admin_user_groups_modal_new"]', function() {
            TS.ui.admin_user_groups.add();
          });
        },
        start: function() {
          c();
        },
        add: function() {
          c(), d = !0, k();
        },
        editInfo: function(e) {
          c(), d = !0, k(e);
        },
        editMembers: function(e) {
          c(), d = !0, M(e, !1);
        },
        disable: function(e) {
          c(), d = !0, y(e, "disable_user_group");
        },
        enable: function(e) {
          c(), d = !0, y(e, "enable_user_group");
        },
        remove: function(e) {
          c(), d = !0, y(e, "delete_user_group");
        },
        test: function() {
          var e = {
            _isFullLocalMember: B
          };
          return Object.defineProperty(e, "_isFullLocalMember", {
            get: function() {
              return B;
            },
            set: function(e) {
              B = e;
            }
          }), e;
        }
      });
      var e, t, n, i, r, a, s, o = !0,
        l = [],
        d = !1,
        c = function() {
          var e = TS.templates.user_group_modal({
              show_info_pane: !TS.model.prefs.hide_user_group_info_pane,
              show_user_groups_add: TS.permissions.members.canCreateAndDeleteUserGroups()
            }),
            t = {
              body_template_html: e,
              onShow: u,
              onCancel: m
            };
          TS.ui.fs_modal.start(t);
        },
        u = function() {
          e = $("#user_groups_container"), t = $("#all_user_groups"), n = $("#user_groups_form_div"), i = $("#user_groups_toggle_div"), b(), e.find('[data-action="open_form"]').on("click", function(e) {
            e.preventDefault();
            var t = $(this).closest(".user_group_item").data("user-group-id"),
              n = D(t);
            k(n);
          });
        },
        m = function() {
          o = !0, e = null, t = null, n = null, i = null, d = !1, a = null, s = null, $(window).off("resize", T);
        },
        p = function(e) {
          e && e.preventDefault(), d ? (TS.ui.fs_modal.close(), a = null) : b();
        },
        f = function() {
          d ? (TS.ui.fs_modal.close(), a = null) : (o = !0, b());
        },
        h = function() {
          d || (TS.ui.fs_modal.bindBackButton(b), TS.ui.fs_modal.showBackButton());
        },
        g = function(e) {
          if (!l || !e) return !1;
          for (var t = 0, n = l.length; t < n; t += 1)
            if (l[t].auto_type === e) return l[t];
          return !1;
        },
        S = function(e, t) {
          if (!e) {
            var n = $("#user_group_name_input").val() || "",
              i = $("#user_group_handle_input").val() || "";
            if (t.group_name = n, t.group_handle = i, t.error && ("forbidden_handle" === t.error || "forbidden_name" === t.error)) {
              var r = n + i;
              if (r) {
                var a = g("owner"),
                  s = g("admin"),
                  o = !!r.match(/admins/i),
                  l = !!r.match(/owners/i);
                t.suggest_auto_group = !0, t.can_create_auto_owners = l && TS.model.user.is_admin && !a, t.can_enable_auto_owners = l && a && a.date_delete, t.can_create_auto_admins = o && TS.model.user.is_admin && !s, t.can_enable_auto_admins = o && s && s.date_delete;
              }
            }
            return $("#user_group_alerts").html(TS.templates.user_group_alerts(t)), !0;
          }
          return !1;
        },
        T = function() {
          var e = $("#user_groups_header");
          if (e.length) {
            var t = $("#user_groups_list_div");
            if (t.length) {
              var n = parseInt(e.css("padding-top"), 10),
                i = e[0].offsetHeight,
                r = $(window).height(),
                a = Math.max(250, r - i - n);
              t.css("height", a);
            }
          }
        },
        b = function(e) {
          if (o) {
            $("#user_groups_list_div").html(Handlebars.helpers.loadingHTML()), TS.api.call("subteams.list", {
              include_disabled: 1,
              include_users: 1
            }, function(t, n) {
              if (!S(t, n)) {
                l = n.subteams;
                for (var i = 0, r = l.length; i < r; i += 1) l[i]._name_lc = l[i].name.toLowerCase();
                l.sort(TS.i18n.mappedSorter("_name_lc")), TS.ui.admin_user_groups.user_groups_fetched.dispatch(l), F(), v(), e && ($('#fs_modal [data-user-group-id="' + e + '"]').addClass("highlight_yellow"), $("#fs_modal").animate({
                  scrollTop: $(".highlight_yellow").offset().top
                }, 500));
              }
            }), o = !1;
          }
          t.removeClass("hidden"), n.addClass("hidden"), i.addClass("hidden"), TS.ui.fs_modal.hideBackButton();
        },
        v = function() {
          $(window).on("resize", T), T(), $("#user_groups_list_div").monkeyScroll(), a = $("#user_groups_list_div").data("monkeyScroll"), $("#user_group_modal_search").on("keydown keyup change", E), s = $("#user_groups_header .user_groups_search .icon_close"), s.off("click").on("click", O), t.off("click"), t.on("click", '[data-action="open_form"]', function(e) {
            e.preventDefault();
            var t = $(e.target),
              n = t.closest(".user_group_item").data("user-group-id"),
              i = D(n);
            k(i);
          }), t.on("click", '[data-action="edit_members"]', function(e) {
            e.preventDefault();
            var t = $(e.target),
              n = t.closest(".user_group_item").data("user-group-id"),
              i = D(n);
            M(i);
          }), t.on("click", '[data-action="hide_info_pane"]', function(t) {
            t.preventDefault(), TS.prefs.setPrefByAPI({
              hide_user_group_info_pane: !0
            }, function(t, n) {
              S(t, n) || e.find(".info_panel").addClass("hidden");
            });
          }), t.on("click", ".user_group_toggle_btn", function(e) {
            e.preventDefault();
            var t = $(e.target).closest("button, a"),
              n = t.closest(".user_group_item").data("user-group-id"),
              i = t.data("action"),
              r = D(n);
            y(r, i);
          }), t.on("click", ".clear_members_filter", O);
          var i = function(e, t) {
              e && (o = !0, d = !1, b(t.subteam && t.subteam.id ? t.subteam.id : null));
            },
            r = {
              owners: {
                create: function() {
                  TS.api.call("subteams.createAuto", {
                    type: "owner"
                  }, i);
                },
                enable: function() {
                  var e = g("owner");
                  e && TS.user_groups.enableUserGroup(e.id, i);
                }
              },
              admins: {
                create: function() {
                  TS.api.call("subteams.createAuto", {
                    type: "admin"
                  }, i);
                },
                enable: function() {
                  var e = g("admin");
                  e && TS.user_groups.enableUserGroup(e.id, i);
                }
              }
            };
          n.off("click").on("click", "a.user_group_auto_action", function(e) {
            var t = $(e.target),
              n = t.data("auto-type"),
              i = t.data("auto-action");
            if (r[n] && r[n][i]) return r[n][i](), e.preventDefault(), !1;
          });
        },
        y = function e(n, r) {
          if (!n) return void TS.warn("Cannot switch toggle view to undefined User Group");
          i.html(TS.templates.user_group_toggle({
            action: r,
            user_group: n
          })), i.find('[data-action="cancel"]').on("click", p), i.find(".user_group_toggle_btn").on("click", function() {
            var e = $(this).data("action");
            TS.user_groups[e](n.id, function(t, i) {
              S(t, i) || ("enableUserGroup" === e && w(n), f());
            });
          }), i.find('[data-action="switch_delete_user_group"]').on("click", function(t) {
            t.preventDefault(), e(n, "delete_user_group");
          }), t.addClass("hidden"), i.removeClass("hidden"), h();
        },
        w = function(e) {
          TS.user_groups.getUserGroupsById(e.id) || TS.user_groups.upsertUserGroup(_.cloneDeep(e));
        },
        k = function(e) {
          n.html(TS.templates.user_group_settings_form(e));
          var i = TS.channels.getUnarchivedChannelsForUser().map(function(e) {
              return {
                id: e.id,
                name: e.name,
                is_private: e.is_private,
                is_shared: e.is_shared,
                is_org_shared: e.is_org_shared
              };
            }),
            r = TS.groups.getUnarchivedGroups().map(function(e) {
              return {
                id: e.id,
                name: e.name,
                is_group: !0,
                is_shared: e.is_shared,
                is_org_shared: e.is_org_shared
              };
            }),
            a = i.concat(r);
          if (e) {
            e.prefs.channels.concat(e.prefs.groups).forEach(function(e) {
              for (var t = 0; t < a.length; t += 1)
                if (e == a[t].id) {
                  a[t].selected = !0;
                  break;
                }
            });
          }
          var s = {
            data: a,
            template: function(e) {
              var t;
              return t = e.is_group || e.is_private ? '<ts-icon class="ts_icon_lock ts_icon_inherit"></ts-icon>' : "#", t += _.escape(e.name), TS.shared.isModelObOrgShared(e) ? t += ' <ts-icon class="ts_icon_shared_channel ts_icon_inherit"></ts-icon>' : TS.shared.isModelObShared(e) && (t += TS.templates.shared_channels_icon()), new Handlebars.SafeString(t);
            },
            placeholder_text: "",
            filter: function(e, t) {
              var n = new RegExp("^" + TS.utility.regexpEscape(t), "i"),
                i = new RegExp("^" + TS.utility.regexpEscape(t.replace("#", "")), "i"),
                r = new RegExp("(-|_|\\+|\\s|\\.|#)" + TS.utility.regexpEscape(t), "i");
              return e.name.match(i) || e.name.match(n) || e.name.match(r);
            }
          };
          $("#user_group_default_channels").lazyFilterSelect(s), x(e), t.addClass("hidden"), n.removeClass("hidden"), h();
        },
        x = function(e) {
          function t() {
            var e = o.val();
            e && e.length ? s.removeAttr("disabled") : s.attr("disabled", !0);
          }
          var i, r, a;
          e ? (i = TS.user_groups.updateUserGroup, r = !1, a = e.id) : (i = TS.user_groups.createUserGroup, r = !0), $("#user_group_handle_input").on("input", function() {
            $(this).closest(".handle_input").toggleClass("empty", !this.value.length);
          }), n.find(".user_group_settings_form").on("submit", function(e) {
            e.preventDefault();
            var t = $('input[name="name"]').val(),
              n = $('input[name="handle"]').val(),
              s = $('input[name="description"]').val(),
              o = $("#user_group_default_channels").lazyFilterSelect("value");
            o = o.map(function(e) {
              return e.id;
            });
            var l = {
              name: t,
              handle: n,
              description: s,
              channels: o
            };
            a && (l.subteam = a), i(l, function(e, t) {
              S(e, t) || (w(t.subteam), r ? M(t.subteam, r) : f());
            });
          }), n.find(".user_group_settings_form").on("reset", p);
          var s = $("#save_user_group"),
            o = $("#user_group_name_input");
          s.length && o.length && (o.on("change", t), o.on("keyup", t), t());
        },
        M = function(e, i) {
          var r, a = !!e.is_external || !!e.auto_type;
          TS.lazyLoadMembersAndBots() || (r = TS.members.getMembersForUser().filter(B).map(function(e) {
            return {
              member: e
            };
          }));
          var s = function() {
              n.html(TS.templates.user_group_members_form({
                is_new: i,
                is_locked: a,
                user_group: e
              }));
            },
            o = function() {
              var a = $("#member_count"),
                s = e.user_count || 0,
                o = function() {
                  var e = $(i ? "#create_group" : "#save_group");
                  e.length && (s < 1 ? e.prop("disabled", !0) : e.prop("disabled", !1));
                },
                l = {
                  approx_item_height: TS.boot_data.feature_shared_channels_client ? 36 : 50,
                  template: function(e) {
                    var t = TS.templates.user_group_invite_member_small(e);
                    return new Handlebars.SafeString(t);
                  },
                  onItemAdded: function() {
                    s += 1, a.html(s), o();
                  },
                  onItemRemoved: function() {
                    s -= 1, a.html(s), o();
                  },
                  filter: function(e, t) {
                    var n = e.member;
                    "@" === t.charAt(0) && (t = t.substr(1));
                    var i = new RegExp("^" + TS.utility.regexpEscape(t), "i"),
                      r = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(t), "i");
                    return TS.utility.members.checkMemberMatch(n, i) || TS.utility.members.checkMemberMatch(n, r);
                  },
                  disabled: !!e.is_external || !!e.auto_type
                };
              TS.lazyLoadMembersAndBots() ? l.data_promise = C(e) : l.data = r, $("#user_group_members_select").lazyFilterSelect(l), A(e), t.addClass("hidden"), n.removeClass("hidden"), o();
            };
          if (i) s(), TS.ui.fs_modal.hideBackButton(), o();
          else {
            var l, d = function() {
              TS.lazyLoadMembersAndBots() || (l = e.users, l.forEach(function(e) {
                for (var t = 0; t < r.length; t += 1)
                  if (e == r[t].member.id) {
                    r[t].selected = !0;
                    break;
                  }
              })), s(), h(), o();
            };
            if (void 0 !== e.users) return d();
            TS.user_groups.getUserGroupMembers(e.id, function(t) {
              if (t && t.users) return e = t, d();
            });
          }
        },
        C = function(e) {
          var t = !0;
          return function(n, i) {
            "@" === n.charAt(0) && (n = n.substring(1));
            var r = !1;
            if (t && (t = !1, _.get(e, "users.length") && (r = !0)), r) {
              var a = e.users.map(TS.members.getMemberById);
              a.sort(TS.members.memberSorterByName);
              var s = a.map(function(e) {
                return {
                  member: e,
                  lfs_id: String(e.id),
                  preselected: !0
                };
              });
              return Promise.resolve(s);
            }
            return i > 0 ? Promise.resolve([]) : I({
              query: n,
              include_org: !1,
              include_slackbot: !1,
              include_self: !0,
              full_profile_filter: !1,
              include_bots: !0
            });
          };
        },
        I = function(e) {
          return Promise.resolve().then(function() {
            return TS.members.promiseToSearchMembers(e).then(function(e) {
              var t = [];
              return t = "" === e.query ? TS.members.getMembersForTeam(TS.model.team.id) : e.items, e.items = t.filter(function(e) {
                return !e.is_restricted;
              }).map(function(e) {
                return {
                  member: e,
                  lfs_id: String(e.id)
                };
              }), e;
            });
          });
        },
        A = function(e) {
          n.find(".user_group_members_form").on("submit", function(t) {
            t.preventDefault();
            var n = $("#user_group_members_select").lazyFilterSelect("value");
            n = n.map(function(e) {
              return e.member.id;
            }), TS.user_groups.updateMembersOfUserGroup({
              subteam: e.id,
              users: n
            }, function(e, t) {
              S(e, t) || f();
            });
          }), n.find(".user_group_members_form").on("reset", function(e) {
            e.preventDefault(), o = !0, p(e);
          });
        },
        E = function(e) {
          var t = $(e.target),
            n = t.val();
          n !== r && (r = n, s.toggleClass("hidden", "" === n), F());
        },
        O = function() {
          var e = $("#user_group_modal_search");
          r = "", e.val(""), setTimeout(function() {
            e.focus();
          }, 0), s.addClass("hidden"), F();
        },
        F = function() {
          var e, t = $("#user_groups_list_div"),
            n = r;
          if ($("#user_groups_header .user_groups_search").toggleClass("hidden", !l.length), "string" == typeof n && n.length) {
            var i = l.filter(function(e) {
              return -1 !== e.handle.indexOf(n) || -1 !== e._name_lc.indexOf(n) || e.description && -1 !== e.description.toLowerCase().indexOf(n);
            });
            if (i.length) return t.html(TS.templates.builders.buildUserGroupListHTML(i)), void(a && a.updateFunc());
            var s = {
              query: n,
              tab: {
                label: TS.i18n.t("User Groups", "pages_admin")()
              }
            };
            e = '<div class="no_results top_margin">' + TS.templates.team_list_no_results(s) + "</div>";
          } else e = TS.templates.builders.buildUserGroupListHTML(l);
          t.html(e), a && a.updateFunc();
        },
        B = function(e) {
          return !!e && !(!e._is_local || e.deleted || e.is_ultra_restricted || e.is_restricted || e.is_bot || e.is_slackbot);
        },
        D = function(e) {
          if (e)
            for (var t = 0; t < l.length; t += 1)
              if (l[t].id == e) return l[t];
        };
    }();
  },
  2543: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.basic_share_dialog", {
        start: function(n) {
          e = n;
          var i = TS.templates.basic_share_dialog({
              attachment_html: new Handlebars.SafeString(n.attachment_html),
              warning: n.warning,
              show_copy_link: !!n.copy_link && TS.clipboard.canWriteText(),
              copy_text: n.copy_text
            }),
            a = "basic_share_dialog",
            s = TS.i18n.t("Share", "basic_share_dialog")();
          n.dialog_class && (a += " " + n.dialog_class), TS.generic_dialog.start({
            title: n.title || s,
            go_button_text: n.go_button_text || s,
            dialog_class: a,
            body: i,
            onShow: t,
            onEnd: r,
            onGo: n.onGo
          });
        }
      });
      var e, t = function() {
          var t = $("#generic_dialog.basic_share_dialog");
          t.css("display", "");
          var r = t.find("#share_dialog_input_container"),
            s = [];
          TS.boot_data.feature_texty_takes_over && (s = [TS.tabcomplete.channels, TS.tabcomplete.emoji, TS.tabcomplete.members]), TS.ui.inline_msg_input.make(r, {
            aria_label: TS.i18n.t("Add optional comment before sharing.", "basic_share_dialog")(),
            no_emo: !1,
            placeholder: TS.i18n.t("Add a message, if you’d like.", "basic_share_dialog")(),
            onEnter: TS.generic_dialog.go,
            onEscape: TS.generic_dialog.cancel,
            onTextChange: n,
            onTab: i,
            completers: s
          });
          var o = r.find(".message_input");
          o.attr("id", "file_comment_textarea");
          var l = e.initial_message || "";
          TS.utility.contenteditable.value(o, l);
          var d = t.find("#file_sharing_div");
          d.prependTo(t.find(".modal-footer"));
          TS.ui.file_share.bindFileShareDropdowns(!0, e.src_model_ob, void 0, !0), d.find("#select_share_channels").css({
            width: ""
          });
          var c = $("#share_dialog_warning");
          c.length && (d.addClass("hidden"), c.prependTo(t.find(".modal-footer")));
          var _ = t.find('[data-action="copy_link"]');
          _.length && (t.find(".dialog_cancel").before(_), _.removeClass("hidden"), _.click(a)), TS.generic_dialog.div.on("shown", function e() {
            TS.generic_dialog.div.off("shown", e), TS.utility.contenteditable.focus(o);
          }), t.find(".share_dialog_attachment_container").find("a[href]", "button").attr("tabindex", "-1"), e.onShow && e.onShow(), TS.boot_data.feature_texty_takes_over || o.on("keydown", function(e) {
            e.which === TS.utility.keymap.esc ? TS.utility.contenteditable.isEmpty(o) && (e.preventDefault(), TS.generic_dialog.cancel()) : e.which === TS.utility.keymap.enter ? e.shiftKey || e.altKey || o.tab_complete_ui("isShowing") || (e.preventDefault(), TS.generic_dialog.go()) : e.which !== TS.utility.keymap.tab || !d.find(".lfs_input_container:visible").length || e.shiftKey || o.tab_complete_ui("isShowing") || o.tab_complete_ui("hasMatches") || (TS.boot_data.feature_keyboard_navigation || e.preventDefault(), i());
          }).on("textchange", function() {
            n();
          });
        },
        n = function() {
          TS.ui.file_share.updateAtChannelWarningNote(), TS.ui.file_share.updateAtChannelBlockedNote();
        },
        i = function() {
          return $("#file_sharing_div").find(".lfs_input_container").click(), TS.boot_data.feature_keyboard_navigation;
        },
        r = function() {
          e.onEnd && e.onEnd(), e = null;
        },
        a = function() {
          e.copy_link && TS.clipboard.canWriteText() && (TS.tips.updateFloater({
            title: TS.i18n.t("Copied!", "basic_share_dialog")(),
            classes_to_add: ["success"]
          }), TS.clipboard.writeText(e.copy_link));
        };
    }();
  },
  2550: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.edit_member_profile", {
        onStart: function() {
          TS.members.changed_profile_sig.add(fe), TS.view && TS.view.resize_sig.add(Te), $("body").on("click", '[data-action="edit_member_profile_modal"]', function(e) {
            e.preventDefault(), TS.ui.edit_member_profile.start(), TS.clog.track("USER_PROFILE_CLICK");
          });
        },
        start: function() {
          c();
        },
        handleDrag: function(e) {
          TS.boot_data.feature_take_profile_photo && (e ? K() : V());
        },
        handleDrop: function(e) {
          TS.boot_data.feature_take_profile_photo && (V(), B(e));
        },
        _registerCurrentStatusInput: function() {
          TS.ui.edit_member_profile._unregisterCurrentStatusInput(), TS.ui.edit_member_profile._current_status_input = new TS.ui.CurrentStatusInput({
            $parent: $("#edit_member_profile_container"),
            has_presets_menu: !0,
            has_form_context: !0
          });
        },
        _unregisterCurrentStatusInput: function() {
          TS.ui.edit_member_profile._current_status_input && (TS.ui.edit_member_profile._current_status_input.destroy(), TS.ui.edit_member_profile._current_status_input = null);
        }
      });
      var e, t, n, i, r, a, s, o, l, d = [],
        c = function() {
          var e = {
            body_template_html: TS.templates.edit_member_profile_modal(),
            onShow: u,
            onGo: ae,
            onCancel: m,
            go_button_text: TS.i18n.t("Save Changes", "edit_profile")(),
            go_button_class: "edit_member_profile_confirm_edit_btn ladda-button",
            modal_class: "fs_modal_header fs_modal_footer",
            title: TS.i18n.t("Edit your profile", "edit_profile")()
          };
          TS.ui.fs_modal.start(e);
        },
        u = function() {
          e = $("#edit_member_profile_container"), t = $("body"), ve() && $("#fs_modal_footer").prepend(TS.templates.edit_member_profile_footer({
            can_edit_team_profile: !0
          })), TS.boot_data.feature_take_profile_photo && h(), e.on("click", '[data-action="edit_member_profile_cancel_photo"]', W), e.on("click", '[data-action="edit_member_profile_confirm_photo_delete"]', O), e.on("click", '[data-action="edit_member_profile_confirm_photo_crop"]', F), e.on("click", '[data-action="edit_member_profile_photo_menu"]', le), e.on("click", '[data-action="edit_member_profile_upload_image"]', de), e.on("click", '[data-action="edit_member_profile_to_delete"]', ce), e.on("click", '[data-action="edit_member_profile_take_photo"]', Z), e.on("click", '[data-action="edit_member_profile_capture_photo"]', x), t.on("change.photo", '[data-action="edit_member_profile_upload_photo"]', B), t.on("keydown.member_submit", p), e.on("input", "input", me).on("change", "select", me), e.on("input", '[data-plastic-type="date"]', be), e.on("dragenter", ".member_image_upload", Y), e.on("dragleave", ".member_image_upload", J), f().then(W).catch(TS.error);
        },
        m = function() {
          N(), b(), e = null, n = null, i = null, r = null, d = [], s = null, l = null, t && (t.off("change.photo"), t.off("keydown.member_submit"), t = null), TS.client && TS.ui.edit_member_profile._unregisterCurrentStatusInput(), TS.web && TS.web.account_profile && TS.web.account_profile.render(), TS.web && TS.web.members && TS.web.members.render();
        },
        p = function(e) {
          if (e.which == TS.utility.keymap.enter) {
            var t = $(s).find('button[type="submit"]');
            return t.length ? t.trigger("click") : ae(), !1;
          }
        },
        f = function() {
          return TS.team.ensureTeamProfileFields();
        },
        h = function() {
          if (TS.boot_data.feature_take_profile_photo) {
            var e = g();
            l = {}, l.is_supported = !!e, l.is_accepted = !0, l.is_enabled = !1, l.video_el = null, l.video_stream = null, l.get_media = e;
          }
        },
        g = function() {
          if (TS.boot_data.feature_take_profile_photo) {
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) return navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);
            var e = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
            return e ? function(t) {
              return new Promise(function(n, i) {
                e.call(navigator, t, n, i);
              });
            } : null;
          }
        },
        S = function() {
          if (TS.boot_data.feature_take_profile_photo) {
            if (l.is_enabled) return void $(l.video_el).removeClass("no_opacity");
            var e = !0,
              t = $("#edit_member_profile_photo_preview_overlay");
            t.addClass("no_opacity"), o = function() {
              e = !1, t.addClass("no_opacity");
            };
            var n = function() {
                e = !1, t.addClass("no_opacity"), $(l.video_el).removeClass("no_opacity");
              },
              i = function() {
                e && t.removeClass("no_opacity");
              };
            setTimeout(i, 700);
            var r = {
              video: {
                width: 1280,
                height: 720
              }
            };
            l.get_media(r).then(T).then(n).catch(y);
          }
        },
        T = function(e) {
          return new Promise(function(t) {
            var n = e,
              i = window.URL || window.webkitURL;
            i && (n = i.createObjectURL(e)), l.video_el = $("#edit_member_profile_photo_preview_video").get()[0], l.is_accepted = !0, l.is_enabled = !0, l.video_stream = e, $(l.video_el).attr("src", n), l.video_el.addEventListener("loadeddata", t);
          });
        },
        b = function() {
          TS.boot_data.feature_take_profile_photo && l && l.is_enabled && (v(), l.video_el.pause(), l.video_el.src = "", l.video_el = null, l.video_stream.getVideoTracks()[0].stop(), l.video_stream = null, l.is_enabled = !1);
        },
        v = function() {
          l.video_el && $(l.video_el).addClass("no_opacity"), $("#edit_member_profile_photo_preview_overlay").addClass("no_opacity"), $("#edit_member_profile_photo_capture_button").removeClass("hidden"), $("#edit_member_profile_photo_capture_countdown").addClass("hidden");
        },
        y = function(e) {
          switch (e.name) {
            case "PermissionDeniedError":
            case "PermissionDismissedError":
              l.is_accepted = !1, w();
              break;
            case "NotFoundError":
              k();
              break;
            default:
              G();
          }
        },
        w = function() {
          return TS.generic_dialog.alert(TS.i18n.t("It looks like you‘ve blocked Slack from accessing your camera. Just change your browser‘s settings to allow Slack to take a photo now.", "edit_profile")(), TS.i18n.t("Please enable your camera", "edit_profile")()).then(W);
        },
        k = function() {
          return TS.generic_dialog.alert(TS.i18n.t("Sorry! Your camera could not be found!", "edit_profile")()).then(W);
        },
        x = function() {
          TS.boot_data.feature_take_profile_photo && l.is_enabled && M().then(I).then(A).then(E).then(H).then(P).then(j).then(L).catch(U);
        },
        M = function() {
          if (TS.boot_data.feature_take_profile_photo) return new Promise(function(e, t) {
            l.is_enabled || (TS.warn("Camera not enabled"), t()), TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Smile for the camera!", "edit_profile")()), $("#edit_member_profile_photo_capture_button").addClass("hidden"), $("#edit_member_profile_photo_capture_countdown").removeClass("hidden"), C(3, !1, e, t);
          });
        },
        C = function e(t, n, i, r) {
          if (TS.boot_data.feature_take_profile_photo) {
            if (o = function() {
                n = !0;
              }, n) return TS.info("Profile photo capture aborted"), void r(new Error("abort"));
            if (0 === t) return void i();
            var a = $("#edit_member_profile_photo_countdown_progress"),
              s = $("#edit_member_profile_photo_countdown_text");
            a.circleProgress({
              value: 1,
              size: 64,
              animation: {
                duration: 1e3
              },
              fill: {
                gradient: ["#50acf4", "#41a6f5"]
              },
              startAngle: Math.PI / -2
            }).on("circle-animation-progress", function() {
              s.html(parseInt(t, 10));
            }), setTimeout(function() {
              t -= 1, e(t, n, i, r);
            }, 1e3);
          }
        },
        I = function() {
          v(), te(), ge(0);
        },
        A = function() {
          if (TS.boot_data.feature_take_profile_photo) return new Promise(function(e) {
            var t = document.createElement("canvas"),
              n = t.getContext("2d");
            t.width = l.video_el.videoHeight, t.height = l.video_el.videoHeight;
            var i = (l.video_el.videoWidth - t.width) / -2;
            n.translate(t.width, 0), n.scale(-1, 1), n.drawImage(l.video_el, i, 0, l.video_el.videoWidth, l.video_el.videoHeight), e(t.toDataURL("image/png", 1));
          });
        },
        E = function(e) {
          if (TS.boot_data.feature_take_profile_photo) {
            var t;
            t = e.split(",")[0].indexOf("base64") >= 0 ? atob(e.split(",")[1]) : unescape(e.split(",")[1]);
            for (var n = e.split(",")[0].split(":")[1].split(";")[0], i = new Uint8Array(t.length), r = 0; r < t.length; r += 1) i[r] = t.charCodeAt(r);
            var a = new Blob([i], {
              type: n
            });
            a.lastModifiedDate = new Date, a.name = "camera_photo";
            return {
              file: a,
              src: e
            };
          }
        },
        O = function() {
          $("#edit_member_profile_cancel_photo_delete_btn").addClass("disabled"), $("#fs_modal").addClass("stop_pointer_events"), t.on("keydown.deletePhoto", function(e) {
            e.stopPropagation();
          }), TS.api.call("users.deletePhoto").then(function() {
            if (TS.web) return TS.api.call("users.info", {
              user: TS.model.user.id
            }).then(function(e) {
              delete e.data.ok;
              var t = $.extend(!0, TS.model.user, e.data.user);
              TS.members.upsertMember(t), fe(), W();
            }, W);
            W();
          }).catch(function(e) {
            return TS.warn("Unable to delete profile photo"), TS.error(e), G();
          }).finally(function() {
            Ladda.stopAll(), t.off("keydown.deletePhoto"), $("#fs_modal").removeClass("stop_pointer_events"), $("#edit_member_profile_cancel_photo_delete_btn").removeClass("disabled");
          });
        },
        F = function() {
          i && i.disable(), $("#edit_member_profile_cancel_photo_crop_btn").addClass("disabled"), $("#edit_member_profile_retake_photo_crop_btn").addClass("disabled"), $("#fs_modal").addClass("stop_pointer_events"), t.on("keydown.uploadPhoto", function(e) {
            e.stopPropagation();
          });
          var e = $("#edit_member_profile_photo"),
            n = $("#cropbox"),
            r = n.data("dimensions");
          r.id = e.data("src_id"), TS.api.call("users.setPhoto", r).then(function(e) {
            if (TS.web) {
              delete e.data.ok;
              var t = $.extend(!0, TS.model.user, e.data);
              TS.members.upsertMember(t), fe();
            }
            W();
          }).catch(function(e) {
            return TS.warn("Unable to upload cropped profile photo"), TS.error(e), G();
          }).finally(function() {
            Ladda.stopAll(), t.off("keydown.uploadPhoto"), $("#fs_modal").removeClass("stop_pointer_events"), $("#edit_member_profile_cancel_photo_crop_btn").removeClass("disabled"), $("#edit_member_profile_retake_photo_crop_btn").removeClass("disabled"), n.removeData("dimensions");
          });
        },
        B = function(t) {
          var n = "change" === t.type ? $(this) : void 0;
          if (n) {
            if (!n.val()) return void(TS.model.is_iOS && TS.menu.end());
            t = n.get(0).files;
          }
          if (t) {
            if (TS.model.is_iOS && TS.menu.end(), !t.length) return;
            te(), ge(0), D(t[0]).then(R).then(H).then(P).then(j).then(L).catch(U), e.find('[data-action="edit_member_profile_upload_photo"]').val("");
          }
        },
        D = function(e) {
          return new Promise(function(t, n) {
            var i = new FileReader;
            i.onload = function(n) {
              t({
                file: e,
                src: n.target.result
              });
            }, i.onabort = function() {
              TS.info("Profile photo file read aborted"), n(new Error("abort"));
            }, i.onerror = function(e) {
              TS.warn("Unable to read profile photo file"), TS.error(e), n(e);
            }, o = function() {
              try {
                i.abort();
              } catch (e) {
                TS.error(e);
              }
            }, i.readAsDataURL(e);
          });
        },
        R = function(e) {
          return e.file.type.match(/image\/(?:gif|png|jpeg)/i) ? Promise.resolve(e) : Promise.reject(new Error("format"));
        },
        H = function(e) {
          return new Promise(function(t, n) {
            r = new Image, r.onload = function() {
              t(e);
            }, r.onerror = function(e) {
              TS.warn("Unable to set profile photo file image src"), TS.error(e), n(e);
            }, r.src = e.src;
          });
        },
        P = function(e) {
          var t = TS.model.api_url + "users.preparePhoto",
            n = new FormData;
          return n.append("image", e.file), n.append("token", TS.model.api_token), new Promise(function(e, i) {
            var r = $.ajax({
              url: t,
              data: n,
              dataType: "json",
              cache: !1,
              contentType: !1,
              processData: !1,
              type: "POST",
              xhr: function() {
                var e = jQuery.ajaxSettings.xhr();
                return e.upload && e.upload.addEventListener("progress", function(e) {
                  e.lengthComputable ? ge(e.loaded / e.total) : (TS.info("Upload length not computable"), ge(1));
                }, !1), e;
              }
            }).fail(function(e, t, n) {
              o = null, i(new Error(n));
            }).done(function(t) {
              o = null, t.ok ? e(t) : i(new Error(t.error));
            });
            o = r.abort;
          });
        },
        j = function(e) {
          return new Promise(function(t, n) {
            var i = $("#edit_member_profile_photo"),
              a = i.get(0),
              s = function() {
                r.src = e.url, $("#edit_member_profile_photo_preview").css("background", "url(" + e.url + ")"), i.css("opacity", 0), ee(), d(), t();
              },
              l = function(e) {
                TS.warn("Unable to set crop photo file image src"), TS.error(e), d(), n(e);
              },
              d = function() {
                a.removeEventListener("load", s), a.removeEventListener("error", l);
              };
            o = function() {
              d(), t();
            }, i.attr("src", e.url).data("src_id", e.id), a.addEventListener("load", s), a.addEventListener("error", l);
          });
        },
        L = function() {
          function e(e) {
            if (r) {
              var t = o.width(),
                n = t * r.width / e.crop_w,
                i = t * r.height / e.crop_w,
                a = n * e.crop_x * -1 / r.width,
                s = i * e.crop_y * -1 / r.height;
              o.css({
                "background-size": n + "px",
                "background-position": a + "px " + s + "px"
              });
            }
          }

          function t(t) {
            if (r) {
              var n = {
                crop_x: Math.round(t.x),
                crop_y: Math.round(t.y),
                crop_w: Math.min(Math.round(t.w), r.height)
              };
              s.data("dimensions", n), e(n);
            }
          }

          function n() {
            i.animateTo(a, function() {
              var e = this.tellSelect();
              e.w = r.width, t(e);
            }), i.focus();
          }
          var a, s = $("#cropbox"),
            o = $("#edit_member_profile_photo_preview"),
            l = $("#edit_member_profile_photo"),
            d = l.width(),
            c = l.height();
          if (r) {
            var _ = Math.min(r.width, r.height);
            e({
              crop_x: (r.width - _) / 2,
              crop_y: (r.height - _) / 2,
              crop_w: _
            }), $("#edit_member_profile_photo").css("opacity", 0), l.Jcrop({
              aspectRatio: 1,
              allowSelect: !1,
              boxWidth: d,
              boxHeight: c,
              onSelect: t,
              onRelease: n,
              bgColor: "white",
              trueSize: [r.width, r.height]
            }, function() {
              i = this;
              var e = this.getBounds(),
                t = Math.min(e[0], e[1]),
                r = (e[0] - t) / 2,
                s = (e[1] - t) / 2;
              a = [r, s, t, t], n();
            });
          }
        },
        U = function(e) {
          switch (e && e.message) {
            case "abort":
              break;
            case "format":
            case "bad_image":
            case "too_many_frames":
              ie();
              break;
            case "too_large":
              re();
              break;
            default:
              return G();
          }
        },
        N = function() {
          o && (o(), o = null);
        },
        G = function() {
          return TS.generic_dialog.alert(TS.i18n.t("Sorry! Something went wrong. Please try again.", "edit_profile")()).then(W);
        },
        W = function t() {
          if (d.length = 0, d.push({
              back: t
            }), Se(), N(), b(), r = null, !e.find("#edit_member_profile_list").children().first().length) {
            var n = {
                member: TS.model.user,
                team: TS.model.team,
                team_member_profile_fields: TS.team.getVisibleTeamProfileFieldsForMember(TS.model.user, !0)
              },
              i = [];
            _.each(TS.boot_data.slack_timezones, function(e) {
              i.push({
                label: e[0],
                val: e[1]
              });
            }), n.timezone_options = i, n.member_tz = TS.model.user.tz || TS.boot_data.default_tz;
            var a = TS.templates.edit_member_profile_list(n);
            e.find("#edit_member_profile_list").html(a), TS.client && TS.ui.edit_member_profile._registerCurrentStatusInput();
          }
          _e("#edit_member_profile_list"), TS.ui.fs_modal.showFooter(), TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Edit your profile", "edit_profile")()), Ladda.bind(".edit_member_profile_confirm_edit_btn"), me(), pe(), oe(), ue(!0), TS.boot_data.feature_take_profile_photo && (z(), Q());
        },
        q = function() {
          return !0 === TS.model.user.profile.is_custom_image;
        },
        z = function() {
          var t = e.find(".show_delete");
          q() ? (t.removeClass("hidden"), e.find(".member_image_wrapped_no_photo").addClass("hidden"), e.find(".member_image_wrapped").removeClass("hidden")) : (t.addClass("hidden"), e.find(".member_image_wrapped_no_photo").removeClass("hidden"), e.find(".member_image_wrapped").addClass("hidden"));
        },
        K = function() {
          q() ? e.find(".member_image_wrapped").addClass("hidden") : e.find(".member_image_wrapped_no_photo").addClass("hidden"), e.find(".edit-profile-drop-overlay").removeClass("hidden"), e.find(".member_image_upload").removeClass("hidden"), $(".file_drop_icon").fadeIn({
            queue: !1,
            duration: "slow"
          }), $(".file_drop_icon").animate({
            top: "20px"
          }, "slow");
        },
        V = function() {
          q() ? e.find(".member_image_wrapped").removeClass("hidden") : e.find(".member_image_wrapped_no_photo").removeClass("hidden"), e.find(".member_image_upload").addClass("hidden"), e.find(".edit-profile-drop-overlay").addClass("hidden"), e.find(".file_drop_icon").css("top", "-20px");
        },
        Y = function() {
          e.find(".member_image_upload").addClass("hovered");
        },
        J = function() {
          e.find(".member_image_upload").removeClass("hovered");
        },
        Q = function() {
          var t = e.find(".show_take");
          l.is_supported ? t.removeClass("hidden") : t.addClass("hidden");
        },
        X = function() {
          var t = e.find("#edit_member_profile_retake_photo_crop_btn");
          l.is_supported && l.is_enabled && l.is_accepted ? t.removeClass("hidden") : t.addClass("hidden");
        },
        Z = function() {
          TS.boot_data.feature_take_profile_photo && l && l.is_supported && (d.push({
            back: W
          }), r = null, Se(), S(), _e("#edit_member_profile_photo_take"), TS.ui.fs_modal.hideFooter(), TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Take a profile photo", "edit_profile")()), oe(), ue());
        },
        ee = function() {
          d.push({
            back: W
          }), TS.boot_data.feature_take_profile_photo && X(), _e("#edit_member_profile_photo_crop"), TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Crop your photo", "edit_profile")()), Ladda.bind("#edit_member_profile_confirm_photo_crop_btn"), oe(), ue();
        },
        te = function() {
          d.push({
            back: W
          }), n || he(), _e("#edit_member_profile_photo_upload"), TS.ui.fs_modal.hideFooter(), TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Uploading your photo…", "edit_profile")()), oe(), ue();
        },
        ne = function e() {
          d.push({
            back: e
          }), _e("#edit_member_profile_photo_delete"), TS.ui.fs_modal.hideFooter(), TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Remove profile photo", "edit_profile")()), Ladda.bind("#edit_member_profile_confirm_photo_delete_btn"), se(), ue();
        },
        ie = function() {
          d.push({
            back: W
          }), _e("#edit_member_profile_photo_format_error"), TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Oh cripes", "edit_profile")()), oe(), ue();
        },
        re = function() {
          d.push({
            back: W
          }), _e("#edit_member_profile_photo_oversize_error"), TS.ui.fs_modal.setHeaderTitle(TS.i18n.t("Dang", "edit_profile")()), oe(), ue();
        },
        ae = function() {
          if (!TS.ui.validation.validate(e, {
              quiet: !0,
              fast: !0
            })) return TS.ui.validation.validate(e), Ladda.stopAll(), void $(".edit_member_profile_confirm_edit_btn").addClass("disabled");
          var t = ["first_name", "last_name", "title", "phone"];
          TS.boot_data.feature_name_tagging_client && (t = ["real_name", "display_name", "title", "phone"]), TS.client && (t = t.concat(["status_emoji", "status_text"]));
          var n = {};
          if (t.forEach(function(t) {
              var i, r;
              TS.boot_data.feature_texty && "status_text" === t ? (i = e.find("#current_status_for_edit_profile"), r = TS.utility.contenteditable.value(i)) : (i = e.find('input[name="' + t + '"]'), r = i.val()), n[t] = r && r.trim(), TS.boot_data.feature_texty || i.val("").val(r);
            }), TS.client) {
            var i = TS.ui.edit_member_profile._current_status_input;
            i && i.isEdited() && i.clogStatusChange(n.status_text, n.status_emoji, "EDIT_PROFILE");
          }(TS.model.team.profile.fields || []).filter(function(e) {
            return !e.is_hidden;
          }).forEach(function(t) {
            var i = TS.model.user.profile.fields || {},
              r = ye(i[t.id]),
              a = ye(r.value),
              s = ye(r.alt),
              o = e.find('input[name="' + t.id + '"], select[name="' + t.id + '"]'),
              l = e.find('input[name="' + t.id + '_alt"]'),
              d = ye(o.val()),
              c = ye(l.val());
            n.fields = n.fields || {}, a === d && s === c || (n.fields[t.id] = {
              value: d && d.trim(),
              alt: c && c.trim()
            }), "text" === t.type && "skype" === t.label.toLocaleLowerCase() && (n.skype = d && d.trim()), o.val("").val(d), l.val("").val(c);
          });
          var r = {
              profile: JSON.stringify(n)
            },
            a = e.find('[name="tz"]').val();
          a !== TS.model.user.tz && (TS.web && (TS.model.user.tz = a, TS.model.user.tz_offset = TS.boot_data.dst_offsets[a].tz_offset), TS.prefs.setPrefByAPI({
            name: "tz",
            value: a
          })), TS.api.call("users.profile.set", r).then(function(e) {
            $(".edit_member_profile_confirm_edit_btn").addClass("disabled"), TS.web && (TS.model.user.profile = e.data.profile, TS.members.upsertMember(TS.model.user)), TS.client && TS.ui.edit_member_profile._unregisterCurrentStatusInput(), TS.ui.fs_modal.close();
          }).catch(function(e) {
            return $(".edit_member_profile_confirm_edit_btn").addClass("disabled"), "ratelimited" === e.data.error ? TS.generic_dialog.alert(TS.i18n.t("You‘re changing your profile too often! You might have better luck if you try again in a few minutes.", "edit_profile")()) : TS.generic_dialog.alert(TS.i18n.t("Sorry! Something went wrong. Please try again.", "edit_profile")());
          }).finally(Ladda.stopAll);
        },
        se = function() {
          e.closest(".contents").addClass("display_flex flex_direction_column").css("height", "70vh"), e.css({
            margin: "auto 0",
            height: "auto",
            "padding-top": 0
          });
        },
        oe = function() {
          e.closest(".contents").removeClass("display_flex flex_direction_column").css("height", ""), e.css({
            margin: "",
            height: "",
            "padding-top": ""
          });
        },
        le = function(t) {
          t.stopPropagation(), q() && !$(t.target).is(".btn") || TS.model.is_iOS ? TS.menu.member.startWithEditMemberProfilePhotoActions(t, de) : e.find('[data-action="edit_member_profile_upload_photo"]').trigger("click");
        },
        de = function(t) {
          var n;
          n = TS.boot_data.feature_take_profile_photo ? $(t.target).closest("ts-icon") : $(t.target).closest("li"), n.is('[data-action="edit_member_profile_upload_image"]') ? TS.model.is_iOS || (t.preventDefault(), e.find('[data-action="edit_member_profile_upload_photo"]').trigger("click"), TS.menu.end()) : n.is('[data-action="edit_member_profile_to_delete"]') && (t.preventDefault(), ne(), TS.menu.end());
        },
        ce = function(e) {
          (TS.boot_data.feature_take_profile_photo ? $(e.target).closest("ts-icon") : $(e.target).closest("li")).is('[data-action="edit_member_profile_to_delete"]') && (e.preventDefault(), ne(), TS.menu.end());
        },
        _e = function(t) {
          var n = ["#edit_member_profile_loading", "#edit_member_profile_list", "#edit_member_profile_photo_upload", "#edit_member_profile_photo_crop", "#edit_member_profile_photo_delete", "#edit_member_profile_photo_take", "#edit_member_profile_photo_size_error", "#edit_member_profile_photo_format_error", "#edit_member_profile_photo_oversize_error"].filter(function(e) {
            return e !== t;
          }).join(", ");
          e.find(n).addClass("hidden"), e.find(t).removeClass("hidden"), s = t;
        },
        ue = function(e) {
          e ? (TS.ui.fs_modal.unbindBackButton(), TS.ui.fs_modal.hideBackButton()) : (TS.ui.fs_modal.bindBackButton(function() {
            d.pop(), d.pop().back();
          }), TS.ui.fs_modal.showBackButton());
        },
        me = function() {
          $(".edit_member_profile_confirm_edit_btn").toggleClass("disabled", !TS.ui.validation.validate(e, {
            quiet: !0,
            fast: !0
          }));
        },
        pe = function() {
          e.find(".edit_member_profile_lazy_filter_select").each(function(e, t) {
            var n = $(t),
              i = n.val().split(/\s*,\s*/);
            TS.ui.people_picker.make(n, {
              preselected_ids: i
            }), n.on("change", function() {
              var e = TS.ui.people_picker.value(n).map(function(e) {
                return e.member.id;
              }).join(",");
              n.val(e), me();
            });
          });
        },
        fe = function() {
          e && $("#edit_member_profile_photo_container .member_image").replaceWith(TS.templates.builders.makeMemberPreviewLinkImage(TS.model.user.id, 192, !1, !0));
        },
        he = function() {
          n = $("#edit_member_profile_progress_circle").circleProgress({
            value: 0,
            size: 64,
            fill: {
              gradient: ["#50acf4", "#41a6f5"]
            },
            startAngle: Math.PI / -2
          });
        },
        ge = function(e) {
          var t = parseFloat(e);
          isNaN(t) || n.circleProgress({
            value: t.toFixed(2)
          });
        },
        Se = function() {
          i && (i.destroy(), i = null, $("#edit_member_profile_photo").css({
            width: "auto",
            height: "auto",
            display: "block",
            visibility: "visible",
            opacity: 1
          }));
        },
        Te = function() {
          i && i.getOptions().disabled || (Se(), a && clearTimeout(a), a = setTimeout(function() {
            r && !i && L();
          }, 300));
        },
        be = function(e) {
          var t = $(e.target),
            n = $('input[name="' + t.attr("name") + '_alt"]'),
            i = t.val();
          i && (i = i.trim()), TS.ui.validation.validate(t, {
            quiet: !0,
            fast: !0
          }) && n.val(TS.interop.datetime.convertISOtoUTCReadableDate(i));
        },
        ve = function() {
          if (!TS.model.team.plan) return !1;
          var e = TS.model.user;
          return !!e && (TS.model.user.enterprise_user ? TS.model.user.enterprise_user.is_admin || TS.model.user.enterprise_user.is_owner : "admin" === TS.model.team.prefs.who_can_change_team_profile ? e.is_admin : "owner" !== TS.model.team.prefs.who_can_change_team_profile || e.is_owner);
        },
        ye = function(e) {
          return _.isUndefined(e) ? "" : e;
        };
    }();
  },
  2612: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.frecency", {
        onStart: function() {
          TS.client && TS.client.before_login_sig.addOnce(t), TS.web && TS.web.before_login_sig.addOnce(t), TS.prefs.frecency_jumper_changed_sig.add(n);
        },
        record: function() {
          e.record.apply(this, arguments);
        },
        query: function() {
          return e.query.apply(this, arguments);
        },
        clearCache: function() {
          e._clearCache.apply(this);
        },
        getMostCommonWithPrefix: function() {
          return e.getMostCommonWithPrefix.apply(this, arguments);
        },
        isEnterprise: function() {
          return TS.boot_data.feature_enterprise_frecency && TS.boot_data.page_needs_enterprise;
        },
        bonus_points: {
          starred_channel: 10,
          member_of_this_channel: 10,
          archived_channel_or_group: -50,
          not_in_channel: -25,
          usergroup_or_keyword: -25,
          fuzzy_match: 50,
          exact_match: 100,
          matches_previous_name: -50
        }
      });
      var e, t = function() {
          e = TS.frecency.construct("jumper", {
            onStart: function() {
              return i = TS.utility.throttleFunc(i, 6e4, !0), TS.model.frecency_jumper;
            },
            recordFunc: function(e) {
              TS.model.frecency_jumper = e, i();
            },
            onClearCache: function() {
              TS.prefs.setPrefByAPI({
                name: TS.ui.frecency.isEnterprise() ? "frecency_ent_jumper" : "frecency_jumper",
                value: "{}"
              });
            }
          });
        },
        n = function() {
          e._setCache(TS.model.frecency_jumper);
        },
        i = function() {
          TS.prefs.setPrefByAPI({
            name: TS.ui.frecency.isEnterprise() ? "frecency_ent_jumper" : "frecency_jumper",
            value: JSON.stringify(TS.model.frecency_jumper)
          });
        };
    }();
  },
  2613: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.fs_modal", {
        is_showing: !1,
        transition_duration: 250,
        start: function(s) {
          if (TS.ui.fs_modal.is_showing) return void S(s);
          l = _.defaults({}, s, d), TS.ui.fs_modal.is_showing = !0, TS.tips.hideAll(), c(), l.modal_class && e.addClass(l.modal_class), l.modal_bg_class && t.addClass(l.modal_bg_class), l.modal_contents_container_class && e.find(".contents_container").addClass(l.modal_contents_container_class), i = e.find(".contents"), r = e.find("#fs_modal_sidebar"), a = e.find("#fs_modal_header");
          var o;
          if (l.body_template_html ? (o = l.body_template_html, l.body && TS.warn("Both body and body_template_html were passed in settings to TS.ui.fs_modal.start(). Using body_template.")) : o = TS.templates.fs_modal_generic_contents({
              settings: l,
              fs_modal_header: _.includes(l.modal_class, "fs_modal_header"),
              fs_modal_footer: _.includes(l.modal_class, "fs_modal_footer")
            }), i.html(o), l.header_html && a.replaceWith(l.header_html), l.sidebar_html && r.html(l.sidebar_html), l.modal_gallery && b(), e.on("click", ".dialog_go", u), e.on("click", ".dialog_secondary_go", m), e.on("click", ".dialog_cancel", f), $(window.document).off(".fs_modal"), $(window.document).on("keydown.fs_modal", p), n.on("click", function() {
              l.esc_for_ok ? u() : f();
            }), $("html").addClass("fs_modal_active"), setTimeout(function() {
              t && t.addClass("active"), e && e.addClass("active");
            }, 0), e.find("input").length ? e.find("input").first().focus() : document.activeElement && document.activeElement !== document.body && document.activeElement.blur(), l.onShow && l.onShow(), l.onShowComplete) {
            var h = !1,
              g = T(),
              v = setTimeout(function() {
                h = !0, l.onShowComplete(), e.off(g + ".fs_modal_show_complete");
              }, 600);
            e.one(g + ".fs_modal_show_complete", function() {
              h || (clearTimeout(v), l.onShowComplete());
            });
          }
          document.activeElement.blur();
        },
        close: function(e) {
          f(e);
        },
        bindBackButton: function(e) {
          $("#fs_modal_back_btn").off("click.fs_modal").on("click.fs_modal", e);
        },
        unbindBackButton: function() {
          $("#fs_modal_back_btn").off("click.fs_modal");
        },
        showBackButton: function() {
          $("#fs_modal_back_btn").removeClass("hidden");
        },
        hideBackButton: function() {
          $("#fs_modal_back_btn").addClass("hidden");
        },
        activate: function() {
          e.addClass("active"), t.addClass("active");
        },
        deactivate: function() {
          e.removeClass("active"), t.removeClass("active");
        },
        setHeaderTitle: function(e) {
          a.length && a.find("h3").text(e);
        },
        showFooter: function() {
          s.length && (e.addClass("fs_modal_footer"), s.removeClass("hidden"));
        },
        hideFooter: function() {
          s.length && (e.removeClass("fs_modal_footer"), s.addClass("hidden"));
        }
      });
      var e, t, n, i, r, a, s, o = 0,
        l = null,
        d = {
          title: "",
          body: "",
          body_template_html: null,
          show_go_button: !0,
          show_secondary_go_button: !1,
          show_cancel_button: !0,
          go_button_text: TS.i18n.t("OK", "fs_modal")(),
          go_button_class: "",
          secondary_go_button_text: TS.i18n.t("OK 2", "fs_modal")(),
          secondary_go_button_class: "",
          cancel_button_text: TS.i18n.t("Cancel", "fs_modal")(),
          disable_default_controls: !1,
          disable_esc: !1,
          onGo: null,
          onSecondaryGo: null,
          onCancel: null,
          onEnd: null,
          esc_for_ok: !1,
          onShow: null,
          enter_always_gos: !1,
          fullscreen: !1,
          modal_class: null,
          modal_bg_class: null,
          modal_contents_container_class: null,
          modal_gallery: null,
          sidebar_html: null,
          header_html: null
        },
        c = function() {
          t = null, e = null, a = null, s = null, n = null, i = null, r = null;
          var o = {
              settings: l,
              fs_modal_header: _.includes(l.modal_class, "fs_modal_header"),
              fs_modal_footer: _.includes(l.modal_class, "fs_modal_footer"),
              fs_modal_sidebar: _.includes(l.modal_class, "fs_modal_sidebar"),
              disable_default_controls: l.disable_default_controls
            },
            d = TS.templates.fs_modal(o);
          $("body").append(d), t = $("#fs_modal_bg"), e = $("#fs_modal"), a = $("#fs_modal_header"), s = $("#fs_modal_footer"), n = $("#fs_modal_close_btn");
        },
        u = function() {
          if (!TS.ui.fs_modal.is_showing) return void TS.error("not showing?");
          l.onGo ? !1 !== l.onGo() && f() : f();
        },
        m = function() {
          if (!TS.ui.fs_modal.is_showing) return void TS.error("not showing?");
          l.onSecondaryGo ? !1 !== l.onSecondaryGo() && f() : f();
        },
        p = function(e) {
          if (e.which != TS.utility.keymap.enter || "BODY" !== TS.utility.getActiveElementProp("NODENAME") && !l.enter_always_gos) {
            if (e.which == TS.utility.keymap.esc) {
              if (l.disable_esc) return;
              l.esc_for_ok ? u() : (f(), l.clog_name && TS.clog.track(l.clog_name + "_ACTION", {
                action: "close_modal",
                trigger: "esc_key"
              }));
            }
          } else l.show_go_button && (u(), e.preventDefault());
        },
        f = function(n) {
          y(n) && (e && e.removeClass("active"), t && t.removeClass("active"), setTimeout(function() {
            $("html").removeClass("fs_modal_active");
          }, TS.ui.fs_modal.transition_duration), l.onCancel && l.onCancel(), g());
        },
        h = function() {
          e.remove(), t.remove(), TS.ui.fs_modal.is_showing = !1;
        },
        g = function() {
          setTimeout(function() {
            h();
          }, TS.ui.fs_modal.transition_duration), $(window.document).off("keydown.fs_modal"), l.onEnd && l.onEnd(), TS.tips.unhideAll();
        },
        S = function(n) {
          e.removeClass("active"), l.onCancel && l.onCancel();
          var i = t.attr("id", null).addClass("fs_modal_bg");
          setTimeout(function() {
            e.remove(), TS.ui.fs_modal.is_showing = !1, TS.ui.fs_modal.start(n), setTimeout(i.remove.bind(i), TS.ui.fs_modal.transition_duration);
          }, TS.ui.fs_modal.transition_duration);
        },
        T = function() {
          var t = {
            WebkitTransition: "webkitTransitionEnd",
            MozTransition: "transitionend",
            transition: "transitionend"
          };
          for (var n in t)
            if (void 0 !== e[0].style[n]) return t[n];
        },
        b = function() {
          var t = e.find("[data-modal-items]");
          o = l.modal_gallery.index, TS.ui.fs_modal.hideFooter(), o ? e.find('[data-modal-gallery-index="' + o + '"]').removeClass("hidden") : e.find("[data-modal-gallery-index]").first().removeClass("hidden"), e.on("click", "[data-modal-gallery-direction]", function() {
            var e = $(this).data("modal-gallery-direction");
            o += e, t.find("[data-modal-gallery-index]").addClass("hidden"), t.find('[data-modal-gallery-index="' + o + '"]').removeClass("hidden"), v();
          }), v();
        },
        v = function() {
          var t = e.find('[data-modal-gallery-direction="-1"]'),
            n = e.find('[data-modal-gallery-direction="1"]'),
            i = l.modal_gallery.total_items;
          0 === o ? t.prop("disabled", !0) : t.prop("disabled", !1), o === i ? n.prop("disabled", !0) : n.prop("disabled", !1);
        },
        y = function(e) {
          return !!e || !TS.ui.react_emoji_menu.is_showing && (!TS.model.menu_is_showing && (!TS.model.dialog_is_showing && !TS.utility.isTabCompleteShowing()));
        };
    }();
  },
  2616: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.handy_rxns", {
        onStart: function() {
          TS.web && TS.web.login_sig.add(p), TS.client && TS.client.login_sig.add(u), TS.prefs.preferred_skin_tone_changed_sig.add(M);
        },
        decorateMsg: function(e, t) {
          if (!TS.boot_data.feature_thanks) return e;
          var n = A(t);
          return n && (e._handy_rxns_poll_data = n.data, e.text = n.copy), e;
        },
        msgifyPollData: function(e) {
          var t = c;
          return _.forOwn(e.list, function(e) {
            t += "\n:" + e.name + ": " + (e.title || e.name);
          }), t;
        },
        startPollDialog: function(t, i) {
          if (r = TS.shared.getModelObById(t)) {
            a = TS.utility.msgs.getMsg(i, r.msgs), o = a ? TS.format.unFormatMsg(a.text) : TS.utility.contenteditable.value(TS.client.ui.$msg_input), TS.view.clearMessageInput(), s = !0, g(), m(), k();
            var d = a ? TS.i18n.t("Edit a poll in {name}", "rxns") : TS.i18n.t("Create a poll in {name}", "rxns"),
              c = r.is_channel ? "#" : '<i class="ts_icon ts_icon_lock"></i> ',
              _ = d({
                name: c + r.name
              }),
              u = a ? TS.i18n.t("Save", "rxns")() : TS.i18n.t("Create", "rxns")(),
              p = TS.i18n.t("Your poll text", "rxns")();
            TS.generic_dialog.start({
              title: _,
              $body: e,
              go_button_text: u,
              onGo: function() {
                if (!C()) return !1;
                var e = n.val(),
                  t = S(),
                  i = e + TS.ui.handy_rxns.msgifyPollData(t);
                return a ? TS.msg_edit.commitEdit(a, r, i) : TS.client.ui.sendMessage(r, i), f(), !0;
              },
              onEnd: function() {
                f();
              },
              onCancel: function() {
                a || TS.client.msg_input.populate(o);
              },
              onShow: function() {
                TS.ui.inline_msg_input.make(e.find("#poll_dialog_input_container"), {
                  placeholder: p,
                  no_emo: !0
                }), n = e.find(".message_input"), n.val(o), n.on("textchange", function() {
                  I();
                }), l = void 0, I();
              }
            });
          }
        },
        startChannelDialog: function(t) {
          if (r = TS.shared.getModelObById(t)) {
            s = !1, g(), m(), k();
            var n = TS.i18n.t("Edit handy reactions for {name}", "rxns"),
              i = r.is_channel ? "#" : '<i class="ts_icon ts_icon_lock"></i> ',
              a = n({
                name: i + r.name
              }),
              o = TS.i18n.t("Save", "rxns")();
            TS.generic_dialog.start({
              title: a,
              $body: e,
              go_button_text: o,
              onGo: function() {
                return TS.ui.handy_rxns.saveHandyRxns().then(function() {
                  TS.generic_dialog.cancel(), f();
                }).catch(function() {
                  alert("saving failed");
                }), !1;
              },
              onEnd: function() {
                f();
              },
              onShow: function() {
                l = void 0, I();
              }
            });
          }
        },
        saveHandyRxns: function() {
          var e, t = S();
          return r ? (TS.model.team.prefs.channel_handy_rxns = TS.model.team.prefs.channel_handy_rxns || {}, t.list.length ? TS.model.team.prefs.channel_handy_rxns[r.id] = t : delete TS.model.team.prefs.channel_handy_rxns[r.id], e = {
            channel_handy_rxns: TS.model.team.prefs.channel_handy_rxns
          }) : e = {
            team_handy_rxns: t
          }, TS.prefs.setTeamPrefByAPI(e).then(function() {
            m();
            I(!0);
          });
        }
      });
      var e, t, n, i, r, a, s, o, l, d = null,
        c = TS.i18n.t("⁣\n\nThis is a poll. Choose from these reactions:", "rxns")(),
        u = function() {},
        m = function() {
          i = s ? a && a._handy_rxns_poll_data || {
            list: [],
            restrict: !1
          } : r ? TS.rxns.getHandyRxnsByCidAndMsgId(r.id, null, {
            list: [],
            restrict: !1
          }) : TS.model.team.prefs.team_handy_rxns;
        },
        p = function() {
          m(), r = null, s = !1, g(), k(), $("#handy_rxns_subsection").prepend(e);
        },
        f = function() {
          e && (e.empty(), e = null, d = null, t = null, n = null);
        },
        h = function() {
          var e = _.cloneDeep(TS.boot_data.handy_rxns_suggestions);
          for (var t in e) s ? e[t].is_poll || delete e[t] : e[t].is_poll && delete e[t];
          return e;
        },
        g = function() {
          e = $(TS.templates.rxns_handy_controller({
            max_handy_rxns: s ? TS.boot_data.max_poll_handy_rxns : Math.max(TS.boot_data.max_channel_handy_rxns, TS.boot_data.max_team_handy_rxns),
            max_handy_rxns_title_chars: TS.boot_data.max_handy_rxns_title_chars,
            model_ob: r,
            in_poll_mode: s,
            handy_rxns_suggestions: h()
          })), d = e.find(".handy_rxns_row"), t = e.find("#handy_rxns_restrict_cb"), n = $(), e.find("#suggestions_ui a").bind("click", function(e) {
            var t = $(e.currentTarget),
              n = t.data("suggestion-key");
            TS.boot_data.handy_rxns_suggestions[n] && k(TS.boot_data.handy_rxns_suggestions[n]);
          }), t.bind("change", function() {
            I();
          }), e.find("input.title").on("textchange", function() {
            I();
          }), e.find("a.handy_rxns_remover").on("click", function(e) {
            var t = $(e.currentTarget).parent();
            w(t, ""), t.insertAfter(d.last()), I();
          }), e.find("a.handy_rxns_picker").on("click", function(e) {
            var t = $(e.currentTarget).parent(),
              n = t.find("a.btn").data("rxn"),
              i = t.hasClass("empty") ? S().list.map(function(e) {
                return e.name;
              }) : [n];
            TS.ui.react_emoji_menu.start({
              e: e,
              disabled_names: i,
              callback: function(e) {
                e = T(e);
                var i = b(e);
                i.length ? (w(i, n), w(t, e)) : w(t, e), t.insertBefore(y().first()), I();
              }
            });
          });
        },
        S = function() {
          var n = [];
          d = e.find(".handy_rxns_row"), $.each(v(), function(e, t) {
            var i = $(t);
            n.push({
              name: i.find("a.btn").data("rxn"),
              title: i.find("input.title").val()
            });
          });
          var i = {
            list: n,
            restrict: !!t.prop("checked")
          };
          return s && (i.restrict = !0, i.is_poll = !0), i;
        },
        T = function(e) {
          return TS.emoji.stripWrappingColons(e.replace(/(::skin-tone-[2-6])/, ""));
        },
        b = function(e) {
          return d.filter(function() {
            return $(this).find("a.btn").data("rxn") == e;
          });
        },
        v = function() {
          return d.filter(function() {
            return !$(this).hasClass("empty");
          });
        },
        y = function() {
          return d.filter(function() {
            return $(this).hasClass("empty");
          });
        },
        w = function(e, t) {
          var n = TS.emoji.isNameSkinToneModifiable(t) ? TS.emoji.getChosenSkinToneModifier() : "",
            i = t && TS.emoji.graphicReplace(":" + t + ":" + n) || '<i class="ts_icon ts_icon_add_reaction subtle_silver"></i>',
            r = t ? TS.i18n.t("say what {name} means", "rxns")({
              name: t
            }) : "";
          return e.find("a.btn").html(i).attr("data-rxn", t).data("rxn", t), e.find("input.title").val(r).attr("placeholder", r), e.toggleClass("empty", !t), x(), e;
        },
        k = function(e) {
          e = e || i, $.each(d, function(t, n) {
            var i = $(n),
              r = e.list[t];
            r ? w(i, r.name) : w(i, "");
          }), t.prop("checked", !!e.restrict), x(), I();
        },
        x = function() {
          e.find("#handy_rxns_controller_empty").toggleClass("hidden", !!v().length);
        },
        M = function() {
          d && $.each(d, function(e, t) {
            var n = $(t),
              i = n.find("a.btn").data("rxn");
            TS.emoji.isNameSkinToneModifiable(i) && w(n, i);
          });
        },
        C = function() {
          return !!n.val() && !(S().list.length < 1);
        },
        I = function(e) {
          var t = l,
            r = S();
          if (l = !TS.utility.areSimpleObjectsEqual(i, r), s && o != n.val() && (l = !0), TS.web) {
            if (l == t) return;
            e ? setTimeout(function() {
              $("#handy_rxns_subsection").find(".submit_setting").toggleClass("disabled", !l), TS.ui.resetButtonSpinner($("#handy_rxns_subsection").find(".submit_setting"));
            }, 2e3) : $("#handy_rxns_subsection").find(".submit_setting").toggleClass("disabled", !l);
          } else if (TS.client)
            if (s) $("#generic_dialog").find(".btn.dialog_go").toggleClass("disabled", !l || !C());
            else {
              if (l == t) return;
              $("#generic_dialog").find(".btn.dialog_go").toggleClass("disabled", !l);
            }
        },
        A = function(e) {
          if (!e) return null;
          var t = e.split(c);
          if (2 != t.length) return null;
          var n = t[0],
            i = $.trim(t[1]).split("\n"),
            r = {
              list: [],
              is_poll: !0,
              restrict: !0
            };
          return i.forEach(function(e) {
            var t = e.split(":")[1],
              n = $.trim(e.replace(":" + t + ":", "")) || "";
            n == t && (n = ""), r.list.push({
              name: t,
              title: n
            });
          }), r.list.length ? {
            data: r,
            copy: n
          } : null;
        };
    }();
  },
  2619: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.inline_msg_input", {
        onStart: _.noop,
        make: function(e, a) {
          var s = TS.client && TS.client.ui.areMsgsScrolledToBottom(),
            o = !(!TS.client || a.no_emo),
            l = !(!TS.client || !TS.model.prefs.webapp_spellcheck),
            d = TS.templates.inline_message_input({
              input_id: _.uniqueId("inline_message_input_"),
              include_emo: o,
              is_texty: TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty(),
              should_spellcheck: l
            }),
            c = $(d);
          c.appendTo(e);
          var u = c.find(".message_input");
          return TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() || TSSSB.call("inputFieldCreated", u.get(0)), a.placeholder && TS.utility.contenteditable.placeholder(u, a.placeholder), a.aria_label && u.attr("aria-label", a.aria_label), t(u, a), n(c, u, a), i(c, u), a.scrollIntoView && r(c, u, s), c;
        }
      });
      var e = 0,
        t = function(t, n) {
          if (!TS.boot_data.feature_texty_takes_over || !TS.utility.contenteditable.supportsTexty()) {
            var i = !0;
            !1 === n.complete_member_specials && (i = !1);
            var r = !!n.complete_cmds,
              a = !!n.in_thread;
            t.TS_tabComplete({
              complete_cmds: r,
              complete_channels: !0,
              complete_emoji: !0,
              complete_member_specials: i,
              complete_user_groups: !0,
              no_tab_out: !0,
              onComplete: function(e, n) {
                TS.utility.populateInput(t, e, n);
              },
              sort_by_membership: !0,
              include_self: !!TS.boot_data.feature_name_tagging_client,
              model_ob: n.model_ob,
              in_thread: a
            });
            var s = {
              id: "inline_msg_input_tab_ui_" + e,
              scroll_with_element: !!TS.client,
              model_ob: n.model_ob
            };
            e += 1;
            t.closest("#col_flex").length > 0 && (s.min_width = 300, s.narrow = !!TS.client), t.tab_complete_ui(s);
          }
        },
        n = function(e, t, n) {
          var i = n.onSubmit || _.noop,
            r = n.onCancel || _.noop;
          TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() && (TS.utility.contenteditable.create(t, {
            modules: {
              msginput: {
                onUpArrow: function() {
                  if (!TS.model.prefs.arrow_history) return l(t, !1, n);
                },
                onUpArrowCmd: function() {
                  l(t, !0, n);
                }
              },
              tabcomplete: {
                searchOptions: {
                  complete_member_specials: n.complete_member_specials,
                  model_ob: n.model_ob,
                  in_thread: !!n.in_thread
                },
                completers: n.completers,
                positionMenu: function(e) {
                  var i = t.offset(),
                    r = $(window).width() - i.left - 2;
                  e.style.width = Math.min(t.outerWidth(), r) + "px", e.style.minWidth = 0, TS.tabcomplete.positionUIRelativeToInput(e, t, n.autocomplete_below_input);
                }
              }
            },
            placeholder: n.placeholder,
            onEnter: function() {
              return TS.client.ui.cal_key_checker.prevent_enter || o(t, e, i), n.onEnter && n.onEnter(), !1;
            },
            onEscape: function() {
              n.onEscape && n.onEscape();
            },
            onTab: function() {
              return n.onTab && n.onTab(), TS.boot_data.feature_keyboard_navigation;
            },
            onTextChange: function() {
              TS.msg_edit.checkLengthAndUpdateMessage(t), n.onTextChange && n.onTextChange(t);
            }
          }), TS.utility.contenteditable.enable(t)), e.bind("destroyed", function() {
            r(e), TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() || TSSSB.call("inputFieldRemoved", t.get(0));
          }), e.bind("submit", function(n) {
            n.preventDefault(), o(t, e, i);
          }), TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() || t.bind("textchange", function() {
            TS.msg_edit.checkLengthAndUpdateMessage(t), n.onTextChange && n.onTextChange(t);
          }).bind("keyup", function() {
            var t;
            window.getSelection && (t = window.getSelection()) && t.toString && !t.toString() && e.scrollintoview({
              direction: "vertical",
              px_offset: -50
            });
          }).bind("keydown", function(r) {
            if (r.which == TS.utility.keymap.enter && (r.ctrlKey || r.altKey)) {
              if (!TS.model.is_mac || TS.model.is_FF || TS.model.is_electron || TS.model.is_chrome_desktop) {
                var a = TS.utility.contenteditable.cursorPosition(t).start,
                  s = TS.utility.contenteditable.value(t),
                  l = s.substr(0, a) + "\n" + s.substr(a);
                TS.utility.contenteditable.value(t, l), t.trigger("autosize").trigger("autosize-resize"), TS.utility.contenteditable.cursorPosition(t, a + 1);
              }
            } else r.which == TS.utility.keymap.enter ? TS.model.prefs.enter_is_special_in_tbt && TS.utility.isCursorWithinTBTs(t) && !r.shiftKey || (TS.model.prefs.enter_is_special_in_tbt && TS.utility.isCursorWithinTBTs(t) && r.shiftKey ? (r.preventDefault(), o(t, e, i)) : t.tab_complete_ui("isShowing") ? r.preventDefault() : r.shiftKey || r.altKey || (r.preventDefault(), o(t, e, i))) : TS.client && TS.client.ui.shouldEventTriggerMaybeEditLast(r, t) && d(t, n);
          }).autosize({
            boxOffset: 18
          });
        },
        i = function(e, t) {
          var n = e.find(".emo_menu");
          n.removeClass("hidden"), n.bind("click.open_dialog", function(e) {
            TS.ui.react_emoji_menu.start({
              e: e,
              input_to_fill: t
            });
          });
        },
        r = function(e, t, n) {
          TS.client && n && TS.client.ui.instaScrollMsgsToBottom(!1), e.scrollintoview({
            duration: 500,
            px_offset: 100,
            complete: function() {
              TS.utility.contenteditable.focus(t), TS.utility.setCursorPosition(t, 1e8);
            }
          });
        },
        a = function(e, t) {
          var n = e.closest("ts-message");
          if (t && n.length) {
            var i = n.data("ts"),
              r = TS.utility.msgs.getMsg(i, t.msgs);
            if (r && TS.utility.msgs.canEditMsg(r, t)) return r;
          }
          return null;
        },
        s = function(e, t) {
          return !TS.msg_edit.isMessageTooLong(e) && !!$.trim(t);
        },
        o = function(e, t, n) {
          var i = TS.utility.contenteditable.value(e);
          s(e, i) && n(t, i);
        },
        l = function(e, t, n) {
          var i = jQuery.Event("keydown", {
            altKey: !1,
            shiftKey: !1,
            which: TS.utility.keymap.up
          });
          if (t && (TS.model.is_mac ? i.metaKey = !0 : i.ctrlKey = !0), !TS.client.ui.shouldEventTriggerMaybeEditLast(i, e)) return !0;
          d(e, n);
        },
        d = function(e, t) {
          var n = t.getMsgDivForEditing || a,
            i = t.model_ob,
            r = n(e, i);
          if (r && r.length) {
            var s = r.data("ts"),
              o = r.data("model-ob-id");
            i = TS.shared.getModelObById(o);
            var l = r.closest("#convo_container").length > 0,
              d = l ? "convo" : null;
            TS.msg_edit.startEdit(s, i, d);
          }
        };
    }();
  },
  2620: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.inline_saver", {
        show: function(n) {
          n = n || {};
          var i = $(n.target);
          if (!i.length) return void TS.warn("TS.ui.inline_saver called without a valid target.");
          var r = i.data("inline-saver");
          r && r.length && (r.remove(), clearTimeout(i.data("inline-saver-spin-timeout")));
          var a = $(TS.templates.inline_saver({
            custom_text: n.custom_text,
            hide_text: n.hide_text
          }));
          if (a.insertAfter(i), i.data("inline-saver", a), n.promise) n.promise.then(function() {
            t(n);
          }).catch(function() {
            t(n, !0);
          });
          else {
            var s = setTimeout(function() {
              t(n);
            }, e);
            i.data("inline-saver-spin-timeout", s);
          }
        }
      });
      var e = 500,
        t = function(e, t) {
          e = e || {};
          var n = $(e.target);
          clearTimeout(n.data("inline-saver-hide-timeout"));
          var i = n.data("inline-saver");
          if (i && i.length) {
            var r = t ? "failed" : "saved";
            i.removeClass("saving").addClass(r);
            var a = t ? 3e3 : 2e3,
              s = setTimeout(function() {
                i.remove();
              }, a);
            n.data("inline-saver-hide-timeout", s);
          }
        };
    }();
  },
  2623: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.lazy_filter_select", {
        STYLES: {
          default: "default",
          filter_in_list: "filter_in_list",
          normal: "normal",
          small: "small"
        },
        onStart: function() {
          $("select[data-lazy-filter-select], label[data-lazy-filter-select] select").addClass("hidden").lazyFilterSelect({
            use_data_attributes: !0
          });
        },
        create: function(t, n) {
          if (n.use_data_attributes) {
            Object.keys(t.data()).forEach(function(e) {
              if (e.indexOf("lazyFilterSelect") > -1 && "TS-lazyFilterSelect" !== e && "" !== t.data(e)) {
                var i = t.data(e);
                "true" !== i && "false" !== i || (i = "true" === i), n[e.replace("lazyFilterSelect", "").toLowerCase()] = i;
              }
            });
          }
          "SELECT" === t.prop("tagName") && void 0 === n.single && (n.single = !t.prop("multiple"));
          var i = $.extend({}, e, n);
          void 0 === n.approx_divider_height && (i.approx_divider_height *= 1), void 0 === n.approx_item_height && (i.approx_item_height *= 1);
          var a = $('<div class="lazy_filter_select">');
          i.classes && a.addClass(i.classes), t.prop("disabled") && (i.disabled = !0), i.disabled && a.addClass("disabled"), i.style = _.get(TS.ui.lazy_filter_select.STYLES, i.style, TS.ui.lazy_filter_select.STYLES.default), Z(i) && !i.single && (TS.console.warn("Multi-select lazyFilterSelect instances can't use the 'filter_in_list' style. Using 'default' style instead."), i.style = TS.ui.lazy_filter_select.default);
          var s = TS.templates.lazy_filter_select_container({
            instance: i,
            aria_labelledby: t.attr("aria-labelledby"),
            STYLES: TS.ui.lazy_filter_select.STYLES
          });
          return a.html(s), i.append ? a.appendTo(t) : a.insertAfter(t), a.addClass(i.style + "_style"), i.single && a.addClass("single"), i.width && a.css("width", i.width), i.css && a.css(i.css), i.$container = a, i.$select = t, i.$input_container = a.find(".lfs_input_container"), i.$lfs_value = a.find(".lfs_value"), i.$input = a.find(".lfs_input"), i.$list_container = a.find(".lfs_list_container"), i.$list = a.find(".lfs_list"), i.$status = a.find(".lfs_status"), i.$status_loading_indicator = i.$status.find(".lfs_status_loading_indicator"), i.$status_content = i.$status.find(".lfs_status_content"), Z(i) ? i.$filter_input = a.find(".lfs_filter_input") : i.$filter_input = i.$input, i._page_number = 1, i._slug_id_counter = 1, i.run = E, i.data_promise ? (B(i) && i._running_promise.cancel("Uhhh..."), i._running_promise = F(i, "").then(function(e) {
            i.data = e, i.run(), r(i);
          }, function(e) {
            r(i), te(i, e, "Something failed while trying to return the initial data for lazyFilterSelect.");
          })) : (i.data && (i.data = i.data.slice()), TS.useRedux() && _.forEach(i.data, function(e, t, n) {
            e && e._is_interop_channel_object && (n[t] = _.assign({}, e));
          }), i.run(), r(i)), i.current_items_in_view_signal = new signals.Signal, i;
        }
      });
      var e = {
        allow_item_unselect: !1,
        allow_list_position_above: !1,
        always_visible: !1,
        append: !1,
        approx_divider_height: 28,
        approx_item_height: 30,
        data_promise: null,
        data_qa: "lfs",
        disabled: !1,
        filter: function(e, t) {
          var n = e.toString();
          if (t = t.toLowerCase(), e instanceof jQuery || e instanceof HTMLElement) {
            n = $(e).text();
            var i = $(e).attr("data-additional-search-field");
            if (i && i.toLowerCase().indexOf(t) > -1) return !0;
          }
          return n.toLowerCase().indexOf(t) > -1;
        },
        input_debounce_wait_time: void 0,
        listItemClass: null,
        max_selected_items: 1 / 0,
        min_query_length: 0,
        monkey_scroll: !0,
        no_default_selection: !1,
        noResultsTemplate: function(e) {
          return ee(this) && e.length < this.min_query_length ? TS.i18n.t("{query_length, plural, =0 {Start typing to see results…} other {Keep typing to see results…}}", "lazy_filter_select")({
            query_length: e.length
          }) : TS.i18n.t("No items matched {query}", "lazy_filter_select")({
            query: "<strong>" + _.escape(e) + "</strong>"
          });
        },
        errorTemplate: function(e) {
          return e || TS.i18n.t("Couldn't load results.", "lazy_filter_select")();
        },
        onInputBlur: _.noop,
        onInputFocus: _.noop,
        onReady: function() {},
        onItemAdded: function() {},
        onItemRemoved: function() {},
        onKeyDown: function() {},
        onMaxItemsSelected: function() {},
        onListShown: _.noop,
        onListHidden: _.noop,
        adjustAvailableSpaceAbove: _.identity,
        adjustAvailableSpaceBelow: _.identity,
        placeholder_text: TS.i18n.t("Choose an option…", "lazy_filter_select")(),
        filter_placeholder_text: TS.i18n.t("Search", "lazy_filter_select")(),
        renderDividerFunc: null,
        render_item_func: null,
        restrict_input_container_height: !1,
        restrict_preselected_item_removal: !1,
        scroll_threshold: 1e3,
        set_height: !0,
        should_graphic_replace_emoji: !1,
        single: !1,
        sluggify: {
          enabled: !1,
          delimiter: null,
          key_name: null,
          validator: null
        },
        style: TS.ui.lazy_filter_select.STYLES.default,
        template: function(e) {
          var t, n, i = e.toString();
          return (e instanceof jQuery || e instanceof HTMLElement) && (i = $(e).text(), t = J($(e).attr("data-additional-search-field"), this), n = J($(e).attr("data-ts-icon"), this)), i = J(i, this), t && (i += ' <span class="addl_text">' + t + "</span>"), n && (i += ' <ts-icon class="addl_icon ' + n + '"></ts-icon>'), new Handlebars.SafeString(i);
        },
        tokenClass: null,
        tokenTemplate: null,
        tokenTemplateSingle: null,
        use_data_attributes: !1,
        _$active: null,
        _all_done_fetching: !1,
        _list_built: !1,
        _list_visible: !1,
        _mouse: {},
        _page_number: 1,
        _prevent_blur: !1,
        _previous_val: "",
        _running_promise: null,
        _scroll_callback_was_called: !1,
        _selected: [],
        _showing_status: !1
      };
      $.widget("TS.lazyFilterSelect", {
        _create: function() {
          this.instance = TS.ui.lazy_filter_select.create(this.element, this.options);
        },
        _destroy: function() {
          this.instance.$container.remove(), delete this.instance;
        },
        blur: function() {
          this.instance.$filter_input.blur();
        },
        clearValue: function() {
          if (this.instance.single) {
            if (this.instance._selected.length) {
              var e = this.instance.$input_container.find(".lfs_item");
              I(this.instance, e);
            }
          } else M(this.instance);
        },
        container: function() {
          return this.instance.$container;
        },
        disable: function() {
          d(this.instance);
        },
        disabled: function() {
          return this.instance.disabled;
        },
        enable: function() {
          u(this.instance);
        },
        focus: function() {
          this.instance.$filter_input.focus();
        },
        getInstance: function() {
          return this.instance;
        },
        hideList: function() {
          g(this.instance, {
            force: !0
          }), ae(this.instance);
        },
        recomputeHeight: function() {
          V(this.instance);
        },
        setValue: function(e) {
          var t = this.element[0].selectedIndex;
          this.element.val(e), this.element[0].selectedIndex < 0 && (this.element[0].selectedIndex = 0);
          var n = this.element[0].options[this.element[0].selectedIndex];
          if (this.instance.single) {
            if (this.element[0].selectedIndex == t) return;
          } else M(this.instance);
          var i = f(this.instance, $(n));
          H(this.instance, i);
        },
        forceSelectItem: function(e) {
          this.instance.$lfs_value.html(a(this.instance, e, {
            force_selected: !0
          })), this.instance.$container.addClass("value");
        },
        showList: function() {
          N(this.instance);
        },
        update: function(e) {
          K(this.instance, e);
        },
        updatePlaceholder: function(e) {
          this.instance.placeholder_text = e, this.instance.$input.prop("placeholder", e);
        },
        updateFilterPlaceholder: function(e) {
          Z(this.instance) && (this.instance.filter_placeholder_text = e, this.instance.$filter_input.prop("placeholder", e));
        },
        value: function() {
          return this.instance._selected;
        }
      });
      var t = function(e, t) {
          if (S(e) && t.trim() && l(e)) {
            var i = {};
            i[e.sluggify.key_name] = t.trim(), i.lfs_id = null, i.lfs_slug_id = e._slug_id_counter, e._slug_id_counter += 1, e._selected.push(i);
            var r = TS.templates.lazy_filter_select_item({
                content: e.tokenTemplate(i),
                applied_classes: "lfs_token",
                slug_id: i.lfs_slug_id,
                data_qa: e.data_qa
              }).replace(/(\r\n|\n|\r)/gm, ""),
              a = $(r);
            a.insertBefore(e.$input), e.sluggify.validator && e.sluggify.validator(a), w(e, e.data), N(e), e.$filter_input.val(""), e._previous_val = "", n(e), e.onItemAdded(i), l(e) || e.onMaxItemsSelected();
          }
        },
        n = function(e) {
          e.single || (e.$input.prop("size", e.$filter_input.val().length + 1), e.$filter_input.val().length + e._selected.length === 0 ? U(e) : (e.$input_container.removeClass("empty"), e.$input_container.removeClass("error"), Q(e)));
        },
        i = function(e) {
          e.data_promise && e.$list.on("scroll", function() {
            var t = $(this).scrollTop(),
              n = e.$list.height(),
              i = e.$list.find(".list_items").height(),
              r = i - t - n;
            r <= e.scroll_threshold && !e._scroll_callback_was_called && !e._all_done_fetching ? (o(e, e._previous_val, e._page_number + 1), e._scroll_callback_was_called = !0) : r > e.scroll_threshold && e._scroll_callback_was_called && (B(e) && e._running_promise.cancel("User scrolled back and we do not need to add more data"), e._scroll_callback_was_called = !1);
          });
        },
        r = function(e) {
          e.$container.on("mouseleave", se.bind(null, e)), e.$container.on("click", oe.bind(null, e)), e.$container.parents("label").on("click", le.bind(null, e)), e.$input_container.on("focus", de.bind(null, e)), e.$input.on("focus", ce.bind(null, e));
          var t;
          t = _.isUndefined(e.input_debounce_wait_time) ? _e : _.debounce(_e, e.input_debounce_wait_time), e.$filter_input.on("input", t.bind(null, e)), e.$filter_input.on("keydown", ue.bind(null, e)), e.$filter_input.on("blur", me.bind(null, e)), e.$lfs_value.on("click", Se.bind(null, e)), e.$lfs_value.on("mousedown", Te.bind(null, e)), e.$input_container.on("click", ".lfs_token", be.bind(null, e)), e.$input_container.on("mousedown", ".lfs_token", ve.bind(null, e)), e.$list_container.on("mousedown", ye.bind(null, e)), e.$list_container.on("mouseup", we.bind(null, e)), e.$list_container.on("mousemove", ".lfs_item", ke.bind(null, e)), e.$list_container.on("mouseleave", ".lfs_item.active", xe.bind(null, e));
          var n = null === _.get(TSSSB, "env.desktop_app_version") ? "click" : "mousedown";
          e.$list_container.on(n, ".lfs_item", Me.bind(null, e)), e.onReady();
        },
        a = function(e, t, n) {
          var i = $(t);
          n = n || {};
          var r = n.force_selected || T(e, t),
            a = t.disabled || t.lfs_disabled;
          e.restrict_preselected_item_removal && t.preselected && (a = !0);
          var s;
          s = n.should_tokenize && _.isFunction(e.tokenTemplate) ? e.tokenTemplate(t) : e.single && _.isFunction(e.tokenTemplateSingle) ? e.tokenTemplateSingle(t) : e.template(t);
          var o = J(i.data("lfs-item-desc"), e),
            l = {
              active: "" !== e._previous_val && !r && !a,
              disabled: a,
              lfs_token: n.should_tokenize,
              selected: r,
              single: e.single,
              group_item: i.hasClass("group_item")
            };
          return _.isFunction(e.tokenClass) && (l[e.tokenClass(t)] = !0), TS.templates.lazy_filter_select_item({
            content: s,
            icon: i.data("lfs-item-icon"),
            desc: new Handlebars.SafeString(o),
            applied_classes: TS.utility.getAppliedClasses(l),
            lfs_id: t.lfs_id,
            data_qa: e.data_qa
          }).replace(/(\r\n|\n|\r)/gm, "");
        },
        s = function(e) {
          if (e._list_built || e._showing_status) {
            e.$list_container.removeClass("position_above");
            var t = e.$list.css("max-height");
            e.$list.css({
              "max-height": 0
            });
            var n = e.$list[0].scrollHeight,
              i = parseInt(e.$list_container.css("padding-top"), 10) + parseInt(e.$list_container.css("padding-bottom"), 10) + parseInt(e.$list_container.css("border-top-width"), 10) + parseInt(e.$list_container.css("border-bottom-width"), 10) + parseInt(e.$list_container.css("margin-top"), 10) + parseInt(e.$list_container.css("margin-bottom"), 10);
            Z(e) && (i += e.$filter_input.outerHeight() + parseInt(e.$filter_input.css("margin-bottom"), 10));
            var r = parseInt(e.$list_container.css("max-height"), 10),
              a = 2 * e.approx_item_height + i,
              s = Math.min(n + i, r),
              o = $(window).height(),
              l = e.$input_container[0].getBoundingClientRect().bottom + parseInt(e.$input_container.css("margin-bottom"), 10),
              d = e.adjustAvailableSpaceBelow(o - l);
            if (e.allow_list_position_above) {
              var c = e.$input_container[0].getBoundingClientRect().top + parseInt(e.$input_container.css("margin-top"), 10),
                _ = e.adjustAvailableSpaceAbove(c),
                u = _ >= s,
                m = d >= s && d > a;
              u && !m && (d = _, e.$list_container.addClass("position_above"));
            }
            var p = Math.floor(Math.min(d, s) - i);
            e.$list.css({
              "max-height": p || t
            });
          }
        },
        o = function(e, t, n) {
          B(e) && e._running_promise.cancel("Scrolling happened"), e._all_done_fetching || (e._running_promise = e.data_promise(t, n).then(function(t) {
            var n = t;
            if (n.items && (n = n.items), n && n.length) {
              e._page_number += 1, e._current_data || (e._current_data = e.data.slice()), void 0 !== t.all_items_fetched && (e._all_done_fetching = !!t.all_items_fetched), void 0 !== t.num_remaining && 0 === t.num_remaining && (e._all_done_fetching = !0);
              var i, r = parseInt(t.num_new, 10) || 0;
              i = n.slice(-r), i.length ? (t._replace_all_items || t.replace_all_items ? e._current_data = i : e._current_data = e._current_data.concat(i), c(e, e._current_data)) : e._all_done_fetching = !0;
            } else e._all_done_fetching = !0;
          }, function(t) {
            te(e, t, "Something failed while trying to return the next batch of data for lazyFilterSelect.");
          }));
        },
        l = function(e) {
          return e._selected.length < e.max_selected_items;
        },
        d = function(e) {
          e.disabled || (e.disabled = !0, e.$container.addClass("disabled"), e.$input.prop("disabled", !0), e.$filter_input.prop("disabled", !0));
        },
        c = function(e, t) {
          x(e, t), w(e, t), e._list_built && (!e.data || 0 === e.data.length || e.always_visible) && N(e, !0), n(e);
        },
        u = function(e) {
          e.disabled && (e.disabled = !1, e.$container.removeClass("disabled"), e.$input.prop("disabled", !1), e.$filter_input.prop("disabled", !1));
        },
        m = function(e, t) {
          for (var n = e.data, i = [], r = 0; r < n.length; r += 1) {
            var a = n[r];
            if (a.lfs_group || a.is_divider) {
              for (var s = [], o = 0; o < a.children.length; o += 1) {
                var l = a.children[o];
                e.filter(l, t) && s.push(l);
              }
              s.length > 0 && i.push({
                is_divider: !0,
                lfs_group: !0,
                label: a.label,
                children: s
              });
            } else e.filter(a, t) && i.push(a);
          }
          return i;
        },
        p = function(e) {
          return e.attr("data-lfs-id") || e.prop("lfs_id") || null;
        },
        f = function(e, t, n) {
          var i, r = p(t);
          if (n) i = e._selected;
          else if (i = e.data_promise && e._current_data ? e._current_data : e.data, -1 !== r.indexOf(".")) {
            var a = parseInt(r.split(".")[0], 10);
            i = i[a] ? i[a].children : i[0].children;
          }
          var s = i.filter(function(e) {
            return e.lfs_id === r;
          });
          return s.length ? s[0] : null;
        },
        h = function(e, t) {
          var n = parseInt(t.attr("data-lfs-slug-id"), 10),
            i = e._selected,
            r = i.filter(function(e) {
              return e.lfs_slug_id === n;
            });
          return r.length ? r[0] : null;
        },
        g = function(e, t) {
          t = t || {}, (!e._list_visible || e.always_visible || e.disabled) && !t.force || (e._list_visible = !1, e.$list_container.removeClass("visible"), e.$container.removeClass("list_visible"), e.$input_container.removeClass("active"), e._list_built && e.$list.longListView("setHidden", !0), e._$active = null, e.onListHidden());
        },
        S = function(e) {
          return !!e.sluggify.enabled && (e.sluggify.delimiter ? e.sluggify.key_name ? !e.single || (TS.error("Sluggify only works in multi-select versions of lazyFilterSelect."), !1) : (TS.error("You must pass a key name to use sluggify with lazyFilterSelect."), !1) : (TS.error("You must pass a delimiter regular expression to use sluggify with lazyFilterSelect."), !1));
        },
        T = function(e, t) {
          return !!e._selected.length && !!e._selected.filter(function(e) {
            return e.lfs_id === t.lfs_id;
          }).length;
        },
        b = function(e) {
          return e instanceof jQuery ? !!e.attr("data-lfs-slug-id") : void 0 !== e.lfs_slug_id;
        },
        v = function(e, t, i) {
          if (S(e) && b(t)) {
            var r = $(t),
              a = J(r.data("lfs-item-desc"), e);
            e._slug_id_counter = Math.max(t.lfs_slug_id, e._slug_id_counter) + 1, e._selected.push(t);
            var s, o = TS.templates.lazy_filter_select_item({
              content: e.tokenTemplate(t),
              icon: r.data("lfs-item-icon"),
              desc: new Handlebars.SafeString(a),
              applied_classes: "lfs_token",
              slug_id: t.lfs_slug_id,
              data_qa: e.data_qa
            }).replace(/(\r\n|\n|\r)/gm, "");
            return s = $(o), s.insertBefore(e.$input), n(e), e.sluggify.validator && e.sluggify.validator(s), e.data = i.filter(function(e) {
              return e.lfs_slug_id !== t.lfs_slug_id;
            }), e.data;
          }
        },
        y = function(e) {
          var t = e.children("option, optgroup"),
            n = t.length > 0 ? [] : void 0;
          return t.each(function() {
            if ("OPTGROUP" === $(this).prop("tagName")) {
              var e = $(this).children("option").toArray();
              $(this).prop("disabled") && (e = e.map(function(e) {
                return e.lfs_disabled = !0, e;
              })), n.push({
                is_divider: !0,
                lfs_group: !0,
                label: $(this).prop("label"),
                children: e
              });
            } else n.push(this);
          }), n;
        },
        w = function(e, t) {
          if (t || (t = e.data), !t) return void te(e);
          if (0 === t.length) return void ne(e);
          if (ae(e, {
              keep_input_active: !0
            }), e._list_built) {
            var n = k(t);
            e.$list.longListView("setItems", n, !0), e._current_data = t, V(e);
          } else e.data && 0 !== e.data.length || (e.data = t), G(e);
          s(e);
        },
        k = function(e) {
          var t = [];
          return e.forEach(function(e) {
            if (t.push(e), e.children && e.children.length)
              for (var n = 0; n < e.children.length; n += 1) t.push(e.children[n]);
          }), t;
        },
        x = function(e, t) {
          if (t || (t = e.data), t) {
            for (var n = "", i = !e.single, r = 0; r < t.length;) {
              var s = t[r];
              if (b(s)) t = v(e, s, t);
              else {
                if (s.children && s.children.length && (s.lfs_group = !0), s.lfs_group || s.is_divider) {
                  s.is_divider = !0;
                  for (var o = r, l = 0; l < s.children.length; l += 1) {
                    var d = s.children[l];
                    if (d.lfs_id = d.lfs_id || o + "." + l, (d.selected || d.preselected) && !1 === e.no_default_selection) {
                      if (e.single && e._selected.length > 0 || T(e, d)) continue;
                      e._selected.push(d), n += a(e, d, {
                        should_tokenize: i
                      });
                    }
                  }
                } else if (s.lfs_id = s.lfs_id || String(r), (s.selected || s.preselected) && !1 === e.no_default_selection) {
                  if (e.single && e._selected.length > 0 || T(e, s)) {
                    r += 1;
                    continue;
                  }
                  e._selected.push(s), n += a(e, s, {
                    should_tokenize: i
                  });
                }
                r += 1;
              }
            }
            n.length > 0 && (e.$container.addClass("value"), e.single ? e.$lfs_value.html(n) : ($(n).insertBefore(e.$input), e.$input_container.removeClass("empty"), e.$input_container.removeClass("error"), Q(e)));
          }
        },
        M = function(e) {
          for (; e.$input_container.find(".lfs_token").length > 0;) C(e);
        },
        C = function(e) {
          var t = e.$input_container.find(".lfs_token").last();
          t.length && I(e, t);
        },
        I = function(e, t) {
          if (!e.disabled) {
            if (b(t)) return void A(e, t);
            var n = f(e, t, !0);
            if (!(n.disabled || e.restrict_preselected_item_removal && n.preselected)) {
              e._selected = e._selected.filter(function(e) {
                return e !== n;
              });
              e.$list.find('[data-lfs-id="' + n.lfs_id + '"]').removeClass("selected"), t.remove(), Y(e), e.$filter_input.val().length + e._selected.length === 0 && U(e), 0 === e._selected.length && e.$container.removeClass("value"), e.onItemRemoved(n);
            }
          }
        },
        A = function(e, t) {
          if (S(e)) {
            var n = h(e, t);
            e._selected = e._selected.filter(function(e) {
              return e !== n;
            }), t.remove(), Y(e), e.$filter_input.val().length + e._selected.length === 0 && U(e), e.onItemRemoved(n);
          }
        },
        E = function() {
          this.data && 0 === this.data.length && TS.warn("Data passed to lazyFilterSelect is empty."), K(this, this.data), this.always_visible && N(this), this.restrict_input_container_height && (this.$container.addClass("has_restricted_input_container_height"), TS.environment.supports_custom_scrollbar || this.$input_container.monkeyScroll());
        },
        O = function(e, t, i) {
          if (!e.disabled && t !== e._previous_val)
            if (e._all_done_fetching = !1, e._previous_val = t, e._$active = null, n(e), e._page_number = 1, e._list_built && e.$list.longListView("scrollToTop", !0), e.data_promise) B(e) && e._running_promise.cancel("User entered more text"), e._running_promise = F(e, t).then(function(t) {
              c(e, t), N(e, i);
            }, function(t) {
              te(e, t, "Something failed while trying to return the filtered data for lazyFilterSelect.");
            });
            else {
              N(e, i);
              var r = m(e, t);
              w(e, r), n(e);
            }
        },
        F = function(e, t) {
          return new Promise(function(n, i) {
            t.length < e.min_query_length ? (e._all_done_fetching = !0, n([])) : (_.delay(function() {
              B(e) && ie(e);
            }, 650), e.data_promise(t).then(function(t) {
              t = t || {}, _.isUndefined(t.all_items_fetched) || (e._all_done_fetching = !!t.all_items_fetched), 0 === t.num_remaining && (e._all_done_fetching = !0);
              var i = (t.items || t).slice();
              n(i), ae(e, {
                keep_input_active: !0
              });
            }, function(t) {
              i(t), ae(e);
            }));
          });
        },
        B = function(e) {
          return e._running_promise && e._running_promise.isPending();
        },
        D = function(e, t) {
          if (!e.disabled) {
            if (!e._list_visible) return void N(e);
            var n;
            n = e._$active ? e._$active[t](".lfs_item:not(.disabled, .hidden)").first() : e.$list.find(".lfs_item:not(.disabled, .hidden)").first(), n.length && (n.scrollintoview({
              duration: 0
            }), e._$active && e._$active.removeClass("active"), n.addClass("active"), e._$active = n);
          }
        },
        R = function(e) {
          return !(e.hasClass("selected") || e.hasClass("disabled"));
        },
        H = function(e, t) {
          if (l(e)) {
            if (e.single && e._selected.length) {
              e.$list.find('[data-lfs-id="' + e._selected[0].lfs_id + '"]').removeClass("selected"), e._selected.length = 0, e.$lfs_value.empty();
            }
            e._selected.push(t), Y(e);
            var n = $(a(e, t, {
              should_tokenize: !e.single
            }));
            _.isFunction(e.tokenClass) && n.addClass(e.tokenClass(t)), e.single ? e.$lfs_value.html(n) : (n.addClass("lfs_token"), n.insertBefore(e.$input)), e.single || (e.$input_container.removeClass("empty"), e.$input_container.removeClass("error"), Q(e)), e.$container.addClass("value"), e.onItemAdded(t), l(e) || e.onMaxItemsSelected(), e.single || e.$filter_input.focus();
          }
        },
        P = function(e) {
          return D(e, "nextAll");
        },
        j = function(e) {
          if (!e.disabled) {
            var t = e._$active;
            if (t.length && R(t) && l(e)) {
              t.addClass("selected"), t.removeClass("active"), e._$active = null;
              var n = f(e, t);
              H(e, n);
            }
          }
        },
        L = function(e) {
          return D(e, "prevAll");
        },
        U = function(e) {
          e.$input_container.addClass("empty"), X(e);
        },
        N = function(e, t) {
          e.disabled || (TS.utility.rAF(function() {
            e.$filter_input.focus();
          }), e._list_visible || e._showing_status && e.always_visible || (e._list_built || G(e), (e._list_built || e._showing_status) && (e._list_visible = !0, e.$list_container.addClass("visible"), e.$container.addClass("list_visible"), Z(e) || e.$input_container.addClass("active"), e._list_built && e.$list.longListView("setHidden", !1)), e.single && !t && (e.$filter_input.val(""), e._previous_val = "", e.$filter_input.focus(), ee(e) && (e.data = []), w(e)), e.set_height && (s(e), e.monkey_scroll && !TS.environment.supports_custom_scrollbar && e.$list.monkeyScroll()), e.onListShown()));
        },
        G = function(e) {
          if (e.data && 0 !== e.data.length) {
            var t = k(e.data);
            e._list_built = !0;
            var n = {
              items: t,
              approx_item_height: e.approx_item_height,
              approx_divider_height: e.approx_divider_height,
              preserve_dom_order: !0,
              calcDividerHeight: function(e) {
                return e.outerHeight();
              },
              makeDivider: function() {
                return $('<div class="lfs_group"></div>');
              },
              makeElement: function() {
                return $(TS.templates.lazy_filter_select_item().replace(/(\r\n|\n|\r)/gm, ""));
              },
              renderDivider: function(t, n, i) {
                if (e.renderDividerFunc) return e.renderDividerFunc(t, n, i);
                t.html(J(n.label, e));
              },
              renderItem: function(t, n, i) {
                if (e.render_item_func) return e.render_item_func(t, n, i);
                var r = $(n),
                  a = {
                    disabled: n.disabled || n.lfs_disabled,
                    selected: T(e, n),
                    single: e.single,
                    group_item: r.hasClass("group_item")
                  };
                _.isFunction(e.listItemClass) && (a[e.listItemClass(n)] = !0);
                var s = TS.utility.getAppliedClasses(a),
                  o = {
                    "data-qa": e.data_qa + "-item-" + n.lfs_id,
                    "data-lfs-id": n.lfs_id,
                    title: n.title
                  };
                if (t.attr(o).removeClass("active selected disabled single group_item lfs_token").addClass(s).html(e.template(n).string), r.data("lfs-item-icon")) {
                  var l = "url(" + r.data("lfs-item-icon") + ")",
                    d = $('<span class="lfs_item_icon">').css("background-image", l);
                  t.prepend(d);
                }
                if (r.data("lfs-item-desc")) {
                  var c = J(r.data("lfs-item-desc"), e),
                    u = $('<span class="lfs_item_desc">').html(c);
                  t.append(u);
                }
              }
            };
            e.$list.longListView(n), i(e), e.$list_items = e.$container.find(".list_items"), TS.utility.rAF(function() {
              e.monkey_scroll && !TS.environment.supports_custom_scrollbar && e.$list.monkeyScroll(), e.$list.longListView("resizeImmediately"), TS.utility.rAF(function() {
                e.current_items_in_view_signal.dispatch(e.$list.longListView("getCurrentItemsInView") || []);
              });
            }), e.$list.longListView("getCurrentItemsInViewSignal") && e.$list.longListView("getCurrentItemsInViewSignal").add(function(t) {
              e.current_items_in_view_signal.dispatch(t);
            });
          }
        },
        W = function(e) {
          e.stopPropagation(), e.preventDefault();
        },
        q = function(e, t) {
          if (!e.single && e.allow_item_unselect) {
            var n = f(e, t, !0);
            t.removeClass("selected"), e._selected = e._selected.filter(function(e) {
              return e !== n;
            }), e.$input_container.find('.lfs_item[data-lfs-id="' + n.lfs_id + '"]').remove(), Y(e), e.$filter_input.val().length + e._selected.length === 0 && U(e), 0 === e._selected.length && e.$container.removeClass("value"), e.onItemRemoved(n);
          }
        },
        z = function(e, t) {
          if (S(e) && b(t)) {
            var i = t.text().trim();
            t.length && A(e, t), e.$filter_input.val(i), n(e), e.$filter_input.select();
          }
        },
        K = function(e, t) {
          if (e.data = t || y(e.$select), e.data && (e._selected = [], x(e), e.$filter_input.val().length)) {
            var n = e.$filter_input.val();
            e._previous_val = "", O(e, n);
          }
        },
        V = function(e) {
          e.restrict_input_container_height && TS.ui.utility.updateClosestMonkeyScroller(e.$input_container, !0), e.monkey_scroll && !TS.environment.supports_custom_scrollbar && (s(e), TS.utility.rAF(function() {
            TS.ui.utility.updateClosestMonkeyScroller(e.$list, !0);
          }));
        },
        Y = function(e) {
          if (!e.append) {
            var t = e._selected.filter(function(e) {
              return e instanceof HTMLOptionElement;
            }).map(function(e) {
              return $(e).val();
            });
            e.$select.val(t).trigger("change");
          }
        },
        J = function(e, t) {
          return e = _.escape(e), _.get(t, "should_graphic_replace_emoji") && (e = TS.emoji.graphicReplace(e)), e;
        },
        Q = function(e) {
          e.$input.attr("placeholder", ""), Z(e) && e.$filter_input.attr("placeholder", "");
        },
        X = function(e) {
          e.$input.attr("placeholder", e.placeholder_text), Z(e) && e.$filter_input.attr("placeholder", e.filter_placeholder_text);
        },
        Z = function(e) {
          return e.style === TS.ui.lazy_filter_select.STYLES.filter_in_list;
        },
        ee = function(e) {
          return _.isFunction(e.data_promise) && e.min_query_length;
        },
        te = function(e, t, n) {
          re(e, e.errorTemplate(t), {
            internal_error_message: n,
            clear_active_items: !0
          });
        },
        ne = function(e) {
          var t = e.noResultsTemplate(e.$filter_input.val());
          re(e, t, {
            clear_active_items: !0
          });
        },
        ie = function(e) {
          var t = TS.i18n.t("Loading results…", "lazy_filter_select")();
          re(e, t, {
            show_loading_indicator: !0
          });
        },
        re = function(e, t, n) {
          n = n || {}, e._showing_status = !0, n.internal_error_message && TS.error(n.internal_error_message), Z(e) || e.$input_container.addClass("active"), n.show_loading_indicator && e.$status_loading_indicator.removeClass("hidden"), n.clear_active_items && (e._$active = null), e.$status_content.html(t), e.$list_container.addClass("show_status");
        },
        ae = function(e, t) {
          t = t || {}, e._showing_status = !1, t.keep_input_active || e.$input_container.removeClass("active"), e.$status_loading_indicator.addClass("hidden"), e.$list_container.removeClass("show_status");
        },
        se = function(e) {
          e._prevent_blur = !1;
        },
        oe = function(e) {
          e.disabled || N(e);
        },
        le = function(e, t) {
          e.disabled || (t.preventDefault(), N(e));
        },
        de = function(e) {
          e.$input_container.click(), e.$input.focus();
        },
        ce = function(e) {
          e._input_is_focused || (e._input_is_focused = !0, e.$input_container.click(), e.onInputFocus()), e.single || e.$input_container.addClass("active");
        },
        _e = function(e) {
          var n = e.$filter_input.val();
          if (S(e) && n.match(e.sluggify.delimiter)) {
            n.split(e.sluggify.delimiter).forEach(function(n) {
              n.length && t(e, n);
            });
          } else O(e, n, !0);
        },
        ue = function(e, t) {
          if (!e.disabled) {
            switch (t.keyCode) {
              case TS.utility.keymap.down:
                W(t), P(e);
                break;
              case TS.utility.keymap.up:
                W(t), L(e);
                break;
              case TS.utility.keymap.enter:
                pe(e, t);
                break;
              case TS.utility.keymap.del:
                fe(e, t);
                break;
              case TS.utility.keymap.tab:
                he(e, t);
                break;
              case TS.utility.keymap.esc:
                ge(e, t);
            }
            e.onKeyDown(t, t.isDefaultPrevented());
          }
        },
        me = function(e) {
          e._prevent_blur || (g(e), ae(e)), e.$filter_input.val().trim() && S(e) && t(e, e.$filter_input.val()), e._input_is_focused = !1, e.onInputBlur();
        },
        pe = function(e, t) {
          if (e._$active && e._$active.length && e._list_visible) {
            W(t);
            var n = e._$active;
            if (!e.single && e.allow_item_unselect && T(e, f(e, n))) q(e, n);
            else {
              if (!l(e)) return;
              j(e);
              var i = $(t.currentTarget);
              "" !== i.val() && (i.val(""), e._previous_val = "", w(e)), e.single && (g(e), ae(e));
            }
          }
        },
        fe = function(e, t) {
          if ("" === e.$filter_input.val()) {
            W(t);
            var n = e.$input_container.find(".lfs_token").last();
            S(e) && b(n) ? z(e, n) : C(e);
          }
        },
        he = function(e, n) {
          e.$filter_input.val().trim() && S(e) ? (W(n), t(e, e.$filter_input.val())) : e.tab_to_nav && (W(n), n.shiftKey ? L(e) : P(e));
        },
        ge = function(e, t) {
          W(t), g(e), ae(e), e.$filter_input.blur();
        },
        Se = function(e, t) {
          e.disabled || (t.stopPropagation(), N(e), e._prevent_blur = !1);
        },
        Te = function(e, t) {
          1 === t.which && (e._prevent_blur = !0);
        },
        be = function(e, t) {
          e.disabled || (I(e, $(t.currentTarget)), e._prevent_blur = !1);
        },
        ve = function(e, t) {
          1 === t.which && (e._prevent_blur = !0);
        },
        ye = function(e, t) {
          1 === t.which && (e._prevent_blur = !0);
        },
        we = function(e) {
          e._prevent_blur && e.$filter_input.focus();
        },
        ke = function(e, t) {
          if (!e.disabled && (t.clientX != e._mouse.lastX || t.clientY != e._mouse.lastY)) {
            var n = $(t.currentTarget);
            e._$active && e._$active.removeClass("active"), !n.hasClass("active") && R(n) && (n.addClass("active"), e._$active = n), e._mouse.lastX = t.clientX, e._mouse.lastY = t.clientY;
          }
        },
        xe = function(e, t) {
          $(t.currentTarget).removeClass("active"), e._$active = null;
        },
        Me = function(e, t) {
          if (!e.disabled) {
            t.preventDefault();
            var n = $(t.currentTarget);
            e._$active = n;
            if (!e.single && e.allow_item_unselect && T(e, f(e, n))) q(e, n);
            else {
              var i = R(n);
              if (!i && !e.single) return;
              if (!l(e)) return;
              if (!i && e.single) return g(e), void t.stopPropagation();
              j(e), "" !== e.$filter_input.val() && (e.$filter_input.val(""), e._previous_val = "", w(e)), e.single && (g(e), t.stopPropagation());
            }
            e._prevent_blur = !1;
          }
        };
    }();
  },
  2624: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.leave_team_dialog", {
        team_id: null,
        ladda: null,
        list: null,
        start: function(t, n) {
          TS.ui.leave_team_dialog.team_id = t, TS.ui.leave_team_dialog.list = n;
          var r = TS.enterprise.getTeamById(TS.ui.leave_team_dialog.team_id),
            a = {
              team: r
            },
            s = {
              title: TS.i18n.t("Leave Team", "enterprise_workspaces")(),
              body_template_html: TS.templates.leave_workspace_dialog(a),
              onShow: e,
              onCancel: i,
              modal_class: "leave_team_modal"
            };
          TS.ui.fs_modal.start(s);
        }
      });
      var e = function() {
          $(".leave_team_modal .leave_team_modal_contents").find(".buttons").on("click", "button", function() {
            var e = $(this).data("qa");
            if ("cancel_leave_team" === e) TS.ui.fs_modal.close();
            else if ("confirm_leave_team" === e) {
              var i = Ladda.create(this);
              i.start();
              var r = {
                team: TS.ui.leave_team_dialog.team_id
              };
              TS.model.enterprise_api_token && (r.enterprise_token = TS.model.enterprise_api_token), TS.api.call("enterprise.teams.leave", r, function(e, i, r) {
                var a = TS.enterprise.getTeamById(r.team),
                  s = emoji.replace_colons(":sparkles:");
                if (s += TS.i18n.t(" You’ve successfully left <strong>{team_name}</strong>", "enterprise_workspaces")({
                    team_name: _.escape(a.name)
                  }), e) t(r.team), n("success", s), TS.ui.fs_modal.close();
                else {
                  var o;
                  "disable_denied_due_to_idpgroup_membership" === i.error ? (o = TS.i18n.t('You can’t leave this team.<br>Because you’re in an IdP group assigned to this team, you can’t leave it here. <a href="mailto:{primary_owner_email}" target="_blank">Contact an Org Admin</a> for help leaving the team.', "enterprise_workspaces")({
                    primary_owner_email: TS.model.enterprise.primary_owner.email
                  }), n("error", o)) : "user_deleted_already" === i.error ? (t(r.team), n("success", s), TS.ui.fs_modal.close()) : "failed_to_convert_org_user_to_team_user" === i.error ? (t(r.team), n("success", s), TS.ui.fs_modal.close()) : (o = TS.i18n.t('Leaving team failed with error "{error}"', "enterprise_workspaces")({
                    error: i.error
                  }), n("error", o));
                }
              });
              var a, s;
              "teams_on" === TS.ui.leave_team_dialog.list ? (a = "your_workspaces", s = "your_workspaces_list") : (a = "find_workspaces", s = "workspaces_you_can_join_list"), TS.enterprise.workspaces.recordTeamLeaveConfirm(TS.ui.leave_team_dialog.team_id, a, s);
            }
          });
        },
        t = function(e) {
          var t = _.merge({}, TS.model.user);
          t.enterprise_user.teams = t.enterprise_user.teams.filter(function(t) {
            return t !== e;
          }), "web" === TS.boot_data.app ? TS.model.user = t : TS.members.upsertMember(t);
          var n = TS.enterprise.getTeamById(e),
            i = $('[data-id="' + e + '"]');
          n.is_unlisted ? i.remove() : i.html(TS.enterprise.workspaces.getTeamCardHTML(n));
          var r = $('.workspace_info[data-team-id="' + e + '"]');
          if (r.length) {
            var a = $(".workspaces").attr("data-list");
            r.html(TS.templates.team_info({
              list: a,
              team: n,
              user: TS.model.user
            }));
          }
        },
        n = function(e, t) {
          TS.ui.toast.show({
            type: e,
            message: t
          });
        },
        i = function() {};
    }();
  },
  2627: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.messages", {
        onStart: function() {
          var e = $("body");
          e.on("click.msg_action", "ts-message", function(e) {
            TS.client && TS.client.ui.checkForEditing(e) || t(e);
          }), e.delegate("ts-message.dirty_hover_container", "mouseenter", function(e) {
            TS.ui.messages.updateMessageHoverContainer($(e.currentTarget));
          });
        },
        maybeUpdateMessageHoverContainer: function(e) {
          e.length && (e.is(":visible") ? TS.ui.messages.updateMessageHoverContainer(e) : e.addClass("dirty_hover_container"));
        },
        updateMessageHoverContainer: function(t) {
          t.removeClass("dirty_hover_container");
          var n = t.data("model-ob-id"),
            i = n ? TS.shared.getModelObById(n) : TS.shared.getActiveModelOb();
          if (i) {
            var r = t.attr("data-ts"),
              a = TS.utility.msgs.getMsg(r, i.msgs);
            if (!a && i._archive_msgs && (a = TS.utility.msgs.getMsg(r, i._archive_msgs)), !a && TS.model.unread_view_is_showing && (a = TS.client.unread.getMessage(i, r)), a || (a = TS.ui.replies.getActiveMessage(i, r)), a || (a = TS.client.threads.getMessage(i, r)), !a) return void TS.error(r + " not found in " + n);
            var s, o = TS.rxns.getRxnKeyByMsgType(a),
              l = t.find("[data-js=action_hover_container]"),
              d = TS.boot_data.feature_thanks && TS.rxns.getHandyRxnsDisplayDataByRxnKey(o),
              c = !d.is_poll && (e || t.hasClass("just_added_handy_rxn_from_actions"));
            if (d)
              if (c) {
                var u = TS.rxns.getExistingRxnsByKey(o);
                s = _.cloneDeep(d);
                for (var m in s.items) TS.rxns.doesRxnsHaveSkinlessRxn(u, m) && delete s.items[m];
                t.hasClass("just_added_handy_rxn_from_actions") && t.bind("mouseout.handy_rxns", function() {
                  e || t.addClass("dirty_hover_container"), t.removeClass("just_added_handy_rxn_from_actions"), t.unbind("mouseout.handy_rxns");
                });
              } else TS.rxns.getExistingRxnsByKey(o) || d.is_poll || (s = d);
            var p = t.closest("ts-conversation").length > 0,
              f = t.closest("#threads_msgs").length > 0,
              h = TS.boot_data.feature_sli_briefing && t.closest("#sli_briefing").length > 0,
              g = p || f,
              S = !a.thread_ts || a.thread_ts === a.ts,
              T = "tombstone" === a.subtype && i.is_channel && !i.is_member;
            l.html(TS.templates.action_hover_items({
              msg: a,
              actions: TS.utility.msgs.getMsgActions(a, i),
              ts_tip_delay_class: "ts_tip_delay_60",
              handy_rxns: s,
              is_in_threads_view: f,
              is_in_thread: g,
              is_root_msg: S,
              is_briefing_msg: h,
              hide_actions_menu: T,
              show_rxn_action: !(!l.data("show_rxn_action") || d && d.restrict),
              show_reply_action: !!l.data("show_reply_action"),
              show_comment_action: !!l.data("show_comment_action"),
              abs_permalink: l.data("abs_permalink")
            })), l.toggleClass("narrow_buttons", l.children().length > 3);
          }
        }
      });
      var e = !1,
        t = function(e) {
          if (TS.isPartiallyBooted()) return TS.incremental_boot.userDidInteractWithUI(), void e.preventDefault();
          var t = $(e.target),
            n = t.closest("[data-action]");
          if (n.length) {
            var i = t.closest("ts-message"),
              r = i.data("model-ob-id"),
              a = r ? TS.shared.getModelObById(r) : TS.shared.getActiveModelOb(),
              s = i.attr("data-ts"),
              o = TS.utility.msgs.getMsg(s, a.msgs),
              l = n.data("action"),
              d = !1;
            if (o || (o = TS.utility.msgs.getMsg(s, a._archive_msgs)) && (d = !0), o || (o = TS.ui.replies.getActiveMessage(a, s)), !o && TS.model.threads_view_is_showing && (o = TS.client.threads.getMessage(a, s)), !o && TS.model.unread_view_is_showing && (o = TS.client.unread.getMessage({
                id: r
              }, s))) {
              var c = TS.client.unread.getGroup(r);
              if (c) a = c.model_ob;
              else if (TS.highlights_briefing) {
                var _ = TS.highlights_briefing.getMessageFromCache(r, s);
                _ && (a = TS.shared.getModelObById(_.channel_id));
              }
            }
            if (!o) return void TS.error("WTF no message to click?");
            var u, m = TS.rxns.getRxnKeyByMsgType(o);
            switch (l) {
              case "actions_menu":
                d ? TS.menu.startWithMessageActions(e, i.data("ts"), a._archive_msgs, a) : TS.menu.startWithMessageActions(e, i.data("ts"), a.msgs, a), TS.clog.track("PFP_ACTION", {
                  contexts: {
                    growth: {
                      action: "click",
                      trigger: "message_action_actions_menu_button"
                    }
                  }
                });
                break;
              case "reaction":
                TS.model.unread_view_is_showing && TS.client.unread.shouldRecordMetrics() && TS.metrics.count("unread_view_emoji_reaction"), TS.ui.react_emoji_menu.start({
                  e: e,
                  rxn_key: m
                }), TS.clog.track("PFP_ACTION", {
                  contexts: {
                    growth: {
                      action: "click",
                      trigger: "message_action_reaction_button"
                    }
                  }
                });
                break;
              case "pin":
                TS.pins.startPinMessage(s, a);
                break;
              case "unpin":
                TS.pins.unPinMessage(s, a);
                break;
              case "edit":
                TS.msg_edit.startEdit(s, a);
                break;
              case "delete":
                TS.msg_edit.startDelete(s, a);
                break;
              case "mark_unread":
                TS.info("_msgActionHandler: setting unread point on " + a.id + ", ts = " + s + " (mark_unread)"), TS.client.msg_pane.setUnreadPoint(s);
                break;
              case "reply":
                i.length && (TS.model.unread_view_is_showing && TS.client.unread.shouldRecordMetrics() && TS.metrics.count("unread_view_reply"), u = o.thread_ts || o.ts, TS.boot_data.feature_message_replies_inline ? TS.ui.thread.startInlineThread(a, o, i) : TS.ui.replies.openConversationFromMessagePane(i, a, u)), TS.clog.track("PFP_ACTION", {
                  contexts: {
                    growth: {
                      action: "click",
                      trigger: "message_action_reply_button"
                    }
                  }
                });
                break;
              case "open_in_channel":
                if (TS.web) {
                  var p = TS.utility.msgs.constructMsgPermalink(a, s);
                  window.location = p;
                } else TS.client && (TS.model.threads_view_is_showing && TS.client.ui.threads.trackThreadsViewClosed("OPEN_IN_CHANNEL"), u = o.thread_ts || o.ts, TS.client.ui.tryToJump(a.id, u));
                break;
              case "open_in_channel_from_briefing":
                TS.boot_data.feature_sli_briefing && TS.highlights_briefing && TS.highlights_briefing.jumpToMessageInChannel(a.id, o.thread_ts || o.ts);
                break;
              case "open_conversation":
                break;
              case "copy_link":
                var f = TS.i18n.t("Copied!", "messages_action_items")();
                TS.tips.updateFloater({
                  title: f,
                  classes_to_add: ["success"]
                }), TS.clipboard.writeText(n.data("permalink"));
                break;
              case "comment":
                if (TS.client) {
                  e.preventDefault();
                  var h = TS.boot_data.feature_file_threads ? "file_share_msg" : "",
                    g = TS.boot_data.feature_file_threads ? r : null;
                  TS.client.ui.files.previewFile(o.file.id, h, !1, !0, g);
                }
                break;
              case "share_message":
                TS.model.unread_view_is_showing && TS.client.unread.shouldRecordMetrics() && TS.metrics.count("unread_view_share_message"), TS.ui.share_message_dialog.start(o.ts, a), TS.clog.track("PFP_ACTION", {
                  contexts: {
                    growth: {
                      action: "click",
                      trigger: "message_action_share_button"
                    }
                  }
                });
                break;
              case "add_handy_rxn":
                var S = n.data("name"),
                  T = !TS.rxns.doesRxnsHaveRxnFromUser(TS.rxns.getExistingRxnsByKey(m), S);
                T && i.addClass("just_added_handy_rxn_from_actions"), TS.rxns.changeRxnsFromUserAction(m, S, T);
                break;
              case "share_file":
                var b = o.file;
                if (!b) return;
                TS.client ? TS.view.files.shareInCurrentChannelOrIM(b.id, r) : TS.ui.share_dialog.start(b.id);
                break;
              default:
                TS.error("WTF no action?");
            }
          }
        };
    }();
  },
  2631: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.new_channel_modal", {
        start: function(t, n, i) {
          if (TS.permissions.members.canCreateChannels() || TS.permissions.members.canCreateGroups()) return TS.ui.fs_modal.start({
            body_template_html: '<div id="new_channel_modal_container"></div>',
            onShow: T,
            onEnd: b
          }), e = $("#new_channel_modal_container"), TS.ui.new_channel_modal.startInContainer(e, t, n, i);
        },
        startInContainer: function(r, a, s, o) {
          if (TS.permissions.members.canCreateChannels() || TS.permissions.members.canCreateGroups()) {
            e = r, n = !1 !== s, TS.permissions.members.canCreateChannels() || (n = !1), TS.permissions.members.canCreateGroups() || (n = !0);
            var l = TS.permissions.members.canCreateChannels() && TS.permissions.members.canCreateGroups();
            return a = TS.utility.cleanChannelName(a || ""), o = o || [], e.html(TS.templates.channel_new_modal({
              title: a,
              is_public: n,
              can_toggle_private: l,
              compliance_exports_enabled_for_team: !!TS.model.team.prefs.compliance_export_start,
              is_ra: TS.model.user.is_restricted,
              can_create_shared_channel: TS.permissions.members.canCreateSharedChannel()
            })), t = Ladda.create(e.find(".new_channel_go")[0]), u(o), setTimeout(function() {
              g();
            }, 500), new Promise(function(e, t) {
              i = {
                resolve: e,
                reject: t
              };
            });
          }
        },
        go: function() {
          var i = e.find(".title_input").val(),
            r = $("#invite_members_container").lazyFilterSelect("value"),
            a = [],
            s = [];
          r && r.forEach(function(e) {
            e.member ? a.push(e.member.id) : s.push(e);
          });
          var o = _.trim(TS.utility.contenteditable.value(e.find("#channel_purpose_input")));
          TS.boot_data.feature_name_tagging_client && (o = TS.format.cleanMsg(o)), t && t.start(), n ? m(i, o, a, s) : p(i, o, a, s);
        },
        end: function() {
          v();
        },
        test: function() {
          return {
            createPublicChannel: m,
            createPrivateChannel: p,
            showNameTakenAlert: h
          };
        }
      });
      var e, t, n, i, r = function() {
          var t = e.find("#invite_members_container").find("input")[0],
            n = e.find("#channel_purpose_input");
          e.on("keydown", function(e) {
            e.which !== TS.utility.keymap.enter || document.activeElement == t || TS.utility.contenteditable.hasFocus(n) ? e.which === TS.utility.keymap.esc && (TS.ui.fs_modal.close(), e.preventDefault()) : (TS.ui.new_channel_modal.go(), e.preventDefault());
          });
        },
        a = function() {
          var t = $("#channel_public_private_toggle");
          t.togglify(), t.bind("change", function() {
            n = t.is(":checked"), t.is(":checked") ? (e.find(".private_channel_item").addClass("hidden"), e.find(".public_channel_item").removeClass("hidden")) : (e.find(".public_channel_item").addClass("hidden"), e.find(".private_channel_item").removeClass("hidden"));
          });
        },
        s = function(e) {
          if (TS.lazyLoadMembersAndBots()) throw new Error("_legacyDetermineInviteMembers should not be called if flannel is enabled!");
          var t = TS.groups.getActiveMembersForInviting(TS.model.user.is_admin);
          t = t.filter(function(e) {
            return e._is_local;
          });
          var n = TS.channels.makeMembersWithPreselectsForTemplate(t, e);
          return n.sort(function(e, t) {
            return TS.members.memberSorterByName(e.member, t.member);
          }), n;
        },
        o = function() {
          return new Promise(function(e) {
            TS.model.user.is_admin ? TS.api.call("users.admin.invited").then(function(t) {
              var n = TS.pending_users.filterOutURAs(t.data.pending);
              n.length ? (n.forEach(function(e) {
                TS.pending_users.sanitizeNameFields(e);
              }), e(n)) : e([]);
            }) : e([]);
          });
        },
        l = function(e) {
          var t = !0,
            n = o();
          return function(i, r) {
            "@" === i.charAt(0) && (i = i.substring(1));
            var a, s = !1;
            if (t && (t = !1, _.get(e, "length") && (s = !0)), s) {
              var o = _.compact(e.map(TS.members.getMemberById)),
                l = o.map(function(e) {
                  return {
                    member: e,
                    lfs_id: String(e.id),
                    preselected: !0
                  };
                });
              return Promise.resolve({
                items: l
              });
            }
            return r > 0 ? Promise.resolve({
              items: []
            }) : (a = d(i), Promise.all([a, n]).then(function(e) {
              var t = e[0],
                n = e[1];
              if (_.isUndefined(n) || 0 === n.length) return t;
              var r = new RegExp("^" + TS.utility.regexpEscape(i), "i"),
                a = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(i), "i");
              return n = n.filter(function(e) {
                return TS.pending_users.checkUserMatch(e, r) || TS.pending_users.checkUserMatch(e, a);
              }), t = t.concat(n).sort(function(e, t) {
                return TS.pending_users.usersSorterByName(e, t);
              });
            }));
          };
        },
        d = function(e) {
          var t = {
            query: e,
            filter: "everyone"
          };
          return TS.flannel.fetchAndUpsertObjectsWithQuery(t).then(function(t) {
            var n = [];
            return n = "" === e ? TS.members.getMembersForUser() : t.objects, n.filter(function(e) {
              return !(e.is_ultra_restricted || e.deleted || !e._is_local);
            }).map(function(e) {
              return {
                member: e,
                lfs_id: String(e.id)
              };
            });
          });
        },
        c = function(t) {
          var n, i, r, a = {
            append: !0,
            per_page: 50,
            approx_item_height: TS.boot_data.feature_shared_channels_client ? 36 : 50,
            placeholder_text: TS.i18n.t("Search by name", "new_channel")(),
            template: function(e) {
              var t;
              return t = e.member ? TS.templates.channel_invite_member_small({
                member: e.member
              }) : TS.templates.channel_invite_pending_user_small({
                invitee: e
              }), new Handlebars.SafeString(t);
            },
            tokenTemplate: function(e) {
              var t;
              return t = e.member ? TS.templates.channel_invite_member_token({
                member: e.member
              }) : TS.templates.channel_invite_pending_user_token({
                invitee: e
              }), new Handlebars.SafeString(t);
            },
            tokenClass: function(e) {
              return e.member ? TS.templates.builders.getMemberTypeClass(e.member) : "lfs_token_pending_user";
            },
            filter: function(e, t) {
              var a = e.member;
              n !== t && (i = new RegExp("^" + TS.utility.regexpEscape(t), "i"), r = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(t), "i"), n = t);
              return a ? TS.utility.members.checkMemberMatch(a, i, !0) || TS.utility.members.checkMemberMatch(a, r, !0) : TS.pending_users.checkUserMatch(e, i) || TS.pending_users.checkUserMatch(e, r);
            },
            noResultsTemplate: function(e) {
              return e ? TS.i18n.t("No one found matching <strong>{query}</strong>", "new_channel")({
                query: TS.utility.truncateAndEscape(e, 50)
              }) : TS.i18n.t("No one found", "new_channel")();
            }
          };
          if (TS.lazyLoadMembersAndBots()) a.data_promise = l(t);
          else {
            var d = s(t);
            a.data = d, o().then(function(t) {
              if (t && t.length) {
                var n = d.concat(t).sort(function(e, t) {
                  return TS.pending_users.usersSorterByName(e, t);
                });
                e && f(n);
              }
            });
          }
          $("#invite_members_container").lazyFilterSelect(a);
        },
        u = function(t) {
          function n() {
            var e = o.val();
            e && e.length ? TS.utility.disableElement(s, !1) : TS.utility.disableElement(s, !0);
          }
          c(t), e.find(".lfs_input").attr("id", "invite_members_input"), e.find(".new_channel_go").click(TS.ui.new_channel_modal.go), e.find(".create_share_channel").click(function() {
            TS.ui.new_channel_modal.end(), TS.ui.share_channel_dialog.start({
              title: $("#channel_create_title").val(),
              is_private: !$("#channel_public_private_toggle").is(":checked")
            });
          }), r(), a(), e.find(".title_input").keydown(function() {
            e.find(".modal_input_note.mustard_yellow").each(function() {
              $(this).addClass("hidden");
            });
          }), $("#channel_create_title").focus(), e.find(".new_channel_cancel_btn").on("click", function() {
            var e = i && i.reject;
            e && e(), TS.ui.fs_modal.close();
          });
          var s = $("#save_channel"),
            o = $("#channel_create_title");
          if (s.length && o.length && (o.on("input", n), n()), TS.boot_data.feature_texty_mentions && TS.utility.contenteditable.supportsTexty()) {
            var l = e.find("#channel_purpose_input");
            TS.utility.contenteditable.create(l, {
              singleLineInput: !0,
              modules: {
                tabcomplete: {
                  positionMenu: function(e) {
                    e.style.width = l.outerWidth() + "px", TS.tabcomplete.positionUIRelativeToInput(e, l);
                  },
                  searchOptions: {
                    complete_member_specials: !1
                  },
                  completers: [TS.tabcomplete.channels, TS.tabcomplete.emoji, TS.tabcomplete.members]
                }
              },
              onTab: function() {
                return e.find("#invite_members_input").focus(), TS.boot_data.feature_keyboard_navigation;
              },
              onEnter: function() {
                return !1;
              },
              onEscape: function() {
                TS.ui.fs_modal.close();
              }
            }), TS.utility.contenteditable.enable(l);
          }
        },
        m = function(n, i, r, a) {
          TS.channels.create(n, {
            validate_name: !0
          }).then(function(e) {
            var t = e.data;
            i && TS.channels.setPurpose(t.channel.id, i), r && r.length && TS.api.call("channels.invite", {
              channel: t.channel.id,
              users: r.join(",")
            }), a && a.length && TS.pending_users.invitePendingUsersToChannel(a, t.channel.id), TS.ui.fs_modal.close();
          }).catch(function(i) {
            i = i || {};
            var r = i.data ? i.data.error : i.message;
            t && t.stop();
            var a = TS.ui.validation.getErrorMessage(r, {
              maxlength: 22,
              name: n
            });
            TS.ui.validation.showWarning(e.find(".title_input"), a, {
              custom_for: "channel_create_title"
            });
          });
        },
        p = function(n, i, r, a) {
          TS.groups.create(n, {
            and_invite_members_idsA: r,
            validate: !0
          }).then(function(e) {
            var t = e.data;
            i && TS.groups.setPurpose(t.group.id, i), a && a.length && TS.pending_users.invitePendingUsersToChannel(a, t.group.id), TS.ui.fs_modal.close();
          }).catch(function(i) {
            t && t.stop();
            var r = i.data.error,
              a = TS.ui.validation.getErrorMessage(r, {
                maxlength: 22,
                name: n
              });
            TS.ui.validation.showWarning(e.find(".title_input"), a, {
              custom_for: "channel_create_title"
            });
          });
        },
        f = function(e) {
          if (!TS.lazyLoadMembersAndBots()) {
            e.forEach(function(e) {
              e.lfs_id = 0;
            }), $("#invite_members_container").lazyFilterSelect("update", e);
          }
        },
        h = function() {
          TS.channels.ui.channelCreateDialogShowNameTakenAlert(e);
        },
        g = function() {
          var e = new Date("March 17, 2017 10:00:00"),
            t = Math.floor(e.getTime() / 1e3);
          TS.model.prefs.seen_intl_channel_names_coachmark || "en-US" !== TS.boot_data.browser_lang && "en-us" !== TS.boot_data.browser_lang && (TS.model.user.created > t || (TS.model.prefs.seen_intl_channel_names_coachmark = !0, TS.prefs.setPrefByAPI({
            name: "seen_intl_channel_names_coachmark",
            value: !0
          }, function() {
            TS.coachmark.start(TS.coachmarks.coachmarks.intl_channel_names);
          })));
        },
        S = function() {
          e && (e.find(".new_channel_go").off("click"), e.find("#channel_public_private_toggle").off("change"), e.off("keydown"));
        },
        T = function() {},
        b = function() {
          v();
        },
        v = function() {
          S(), e = null, t = null, i = null;
        };
    }();
  },
  2633: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.people_picker", {
        STYLES: {
          normal: "normal",
          small: "small"
        },
        onStart: function() {},
        preload: function(t) {
          return e(t)(""), t;
        },
        make: function(t, i) {
          if (i = i || {}, i.append || t.addClass("hidden"), i.style = _.get(TS.ui.people_picker.STYLES, i.style, TS.ui.people_picker.STYLES.normal), TS.boot_data.page_needs_enterprise || i.force_lazy_filter_select || TS.lazyLoadMembersAndBots()) t.lazyFilterSelect({
            append: !!i.append,
            always_visible: !!i.always_visible,
            approx_item_height: i.approx_item_height || 50,
            data_promise: e(i),
            placeholder_text: i.placeholder_text || TS.i18n.t("Search by name", "people_picker")(),
            classes: "people_picker",
            scroll_threshold: 2500,
            single: !!i.single,
            style: i.style,
            template: i.template || function(e) {
              var t = TS.templates.member_small({
                member: e.member
              });
              return new Handlebars.SafeString(t);
            },
            tokenTemplate: function(e) {
              var t = TS.templates.member_token({
                member: e.member
              });
              return new Handlebars.SafeString(t);
            },
            tokenClass: function(e) {
              return TS.templates.builders.getMemberTypeClass(e.member);
            },
            noResultsTemplate: function(e) {
              return e ? TS.i18n.t("No one found matching <strong>{query}</strong>", "people_picker")({
                query: _.escape(e)
              }) : TS.i18n.t("No one found", "people_picker")();
            },
            onItemAdded: i.onItemAdded,
            onItemRemoved: i.onItemRemoved
          });
          else {
            var r = i.include_bots ? TS.members.getActiveMembersExceptSelfAndSlackbot() : TS.members.getActiveMembersExceptSelfAndBots(),
              a = {
                append: !!i.append,
                always_visible: !!i.always_visible,
                data: n(i.members || r, i.preselected_ids || []),
                per_page: 50,
                approx_item_height: i.approx_item_height || 50,
                placeholder_text: i.placeholder_text || TS.i18n.t("Search by name", "people_picker")(),
                classes: "people_picker",
                single: !!i.single,
                style: i.style,
                template: i.template || function(e) {
                  var t = TS.templates.member_small({
                    member: e.member
                  });
                  return new Handlebars.SafeString(t);
                },
                tokenTemplate: function(e) {
                  var t = TS.templates.member_token({
                    member: e.member
                  });
                  return new Handlebars.SafeString(t);
                },
                tokenClass: function(e) {
                  return TS.templates.builders.getMemberTypeClass(e.member);
                },
                filter: function(e, t) {
                  var n, r, a, s = e.member;
                  if (!i.include_bots && s.is_bot) return !1;
                  a !== t && (n = new RegExp("^" + TS.utility.regexpEscape(t), "i"), r = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(t), "i"), a = t);
                  return TS.utility.members.checkMemberMatch(s, n, !0) || TS.utility.members.checkMemberMatch(s, r, !0);
                },
                noResultsTemplate: function(e) {
                  return e ? TS.i18n.t("No one found matching <strong>{query}</strong>", "people_picker")({
                    query: _.escape(e)
                  }) : TS.i18n.t("No one found", "people_picker")();
                },
                onItemAdded: i.onItemAdded,
                onItemRemoved: i.onItemRemoved
              };
            t.lazyFilterSelect(a);
          }
        },
        value: function(e) {
          return e.lazyFilterSelect("value");
        },
        clearValue: function(e) {
          return e.lazyFilterSelect("clearValue");
        },
        recomputeHeight: function(e) {
          return e.lazyFilterSelect("recomputeHeight");
        }
      });
      var e = function(e) {
          var n = {},
            i = {};
          e.preselected_ids && e.preselected_ids.length && _.forEach(e.preselected_ids, function(e) {
            e && (i[e] = !0);
          });
          var r = {};
          return e.omitted_ids && e.omitted_ids.length && _.forEach(e.omitted_ids, function(e) {
              e && (r[e] = !0);
            }),
            function(a, s) {
              if ("@" === a.charAt(0) && (a = a.substring(1)), "" === a && e.empty_query_result) return s > 0 ? Promise.resolve([]) : Promise.resolve(e.empty_query_result.map(function(e) {
                return {
                  member: e,
                  lfs_id: String(e.id),
                  preselected: !!i[e.id]
                };
              }));
              if ("" === a && e.initial_load_promise) return _.isUndefined(s) ? e.initial_load_promise : (e.initial_load_promise = t(e.initial_load_promise, i, r), e.initial_load_promise);
              n.query !== a && (n.query = a, n.include_org = TS.boot_data.page_needs_enterprise, n.include_slackbot = !!e.include_slackbot, n.include_self = e.include_self, n.full_profile_filter = !1, n.include_bots = !!e.include_bots);
              var o = TS.members.ensureMembersArePresent(i).then(function() {
                return t(n, i, r);
              });
              return "" !== a || e.initial_load_promise || (e.initial_load_promise = o), o;
            };
        },
        t = function(e, t, n) {
          return Promise.resolve().then(function() {
            var e = [];
            return _.keys(t).forEach(function(t) {
              TS.members.getMemberById(t) || e.push(t);
            }), e.length ? TS.members.ensureMembersArePresent(e) : Promise.resolve();
          }).then(function() {
            return TS.members.promiseToSearchMembers(e).then(function(e) {
              var i = [];
              return i = "" === e.query ? TS.members.getMembersForUser() : e.items, e.items = i.filter(function(e) {
                return !n[e.id];
              }).map(function(e) {
                return e.member && void 0 !== e.preselected ? e : {
                  member: e,
                  lfs_id: String(e.id),
                  preselected: !!t[e.id]
                };
              }), e;
            });
          });
        },
        n = function(e, t) {
          return e && e.map(function(e) {
            return {
              member: e,
              lfs_id: String(e.id),
              preselected: -1 !== t.indexOf(e.id)
            };
          });
        };
    }();
  },
  2634: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.pins", {
        onStart: function() {
          TS.pins.pins_fetched_sig.add(TS.ui.pins.rebuildPinnedMessagesUI), TS.pins.pinned_status_changed_sig.add(TS.ui.pins.updatePinUI);
        },
        updatePinUI: function(i, r, a) {
          i && r && ("file" === r.type ? t(i, r.file, a) : "file_comment" === r.type && n(i, r.comment, a), "message" === r.type && e(i, r.message, a));
        },
        rebuildPinnedMessagesUI: function(e, t) {
          t && 0 !== t.length && t.forEach(function(t) {
            TS.ui.pins.updatePinUI(e, t, !0);
          });
        },
        clearUnreadPinState: function() {
          TS.client.channel_header.clearUnreadPinState(), TS.client.channel_page.clearUnreadPinState();
        }
      });
      var e = function(e, t, n) {
          if (e && t && t.ts) {
            var i = TS.templates.makeMsgDomId(t.ts),
              r = $("#messages_container #" + i + ', #messages_container .message_unfurl[data-attachment-ts="' + t.ts + '"]'),
              a = r.find(".is_pinned_holder:first");
            0 !== r.length && 0 !== a.length && (n ? (r.addClass("is_pinned"), a.html(TS.templates.builders.buildPinInfoHtml(t).string)) : (r.removeClass("is_pinned"), a.empty()));
          }
        },
        t = function(e, t, n) {
          if (e && t) {
            var r = $('.message_body[data-file-id="' + t.id + '"]'),
              a = r.closest("ts-message");
            i(e, a, n);
          }
        },
        n = function(e, t, n) {
          if (e && t) {
            var r = $(".rxns_key_" + t._rxn_key),
              a = r.closest("ts-message");
            i(e, a, n);
          }
        },
        i = function(t, n, i) {
          t && 0 !== n.length && _.forEach(n, function(n) {
            var r = $(n).data("ts");
            r && (n = TS.utility.msgs.getMsg(r, t.msgs)) && e(t, n, i);
          });
        };
    }();
  },
  2637: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.react_emoji_menu", {
        is_showing: !1,
        onStart: function() {
          TS.prefs.emoji_mode_changed_sig.add(v), TS.prefs.preferred_skin_tone_changed_sig.add(y), TS.prefs.team_handy_rxns_changed_sig.add(y), TS.prefs.channel_handy_rxns_changed_sig.add(y);
        },
        start: function(e) {
          o(e);
        }
      });
      var e, t, n, i, r, a, s = "#msg_input",
        o = function(e) {
          if (n = e.rxn_key, n ? (u(), i = function(t) {
              var n = !TS.rxns.doesRxnsHaveRxnFromUser(TS.rxns.getExistingRxnsByKey(e.rxn_key), t);
              TS.rxns.changeRxnsFromUserAction(e.rxn_key, t, n), e.callback && e.callback();
            }) : i = e.callback, s = !n && (e.input_to_fill || s), !TS.client || !TS.utility.contenteditable.isDisabled(s)) {
            var a = e.position,
              o = TS.client && s === TS.client.ui.$msg_input,
              l = _.get(TS, "model.ui_state.flex_visible");
            o && l && (a = "top-right"), t = $(e.e && e.e.target), c({
              open: !0,
              is_rxn: !!n
            }), TS.tips.hideAll(), r = e.target_bounds || t.dimensions_rect();
            var m = window.pageYOffset;
            r.top += m, r.bottom += m, TS.ui.react_emoji_menu.is_showing = !0;
            var p = {},
              f = {
                position: a,
                offset_x: e.offset_x,
                offset_y: e.offset_y
              };
            d(p, f);
          }
        },
        l = function() {
          c({
            open: !1,
            is_rxn: !!n
          }), t = null, s = "#msg_input", n = null, i = null, a = null, TS.tips.unhideAll(), TS.ui.react_emoji_menu.is_showing = !1, d();
        },
        d = function(e, t) {
          var n = h(e),
            i = g(t);
          k(n, i);
        },
        c = function(e) {
          e.is_rxn ? (t.closest(".menu_rxn").toggleClass("active", e.open), t.closest(".rxn_panel").toggleClass("active", e.open), t.closest("ts-message").toggleClass("active", e.open), t.toggleClass("active", e.open)) : (t.closest(".emo_menu").toggleClass("active", e.open), t.closest(".handy_rxns_row").toggleClass("active", e.open), t.closest(".current_status_emoji_picker").toggleClass("active", e.open));
        },
        u = function(e) {
          var t = TS.rxns.getHandyRxnsDisplayDataByRxnKey(e);
          a = _.map(t.items, function(e) {
            return e.name;
          });
        },
        m = function() {
          return "google" === TS.model.prefs.emoji_mode ? [] : [":hand:", ":hand::skin-tone-2:", ":hand::skin-tone-3:", ":hand::skin-tone-4:", ":hand::skin-tone-5:", ":hand::skin-tone-6:"];
        },
        p = function(e, t) {
          var n = $(s),
            i = t.display_name || t.name,
            r = !(e && e.shiftKey);
          if (TS.utility.contenteditable.supportsTexty() && TS.utility.contenteditable.isContenteditable(n)) setTimeout(TS.utility.contenteditable.insertTextAtCursor, 0, n, i, r);
          else {
            var a = TS.utility.getCursorPosition(n).start,
              o = a + i.length,
              l = TS.utility.contenteditable.value(n),
              d = l.substr(0, a) + i + l.substr(a);
            TS.utility.populateInput(n, d), r && setTimeout(TS.utility.setCursorPosition, 0, s, o);
          }
        },
        f = function(e, t) {
          var n = _.filter(TS.model.emoji_map, {
            name_with_colons: TS.emoji.stripLocalizedSkinTone(e.name)
          });
          t && (t = t.replace(/^:/, "")), n && TS.ui.frecency.record(n, t);
        },
        h = function(e) {
          e = e || {};
          var t = {
            onSkinToneChanged: b,
            groups: TS.model.emoji_groups,
            skinToneChoiceNames: m(),
            activeSkinToneId: e.skin_tone_id || TS.model.prefs.preferred_skin_tone,
            numBackgroundColors: TS.model.emoji_menu_colors,
            onSelected: S,
            onClosed: T,
            canAddEmoji: !TS.model.user.is_restricted && (!TS.model.team.prefs.emoji_only_admins || TS.model.user.is_admin)
          };
          return n && (t.handyRxnNames = a), t;
        },
        g = function(e) {
          return e = e || {}, {
            targetBounds: r,
            allowanceX: 15,
            allowanceY: 15,
            position: e.position || "top-left",
            offsetX: _.isUndefined(e.offset_x) ? 0 : e.offset_x,
            offsetY: _.isUndefined(e.offset_y) ? -6 : e.offset_y,
            isOpen: TS.ui.react_emoji_menu.is_showing,
            onClose: T
          };
        },
        S = function(e, t, n) {
          return f(t, n), i ? void setTimeout(i, 0, t.name) : s ? void p(e, t) : TS.error("Could not find an _input_to_fill.");
        },
        T = function() {
          l();
        },
        b = function(e) {
          if (TS.prefs.onPrefChanged({
              name: "preferred_skin_tone",
              value: e
            }), TS.prefs.setPrefByAPI({
              name: "preferred_skin_tone",
              value: e
            }), n && u(n), TS.ui.react_emoji_menu.is_showing) {
            d({
              skin_tone_id: e
            });
          }
        },
        v = function() {
          TS.ui.react_emoji_menu.is_showing && _.defer(d);
        },
        y = function() {
          n && u(n), v();
        },
        w = function() {
          if (!document.getElementById("reactroot_emoji_picker")) {
            var e = document.createElement("div");
            e.setAttribute("id", "reactroot_emoji_picker"), document.body.appendChild(e);
          }
          return document.getElementById("reactroot_emoji_picker");
        },
        k = function(t, n) {
          TS.metrics.mark("react_emoji_menu_render_mark"), e || (e = w());
          var i = React.createElement(ReactComponents.EmojiPicker, t, null),
            r = React.createElement(ReactComponents.Popover, n, i);
          ReactDOM.render(r, e, function() {
            TS.metrics.measureAndClear("react_emoji_menu_render", "react_emoji_menu_render_mark");
          });
        };
    }();
  },
  2640: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.share_dialog", {
        div: null,
        showing: !1,
        delegate: void 0,
        onStart: function() {
          TS.files.team_file_changed_sig.add(i), TS.files.team_file_comment_added_sig.add(r), TS.files.team_file_comment_deleted_sig.add(r);
        },
        onKeydown: function(e) {
          TS.ui.share_dialog.showing && (e.which == TS.utility.keymap.enter ? "BODY" === TS.utility.getActiveElementProp("NODENAME") && (TS.ui.share_dialog.go(), e.preventDefault()) : e.which == TS.utility.keymap.esc && "BODY" === TS.utility.getActiveElementProp("NODENAME") && TS.ui.share_dialog.cancel());
        },
        start: function(t, i, r, a, s, o) {
          if (!TS.client || !TS.client.ui.checkForEditing()) {
            n = !1, e = t;
            var l = TS.files.getFileById(t),
              d = "file";
            "post" === l.mode ? d = "file_post" : "space" === l.mode ? d = "file_space" : "snippet" === l.mode ? d = "file_snippet" : "arugula" === l.mode && (d = "file_arugula");
            var c = TS.templates.builders.buildFileSharingControls(l, !0, null, r),
              _ = i ? "" : TS.templates.builders.fileHTML(l, {
                for_share_dialog: !0
              }),
              u = {
                type: d,
                item: l,
                item_owner: TS.members.getMemberById(l.user),
                sharing_html: new Handlebars.SafeString(c),
                file_html: new Handlebars.SafeString(_)
              };
            u.icon_class = TS.utility.getImageIconClass(l, "thumb_80"), TS.ui.share_dialog.div || TS.ui.share_dialog.build();
            var m = TS.templates.share_dialog(u);
            m = TS.format.replaceHighlightMarkers(m);
            var p = TS.ui.share_dialog.div;
            p.html(m);
            var f = $("#file_comment_textarea");
            TS.ui.comments.bindInput(f, TS.ui.share_dialog.go), TS.boot_data.feature_texty_takes_over && TS.utility.contenteditable.supportsTexty() || f.autogrow(), s && TS.utility.contenteditable.value(f, s), f = null, p.modal("show"), p.find(".dialog_cancel").click(TS.ui.share_dialog.cancel), p.find(".dialog_go").click(TS.ui.share_dialog.go), TS.ui.file_share.bindFileShareDropdowns(!1, {
              id: a
            }, void 0, o), TS.ui.file_share.bindFileShareShareToggle(), TS.ui.file_share.bindFileShareCommentField();
          }
        },
        go: function() {
          if (n) return void TS.info("TS.ui.share_dialog stopping because already sharing");
          if (!TS.ui.share_dialog.showing) return void TS.error("not showing?");
          var t = $("#select_share_channels").lazyFilterSelect("value")[0],
            i = _.trim(TS.format.cleanMsg(TS.utility.contenteditable.value($("#file_comment_textarea")))),
            r = function() {
              TS.shared.getShareModelObId(o, function(t) {
                TS.files.shareFile(e, t, i, !1).then(function() {
                  if (e = null, TS.client) {
                    var n = TS.shared.getModelObById(t);
                    if (n) {
                      var i = TS.shared.getActiveModelOb();
                      if (!i || i.id !== n.id) return TS.client.displayModelOb(n);
                      TS.client.ui.instaScrollMsgsToBottom();
                    }
                  }
                });
              });
            };
          if (t && t.model_ob && t.model_ob.create_channel) {
            var a = e;
            return TS.ui.new_channel_modal.start(t.model_ob.name).then(function(t) {
              return e = a, o = t.id, r(), null;
            }).catch(function() {
              return TS.ui.share_dialog.start(a, !1, !1, !1, i), null;
            }), TS.ui.share_dialog.cancel(), !1;
          }
          if (!TS.ui.file_share.shouldBlockUploadDialogSubmission()) {
            var s = $("#share_dialog"),
              o = s.find("#share_model_ob_id").val();
            if (o || t && (o = t.model_ob.id), !o) return void TS.warn("model_ob_id is not set! " + $("#select_share_channels").val());
            TS.ui.share_dialog.delegate && "function" == typeof TS.ui.share_dialog.delegate.submit ? TS.ui.share_dialog.delegate.submit(s, r) : r(), n = !0, TS.ui.share_dialog.div.modal("hide");
          }
        },
        cancel: function() {
          e = null, TS.ui.share_dialog.div.modal("hide");
        },
        end: function() {
          t && t.detachEvents && t.detachEvents(), t = null, TS.model.dialog_is_showing = !1, TS.ui.share_dialog.showing = !1, TS.ui.comments.unbindInput($("#file_comment_textarea")), TS.ui.share_dialog.div.empty(), $(window.document).unbind("keydown", TS.ui.share_dialog.onKeydown);
        },
        build: function() {
          $("body").append('<div id="share_dialog" class="modal hide fade"></div>'), TS.ui.share_dialog.div = $("#share_dialog");
          var e = TS.ui.share_dialog.div;
          e.on("hidden", function(e) {
            e.target == this && TS.ui.share_dialog.end();
          }), e.on("show", function(e) {
            e.target == this && (TS.model.dialog_is_showing = !0, TS.ui.share_dialog.showing = !0);
          }), e.on("shown", function(e) {
            if (e.target == this) {
              $("#select_share_channels").lazyFilterSelect("value").length < 1 ? $("#select_share_channels").lazyFilterSelect("getInstance").$input.focus() : TS.utility.contenteditable.focus($("#file_comment_textarea")), $(window.document).bind("keydown", TS.ui.share_dialog.onKeydown), t = TS.ui.share_dialog.div.find("img.lazy").lazyload();
            }
          });
        }
      });
      var e, t = null,
        n = !1,
        i = function(t) {
          TS.ui.share_dialog.showing && e === t.id && (a(t), s(t));
        },
        r = function(t) {
          TS.ui.share_dialog.showing && e === t.id && s(t);
        },
        a = function(e) {
          TS.templates.builders.updateFileShareLabels(e), $("#select_share_at_channel_list").html(TS.templates.builders.makeFileCommentHelpHTML(e));
        },
        s = function(e) {
          var t = TS.templates.makeFileDomId(e);
          $("#" + t).replaceWith(TS.templates.builders.fileHTML(e, {
            for_share_dialog: !0
          }));
          var n = $("#" + t).find("img.lazy");
          n.removeClass("lazy").attr("src", n.attr("data-original"));
        };
    }();
  },
  2641: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.share_message_dialog", {
        start: function(a, o, l) {
          var d = TS.utility.msgs.findMsg(a, o.id);
          if (!d) return void TS.error("wtf no msg?");
          TS.tips.hideAll(), e = a, _.isString(a) || (e = a.toString()), t = o, n = !1;
          var c, u = TS.templates.builders.formatMessageAsAttachment(d, o),
            m = TS.i18n.t("Copy a link to this message.<br>To share, paste it anywhere.", "share_message")();
          s() || (m = TS.i18n.t("Copy a link to this message.<br>It’s private, so sharing is limited.", "share_message")(), c = TS.templates.share_message_dialog_warning({
            from_private_channel: (o.is_private || o.is_group) && !o.is_mpim
          }), c = new Handlebars.SafeString(c)), TS.ui.basic_share_dialog.start({
            title: TS.i18n.t("Share message", "share_message")(),
            go_button_text: TS.i18n.t("Share", "share_message")(),
            initial_message: l,
            attachment_html: u,
            warning: c,
            copy_link: TS.utility.msgs.constructAbsoluteMsgPermalink(t, e, d.thread_ts),
            copy_text: m,
            onGo: r,
            onEnd: i,
            src_model_ob: t
          });
        }
      });
      var e, t, n, i = function() {
          e = null, t = null, TS.clog.track("PFP_ACTION", {
            contexts: {
              growth: {
                action: "close",
                trigger: "share_message_dialog"
              }
            }
          }), TS.tips.unhideAll();
        },
        r = function() {
          if (!n) {
            var i = e,
              r = t,
              s = TS.utility.contenteditable.value($(".basic_share_dialog .message_input")),
              o = TS.format.cleanMsg(s);
            o = _.trim(o);
            var l = $(".basic_share_dialog #select_share_channels"),
              d = l.lazyFilterSelect("value")[0];
            if (d && d.model_ob && d.model_ob.create_channel) {
              var c = e,
                u = t;
              return TS.ui.new_channel_modal.start(d.model_ob.name).then(function(e) {
                return t = u, a(c, o, u, e), null;
              }).catch(function() {
                return TS.ui.share_message_dialog.start(c, u, o), null;
              }), TS.generic_dialog.cancel(), !1;
            }
            if (!d) return l.find(".lfs_input_container").addClass("error"), !1;
            a(i, o, r, d.model_ob);
          }
        },
        a = function(e, t, i, r) {
          if (TS.ui.file_share.shouldBlockUploadDialogSubmission()) return !1;
          var a = TS.utility.contenteditable.value($(".basic_share_dialog .message_input")),
            l = $(".basic_share_dialog #select_share_channels");
          o(i.id, e);
          var d = {
            channel: i.id,
            timestamp: e,
            text: t
          };
          if (s())
            if (r) d.share_channel = r.presence ? "@" + r.name : r.id;
            else if (i.is_archived) return $("#select_share_pick_channel_note").removeClass("hidden"), _.defer(function() {
            l.find(".lfs_input_container").click();
          }), !1;
          n = !0, r || (r = i);
          var c;
          c = r && r.is_channel && !r.is_member ? TS.channels.joinById(r.id) : Promise.resolve(), c.then(function() {
            return TS.api.call("chat.shareMessage", d).then(function() {
              if (TS.client) {
                var e = TS.shared.getActiveModelOb();
                if (r && e && e.id === r.id && !TS.model.threads_view_is_showing && !TS.model.unread_view_is_showing) TS.client.ui.instaScrollMsgsToBottom();
                else if (d.share_channel && r) return TS.client.displayModelOb(r);
              }
            });
          }).catch(function(t) {
            var n = t || "unknown error";
            t && t.data && t.data.error && (n = t.data.error), TS.error("chat.shareMessage error: " + n), TS.generic_dialog.start({
              title: TS.i18n.t("Message could not be shared", "share_message")(),
              body: TS.i18n.t("Sorry! Something went wrong.", "share_message")(),
              go_button_text: TS.i18n.t("Try again", "share_message")(),
              onGo: function() {
                TS.ui.share_message_dialog.start(e, i, a);
              }
            });
          });
        },
        s = function() {
          return t.is_channel && !t.is_private;
        },
        o = function(e, t) {
          if (e && t) {
            var n = {
                channel_id: e,
                message_id: t
              },
              i = $("ts-message[data-model-ob-id='" + e + "'][data-ts='" + t + "']");
            _.merge(n, TS.ui.thread.getTrackingPayloadForEl(i)), "threads_view" === TS.ui.thread.getContextForEl(i) && TS.client.ui.threads.incrementTrackingSeqId(), TS.clog.track("MSG_SHARED_CLICKED", n);
          }
        };
    }();
  },
  2642: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.shared_channels_invites", {
        onStart: function() {
          TS.ui.validation.register("valid_invite", De);
        },
        start: function() {
          TS.boot_data.page_needs_enterprise && ve();
        }
      });
      var e, t, n, i, r, a, s, o, l, d = [],
        c = !1,
        u = !1,
        m = [],
        p = [],
        f = [],
        h = [],
        g = !1,
        S = function(e) {
          if (e) {
            var n = B(e, G(e));
            n && t.find('.sci_send_email_container [data-action="replace_sent_emails"]').replaceWith(TS.templates.shared_channels_invites_sent_emails(n));
          }
        },
        T = function(e, n) {
          e || (e = !1), n || (n = !1), t.find("#sci_channels_create .input_wrapper .spinner").toggleClass("hidden", e), n && b(!e);
        },
        b = function(e) {
          o && (clearTimeout(o), o = null), e || (e = !1);
          var n = t.find("#sci_channels_create .input_wrapper .available");
          n.toggleClass("hidden", e), e || (o = setTimeout(function() {
            n.addClass("hidden");
          }, 1e3));
        },
        v = function() {
          TS.kb_nav.start(i.find(".list_items"), ".channel_browser_row", i, {
            use_data_ordering: !0,
            px_offset: 35,
            scrollToStartImmediately: function() {
              i.longListView("scrollToTop", !0);
            },
            scrollToEndImmediately: function() {
              i.longListView("scrollToEnd", !0);
            }
          }), TS.kb_nav.setAllowHighlightWithoutBlurringInput(!0), TS.kb_nav.setSubmitItemHandler(function(e) {
            g && X($(this), e);
          }), i.find(".list_items").on("click", ".channel_browser_row", function(e) {
            X($(this), e);
          }), t.on("click", '[data-action="sci_to_create"]', we), t.on("click", '[data-action="sci_channels_create"]', M), t.on("click", '[data-action="sci_cancel"]', ke), t.on("change", '[type="radio"][name="share_with"]', Ee), t.on("click", '[data-action="sci_show_action"]', he);
          var r = _.debounce(function(e) {
            if (l && l.isPending()) return s && (clearTimeout(s), s = null), void(s = setTimeout(function(e) {
              r(e);
            }, 1e3, e));
            $(".validation_message").remove(), $('label[for="channel_name"]').removeClass("validation_warning"), e.removeClass("validation_warning");
            var t = !0,
              n = !0,
              i = !1,
              a = $('#sci_channels_create [data-action="sci_channels_create"]');
            if (T(), Me(null, a, !1, t), TS.ui.validation.validate(e)) {
              var o = e.val().trim();
              l = TS.api.callImmediately("enterprise.nameTaken", {
                name: o,
                ignore_local_team: !1
              }, function(r, s) {
                if (r) {
                  if (s.name_taken) return n = !0, i = !1, T(n, i), t = !0, Me(null, a, !1, t), void TS.ui.validation.showWarning(e, '"' + _.escape(o) + '" is already taken by a channel, username, or user group.', {});
                  n = !0, i = !0, T(n, i), t = !1, Me(null, a, !1, t);
                } else n = !0, i = !1, T(n, i), TS.generic_dialog.alert("Something failed! " + s.error);
                return null;
              }).catch(function() {
                l = null, n = !0, i = !1, T(n, i);
              });
            } else n = !0, T(n);
          }, 1e3, {
            leading: !1,
            trailing: !0
          });
          t.on("input", '#sci_channels_create input[name="channel_name"]', function(e) {
            e.preventDefault(), e.stopPropagation(), r($(this));
          }), t.on("input", '#sci_channels_create [data-validation]:not([name="channel_name"])', function() {
            var e = t.find("#sci_channels_create");
            Me(e.find(A()), e.find('[data-action="sci_channels_create"]'), !0);
          }), n.on("textchange", function() {
            c && C();
          }).on("keydown", function(e) {
            e.which === TS.utility.keymap.esc && TS.ui.fs_modal.close();
          }), a.on("change", function() {
            if (c) {
              var e = $(this).val();
              TS.model.ui_state && (TS.model.ui_state.sort_shared_channel_browser_by = e, TS.storage.storeUIState(TS.model.ui_state)), Te(e), C();
            }
          }), t.on("click", ".clear_filter_icon", function() {
            n.val("").trigger("textchange").focus();
          }), e.on("keyup.sci", J), t.on("click", '[data-action="sci_toggle_contents"]', Ce), t.on("click", '[data-action="sci_toggle_send_email"]', Ae), t.on("click", '[data-action="sci_toggle_copy_link"]', Ie), t.on("click", '[data-action="sci_send"]', _e), t.on("click", '[data-action="sci_copy"]', q), t.on("click", '[data-action="sci_revoke"]', ce), t.on("input", "input[data-invite-id]", function(e) {
            var t = $(e.target).parent();
            Me(t, t.find('[data-action="sci_send"]'), !0);
          });
        },
        y = function() {
          t.find(".showing_sci_action").removeClass("showing_sci_action");
        },
        w = function(e) {
          $(e.target).closest(".sci_invite_container").find(".sci_copy_link_mini_container").addClass("hidden");
        },
        k = function(e) {
          $(e.target).closest(".sci_invite_container").find(".sci_send_email_mini_container").addClass("hidden");
        },
        x = function(e, t) {
          var n = [];
          return e.length > 0 && (n.push({
            is_divider: !0,
            name: TS.i18n.t("Channels you can join", "shared")()
          }), n = n.concat(e)), t.length > 0 && (n.push({
            is_divider: !0,
            name: TS.i18n.t("Channels you belong to", "shared")()
          }), n = n.concat(t)), n;
        },
        M = function() {
          var e = t.find("#sci_channels_create"),
            n = e.find(A());
          if (!TS.ui.validation.validate(n, {
              quiet: !0,
              fast: !0
            })) return TS.ui.validation.validate(n), Ladda.stopAll(), void e.find('[data-action="sci_channels_create"]').addClass("disabled");
          var i = {},
            r = !e.find('[name="access"]').prop("checked");
          if (N()) switch (e.find('[name^="share_with"]:checked').val()) {
            case "specific":
              i.target_domains = e.find('[name="domains"]').val();
              break;
            case "external":
              i.target_domain = e.find('[name="domain"]').val();
              break;
            case "all":
              i.all_teams = !0;
          } else i.target_domain = e.find('[name="domain"]').val();
          var a = e.find('[name="channel_name"]').val();
          a && (i.channel_name = a);
          var s = e.find('[name="purpose"]').val();
          s && (i.purpose = s.trim()), i.target_domain ? (i.is_private = r, ee(i).then(function(e) {
            var t = e.data.invite_id;
            return xe(e.data), ne().then(function(e) {
              me(e.data.invites, r), oe(t);
            });
          }).catch(P).finally(Ladda.stopAll)) : Z(i, r).then(function(e) {
            var t;
            e.data.group ? (t = e.data.group.id, e.data.group.is_member || (TS.console.warn("A new shared private channel was just created (" + t + ") but the creator was not listed as a member in the API response"), e.data.group.is_member = !0), TS.groups.upsertGroup(e.data.group), TS.groups.displayGroup({
              id: t
            })) : (t = e.data.channel.id, e.data.channel.is_member || (TS.console.warn("A new shared channel was just created (" + t + ") but the creator was not listed as a member in the API response"), e.data.channel.is_member = !0), TS.channels.upsertChannel(e.data.channel), TS.channels.displayChannel({
              id: t
            })), TS.ui.fs_modal.close();
          }).catch(P).finally(Ladda.stopAll);
        },
        C = function() {
          var e = $.trim(n.val());
          "" !== e && -1 !== e.indexOf("#") && (e = e.replace("#", "", "g"), e = $.trim(e)), e ? (n.closest(".channel_browser_filter_container").addClass("active"), d = O(e)) : (n.closest(".channel_browser_filter_container").removeClass("active"), d = O()), 0 === d.length ? (Fe(e), L("#sci_no_shared_channels")) : L("#sci_channels_container"), i.longListView("scrollToTop", !0), i.longListView("setItems", d), TS.utility.rAF(function() {
            TS.ui.utility.updateClosestMonkeyScroller(i), i.longListView("resizeImmediately");
          }), e ? TS.kb_nav.highlightFirstItem() : TS.kb_nav.clearHighlightedItem();
        },
        I = function(e, t) {
          return _.find(D(), function(n) {
            return n.team.domain === e && n.channel_name === t;
          }) || _.find(D(!0), function(n) {
            return n.team.domain === e && n.channel_name === t;
          });
        },
        A = function() {
          var e = ['[name="channel_name"]', '[name="purpose"]'];
          if (N()) switch (t.find('[name^="share_with"]:checked').val()) {
            case "specific":
              e.push('[name="team_list"]');
              break;
            case "external":
              e.push('[name="domain"]');
          } else e.push('[name="domain"]');
          return e.join(", ");
        },
        E = function() {
          return N() ? _.filter(TS.model.enterprise_teams, function(e) {
            return e.id !== TS.model.team.id;
          }) : [];
        },
        O = function(e) {
          var t = F(),
            n = F(!0);
          if (t.length || n.length) {
            var i, r, a = K(t, n),
              s = [],
              o = [],
              l = {};
            return e && (e = TS.utility.regexpEscape(e), r = new RegExp(e, "i")), a.forEach(function(t) {
              var n = l.hasOwnProperty(t.id);
              if (!n && t.hasOwnProperty("name")) {
                if (n || (l[t.id] = !0), e) {
                  if (t.name.toLowerCase() === e.toLowerCase()) return void(i = t);
                  if (!t.name.match(r)) return;
                }
                t.is_member ? o.push(t) : s.push(t);
              }
            }), i && (i.is_member ? o.unshift(i) : s.unshift(i)), x(s, o);
          }
        },
        F = function(e) {
          return e ? m : f;
        },
        B = function(e, t) {
          return _.find(D(t), function(t) {
            return t.invite_id == e;
          });
        },
        D = function(e) {
          return e ? p : h;
        },
        R = function() {
          var e = TS.i18n.t("Anyone on your team can join", "shared")();
          if (N()) {
            var n = _.escape(TS.model.enterprise.name);
            switch (t.find('[name^="share_with"]:checked').val()) {
              case "specific":
                e = TS.i18n.t("Specific teams at {name} can join", "shared")({
                  name: n
                });
                break;
              case "all":
                e = TS.i18n.t("Anyone at {name} can join", "shared")({
                  name: n
                });
            }
          }
          return e;
        },
        H = function() {
          var e = TS.i18n.t("Restricted to invited members", "shared")();
          if (N()) {
            var n = _.escape(TS.model.enterprise.name);
            switch (t.find('[name^="share_with"]:checked').val()) {
              case "specific":
                e = TS.i18n.t("Restricted to invited members on specific {name} teams", "shared")({
                  name: n
                });
                break;
              case "all":
                e = TS.i18n.t("Restricted to invited members at {name}", "shared")({
                  name: n
                });
            }
          }
          return e;
        },
        P = function(e) {
          var t;
          switch (e.data.error) {
            case "invalid_target_domain":
              t = TS.i18n.t("Darn&mdash;we couldn’t find a team with that domain. Try again?", "shared")();
              break;
            case "name_taken":
              t = TS.i18n.t("Darn&mdash;that channel name is already taken. Try another?", "shared")();
              break;
            case "invite_exists":
              t = TS.i18n.t("An invitation already exists for that team and channel.", "shared")();
              break;
            case "shared_channel_exists":
              t = TS.i18n.t("Good news! That team has already joined the shared channel.", "shared")();
              break;
            case "not_paid":
              t = TS.i18n.t("Darn&mdash;that team has to upgrade to a paid Slack plan to join a shared channel.", "shared")();
              break;
            default:
              return j(e);
          }
          return TS.generic_dialog.alert(t);
        },
        j = function(e) {
          var t = e.message || "";
          e.data && e.data.error && (t += ": " + e.data.error), TS.error(t);
          var n = TS.i18n.t("Sorry! Something went wrong. Please try again.", "shared")();
          return TS.generic_dialog.alert(n);
        },
        L = function(e) {
          var n = ["#sci_loading", "#sci_no_shared_channels", "#sci_channels_container", "#sci_channels_create", "#sci_send", "#sci_invites_container"].filter(function(t) {
            return t !== e;
          }).join(", ");
          t.find(n).addClass("hidden"), t.find(e).removeClass("hidden");
        },
        U = function() {
          u = !1, c && i.longListView("setHidden", !0);
        },
        N = function() {
          return TS.boot_data.page_needs_enterprise;
        },
        G = function(e) {
          return !!B(e, !0);
        },
        W = function() {
          var e = t.find("#sci_channels_create");
          e.find('[name="domains"]').each(function(t, n) {
            var i = $(n);
            TS.ui.team_picker.make(i, {
              teams: E()
            }), i.on("change", function() {
              var t = TS.ui.team_picker.value(i).map(function(e) {
                return e.team.domain;
              }).join(",");
              i.val(t);
              Me(e.find(A()), e.find('[data-action="sci_channels_create"]'), !0);
            });
          });
        },
        q = function(e) {
          var t = $(e.target),
            n = t.parent(),
            i = n.find("input"),
            r = n.find("label > span"),
            a = i.get(0),
            s = i.val();
          TS.clipboard.canWriteText() ? TS.clipboard.writeText(s) : ge(r), a && a.setSelectionRange(0, s.length);
        },
        z = function() {
          D().length || F().length || D(!0).length || F(!0).length || ke();
        },
        K = function(e, t) {
          return e.concat(t);
        },
        V = function(e) {
          return "num_members" in e ? e.num_members || 0 : e.active_members ? e.active_members.length : 0;
        },
        Y = function() {
          Oe(!0), t = null, e.off("keyup.sci"), e = null, TS.kb_nav.end(), u = !1, c = !1, ue([]), ue([], !0);
        },
        J = function(e) {
          if (e.which === TS.utility.keymap.enter) {
            var t = $(e.target);
            t.is("input[data-invite-id]") ? _e(e) : t.is('input[name="domain"], input[name="channel_name"]') && (TS.ui.startButtonSpinner($('#sci_channels_create [data-action="sci_channels_create"]').get(0)), M(e));
          }
        },
        Q = function() {
          t = $("#sci_container"), e = $("body"), r = t.find(".list_container"), i = r.find(".list"), n = t.find("#channel_browser_filter"), a = t.find("#channel_browser_sort"), TS.model.ui_state && TS.model.ui_state.sort_shared_channel_browser_by && a.find('option[value="' + TS.model.ui_state.sort_shared_channel_browser_by + '"]').attr("selected", !0), ae().then(ke).catch(P);
        },
        X = function(e, t) {
          if (e.hasClass("channel_link")) {
            var n = e.data("channel-id");
            TS.view.onChannelReferenceClick(t, n);
          } else {
            var i = e.data("group-id");
            TS.view.onGroupReferenceClick(t, i);
          }
          TS.ui.fs_modal.close();
        },
        Z = function(e, t) {
          return TS.api.call(t ? "enterprise.groups.createShared" : "enterprise.channels.createShared", e);
        },
        ee = function(e) {
          return TS.api.call("channels.inviteShared", e);
        },
        te = function(e) {
          return TS.api.call(e ? "groups.listShared" : "channels.listShared");
        },
        ne = function() {
          return TS.api.call("channels.listSharedInvites");
        },
        ie = function(e) {
          return TS.api.call("channels.revokeSharedInvite", e);
        },
        re = function(e) {
          return TS.api.call("channels.sendSharedInvite", e);
        },
        ae = function() {
          var e = [te().reflect(), te(!0).reflect()];
          return TS.boot_data.feature_shared_channels_invite && e.push(ne().reflect()), Promise.all(e).then(function(e) {
            var t = [];
            if (e.forEach(function(e) {
                e.isFulfilled() || t.push(e.reason());
              }), t.length) return Promise.reject(new Error("Some shared channels start APIs failed:\n" + t.join("\n")));
            ue(e[0].value().data.channels), ue(e[1].value().data.channels, !0), TS.boot_data.feature_shared_channels_invite && (me(e[2].value().data.invites), me(e[3].value().data.invites, !0));
          });
        },
        se = function(e) {
          if (e) {
            var n = B(e, G(e));
            n && t.find("#sci_invite_container_" + e + ' [data-action="replace_emailed_invites"]').replaceWith(TS.templates.shared_channels_invites_emailed_invitations(n));
          }
        },
        oe = function(e) {
          if (e) {
            var n = B(e, G(e));
            if (n) {
              var i = t.find("#sci_invite_container_" + e);
              i.length ? i.replaceWith(TS.templates.shared_channels_invites_invite(n)) : t.find("#sci_invites_container .sci_list_header").after(TS.templates.shared_channels_invites_invite(n)), t.find("#sci_invites_container").removeClass("hidden");
            }
          }
        },
        le = function(e) {
          if (e) {
            t.find("#sci_invite_container_" + e).remove();
            var n = t.find("#sci_invites_container");
            1 === n.children().length && n.addClass("hidden");
          }
        },
        de = function(e, t) {
          _.remove(D(t), function(t) {
            return t.invite_id == e;
          });
        },
        ce = function(e) {
          var t = $(e.target),
            n = t.data("invite-id"),
            i = G(n);
          ie({
            invite_id: n
          }).then(function() {
            de(n, i), le(n), z();
          }).catch(P);
        },
        _e = function(e) {
          var t = $(e.target),
            n = t.parent();
          if (!TS.ui.validation.validate(n, {
              quiet: !0,
              fast: !0
            })) return TS.ui.validation.validate(n), void n.find('[data-action="sci_send"]').addClass("disabled");
          var i = t.data("invite-id"),
            r = n.find("input"),
            a = r.val();
          if (a) {
            var s = G(i);
            re({
              invite_id: i,
              email: a
            }).then(function() {
              return r.val(""), ne().then(function(e) {
                me(e.data.invites, s), se(i), S(i);
              });
            }).catch(P);
          }
        },
        ue = function(e, t) {
          e.length && (e = e.map(function(e) {
            var t = TS.shared.getModelObById(e.channel);
            return $.extend({}, e, t);
          })), t ? m = e : f = e;
        },
        me = function(e, t) {
          t ? p = e : h = e;
        },
        pe = function() {
          var e = t.find("#sci_channels_create .placeholder_overlay");
          t.find('#sci_channels_create input[name="domain"]').on("input", function(t) {
            e.toggleClass("hidden", !!$(t.target).val());
          });
        },
        fe = function() {
          t.find('#sci_channels_create [name="access"]').togglify({
            on_text: TS.i18n.t("Public", "shared")(),
            off_text: TS.i18n.t("Private", "shared")(),
            label: R(),
            off_label: H(),
            off_class: "ts_toggle_orange",
            initial_state: !0
          });
        },
        he = function(e) {
          y();
          var t = $(e.currentTarget).addClass("showing_sci_action");
          t.is(".sci_send_email_container") && t.find("input").focus();
        },
        ge = function(e) {
          var t = e.data("timeout");
          clearTimeout(t), e.removeClass("hidden").data("timeout", setTimeout(function() {
            e.addClass("hidden");
          }, 3e3));
        },
        Se = function() {
          if (!u) return c ? void(c && (u = !0, i.longListView("setHidden", !1), i.longListView("setItems", O(), !0), TS.utility.rAF(function() {
            TS.ui.utility.updateClosestMonkeyScroller(i);
          }))) : (ye(), void(u = !0));
        },
        Te = function(e) {
          var t = ["name", "creator", "created", "members_high", "members_low"],
            n = "name"; - 1 !== t.indexOf(e) && (n = e), be(F(), n), be(F(!0), n);
        },
        be = function(e, t) {
          "name" === t ? e.sort(function(e, t) {
            return e._name_lc > t._name_lc ? 1 : t._name_lc > e._name_lc ? -1 : 0;
          }) : "creator" === t ? e.sort(function(e, t) {
            var n, i;
            return n = TS.members.getMemberById(e.creator), i = TS.members.getMemberById(t.creator), n && i ? n._name_lc > i._name_lc ? 1 : i._name_lc > n._name_lc ? -1 : 0 : n && !i ? -1 : !n && i ? 1 : 0;
          }) : "created" === t ? e.sort(function(e, t) {
            return e.created < t.created ? 1 : t.created < e.created ? -1 : 0;
          }) : "members_high" === t ? e.sort(function(e, t) {
            var n = V(e),
              i = V(t);
            return n < i ? 1 : i < n ? -1 : 0;
          }) : "members_low" === t && e.sort(function(e, t) {
            var n = V(e),
              i = V(t);
            return n > i ? 1 : i > n ? -1 : 0;
          });
        },
        ve = function() {
          var e = TS.permissions.members.canCreateConvertOrgSharedChannels(),
            t = {
              body_template_html: TS.templates.shared_channels_invites_modal({
                show_create_shared_channel_btn: e
              }),
              onShow: Q,
              onCancel: Y,
              modal_class: "fs_modal_internal_scroll convert_to_shared_dialog"
            };
          TS.ui.fs_modal.start(t);
        },
        ye = function() {
          c = !0;
          var e = O(),
            t = {
              items: e,
              approx_item_height: 60,
              preserve_dom_order: !0,
              approx_divider_height: 35,
              pin_dividers: !0,
              makeElement: function(e) {
                var t = $(TS.templates.channel_browser_row({
                  is_shared: !0
                }));
                return e.$icon = t.find(".channel_browser_type_icon"), e.$name = t.find(".channel_browser_channel_name"), e.$creator = t.find(".channel_browser_created_by"), e.$date = t.find(".channel_browser_created_on"), e.$purpose = t.find(".channel_browser_channel_purpose"), e.$member_count_container = t.find(".channel_browser_member_count_container"), e.$member_count = t.find(".channel_browser_member_count"), e.$open = t.find(".channel_browser_open"), e.$preview = t.find(".channel_browser_preview"), e.$joined = t.find(".channel_browser_joined"), e.$shared_channel_icon = t.find(".shared_channel_icon"), e.$teams = t.find(".teams"), t;
              },
              makeDivider: function() {
                return $("<div>").addClass("channel_browser_divider");
              },
              renderItem: function(e, t, n) {
                TS.shared.isModelObOrgShared(t) ? n.$shared_channel_icon.removeClass("hidden") : n.$shared_channel_icon.addClass("hidden"), t.is_channel ? n.$icon.removeClass("ts_icon_lock").addClass("ts_icon_channel_pane_hash") : n.$icon.removeClass("ts_icon_channel_pane_hash").addClass("ts_icon_lock"), n.$name.text(t.name ? t.name : "");
                var i = TS.members.getMemberById(t.creator);
                i ? (n.$creator.removeClass("hidden"), n.$creator.find(".channel_browser_creator_name").text(TS.members.getPrefCompliantMemberName(i))) : n.$creator.addClass("hidden"), n.$date.text(TS.interop.datetime.toCalendarDate(t.created));
                var r = V(t);
                if (n.$member_count.text(r), t.purpose && t.purpose.value) {
                  var a = TS.utility.formatTopicOrPurpose(t.purpose.value);
                  a = a.replace(/<a .*?>(.*?)<\/a>/g, "$1"), n.$purpose.removeClass("hidden").html(a);
                } else n.$purpose.text("").addClass("hidden");
                if (t.is_member || t.is_group ? (n.$open.removeClass("hidden"), n.$preview.addClass("hidden"), n.$joined.removeClass("hidden")) : (n.$open.addClass("hidden"), n.$preview.removeClass("hidden"), n.$joined.addClass("hidden")), t.is_group ? (e.removeClass("channel_link").removeAttr("data-channel-id"), e.addClass("group_link").attr("data-group-id", t.id)) : (e.removeClass("group_link").removeAttr("data-group-id"), e.addClass("channel_link").attr("data-channel-id", t.id)), TS.shared.isModelObOrgShared(t)) {
                  var s = "",
                    o = 0,
                    l = [];
                  t.is_global_shared ? TS.model.enterprise_teams.forEach(function(e, t) {
                    if (t > 9) return void(o += 1);
                    l.push(e);
                  }) : t.shared_team_ids.forEach(function(e, t) {
                    if (t > 9) return void(o += 1);
                    var n = TS.enterprise.getTeamById(e);
                    l.push(n);
                  }), s += TS.templates.shared_channel_list_team_icon({
                    teams: l,
                    show_additional_teams: o > 0,
                    additional_teams: o,
                    org_shared: TS.shared.isModelObOrgShared(t)
                  }), n.$teams.html(s);
                } else n.$teams.empty();
              },
              renderDivider: function(e, t) {
                e.text(t.name);
              },
              calcItemHeight: function(e) {
                return e.outerHeight();
              }
            };
          i.longListView(t), v(), TS.utility.rAF(function() {
            i.monkeyScroll();
          });
        },
        we = function() {
          g = !1;
          var e = N(),
            n = {
              reserved_domain: TS.model.team.domain
            };
          e && (n.enterprise_info = TS.model.enterprise);
          var i = TS.templates.shared_channels_invites_create(n);
          t.find("#sci_channels_create").html(i).find("textarea").autogrow(), L("#sci_channels_create"), U(), $("#fs_modal.convert_to_shared_dialog").toggleClass("fs_modal_internal_scroll", !1), t.find("#sci_header_wrapper").addClass("hidden"), pe(), fe(), e && W(), t.find('#sci_channels_create [name="domain"]').focus(), Ladda.bind('#sci_channels_create [data-action="sci_channels_create"]'), Oe();
        },
        ke = function() {
          g = !0, t.find("#sci_header_wrapper").removeClass("hidden");
          var e = F(),
            n = F(!0);
          if (!(e.length || n.length)) return Fe(), L("#sci_no_shared_channels"), U(), v(), null;
          L("#sci_channels_container"), $("#fs_modal.convert_to_shared_dialog").toggleClass("fs_modal_internal_scroll", !0), Te(TS.model.ui_state && TS.model.ui_state.sort_shared_channel_browser_by ? TS.model.ui_state.sort_shared_channel_browser_by : a.val()), Se(), Oe(!0);
        },
        xe = function(e) {
          g = !1;
          var n = TS.templates.shared_channels_invites_send(e);
          t.find("#sci_send").html(n), L("#sci_send"), U(), Oe();
        },
        Me = function(e, t, n, i) {
          n && (i = !TS.ui.validation.validate(e, {
            quiet: !0,
            fast: !0
          })), t.toggleClass("disabled", i);
        },
        Ce = function(e) {
          if (!$(e.target).is("a, input, .btn")) {
            var t = $(e.currentTarget),
              n = t.hasClass("showing_contents");
            t.toggleClass("showing_contents", !n), t.find(".sci_toggle_icon").toggleClass("ts_icon_caret_right", n).toggleClass("ts_icon_caret_down", !n);
          }
        },
        Ie = function(e) {
          var t = $(e.target).closest(".sci_invite_container").find(".sci_copy_link_mini_container");
          t.toggleClass("hidden", !t.hasClass("hidden")), k(e);
        },
        Ae = function(e) {
          var t = $(e.target).closest(".sci_invite_container").find(".sci_send_email_mini_container");
          t.toggleClass("hidden", !t.hasClass("hidden")).find("input").focus(), w(e);
        },
        Ee = function(e) {
          var n = $(e.target),
            i = t.find("#sci_channels_create"),
            r = n.val(),
            a = "specific" === r,
            s = "external" === r;
          $("#sci_specific_team").toggleClass("hidden", !a), $("#sci_external_team").toggleClass("hidden", !s), i.find('[for="share_with_specific"]').toggleClass("hidden", !a), i.find('[for="share_with_external"]').toggleClass("hidden", !s), "specific" === r && i.find('[name="team_list"]').focus(), "external" === r && i.find('[name="domain"]').focus();
          Me(i.find(A()), i.find('[data-action="sci_channels_create"]'), !0), Be();
        },
        Oe = function(e) {
          e ? (TS.ui.fs_modal.unbindBackButton(), TS.ui.fs_modal.hideBackButton()) : (TS.ui.fs_modal.bindBackButton(ke), TS.ui.fs_modal.showBackButton());
        },
        Fe = function(e) {
          var n = t.find("#sci_no_shared_channels"),
            i = n.find(".sci_no_shared_note"),
            r = TS.i18n.t("You don’t have any shared channels yet.", "shared")();
          if (e) {
            var a = TS.i18n.t("No matches found for <strong> {escaped_query_string} </strong>", "shared")({
              escaped_query_string: TS.utility.truncateAndEscape(e, 50)
            });
            i.html(a);
          } else i.text(r);
        },
        Be = function() {
          t.find(".ts_toggle_on_label").text(R()), t.find(".ts_toggle_off_label").text(H());
        },
        De = function(e, n) {
          if (!t) return !0;
          if (!e.is("input")) return !0;
          var i = $("#sci_channels_create"),
            r = e.is('[name="domain"]') ? e : i.find("[name=domain]"),
            a = e.is("[name=channel_name]") ? e : i.find("[name=channel_name]"),
            s = r.val(),
            o = a.val();
          if (!s) return !0;
          if (s = s.trim(), o = o.trim(), I(s, o)) {
            n.quiet || e.addClass("invalid_invite");
            var l = TS.i18n.t("This invite already exists. Try a different team or channel!", "shared")();
            return void TS.ui.validation.showWarning(e, l, n);
          }
          return r === e ? o && !n.quiet && a.hasClass("invalid_invite") && (a.removeClass("invalid_invite"), TS.ui.validation.validate(a)) : s && !n.quiet && r.hasClass("invalid_invite") && (r.removeClass("invalid_invite"), TS.ui.validation.validate(r)), n.quiet || e.removeClass("invalid_invite"), !0;
        };
    }();
  },
  2647: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.team_picker", {
        STYLES: {
          normal: "normal",
          small: "small"
        },
        onStart: function() {},
        make: function(n, i) {
          i = i || {};
          var r, a, s;
          i.append || n.addClass("hidden"), i.style = _.get(TS.ui.team_picker.STYLES, i.style, TS.ui.team_picker.STYLES.normal);
          var o = {
            append: !!i.append,
            data: e(i.teams || [], i.preselected_ids || []),
            approx_item_height: 38,
            per_page: 50,
            placeholder_text: TS.i18n.t("Add teams", "team_picker")(),
            classes: "team_picker",
            restrict_preselected_item_removal: i.restrict_preselected_item_removal || !1,
            single: !!i.single,
            style: i.style,
            template: function(e) {
              var t = TS.templates.invite_team_small({
                team: e.team
              });
              return new Handlebars.SafeString(t);
            },
            tokenTemplate: function(e) {
              var t = TS.templates.invite_team_token({
                team: e.team
              });
              return new Handlebars.SafeString(t);
            },
            filter: function(e, n) {
              var i = e.team;
              return r !== n && (a = new RegExp("^" + TS.utility.regexpEscape(n), "i"), s = new RegExp("(-|_|\\+|\\s|\\.|@)" + TS.utility.regexpEscape(n), "i"), r = n), t(i, a) || t(i, s);
            },
            noResultsTemplate: function(e) {
              return e ? TS.i18n.t("No teams found matching <strong>{query}</strong>", "team_picker")({
                query: _.escape(e)
              }) : TS.i18n.t("No teams found", "team_picker")();
            }
          };
          n.lazyFilterSelect(o);
        },
        value: function(e) {
          return e.lazyFilterSelect("value");
        }
      });
      var e = function(e, t) {
          return e && e.map(function(e) {
            return {
              team: e,
              preselected: -1 !== t.indexOf(e.id)
            };
          });
        },
        t = function(e, t) {
          return e.name && e.name.match(t);
        };
    }();
  },
  2648: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.thread", {
        expanded_threads: {},
        buildThreadHTML: function(e, n) {
          try {
            var i = e.model_ob,
              r = e.root_msg,
              a = e.replies,
              d = [];
            if (e.max_visible_ts) {
              var c = _.takeWhile(a, function(t) {
                return t.ts <= e.max_visible_ts;
              });
              d = _.drop(a, c.length), a = c;
            }
            var u, m = "thread_" + i.id + "_" + e.ts.replace(".", "_");
            i.is_im && (u = TS.members.getMemberById(i.user));
            var p, f, h = TS.replies.getSubscriptionState(i.id, r.thread_ts),
              g = h && h.subscribed,
              S = s(e);
            S >= TS.replies.DEFAULT_HISTORY_API_LIMIT && (p = o(e), f = l(e));
            return TS.templates.thread({
              id: m,
              ts: e.ts,
              model_ob: i,
              thread: e,
              root_msg: r,
              conversation_permalink: TS.utility.msgs.constructConversationPermalink(i, r.ts),
              channel_msg_permalink: TS.utility.msgs.constructMsgPermalink(i, r.ts),
              replies: a,
              new_replies: d,
              new_replies_count: t(d.length),
              im_user: u,
              is_subscribed: g,
              options: n || {},
              view_previous_count: S,
              visible_reply_count: p,
              total_reply_count: f
            });
          } catch (e) {
            return TS.error("Threads view: error rendering thread"), TS.console.logError(e, "threads_view_error"), "";
          }
        },
        updateThreadWithMessage: function(e, t, s, o) {
          var l, d = e.find('ts-message[data-ts="' + s.ts + '"]'),
            c = {};
          "inline" === e.attr("data-context") && (c.inline = !0), l = TS.templates.builders.buildThreadMsgHTML(s, t.model_ob, t, c);
          var _ = $(l);
          if (d.length) d.hasClass("hidden") && _.addClass("hidden"), d.replaceWith(_);
          else if (o) {
            var u = e.find(".thread_replies_container"),
              m = e.find(".new_replies_container ts-message");
            u.append(m).append(_), n(e, !1);
          } else e.find(".new_replies_container").append(_), i(t, e);
          TS.utility.msgs.isMsgReply(s) ? s.is_ephemeral && r(t, e, s) : (a(t, e, s), r(t, e, s)), TS.attachment_actions.select.decorateNewElements(e), g(t, e);
        },
        removeMessageFromThread: function(e, t, n) {
          var a = $("#" + TS.templates.makeMsgDomIdInThreadsView(n.ts));
          a.length && (n.is_pending ? a.remove() : a.addClass("delete_mode").slideUp(200, function() {
            a.remove();
          }), i(t, e), g(t, e), n.is_ephemeral && r(t, e));
        },
        revealNewReplies: function(e, t) {
          return new Promise(function(i) {
            var s = e.find(".new_reply_indicator"),
              o = e.find(".thread_replies_container"),
              l = e.find(".new_replies_container");
            s.animate({
              height: 0
            }, 150, function() {
              n(e, !1), s.css("height", "");
              var t = o.height();
              o.height(t), o.css("overflow", "hidden"), l.find("ts-message").appendTo(o), o.css("height", "auto");
              var r = o.height();
              o.height(t).animate({
                height: r
              }, 300, function() {
                l.css("height", ""), o.css("height", ""), o.css("overflow", ""), i();
              });
            }), a(t, e, t.root_msg), r(t, e);
          });
        },
        revealPreviousReplies: function(e, t, n) {
          var i = {};
          return "inline" === e.attr("data-context") && (i.inline = !0), new Promise(function(o, l) {
            n.then(function() {
              var n = s(t),
                l = e.find(".view_all_replies_container"),
                d = function() {
                  n ? (TS.ui.thread.hideThreadLoadingSpinner(e), a(t, e, t.root_msg)) : l.remove(), r(t, e);
                  var s = e.find(".thread_replies_container"),
                    d = s.find("ts-message:first"),
                    c = $("<div></div>");
                  d.length ? d.before(c) : s.append(c);
                  var u = _.takeWhile(t.replies, function(e) {
                    return e.ts < t.min_visible_ts;
                  });
                  _.forEach(u, function(e) {
                    c.append(TS.templates.builders.buildThreadMsgHTML(e, t.model_ob, t, i));
                  }), TS.attachment_actions.select.decorateNewElements(e);
                  var m = c.height();
                  c.height(0).animate({
                    height: m
                  }, 300, function() {
                    var e = c.find("ts-message");
                    d.length ? e.insertBefore(d) : e.appendTo(s), c.remove(), o();
                  });
                };
              l.length && !n ? l.animate({
                height: 0
              }, 150, d) : d();
            }, function() {
              f(e), l();
            });
          });
        },
        renderReplyInput: function(e, t) {
          var n = t.model_ob,
            i = t.root_msg.ts,
            r = e.find(".reply_input_container");
          r.empty();
          var a = TS.permissions.members.canPostInModelOb(TS.model.user, n);
          if (TS.boot_data.feature_default_shared_channels && !a && (a = TS.channels.read_only.threads.canThread(n.id)), !a || n.is_archived) return void u(n, r);
          if (!TS.replies.canReplyToMsg(n, t.root_msg)) return void(n.is_channel && !n.is_member ? m(n, r) : e.addClass("no_reply_container"));
          TS.ui.inline_msg_input.make(r, {
            placeholder: TS.i18n.t("Reply...", "threads")(),
            complete_member_specials: !!TS.boot_data.feature_name_tagging_client && ["BKhere"],
            complete_cmds: !0,
            in_thread: !0,
            model_ob: n,
            onSubmit: function(a, s) {
              if (TS.model.ms_connected) {
                if (n.is_archived) return void TS.generic_dialog.alert(TS.i18n.t("This channel has been archived; you cannot send messages to it.", "threads")());
                var o = _.last(t.replies);
                t.max_visible_ts && (o = _.findLast(t.replies, function(e) {
                  return e.ts <= t.max_visible_ts;
                }));
                if (!TS.client.ui.maybeHandleReactionCmd(o, s, function() {
                    d(r, n, i);
                  })) {
                  if ("/" === s.substr(0, 1) && "//" !== s.substr(0, 2)) d(r, n, i), TS.client.ui.sendSlashCommand(n, s, t.root_msg);
                  else {
                    TS.utility.msgs.removeAllEphemeralMsgsByType("threads_temp_slash_cmd_feedback", n.id, i);
                    var l = r.find(".reply_broadcast_toggle").prop("checked");
                    d(r, n, i);
                    var c = TS.ui.thread.getContextForEl(e),
                      u = l ? "THREADS_REPLY_BROADCAST_CLICKED" : "THREADS_REPLY",
                      m = _.get(t, ".root_msg.reply_count", 0) + 1;
                    TS.ui.thread.trackEvent(n.id, t.root_msg.ts, c, u, {
                      num_msg_in_thread: m
                    }), l && TS.log(2004, "Submitting broadcast from threads view for " + n.id + "-" + t.root_msg.ts), TS.client.ui.sendMessage(n, s, t.root_msg, l);
                  }
                  return null;
                }
              }
            },
            getMsgDivForEditing: function() {
              var n = e.closest("ts-thread"),
                i = t.replies,
                r = _.reject(i, function(e) {
                  return "tombstone" === e.subtype;
                });
              "tombstone" !== t.root_msg.subtype && r.unshift(t.root_msg), _.reverse(r);
              var a = TS.utility.msgs.getEditableMsgByProp("user", TS.model.user.id, r);
              return a ? n.find('ts-message[data-ts="' + a.ts + '"]') : null;
            },
            onTextChange: function(e) {
              var t = TS.utility.contenteditable.value(e),
                a = !t.trim(),
                s = a ? "" : t;
              TS.storage.storeReplyInput(n.id, i, s), p(r);
            }
          });
          var s = r.find(".message_input");
          s.on("focusin", function() {
            r.addClass("has_focus");
          }).on("focusout", function() {
            var e = TS.utility.contenteditable.isEmpty(s, !0),
              t = document.activeElement === this;
            e && !t && r.removeClass("has_focus");
          }), c(n, i, r);
          var o = TS.storage.fetchReplyInput(n.id, i);
          o && (TS.utility.populateInput(s, o), r.addClass("has_focus"));
        },
        joinChannelFromThread: function(e, t) {
          var n = t.closest("ts-thread");
          if (n.length) {
            var i = n.data("model-ob-id"),
              r = TS.shared.getModelObById(i);
            r && (TS.channels.joinById(r.id, null, {
              in_background: !0
            }), n.find(".join_channel_from_thread").addClass("disabled"));
          }
        },
        submitReply: function(e, t) {
          if (t && 0 !== t.length) {
            var n = t.closest(".reply_input_container").find("form");
            0 !== n.length && n.submit();
          }
        },
        findAndPopulateInput: function(e, t, n) {
          if (t && n) {
            var i = 'ts-thread[data-model-ob-id="' + t + '"][data-thread-ts="' + n + '"]',
              r = $(i).find(".message_input");
            TS.utility.populateInput(r, e), TS.storage.storeReplyInput(t, n, e);
          }
        },
        showThreadLoadingSpinner: function(e) {
          if (TS.model.threads_view_is_showing && e && e.length) {
            e.find(".view_all_loading_container").html(TS.templates.infinite_spinner({
              size: "small"
            }));
          }
        },
        hideThreadLoadingSpinner: function(e) {
          if (TS.model.threads_view_is_showing && e && e.length) {
            e.find(".view_all_loading_container").empty();
          }
        },
        startInlineThread: function(t, n) {
          e(t.id, n.ts, !0), TS.view.rebuildMsg(n);
        },
        expandInlineThread: function(t) {
          var n = t.attr("data-model-ob-id"),
            i = t.attr("data-thread-ts"),
            r = TS.shared.getModelObById(n);
          if (r) {
            var a = TS.utility.msgs.getMsg(i, r.msgs);
            if (a) {
              var s = {
                model_ob: r,
                root_msg: a,
                replies: [],
                ts: a.ts
              };
              TS.ui.utility.preventElementFromScrolling(t.find(".message_content"), function() {
                t.addClass("expanded");
              }), TS.ui.thread.renderReplyInput(t, s);
              var o = TS.replies.getThread(n, i).then(function(e) {
                var t = 1 / 0;
                s.replies && s.replies.length && (t = _.first(s.replies).ts), s.min_visible_ts = t;
                var n = _.filter(e, function(e) {
                  return e.ts !== a.ts;
                });
                s.replies = n;
              });
              return TS.ui.thread.revealPreviousReplies(t, s, o), e(n, i, !0), null;
            }
          }
        },
        collapseInlineThread: function(t) {
          var n = t.attr("data-model-ob-id"),
            i = t.attr("data-thread-ts"),
            r = TS.shared.getModelObById(n);
          if (r) {
            var a = TS.utility.msgs.getMsg(i, r.msgs);
            if (a) {
              if (!TS.utility.msgs.msgHasReplies(a)) return e(n, i, !1), void TS.view.rebuildMsg(a);
              var s = t.find(".thread_replies_container");
              s.animate({
                height: 0
              }, 300, function() {
                s.css("height", ""), s.find("ts-message").remove(), TS.ui.utility.preventElementFromScrolling(t.find(".message_content"), function() {
                  t.removeClass("expanded");
                });
              }), t.find(".reply_input_container").html(TS.templates.thread_inline_input_placeholder({
                model_ob: r,
                root_msg: a,
                conversation_permalink: TS.utility.msgs.constructConversationPermalink(r, a.ts),
                num_total_threads: a.reply_count
              })), e(n, i, !1);
            }
          }
        },
        isThreadExpanded: function(e, t) {
          return !!TS.ui.thread.expanded_threads[e + t];
        },
        isMessageBeingConvertedToThread: function(e, t) {
          return !TS.utility.msgs.msgHasReplies(t) && !TS.utility.msgs.isMsgReply(t) && TS.ui.thread.isThreadExpanded(e, t.ts);
        },
        makeInlineThread: function(e, t) {
          var n = TS.shared.getModelObById(e);
          if (!n) return null;
          var i = TS.utility.msgs.getMsg(t, n.msgs);
          if (!i) return null;
          var r = {
            model_ob: n,
            root_msg: i,
            replies: [],
            ts: i.ts
          };
          if (TS.ui.thread.isThreadExpanded(e, t)) {
            var a = _.filter(n.msgs, function(e) {
              return e.ts !== t && e.thread_ts === t;
            });
            r.replies = a;
          }
          return r;
        },
        trackEvent: function(e, t, n, i, r) {
          if (!e || !t || !n) return void TS.error("error collecting clog data for threads");
          var a = h(e, t, n, r);
          "threads_view" === n && TS.client.ui.threads.incrementTrackingSeqId(), TS.clog.track(i, a);
        },
        getTrackingPayloadForEl: function(e, t) {
          var n = {},
            i = TS.ui.thread.getContextForEl(e);
          if ("threads_view" !== i && "convo" !== i) return n;
          var r = e.closest("ts-thread, ts-conversation");
          if (!r.length) return n;
          var a = r.attr("data-model-ob-id"),
            s = r.attr("data-thread-ts");
          return a && s ? h(a, s, i, t) : n;
        },
        getContextForEl: function(e) {
          return e.closest("#threads_msgs").length > 0 ? "threads_view" : e.closest("#convo_tab").length > 0 ? "convo" : e.closest("#msgs_scroller_div").length > 0 ? "message_pane" : e.closest("#unread_msgs_scroller_div").length > 0 ? "unreads_view" : "other";
        }
      });
      var e = function(e, t, n) {
          TS.ui.thread.expanded_threads[e + t] = n;
        },
        t = function(e) {
          return TS.i18n.t("{reply_count,plural,=1{{reply_count} new reply}other{{reply_count} new replies}}", "threads")({
            reply_count: e
          });
        },
        n = function(e, t) {
          var n = e.find(".thread_messages");
          t ? n.addClass("show_new_reply_indicator") : n.removeClass("show_new_reply_indicator");
        },
        i = function(e, i) {
          if (e && i && i.length) {
            var r = _.reduce(e.replies, function(t, n) {
                return n.ts > e.max_visible_ts && (t += 1), t;
              }, 0),
              a = i.find(".new_reply_indicator"),
              s = a.find(".reveal_new_replies");
            if (r <= 0) return n(i, !1), void s.empty();
            var o = t(r);
            s.text(o), n(i, !0);
          }
        },
        r = function(e, t) {
          if (e && t && t.length) {
            var n = t.find(".visible_reply_count");
            if (s(e) >= TS.replies.DEFAULT_HISTORY_API_LIMIT) {
              var i = o(e),
                r = l(e),
                a = TS.i18n.t("{visible_reply_count} of {total_reply_count}", "threads")({
                  visible_reply_count: i,
                  total_reply_count: r
                });
              n.text(a);
            } else n.text("");
          }
        },
        a = function(e, t, n) {
          if (t && t.length && n && n.replies) {
            var i = t.find(".view_all_replies_container");
            if (i.length) {
              var r = i.find(".view_all_replies"),
                a = s(e);
              if (!a) return void i.addClass("hidden");
              var o = TS.i18n.t("View {reply_count,plural,=1{{reply_count} previous reply}other{{reply_count} previous replies}}", "threads")({
                reply_count: a
              });
              r.text(o);
            }
          }
        },
        s = function(e) {
          var t = e.root_msg.reply_count,
            n = e.replies;
          if (n && n.length) {
            var i = _.filter(n, function(e) {
              return !e.is_ephemeral && !TS.utility.msgs.isTempMsg(e);
            }).length;
            t = e.root_msg.reply_count - i, t = Math.min(TS.replies.DEFAULT_HISTORY_API_LIMIT, t);
          }
          return t;
        },
        o = function(e) {
          return e.max_visible_ts ? _.reduce(e.replies, function(t, n) {
            return n.ts <= e.max_visible_ts && (t += 1), t;
          }, 0) : _.get(e, ".replies", []).length;
        },
        l = function(e) {
          var t = _.filter(e.replies, function(e) {
            return e.is_ephemeral || TS.utility.msgs.isTempMsg(e);
          }).length;
          return _.get(e, "root_msg.replies.length", 0) + t;
        },
        d = function(e, t, n) {
          var i = e.find(".message_input");
          TS.utility.populateInput(i, "", 0), TS.utility.contenteditable.clearHistory($("#reply_container .message_input")), TS.storage.storeReplyInput(t.id, n, ""), e.find(".reply_broadcast_toggle").attr("checked", !1);
        },
        c = function(e, t, n) {
          if (e && t && n && 0 !== n.length && TS.permissions.members.canPostInChannel(e)) {
            n.append(TS.templates.reply_broadcast_buttons({
              model_ob: e,
              label_id: t,
              view: "threads"
            }));
            var i = n.find(".reply_broadcast_label_container, .reply_send"),
              r = n.find(".message_input");
            i.mousedown(function(e) {
              e.preventDefault(), TS.utility.contenteditable.focus(r);
            }).click(function() {
              TS.utility.contenteditable.focus(r);
            });
          }
        },
        u = function(e, t) {
          t.html(TS.templates.reply_limited({
            channel_name: TS.shared.getDisplayNameForModelOb(e),
            is_archived: e.is_archived
          }));
        },
        m = function(e, t) {
          t.html(TS.templates.join_channel_from_thread({
            model_ob_name: e.name,
            is_threads_view: !0
          }));
        },
        p = function(e) {
          var t = e.find(".message_input"),
            n = !!TS.msg_edit.isMessageTooLong(t);
          e.find(".reply_container_info").toggleClass("hidden", n);
        },
        f = function(e) {
          if (TS.model.threads_view_is_showing && e && e.length) {
            var t = e.find(".view_all_replies_container"),
              n = t.find(".view_all_loading_container"),
              i = t.find(".view_all_error_msg"),
              r = t.find(".view_all_replies");
            n.empty(), i.removeClass("hidden");
            var a = TS.i18n.t("Try Again", "threads")();
            r.removeClass("active").text(a);
          }
        },
        h = function(e, t, n, i) {
          if (!e || !t || !n) return void TS.error("error collecting clog data for threads");
          var r = {
            parent_message_id: t,
            channel_id: e,
            is_threads_view: "threads_view" === n ? 1 : 0,
            is_flexpane: "convo" === n ? 1 : 0
          };
          return "threads_view" === n && _.merge(r, TS.client.ui.threads.getTrackingData()), i && (r = _.merge(r, i)), r;
        },
        g = function(e, t) {
          var n = TS.templates.builders.buildThreadParticipantListHTML(e.root_msg);
          t.find(".thread_participants").html(n);
        };
    }();
  },
  2649: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.toast", {
        show: function(e) {
          m();
          var t = $.extend({}, i, e);
          return ["success", "warning", "error"].indexOf(t.type) < 0 && (t.type = i.type), ["top", "bottom"].indexOf(t.position) < 0 && (t.position = i.position), t.message = new Handlebars.SafeString(t.message), t.retry_message = new Handlebars.SafeString(t.retry_message), e.retry_action && (t._retryable = !0), f(t), t;
        }
      });
      var e, t, n, i = {
          dismissable: !1,
          message: TS.i18n.t("Success", "toast")(),
          position: "bottom",
          retry_action: _.noop,
          retry_message: TS.i18n.t("Something went wrong. Try again?", "toast")(),
          type: "success",
          _retryable: !1
        },
        r = [],
        a = !1,
        s = function() {
          e.on("click", ".dismiss_toast", o), e.on("click", ".retry_toast", g);
        },
        o = function() {
          t && clearTimeout(t), c();
        },
        l = function() {
          h() && p();
        },
        d = function() {
          return r.shift();
        },
        c = function() {
          h() ? p() : (e.removeClass("toast_in").addClass("toast_out"), a = !1, l());
        },
        u = function() {
          t && clearTimeout(t), t = setTimeout(function() {
            c();
          }, 3e3);
        },
        m = function() {
          if (!e) {
            e = $('<div id="toast" class="hidden">');
            var t = TS.templates.toast({});
            e.html(t), e.appendTo("body"), s();
          }
        },
        p = function() {
          var e = d();
          e && f(e, !0);
        },
        f = function(t, i) {
          if (a && !i) r.push(t);
          else {
            n = t;
            var s = TS.templates.toast({
              instance: t,
              already_exists: !!i
            });
            e.html(s), S();
          }
        },
        h = function() {
          return r.length > 0;
        },
        g = function() {
          n._retryable && "error" === n.type && (n.retry_action(), o());
        },
        S = function() {
          a || (e.removeClass("hidden").removeClass("toast_out").addClass("toast_in"), a = !0), u();
        };
    }();
  },
  2650: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.toggle", {
        onStart: function() {
          $('input[type="checkbox"][data-style="toggle"]').each(function() {
            $(this).togglify();
          });
        },
        togglify: function(n, i) {
          return i ? i = _.defaults({}, i, e) : (i = {}, i.initial_state = n.data("initial_state") ? n.data("initial_state") : e.initial_state, i.label = n.data("label") ? n.data("label") : e.label, i.on_class = n.data("on-class") ? n.data("on-class") : e.on_class, i.on_text = n.data("on-text") ? n.data("on-text") : e.on_text, i.off_text = n.data("off-text") ? n.data("off-text") : e.off_text, i.off_class = n.data("off-class") ? n.data("off-class") : e.off_class, i.off_label = n.data("off-label") ? n.data("off-label") : e.off_label, i.disabled = n.data("disabled") ? n.data("disabled") : e.disabled, i.cls = n.data("cls") ? n.data("cls") : e.cls), null === i.initial_state && (i.initial_state = !!n.is(":checked")), null === i.disabled && (i.disabled = !!n.is(":disabled")), t(n, i), n;
        }
      });
      var e = {
          cls: "",
          initial_state: null,
          label: "",
          on_text: TS.i18n.t("On", "toggle")(),
          on_class: "",
          off_text: TS.i18n.t("Off", "toggle")(),
          off_class: "",
          off_label: "",
          disabled: null
        },
        t = function(t, i) {
          var r = t,
            a = t.closest("label");
          if (a.length) {
            r = a;
            var s = $.trim(a.text());
            s && i.label === e.label && i.off_label === e.off_label && (i.label = s);
          }
          var o = n(i),
            l = $(o);
          r.addClass("hidden").after(l), l.on("click", function() {
            $(this).toggleClass("checked"), t.prop("checked", $(this).hasClass("checked")).trigger("change"), i.on_class !== i.off_class ? ($(this).toggleClass(i.on_class, $(this).hasClass("checked")), $(this).toggleClass(i.off_class, !$(this).hasClass("checked"))) : "" !== i.on_class && TS.warn("TS.ui.toggle: on & off classes are the same. You may want to use the `cls` option instead");
          });
        },
        n = function(e) {
          return TS.templates.toggle({
            settings: e
          });
        };
    }(), $.fn.togglify = function(e) {
      "use strict";
      return TS.ui.toggle.togglify($(this), e);
    };
  },
  2651: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.token_input", {
        onStart: function() {},
        make: function(e, t) {
          if (e && e.length) {
            var r = e.find("input");
            r && r.length && (r.val().trim() && n(r), e.on("click", function() {
              e.addClass("active"), r.focus();
            }), r.on("paste", function() {
              setTimeout(function() {
                var e = r.val().trim();
                if (!/,/.test(e)) return !0;
                e && n(r, t);
              }, 0);
            }).on("keydown", function(e) {
              var a = r.val().length;
              a || e.which !== TS.utility.keymap.del ? 1 !== a || r.prev(".token").length || i(r, t) : i(r, t), a && e.which === TS.utility.keymap.enter && n(r, t);
            }).on("keyup", function(e) {
              !r.val().length || e.which !== TS.utility.keymap.comma && e.which !== TS.utility.keymap.space || n(r, t);
            }).on("focusout", function() {
              n(r, t), e.removeClass("active");
            }).on("focusin", function() {
              e.addClass("active");
            }), r.data("placeholder", r.attr("placeholder")), e.find(".token").length && r.attr("placeholder", ""), t && t.remove_on_click && e.on("click", ".token", function() {
              $(this).remove();
            }));
          }
        },
        value: function(n, i) {
          return i ? t(n, i) : e(n);
        }
      });
      var e = function(e) {
          var t = [];
          return e.find(".token").each(function() {
            var e = $(this).text().trim();
            t.push(e);
          }), t.join(", ");
        },
        t = function(e, t) {
          var i = e.find("input");
          e.find(".token").remove(), i.val(t), n(i);
        },
        n = function(e, t) {
          var n = e.val().trim(),
            i = n.split(/\s*[,\s]\s*/),
            r = !1;
          i.forEach(function(n) {
            if (n) {
              var i = $("<span />").addClass("token").text(n);
              i.toggleClass("remove_on_click", t && t.remove_on_click), e.before(i), r = !0, t && t.onTokenChange && t.onTokenChange(e, i);
            }
          }), r && e.attr("placeholder", "").val("");
        },
        i = function(e, t) {
          var n = e.prev(".token");
          if (n.length) {
            var i = n.text();
            n.remove(), e.val(i + " ");
          } else e.attr("placeholder", e.data("placeholder"));
          t && t.onTokenChange && t.onTokenChange(e);
        };
    }();
  },
  2652: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.unsaved_form_warning", {
        onStart: function() {
          $("form[data-unsaved-form-warning]").each(function(e, t) {
            var n = $(t).serializeArray(),
              i = !1;
            t.hasAttribute("data-validation-form") ? TS.ui.validation.completed_sig.add(function(e, n) {
              n.passed && e[0] === t && (i = !0);
            }) : $(t).on("submit", function() {
              i = !0;
            }), $(window).on("beforeunload", function() {
              if (!i && !_.isEqual(n, $(t).serializeArray())) return TS.i18n.t("Changes you made may not be saved.", "unsaved_warning")();
            });
          });
        }
      });
    }();
  },
  2654: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.utility", {
        onStart: _.noop,
        preventElementFromScrolling: function(e, t, i) {
          if (!e.length || n) return void t();
          var r = e.offset();
          try {
            n = !0, t();
          } finally {
            n = !1;
          }
          if (!_.isFunction(i) || (e = i(), e.length)) {
            var a = e.offset().top,
              s = a - r.top,
              o = e.closest(".monkey_scroller");
            if (o.length || (o = e.closest(":scrollable(vertical)")), o.is("html") && (o = $("body")), 0 !== s) {
              var l = o.scrollTop() + s;
              o.scrollTop(Math.round(l));
            }
            TS.client && TS.ui.utility.updateClosestMonkeyScroller(e);
          }
        },
        updateClosestMonkeyScroller: function(e, t) {
          if (e) {
            var n = e.closest(".monkey_scroller"),
              i = n.data("monkeyScroll");
            i && (n.data("monkeyScrollBeingCalled") || (n.data("monkeyScrollBeingCalled", !0), TS.utility.setImmediate(function() {
              i.updateFunc(t), n.data("monkeyScrollBeingCalled", !1);
            })));
          }
        },
        mkFocusStyleListener: function(e, t, n) {
          var i = "." + e,
            r = "." + t,
            a = t + "--" + (n || "focus"),
            s = "." + a;
          return function(e) {
            var t = $(i);
            if (!t.hasClass("hidden")) {
              var n = e.target,
                o = t.find(s),
                l = o.get(0);
              if (l && !t.get(0).contains(n)) return void o.removeClass(a);
              l && l.contains(n) || $(n).hasClass(a) || (o.removeClass(a), $(n).closest(r).addClass(a));
            }
          };
        },
        nextWithClass: function(e, t) {
          var n = e.next();
          return n.hasClass(t) || !n.length ? n : TS.ui.utility.nextWithClass(n, t);
        },
        prevWithClass: function(e, t) {
          var n = e.prev();
          return n.hasClass(t) || !n.length ? n : TS.ui.utility.prevWithClass(n, t);
        },
        inTabFlow: function(e) {
          var t = e.nodeName.toLowerCase(),
            n = e.getAttribute("tabindex"),
            r = null == n || e.tabIndex >= 0,
            a = null !== n && n >= 0,
            s = r || a,
            o = i.test(t),
            l = "a" === t;
          return !(!o || e.disabled || "hidden" === e.type || !s) || (!(!l || !(e.href && s || !e.href && a)) || !(o || l || !a));
        },
        isVisible: function(e) {
          var t = $(e);
          return !!t.outerHeight() && !!t.outerWidth() && "visible" === t.css("visibility") && "none" !== t.css("display") && "1" === t.css("opacity");
        },
        findNodeInRegion: function(e, t, n, i, r) {
          var a = (n - r) / (t - i / 5) + 5;
          return function t(n, r) {
            var s = document.elementFromPoint(n, r),
              o = $(s).closest(e);
            if (o.length) return o;
            if (!(n <= i)) {
              return t(n - 5, r - a);
            }
          }(t, n);
        },
        isTextInput: function(t) {
          return t.is(e);
        }
      });
      var e = ["input:not([type])", "input[type=text]", "input[type=search]", "input[type=url]", "input[type=tel]", "input[type=email]", "input[type=password]", "input[type=number]", "input[type=date]", "input[type=month]", "input[type=week]", "input[type=time]", "input[type=datetime]", "input[type=datetime-local]", "textarea", "[role=textbox]"].join(","),
        t = function(e) {
          var t = function(e, t, n) {
              return t || (TS.ui.utility.inTabFlow(n) && TS.ui.utility.isVisible(n) && e(n) ? n : null);
            },
            n = function() {
              return !0;
            };
          return function(i, a) {
            var s = a || n,
              o = t.bind(t, s);
            return $(i).find(r).toArray()[e](o, null);
          };
        };
      TS.ui.utility.firstFocusableChild = t("reduce"), TS.ui.utility.lastFocusableChild = t("reduceRight");
      var n = !1,
        i = /^(input|select|textarea|button)$/,
        r = "input,select,textarea,button,a,div[tabindex],span[tabindex]";
    }();
  },
  2655: function(e, t) {
    ! function() {
      "use strict";

      function e(e, t) {
        if (e.is('input[type="radio"]')) {
          if ($(document.querySelectorAll('[name="' + e.prop("name") + '"][data-validation]')).filter(":checked").length) return !0;
          TS.ui.validation.showWarning(e, TS.i18n.t("Please select an option", "ui_validation")(), t);
        } else if (e.is('input[type="checkbox"]')) {
          if ($(document.querySelectorAll('[name="' + e.prop("name") + '"][data-validation]')).filter(":checked").length) return !0;
          TS.ui.validation.showWarning(e, TS.i18n.t("Please select at least one option", "ui_validation")(), t);
        } else if (e.is("select")) {
          if (e.val()) return !0;
          TS.ui.validation.showWarning(e, TS.i18n.t("Please select an option", "ui_validation")(), t);
        } else if (N(e)) {
          if (G(e).trim()) return !0;
          TS.ui.validation.showWarning(e, TS.i18n.t("This field can’t be empty", "ui_validation")(), t);
        } else TS.error("Error: cannot validate");
      }

      function t(e, t, n) {
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (N(e)) {
          var i = G(e).trim().toLowerCase();
          if (-1 === n.split(",").indexOf(i)) return !0;
          TS.ui.validation.showWarning(e, TS.i18n.t('"{word}" is a reserved word. Try something else!', "ui_validation")({
            word: _.escape(i)
          }), t);
        } else TS.error("WTF: cannot validate");
      }

      function n(e, n) {
        return t(e, n, TS.model.RESERVED_KEYWORDS.join(","));
      }

      function i(e, t, n) {
        var i = TS.i18n.t("This doesn’t seem like a proper link. Sorry!", "ui_validation")();
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (N(e)) {
          var r = G(e);
          if (!r) return !0;
          var a = r.match(x);
          if (a && 1 === a.length && a[0] === r) {
            if (!n) return !0;
            for (var s = n.split(","), o = 0; o < s.length; o += 1)
              if ("http" === s[o]) {
                if (0 === a[0].indexOf("http://") || 0 === a[0].indexOf("https://")) return !0;
              } else {
                if (0 === a[0].indexOf(s[o] + "://")) return !0;
                "https" === s[o] && (i = TS.i18n.t("Please use https (for security).", "ui_validation")());
              }
          }
          TS.ui.validation.showWarning(e, i, t);
        } else TS.error("Error: cannot validate");
      }

      function r(e, t, n) {
        var i, r = G(e),
          a = TS.i18n.t("This doesn‘t seem like a proper link. Sorry!", "ui_validation")(),
          s = !1;
        if (!r) return !0;
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (!N(e)) return void TS.error("Error: cannot validate");
        if (n) {
          i = n.split(","), -1 != i.indexOf("https") && (a = TS.i18n.t("Please use https (for security).", "ui_validation")()), -1 != i.indexOf("http") && -1 == i.indexOf("https") && i.push("https");
          for (var o = 0; o < i.length; o += 1) 0 === r.indexOf(i[o] + "://") && (s = !0);
        } else s = !0, -1 == r.indexOf("://") && (r = "http://" + r);
        if (TS.utility.url.simpleIsUrl(r) && s) return !0;
        TS.ui.validation.showWarning(e, a, t);
      }

      function a(e, t) {
        var n = TS.i18n.t("This doesn’t seem like a proper link. Sorry!", "ui_validation")();
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (N(e)) {
          var i = G(e);
          if (!i) return !0;
          var r = i.match(M);
          if (r && 1 === r.length && r[0] === i) return !0;
          TS.ui.validation.showWarning(e, n, t);
        } else TS.error("Error: cannot validate");
      }

      function s(e, t) {
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (N(e)) {
          var n = G(e);
          if (!n) return !0;
          if (!TS.utility.findUrls(n).length) return !0;
          TS.ui.validation.showWarning(e, TS.i18n.t("Unfortunately, custom messages can’t contain URLs.", "ui_validation")(), t);
        } else TS.error("Error: cannot validate");
      }

      function o(e, t, n, i) {
        return d(e, "minlength", t, n, i);
      }

      function l(e, t, n, i) {
        return d(e, "maxlength", t, n, i);
      }

      function d(e, t, n, i, r) {
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (N(e)) {
          var a = G(e);
          if (i = +i, void 0 === a || isNaN(i)) return void TS.error("Error: no length to validate");
          if ("minlength" === t) {
            if (a.length >= i) return !0;
            TS.ui.validation.showError(e, TS.i18n.t("This field can’t be less than {minlength, plural, =1{# character}other{# characters}}", "ui_validation")({
              minlength: i
            }), n);
          } else if ("maxlength" === t) {
            if (r || j(e, a.length, i, n), a.length <= i) return !0;
            TS.ui.validation.showError(e, TS.i18n.t("This field can’t be more than {maxlength, plural, =1{# character}other{# characters}}", "ui_validation")({
              maxlength: i
            }), n);
          }
        } else TS.error("Error: cannot validate");
      }

      function c(e, t, n) {
        return m(e, "mincsv", t, n);
      }

      function u(e, t, n) {
        return m(e, "maxcsv", t, n);
      }

      function m(e, t, n, i) {
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (N(e)) {
          var r = G(e).trim();
          if (i = +i, void 0 === r || isNaN(i)) return void TS.error("Error: no length to validate");
          if ("mincsv" === t) {
            if (r.split(/\s*,\s*/).length >= i) return !0;
            TS.ui.validation.showError(e, TS.i18n.t("This field can’t have less than {minlength, plural, =1{# value}other{# values}}", "ui_validation")({
              minlength: i
            }), n);
          } else if ("maxcsv" === t) {
            if (r.split(/\s*,\s*/).length <= i) return !0;
            TS.ui.validation.showError(e, TS.i18n.t("This field can’t have more than {maxlength, plural, =1{# value}other{# values}}", "ui_validation")({
              maxlength: i
            }), n);
          }
        } else TS.error("Error: cannot validate");
      }

      function p(e, t, n) {
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (N(e)) {
          var i = G(e).trim();
          if (!i) return !0;
          var r, a, s, o;
          switch (n) {
            case "Y-m-d":
              r = "YYYY-MM-DD", a = i.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/), s = a && 1 === a.length && a[0] === i, s && (o = B(i + "T00:00:00.000Z"));
              break;
            case "m-d":
              r = "MM-DD", a = i.match(/^[0-9]{2}-[0-9]{2}$/), s = a && 1 === a.length && a[0] === i, s && (o = B("0000-" + i + "T00:00:00.000Z"));
              break;
            default:
              return void TS.error("Error: cannot validate");
          }
          if (s && o) return !0;
          s ? o || TS.ui.validation.showWarning(e, TS.i18n.t("{value} doesn’t appear to be a valid date. Sorry!", "ui_validation")({
            value: _.escape(i)
          }), t) : TS.ui.validation.showWarning(e, TS.i18n.t("This needs to be in the format {pattern}. Sorry!", "ui_validation")({
            pattern: r
          }), t);
        } else TS.error("Error: cannot validate");
      }

      function f(e, t) {
        var n = N(e) ? G(e) : e.val();
        if (n === n.toLocaleLowerCase()) return !0;
        TS.ui.validation.showWarning(e, TS.i18n.t("This field must be lowercase only", "ui_validation")(), t);
      }

      function h(e, t) {
        if (!/\s/.test(N(e) ? G(e) : e.val())) return !0;
        TS.ui.validation.showWarning(e, TS.i18n.t("This field can’t contain spaces", "ui_validation")(), t);
      }

      function g(e, t) {
        if (/^[^\W_]/.test(N(e) ? G(e) : e.val())) return !0;
        TS.ui.validation.showWarning(e, TS.i18n.t("This first character must be a letter or number", "ui_validation")(), t);
      }

      function S(n, i) {
        var r = $.extend({}, i, {
          quiet: !0
        });
        if (e(n, r))
          if (l(n, r, 21, !0))
            if (h(n, r))
              if (k(n, r, /^[\w._-]+$/))
                if (g(n, r)) {
                  if (f(n, r)) return !!t(n, i, TS.model.RESERVED_USERNAMES.join(","));
                  TS.ui.validation.showWarning(n, I.lowercase(), i);
                } else TS.ui.validation.showWarning(n, I.firstalphanumeric(), i);
        else TS.ui.validation.showWarning(n, I.specials(), i);
        else TS.ui.validation.showWarning(n, I.specials(), i);
        else TS.ui.validation.showWarning(n, I.maxlength({
          maxlength: 22
        }), i);
        else TS.ui.validation.showWarning(n, I.required(), i);
      }

      function T(t, n) {
        var i = $.extend({}, n, {
          quiet: !0
        });
        return e(t, i) ? h(t, i) ? k(t, i, /^[-|_]+$/) ? (TS.ui.validation.showWarning(t, C.punctuation(), n), !0) : void 0 : (TS.ui.validation.showWarning(t, C.specials(), n), !0) : (TS.ui.validation.showWarning(t, C.required(), n), !0);
      }

      function b(e, t, n) {
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (!N(e)) return void TS.error("Error: cannot validate");
        var i = G(e),
          r = W(n);
        if (_.includes(r, "fix") && (i = q(e)), T(e, t)) return !1;
        var a = TS.shared.getActiveModelOb() || {};
        return (!$(".channel_options_modal").is(":visible") || i !== a.name) && (!(TS.channels.getChannelByName(i) || TS.groups.getGroupByName(i) || TS.members.getMemberByName(i)) || void TS.ui.validation.showWarning(e, TS.i18n.t('"{name}" is already taken by a channel, username, or user group.', "ui_validation")({
          name: _.escape(i)
        }), t));
      }

      function v(e, t, n) {
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (!N(e)) return void TS.error("Error: cannot validate");
        var i = G(e),
          r = W(n);
        if (_.includes(r, "fix") && (i = q(e)), T(e, t)) return !1;
        var a = !1,
          s = TS.channels.getChannelByName(i) || TS.groups.getGroupByName(i) || TS.members.getMemberByName(i),
          o = TS.shared.getActiveModelOb();
        return s || (a = !0), s && s.id === o.id && (a = !0), s && s.id !== o.id ? void TS.ui.validation.showWarning(e, TS.i18n.t("{name} has already been taken. Try something else!", "ui_validation")({
          name: _.escape(i)
        }), t) : a;
      }

      function y(e, t) {
        t = t || {};
        var n = G(e).trim(),
          i = TS.utility.teams.validateTeamName(n);
        return !!i.is_valid || (t.should_truncate = !1, "empty" === i.error_key ? TS.ui.validation.showCustomValidation(e, i.error_message, t) : TS.ui.validation.showError(e, i.error_message, t), !1);
      }

      function w(e, t) {
        if (e.is('input[type="radio"]') || e.is('input[type="checkbox"]') || e.is("select")) return !0;
        if (N(e)) {
          var n = G(e);
          if (!n) return !0;
          var i = n.match(TS.utility.email_regex);
          if (i && 1 === i.length && i[0] === n) return !0;
          TS.ui.validation.showWarning(e, TS.i18n.t("This doesn’t seem like an email address. Sorry!", "ui_validation")(), t);
        } else TS.error("Error: cannot validate");
      }

      function k(e, t, n) {
        var i = N(e) ? G(e) : e.val();
        if (n.test(i)) return !0;
        TS.ui.validation.showWarning(e, TS.i18n.t("This field contains invalid characters", "ui_validation")(), t);
      }
      TS.registerModule("ui.validation", {
        completed_sig: new signals.Signal,
        onStart: function() {
          $("body").on("input.validation paste.validation change.validation blur.validation", "[data-validation]", TS.utility.debounce(function(e) {
            $(e.target).is(".ql-editor") || $(e.target).is(".ql-clipboard") ? O($(e.target).closest(".ql-container"), {}, e) : O($(e.target), {}, e);
          }, 250)), $("body").on("submit.validation", "form[data-validation-form]", function(e) {
            var t = $(e.target),
              n = TS.ui.validation.validate(t);
            n || e.preventDefault(), TS.ui.validation.completed_sig.dispatch(t, {
              event: e,
              passed: n
            });
          });
        },
        validate: function(e, t) {
          t = t || {};
          var n = document;
          if (e) {
            if (e.is("[data-validation]")) return 1 === e.length ? O(e, t) : e.toArray().every(function(e) {
              return O($(e), t);
            });
            n = e.get(0);
          }
          var i = Array.prototype.slice.call(n.querySelectorAll("[data-validation]"));
          if (t && t.fast) return i.every(function(e) {
            return O($(e), t);
          });
          if (t && t.verbose) {
            var r = {};
            return i.forEach(function(e) {
              r[e.name] = O($(e), t);
            }), r;
          }
          return i.reduce(function(e, n) {
            return O($(n), t) && e;
          }, !0);
        },
        register: function(e, t) {
          return E[e] ? void TS.warn(e + " cannot be registered because that key is already in use.") : "function" != typeof t ? void TS.warn("Only functions can be registered as validators.") : void(E[e] = t);
        },
        showCustomValidation: function(e, t, n, i) {
          R(e, n.error_message || t, n.class, n, i);
        },
        getErrorMessage: function(e, t) {
          switch (e) {
            case "invalid_name_required":
              return C.required();
            case "invalid_name_punctuation":
              return C.punctuation();
            case "invalid_name_maxlength":
              return C.maxlength({
                maxlength: t.maxlength
              });
            case "invalid_name_specials":
              return C.specials();
            case "name_taken":
              return C.name_taken({
                name: t.name
              });
            case "restricted_action":
              return A.restricted_action();
            default:
              return TS.i18n.t("For some weird reason, that didn’t work. Please try again to continue.", "ui_validation")();
          }
        },
        showError: function(e, t, n, i) {
          R(e, n.error_message || t, "validation_error", n, i);
        },
        showWarning: function(e, t, n, i) {
          R(e, n.warning_message || t, "validation_warning", n, i);
        },
        showSuccess: function(e, t, n, i) {
          R(e, n.success_message || t, "validation_success", n, i);
        },
        test: function() {
          return {
            validations: E
          };
        }
      });
      var x = new RegExp("^(?:(?:https?|ftp)://)?(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:localhost)|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,}))\\.?)(?::\\d{2,5})?(?:[/?#]\\S*)?$", "i"),
        M = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=+$,\w]+@)?[A-Za-z0-9.-]+|(?:www\.|[-;:&=+$,\w]+@)[A-Za-z0-9.-]+)((?:\/[+~%\/.\w-]*)?\??(?:[-+=&;%@.\w]*)#?(?:[.!\/\\\w]*))?)/gi,
        C = {
          name_taken: TS.i18n.t("{name} is already taken by a channel, username, or user group.", "ui_validation"),
          lowercase: TS.i18n.t("Channel names must be all lowercase. Try again?", "ui_validation"),
          maxlength: TS.i18n.t("Blerg, that’s a bit too long! Channel names must be fewer than {maxlength} characters.", "ui_validation"),
          required: TS.i18n.t("Don’t forget to name your channel.", "ui_validation"),
          specials: TS.i18n.t("Channel names can’t contain spaces, periods, or most punctuation. Try again?", "ui_validation"),
          punctuation: TS.i18n.t("Names can’t consist solely of punctuation. Please elaborate!", "ui_validation")
        },
        I = {
          firstalphanumeric: TS.i18n.t("Usernames must start with a letter or number. Sorry about that!", "ui_validation"),
          lowercase: TS.i18n.t("Sorry, usernames must be lowercase!", "ui_validation"),
          maxlength: TS.i18n.t("Sorry, that’s a bit too long! Usernames must be fewer than {maxlength} characters.", "ui_validation"),
          required: TS.i18n.t("Please fill in a username.", "ui_validation"),
          specials: TS.i18n.t("Usernames can’t contain special characters. Sorry about that!", "ui_validation")
        },
        A = {
          restricted_action: TS.i18n.t("Sorry! An admin on your team has restricted who can create private channels.", "ui_validation")
        },
        E = {
          dateandformat: p,
          firstalphanumeric: g,
          hasnourl: s,
          isurlstrict: i,
          isurl: r,
          islink: a,
          lowercase: f,
          maxcsv: u,
          maxlength: l,
          mincsv: c,
          minlength: o,
          nospace: h,
          required: e,
          reservedwords: t,
          keywords: n,
          username: S,
          channel_name: b,
          shared_channel_name: v,
          team_name: y,
          is_email: w
        },
        O = function(e, t, n) {
          t = t || {}, e.is("[data-validation-for]") && (t.custom_for = e.attr("data-validation-for")), t.success_message = TS.i18n.t("Nice, thanks!", "ui_validation")(), e.is("[data-validation-success]") && (t.success_message = e.attr("data-validation-success")), e.is("[data-validation-warning]") && (t.warning_message = e.attr("data-validation-warning")), e.is("[data-validation-error]") && (t.error_message = e.attr("data-validation-error")), N(e) && U(e, t);
          var i = F(e).every(function(n) {
            if (-1 === n.indexOf("=")) return E[n.trim()](e, t);
            var i = n.split("=");
            return E[i[0]](e, t, i[1]);
          });
          return TS.ui.validation.completed_sig.dispatch(e, {
            event: n,
            passed: i
          }), D(e, i, t) && TS.ui.validation.showSuccess(e, t.success_message, t, 3e3), i;
        },
        F = function(e) {
          return e.is("[data-validation]") ? e.attr("data-validation").replace(/\s*(,|=)\s*/g, "$1").split(/\s+/) : [];
        },
        B = function(e) {
          if (!isNaN(Date.parse(e))) {
            return !new Date(e).toISOString().indexOf(e);
          }
        },
        D = function(e, t, n) {
          var i = $(document.querySelector('label[for="' + (n.custom_for || e.attr("name")) + '"]'));
          if (i.length) return !(n && n.quiet) && t && !1 === i.data("validation-ephemeral");
        },
        R = function(e, t, n, i, r) {
          if (i = i || {}, _.isUndefined(i.should_truncate) && (i.should_truncate = !0), !i || !i.quiet) {
            var a = $(document.querySelector('label[for="' + (i.custom_for || e.attr("name")) + '"]'));
            if (a.length) {
              var s = a.data("validation-timeout");
              clearTimeout(s);
              var o = a.find(".validation_message");
              o.length || (o = $("<span />").addClass("validation_message").toggleClass("overflow_ellipsis", i.should_truncate), e.is("select") ? o.insertBefore(a.find("select")) : o.appendTo(a)), P(e, a, n), o.get(0).title = t, o.fadeIn(100), a.data("validation-ephemeral", !!r), r && a.data("validation-timeout", setTimeout(function() {
                a.removeData("validation-ephemeral").removeData("validation-timeout"), o.fadeOut(100, function() {
                  P(e, a), o.remove();
                });
              }, r));
            }
          }
        },
        H = ["validation_error", "validation_warning", "validation_success"],
        P = function(e, t, n) {
          t.hasClass(n) || (e.removeClass(H.join(" ")), e.addClass(n), t.removeClass(H.join(" ")), t.addClass(n));
        },
        j = function(e, t, n, i) {
          n - t <= 6 ? L(e, t, n, i) : U(e, i);
        },
        L = function(e, t, n, i) {
          var r = document.querySelector('label[for="' + (i.custom_for || e.attr("name")) + '"]');
          if (r) {
            var a = [t, n].join("/");
            $(r).attr("data-countdown", a).addClass("countdown");
            var s = window.getComputedStyle(r, ":after"),
              o = parseFloat(s.width) || 9 * a.length;
            e.hasClass("no_validation_padding") || (e.data("countdown-padding-right") || e.data("countdown-padding-right", parseFloat(e.css("padding-right"))), e.css("padding-right", o + parseFloat(s.right) + e.data("countdown-padding-right")));
          }
        },
        U = function(e, t) {
          var n = document.querySelector('label[for="' + (t.custom_for || e.attr("name")) + '"]');
          n && ($(n).removeClass("countdown"), e.removeData("countdown-padding-right"), e.css("padding-right", ""));
        },
        N = function(e) {
          return TS.utility && TS.utility.contenteditable ? e.is("input") || e.is("textarea") || TS.utility.contenteditable.isContenteditable(e) : e.is("input") || e.is("textarea");
        },
        G = function(e) {
          return TS.utility && TS.utility.contenteditable ? TS.utility.contenteditable.value(e) : e.val();
        },
        W = function(e) {
          return _.isString(e) ? _(e).split(",").map(_.trim).compact().value() : [];
        },
        q = function(e) {
          var t = G(e),
            n = t.toLowerCase().replace(/^#+/, "");
          if (n && t !== n) {
            var i = TS.utility.contenteditable.cursorPosition(e).start;
            n.length < t.length && (i -= t.length - n.length), e.val(n), TS.utility.contenteditable.cursorPosition(e, i);
          }
          return n;
        };
    }();
  },
  2656: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("ui.workspaces", {
        start: function() {
          if (TS.boot_data.page_needs_enterprise && !TS.model.user.is_restricted) return TS.enterprise.promiseToGetTeams().then(function() {
            var n = TS.enterprise.workspaces.getList("teams_not_on"),
              i = {
                teams: n,
                user: TS.model.user
              };
            TS.boot_data.feature_workspace_request && (i.org_prefs_ws_request_admin_enabled = _.get(TS.boot_data, "enterprise_prefs.org_prefs.enterprise_team_creation_request.is_enabled") && !TS.model.user.is_restricted);
            var r = {
              title: TS.i18n.t("Join {enterprise_name} Teams", "enterprise_workspaces")({
                enterprise_name: TS.model.enterprise.name
              }),
              body_template_html: TS.templates.workspaces_dialog(i),
              onShow: e,
              onCancel: t,
              modal_class: "fs_modal_header workspaces_modal"
            };
            TS.ui.fs_modal.start(r);
          });
        }
      });
      var e = function() {
          n();
        },
        t = function() {},
        n = function e() {
          var t = $(".workspaces_modal"),
            n = t.find(".workspaces"),
            i = t.find(".workspace_info"),
            r = t.find(".title_bar"),
            a = t.find(".sort_by_container select"),
            s = t.find('[data-qa="teams_search"]'),
            o = TS.boot_data.logout_url;
          t.off(), s.off(), a.off(), i.off();
          var l = function(e) {
            return TS.enterprise.workspaces.joinTeam(e).then(function(n) {
              if (n) {
                var i = _.merge({}, TS.model.user);
                i.enterprise_user.teams = _.uniq(i.enterprise_user.teams.concat(e)), TS.members.upsertMember(i);
                var r = TS.enterprise.getTeamById(e);
                t.find('[data-id="' + e + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(r, o));
                TS.enterprise.workspaces.recordTeamJoin(r.id, "find_workspaces", "workspace_detail");
              }
              return n;
            });
          };
          s.on("input", function() {
            var t = $(this).val(),
              i = a.val(),
              r = TS.enterprise.workspaces.getList("teams_not_on", i, t),
              s = "";
            r.length ? r.forEach(function(e) {
              s += TS.enterprise.workspaces.getTeamCardHTML(e, o, !0);
            }) : s += TS.templates.no_workspace_results(), n.html(s), e();
          }), a.on("change", function() {
            var t = $(this).val(),
              i = s.val(),
              r = TS.enterprise.workspaces.getList("teams_not_on", t, i),
              a = "";
            r.forEach(function(e) {
              a += TS.enterprise.workspaces.getTeamCardHTML(e, o, !0);
            }), n.html(a), e();
          }), t.on("click", ".enterprise_team_card", function() {
            var e = $(this).data("id");
            n.addClass("hidden"), r.addClass("hidden"), s.addClass("hidden").attr("disabled", "disabled"), i.html(TS.templates.team_info({
              list: "teams_not_on"
            })).removeClass("hidden");
            var t = {
              top_combined_channels: 5,
              include_admins: !0
            };
            return TS.enterprise.ensureTeamInModel(e, t).then(function(e) {
              if (e) {
                var t = TS.enterprise.workspaces.createURL(e, o);
                e.launch_url = t + "messages", e.site_url = t + "home", i.html(TS.templates.team_info({
                  list: "teams_not_on",
                  team: e,
                  user: TS.model.user
                }));
                TS.enterprise.workspaces.recordTeamView(e.id, "find_workspaces", "workspaces_you_can_join_list");
              }
            });
          }), i.on("click", ".back_to_teams", function(e) {
            e.preventDefault(), n.removeClass("hidden"), r.removeClass("hidden"), s.removeClass("hidden").removeAttr("disabled"), i.addClass("hidden");
          }), i.on("click", 'button[data-qa="join-btn"]', function() {
            var e = Ladda.create(this);
            e.start();
            var t = $(this).data("id"),
              n = TS.enterprise.getTeamById(t);
            l(t).then(function(t) {
              if (e.stop(), t) {
                var r = TS.enterprise.workspaces.createURL(n, o);
                n.launch_url = r + "messages", n.site_url = r + "home", i.html(TS.templates.team_info({
                  list: "teams_not_on",
                  team: n,
                  user: TS.model.user
                }));
                TS.enterprise.workspaces.recordTeamJoin(n.id, "find_workspaces", "workspace_detail");
              }
              return t;
            });
          }), i.on("click", '[data-qa="leave-btn"]', function(e) {
            e.preventDefault();
            var t = $(this).data("id");
            TS.ui.leave_team_dialog.start(t);
          }), i.on("click", 'button[data-qa="request-to-join-btn"]', function(e) {
            e.preventDefault();
            var n = Ladda.create(this);
            n.start();
            var r = $(this).data("id");
            TS.enterprise.workspaces.requestToJoinTeam(r).then(function() {
              var e = TS.enterprise.getTeamById(r);
              t.find('[data-id="' + r + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(e, o)), n.stop();
              var a = TS.enterprise.workspaces.createURL(e, o);
              e.launch_url = a + "messages", e.site_url = a + "home", i.html(TS.templates.team_info({
                list: "teams_not_on",
                team: e,
                user: TS.model.user
              }));
              TS.enterprise.workspaces.recordTeamRequestToJoin(e.id, "find_workspaces", "workspace_detail");
            }).catch(function() {
              n.stop();
            });
          }), t.on("click", ".enterprise_team_menu", function(e) {
            e.stopPropagation();
            var t = $(this).val(),
              n = $(this).data("id");
            TS.menu.enterprise_team_signin.start(e, $(this), {
              list: "teams_not_on",
              team_id: n,
              team_site_url: t,
              should_show_leave_team: !1
            });
          }), t.on("click", ".enterprise_team_join", function(e) {
            e.stopPropagation();
            var t = Ladda.create(this);
            t.start();
            var n = $(this).data("id");
            l(n).then(t.stop);
          }), t.on("click", ".enterprise_team_request", function(e) {
            e.stopPropagation();
            var n = Ladda.create(this);
            n.start();
            var i = $(this).data("id");
            TS.enterprise.workspaces.requestToJoinTeam(i).then(function() {
              var e = TS.enterprise.getTeamById(i);
              n.stop(), t.find('[data-id="' + i + '"]').html(TS.enterprise.workspaces.getTeamCardHTML(e, o));
              TS.enterprise.workspaces.recordTeamJoin(i, "find_workspaces", "workspaces_you_can_join_list");
            }).catch(function() {
              n.stop();
            });
          }), t.on("click", '[data-qa="ws-request-new-team"]', function(e) {
            e.stopPropagation();
            var t;
            TS.boot_data.feature_workspace_request && (t = _.get(TS.boot_data, "enterprise_prefs.org_prefs.enterprise_team_creation_request.is_enabled") && !TS.model.user.is_restricted), t && TS.enterprise.workspaces.showRequestDialog();
          });
        };
    }();
  },
  2657: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("user_groups", {
        updated_sig: new signals.Signal,
        is_in_bulk_upsert_mode: !1,
        onStart: function() {
          TS.client ? TS.client.login_sig.add(TS.user_groups.onLogin) : TS.web && TS.web.login_sig.add(TS.user_groups.onLogin), TS.user_groups.sortUserGroupsAndDispatchThrottled = _.debounce(TS.user_groups.sortUserGroupsAndDispatchThrottled, 500);
        },
        onLogin: function() {
          e = !0, TS.user_groups.sortUserGroups();
        },
        getUserGroupsByHandle: function(e) {
          if (e && "@" !== e) {
            e = _.toLower(e);
            var n = TS.model.user_groups;
            if (n) {
              var i = t[e];
              if (i) return i;
              for (var r = 0; r < n.length; r += 1)
                if (i = n[r], i.handle == e || "@" + i.handle == e) return TS.warn(e + " not in _handle_map?"), t["@" + e] = i, t[e] = i, i;
              return null;
            }
          }
        },
        getUserGroupsById: function(e) {
          if (TS.model.user && TS.model.user.is_restricted) return !1;
          var t = TS.model.user_groups,
            i = n[e];
          if (i) return i;
          if (t) {
            for (var r = 0; r < t.length; r += 1)
              if (i = t[r], i.id == e) return TS.warn(e + " not in _id_map?"), n[e] = i, i;
            return null;
          }
        },
        getActiveUserGroups: function(e) {
          return _.filter(TS.model.user_groups, function(t) {
            return e ? !t.date_delete : !t.date_delete && t.team_id;
          });
        },
        promiseToGetUserGroupMembers: function(e) {
          return TS.api.call("subteams.users.list", {
            subteam: e,
            include_disabled: 1
          }).then(function(t) {
            var n = t.data;
            return TS.user_groups.mergeAndUpsertUserGroupFromUsersListCall(e, n);
          });
        },
        getUserGroupMembers: function(e, t) {
          TS.api.call("subteams.users.list", {
            subteam: e,
            include_disabled: 1
          }, function(n, i) {
            if (n && i) {
              var r = TS.user_groups.mergeAndUpsertUserGroupFromUsersListCall(e, i);
              r && t && t(r);
            }
          });
        },
        mergeAndUpsertUserGroupFromUsersListCall: function(e, t) {
          var n = TS.user_groups.getUserGroupsById(e);
          if (n) return n.users = t.users, n.user_count = t.users.length, TS.user_groups.updated_sig.dispatch(n.id), n;
        },
        updateMembersOfUserGroup: function(e, t) {
          TS.api.call("subteams.users.update", e, t);
        },
        createUserGroup: function(e, t) {
          TS.api.call("subteams.create", e, t);
        },
        updateUserGroup: function(e, t) {
          TS.api.call("subteams.update", e, t);
        },
        enableUserGroup: function(e, t) {
          TS.api.call("subteams.enable", {
            subteam: e
          }, t);
        },
        disableUserGroup: function(e, t) {
          TS.api.call("subteams.disable", {
            subteam: e
          }, t);
        },
        deleteUserGroup: function(e, t) {
          TS.api.call("subteams.delete", {
            subteam: e,
            include_disabled: 1
          }, t);
        },
        ensureUserGroupMembersInModelObNumIsKnown: function(e, t) {
          var n = TS.user_groups.getUserGroupsById(e),
            i = TS.channels.getChannelById(t) || TS.groups.getGroupById(t);
          return n && i ? _.isUndefined(n.users) ? o[e] ? o[e] : (o[e] = TS.user_groups.promiseToGetUserGroupMembers(e).then(function(e) {
            if (e && e.users) {
              return TS.membership && TS.membership.lazyLoadChannelMembership() ? TS.membership.ensureChannelMembershipIsKnownForUsers(i.id, e.users) : Promise.resolve();
            }
          }).finally(function() {
            delete o[e];
          }), o[e]) : TS.membership && TS.membership.lazyLoadChannelMembership() ? TS.membership.ensureChannelMembershipIsKnownForUsers(i.id, n.users) : Promise.resolve() : Promise.resolve();
        },
        getUserGroupMembersNotInModelObCount: function(e, t) {
          var n = TS.user_groups.getUserGroupsById(e),
            i = _.get(n, "users.length"),
            r = TS.channels.getChannelById(t) || TS.groups.getGroupById(t);
          return n && r ? _.isUndefined(n.users) ? 0 : TS.membership && TS.membership.lazyLoadChannelMembership() && !TS.membership.isChannelMembershipKnownForUsers(r.id, n.users) ? 0 : i - n.users.filter(function(e) {
            var t = TS.membership.getUserChannelMembershipStatus(e, r);
            return t.is_known && t.is_member;
          }).length : 0;
        },
        upsertUserGroup: function(e) {
          if (TS.model.user && TS.model.user.is_restricted) return !1;
          var t = TS.user_groups.getUserGroupsById(e.id);
          if (e._name_lc = e.name.toLowerCase(), t) {
            TS.has_pri[l] && TS.log(l, 'updating existing User Group "' + e.id + '"');
            TS.model.your_user_group_regex[e.id] && TS.user_groups.removeSelfUserGroup(t.id);
            for (var n in e) t[n] != e[n] && (t[n] = e[n]);
            !e.date_delete && e.users && -1 !== e.users.indexOf(TS.model.user.id) && (TS.user_groups.getUserGroupsById(e.id) || TS.model.user_groups.push(e), TS.user_groups.upsertSelfUserGroup(t.id), a(e));
          } else e.date_delete || (TS.has_pri[l] && TS.log(l, 'Adding user group "' + e.id + '"'), TS.user_groups.getUserGroupsById(e.id) || TS.model.user_groups.push(e), a(e));
          TS.user_groups.is_in_bulk_upsert_mode || TS.user_groups.sortUserGroupsAndDispatchThrottled();
        },
        sortUserGroupsAndDispatch: function() {
          TS.user_groups.sortUserGroups(), TS.user_groups.updated_sig.dispatch();
        },
        sortUserGroupsAndDispatchThrottled: function() {
          return TS.user_groups.sortUserGroupsAndDispatch();
        },
        startBatchUpsert: function() {
          return !TS.user_groups.is_in_bulk_upsert_mode && (TS.user_groups.is_in_bulk_upsert_mode = !0, !0);
        },
        finishBatchUpsert: function() {
          return !!TS.user_groups.is_in_bulk_upsert_mode && (TS.user_groups.is_in_bulk_upsert_mode = !1, TS.user_groups.sortUserGroupsAndDispatch(), !0);
        },
        sortUserGroups: function() {
          e && TS.model.user_groups.sort(TS.i18n.mappedSorter("_name_lc"));
        },
        upsertUserGroupAndSignal: function(e) {
          TS.user_groups.upsertUserGroup(e), TS.user_groups.updated_sig.dispatch(e.id);
        },
        userGroupMembersChanged: function(e) {
          TS.info("TS.user_groups.userGroupMembersChanged");
          var t = TS.user_groups.getUserGroupsById(e.subteam_id);
          t && (t.users && (e.added_users && (t.users = _.union(t.users, e.added_users)), e.removed_users && (t.users = _.difference(t.removed_users, e.removed_users))), t.user_count = parseInt(t.user_count, 10) || 0, t.user_count += parseInt(e.added_users_count, 10) || 0, t.user_count = Math.max(0, t.user_count - (e.removed_users_count || 0)), t.date_previous_update = _.assign(t, _.pick(e, ["date_update", "date_previous_update"])));
        },
        removeUserGroup: function(e) {
          var t = TS.user_groups.getUserGroupsById(e.id);
          t && (TS.user_groups.removeSelfUserGroup(t.id), s(t), t.date_delete = -1);
        },
        removeUserGroupAndSignal: function(e) {
          TS.user_groups.removeUserGroup(e), TS.user_groups.updated_sig.dispatch(e.id);
        },
        upsertSelfUserGroup: function(e) {
          TS.model.your_user_group_regex[e] && TS.user_groups.removeSelfUserGroup(e);
          var t = TS.user_groups.getUserGroupsById(e);
          if (t && !t.date_delete) {
            var n = new RegExp("<!subteam\\^(" + t.id + (t.handle ? "|" + t.handle : "") + ")\\b");
            TS.model.your_user_group_regex[t.id] = n, t.handle && (TS.model.highlight_words.push("@" + t.handle), TS.model.highlight_words_regex = null);
          }
        },
        removeSelfUserGroup: function(e) {
          TS.model.your_user_group_regex[e] = null, delete TS.model.your_user_group_regex[e];
          var t = TS.user_groups.getUserGroupsById(e);
          t && (t.handle && _.pull(TS.model.highlight_words, "@" + t.handle), s(t), TS.model.highlight_words_regex = null, TS.user_groups.updated_sig.dispatch(t.id));
        },
        ensureUserGroupsArePresent: function(e) {
          var t = [];
          return e.forEach(function(e) {
            TS.user_groups.getUserGroupsById(e) || t.push(e);
          }), t.length ? i(t) : Promise.resolve();
        },
        test: function() {
          return {
            clearUseGroupMaps: r
          };
        }
      });
      var e, t = {},
        n = {},
        i = function(e) {
          var t = [];
          e.forEach(function(e) {
            t.push({
              type: "and",
              clauses: [{
                type: "is",
                value: "group"
              }, {
                type: "id",
                value: e
              }]
            });
          });
          var n = {
            count: e.length,
            include_usergroups: !0,
            query: {
              type: "or",
              clauses: t
            }
          };
          return n.query = JSON.stringify(n.query), TS.api.callImmediately("search.enterprise", n).then(function(e) {
            return e.data.items && e.data.items.length && (TS.user_groups.startBatchUpsert(), e.data.items.forEach(function(e) {
              TS.user_groups.upsertUserGroup(e);
            }), TS.user_groups.finishBatchUpsert()), null;
          });
        },
        r = function() {
          t = {}, n = {};
        },
        a = function(e) {
          e && (e.handle && (t[e.handle] = e, t["@" + e.handle] = e), n[e.id] = e);
        },
        s = function(e) {
          e && (e.handle && (delete t[e.handle], delete t["@" + e.handle]), delete n[e.id]);
        },
        o = {},
        l = 4;
    }();
  },
  2658: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.attachments", {
        hasContent: function(t, n) {
          if (!t) return !1;
          _.isArray(n) || (n = [].concat(n));
          var i = _.difference(e, n);
          return _.some(i, function(e) {
            return !_.isEmpty(t[e]);
          });
        },
        getMediaSource: function(e) {
          if (e) {
            switch (TS.utility.attachments.getMediaType(e)) {
              case "video":
                return e.thumb_url;
              case "audio":
                return e.audio_html || e.audio_url;
              case "other":
                return e.other_html;
              case "image":
                return e.image_url;
            }
            return e.from_url;
          }
        },
        getMediaType: function(e) {
          if (e) return e.video_html ? "video" : e.audio_html || e.audio_url ? "audio" : e.other_html ? "other" : e.image_url ? "image" : void 0;
        },
        getDecoratedAttachment: function(e, t) {
          var n = _.cloneDeep(e);
          if (n._source = i(n), r(n) ? n = a(n, t) : "twitter" === n.service_name ? n = o(n) : "salesforce" === n.service_name && (n = l(n)), TS.boot_data.feature_auth_unfurls && n.is_app_unfurl && n.bot_id) {
            var s = TS.bots.getBotById(n.bot_id);
            s && (n._attribution = s.name, n._attribution_link = "/services/" + n.bot_id);
          }
          return n._source.icon && (n._source.icon = d(n._source.icon)), n.footer_icon && (n.footer_icon = d(n.footer_icon)), n;
        },
        getMediaCaretLocation: function(e) {
          return _.find(t, function(t) {
            return _.some(e[t]);
          }) || "end";
        },
        isAutomatedSlackUnfurl: function(e) {
          return !!e && r(e) && -1 !== TS.utility.msgs.automated_subtypes.indexOf(e.msg_subtype);
        },
        formatMessageAttachmentPart: function(e, t, n, i, r, a) {
          if (t && (n && TS.utility.msgs.isAutomatedMsg(t) && (n = !1), n && !_.isEmpty(t.attachments))) {
            t.attachments.some(TS.utility.attachments.isAutomatedSlackUnfurl) && (n = !1);
          }!0 === a && (e = _.escape(e));
          var s = TS.format.formatWithOptions(e, t, {
            no_highlights: !0 !== n,
            no_specials: !0 !== i,
            enable_slack_action_links: !0 === r
          });
          return s = TS.utility.msgs.handleSearchHighlights(s);
        },
        findAttachment: function(e) {
          if (e) {
            var t = TS.utility.msgs.findMsg(e.message_ts, e.channel_id);
            if (t) return _.find(t.attachments, {
              id: e.attachment_id
            });
          }
        },
        unfurlPlaceholders: function(e) {
          e.find(".unfurl-placeholder:not(.unfurled)").each(function(e, t) {
            var i = $(t);
            i.addClass("unfurled");
            var r = _.uniqueId("pending_unfurl_");
            i.attr("id", r);
            try {
              var a = i.attr("href");
              TS.api.call("chat.unfurlLink", {
                url: a
              }).then(function(e) {
                if (!(e && e.data && e.data.attachments && e.data.attachments[a])) throw new Error("No unfurl data");
                var t = e.data.attachments[a],
                  i = $("#" + r);
                if (i.length && (!1 !== TS.model.prefs.a11y_animations || "gif" !== t.file_type)) {
                  var s = TS.inline_attachments.renderStandaloneAttachment(t);
                  if (TS.client && TS.client.ui) {
                    var o = TS.client.ui.areMsgsScrolledToBottom();
                    i.replaceWith(s), void 0 !== o && (TS.pri && TS.log(888, "unfurlPlaceholders: Insta-scrolling back to bottom after unfurl of attachment #" + r), TS.client.ui.instaScrollMsgsToBottom(!1)), n();
                  } else {
                    var l = i.closest(".unfurl-container");
                    i.replaceWith(s), l.wrap('<div class="unfurl"></div>'), l.removeClass("unfurl-render-pending");
                  }
                }
              }).catch(function() {
                $("#" + r).addClass("hidden");
              });
            } catch (e) {
              i.addClass("hidden");
            }
          }), n();
        },
        test: function() {
          return {
            _isSlackMessageUnfurl: r
          };
        }
      });
      var e = ["title", "text", "pretext", "video_html", "audio_html", "audio_url", "other_html", "from_url", "fields", "actions", "image_url", "thumb_url", "author_name", "service_name", "footer", "footer_icon", "ts"],
        t = ["ts", "footer", "fields", "text", "title", "_source"],
        n = _.throttle(function() {
          TS.client && TS.client.ui && TS.client.ui.checkInlineImgsAndIframes("file_preview");
        }, 150),
        i = function(e) {
          var t = {};
          return t.icon = e.service_icon || e.author_icon, t.name = e.service_name || e.author_name, t.link = e.service_url || e.author_link, t.author_name = e.author_name == t.name ? e.author_subname : e.author_name, t.author_link = e.author_link, t;
        },
        r = function(e) {
          return !!e.is_msg_unfurl || (e.from_url && /slack\.com\/archives\/.+\/p.+/.test(e.from_url) ? (e.is_msg_unfurl = !0, !0) : void 0);
        },
        a = function(e, t) {
          if (e.author_link) {
            var n = TS.utility.getMemberIdFromURL(e.author_link),
              i = TS.utility.getBotIDFromURL(e.author_link);
            n && (e._slack_author_id = n), i && (e._slack_bot_id = i);
          }
          t && "pinned_item" === t.subtype && (e.from_url = TS.utility.msgs.constructAbsoluteMsgPermalink(TS.shared.getActiveModelOb(), e.ts)), e._is_automated_unfurl = TS.utility.attachments.isAutomatedSlackUnfurl(e), e.color = null, _.set(e, "mrkdwn_in_hash.text", !0);
          var r = e.author_name,
            a = e.author_subname;
          if (TS.members.shouldDisplayRealNames() || TS.boot_data.feature_name_tagging_client ? e._source.name = r || a : e._source.name = a || r, e._source.author_name = null, e._source.author_link = null, e._unfurl_type_message = !0, !e.footer) {
            var o = s(e.from_url, t);
            o && (e.footer = o);
          }
          return e;
        },
        s = function(e, t) {
          e = e || "";
          var n = "",
            i = TS.utility.getChannelNameFromUrl(e),
            r = TS.shared.getModelObById(i);
          return r && (i = r.name), r && (r.is_im || r.is_mpim) ? n = TS.i18n.t("Direct message", "attachments")() : i && (n = t && t.thread_ts ? TS.utility.msgs.isMsgReply(t) ? TS.i18n.t("From a thread in #{channel_name}", "attachments")({
            channel_name: i
          }) : TS.i18n.t("Thread in #{channel_name}", "attachments")({
            channel_name: i
          }) : TS.i18n.t("Posted in #{channel_name}", "attachments")({
            channel_name: i
          })), n;
        },
        o = function(e) {
          return e._source.name = e.author_name, e._source.link = "https://twitter.com/" + e.author_subname, e._source.author_name = e.author_subname, e._source.author_link = e._source.link, e._unfurl_type_message = !0, e.footer || (e.footer = TS.i18n.t("Twitter", "attachments")()), e.footer_icon || (e.footer_icon = cdn_url + "/6e067/img/services/twitter_pixel_snapped_32.png"), e;
        },
        l = function(e) {
          return e._source.name = e.author_name, e._source.author_name = e.author_subname, e._unfurl_type_message = !0, e._always_expand = !0, e;
        },
        d = function(e) {
          if (e) {
            if (0 === e.indexOf("/img/")) return e;
            var t = {
              width: 16,
              height: 16
            };
            return "ico" === e.split(".").pop() && (t.convert_ico = !0), TS.utility.getImgProxyURLWithOptions(e, t);
          }
        };
    }();
  },
  2660: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.calls", {
        share_url_prefix: document.location.origin + "/call/",
        calls_window_changed_sig: new signals.Signal,
        room_id_sig: new signals.Signal,
        started_platform_call_sig: new signals.Signal,
        window_types: {
          call_window: "call_window",
          mini_panel: "mini_panel",
          incoming_call: "incoming_call"
        },
        messages_to_call_window_types: {
          invite_response: "invite_response",
          invite_cancel: "invite_cancel",
          start_call: "start_call",
          caller_id: "caller_id",
          mini_panel_action: "mini_panel_action",
          did_close_window: "did_close_window",
          ping: "ping",
          ms_msg: "ms_msg",
          reachability: "reachability",
          calls_status: "calls_status",
          regions: "regions",
          got_server: "got_server",
          got_server_error: "got_server_error"
        },
        messages_to_mini_panel_types: {
          update_state: "update_state"
        },
        messages_from_call_window_types: {
          update_mini_panel: "update_mini_panel",
          set_call_window_loaded: "set_call_window_loaded",
          set_call_window_busy: "set_call_window_busy",
          show_growl_notification: "show_growl_notification",
          set_is_publisher_screensharing: "set_is_publisher_screensharing",
          pong: "pong",
          close: "close",
          hide_call_window: "hideCallWindow",
          get_calls_status: "get_calls_status",
          force_janus_disconnect: "force_janus_disconnect",
          get_regions: "get_regions",
          get_server: "get_server",
          get_member_data: "get_member_data",
          play_sound: "play_sound",
          launch_dev_tools_mini_panel: "launch_dev_tools_mini_panel",
          launch_dev_tools_cursors: "launch_dev_tools_cursors"
        },
        messages_from_incoming_call_types: {
          user_clicked_accept_or_reject: "user_clicked_accept_or_reject"
        },
        messages_from_mini_panel_types: {
          user_clicked_action: "user_clicked_action"
        },
        invite_response_types: {
          accept: "accept",
          reject: "reject",
          on_call: "on_call",
          dnd: "dnd",
          hangup: "hangup"
        },
        invite_cancel_types: {
          cleanup: "cleanup",
          timeout: "timeout",
          inviter_cancel: "inviter_cancel",
          accepted_timeout: "accepted_timeout",
          caller_hangup: "caller_hangup"
        },
        invite_unsupported_types: {
          platform: "platform",
          client_version: "client_version",
          offline: "offline"
        },
        onStart: function() {
          i.in_slack_app = !!TS.client, i.in_call_window = !!TS.calls, i.calls_url_prefix = document.location.origin + "/call/", i.in_slack_app && (TS.isSocketManagerEnabled() ? (TS.interop.SocketManager.connectedSig.add(s), TS.interop.SocketManager.disconnectedSig.add(o), TS.interop.SocketManager.socketMessageReceivedSig.add(a)) : (TS.ms.on_msg_sig.add(a), TS.ms.connected_sig.add(s), TS.ms.disconnected_sig.add(o)), window.addEventListener("online", l), window.addEventListener("offline", l), window.addEventListener("message", J), TS.model.is_our_app && (window.macgap && TS.ssb.teams_did_load_sig.add(d), TS.client.login_sig.add(c)), TS.client.windows && (TS.client.windows.win_finished_loading_sig.add(u), TS.client.windows.win_will_close_sig.add(m), TS.client.windows.win_crashed_sig.add(p), TS.client.windows.win_became_key_sig.add(f), TS.client.windows.win_resigned_key_sig.add(h)), TS.ui && TS.ui.window_unloaded_sig.add(g), TS.model.is_our_app ? i.call_window_loaded = !1 : i.call_window_loaded = !0, i.is_ms_connected = !1, i.is_reachability_online = !0, TS.experiment.loadUserAssignments().then(function() {
            "enabled" === TS.experiment.getGroup("calls_ss") && (i.screen_sharing_enabled = TS.model.supports_screen_sharing), "enabled" === TS.experiment.getGroup("calls_better_regions") && (i.calls_better_regions_expt = !0), "enabled" === TS.experiment.getGroup("calls_laser") && (i.laser_enabled = !0), "enabled" === TS.experiment.getGroup("calls_no_cursors_window") && (i.cursors_window_disabled = !0), TS.utility.isAppVersionBefore("2.5.2") || (TS.model.is_lin && "enabled" === TS.experiment.getGroup("calls_electron_webrtc_linux") && (i.electron_webrtc = !0), "enabled" === TS.experiment.getGroup("calls_electron_webrtc") && (i.electron_webrtc = !0), "enabled" === TS.experiment.getGroup("calls_webgl_recovery") && (i.webgl_recovery = !0));
          }));
        },
        startCallInModelOb: function(e, t, n) {
          var i, r = !t && "Slack" !== TS.model.team.prefs.calling_app_name;
          if (TS.interop.utility.looksLikeMemberId(e.id)) {
            var a = e.id;
            if (!(e = TS.ims.getImByMemberId(a))) return void TS.ims.promiseToStartImByMemberId(a, !0, !1).then(function() {
              e = TS.ims.getImByMemberId(a), i = {
                id: e.id,
                is_dm: e.is_im,
                is_mpdm: e.is_mpim,
                is_video_call: n
              }, r ? TS.utility.calls.launchPlatformCalls(i) : TS.utility.calls.launchVideoCall(i);
            });
          }
          i = {
            id: e.id,
            is_dm: e.is_im,
            is_mpdm: e.is_mpim,
            is_video_call: n
          }, r ? TS.utility.calls.launchPlatformCalls(i) : TS.utility.calls.launchVideoCall(i);
        },
        getCallsUrlPrefix: function() {
          return i.calls_url_prefix;
        },
        isEnabled: function() {
          return !!(TS.model && TS.model.team && TS.model.team.prefs) && TS.model.team.prefs.allow_calls;
        },
        isCallWindowReady: function() {
          return i.is_reachability_online && i.is_ms_connected;
        },
        isMultiPartyEnabled: function() {
          return TS.utility.calls.isEnabled() && TS.utility.calls.isPaidTeam();
        },
        isPaidTeam: function() {
          return "" !== TS.model.team.plan;
        },
        isCurrentContextMultiParty: function() {
          return !!(TS.model.active_channel_id || TS.model.active_group_id || TS.model.active_mpim_id);
        },
        launchPlatformCalls: function(e) {
          if (e && e.id) {
            var t = null != TSSSB.env.desktop_app_version;
            TS.utility.calls.started_platform_call_sig.dispatch({
              is_loading: !0
            }), TS.api.call("calls.request", {
              channel: e.id,
              app: TS.model.team.prefs.calling_app_id
            }).then(function(e) {
              if (!e.data.ok) return void r(e);
              var n = window.open(encodeURI(e.data.url), TS.model.team.prefs.calling_app_name);
              try {
                n.focus();
              } catch (e) {
                if (!t) {
                  var i, a = bowser.name;
                  i = a ? TS.i18n.t("Please allow pop-ups in {browser} to make a call. You can <http://my.slack.com/help/requests/new|contact Slack> if you need help.", "utility")({
                    browser: a
                  }) : TS.i18n.t("Please allow pop-ups in your browser to make a call. You can <http://my.slack.com/help/requests/new|contact Slack> if you need help.", "utility")();
                  var s = {
                    text: i,
                    ephemeral_type: "enable_popups",
                    slackbot_feels: "sad_surprise"
                  };
                  TS.client.ui.addEphemeralBotMsg(s);
                }
              }
            }).catch(function(e) {
              r(e);
            }).finally(function() {
              TS.utility.calls.started_platform_call_sig.dispatch({
                is_loading: !1
              });
            });
          }
        },
        launchVideoCall: function(e) {
          if (!TS.model.supports_voice_calls && !TS.utility.calls.platformHasCallsCode()) return void S();
          if (e && e.id && TS.utility.calls.isCallWindowReady()) {
            if (i.incoming_caller_info) {
              var t = TS.ims.getImByMemberId(i.incoming_caller_info.user_id);
              t && t.id === e.id && O().then(function(e) {
                e && (TS.utility.calls.closeIncomingCallWindow(), TS.utility.calls.sendInvitationResponseToCaller({
                  user_id: i.incoming_caller_info.user_id,
                  room_id: i.incoming_caller_info.room_id,
                  response: TS.utility.calls.invite_response_types.accept,
                  did_choose_video: !1
                }));
              });
            }
            P().then(function(t) {
              if (t) return void N();
              TS.utility.calls_log.logEvent({
                event: n.log_events.start_call,
                value: e
              }), j(i.calls_url_prefix + e.id, e.id, {
                start_with_video: e.is_video_call
              });
            });
          }
        },
        sendInvitationResponseToCaller: function(e) {
          if (!(e && e.user_id && e.room_id && e.response && TS.utility.calls.invite_response_types[e.response])) return void TS.utility.calls_log.logError("sendInvitationResponseToCaller: invalid args: ", e);
          TS.utility.calls.room_id_sig.dispatch({
            room_id: e.room_id
          }), e.response && (TS.api.callImmediately("screenhero.rooms.inviteResponse", {
            caller: e.user_id,
            room: e.room_id,
            response: e.response
          }, function(e, t) {
            e || TS.utility.calls_log.logError("inviteResponse API failed with: ", t);
          }), e.response === TS.utility.calls.invite_response_types.accept && (i.accepted_caller_id = e.user_id, e.currently_calling_caller || L(e.room_id, e.did_choose_video))), Promise.join(P(), O(), function(t, i) {
            return TS.utility.calls_log.logEvent({
              event: n.log_events.invite_response_send,
              value: {
                response_type: e.response,
                user_id: e.user_id,
                room_id: e.room_id,
                is_call_window_busy: t,
                is_in_incoming_call: i
              }
            }), null;
          });
        },
        closeIncomingCallWindow: function(e) {
          TS.utility.calls_log.logEvent({
            event: n.log_events.close_incoming_call
          }), TS.model.is_our_app ? window.macgap ? TSSSB.call("closeIncomingCallWindow") : window.winssb && i.incoming_call_token && (TSSSB.call("closeWindow", i.incoming_call_token), delete i.incoming_call_token) : O().then(function(e) {
            e && TS.incoming_call.timeout();
          }), delete i.incoming_caller_info, e || E();
        },
        maybeHandleCallLink: function(e) {
          if (!i.in_slack_app) return !1;
          if (!e || !e.length) return !1;
          if (!e.is("a")) return !1;
          var t = e.attr("href");
          if (!t) return !1;
          t = TS.utility.normalizeDevHost(t), t = t.replace("https://", "").replace("http://", "");
          var r = TS.utility.normalizeDevHost(i.calls_url_prefix);
          for (r = r.replace("https://", "").replace("http://", ""), 0 === t.indexOf(r) && (t = t.replace(r, "call/")); 0 === t.indexOf("/");) t = t.substr(1);
          if (0 !== t.indexOf("call/")) return !1;
          var a = t.split("/");
          if (a.length < 2) return !1;
          var s = a[1];
          return !!s && (!TS.utility.calls.isCallWindowReady() || (O().then(function(e) {
            if (e) return void TS.utility.calls_log.logEvent({
              event: n.log_events.call_object_click_in_incoming_call
            });
            TS.utility.calls.room_id_sig.dispatch({
              room_id: s
            }), L(s);
          }), !0));
        },
        getParentWindow: function() {
          if (window.macgap) {
            if (!i.in_call_window) return window;
            if (document.ssb_main && document.ssb_main.TS && document.ssb_main.TS.utility && document.ssb_main.TS.utility.calls) return document.ssb_main.TS.utility.calls.getParentWindow();
          } else if (!window.winssb || window.parentInfo || window.parentBrowserWindowId) {
            if (window.opener) return window.opener;
          } else TS.utility.calls_log.logWarn("WinSSB: Trying to get parent window before browser window ID is initialized");
        },
        promiseToGetRegions: function() {
          if (e) return e;
          if (i.calls_better_regions_expt) return e = new Promise(function(e) {
            var t = {
              east: "slack-calls-0fc78df4963fa1cd7.slack-core.com",
              west: "slack-calls-04e6ff274e7196b49.slack-core.com",
              eu: "slack-calls-004c3e8ad31b95218.slack-core.com",
              ap: "slack-calls-00f1852837340bafc.slack-core.com"
            };
            TS.api.callImmediately("screenhero.getServers", {
              protocol_version: "2.0",
              media_server: "janus"
            }, function(n, i) {
              n && (t = i.servers);
              var r = Object.keys(t),
                a = !1;
              _.each(r, function(n) {
                $.ajax({
                  type: "OPTIONS",
                  url: "https://" + t[n] + "/janus",
                  async: !0,
                  cache: !1,
                  timeout: 2e3
                }).always(function() {
                  TS.utility.calls_log.logEvent({
                    event: "RegionsNew",
                    value: n
                  }), a || (e(n), a = !0);
                });
              });
            });
          });
          var t;
          return e = new Promise(function(e) {
            $.ajax({
              type: "GET",
              url: "https://region.slack-core.com/region.json",
              async: !0,
              cache: !1,
              timeout: 2e3,
              success: function(n) {
                TS.utility.calls_log.logEvent({
                  event: "Regions",
                  value: n.region_text
                }), t = n.region_text, "dev" === TS.boot_data.version_ts && (t = "dev"), e(t);
              },
              error: function(n, i, r) {
                TS.utility.calls_log.logEventError({
                  event: "GetRegionsErr",
                  value: {
                    status: i,
                    error: r
                  }
                }), t = "west|east|ap|eu", "dev" === TS.boot_data.version_ts && (t = "dev"), e(t);
              }
            });
          });
        },
        promiseToGetServer: function(e, n) {
          if (t[n]) return t[n];
          var i, r = {
            regions: e,
            protocol: "1.0"
          };
          if ("R" === n.charAt(0)) i = "screenhero.rooms.join", r.room = n;
          else {
            i = "screenhero.rooms.create", r.channel = n;
            var a = TS.storage.fetchCallsState();
            a.call_server_override && (r.call_server = a.call_server_override, a.call_server_override = null, TS.storage.storeCallsState(a));
          }
          return t[n] = TS.api.callImmediately(i, r), t[n];
        },
        clearServerPromise: function(e) {
          delete t[e];
        },
        getCallActive: function() {
          return P();
        },
        isScreenSharing: function() {
          return i.is_publisher_screensharing;
        },
        isSupportedMessage: function(e) {
          return -1 !== ["user_change", "pref_change", "team_join", "channel_created", "channel_deleted", "channel_archive", "channel_unarchive", "channel_rename", "channel_joined", "channel_left", "group_deleted", "group_archive", "group_unarchive", "group_rename", "group_joined", "group_left", "im_open", "mpim_joined", "mpim_open", "mpim_close"].indexOf(e);
        },
        getPlatformErrorMessage: function() {
          return TS.model.is_our_app ? TS.model.lin_ssb_version ? TS.i18n.t("Unfortunately, the calls feature is not available on Linux.", "utility")() : window.winssb ? TS.i18n.t("To use the calls feature, please upgrade to the latest version of Slack for Windows.", "utility")() : TS.i18n.t("To use the calls feature, please upgrade to the latest version of the Mac app for Slack.", "utility")() : bowser.mobile && bowser.ios ? TS.i18n.t("Please update your Slack iOS app to the newest version.", "utility")() : bowser.mobile ? TS.i18n.t("Unfortunately, the calls feature is not available on mobile browsers.", "utility")() : TS.i18n.t("Unfortunately, the calls feature is not available in this browser. Please switch to Chrome.", "utility")();
        },
        getPlatformErrorTitle: function() {
          return TS.model.is_our_app ? TS.model.lin_ssb_version ? TS.i18n.t("Calls feature is not available on Linux", "utility")() : window.winssb ? TS.i18n.t("Please update your Slack for Windows", "utility")() : TS.i18n.t("Please update your Slack for Mac", "utility")() : bowser.mobile ? TS.i18n.t("Calls feature is not available on mobile browsers", "utility")() : TS.i18n.t("Calls feature is not available in this browser", "utility")();
        },
        platformHasCallsCode: function() {
          if (TS.model.is_our_app) {
            if ("1.1" == TS.model.mac_ssb_version && TS.model.mac_ssb_version_minor < 8 || parseFloat(TS.model.mac_ssb_version) < 2) return !1;
            if ("1.2" == TS.model.win_ssb_version && TS.model.win_ssb_version_minor < 5 || parseFloat(TS.model.win_ssb_version) < 1.2) return !1;
          }
          return !0;
        },
        verifyOriginUrl: function(e) {
          return TS.utility.url.getHostName(e) == window.location.hostname && _.startsWith(e, "https:");
        },
        getUrlForRoom: function(e) {
          return TS.utility.calls.getUrlForRoomId(e.id);
        },
        getUrlForRoomId: function(e) {
          return TS.utility.calls.share_url_prefix + e;
        },
        dbg: {
          getState: function() {
            return {
              config: n,
              state: i
            };
          },
          isCallWindowBusy: function() {
            P().then(function(e) {
              TS.info("_isCallWindowBusy: " + e);
            });
          },
          isIncomingCallWindowBusy: function() {
            O().then(function(e) {
              TS.info("_isInIncomingCall: " + e);
            });
          }
        }
      });
      var e, t = {},
        n = {
          call_window_dims: {
            width: 1070,
            height: 600,
            min_width: 600,
            min_height: 500
          },
          mini_panel_dims: {
            width: 280,
            height: 64,
            min_width: 280,
            min_height: 44,
            x_offset: 50,
            y_offset: 50
          },
          incoming_call_window_dims: {
            width: 240,
            height: 373
          },
          log_events: {
            previous_crash: "PreviousCrash",
            incoming_call: "IncomingCall",
            invite_response_from_callee: "InviteResponseFromCallee",
            ms_connected: "MSConnected",
            ms_disconnected: "MSDisconnected",
            reachability_changed: "ReachabilityChanged",
            window_closed: "WindowClosed",
            window_crashed: "WindowCrashed",
            call_window_load_timeout: "CallWindowLoadTimeout",
            call_window_load_start: "CallWindowLoadStart",
            incoming_call_timeout: "IncomingCallTimeout",
            send_msg_no_call_window: "SendMsgNoCallWindow",
            send_msg_no_mini_panel: "SendMsgNoMiniPanel",
            call_window_loaded: "CallWindowLoaded",
            call_window_busy: "CallWindowBusy",
            invalid_msg_from_child_window: "InvalidMsgFromChildWindow",
            call_window_pong: "CallWindowPong",
            unknown_msg_from_call_window: "UnknownMsgFromCallWindow",
            incoming_call_click: "IncomingCallClick",
            unknown_msg_from_incoming_call_window: "UnknownMsgFromIncomingCallWindow",
            mini_panel_click: "MiniPanelClick",
            unknown_msg_from_mini_panel: "UnknownMsgFromMiniPanel",
            call_object_click_in_incoming_call: "CallObjectClickInIncomingCall",
            invite_response_send: "InviteResponseSend",
            close_incoming_call: "CloseIncomingCall",
            no_mini_panel_in_update: "NoMiniPanelInUpdate",
            start_call: "StartCall",
            join_call: "JoinCall"
          },
          CALL_WINDOW_LOAD_TIMEOUT_MSECS: 3e4,
          INCOMING_RING_TIMEOUT_MSECS: 29e3
        },
        i = {},
        r = function(e) {
          var t = {
            text: e.data.response || TS.i18n.t("Darn, that didn’t work. Try your call again or <http://my.slack.com/help.requests/new|contact us> if it’s still not working.", "utility")(),
            ephemeral_type: e.data.error || "uncaught_third_party_call_error",
            slackbot_feels: "sad_surprise"
          };
          TS.client.ui.addEphemeralBotMsg(t);
        },
        a = function(e) {
          if (i.in_slack_app) switch (e.type) {
            case "screenhero_invite":
              TS.utility.calls_log.logEvent({
                event: n.log_events.incoming_call,
                value: e
              }), Promise.join(P(), O(), function(t, n) {
                return I(t, n, e), null;
              });
              break;
            case "screenhero_invite_cancel":
              TS.utility.calls.closeIncomingCallWindow(), P().then(function(t) {
                t ? F({
                  message_type: TS.utility.calls.messages_to_call_window_types.invite_cancel,
                  cancel_type: e.cancel_type,
                  user_id: e.responder,
                  room_id: e.room
                }) : i.cached_invite_cancel = {
                  cancel_type: e.cancel_type,
                  user_id: e.responder,
                  room_id: e.room
                };
              });
              break;
            case "screenhero_invite_response":
              TS.utility.calls_log.logEvent({
                event: n.log_events.invite_response_from_callee,
                value: e
              }), F({
                message_type: TS.utility.calls.messages_to_call_window_types.invite_response,
                response_type: e.response,
                user_id: e.responder,
                room_id: e.room
              }), TS.api.callImmediately("screenhero.rooms.inviteCancel", {
                responder: e.responder,
                room: e.room,
                cancel_type: TS.utility.calls.invite_cancel_types.cleanup
              }, function() {});
              break;
            case "sh_room_join":
              TS.utility.calls_log.logInfo("sh_room_join msg: ", e);
              break;
            default:
              TS.utility.calls.isSupportedMessage(e.type) && (TS.model.is_our_app || F({
                message_type: TS.utility.calls.messages_to_call_window_types.ms_msg,
                msg: e
              }));
          }
        },
        s = function() {
          TS.utility.calls_log.logEvent({
            event: n.log_events.ms_connected
          }), i.is_ms_connected = !0, G();
        },
        o = function() {
          TS.utility.calls_log.logEvent({
            event: n.log_events.ms_disconnected
          }), i.is_ms_connected = !1, G();
        },
        l = function() {
          i.is_reachability_online = window.navigator.onLine, G(), D();
        },
        d = function() {
          i.teams_loaded = !0;
        },
        c = function() {
          i.did_login = !0;
        },
        u = function(e) {
          switch (e) {
            case i.incoming_call_token:
              TSSSB.call("centerWindow", e), TSSSB.call("showWindow", e), A();
              break;
            case i.mini_panel_token:
              window.winssb && winssb.window && winssb.window.browserWindows && winssb.window.browserWindows[e] && winssb.window.browserWindows[e].setMinimumSize && (winssb.window.browserWindows[e].setMinimumSize(n.mini_panel_dims.min_width, n.mini_panel_dims.min_height), winssb.window.browserWindows[e].setSize(n.mini_panel_dims.width, n.mini_panel_dims.height));
          }
        },
        m = function(e) {
          switch (TS.utility.calls_log.logEvent({
            event: n.log_events.window_closed,
            value: {
              token: e,
              cw_token: i.call_window_token,
              mp_token: i.mini_panel_token,
              ic_token: i.incoming_call_token
            }
          }), e) {
            case i.call_window_token:
              i.last_call_window_token = i.call_window_token, z(), i.call_window_token && delete i.call_window_token, k(), x();
              break;
            case i.mini_panel_token:
              i.mini_panel_token && delete i.mini_panel_token;
          }
        },
        p = function(e) {
          TS.utility.calls_log.logEvent({
            event: n.log_events.window_crashed,
            value: {
              token: e,
              cw_token: i.call_window_token,
              mp_token: i.mini_panel_token,
              ic_token: i.incoming_call_token
            }
          }), e !== i.last_call_window_token && e !== i.call_window_token || (C(), z(), delete i.call_window_token, TS.utility.calls_log.logEvent({
            event: n.log_events.previous_crash
          }), k(), x());
        },
        f = function(e) {
          e === i.call_window_token && (i.is_publisher_screensharing || TSSSB.call("hideWindow", i.mini_panel_token));
        },
        h = function(e) {
          e === i.call_window_token && P().then(function(e) {
            e && TSSSB.call("showWindowInactive", i.mini_panel_token);
          });
        },
        g = function() {
          TS.utility.calls_log.logInfo("client window unloaded!"), M();
        },
        S = function() {
          TS.generic_dialog.start({
            title: TS.utility.calls.getPlatformErrorTitle(),
            body: TS.utility.calls.getPlatformErrorMessage(),
            show_cancel_button: !0,
            go_button_text: TS.i18n.t("Update Slack App", "utility")(),
            onGo: function() {
              var e = "_" + Math.random();
              TS.utility.openInNewTab("https://slack.com/downloads", e);
            }
          });
        },
        T = function() {
          return _.get(window, "winssb.app.areTransparentWindowsSupported", !0);
        },
        b = function(e) {
          var t;
          if (TS.utility.calls.isEnabled() && TS.utility.calls.platformHasCallsCode()) {
            if (TS.model.is_our_app && i.call_window_token) return F({
              message_type: TS.utility.calls.messages_to_call_window_types.start_call,
              args: {
                url: e
              }
            }), y(), w(), void TSSSB.call("focusWindow", i.call_window_token);
            if (t = {
                url: e || i.calls_url_prefix,
                title: "",
                background: !0,
                width: n.call_window_dims.width,
                height: n.call_window_dims.height,
                minWidth: n.call_window_dims.min_width,
                minHeight: n.call_window_dims.min_height,
                hideMenuBar: !0,
                windowType: "calls",
                show: !0,
                no_spinner: !0,
                hides_on_close: !1
              }, window.winssb) {
              var r = TSSSB.call("getAppDisplay");
              t.x = r.bounds.x + (r.bounds.width - n.call_window_dims.width) / 2, t.y = r.bounds.y + (r.bounds.height - n.call_window_dims.height) / 2;
            }
            i.call_window_token = TS.client.windows.openWindow(t), TS.utility.calls_log.logInfo("_startCallWindow: returned token: ", i.call_window_token), y(), w();
          }
        },
        v = function() {
          if (i.call_window_token) {
            C();
            var e = i.call_window_token;
            delete i.call_window_token, TSSSB.call("closeWindow", e);
          }
        },
        y = function() {
          if (window.winssb && !i.mini_panel_token) {
            var e = TSSSB.call("getDisplayForWindow", i.call_window_token),
              t = {
                x: e.bounds.x + (e.bounds.width - n.mini_panel_dims.x_offset - n.mini_panel_dims.width),
                y: e.bounds.y + n.mini_panel_dims.y_offset,
                width: n.mini_panel_dims.width,
                height: n.mini_panel_dims.height,
                minWidth: n.mini_panel_dims.min_width,
                minHeight: n.mini_panel_dims.min_height,
                hideMenuBar: !0,
                resizable: !1,
                alwaysOnTop: !0,
                frame: !1,
                windowType: "calls_mini_panel",
                show: !1,
                useContentSize: !0,
                skip_css: !0,
                skipTaskbar: !0,
                fullscreenable: !1
              };
            TS.model.is_mac && T() && (t.transparent = !0), t.content_html = TS.templates.calls_minipanel({
              no_border: !TS.model.is_mac,
              js_urls: TS.boot_data.electron_window_injection_urls ? TS.boot_data.electron_window_injection_urls.calls_mini_panel.js : [],
              css_urls: TS.boot_data.electron_window_injection_urls ? TS.boot_data.electron_window_injection_urls.calls_mini_panel.css : []
            }), i.mini_panel_token = TS.client.windows.openWindow(t), TSSSB.call("showWindowInactive", i.mini_panel_token), TSSSB.call("hideWindow", i.mini_panel_token);
          }
        },
        w = function() {
          if (!i.cursors_window_disabled && i.screen_sharing_enabled) {
            var e = [];
            if (TS.boot_data.electron_window_injection_urls) {
              var t = TS.boot_data.electron_window_injection_urls.calls_cursors;
              i.laser_enabled && (e = e.concat(t.laser_js)), e = e.concat(t.js);
            }
            var n = TS.templates.calls_cursors({
                js_urls: e,
                css_urls: TS.boot_data.electron_window_injection_urls ? TS.boot_data.electron_window_injection_urls.calls_cursors.css : []
              }),
              r = {
                width: 0,
                height: 0,
                windowType: "calls_cursors",
                transparent: !0,
                alwaysOnTop: !0,
                hideMenuBar: !0,
                resizable: !1,
                frame: !1,
                useContentSize: !0,
                content_html: n,
                type: "desktop",
                fullscreenable: !1,
                enableLargerThanScreen: !0,
                hasShadow: !1,
                focusable: !1,
                show: !1
              };
            i.cursors_window_token = TS.client.windows.openWindow(r);
          }
        },
        k = function() {
          if (i.mini_panel_token) {
            var e = i.mini_panel_token;
            delete i.mini_panel_token, TSSSB.call("closeWindow", e);
          }
        },
        x = function() {
          if (i.screen_sharing_enabled && i.cursors_window_token) {
            var e = i.cursors_window_token;
            delete i.cursors_window_token, TSSSB.call("closeWindow", e);
          }
        },
        M = function() {
          i.mini_panel_token && (TSSSB.call("closeWindow", i.mini_panel_token), delete i.mini_panel_token), i.call_window_token && (F({
            message_type: TS.utility.calls.messages_to_call_window_types.did_close_window
          }), C(), TSSSB.call("closeWindow", i.call_window_token), z(), delete i.call_window_token), i.window_handle && (i.window_handle.close(), delete i.window_handle);
        },
        C = function() {
          R(!1), H(!1);
        },
        I = function(e, t, r) {
          if (TS.utility.calls.isEnabled()) {
            if (TS.shared.isRelevantTeam()) {
              var a = !1,
                s = TS.ims.getImByMemberId(r.caller);
              if (s && s.id === i.call_channel && (a = !0), e || t || a) return void TS.utility.calls.sendInvitationResponseToCaller({
                user_id: r.caller,
                room_id: r.room,
                response: a ? TS.utility.calls.invite_response_types.accept : TS.utility.calls.invite_response_types.on_call,
                currently_calling_caller: a
              });
              if (TS.dnd.isMemberInDnd(TS.model.user)) return void TS.utility.calls.sendInvitationResponseToCaller({
                user_id: r.caller,
                room_id: r.room,
                response: TS.utility.calls.invite_response_types.dnd
              });
              var o = TS.members.getMemberById(r.caller),
                l = Promise.resolve(o);
              o || (l = TS.api.call("users.info", {
                user: r.caller
              }).then(function(e) {
                TS.members.upsertMember(e.data.user), o = TS.members.getMemberById(r.caller);
              })), l.then(function() {
                var e = TS.members.getPrefCompliantMemberName(o);
                if (TS.model.is_our_app)
                  if (window.winssb) {
                    var t = {
                      width: n.incoming_call_window_dims.width,
                      height: n.incoming_call_window_dims.height,
                      hideMenuBar: !0,
                      resizable: !1,
                      alwaysOnTop: !0,
                      frame: !1,
                      windowType: "calls_incoming_call",
                      show: !1,
                      skip_css: !0,
                      fullscreenable: !1
                    };
                    TS.model.is_mac && T() && (t.transparent = !0);
                    var a = TS.templates.calls_incoming_call({
                      caller: o,
                      name: e,
                      is_video_call: TS.model.supports_video_calls && r.cameras_on > 0,
                      team: TS.model.team.name
                    });
                    t.content_html = TS.templates.calls_incoming_call_window({
                      incoming_call_div: a,
                      room_id: r.room,
                      user_id: r.caller,
                      no_border: !TS.model.is_mac,
                      css_urls: TS.boot_data.electron_window_injection_urls ? TS.boot_data.electron_window_injection_urls.calls_incoming_call.css : []
                    }), i.incoming_call_token = TS.client.windows.openWindow(t);
                  } else window.macgap && (TSSSB.call("incomingCall", {
                    room_id: r.room,
                    name: e,
                    user_id: r.caller,
                    avatar_img_src: o.profile.image_192
                  }), A());
                else TS.incoming_call.start({
                  caller: o,
                  name: e,
                  is_video_call: TS.model.supports_video_calls && r.cameras_on > 0,
                  onAccept: function(e) {
                    TS.utility.calls.sendInvitationResponseToCaller({
                      user_id: r.caller,
                      room_id: r.room,
                      response: TS.utility.calls.invite_response_types.accept,
                      did_choose_video: e
                    });
                  },
                  onReject: function() {
                    TS.utility.calls.sendInvitationResponseToCaller({
                      user_id: r.caller,
                      room_id: r.room,
                      response: TS.utility.calls.invite_response_types.reject
                    });
                  },
                  onTimeout: function() {},
                  onShow: function() {
                    A();
                  },
                  onEnd: function() {
                    E();
                  }
                });
                i.incoming_caller_info = {
                  user_id: r.caller,
                  room_id: r.room
                };
              });
            }
          }
        },
        A = function() {
          TS.sounds.play("call/incoming_ring_" + TS.boot_data.call_sounds_version + ".mp3", {
            should_loop: !0,
            ignore_mute: !0
          }), i.incoming_ring_timer = setTimeout(function() {
            TS.utility.calls_log.logEvent({
              event: n.log_events.incoming_call_timeout
            }), TS.utility.calls.closeIncomingCallWindow();
          }, n.INCOMING_RING_TIMEOUT_MSECS), i.in_incoming_call = !0, K();
        },
        E = function() {
          TS.sounds.stop("call/incoming_ring_" + TS.boot_data.call_sounds_version + ".mp3", {
            ignore_mute: !0
          }), i.incoming_ring_timer && (clearTimeout(i.incoming_ring_timer), delete i.incoming_ring_timer), delete i.in_incoming_call, delete i.incoming_caller_info, V();
        },
        O = function() {
          return TS.model.is_our_app && TSSSB.call("supportsIncomingCallWindowStatus") ? TSSSB.call("isIncomingCallWindowBusy") : Promise.resolve(!!i.in_incoming_call);
        },
        F = function(e) {
          if (TS.model.is_our_app) {
            var t = i.call_window_token;
            if (!t) return void TS.utility.calls_log.logEventWarn({
              event: n.log_events.send_msg_no_call_window,
              value: e
            });
            if (window.macgap) {
              var r = TS.client.windows.getWinByToken(t);
              r && r.window && r.window.postMessage(e, "*");
            } else window.winssb && window.winssb.window && window.winssb.window.postMessage(e, t);
          } else i.window_handle && i.window_handle.postMessage(e, "*");
        },
        B = function(e) {
          if (!i.mini_panel_token) return void TS.utility.calls_log.logEventWarn({
            event: n.log_events.send_msg_no_mini_panel,
            value: e
          });
          window.winssb && window.winssb.window && window.winssb.window.postMessage(e, i.mini_panel_token);
        },
        D = function() {
          i.call_window_loaded && F({
            message_type: TS.utility.calls.messages_to_call_window_types.reachability,
            online: i.is_reachability_online
          });
        },
        R = function(e) {
          TS.utility.calls_log.logEvent({
            event: n.log_events.call_window_loaded,
            value: {
              is_loaded: e
            }
          }), i.call_window_loaded = e, G(), e && TSSSB.call("focusWindow", i.call_window_token), D();
        },
        H = function(e) {
          TS.utility.calls_log.logEvent({
            event: n.log_events.call_window_busy,
            value: {
              is_busy: e
            }
          }), i.is_call_window_busy = e, e ? (q(), i.accepted_caller_id && F({
            message_type: TS.utility.calls.messages_to_call_window_types.caller_id,
            args: {
              caller_id: i.accepted_caller_id
            }
          }), i.cached_invite_cancel && F({
            message_type: TS.utility.calls.messages_to_call_window_types.invite_cancel,
            cancel_type: i.cached_invite_cancel.cancel_type,
            user_id: i.cached_invite_cancel.user_id,
            room_id: i.cached_invite_cancel.room_id
          })) : (z(), i.call_channel = void 0, i.is_publisher_screensharing = !1, i.is_publisher_screenhero = !1), i.accepted_caller_id && delete i.accepted_caller_id, i.cached_invite_cancel && delete i.cached_invite_cancel;
        },
        P = function() {
          return TS.model.is_our_app && TSSSB.call("supportsCallWindowStatus") ? TSSSB.call("isCallWindowBusy") : Promise.resolve(!!i.is_call_window_busy);
        },
        j = function(e, t, n) {
          n = n || {}, e += "?_fast_members=1&_end_call_sound=1" + (n.start_with_video ? "&_start_with_video=1" : ""), TS.pri && (e += "&pri=" + TS.pri), i.electron_webrtc && (e += "&_electron_webrtc=1"), i.webgl_recovery && (e += "&_webgl_recovery=1"), TS.qs_args._calls_halt_at_loading_screen && (e += "&_calls_halt_at_loading_screen=1"), TS.qs_args.locale && (e += "&locale=" + TS.qs_args.locale), TS.qs_args.js_path && (e += "&js_path=" + encodeURIComponent(TS.qs_args.js_path)), TS.utility.calls.promiseToGetRegions().then(function(e) {
            TS.utility.calls.promiseToGetServer(e, t).catch(_.noop);
          }), TS.model.is_our_app ? b(e) : i.window_handle = window.open(e, t), i.call_channel = t;
        },
        L = function(e, t) {
          if (!TS.model.supports_voice_calls && !TS.utility.calls.platformHasCallsCode()) return void S();
          TS.utility.calls.isCallWindowReady() && P().then(function(r) {
            if (r) return void N();
            TS.utility.calls_log.logEvent({
              event: n.log_events.join_call,
              value: {
                room_id: e,
                start_with_video: t
              }
            }), j(i.calls_url_prefix + e, e, {
              start_with_video: t
            });
          });
        },
        U = function(e) {
          var t;
          t = e ? TS.i18n.t("You’re already in a call on another team ({team_name})", "utility")({
            team_name: e
          }) : TS.i18n.t("You’re already in a call on another team", "utility")(), TS.generic_dialog.start({
            title: t,
            body: '<p class="no_bottom_margin">' + TS.i18n.t("You can only be in one call at a time. Please end that call and try again.", "utility")() + "</p>",
            go_button_text: TS.i18n.t("OK", "utility")(),
            show_cancel_button: !1
          });
        },
        N = function() {
          return TS.utility.calls_log.logInfo("_handleAlreadyInCall"), TS.model.is_our_app ? TSSSB.call("supportsCallWindowStatus") ? void TSSSB.call("getCallWindowTeamId", {
            cb: function(e) {
              e === TS.model.team.id ? TSSSB.call("focusWindow", i.call_window_token) : TSSSB.call("getCallWindowTeamName", {
                cb: function(e) {
                  U(e);
                }
              });
            }
          }) : void TSSSB.call("focusWindow", i.call_window_token) : void i.window_handle.focus();
        },
        G = function() {
          TS.utility.calls.platformHasCallsCode() ? TS.client.msg_pane.setCallButtonState(TS.utility.calls.isCallWindowReady()) : TS.client.msg_pane.setCallButtonState(!0);
        },
        W = function(e) {
          if (!i.mini_panel_token) return void TS.utility.calls_log.logEventWarn({
            event: n.log_events.no_mini_panel_in_update
          });
          B({
            message_type: TS.utility.calls.messages_to_mini_panel_types.update_state,
            mini_panel_state: e
          });
        },
        q = function() {
          TS.model.is_our_app && (TSSSB.call("setCallWindowBusy", {
            is_busy: !0
          }), TSSSB.call("setCallWindowToken", {
            token: i.call_window_token
          }), TSSSB.call("setCallWindowTeamId", {
            team_id: TS.model.team.id
          }), TSSSB.call("setCallWindowTeamName", {
            team_name: TS.model.team.name
          }));
        },
        z = function() {
          if (TS.model.is_our_app && TSSSB.call("supportsCallWindowStatus")) {
            var e = String(i.call_window_token);
            TSSSB.call("getCallWindowToken", {
              cb: function(t) {
                t === e && (TSSSB.call("setCallWindowBusy", {
                  is_busy: !1
                }), TSSSB.call("clearCallWindowToken"), TSSSB.call("clearCallWindowTeamId"), TSSSB.call("clearCallWindowTeamName"));
              }
            });
          }
        },
        K = function() {
          TS.model.is_our_app && TSSSB.call("supportsIncomingCallWindowStatus") && (TSSSB.call("setIncomingCallWindowBusy", {
            is_busy: !0
          }), i.incoming_call_token && TSSSB.call("setIncomingCallWindowToken", {
            token: i.incoming_call_token
          }), TSSSB.call("setIncomingCallWindowTeamId", {
            team_id: TS.model.team.id
          }), TSSSB.call("setIncomingCallWindowTeamName", {
            team_name: TS.model.team.name
          }));
        },
        V = function() {
          var e = function() {
            TSSSB.call("setIncomingCallWindowBusy", {
              is_busy: !1
            }), TSSSB.call("clearIncomingCallWindowToken"), TSSSB.call("clearIncomingCallWindowTeamId"), TSSSB.call("clearIncomingCallWindowTeamName");
          };
          if (TS.model.is_our_app) {
            if (!i.incoming_call_token) return void e();
            var t = String(i.incoming_call_token);
            TSSSB.call("getIncomingCallWindowToken", {
              cb: function(n) {
                n === t && e();
              }
            });
          }
        },
        Y = function(e, t, n, i) {
          $.ajax({
            timeout: 2e3,
            type: "POST",
            url: e + "/" + t,
            async: !0,
            cache: !1,
            contentType: "application/json",
            headers: {
              Authorization: "Basic " + btoa(":" + n)
            },
            data: JSON.stringify({
              janus: "destroy",
              transaction: i
            }),
            dataType: "json"
          });
        },
        J = function(e) {
          if (!e || !e.data || !e.data.message_type) return void TS.utility.calls_log.logEvent({
            event: n.log_events.invalid_msg_from_child_window,
            value: e
          });
          if (TS.model.is_our_app || TS.utility.calls.verifyOriginUrl(e.origin))
            if (e.data.origin_window_type === TS.utility.calls.window_types.call_window) switch (e.data.message_type) {
              case TS.utility.calls.messages_from_call_window_types.update_mini_panel:
                W(e.data.mini_panel_state), e.data.mini_panel_state.hidden && TSSSB.call("hideWindow", i.mini_panel_token);
                break;
              case TS.utility.calls.messages_from_call_window_types.set_call_window_loaded:
                R(e.data.is_loaded), D();
                break;
              case TS.utility.calls.messages_from_call_window_types.set_call_window_busy:
                H(e.data.is_busy);
                break;
              case TS.utility.calls.messages_from_call_window_types.show_growl_notification:
                "nothing" !== TS.notifs.getGlobalNotificationSetting() && TS.ui.growls.show(e.data.title, e.data.txt, null, {
                  subtitle: e.data.subtitle,
                  sound_name: "none",
                  channelId: e.data.channel,
                  is_call_notification: !0
                });
                break;
              case TS.utility.calls.messages_from_call_window_types.set_is_publisher_screensharing:
                i.is_publisher_screensharing = e.data.is_enabled, i.is_publisher_screenhero = e.data.is_screenhero, i.is_publisher_screensharing && TSSSB.call("showWindowInactive", i.mini_panel_token);
                break;
              case TS.utility.calls.messages_from_call_window_types.close:
                v(), k(), x();
                break;
              case TS.utility.calls.messages_from_call_window_types.hide_call_window:
                TSSSB.call("hideWindow", i.call_window_token);
                break;
              case TS.utility.calls.messages_from_call_window_types.get_calls_status:
                P().then(function(e) {
                  TSSSB.call("getCallWindowTeamName", {
                    cb: function(t) {
                      F({
                        message_type: TS.utility.calls.messages_to_call_window_types.calls_status,
                        is_busy: e,
                        team_name: t
                      });
                    }
                  });
                });
                break;
              case TS.utility.calls.messages_from_call_window_types.force_janus_disconnect:
                Y(e.data.server, e.data.session_id, e.data.token, e.data.transaction_id);
                break;
              case TS.utility.calls.messages_from_call_window_types.get_regions:
                TS.utility.calls.promiseToGetRegions().then(function(e) {
                  F({
                    message_type: TS.utility.calls.messages_to_call_window_types.regions,
                    regions: e
                  });
                });
                break;
              case TS.utility.calls.messages_from_call_window_types.get_server:
                var t = e.data.id,
                  r = e.data.regions;
                TS.utility.calls.promiseToGetServer(r, t).then(function(e) {
                  F({
                    message_type: TS.utility.calls.messages_to_call_window_types.got_server,
                    data: e.data
                  }), TS.utility.calls.clearServerPromise(t);
                }).catch(function(e) {
                  TS.utility.calls.clearServerPromise(t), F({
                    message_type: TS.utility.calls.messages_to_call_window_types.got_server_error,
                    error: e.data.error
                  });
                });
                break;
              case TS.utility.calls.messages_from_call_window_types.get_member_data:
                TS.members.ensureMembersArePresent([e.data.user_id]).then(function() {
                  F({
                    reply_to: e.data.message_id,
                    message_type: e.data.message_type,
                    message: {
                      user_id: e.data.user_id,
                      member: TS.members.getMemberById(e.data.user_id)
                    }
                  });
                });
                break;
              case TS.utility.calls.messages_from_call_window_types.play_sound:
                TS.sounds.play("call/" + e.data.sound + "_" + TS.boot_data.call_sounds_version + ".mp3");
                break;
              case TS.utility.calls.messages_from_call_window_types.launch_dev_tools_mini_panel:
                TS.model.is_our_app && window.desktop.window.safeInvokeOnWindow(i.mini_panel_token, function(e) {
                  e.toggleDevTools();
                });
                break;
              case TS.utility.calls.messages_from_call_window_types.launch_dev_tools_cursors:
                TS.model.is_our_app && window.desktop.window.safeInvokeOnWindow(i.cursors_window_token, function(e) {
                  e.toggleDevTools();
                });
                break;
              default:
                TS.utility.calls_log.logEvent({
                  event: n.log_events.unknown_msg_from_call_window,
                  value: e
                });
            } else if (e.data.origin_window_type === TS.utility.calls.window_types.incoming_call) switch (e.data.message_type) {
              case TS.utility.calls.messages_from_incoming_call_types.user_clicked_accept_or_reject:
                TS.utility.calls_log.logEvent({
                  event: n.log_events.incoming_call_click,
                  value: e.data
                }), TS.utility.calls.sendInvitationResponseToCaller({
                  user_id: e.data.user_id,
                  room_id: e.data.room_id,
                  response: e.data.did_accept ? TS.utility.calls.invite_response_types.accept : TS.utility.calls.invite_response_types.reject,
                  did_choose_video: e.data.did_choose_video
                });
                TS.utility.calls.closeIncomingCallWindow(!0);
                break;
              default:
                TS.utility.calls_log.logEvent({
                  event: n.log_events.unknown_msg_from_incoming_call_window,
                  value: e
                });
            } else if (e.data.origin_window_type === TS.utility.calls.window_types.mini_panel) switch (e.data.message_type) {
              case TS.utility.calls.messages_from_mini_panel_types.user_clicked_action:
                TS.utility.calls_log.logEvent({
                  event: n.log_events.mini_panel_click,
                  value: e.data
                }), "mute" === e.data.action || "leave" === e.data.action || "screenhero" === e.data.action || "stop_screenshare" === e.data.action ? F({
                  message_type: TS.utility.calls.messages_to_call_window_types.mini_panel_action,
                  action: e.data.action
                }) : "activate" === e.data.action && TSSSB.call("showWindow", i.call_window_token);
                break;
              default:
                TS.utility.calls_log.logEvent({
                  event: n.log_events.unknown_msg_from_mini_panel,
                  value: e
                });
            }
        };
    }();
  },
  2661: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.calls_analytics", {
        onStart: function() {
          TS.calls && (TS.calls.room_id_sig.add(o), TS.web.login_sig.add(l)), TS.client && (TS.utility.calls.room_id_sig.add(o), TS.client.login_sig.add(l));
        },
        teardown: function() {
          clearTimeout(e), r.room_id && delete r.room_id;
        },
        isStateClean: function() {
          return _.isEmpty(r);
        },
        record: function(t, r) {
          var a = t.slice(0, t.indexOf("."));
          !("video_send_stats" === a || "video_recv_stats" === a) && _.find(i, function(e) {
            return e.measurement === t;
          }) || i.push(s(t, r)), e || (e = setTimeout(TS.utility.calls_analytics.flush, n));
        },
        promiseToRecordImmediately: function(e, t) {
          var n = {
            database: a(),
            points: [s(e, t)]
          };
          return TS.api.call("screenhero.rooms.proxyAnalytics", {
            data: JSON.stringify(n)
          }, null, !0).catch(_.noop);
        },
        flush: function() {
          if (i.length) {
            var t = Date.now();
            i = i.map(function(e) {
              return e.fields.posted_time = t, e;
            }), TS.api.call("screenhero.rooms.proxyAnalytics", {
              data: JSON.stringify({
                database: a(),
                points: i
              })
            }, null, !0).catch(_.noop), i = [];
          }
          clearTimeout(e), e = void 0;
        },
        logEvent: function(e) {
          var n;
          if (!(TS.model && TS.model.user && TS.model.user.id || r.room_id)) return void TS.warn("calls analytics module not ready: " + JSON.stringify(e));
          n = ["user_event_logs"], r.room_id ? n.push(r.room_id) : n.push(TS.model.user.id), $.extend(e || {}, {
            user_id: TS.model.user.id,
            os: t.os,
            ssb_version: t.ssb_version,
            webapp_version: t.webapp_version
          }), TS.utility.calls_analytics.record(n.join("."), e);
        }
      });
      var e, t = {},
        n = 5e3,
        i = [],
        r = {},
        a = function() {
          return "dev" === TS.boot_data.version_ts ? "calls_dev" : "calls";
        },
        s = function(e, t) {
          return "string" != typeof t && "number" != typeof t || (t = {
            value: t
          }), t.value = JSON.stringify(t.value), t.client_time = Date.now(), {
            measurement: e,
            fields: t
          };
        },
        o = function(e) {
          r.room_id = e.room_id;
        },
        l = function() {
          TS.model.is_mac ? t.os = "mac" : TS.model.is_win ? t.os = "win" : TS.model.is_lin ? t.os = "lin" : t.os = navigator.userAgent, t.webapp_version = TS.boot_data.min_sh_version_ts, TS.model.mac_ssb_version ? window.macgap && macgap.screenhero && macgap.screenhero.getAppVersion ? t.ssb_version = macgap.screenhero.getAppVersion() : t.ssb_version = TS.model.mac_ssb_version + "." + TS.model.mac_ssb_version_minor : TS.model.win_ssb_version ? t.ssb_version = TS.model.win_ssb_version + "." + TS.model.win_ssb_version_minor : TS.model.lin_ssb_version ? t.ssb_version = TS.model.lin_ssb_version + "." + TS.model.win_lin_version_minor : t.ssb_version = "N/A";
        };
    }();
  },
  2662: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("utility.calls_log", {
        enableDevLogging: function() {
          "dev" === TS.boot_data.version_ts && (TS.pri = "123," + TS.pri);
        },
        enableBuffering: function(t) {
          e.enable_buffering = t;
        },
        logInfo: function() {
          var e = r.apply(null, arguments);
          TS.info(e), i(e, "INF");
        },
        logWarn: function() {
          var e = r.apply(null, arguments);
          TS.warn(e), i(e, "WRN");
        },
        logError: function() {
          var e = r.apply(null, arguments);
          TS.error(e), i(e, "ERR");
        },
        logEvent: function(e) {
          a(e, "EDBG", !0);
        },
        logEventInfo: function(e) {
          a(e, "EINF", !0);
        },
        logEventWarn: function(e) {
          a(e, "EWRN", !1);
        },
        logEventError: function(e) {
          a(e, "EERR", !1);
        },
        getAndClearBuffer: function() {
          var n = t.buffer.join("\n");
          return t.buffer_overflow && (n += e.excess), t.buffer = [], t.buffer_length = 0, t.buffer_overflow = !1, n;
        }
      });
      var e = {
          enable_buffering: !1,
          MAX_LENGTH: 3e4,
          excess: "... log is too long"
        },
        t = {
          buffer: [],
          buffer_length: 0,
          buffer_overflow: !1
        },
        i = function(n, i) {
          var r;
          !1 !== e.enable_buffering && (r = "[" + i + "|" + TS.makeLogDate() + "]:", r.length + n.length + t.buffer_length + e.excess.length < e.MAX_LENGTH ? t.buffer.push(r + n) : t.buffer_overflow = !0);
        },
        r = function() {
          for (var e = [], t = 0; t < arguments.length; t += 1) arguments[t] && ("object" === n(arguments[t]) ? e.push(JSON.stringify(arguments[t])) : e.push(arguments[t].toString()));
          return e.join(" ");
        },
        a = function(e, t, n) {
          var a = r(e.value),
            s = e.event + ": " + a;
          switch (t) {
            case "EDBG":
              break;
            case "EINF":
              TS.info(s);
              break;
            case "EWRN":
              TS.warn(s);
              break;
            case "EERR":
              TS.error(s);
          }
          n || TS.utility.calls_analytics.logEvent($.extend(e, {
            level: t
          })), i(s, t);
        };
    }();
  },
  2663: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.channels", {
        getPermissibleChannelName: function(e) {
          if ("@" === e.charAt(0) || "#" === e.charAt(0) && 1 === e.length || e.indexOf(",") > -1) return null;
          if (!(e && /^.+$/.test(e) && TS.permissions.members.canCreateChannels())) return null;
          var t = TS.utility.cleanChannelName(e.substring(0, 21));
          return !t || TS.channels.getChannelByName(t) || TS.groups.getGroupByName(t) || TS.members.getMemberByName(t) ? null : t;
        }
      });
    }();
  },
  2664: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("utility.contenteditable", {
        onStart: function() {
          TS.utility.contenteditable.refreshTextPreferences();
        },
        create: function(e, t) {
          if (t || (t = {}), (e = a(e)) && !s(e) && !l(e)) {
            var n = {
              modules: {
                tabcomplete: {
                  searchOptions: {
                    complete_member_specials: !0
                  },
                  appendMenu: function(e) {
                    $("body").prepend(e);
                  },
                  render: TS.tabcomplete.render
                },
                textsubstitutions: {
                  getTextPreferences: TS.utility.contenteditable.getTextPreferences,
                  buildSmartQuotesDelta: TS.format.texty.buildSmartQuotesDelta
                },
                clipboard: {
                  hasTeamClipboardData: function(e) {
                    return e && e.clipboardData && e.clipboardData.getData("slack/" + TS.model.team.id);
                  },
                  onPaste: function(t) {
                    return TS.utility.contenteditable.paste(e, t);
                  }
                }
              },
              onEnter: function() {
                return !0;
              },
              onEscape: function() {
                return !0;
              },
              onTab: function() {
                return TS.boot_data.feature_keyboard_navigation;
              },
              singleLineInput: !1,
              onTextChange: _.noop,
              attributes: {
                role: "textbox",
                tabindex: 0,
                "aria-multiline": !0,
                "aria-haspopup": !0
              },
              log: _.partial(TS.log, 116),
              logError: TS.error
            };
            if (TS.boot_data.feature_texty_mentions)
              if (TS.boot_data.feature_name_tagging_client) {
                var i = n.modules.tabcomplete.searchOptions.complete_member_specials;
                _.get(t, "modules.tabcomplete.searchOptions") && t.modules.tabcomplete.searchOptions.hasOwnProperty("complete_member_specials") && (i = t.modules.tabcomplete.searchOptions.complete_member_specials), n.modules.slackmention = {
                  processPotentialMentions: _.debounce(function() {
                    p(e, i || _.get(t, "modules.tabcomplete.searchOptions"));
                  }, 100)
                };
              } else n.modules.slackmention = {};
            if (TS.boot_data.feature_name_tagging_client && (n.useNameTagging = !0), _.defaultsDeep(t, n), t.modules && t.modules.tabcomplete && (t.modules.tabcomplete.completers || (t.modules.tabcomplete.completers = [TS.tabcomplete.channels, TS.tabcomplete.commands, TS.tabcomplete.emoji, TS.tabcomplete.members]), !TS.boot_data.feature_keyboard_navigation && _.includes(t.modules.tabcomplete.completers, TS.tabcomplete.commands))) {
              var r = t.onTab || _.noop;
              t.onTab = function() {
                if (!TS.utility.contenteditable.isEmpty(e) || !u(e)) return r();
              };
            }
            var o = t.onEnter;
            t.onEnter = function(n) {
              return !(t.singleLineInput || !c(n, e)) || !!_.isFunction(o) && o(n);
            };
            var m = new TS.interop.texty.TextyClass(e, t);
            d(e, m);
          }
        },
        unload: function(e) {
          if ((e = a(e)) && o(e)) {
            var t = l(e);
            t && t.unload();
          }
        },
        isActiveElement: function(e) {
          if (!(e = a(e))) return !1;
          if (s(e)) return document.activeElement === e;
          if (o(e)) {
            return !!l(e).hasFocus() || document.activeElement && -1 != document.activeElement.className.indexOf("ql-clipboard") && document.activeElement.parentNode === e;
          }
          return !1;
        },
        focus: function(e) {
          if (e = a(e))
            if (s(e)) e.focus();
            else if (o(e)) {
            var t = l(e);
            t.focus();
          }
        },
        hasFocus: function(e) {
          if (e = a(e)) {
            if (s(e)) return $(e).is(":focus");
            if (o(e)) {
              return l(e).hasFocus();
            }
          }
        },
        blur: function(e) {
          if (e = a(e))
            if (s(e)) e.blur();
            else if (o(e)) {
            var t = l(e);
            t.blur();
          }
        },
        isContenteditable: function(e) {
          return !((e = a(e)) && TS.ui && TS.ui.paste && TS.ui.paste.catcher_div && TS.ui.paste.catcher_div === e) && (!!e.isContentEditable || !!o(e));
        },
        disable: function(e) {
          if (e = a(e))
            if (s(e)) e.disabled = !0;
            else if (o(e)) {
            var t = l(e);
            t.disable();
          }
        },
        isDisabled: function(e) {
          if (e = a(e)) {
            if (s(e)) return !0 === e.disabled;
            if (o(e)) {
              return !l(e).isEnabled();
            }
            return !1;
          }
        },
        enable: function(e) {
          if (e = a(e))
            if (s(e)) e.disabled = !1;
            else if (o(e)) {
            var t = l(e);
            t.enable();
          }
        },
        isEnabled: function(e) {
          if (!(e = a(e))) return !1;
          if (s(e)) return !0 !== e.disabled;
          if (o(e)) {
            return l(e).isEnabled();
          }
          return !1;
        },
        value: function(e, t) {
          if (!(e = a(e))) return "";
          if (s(e)) return _.isString(t) && (e.value = t), e.value;
          if (o(e)) {
            TS.boot_data.feature_name_tagging_client && S();
            var n = l(e);
            return _.isString(t) ? TS.boot_data.feature_name_tagging_client ? n.setContents(TS.format.texty.convertContentsStringToContents(t)) : n.setText(t) : _.isObject(t) && n.setContents(t), TS.boot_data.feature_name_tagging_client ? TS.format.texty.convertContentsToString(n.getContents()) : n.getText();
          }
          return "";
        },
        displayValue: function(e) {
          if (!(e = a(e))) return "";
          if (s(e)) return e.value;
          if (o(e)) {
            return l(e).getText();
          }
          return "";
        },
        getLength: function(e) {
          return TS.utility.contenteditable.displayValue(e).length;
        },
        getTextForRange: function(e, t, n) {
          if (!(e = a(e))) return "";
          if (s(e)) {
            return TS.utility.contenteditable.value(e).substr(t, n);
          }
          if (o(e)) {
            return l(e).getTextForRange(t, n);
          }
          return "";
        },
        insertTextAtCursor: function(e, t, n) {
          if (e = a(e)) {
            var i;
            if (s(e)) {
              if (!_.isString(t)) return e.value;
              i = TS.utility.contenteditable.cursorPosition(e);
              var r = TS.utility.contenteditable.value(e),
                d = r.substr(0, i.start) + t + r.substr(i.start);
              e.value = d, n && (TS.utility.contenteditable.focus(e), TS.utility.contenteditable.cursorPosition(e, i.start + t.length, 0));
            } else if (o(e)) {
              var c = l(e);
              _.isString(t) && c.insertTextAtCursor(t, n);
            }
          }
        },
        insertContentsAtCursor: function(e, t, n) {
          if (e = a(e))
            if (s(e)) TS.utility.contenteditable.insertTextAtCursor(e, TS.format.texty.convertContentsToString(t), n);
            else if (o(e)) {
            var i = l(e);
            i.insertContentsAtCursor(t, n);
          }
        },
        updateContents: function(e, t) {
          if (e = a(e))
            if (s(e)) TS.warn("updateContents called on form element");
            else if (o(e)) {
            var n = l(e);
            n.updateContents(t);
          }
        },
        paste: function(e, t) {
          if (!(e = a(e))) return !1;
          if (s(e)) return !1;
          if (o(e)) {
            var n, i;
            if (t && t.clipboardData && t.clipboardData.getData("slack/plain")) return t.preventDefault(), n = m(e, t.clipboardData.getData("slack/plain")), i = TS.format.texty.convertContentsStringToContents(n), i = TS.format.texty.removeInvalidMentions(i), TS.utility.contenteditable.insertContentsAtCursor(e, i, !0), !0;
            if (n = TS.ui.paste.getPlainTextFromClipboard(t), !_.isEmpty(n)) return t.preventDefault(), n = m(e, n), TS.utility.contenteditable.insertTextAtCursor(e, n, !0), !0;
          }
          return !1;
        },
        getFormats: function(e, t) {
          if (!(e = a(e))) return {};
          if (o(e)) {
            return l(e).getFormats(t);
          }
          return {};
        },
        isEmpty: function(e, t) {
          var n = TS.utility.contenteditable.value(e);
          return n && t && (n = n.trim()), 0 === n.length;
        },
        clear: function(e, t) {
          if (e = a(e))
            if (s(e)) e.value = "";
            else if (o(e)) {
            TS.boot_data.feature_name_tagging_client && S();
            var n = l(e);
            n.clear({
              is_silent: !!t
            });
          }
        },
        placeholder: function(e, t) {
          if (!(e = a(e))) return "";
          var n;
          if (s(e)) _.isString(t) && ("" === t ? e.removeAttribute("placeholder") : e.setAttribute("placeholder", t)), n = e.getAttribute("placeholder");
          else if (o(e)) {
            var i = l(e);
            i.setPlaceholder(t), n = i.getPlaceholder();
          }
          return n || "";
        },
        cursorPosition: function(e, t, n) {
          var i, r = {
            start: 0,
            end: 0,
            length: 0
          };
          if (!(e = a(e))) return r;
          if (_.isNumber(t)) n || (n = 0), r.start = t, r.end = t + n, r.length = n, s(e) ? TS.selection.selectCharacters(e, r.start, r.end) : o(e) && (i = l(e), i.setSelection(r.start, r.length));
          else {
            if (!TS.utility.contenteditable.isActiveElement(e)) {
              var d = $(e).data("utility-contenteditable-cursor-position");
              if (_.isObject(d)) return d;
            }
            if (s(e)) e.focus(), r.start = e.selectionStart, r.end = e.selectionEnd, r.length = Math.abs(e.selectionEnd - e.selectionStart);
            else if (o(e)) {
              i = l(e);
              var c = i.getSelection();
              c && (r.start = c.index, r.length = c.length, r.end = r.start + r.length);
            }
          }
          return r;
        },
        setCursorAtEnd: function(e) {
          var t = TS.utility.contenteditable.displayValue(e);
          TS.utility.contenteditable.cursorPosition(e, t.length);
        },
        isTextSelected: function(e) {
          if (e = a(e)) {
            if (s(e)) return !(!window.getSelection || !window.getSelection().toString());
            if (o(e)) {
              return l(e).getSelection().length > 0;
            }
          }
        },
        deserialize: function(e, t) {
          if (t && (e = a(e)))
            if (s(e)) e.value = t;
            else if (o(e)) {
            if ("object" === (void 0 === t ? "undefined" : n(t)) && t.hasOwnProperty("contents")) return void TS.utility.contenteditable.value(e, t);
            if ("string" != typeof t) return;
            try {
              var i = JSON.parse(t);
              if (null !== i && "object" === (void 0 === i ? "undefined" : n(i))) return void TS.utility.contenteditable.value(e, i);
            } catch (e) {}
            TS.utility.contenteditable.value(e, t);
          }
        },
        isCursorInPreBlock: function(e) {
          if (!(e = a(e))) return !1;
          if (o(e)) {
            return l(e).isCursorInPreBlock();
          }
          return !1;
        },
        deleteSelection: function(e) {
          if (!(e = a(e))) return !1;
          if (o(e)) {
            return l(e).deleteSelection();
          }
          window.getSelection().deleteFromDocument();
        },
        getTextPreferences: function() {
          return e;
        },
        refreshTextPreferences: function() {
          if (!TS.model.is_our_app && !TS.boot_data.feature_texty_browser_substitutions || TS.model.is_our_app && !TS.model.is_mac) return void(e = !1);
          if (e = {
              substitutions: {},
              useSmartDashes: !0,
              useSmartQuotes: !0
            }, TS.model.is_our_app) {
            var t = TSSSB.call("readSystemTextPreferences");
            t && (e.substitutions = _.mapValues(_.keyBy(t.substitutions, "replace"), "with"), e.useSmartDashes = t.useSmartDashes, e.useSmartQuotes = t.useSmartQuotes);
          }!e.substitutions["--"] && e.useSmartQuotes && (e.substitutions["--"] = "—");
        },
        clearHistory: function(e) {
          if (!(e = a(e))) return !1;
          var t = l(e);
          t && t.clearHistory();
        },
        supportsTexty: function() {
          return TS.boot_data.feature_texty && !TS.model.is_old_ie;
        },
        test: function() {
          return {
            _normalizeInput: a,
            _isFormElement: s
          };
        }
      });
      var e = !1,
        t = /(?:^|\s|\{|\[|\(|<|>|\*|_|\/|"|“|‘|'|:)(@[\w|.|-]+)/g,
        i = [],
        r = [],
        a = function(e) {
          return !!e && (e instanceof jQuery && e[0] && (e = e[0]), e.nodeType === Node.ELEMENT_NODE && (TS.utility.contenteditable.supportsTexty() ? "textarea" === e.tagName.toLowerCase() ? e : "input" === e.tagName.toLowerCase() ? e : $(e).hasClass("ql-editor") ? e.parentNode : e.hasAttribute("contenteditable") ? e : !(!TS.utility.contenteditable.supportsTexty() || "DIV" !== e.tagName) && e : e));
        },
        s = function(e) {
          return !!e && (!TS.utility.contenteditable.supportsTexty() || ("textarea" === e.tagName.toLowerCase() || "input" === e.tagName.toLowerCase()));
        },
        o = function(e) {
          return !!e && (!!TS.utility.contenteditable.supportsTexty() && !!l(e));
        },
        l = function(e) {
          return $(e).data("__ts_quill");
        },
        d = function(e, t) {
          $(e).data("__ts_quill", t);
        },
        c = function(e, t) {
          return !e.metaKey && (t && TS.utility.contenteditable.isCursorInPreBlock(t) && TS.model.prefs.enter_is_special_in_tbt ? !e.shiftKey : !(!e.shiftKey || e.ctrlKey || e.altKey) || !(e.shiftKey || !e.ctrlKey && !e.altKey));
        },
        u = function(e) {
          var t = TS.chat_history.getCommands();
          if (!t.length) return !1;
          var n = t[0];
          return TS.utility.contenteditable.value(e, n), TS.utility.contenteditable.cursorPosition(e, n.length, 0), !0;
        },
        m = function(e, t) {
          return $(e).hasClass("texty_single_line_input") && (t = t.replace(/\n/g, " ")), t.replace(/^[\u200b\uFEFF]+|[\u200b\uFEFF]+$/gm, "");
        },
        p = function(e, n) {
          if (!$("#chat_input_tab_ui").length) {
            var i = TS.utility.contenteditable.value(e),
              r = TS.utility.contenteditable.cursorPosition(e);
            if (i.length) {
              var a, s = TS.format.texty.convertContentsStringToContents(i),
                o = [],
                l = [],
                d = 0;
              n && (a = TS.tabcomplete.members.getBroadcastKeywords(n));
              var c = {
                  members: TS.members.getActiveMembersWithSelfAndSlackbot(),
                  usergroups: TS.user_groups.getActiveUserGroups(),
                  broadcast_keywords: a
                },
                u = {
                  allow_empty_query: !1,
                  frecency: !1,
                  limit: 2,
                  prefer_exact_match: !0
                };
              s.contents.forEach(function(e) {
                e.attributes || e.insert.replace(t, function(t, n, i) {
                  if (i += t.length - n.length, !(r.start > i + d && r.start <= i + d + n.length)) {
                    var a = TS.sorter.search(n, c, u);
                    1 === a.length ? o.push(h(e.insert, n, i + d, a)) : a.length > 0 ? o.push(h(e.insert, n, i + d, a)) : l.push(n);
                  }
                }), d += e.insert.length;
              }), g(e, o), f(e, _.uniq(l));
            }
          }
        },
        f = function(e, n) {
          _.pullAll(n, i), _.pullAll(n, r), n.length && n.forEach(function(n) {
            r.push(n);
            var a = {
              query: n.replace(/^@/, ""),
              max_api_results: 2,
              include_org: !0,
              include_slackbot: !0,
              include_self: !0,
              full_profile_filter: !1
            };
            TS.members.promiseToSearchMembers(a).then(function(a) {
              if (!a || !a.items || !a.items.length) return void i.push(n);
              var s = 0,
                o = [],
                l = TS.utility.contenteditable.value(e),
                d = TS.utility.contenteditable.cursorPosition(e);
              TS.format.texty.convertContentsStringToContents(l).contents.forEach(function(e) {
                e.attributes || e.insert.replace(t, function(t, i, r) {
                  i === n && (r += t.length - i.length, d.start > r + s && d.start <= r + s + i.length || (a.items.length, o.push(h(e.insert, i, r + s, a.items))));
                }), s += e.insert.length;
              }), g(e, o), _.pull(r, n);
            });
          });
        },
        h = function(e, t, n, i) {
          var r = 1 === i.length && i[0],
            a = {
              id: "UNVERIFIED",
              label: t,
              index: n,
              length: t.length
            };
          if (r) {
            var s = TS.tabcomplete.members.getDisplayTextForResult(r, !0);
            a = {
              id: r.id,
              label: s,
              index: n,
              length: t.length
            }, e.substr(n, s.length) === s && (a.length = s.length);
          }
          return a;
        },
        g = function(e, t) {
          if (t.length) {
            var n = {
                contents: []
              },
              i = 0;
            t.forEach(function(e) {
              var t = e.index - i;
              t > 0 && n.contents.push({
                retain: t
              }), n.contents.push({
                delete: e.length
              });
              var r = {};
              r = "UNVERIFIED" === e.id ? {
                id: e.id,
                label: e.label,
                unverified: !0
              } : {
                id: e.id,
                label: e.label,
                unverified: !1
              }, r.mention = TS.format.texty.shouldHighlightMention(r.id, r.label), n.contents.push({
                insert: e.label,
                attributes: {
                  slackmention: r
                }
              }), i = e.index + e.length;
            }), TS.utility.contenteditable.updateContents(e, n);
          }
        },
        S = function() {
          i = [], r = [];
        };
    }();
  },
  2665: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("utility.date", {
        month_names: [TS.i18n.t("January", "date_utilities")(), TS.i18n.t("February", "date_utilities")(), TS.i18n.t("March", "date_utilities")(), TS.i18n.t("April", "date_utilities")(), TS.i18n.t("May", "date_utilities")(), TS.i18n.t("June", "date_utilities")(), TS.i18n.t("July", "date_utilities")(), TS.i18n.t("August", "date_utilities")(), TS.i18n.t("September", "date_utilities")(), TS.i18n.t("October", "date_utilities")(), TS.i18n.t("November", "date_utilities")(), TS.i18n.t("December", "date_utilities")()],
        short_month_names: [TS.i18n.t("Jan", "date_utilities")(), TS.i18n.t("Feb", "date_utilities")(), TS.i18n.t("March", "date_utilities")(), TS.i18n.t("April", "date_utilities")(), TS.i18n.t("May", "date_utilities")(), TS.i18n.t("June", "date_utilities")(), TS.i18n.t("July", "date_utilities")(), TS.i18n.t("Aug", "date_utilities")(), TS.i18n.t("Sept", "date_utilities")(), TS.i18n.t("Oct", "date_utilities")(), TS.i18n.t("Nov", "date_utilities")(), TS.i18n.t("Dec", "date_utilities")()],
        really_short_month_names: [TS.i18n.t("Jan", "date_utilities")(), TS.i18n.t("Feb", "date_utilities")(), TS.i18n.t("Mar", "date_utilities")(), TS.i18n.t("Apr", "date_utilities")(), TS.i18n.t("May", "date_utilities")(), TS.i18n.t("Jun", "date_utilities")(), TS.i18n.t("Jul", "date_utilities")(), TS.i18n.t("Aug", "date_utilities")(), TS.i18n.t("Sep", "date_utilities")(), TS.i18n.t("Oct", "date_utilities")(), TS.i18n.t("Nov", "date_utilities")(), TS.i18n.t("Dec", "date_utilities")()],
        day_names: [TS.i18n.t("Sunday", "date_utilities")(), TS.i18n.t("Monday", "date_utilities")(), TS.i18n.t("Tuesday", "date_utilities")(), TS.i18n.t("Wednesday", "date_utilities")(), TS.i18n.t("Thursday", "date_utilities")(), TS.i18n.t("Friday", "date_utilities")(), TS.i18n.t("Saturday", "date_utilities")()],
        short_day_names: [TS.i18n.t("Sun", "date_utilities")(), TS.i18n.t("Mon", "date_utilities")(), TS.i18n.t("Tue", "date_utilities")(), TS.i18n.t("Wed", "date_utilities")(), TS.i18n.t("Thu", "date_utilities")(), TS.i18n.t("Fri", "date_utilities")(), TS.i18n.t("Sat", "date_utilities")()],
        really_short_day_names: [TS.i18n.t("Su", "date_utilities")(), TS.i18n.t("Mo", "date_utilities")(), TS.i18n.t("Tu", "date_utilities")(), TS.i18n.t("We", "date_utilities")(), TS.i18n.t("Th", "date_utilities")(), TS.i18n.t("Fr", "date_utilities")(), TS.i18n.t("Sa", "date_utilities")()],
        ones_digit_names: [TS.i18n.t("zero", "date_utilities")(), TS.i18n.t("one", "date_utilities")(), TS.i18n.t("two", "date_utilities")(), TS.i18n.t("three", "date_utilities")(), TS.i18n.t("four", "date_utilities")(), TS.i18n.t("five", "date_utilities")(), TS.i18n.t("six", "date_utilities")(), TS.i18n.t("seven", "date_utilities")(), TS.i18n.t("eight", "date_utilities")(), TS.i18n.t("nine", "date_utilities")(), TS.i18n.t("ten", "date_utilities")(), TS.i18n.t("eleven", "date_utilities")(), TS.i18n.t("twelve", "date_utilities")(), TS.i18n.t("thirteen", "date_utilities")(), TS.i18n.t("fourteen", "date_utilities")(), TS.i18n.t("fifteen", "date_utilities")(), TS.i18n.t("sixteen", "date_utilities")(), TS.i18n.t("seventeen", "date_utilities")(), TS.i18n.t("eighteen", "date_utilities")(), TS.i18n.t("nineteen", "date_utilities")()],
        tens_digit_names: [TS.i18n.t("twenty", "date_utilities")(), TS.i18n.t("thirty", "date_utilities")(), TS.i18n.t("forty", "date_utilities")(), TS.i18n.t("fifty", "date_utilities")(), TS.i18n.t("sixty", "date_utilities")(), TS.i18n.t("seventy", "date_utilities")(), TS.i18n.t("eighty", "date_utilities")(), TS.i18n.t("ninety", "date_utilities")()],
        ones_digit_ordinal_names: [TS.i18n.t("zeroth", "date_utilities")(), TS.i18n.t("first", "date_utilities")(), TS.i18n.t("second", "date_utilities")(), TS.i18n.t("third", "date_utilities")(), TS.i18n.t("fourth", "date_utilities")(), TS.i18n.t("fifth", "date_utilities")(), TS.i18n.t("sixth", "date_utilities")(), TS.i18n.t("seventh", "date_utilities")(), TS.i18n.t("eighth", "date_utilities")(), TS.i18n.t("ninth", "date_utilities")(), TS.i18n.t("tenth", "date_utilities")(), TS.i18n.t("eleventh", "date_utilities")(), TS.i18n.t("twelfth", "date_utilities")(), TS.i18n.t("thirteenth", "date_utilities")(), TS.i18n.t("fourteenth", "date_utilities")(), TS.i18n.t("fifteenth", "date_utilities")(), TS.i18n.t("sixteenth", "date_utilities")(), TS.i18n.t("seventeenth", "date_utilities")(), TS.i18n.t("eighteenth", "date_utilities")(), TS.i18n.t("nineteenth", "date_utilities")()],
        tens_digit_ordinal_names: [TS.i18n.t("twentieth", "date_utilities")(), TS.i18n.t("thirtieth", "date_utilities")(), TS.i18n.t("fortieth", "date_utilities")(), TS.i18n.t("fiftieth", "date_utilities")(), TS.i18n.t("sixtieth", "date_utilities")(), TS.i18n.t("seventieth", "date_utilities")(), TS.i18n.t("eightieth", "date_utilities")(), TS.i18n.t("ninetieth", "date_utilities")()],
        fake_ts_unique_padder: "x",
        toDateObject: function(e) {
          var t;
          if (e && "string" == typeof e && e.indexOf("-") > -1) {
            var n = e.split("-");
            n.length >= 3 ? t = new Date(n[0], n[1] - 1, n[2]) : (TS.warn("toDateObject() requires a date string in the format of YYYY-MM-DD"), t = new Date(0));
          } else {
            var i = (e || "0").toString();
            t = -1 !== i.indexOf(".") ? new Date(1e3 * i.split(".")[0]) : new Date(1e3 * e);
          }
          return t;
        },
        toTime: function(e, t, n) {
          var i = TS.utility.date.toDateObject(e),
            r = i.getHours(),
            a = i.getMinutes(),
            s = i.getSeconds(),
            o = !1,
            l = "",
            d = TS.i18n.t("{hours}:{minutes}{add_seconds, select, true{:{seconds}}other{}}{add_ampm, select, true{{is_pm, select, true{ PM}other{ AM}}}other{}}", "date_utilities");
          return t = t && !TS.utility.date.do24hrTime(), TS.utility.date.do24hrTime() ? r < 10 && (r = "0" + r) : r >= 12 ? (r > 12 && (r -= 12), o = !0) : 0 === r && (r = 12), a < 10 && (a = "0" + a), n && (l = s < 10 ? "0" + s : s), d({
            hours: r,
            minutes: a,
            seconds: l,
            add_seconds: n,
            add_ampm: t,
            is_pm: o
          });
        },
        toTimeDuration: function(e) {
          var t = TS.utility.date.toTimeAmount(Math.floor(e / 60)),
            n = [];
          return t.s = e % 60, t.w && n.push(TS.i18n.t("{weeks, plural, =1{# week}other{# weeks}}", "date_utilities")({
            weeks: t.w
          })), t.d && n.push(TS.i18n.t("{days, plural, =1{# day}other{# days}}", "date_utilities")({
            days: t.d
          })), t.h && n.push(TS.i18n.t("{hours, plural, =1{# hour}other{# hours}}", "date_utilities")({
            hours: t.h
          })), t.mi && n.push(TS.i18n.t("{minutes, plural, other{# min}}", "date_utilities")({
            minutes: t.mi
          })), !t.s && n.length || n.push(TS.i18n.t("{seconds, plural, other{# sec}}", "date_utilities")({
            seconds: t.s
          })), n.join(" ").trim();
        },
        toTimeAmount: function(e) {
          return {
            w: TS.utility.date.toWeekAmount(e),
            d: TS.utility.date.toDayAmount(e) - 7 * TS.utility.date.toWeekAmount(e),
            h: TS.utility.date.toHourAmount(e) - 24 * TS.utility.date.toDayAmount(e),
            mi: e % 60
          };
        },
        toWeekAmount: function(e) {
          return Math.floor(e / 10080);
        },
        toDayAmount: function(e) {
          return Math.floor(e / 1440);
        },
        toHourAmount: function(e) {
          return Math.floor(e / 60);
        },
        toDate: function(e, t) {
          var n = TS.utility.date.toDateObject(e),
            i = n.getFullYear(),
            r = n.getMonth(),
            a = n.getDate(),
            s = n.getHours(),
            o = n.getMinutes(),
            l = TS.i18n.t("{year}-{month}-{day}{exclude_time, select, true{}other{, {hours}:{minutes}{add_ampm, select, true{{is_pm, select, true{ PM}other{ AM}}}other{}}}}", "date_utilities"),
            d = !1;
          return TS.utility.date.do24hrTime() ? s < 10 && (s = "0" + s) : s >= 12 ? (s > 12 && (s -= 12), d = !0) : 0 === s && (s = 12), a < 10 && (a = "0" + a), o < 10 && (o = "0" + o), r = ("0" + (r + 1)).slice(-2), l(t ? {
            year: i,
            month: r,
            day: a,
            exclude_time: !0
          } : {
            year: i,
            month: r,
            day: a,
            exclude_time: !1,
            hours: s,
            minutes: o,
            add_ampm: !TS.utility.date.do24hrTime(),
            is_pm: d
          });
        },
        toHumanReadableDateAndTime: function(e, t) {
          var n = TS.utility.date.maybeGetRelativeDay(e, t);
          if (n) {
            var i = TS.utility.date.toTime(e, !0, !1);
            return TS.i18n.t("{relative_day} at {time}", "date_utilities")({
              relative_day: n,
              time: i
            });
          }
          return TS.utility.date.toCalendarDateOrNamedDayShort(e);
        },
        convertISOtoUTCReadableDate: function(e) {
          var t, n = TS.i18n.t("{month} {day}{add_year, select, true{, {year}}other{}}", "date_utilities"),
            i = Date.parse(e);
          if (!isNaN(i)) {
            var r = new Date(i),
              a = TS.utility.date.month_names[r.getUTCMonth()],
              s = r.getUTCDate();
            t = n({
              month: a,
              day: TS.utility.ordinalNumber(s),
              add_year: !!r.getUTCFullYear(),
              year: r.getUTCFullYear() ? r.getUTCFullYear() : ""
            });
          }
          return t;
        },
        toMonthYearFormat: function(e) {
          var t, n = TS.i18n.t("{month} {year}", "date_utilities");
          if (!isNaN(e)) {
            var i = TS.utility.date.toDateObject(e);
            t = n({
              month: TS.utility.date.month_names[i.getUTCMonth()],
              year: i.getUTCFullYear()
            });
          }
          return t;
        },
        shouldExcludeYear: function(e) {
          var t = TS.utility.date.toDateObject(e),
            n = new Date;
          return t.getFullYear() === n.getFullYear() || n - t <= 26784e5;
        },
        toCalendarDateOrNamedDayShort: function(e) {
          var t = TS.utility.date.shouldExcludeYear(e);
          return TS.utility.date.toCalendarDateOrNamedDay(e, !0, t);
        },
        do24hrTime: function() {
          return TS.model.user && TS.model.prefs && TS.model.prefs.time24;
        },
        toFilenameFriendlyDate: function(e) {
          var t = TS.utility.date.toDateObject(e),
            n = t.getFullYear(),
            i = t.getMonth(),
            r = t.getDate(),
            a = t.getHours(),
            s = t.getMinutes(),
            o = TS.i18n.t("{year}_{month}_{day} {hours}_{minutes}{add_ampm, select, true{{is_pm, select, true{ PM}other{ AM}}}other{}}", "date_utilities"),
            l = !1;
          return TS.utility.date.do24hrTime() || (a >= 12 ? (a > 12 && (a -= 12), l = !0) : 0 === a && (a = 12)), r < 10 && (r = "0" + r), a < 10 && (a = "0" + a), s < 10 && (s = "0" + s), i = ("0" + (i + 1)).slice(-2), o({
            year: n,
            month: i,
            day: r,
            hours: a,
            minutes: s,
            add_ampm: !TS.utility.date.do24hrTime(),
            is_pm: l
          });
        },
        toCalendarDate: function(e, t, n, i, r) {
          var a, s, o = TS.utility.date.toDateObject(e),
            l = o.getFullYear(),
            d = o.getMonth(),
            c = o.getDate();
          return a = i ? r ? TS.utility.date.really_short_month_names[d] : TS.i18n.t("{month} {day}", "date_utilities")({
            month: TS.utility.date.really_short_month_names[d],
            day: c
          }) : t ? r ? TS.utility.date.short_month_names[d] : TS.i18n.t("{month} {day}", "date_utilities")({
            month: TS.utility.date.short_month_names[d],
            day: TS.utility.ordinalNumber(c)
          }) : r ? TS.utility.date.month_names[d] : TS.i18n.t("{month} {day}", "date_utilities")({
            month: TS.utility.date.month_names[d],
            day: TS.utility.ordinalNumber(c)
          }), n || r || (s = a, a = TS.i18n.t("{date}, {year}", "date_utilities")({
            date: s,
            year: l
          })), !n && r && (s = a, a = TS.i18n.t("{date} {year}", "date_utilities")({
            date: s,
            year: l
          })), a;
        },
        maybeGetRelativeDay: function(e, t) {
          var n = TS.utility.date.toDateObject(e),
            i = TS.i18n.t("Today", "date_utilities")(),
            r = TS.i18n.t("Yesterday", "date_utilities")(),
            a = new Date,
            s = new Date;
          return s.setDate(a.getDate() - 1), TS.utility.date.sameDay(n, a) ? t && t.uncapitalized ? i.toLocaleLowerCase() : i : TS.utility.date.sameDay(n, s) ? t && t.uncapitalized ? r.toLocaleLowerCase() : r : void 0;
        },
        toCalendarDateOrNamedDay: function(e, t, n) {
          var i = TS.utility.date.maybeGetRelativeDay(e, {});
          return n = n || TS.utility.date.shouldExcludeYear(e), i || TS.utility.date.toCalendarDate(e, t, n, !1, !1);
        },
        toCalendarDateIfYesterdayOrToday: function(e, t) {
          var n = TS.utility.date.toDateObject(e),
            i = new Date,
            r = new Date;
          return r.setDate(i.getDate() - 1), TS.utility.date.sameDay(n, i) || TS.utility.date.sameDay(n, r) ? TS.utility.date.toCalendarDate(e, t, !1, !1, !1) : "";
        },
        toHour: function(e) {
          var t = TS.utility.date.toDateObject(e),
            n = t.getHours(),
            i = !1,
            r = TS.i18n.t("{hours}{use_am_pm, select, true{{is_pm, select, true{ PM}other{ AM}}}other{}}", "date_utilities"),
            a = TS.utility.date.do24hrTime();
          return a ? n < 10 && (n = "0" + n) : n >= 12 ? (n > 12 && (n -= 12), i = !0) : 0 === n && (n = 12), r({
            hours: n,
            use_am_pm: !a,
            is_pm: i
          });
        },
        toDayOfTheWeek: function(e) {
          var t = TS.utility.date.toDateObject(e);
          return TS.utility.date.day_names[t.getDay()];
        },
        toTimeAgo: function(e) {
          var t = TS.utility.date.toDateObject(e),
            n = new Date,
            i = TS.utility.date.distanceInSeconds(n, t),
            r = i < 0,
            a = Math.abs(i),
            s = a / 60,
            o = s / 60,
            l = o / 24,
            d = l / (365 / 12),
            c = l / 365;
          return a < 45 ? r ? TS.i18n.t("in less than a minute", "date_utilities")() : TS.i18n.t("less than a minute ago", "date_utilities")() : a < 90 ? r ? TS.i18n.t("in about a minute", "date_utilities")() : TS.i18n.t("about a minute ago", "date_utilities")() : s < 45 ? r ? TS.i18n.t("in {number_of_minutes, number} minutes", "date_utilities")({
            number_of_minutes: Math.round(s)
          }) : TS.i18n.t("{number_of_minutes, number} minutes ago", "date_utilities")({
            number_of_minutes: Math.round(s)
          }) : s < 90 ? r ? TS.i18n.t("in about an hour", "date_utilities")() : TS.i18n.t("about an hour ago", "date_utilities")() : o < 24 ? r ? TS.i18n.t("in about {number_of_hours, number} hours", "date_utilities")({
            number_of_hours: Math.round(o)
          }) : TS.i18n.t("about {number_of_hours, number} hours ago", "date_utilities")({
            number_of_hours: Math.round(o)
          }) : o < 42 ? r ? TS.i18n.t("in a day", "date_utilities")() : TS.i18n.t("a day ago", "date_utilities")() : l < 30 ? r ? TS.i18n.t("in {number_of_days, number} days", "date_utilities")({
            number_of_days: Math.round(l)
          }) : TS.i18n.t("{number_of_days, number} days ago", "date_utilities")({
            number_of_days: Math.round(l)
          }) : l < 45 ? r ? TS.i18n.t("in about a month", "date_utilities")() : TS.i18n.t("about a month ago", "date_utilities")() : l < 365 ? r ? TS.i18n.t("in {number_of_months, number} months", "date_utilities")({
            number_of_months: Math.round(d)
          }) : TS.i18n.t("{number_of_months, number} months ago", "date_utilities")({
            number_of_months: Math.round(d)
          }) : c < 1.5 ? r ? TS.i18n.t("in about a year", "date_utilities")() : TS.i18n.t("about a year ago", "date_utilities")() : r ? TS.i18n.t("in {number_of_years, number} years", "date_utilities")({
            number_of_years: Math.round(c)
          }) : TS.i18n.t("{number_of_years, number} years ago", "date_utilities")({
            number_of_years: Math.round(c)
          });
        },
        toTimeAgoShort: function(e, t) {
          var n = TS.utility.date.toDateObject(e),
            i = new Date,
            r = TS.utility.date.distanceInSeconds(i, n),
            a = Math.abs(r),
            s = a / 60,
            o = s / 60,
            l = o / 24,
            d = l / 365;
          return t ? a < 45 ? TS.i18n.t("<1m", "date_utilities")() : a < 90 ? TS.i18n.t("1m", "date_utilities")() : s < 45 ? TS.i18n.t("{number_of_minutes, number}m", "date_utilities")({
            number_of_minutes: Math.round(s)
          }) : s < 90 ? TS.i18n.t("1h", "date_utilities")() : o < 24 ? TS.i18n.t("{number_of_hours, number}h", "date_utilities")({
            number_of_hours: Math.round(o)
          }) : l < 7 ? TS.i18n.t("{number_of_days, number}d", "date_utilities")({
            number_of_days: Math.round(l)
          }) : l < 365 ? TS.utility.date.toCalendarDate(e, !0, !0, !0, !1) : d < 1.5 ? TS.i18n.t("1y", "date_utilities")() : TS.i18n.t("{number_of_years, number}y", "date_utilities")({
            number_of_years: Math.round(d)
          }) : a < 45 ? TS.i18n.t("< 1 minute ago", "date_utilities")() : a < 90 ? TS.i18n.t("1 minute ago", "date_utilities")() : s < 45 ? TS.i18n.t("{number_of_minutes, number} minutes ago", "date_utilities")({
            number_of_minutes: Math.round(s)
          }) : s < 90 ? TS.i18n.t("1 hour ago", "date_utilities")() : o < 24 ? TS.i18n.t("{number_of_hours, number} hours ago", "date_utilities")({
            number_of_hours: Math.round(o)
          }) : l < 7 ? TS.i18n.t("{number_of_days, plural, =1{# day ago}other{# days ago}}", "date_utilities")({
            number_of_days: Math.round(l)
          }) : l < 365 ? TS.utility.date.toCalendarDate(e, !0, !0, !0, !1) : d < 1.5 ? TS.i18n.t("1 year ago", "date_utilities")() : TS.i18n.t("{number_of_years, number} years ago", "date_utilities")({
            number_of_years: Math.round(d)
          });
        },
        memberLocalTime: function(e, n, s) {
          var l = new Date;
          void 0 === s && (s = !0);
          var d, c;
          if (i) {
            var u = Date.now();
            t[e.id] || (t[e.id] = {
              local_time: null,
              milliseconds: null
            });
            try {
              if (t[e.id].millseconds && t[e.id].millseconds >= u - 3e4 && t[e.id].local_time && s) d = t[e.id].local_time;
              else {
                var m = e && e.tz ? e.tz : "America/Los_Angeles",
                  p = {
                    timeZone: m,
                    hour: "numeric",
                    minute: "numeric",
                    hour12: !TS.utility.date.do24hrTime()
                  };
                d = Intl.DateTimeFormat.call(null, TS.i18n.locale(), p).format(l), t[e.id].local_time = d, t[e.id].milliseconds = u;
              }
            } catch (t) {
              c = a(e), d = o(l, c);
            }
          } else r ? (c = e && e.tz && _.isObject(r[e.tz]) ? r[e.tz].tz_offset : r["America/Los_Angeles"].tz_offset, c = parseInt(c, 10)) : c = a(e), d = o(l, c);
          return n ? d : TS.i18n.t('<span class="timezone_value">{local_time}</span> local time', "date_utilities")({
            local_time: d
          });
        },
        memberUTCOffset: function(e) {
          var t = a(e),
            n = t / 60 / 60;
          return n < 0 ? "(UTC" + n + ")" : n > 0 ? "(UTC+" + n + ")" : "(UTC)";
        },
        makeTsStamp: function(e, t, n) {
          var i, r;
          return e = e || Date.now(), t = t || TS.utility.date.fake_ts_unique_padder, n = void 0 === n || null === n ? s() : n, i = Math.floor(e / 1e3).toString(), r = _.padStart(n, 6, t), i + "." + r;
        },
        sameDay: function(e, t) {
          return e.getFullYear() === t.getFullYear() && e.getMonth() === t.getMonth() && e.getDate() === t.getDate();
        },
        sameHour: function(e, t) {
          return e.getFullYear() === t.getFullYear() && e.getMonth() === t.getMonth() && e.getDate() === t.getDate() && e.getHours() === t.getHours();
        },
        distanceInSeconds: function(e, t) {
          return Math.round(e.getTime() / 1e3) - Math.round(t.getTime() / 1e3);
        },
        distanceInMinutes: function(e, t) {
          return TS.utility.date.distanceInSeconds(e, t) / 60;
        },
        distanceInDays: function(e, t) {
          return Math.round(TS.utility.date.distanceInSeconds(e, t) / 86400);
        },
        isToday: function(e) {
          var t = new Date;
          return TS.utility.date.sameDay(e, t);
        },
        isYesterday: function(e) {
          var t = new Date,
            n = new Date;
          return n.setDate(t.getDate() - 1), TS.utility.date.sameDay(e, n);
        },
        getNextActivityDayStamp: function(e) {
          var t = TS.utility.date.toDateObject(e),
            n = new Date(t.getTime() + 864e5);
          return n.getFullYear() + "-" + _.padStart(n.getMonth() + 1, 2, "0") + "-" + _.padStart(n.getDate(), 2, "0");
        },
        getPrevActivityDayStamp: function(e) {
          var t = TS.utility.date.toDateObject(e),
            n = new Date(t.getTime() - 864e5);
          return n.getFullYear() + "-" + _.padStart(n.getMonth() + 1, 2, "0") + "-" + _.padStart(n.getDate(), 2, "0");
        },
        toTimeWords: function(e, t, n) {
          var i, r, a, s, o, l, d, c, _, u, m, p = TS.utility.date.toDateObject(e),
            f = p.getHours(),
            h = p.getMinutes(),
            g = p.getSeconds(),
            S = !1,
            T = TS.utility.date.do24hrTime(),
            b = 0 === h,
            v = n && 0 !== g,
            y = t && !T,
            w = T && 0 === f;
          if (b && !v) {
            if (0 === f) return TS.i18n.t("midnight", "date_utilities")();
            if (12 === f) return TS.i18n.t("noon", "date_utilities")();
          }
          return T || (f >= 12 ? (f > 12 && (f -= 12), S = !0) : 0 === f && (f = 12)), b ? s = "" : (a = TS.i18n.t("{use_minutes_prefix, select, true{ oh-{minutes_words}}other{ {minutes_words}}}", "date_utilities"), u = TS.utility.date.numberToWords(h), s = a({
            use_minutes_prefix: h < 10,
            minutes_words: u
          })), v ? (o = TS.i18n.t("{seconds, plural, =1{ and {seconds_words} second}other{ and {seconds_words} seconds}}", "date_utilities"), m = TS.utility.date.numberToWords(g), l = o({
            seconds_words: m,
            seconds: g
          })) : l = "", y ? (d = TS.i18n.t("{is_pm, select, true{ PM}other{ AM}}", "date_utilities"), c = d({
            is_pm: S
          })) : c = "", w ? (a = TS.i18n.t("{minutes, plural, =1{{minutes_words} minute past midnight}other{{minutes_words} minutes past midnight}}", "date_utilities"), s = a({
            minutes_words: u,
            minutes: h
          }), r = "") : (_ = TS.utility.date.numberToWords(f), b ? (i = TS.i18n.t("{hours_words} {use_24_time, select, true{hundred}other{o’clock}}", "date_utilities"), r = i({
            hours_words: _,
            use_24_time: T && f > 12
          })) : r = _), r + s + l + c;
        },
        toCalendarDateWords: function(e, t) {
          var n = TS.utility.date.toDateObject(e),
            i = n.getFullYear(),
            r = n.getMonth(),
            a = n.getDate(),
            s = TS.utility.date.numberToWords(a, !0),
            o = TS.utility.date.month_names[r];
          return t ? TS.i18n.t("{month_words} {day_words}", "date_utilities")({
            month_words: o,
            day_words: s
          }) : i % 1e3 == 0 ? TS.i18n.t("{month_words} {day_words}, {year_words}-thousand", "date_utilities")({
            day_words: s,
            month_words: o,
            year_words: TS.utility.date.numberToWords(i / 1e3)
          }) : i % 100 == 0 ? TS.i18n.t("{month_words} {day_words}, {year_words} hundred", "date_utilities")({
            day_words: s,
            month_words: o,
            year_words: TS.utility.date.numberToWords(i / 100)
          }) : i % 1e3 < 10 ? TS.i18n.t("{month_words} {day_words}, {year_words}-thousand and {modulus_year_word}", "date_utilities")({
            day_words: s,
            month_words: o,
            year_words: TS.utility.date.numberToWords((i - i % 1e3) / 1e3),
            modulus_year_word: TS.utility.date.numberToWords(i % 1e3)
          }) : TS.i18n.t("{month_words} {day_words}, {year_words} {use_year_prefix, select, true{oh-{modulus_year_word}}other{{modulus_year_word}}}", "date_utilities")({
            day_words: s,
            month_words: o,
            year_words: TS.utility.date.numberToWords((i - i % 100) / 100),
            modulus_year_word: TS.utility.date.numberToWords(i % 100),
            use_year_prefix: i % 100 < 10
          });
        },
        toCalendarDateOrNamedDayWords: function(e, t) {
          var n = TS.utility.date.toDateObject(e),
            i = new Date,
            r = new Date;
          return r.setDate(i.getDate() - 1), TS.utility.date.sameDay(n, i) ? TS.i18n.t("Today", "date_utilities")() : TS.utility.date.sameDay(n, r) ? TS.i18n.t("Yesterday", "date_utilities")() : TS.utility.date.toCalendarDateWords(e, t);
        },
        numberToWords: function(e, t) {
          var n = Math.floor(e / 10),
            i = e % 10,
            r = n - 2;
          if (t) {
            if (e < TS.utility.date.ones_digit_ordinal_names.length) return TS.utility.date.ones_digit_ordinal_names[e];
            if (n <= 9) return i > 0 ? TS.utility.date.tens_digit_names[r] + "-" + TS.utility.date.ones_digit_ordinal_names[i] : TS.utility.date.tens_digit_ordinal_names[r];
          }
          return e < TS.utility.date.ones_digit_names.length ? TS.utility.date.ones_digit_names[e] : n <= 9 ? i > 0 ? TS.utility.date.tens_digit_names[r] + "-" + TS.utility.date.ones_digit_names[i] : TS.utility.date.tens_digit_names[r] : void 0;
        },
        formatDate: function(e, t, n) {
          var i = new Date(1e3 * t),
            r = new Date,
            a = TS.utility.date.makeTsStamp(i),
            s = TS.utility.date.distanceInMinutes(i, r),
            o = s > -262080 && s < 262080,
            l = !1,
            d = !1;
          return n || (n = e), isNaN(i.getTime()) ? n : (e = e.replace(/{(.*?)}/g, function(t, n, i) {
            var r;
            switch (n) {
              case "date_num":
                return TS.utility.date.toDate(a, !0);
              case "date_long":
                return TS.i18n.locale(), TS.utility.date.toDayOfTheWeek(a) + ", " + TS.utility.date.toCalendarDate(a, !1, o);
              case "date_long_pretty":
                return l = !l && 0 === e.indexOf("{date_long_pretty}") && 0 === i, TS.i18n.locale(), r = TS.utility.date.toDayOfTheWeek(a) + ", " + TS.utility.date.toCalendarDate(a, !1, o), TS.utility.date.prettifyDateString(a, r, l);
              case "date":
                return TS.utility.date.toCalendarDate(a, !1, o);
              case "date_pretty":
                return l = !l && 0 === e.indexOf("{date_pretty}") && 0 === i, r = TS.utility.date.toCalendarDate(a, !1, o), TS.utility.date.prettifyDateString(a, r, l);
              case "date_short":
                return TS.utility.date.toCalendarDate(a, !0, o, !0);
              case "date_short_pretty":
                return l = !l && 0 === e.indexOf("{date_short_pretty}") && 0 === i, r = TS.utility.date.toCalendarDate(a, !0, o, !0), TS.utility.date.prettifyDateString(a, r, l);
              case "time":
                return TS.utility.date.toTime(a, !0, !1);
              case "time_secs":
                return TS.utility.date.toTime(a, !0, !0);
              case "ago":
                return l = !l && 0 === e.indexOf("{ago}") && 0 === i, r = TS.utility.date.toTimeAgo(a), l ? r.charAt(0).toLocaleUpperCase() + r.slice(1) : r;
              default:
                return d = !0, "";
            }
          }), d ? n : e);
        },
        prettifyDateString: function(e, t, n) {
          var i = TS.utility.date.toDateObject(e),
            r = new Date,
            a = new Date((new Date).valueOf() - 864e5),
            s = new Date((new Date).valueOf() + 864e5),
            o = TS.i18n.t("Today", "date_utilities")(),
            l = TS.i18n.t("Yesterday", "date_utilities")(),
            d = TS.i18n.t("Tomorrow", "date_utilities")();
          return TS.utility.date.sameDay(i, r) ? n ? o : o.toLocaleLowerCase() : TS.utility.date.sameDay(i, a) ? n ? l : l.toLocaleLowerCase() : TS.utility.date.sameDay(i, s) ? n ? d : d.toLocaleLowerCase() : t;
        },
        millisecondsToPrettifiedTime: function(e) {
          var t, n = Math.floor(e / 1e3),
            i = Math.floor(n / 3600),
            r = Math.floor((n - 3600 * i) / 60),
            a = n - 3600 * i - 60 * r;
          return r = r < 10 ? "0" + r : r.toString(), a = a < 10 ? "0" + a : a.toString(), TS.i18n.locale(), t = ":", 0 !== i ? i + t + r + t + a : r + t + a;
        },
        daysToYearsPretty: function(e) {
          var t = parseInt(e, 10),
            n = 0;
          return t % 365 == 0 ? (n = t / 365, t = 0) : (n = Math.floor(t / 365), t %= 365), (n > 0 ? t > 0 ? TS.i18n.t("{years, plural, =1{# year}other{# years}}, {days, plural, =1{# day}other{# days}}", "date_utilities") : TS.i18n.t("{years, plural, =1{# year}other{# years}}", "date_utilities") : TS.i18n.t("{days, plural, =1{# day}other{# days}}", "date_utilities"))({
            years: n,
            days: t
          });
        },
        addDays: function(e, t) {
          if (0 === e || !e) return 0;
          var n = TS.utility.date.toDateObject(e);
          return n.setDate(n.getDate() + t), Math.floor(n.getTime() / 1e3);
        },
        test: function() {
          return {
            _has_Intl: i
          };
        }
      });
      var e = 1,
        t = {},
        i = Intl && "object" === ("undefined" == typeof Intl ? "undefined" : n(Intl)) && "function" == typeof Intl.DateTimeFormat && "object" === n(Intl.DateTimeFormat()) && "function" == typeof Intl.DateTimeFormat().resolvedOptions && "object" === n(Intl.DateTimeFormat().resolvedOptions()) && void 0 !== Intl.DateTimeFormat().resolvedOptions().timeZone && Intl.DateTimeFormat().resolvedOptions().timeZone.length > 0,
        r = TS.boot_data.dst_offsets || null,
        a = function(e) {
          var t = -28800;
          return (e && e.tz_offset && void 0 !== e.tz_offset || 0 === e.tz_offset) && (t = e.tz_offset), t;
        },
        s = function() {
          return e += 1, e >= 1e5 && (e = 1), e;
        },
        o = function(e, t) {
          var n = e.getTime() + 6e4 * e.getTimezoneOffset(),
            i = new Date(n + t / 3600 * 36e5),
            r = (i / 1e3).toString();
          return TS.utility.date.toTime(r, !TS.utility.date.do24hrTime(), !1);
        };
    }();
  },
  2666: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.enterprise", {
        getSelf: function() {
          return _.get(TS.enterprise.model.get(), "org.user");
        },
        splitQueryIntoTerms: function(e, t, n) {
          var i, r = t;
          return e = e.trim(), e.length >= 2 && (r = _.isArray(t) ? _.slice(t) : [], i = e.split(/\s+/), _.each(i, function(e) {
            r.push({
              type: n || "fuzzy_with_email",
              value: e
            });
          })), r;
        },
        doFormatSearchQuery: function(e, t) {
          if (!e) return "";
          var n = [];
          switch (t) {
            case "members":
              n.push({
                type: "is",
                value: "user"
              });
          }
          return {
            query: TS.utility.enterprise.splitQueryIntoTerms(e, n)
          };
        },
        getSSOProviderLabel: function(e, t) {
          if (!e) return t;
          var n = _.get(e, "type", ""),
            i = _.get(e, "name", ""),
            r = "" === n,
            a = "saml" === n;
          return r || a ? t : i || t;
        },
        getProviderLabel: function(e, t) {
          var n = t || "IDP";
          return e ? (t = _.get(e, "saml_provider") || n, "saml" === t.toLowerCase() && (t = n), TS.utility.enterprise.getSSOProviderLabel(_.get(e, "sso_provider"), t)) : n;
        },
        getGroupsTitle: function(e) {
          var t = TS.utility.enterprise.getProviderLabel(e);
          return "IDP" === t ? TS.i18n.t("IDP Groups", "enterprise_dashboard")() : TS.i18n.t("{provider_label} Groups", "enterprise_dashboard")({
            provider_label: t
          });
        },
        wrapWithStrongTags: _.wrap(_.escape, function(e, t) {
          return "<strong>" + e(t) + "</strong>";
        }),
        buildTeamUrl: function(e) {
          return "https://" + e + "." + TS.boot_data.abs_root_url.replace(/(http:\/\/|https:\/\/)/, "");
        },
        buildOrgUrl: function(e) {
          return "https://" + e + ".enterprise." + TS.boot_data.abs_root_url.replace(/(http:\/\/|https:\/\/)/, "");
        },
        getSanitizedIdpLabel: function(e) {
          return {
            simple: "IDP" !== e && e ? e : "",
            your: "IDP" !== e && e ? e : TS.i18n.t("your IdP", "enterprise_utility")(),
            possessive: "IDP" !== e && e ? TS.i18n.fullPossessiveString(e) : TS.i18n.t("your IdP’s", "enterprise_utility")()
          };
        },
        formatChannelsData: function(e) {
          var t = [];
          return e.private_channels && (e.private_channels = _.isArray(e.private_channels) ? e.private_channels : [e.private_channels], t = _.map(e.private_channels, function(e) {
            var t = TS.members.getMemberById(e.creator) || {};
            return {
              creator_display: t.real_name ? t.real_name : t.name,
              creator_id: e.creator,
              creator_username: t.name,
              date_created: e.created,
              id: e.id,
              member_count: e.member_count,
              name: e.name,
              purpose: e.purpose.value,
              topic: e.topic.value,
              private: !0,
              is_shared: e.is_shared
            };
          })), e.channels && (t = t.concat(_.map(e.channels, function(e) {
            var t = TS.members.getMemberById(e.creator) || {};
            return {
              creator_display: t.real_name ? t.real_name : t.name,
              creator_id: e.creator,
              creator_username: t.name,
              date_created: e.created,
              id: e.id,
              member_count: _.get(e, "members.length", 0),
              name: e.name,
              purpose: _.get(e, "purpose.value", ""),
              topic: _.get(e, "topic.value", ""),
              private: !1,
              is_general: e.is_general,
              is_shared: e.is_shared
            };
          }))), t;
        },
        pollUntilCondition: function(e) {
          return new Promise(function(t, n) {
            function i() {
              if (s.attempts >= e.attempts_max) return n(new Error("Giving up on " + e.api_method + ", reached max attempts of " + e.attempts_max));
              s.attempts += 1, s.interval += s.interval_backoff, TS.api.call(e.api_method, e.api_params).then(function(n) {
                return s.last_api_response = n, e.condition_method(n) ? t(n) : r();
              }).catch(function(e) {
                return s.last_api_response = e, r();
              });
            }

            function r() {
              window.setTimeout(i, s.interval);
            }
            var a = {
              api_method: null,
              api_params: {},
              condition_method: null,
              interval: 5e3,
              interval_backoff: 1e3,
              attempts_max: 10,
              call_immediately: !0
            };
            e = _.merge(a, e || {});
            var s = {
              attempts: 0,
              last_api_response: null,
              interval: parseInt(e.interval, 10) || 1e3,
              interval_backoff: parseInt(e.interval_backoff, 10) || 0
            };
            return e.api_method ? e.condition_method ? void(e.call_immediately ? i() : r()) : n(new Error("missing required condition_method in params")) : n(new Error("missing required api_method in params"));
          });
        },
        getUserRoleLabel: function(e, t) {
          var n;
          return n = t ? {
            primary_owner: TS.i18n.t("Primary Org Owner", "enterprise_dashboard")(),
            owner: TS.i18n.t("Org Owner", "enterprise_dashboard")(),
            admin: TS.i18n.t("Org Admin", "enterprise_dashboard")(),
            single_channel_guest: TS.i18n.t("Single-Channel Guest", "enterprise_dashboard")(),
            multi_channel_guest: TS.i18n.t("Multi-Channel Guest", "enterprise_dashboard")(),
            member: TS.i18n.t("Member", "enterprise_dashboard")()
          } : {
            primary_owner: TS.i18n.t("Primary Owner", "enterprise_dashboard")(),
            owner: TS.i18n.t("Owner", "enterprise_dashboard")(),
            admin: TS.i18n.t("Admin", "enterprise_dashboard")(),
            single_channel_guest: TS.i18n.t("Single-Channel Guest", "enterprise_dashboard")(),
            multi_channel_guest: TS.i18n.t("Multi-Channel Guest", "enterprise_dashboard")(),
            member: TS.i18n.t("Member", "enterprise_dashboard")()
          }, e.is_ultra_restricted ? n.single_channel_guest : e.is_restricted ? n.multi_channel_guest : e.is_primary_owner ? n.primary_owner : e.is_owner ? n.owner : e.is_admin ? n.admin : n.member;
        },
        buildAnalyticsApiOptionsFor: function(e) {
          var t = function(e) {
            return _.reduce(e, function(e, t, n) {
              var i = TS.enterprise.model.get(["analytics", t]);
              return i && (e[n] = i), e;
            }, {});
          };
          switch (e) {
            case "teams":
              return t({
                query: "teams_search_term",
                sort_prefix: "teams_sort_prefix",
                sort_dir: "teams_sort_dir",
                cursor_mark: "teams_api_cursor",
                date_range: "current_date_range",
                start_date: "start_date",
                end_date: "end_date"
              });
            case "team_overview":
              return t({
                date_range: "current_date_range",
                start_date: "start_date",
                end_date: "end_date",
                team_id: "team_overview_id"
              });
            case "members":
              return t({
                query: "members_search_term",
                sort_prefix: "members_sort_prefix",
                sort_dir: "members_sort_dir",
                cursor_mark: "members_api_cursor",
                date_range: "current_date_range",
                start_date: "start_date",
                end_date: "end_date"
              });
            case "channels":
              return t({
                query: "channels_search_term",
                sort_prefix: "channels_sort_prefix",
                sort_dir: "channels_sort_dir",
                cursor_mark: "channels_api_cursor",
                date_range: "current_date_range",
                start_date: "start_date",
                end_date: "end_date"
              });
            default:
              return t({
                date_range: "current_date_range",
                start_date: "start_date",
                end_date: "end_date"
              });
          }
        },
        maybeGetUpdatedAtTime: function(e) {
          return e ? TS.interop.datetime.toTimeAgo(e) : null;
        },
        getObjectsForIds: function(e, t) {
          return _.isEmpty(e) || _.isEmpty(t) ? [] : _.intersectionWith(e, t, function(e, t) {
            return e.id === t;
          });
        },
        getQueryForIds: function(e) {
          if (!_.isEmpty(e)) return 1 === e.length ? {
            query: {
              type: "id",
              value: _.head(e)
            }
          } : {
            query: {
              type: "or",
              clauses: _.map(e, function(e) {
                return {
                  type: "id",
                  value: e
                };
              })
            }
          };
        }
      });
    }();
  },
  2667: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.invites", {
        onStart: function() {},
        hideFullMemberInviteOption: function() {
          var e = TS.boot_data.page_needs_enterprise,
            t = "saml" === TS.model.team.prefs.auth_mode,
            n = 0 === TS.model.team.prefs.sso_auth_restrictions || 1 === TS.model.team.prefs.sso_auth_restrictions;
          return !e && (e || t && n);
        }
      });
    }();
  },
  2668: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.members", {
        checkMemberMatch: function(e, t, n) {
          return TS.boot_data.feature_name_tagging_client ? !n && e.profile && e.profile.email && e.profile.email.match(t) || e.profile && e.profile.real_name_normalized && e.profile.real_name_normalized.match(t) || e.profile && e.profile.real_name && e.profile.real_name.match(t) || e.profile && e.profile.display_name_normalized && e.profile.display_name_normalized.match(t) || e.profile && e.profile.display_name && e.profile.display_name.match(t) : e.name && e.name.match(t) || !n && e.profile && e.profile.email && e.profile.email.match(t) || e.profile && e.profile.real_name_normalized && e.profile.real_name_normalized.match(t) || e.profile && e.profile.real_name && e.profile.real_name.match(t);
        },
        filterMembersByQuery: function(e, t) {
          if (!(t = _.toString(t).trim().toLowerCase().replace(/^@/, ""))) return e;
          var n = new RegExp(TS.utility.regexpEscape(t), "i");
          return e.filter(function(e) {
            return TS.utility.members.checkMemberMatch(e, n);
          });
        },
        getBroadcastKeywordsForUser: function() {
          var e = TS.shared.getActiveModelOb();
          if (!e) return [];
          var t = [],
            n = [],
            i = TS.boot_data.page_needs_enterprise && TS.channels.isChannelRequired(e) && e.is_shared;
          return e.is_general && TS.permissions.members.canAtMentionEveryone(e.id) && !i && (t = _.filter(TS.model.BROADCAST_KEYWORDS, function(e) {
            return "BKeveryone" === e.id || "BKall" === e.id;
          })), !TS.permissions.members.canAtChannelOrGroup(e.id) || !e.is_channel && !e.is_group || e.is_general && !TS.permissions.members.canAtMentionEveryone(e.id) || i || (n = _.filter(TS.model.BROADCAST_KEYWORDS, function(e) {
            return "BKchannel" === e.id || "BKgroup" === e.id || "BKhere" === e.id;
          })), t.concat(n);
        },
        isMember: function(e) {
          var t = _.get(e, "id[0]");
          return "U" === t || "W" === t;
        },
        isMemberRelevantToModel: function(e, t) {
          return _.isObject(e) || (e = TS.members.getMemberById(e)), !!e && (!!e.is_slackbot || !e.deleted && (_.isObject(t) || (t = TS.shared.getModelObById(t) || TS.shared.getActiveModelOb()), !(TS.boot_data.page_needs_enterprise && t && !t.is_shared) || e._is_local));
        },
        isMemberElement: function(e) {
          return !!e.hasAttribute("data-member-id") || (!!e.hasAttribute("data-member-name") || !!e.classList.contains("internal_member_link"));
        },
        isMemberNonBotNonDeletedNonSelf: function(e) {
          return e && !e.deleted && !e.is_bot && !e.is_slackbot && !e.is_self;
        },
        getEntityFromMessage: function(e) {
          if (!e) return !1;
          return "USLACKBOT" === e.user && e.file && e.file.bot_id ? TS.utility.members.getEntityFromFile(e.file) : e.comment ? TS.members.getPotentiallyUnknownMemberById(e.comment.user) : TS.members.getPotentiallyUnknownMemberById(e.user);
        },
        getUsernamesMentionedInString: function(e) {
          var t = _.toLower(e).match(/\B@\w+/g);
          return t ? _(t).map(function(e) {
            return e.replace(/^@/, "");
          }).uniq().compact().value() : [];
        },
        getEntityFromFile: function(e) {
          if (!e) return !1;
          var t;
          return "USLACKBOT" === e.user && e.bot_id ? (t = TS.bots.getBotById(e.bot_id), t || (t = {}), t.is_bot = !0, t.is_service = !0) : t = TS.members.getPotentiallyUnknownMemberById(e.user), t;
        }
      });
    }();
  },
  2669: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("utility.money", {
        formatMoney: function(e, n, a) {
          var o = {
            all_digits: !1
          };
          a = _.defaults(a, o);
          var l = a.all_digits;
          if (!n) return TS.error("cannot format money: no currency_code specified"), "";
          e = e ? parseInt(e, 10) : 0;
          var d;
          if (t) {
            d = "JPY" === n ? e : e / 100;
            var c, u = e % 100 != 0,
              m = !l && !u,
              p = s(i, n, m);
            return r[p] ? c = r[p] : m ? (c = new Intl.NumberFormat(i, {
              style: "currency",
              currency: n,
              maximumFractionDigits: 0,
              minimumFractionDigits: 0
            }), r[p] = c) : (c = new Intl.NumberFormat(i, {
              style: "currency",
              currency: n
            }), r[p] = c), c.format(d);
          }
          return TS.utility.money.formatMoneyWithoutIntl(e, n, a);
        },
        formatMoneyWithoutIntl: function(t, n, r) {
          var a = /^[-]*[0-9]+\.?[0-9]*$/,
            s = /\B(?=(\d{3})+(?!\d))/g,
            o = {
              all_digits: !1
            };
          r = _.defaults(r, o);
          var l = r.all_digits;
          if (!n) return TS.error("cannot format money: no currency_code specified"), "";
          t = t ? parseInt(t, 10) : 0;
          var d = TS.i18n.locales_number_formatting.default,
            c = TS.i18n.locales_number_formatting[i] ? TS.i18n.locales_number_formatting[i].decimal_symbol : d.decimal_symbol,
            u = TS.i18n.locales_number_formatting[n] ? TS.i18n.locales_number_formatting[i].thousands_separator : d.thousands_separator,
            m = e[n] ? e[n].currency_symbol : n;
          if (!a.test(t)) return TS.warn("Incorrect input passed as parameter: amount should only contain numbers"), t;
          var p, f = "",
            h = "",
            g = "";
          switch (t < 0 && (f = "-", t = Math.abs(t)), "JPY" === n ? h = t.toString() : (p = t % 100 != 0, h = t / 100, h = l ? h.toFixed(2).replace(".", c) : p ? h.toFixed(2).replace(".", c) : h.toFixed(0)), h = h.replace(s, u), i) {
            case "en-US":
              g = f + m + h;
              break;
            case "es-ES":
            case "fr-FR":
            case "de-DE":
              g = f + h + " " + m;
              break;
            case "ja-JP":
              g = f + m + h;
              break;
            default:
              g = f + m + h;
          }
          return g;
        },
        test: function() {
          var n = {
            isInString: a,
            currencies: e,
            locales_number_formatting: TS.i18n.locales_number_formatting,
            locale: i,
            number_format_cache: r,
            getNumFormatKey: s,
            has_Intl: t
          };
          return Object.defineProperty(n, "isInString", {
            get: function() {
              return a;
            },
            set: function(e) {
              a = e;
            }
          }), Object.defineProperty(n, "currencies", {
            get: function() {
              return e;
            },
            set: function(t) {
              e = t;
            }
          }), Object.defineProperty(n, "locales_number_formatting", {
            get: function() {
              return TS.i18n.locales_number_formatting;
            },
            set: function(e) {
              TS.i18n.locales_number_formatting = e;
            }
          }), Object.defineProperty(n, "locale", {
            get: function() {
              return "_locale";
            },
            set: function(e) {
              i = e;
            }
          }), Object.defineProperty(n, "number_format_cache", {
            get: function() {
              return r;
            },
            set: function(e) {
              r = e;
            }
          }), Object.defineProperty(n, "getNumFormatKey", {
            get: function() {
              return s;
            },
            set: function(e) {
              s = e;
            }
          }), Object.defineProperty(n, "has_Intl", {
            get: function() {
              return t;
            },
            set: function(e) {
              t = e;
            }
          }), n;
        }
      });
      var e = {
          default: {
            currency_symbol: "$"
          },
          USD: {
            currency_symbol: "$"
          },
          GBP: {
            currency_symbol: "£"
          },
          EUR: {
            currency_symbol: "€"
          },
          JPY: {
            currency_symbol: "¥"
          }
        },
        t = window.Intl && "object" === n(window.Intl),
        i = TS.i18n.locale() || "en-US",
        r = {},
        a = function(e, t) {
          return !_.isEmpty(e) && !_.isEmpty(t) && e.indexOf(t) >= 0;
        },
        s = function(e, t, n) {
          return e + "_" + t + "_" + (n ? "cents" : "nocents");
        };
    }();
  },
  2670: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("utility.msgs", {
        automated_subtypes: ["channel_join", "channel_leave", "channel_topic", "channel_purpose", "channel_archive", "channel_unarchive", "group_join", "group_leave", "group_topic", "group_purpose", "group_archive", "group_unarchive", "group_name", "channel_name", "play_sound", "pinned_item", "unpinned_item", "sh_room_shared", "sh_room_created", "bot_enable", "bot_disable", "bot_add", "bot_remove", "reminder_add", "reminder_delete", "reply_broadcast"],
        file_subtypes: ["file_comment", "file_mention", "file_share", "file_upload"],
        allowed_embed_attributes: ["class", "name", "id", "src", "width", "oldwidth", "height", "oldheight", "frameborder", "title", "scrolling", "allowtransparency", "allowfullscreen", "oallowfullscreen", "msallowfullscreen", "webkitallowfullscreen", "mozallowfullscreen", "controls", "autoplay", "loop", "muted", "poster", "preload", "webkit-playsinline", "type"],
        ephemeral_msgs_map: {},
        messageIncludesMember: function(e, t) {
          if (!e) return void TS.warn("messageIncludesMember: WTF no member?");
          if (!t) return void TS.warn("messageIncludesMember: WTF no msg?");
          if (TS.utility.msgs.memberSentMessage(e, t)) return !0;
          for (var n, i = t.text, r = TS.format.calculateOptions(t, {}), a = TSF.getTokensArray($.trim(i), r.tsf_mode, {
              jumbomoji: !r.no_jumbomoji
            }), s = 0, o = a.length; s < o; s += 1)
            if (n = a[s], 0 === n.indexOf("<") && 0 === n.indexOf("<@")) {
              var l = n.replace(/<|>/g, ""),
                d = TS.utility.msgs.getMemberIdFromMemberMarkup(l);
              if (d && d == e.id) return !0;
            }
          return !1;
        },
        memberSentMessage: function(e, t) {
          return e ? t ? !(!t.user || t.user != e.id) || !(!t.comment || t.comment.user != e.id) : void TS.warn("messageIncludesMember: WTF no msg?") : void TS.warn("messageIncludesMember: WTF no member?");
        },
        allUnknownUsersInMessage: function(e) {
          for (var t = [], n = e.text, i = TS.format.calculateOptions(e, {}), r = TSF.getTokensArray($.trim(n), i.tsf_mode, {
              jumbomoji: !i.no_jumbomoji
            }), a = 0; a < r.length; a += 1) {
            var s = r[a];
            if (0 === s.indexOf("<") && 0 === s.indexOf("<@")) {
              var o = s.replace(/<|>/g, ""),
                l = TS.utility.msgs.getMemberIdFromMemberMarkup(o),
                d = TS.members.getPotentiallyUnknownMemberById(l);
              d || (d = TS.members.getMemberByName(l)), d || t.indexOf(l) < 0 && t.push(l);
            }
          }
          return t;
        },
        appendMsg: function(e, t) {
          e.unshift(TS.utility.msgs.makeSureMsgObIsValid(t));
        },
        setMsgs: function(e, t) {
          for (var n = 0; n < t.length; n += 1) t[n] = TS.utility.msgs.makeSureMsgObIsValid(t[n]);
          return TS.utility.msgs.sortMsgs(t), e.msgs = t, e.msgs;
        },
        spliceMsg: function(e, t) {
          var n = e.indexOf(t);
          n > -1 && e.splice(n, 1);
        },
        getNonTempMsgFromUserMatchingText: function(e, t, n) {
          if (!e && 0 !== e) return null;
          for (var i, r = 0; r < n.length; r += 1)
            if (i = n[r], i.user == t && !TS.utility.msgs.isTempMsg(i) && i.text == e) return i;
          return null;
        },
        getMsgByProp: function(e, t, n) {
          if (!t && 0 !== t) return null;
          for (var i, r = 0; r < n.length; r += 1)
            if (i = n[r], i[e] == t) return i;
          return null;
        },
        getEditableMsgByProp: function(e, t, n) {
          if (!t && 0 !== t || !n) return null;
          for (var i, r = 0; r < n.length; r += 1)
            if (i = n[r], (!i.subtype || "me_message" === i.subtype || "thread_broadcast" === i.subtype) && i[e] == t) return i;
          return null;
        },
        getEditableReplyByProp: function(e, t, n, i) {
          if (!t && 0 !== t || !n || !i) return null;
          var r;
          if (TS.ui.replies.activeConvoModelId() === n.id && TS.ui.replies.activeConvoThreadTs() === i) r = TS.ui.replies.getActiveMessages();
          else if (TS.model.threads_view_is_showing) {
            var a = TS.client.threads.getThread(n, i);
            r = a && a.replies ? a.replies : [];
          }
          return _.findLast(r, function(n) {
            var i = !(n.subtype && "me_message" !== n.subtype),
              r = n[e] === t;
            return i && r;
          });
        },
        sortMsgs: function(e) {
          function t(e, t) {
            return e.ts < t.ts ? 1 : e.ts > t.ts ? -1 : 0;
          }
          e.sort(t);
        },
        isMsgRolledUp: function(e) {
          return !!e._jl_rolled_up_in && e._jl_rolled_up_in !== e.ts;
        },
        isMsgHidden: function(e) {
          return !e || (!!e.no_display || !!e._hidden_reply);
        },
        getPrevDisplayedMsg: function(e, t) {
          for (var n, i = !1, r = 0; r < t.length; r += 1)
            if (n = t[r], i) {
              if (!TS.utility.msgs.isMsgHidden(n) && !TS.utility.msgs.isMsgRolledUp(n)) return n;
            } else n.ts == e && (i = !0);
          return null;
        },
        getDisplayedMsgs: function(e) {
          for (var t, n = [], i = 0; i < e.length; i += 1) t = e[i], TS.utility.msgs.isMsgHidden(t) || TS.utility.msgs.isMsgRolledUp(t) || n.push(t);
          return n;
        },
        getDisplayedMsgAfterTS: function(e, t) {
          for (var n, i = t.length - 1; i > -1; i -= 1)
            if (n = t[i], n.ts > e && !TS.utility.msgs.isMsgHidden(n) && !TS.utility.msgs.isMsgRolledUp(n)) return n;
          return null;
        },
        getDisplayedMsgBeforeTS: function(e, t) {
          for (var n, i = 0; i < t.length; i += 1)
            if (n = t[i], n.ts < e && !TS.utility.msgs.isMsgHidden(n) && !TS.utility.msgs.isMsgRolledUp(n)) return n;
          return null;
        },
        getUnreadCountableMsgAfterTS: function(e, t) {
          for (var n, i = t.length - 1; i > -1; i -= 1)
            if (n = t[i], n.ts > e && TS.utility.msgs.msgCanCountAsUnread(n)) return n;
          return null;
        },
        getMarkMsgTSForUnreadPoint: function(e, t, n) {
          var i, r;
          if (n.oldest_msg_ts && e == n.oldest_msg_ts ? i = "0000000000.000000" : (r = TS.utility.msgs.getPrevDisplayedMsg(e, t) || TS.utility.msgs.getMsg(e, t)) && (i = r.ts), !i) return null;
          for (; i && !TS.utility.msgs.getUnreadCountableMsgAfterTS(i, t);) r = TS.utility.msgs.getPrevDisplayedMsg(i, t), i = r ? r.ts : null;
          return i || null;
        },
        getMsg: function(e, t) {
          return t ? TS.utility.msgs.getMsgByProp("ts", e, t) : null;
        },
        canEditMsg: function(e, t) {
          return e.user === TS.model.user.id && (!TS.utility.msgs.isAutomatedMsg(e) && (!TS.utility.msgs.isFileMsg(e) && ((!e || "reply_broadcast" !== e.subtype) && ((!e || "tombstone" !== e.subtype) && (!(!t || !t.is_self_im) || !(TS.model.team.prefs.msg_edit_window_mins > -1 && (Date.now() - TS.interop.datetime.toDateObject(e.ts)) / 6e4 > TS.model.team.prefs.msg_edit_window_mins))))));
        },
        isAutomatedMsg: function(e) {
          return !!e && TS.utility.msgs.isAutomatedSubtype(e.subtype);
        },
        isAutomatedSubtype: function(e) {
          return !!e && TS.utility.msgs.automated_subtypes.indexOf(e) >= 0;
        },
        isFileMsg: function(e) {
          return !!e && TS.utility.msgs.isFileSubtype(e.subtype);
        },
        isFileSubtype: function(e) {
          return !!e && TS.utility.msgs.file_subtypes.indexOf(e) >= 0;
        },
        getMsgActions: function(e, t) {
          if (e) {
            t = t || TS.shared.getActiveModelOb();
            var n = {
                edit_msg: TS.utility.msgs.canEditMsg(e, t),
                delete_msg: !0
              },
              i = !1;
            e.user == TS.model.user.id && (i = !0);
            var r = TS.utility.teams.isMsgFromOtherTeam(e);
            if (e.file && "email" === e.file.mode && (n.open_original = !0), TS.model.team.prefs.allow_message_deletion)
              if ("tombstone" === e.subtype) n.delete_msg = !1;
              else if ("retention" === e.subtype) n.delete_msg = !1;
            else if (r) TS.boot_data.page_needs_enterprise && (i || TS.model.user.enterprise_user.is_owner) ? n.delete_msg = !0 : n.delete_msg = !1;
            else if (TS.model.active_im_id) i || "USLACKBOT" === e.user || "bot_message" === e.subtype || (n.delete_msg = !1);
            else if (i) {
              if (TS.utility.msgs.isAutomatedMsg(e)) {
                var a = ["pinned_item", "sh_room_created", "sh_room_shared", "reply_broadcast"];
                TS.model.user.is_admin || _.includes(a, e.subtype) || (n.delete_msg = !1);
              }
            } else TS.model.user.is_admin || (n.delete_msg = !1);
            else r ? n.delete_msg = !1 : TS.model.user.is_admin ? TS.model.active_im_id && (i || "USLACKBOT" === e.user || "bot_message" === e.subtype || (n.delete_msg = !1)) : n.delete_msg = !1;
            if (TS.boot_data.feature_new_broadcast && "thread_broadcast" === e.subtype && (n.remove_broadcast = n.delete_msg), e.is_ephemeral) n.delete_msg = !0;
            else {
              if (TS.client && "pinned_item" !== e.subtype && "unpinned_item" !== e.subtype && "sh_room_created" !== e.subtype && "sh_room_shared" !== e.subtype) {
                TS.pins.canUserPinHere(t) && (TS.pins.isMessagePinned(e, t) ? n.unpin_msg = !0 : n.pin_msg = !0), "tombstone" === e.subtype && (n.unpin_msg = !1, n.pin_msg = !1);
                var s = ["channel_join", "channel_leave", "group_join", "group_leave"];
                _.includes(s, e.subtype) && (n.pin_msg = !1);
              }
              if ("file_comment" === e.subtype) n.add_file_comment_rxn = !0;
              else if (TS.utility.msgs.isFileMsg(e)) n.add_file_rxn = !0;
              else if ("tombstone" === e.subtype) n.add_rxn = !1;
              else {
                var o = TS.rxns.getHandyRxnsDisplayDataByRxnKey(e._rxn_key);
                n.add_rxn = !o.restrict;
              }
              TS.clipboard.canWriteText() && (n.copy_link = !0, "tombstone" === e.subtype && (n.copy_link = !1));
            }
            TS.client && (n.mark_unread = !0);
            var l = !e.thread_ts || e.thread_ts == e.ts;
            n.jump_to_original = !0, TS.replies.canReplyToMsg(t, e) && (n.reply = !0), n.jump_to_original = l, n.mark_unread && !l && (n.mark_unread = !1);
            var d = ["bot_message", "file_share", "file_mention", "file_comment", "me_message", "reply_broadcast", "thread_broadcast"];
            return e.is_ephemeral || e.subtype && -1 === d.indexOf(e.subtype) || (n.remind_me = !0), (n.jump_to_original || n.copy_link || n.mark_unread || n.remind_me) && (n.has_private_actions = !0), (n.copy_link || n.add_rxn || n.add_file_rxn || n.add_file_comment_rxn || n.pin_msg || n.unpin_msg) && (n.has_public_actions = !0), e.is_ephemeral || TS.utility.msgs.isTempMsg(e) || ("file_share" === e.subtype || "file_mention" === e.subtype ? n.share_file = !0 : "tombstone" === e.subtype ? n.share_message = !1 : n.share_message = !TS.ims.isImWithDeletedMember(t) && (!t.is_archived || t.is_channel)), n;
          }
        },
        validateMsg: function(e, t, n) {
          return t.ts ? !TS.utility.msgs.getMsg(t.ts, n) || (TS.warn("msg " + t.ts + " already exists! (" + e + ")"), TS.dir(0, t), !1) : (TS.error("msg lacks a ts (" + e + ")"), TS.dir(0, t), !1);
        },
        findMsg: function(e, t) {
          var n = TS.shared.getModelObById(t);
          if (n) {
            var i = n.msgs && TS.utility.msgs.getMsg(e, n.msgs);
            if (i) return i;
            if (i = n._archive_msgs && TS.utility.msgs.getMsg(e, n._archive_msgs)) return i;
            if (TS.ui.replies && (i = TS.ui.replies.getActiveMessage(n, e))) return i;
            if (TS.client && (i = TS.client.threads.getMessage(n, e))) return i;
            if (!i && TS.model.unread_view_is_showing && TS.client && (i = TS.client.unread.getMessage(n, e))) return i;
          }
          var r = TS.mentions.getMentionByMsgId(e);
          return r ? r.message : null;
        },
        replaceMsg: function(e, t, n, i) {
          var r = TS.utility.msgs.getMsg(t.ts, e.msgs);
          if (!r && e._archive_msgs && (r = TS.utility.msgs.getMsg(t.ts, e._archive_msgs)), !r && TS.ui.replies && (r = TS.ui.replies.getActiveMessage(e, t.ts)), !r && TS.client && (r = TS.client.threads.getMessage(e, t.ts)), !r && TS.client && (r = TS.client.unread.getMessage(e, t.ts)), !r) return void(n || TS.error("unknown msg:" + t.ts + " in " + e.id));
          t._rxn_key = r._rxn_key, t.pinned_to || (t.pinned_to = r.pinned_to), "is_starred" in t || (t.is_starred = r.is_starred), TS.boot_data.feature_sli_recaps && !t.recap && r.recap && (t.recap = r.recap);
          var a = null;
          if (t.comment && t.file) {
            var s = TS.files.getFileById(t.file.id);
            s && (TS.files.editCommentOnFile(t.comment, s), a = TS.files.getFileCommentById(s, t.comment.id));
          }
          t = TS.utility.msgs.processImsg(t, e.id), a && (t.comment = a);
          var o = _.union(Object.keys(t), Object.keys(r)).filter(function(e) {
            return t[e] != r[e];
          });
          if (!o.length && !i) return void TS.info("Not signalling message change because it doesn't look like anything has changed for " + t.ts + " in " + e.id);
          if (t._handy_rxns_poll_data && TS.rxns.clearHandyRxnsDisplayDataCache(), _.each(_.keys(r), function(e) {
              delete r[e];
            }), _.forOwn(t, function(e, t) {
              r[t] = e;
            }), e.is_im ? TS.ims.message_changed_sig.dispatch(e, r, o) : e.is_group && e.is_mpim ? TS.mpims.message_changed_sig.dispatch(e, r, o) : e.is_group && !e.is_mpim ? TS.groups.message_changed_sig.dispatch(e, r, o) : e.is_channel && e.is_mpim ? TS.mpims.message_changed_sig.dispatch(e, r, o) : e.is_channel && TS.channels.message_changed_sig.dispatch(e, r, o), TS.boot_data.feature_new_broadcast && _.includes(o, "_hidden_reply")) {
            var l = !TS.utility.msgs.isTempMsg(r);
            e.is_im ? TS.ims.calcUnreadCnts(e, l) : e.is_group && e.is_mpim ? TS.mpims.calcUnreadCnts(e, l) : e.is_group && !e.is_mpim ? TS.groups.calcUnreadCnts(e, l) : e.is_channel && e.is_mpim ? TS.mpims.calcUnreadCnts(e, l) : e.is_channel && TS.channels.calcUnreadCnts(e, l);
          }
          TS.boot_data.feature_new_broadcast && TS.utility.msgs.msgHasReplies(r) && TS.replies.updateThreadBroadcastRoots(e, r);
        },
        removeEphemeralMsg: function(e, t) {
          var n = TS.groups.getGroupById(e) || TS.channels.getChannelById(e);
          n && (n.is_channel ? TS.channels.removeMsg(e, TS.utility.msgs.getMsg(t, n.msgs)) : n.is_mpim ? TS.mpims.removeMsg(e, TS.utility.msgs.getMsg(t, n.msgs)) : n.is_group && TS.groups.removeMsg(e, TS.utility.msgs.getMsg(t, n.msgs)));
        },
        getMemberFromMemberMarkup: function(e) {
          var t = TS.utility.msgs.getMemberIdFromMemberMarkup(e),
            n = TS.members.getPotentiallyUnknownMemberById(t);
          return n || (n = TS.members.getMemberByName(t)), n;
        },
        getMemberIdFromMemberMarkup: function(e) {
          var t = e.substr(1);
          return t && (t = t.split("|")[0]), t;
        },
        makeSureMsgObIsValid: function(e) {
          return e;
        },
        api_url_prefix: "api::",
        doApiUrl: function(e) {
          if (!TS.client) return void alert(TS.i18n.t("This link will not work in the archives.", "msgs")());
          e = e.replace(TS.utility.msgs.api_url_prefix, "");
          var t = e.split("?"),
            n = t[0],
            i = {};
          if (t.length > 1)
            for (var r = t[1].split("&"), a = 0; a < r.length; a += 1) {
              var s = r[a].indexOf("=");
              if (-1 != s) {
                var o = r[a].substring(0, s),
                  l = r[a].substring(s + 1);
                i[o] = unescape(l);
              }
            }
          TS.api.call(n, i);
        },
        new_api_url_prefix: "slack-action://",
        doNewApiUrl: function(e) {
          if (!TS.client) return void alert(TS.i18n.t("This link will not work in the archives.", "msgs")());
          var t = e.replace(TS.utility.msgs.new_api_url_prefix, "").split("/"),
            n = t.shift(),
            i = t.join("/");
          TS.api.call("chat.action", {
            bot: n,
            payload: decodeURIComponent(i)
          });
        },
        getHighlightWordsRegex: function() {
          return TS.model.highlight_words_regex || TS.utility.msgs.makeHighlightWordsRegex(), TS.model.highlight_words_regex;
        },
        makeHighlightWordsRegex: function() {
          for (var e, t = [], n = 0; n < TS.model.highlight_words.length; n += 1) e = TS.format.swapOutAts(TS.model.highlight_words[n]), e = TS.utility.regexpEscape(e), "don" === e && (e += "(?!['’]t)"), t.push(e);
          TS.model.highlight_words_regex = new RegExp("(\\b|_|\\s|^)(" + t.join("|") + ")(\\b|_|\\s|$)", "i");
        },
        msgContainsMention: function(e, t, n, i, r) {
          function a(e) {
            if (!e) return !1;
            if (TS.model.you_regex.test(e)) return !0;
            if (!t && TS.model.here_regex.test(e)) return !0;
            if (!i && !l && TS.model.everyone_regex.test(e)) return !0;
            if (!r && !l && TS.model.channel_regex.test(e)) return !0;
            if (!l && TS.model.group_regex.test(e)) return !0;
            for (var a in TS.model.your_user_group_regex)
              if (TS.model.your_user_group_regex[a].test(e)) return !0;
            return !o && (e = e.replace(/<!subteam\^(\w+\d+)\|@(.+)>/g, ""), e = TS.format.swapOutAts(e), !(!s.test(e) || n));
          }
          var s = TS.utility.msgs.getHighlightWordsRegex(),
            o = "bot_message" === e.subtype,
            l = TS.utility.msgs.isMsgReply(e);
          if ("pinned_item" === e.subtype) return !1;
          if (!e.ignore_if_attachments_supported && a(e.text)) return !0;
          var d, c;
          if (e.attachments)
            for (var _ = 0; _ < e.attachments.length; _ += 1)
              if (d = e.attachments[_], !d.from_url) {
                if (a(d.title)) return !0;
                if (a(d.pretext)) return !0;
                if (a(d.text)) return !0;
                if (a(d.footer)) return !0;
                if (d.fields && d.fields.length)
                  for (var u = 0; u < d.fields.length; u += 1)
                    if (c = d.fields[u], a(c.value)) return !0;
              }
          return !1;
        },
        getMsgMentionData: function(e, t) {
          function n(e) {
            return i(e) ? (a.non_channel_mentions = !0, a.mentions = !0, !0) : (r(e) && (a.mentions = !0), !1);
          }

          function i(e) {
            return !!e && (!!TS.model.you_regex.test(e) || !o && (e = TS.format.swapOutAts(e), !(!s.test(e) || t)));
          }

          function r(e) {
            return !!e && (!(!TS.model.everyone_regex.test(e) || l) || (!(!TS.model.channel_regex.test(e) || l) || !(!TS.model.group_regex.test(e) || l)));
          }
          var a = {
              mentions: !1,
              non_channel_mentions: !1
            },
            s = TS.utility.msgs.getHighlightWordsRegex(),
            o = "bot_message" === e.subtype,
            l = TS.utility.msgs.isMsgReply(e);
          if (!e.ignore_if_attachments_supported && n(e.text)) return a;
          var d, c;
          if (e.attachments)
            for (var _ = 0; _ < e.attachments.length; _ += 1)
              if (d = e.attachments[_], !d.from_url) {
                if (n(d.title)) return a;
                if (n(d.pretext)) return a;
                if (n(d.text)) return a;
                if (n(d.footer)) return a;
                if (d.fields && d.fields.length)
                  for (var u = 0; u < d.fields.length; u += 1)
                    if (c = d.fields[u], n(c.value)) return a;
              }
          return a;
        },
        msgCanCountAsUnread: function(e) {
          return !TS.utility.msgs.isMsgHidden(e) && (!("channel_join" !== e.subtype || !e.inviter || e.user != TS.model.user.id) || (!("group_join" !== e.subtype || !e.inviter || e.user != TS.model.user.id) || e.user != TS.model.user.id && ("channel_join" !== e.subtype && ("channel_leave" !== e.subtype && ("group_join" !== e.subtype && ("group_leave" !== e.subtype && ("mpim_notify_disabled" !== e.subtype && ((!e.comment || e.comment.user != TS.model.user.id) && !e.dnd_suppressed))))))));
        },
        countAllUnreads: function() {
          if (!e) {
            TS.model.all_unread_highlights_cnt = 0, TS.model.all_unread_cnt = 0, TS.model.all_unread_cnt_to_exclude = 0, TS.model.all_unread_highlights_cnt_to_exclude = 0;
            var t, n;
            TS.channels.getChannelsForUser().forEach(function(e) {
              e.is_archived && !e.was_archived_this_session || TS.notifs.isCorGMuted(e.id) || (t = parseInt(e.unread_cnt, 10) || 0, n = parseInt(e.unread_highlight_cnt, 10) || 0, TS.model.all_unread_cnt += t, TS.model.all_unread_highlights_cnt += n, TS.utility.msgs.maybeExcludeUnreads(e, t, n));
            }), TS.model.groups.forEach(function(e) {
              e.is_archived && !e.was_archived_this_session || TS.notifs.isCorGMuted(e.id) || (t = parseInt(e.unread_cnt, 10) || 0, n = parseInt(e.unread_highlight_cnt, 10) || 0, TS.model.all_unread_cnt += t, TS.model.all_unread_highlights_cnt += n, TS.utility.msgs.maybeExcludeUnreads(e, t, n));
            }), TS.model.ims.forEach(function(e) {
              t = parseInt(e.unread_cnt, 10) || 0, n = parseInt(e.unread_cnt, 10) || 0, TS.model.all_unread_cnt += t, TS.model.all_unread_highlights_cnt += n, TS.utility.msgs.maybeExcludeUnreads(e, t, n);
            }), TS.model.mpims.forEach(function(e) {
              t = parseInt(e.unread_cnt, 10) || 0, n = parseInt(e.unread_cnt, 10) || 0, TS.model.all_unread_cnt += t, TS.model.all_unread_highlights_cnt += n, TS.utility.msgs.maybeExcludeUnreads(e, t, n);
            }), TS.model.threads_has_unreads && (TS.model.all_unread_cnt += 1), TS.model.threads_mention_count && (TS.model.all_unread_highlights_cnt += TS.model.threads_mention_count);
          }
        },
        maybeExcludeUnreads: function(e, t, n) {
          e && (t || n) && TS.shared.isModelObOrgShared(e) && (TS.shared.isRelevantTeamForSharedModelOb(e) ? TS.has_pri[o] && TS.model.is_our_app && TS.log(o, "Using unread of " + t + " and highlight of " + n + " for shared channel " + e.id + " because this IS the relevant team.") : (TS.model.is_our_app && TS.has_pri[o] && TS.log(o, "Excluding unread of " + t + " and highlight of " + n + " for shared channel " + e.id + " because this is NOT the relevant team."), TS.model.all_unread_cnt_to_exclude += t, TS.model.all_unread_highlights_cnt_to_exclude += n));
        },
        doesMsgHaveRxnFromUser: function(e, t) {
          return TS.rxns.doesRxnsHaveRxnFromUser(TS.rxns.getExistingRxnsByKey(e._rxn_key), t);
        },
        doesMsgHaveRxn: function(e, t) {
          return TS.rxns.doesRxnsHaveRxn(TS.rxns.getExistingRxnsByKey(e._rxn_key), t);
        },
        recordEmojiInHash: function(e, t) {
          if (!e) return !1;
          if (!t) return !1;
          var n = TS.utility.findAllTeamEmojiInStr(e, !0);
          if (!n.length) return !1;
          for (var i, r = !1, a = 0; a < n.length; a += 1) i = TS.emoji.isValidName(n[a]), i ? (parseInt(t[i], 10) || (t[i] = 0), t[i] += 1, r = !0) : TS.error(n[a] + " invalid");
          return r;
        },
        reCalcAndCountSomeUnreads: function(e) {
          if (e && e.length) {
            var t, n, i;
            for (t = 0; t < e.length; t += 1) i = TS.shared.getModelObById(e[t]), i ? (n = TS.shared.getControllerForModelOb(i), n ? n.calcUnreadCnts ? n.calcUnreadCnts(i) : TS.warn("reCalcAndCountSomeUnreads: WTF no calcUnreadCnts on controller for model_ob.id " + i.id) : TS.warn("reCalcAndCountSomeUnreads: WTF no controller for model_ob.id " + i.id)) : TS.warn("reCalcAndCountSomeUnreads: WTF no model_ob for id " + e[t]);
          }
        },
        reCalcAndCountAllUnreads: function() {
          var e = TS.channels.getChannelsForUser();
          TS.utility.msgs.startBatchUnreadCalc(), e.forEach(function(e) {
            e.is_archived && !e.was_archived_this_session || (TS.shared.didDeferMessageHistoryById(e.id) && TS.shared.setDeferMessageHistoryForId(e.id, !1), TS.channels.calcUnreadCnts(e));
          }), TS.model.groups.forEach(function(e) {
            e.is_archived && !e.was_archived_this_session || (TS.shared.didDeferMessageHistoryById(e.id) && TS.shared.setDeferMessageHistoryForId(e.id, !1), TS.groups.calcUnreadCnts(e));
          }), TS.model.ims.forEach(function(e) {
            TS.shared.didDeferMessageHistoryById(e.id) && TS.shared.setDeferMessageHistoryForId(e.id, !1), TS.ims.calcUnreadCnts(e);
          }), TS.model.mpims.forEach(function(e) {
            TS.shared.didDeferMessageHistoryById(e.id) && TS.shared.setDeferMessageHistoryForId(e.id, !1), TS.mpims.calcUnreadCnts(e);
          }), TS.utility.msgs.finishBatchUnreadCalc();
        },
        startBatchUnreadCalc: function() {
          "0" != TS.qs_args.unread_batch && (e = !0);
        },
        finishBatchUnreadCalc: function() {
          e = !1, TS.utility.msgs.countAllUnreads();
        },
        whatisunread: function() {
          var e = [];
          TS.channels.getChannelsFilteredBy("unread_cnt").forEach(function(t) {
            e.push("C:" + t.name + " " + t.unread_cnt);
          }), TS.groups.getGroupsFilteredBy("unread_cnt").forEach(function(t) {
            e.push("G:" + t.name + " " + t.unread_cnt);
          }), TS.ims.getImsFilteredBy("unread_cnt").forEach(function(t) {
            e.push("D:" + t.name + " " + t.unread_cnt);
          }), TS.mpims.getMpimsFilteredBy("unread_cnt").forEach(function(t) {
            e.push("G:" + t.name + " " + t.unread_cnt);
          }), TS.info("unreads: " + e.join(","));
        },
        maybeSetOldestMsgsTsAfterMsgAdded: function(e) {
          e.oldest_msg_ts || e.latest || TS.utility.msgs.setOldestMsgsTs(e);
        },
        setOldestMsgsTs: function(e) {
          var t = TS.utility.msgs.getOldestValidTs(e);
          t && (TS.pri && TS.console.log(58, "setOldestMsgsTs (" + e.id + '): setting oldest_msg_ts from "' + e.oldest_msg_ts + '" -> ' + t), e.oldest_msg_ts = t, TS.storage.storeOldestTs(e.id, e.oldest_msg_ts), e._latest_via_users_counts && (e._latest_via_users_counts = void 0));
        },
        resetOldestMsgsTs: function(e) {
          TS.pri && TS.console.log(58, "resetOldestMsgsTs (" + e.id + '): setting oldest_msg_ts from "' + e.oldest_msg_ts + '" -> null'), e.oldest_msg_ts = null, TS.storage.storeOldestTs(e.id, null);
        },
        getOlderMsgsStatus: function(e) {
          var t = e.msgs,
            n = e.oldest_msg_ts,
            i = TS.shared.getLatestMsgTs(e) || null,
            r = !1,
            a = "ERROR",
            s = !1,
            o = 0;
          return n && TS.utility.msgs.getMsg(n, t) && (r = !0), i ? r || e.is_limited ? (s = !1, o = 3, a = "We have the oldest msg: " + n + ". is_limited:" + e.is_limited) : (s = !0, o = 4, a = n ? "There are older messages than these. oldest_msg_ts: " + n : "There are older messages than these. oldest_msg_ts: unknown") : t.length ? (s = !1, o = 1, a = "There are NOT older messages than these.") : (s = !1, o = 2, a = "THIS IS A BRAND NEW CHANNEL SAY SOMETHING"), {
            text: a,
            more: s,
            code: o,
            is_limited: e.is_limited
          };
        },
        getMostRecentValidTs: function(e) {
          if (!e) return null;
          for (var t, n = e.msgs || [], i = 0; i < n.length; i += 1)
            if (t = n[i], !TS.utility.msgs.isTempMsg(t)) return TS.pri && i > 0 && TS.console.log(58, "getMostRecentValidTs (" + e.id + "): " + t.ts + " at msgs[" + i + "] of " + n.length), t.ts;
          var r = TS.shared.getLatestMsgTs(e) || null;
          return TS.pri && TS.console.log(58, "getMostRecentValidTs (" + e.id + "): did not find most recent valid ts. getLatestMsgTs() returned " + r), r;
        },
        getOldestValidTs: function(e) {
          var t;
          if (!e || !e.msgs) return null;
          for (var n = e.msgs.length - 1, i = n; i > -1; i -= 1)
            if (t = e.msgs[i], !TS.utility.msgs.isTempMsg(t)) return TS.pri && i !== n && TS.console.log(58, "getOldestValidTs(" + e.id + "): " + t.ts + " at msgs[" + i + "] of " + n), t.ts;
          return TS.pri && TS.console.warn(58, "getOldestValidTs(" + e.id + "): none found. msgs.length = " + n), null;
        },
        getHistoryFetchJobKey: function(e, t) {
          var n = e;
          return t && (n += "_" + t), n;
        },
        processImsg: function(e, t) {
          return TS.utility.msgs._slurpExtraData(e, t), TS.utility.msgs._makeInternalMsgObject(e, t);
        },
        processImsgFromHistory: function(e, t) {
          var n = TS.utility.msgs.processImsg(e, t);
          return e.channel = t, "message_deleted" === e.subtype ? TS.ms.msg_handlers.subtype__message_deleted(e) : "message_changed" === e.subtype && TS.ms.msg_handlers.subtype__message_changed(e), n;
        },
        _makeInternalMsgObject: function(e, t) {
          var i = {
            type: "message",
            ts: e.ts
          };
          if (TS.boot_data.feature_react_messages && (i.channel = t), e.source_team && (i.source_team_id = e.source_team), "USLACKBOT" === e.user && e.slackbot_feels && (i.slackbot_feels = e.slackbot_feels), e.thread_ts && (i.thread_ts = e.thread_ts, e.parent_ts && (i.parent_ts = e.parent_ts), e.parent_user_id && (i.parent_user_id = e.parent_user_id), e.hasOwnProperty("reply_count") && (i.reply_count = parseInt(e.reply_count, 10)), TS.boot_data.feature_new_broadcast ? (e.thread_ts !== e.ts && "thread_broadcast" !== e.subtype && (i._hidden_reply = !0), "thread_broadcast" === e.subtype && e.root && (i.root = e.root, TS.boot_data.feature_react_messages && (i.root.channel = t))) : e.thread_ts !== e.ts && (i._hidden_reply = !0)), "reply_broadcast" === e.subtype && (e.broadcast_thread_ts && (i.broadcast_thread_ts = e.broadcast_thread_ts), e.channel && (i.channel_id = e.channel), TS.boot_data.feature_new_broadcast && e.new_broadcast && (i.no_display = !0)), e.replies && (i.replies = e.replies), e.hasOwnProperty("subscribed") && (i._subscribed = e.subscribed), e.hasOwnProperty("unread_count") && (i._unread_count = e.unread_count), e.last_read && (i._last_read = e.last_read), "tombstone" === e.subtype && e.hidden && e.replies && e.replies.length > 0 && delete e.hidden, "channel_topic" !== e.type && "channel_purpose" !== e.type && "channel_join" !== e.type && "channel_leave" !== e.type || (e.subtype = e.type), TS.utility.msgs.shouldHideChannelJoinOrLeaveMsg(e, t) && (i.no_display = !0), "group_join" === e.subtype || "group_purpose" === e.subtype || "group_topic" === e.subtype) {
            var r = TS.shared.getModelObById(t);
            r && r.is_mpim && (i.no_display = !0);
          }
          e.inviter && (i.inviter = e.inviter), e.hidden && (i.hidden = e.hidden), e.no_notifications && (i.no_notifications = e.no_notifications), e.ignore_if_attachments_supported && (i.ignore_if_attachments_supported = e.ignore_if_attachments_supported), (e.hidden || e.no_display) && (i.no_display = !0), !e.ignore_if_attachments_supported || e.attachments && e.attachments.length || (i.no_display = !0), e.edited && (i.edited = e.edited), e.user && (i.user = e.user), e.attachments && (i.attachments = e.attachments), e.img_vids && (i.img_vids = e.img_vids), e.bot_profile && (i.bot_profile = e.bot_profile);
          var a;
          if (e.imgs) {
            i.img_vids = i.img_vids || {};
            var s;
            for (a in e.imgs) i.img_vids[a] || (s = e.imgs[a], s.img_vid_type = "img", i.img_vids[a] = s);
          }
          if (e.videos) {
            i.img_vids = i.img_vids || {};
            var o;
            for (a in e.videos) i.img_vids[a] || (o = e.videos[a], o.img_vid_type = "video", i.img_vids[a] = o);
          }
          if (e.icons && (i.icons = e.icons), e.bot_id && (i.bot_id = e.bot_id), e.is_ephemeral && (i.is_ephemeral = e.is_ephemeral), e._alert_even_though_temp && (i._alert_even_though_temp = e._alert_even_though_temp), e.is_starred && (i.is_starred = e.is_starred), e.reactions && delete e.reactions, e._rxn_key && (i._rxn_key = e._rxn_key), e.pinned_to && (i.pinned_to = e.pinned_to), e.topic && (i.topic = e.topic), e.name && (i.name = e.name), e.old_name && (i.old_name = e.old_name), e.purpose && (i.purpose = e.purpose), e.text && (_.isString(e.text) ? i.text = e.text : TS.error("ERROR: invalid imsg.text type: " + n(e.text) + " " + TS.utility.stringifyJSONOrElse(e.text, null, 2, "(and it is not JSON.stringifiable)")), TS.boot_data.feature_parsed_mrkdwn && TS.utility.msgs.cacheFormatting(i)), e.sound && (i.sound = e.sound), "mrkdwn" in e && (i.mrkdwn = !!e.mrkdwn), "hex_swatches" in e && (i.hex_swatches = !!e.hex_swatches), e.dnd_suppressed && (i.dnd_suppressed = e.dnd_suppressed), e.recap && (i.recap = e.recap), TS.ui.handy_rxns.decorateMsg(i, e.text), e.subtype) {
            if (i.subtype = e.subtype, "bot_message" === i.subtype && e.username && (i.username = e.username), "sh_room_created" === e.subtype || "sh_room_shared" === e.subtype)
              if (e._room_id) i._room_id = e._room_id;
              else if (e.room) {
              var l = TS.rooms.getRoomById(e.room.id);
              l ? i._room_id = l.id : (TS.error("no room, no_display = true " + i.ts), i.no_display = !0);
            } else i.no_display = !0;
            if ("file_share" === e.subtype || "file_mention" === e.subtype || "file_comment" === e.subtype) {
              if (e.upload && (i.upload = !0), e.file) {
                var d = TS.files.getFileById(e.file.id);
                d ? i.file = d : (TS.error("no file, no_display = true " + i.ts), i.no_display = !0);
              } else i.no_display = !0;
              "file_comment" === e.subtype && (e.comment ? i.file ? i.comment = TS.files.addCommentToFile(e.comment, i.file) : i.comment = e.comment : i.no_display = !0);
            }
            if ("pinned_item" === e.subtype) {
              if (e.item_type && (i.item_type = e.item_type), "F" === e.item_type) {
                if (e.item) {
                  var c = TS.files.getFileById(e.item.id);
                  i.item = c;
                }
              } else "Fc" !== e.item_type && "C" !== e.item_type && "G" !== e.item_type && "D" !== e.item_type || (i.item = e.item);
              i.no_display = !0;
            }
          }
          return i;
        },
        cacheFormatting: function(e) {
          if (!e) throw new Error("Message object is required");
          e.cached_formatting = TSF.getTokensArray(e.text, "NORMAL", {
            jumbomoji: !!TS.model.prefs.jumbomoji
          });
        },
        clearCachedFormatting: function(e) {
          if (!e) throw new Error("Message object is required");
          delete e.cached_formatting;
        },
        maybeFetchUserDataFromLS: function(e) {
          if (!e) return void TS.warn("maybeFetchUserDataFromLS: WTF no model_ob?");
          a[e.id] || (e.last_msg_input || (e.last_msg_input = TS.storage.fetchLastMsgInput(e.id), e.has_draft = !!e.last_msg_input, e.last_msg_input && TS.has_pri[l] && TS.log(l, 'Got last_msg_input for "' + e.id + '": length = ' + (e.last_msg_input.length || "unknown"))), a[e.id] = !0);
        },
        processAttachments: function(e) {
          if (e)
            for (var t, n = 0; n < e.length; n += 1)
              if (t = e[n]) {
                if (t.slack_file_id && !t._slack_file_is_deleted) {
                  var i = TS.files.getFileById(t.slack_file_id);
                  i ? t._slack_file = i : t._slack_file && (t._slack_file = TS.files.upsertFile(t._slack_file).file);
                }
                if (t.mrkdwn_in && _.isArray(t.mrkdwn_in) && t.mrkdwn_in.length) {
                  t.mrkdwn_in_hash = {};
                  for (var r = 0; r < t.mrkdwn_in.length; r += 1) t.mrkdwn_in_hash[t.mrkdwn_in[r]] = !0;
                }
                if (t.mrkdwn_in_hash || (t.mrkdwn_in_hash = {}), delete t.mrkdwn_in, t.hex_swatches = !!t.hex_swatches, (t.audio_html || t.audio_url) && TS.inline_audios.makeInternalInlineAudio(t.audio_html || t.audio_url, t), t.other_html) TS.inline_others.makeInternalInlineOther(t);
                else if (t.video_html) {
                  var a = t.video_html_width && parseInt(t.video_html_width, 10) > parseInt(t.thumb_width, 10) ? t.video_html_width : t.thumb_width,
                    s = t.video_html_height && parseInt(t.video_html_height, 10) > parseInt(t.thumb_height, 10) ? t.video_html_height : t.thumb_height;
                  TS.inline_videos.makeInternalInlineVideo(t.from_url || t.thumb_url, {
                    title: t.title,
                    html: TS.utility.msgs.filterHTMLForEmbeds(t.video_html),
                    thumbnail: {
                      url: t.thumb_url,
                      width: a,
                      height: s,
                      link_url: t.from_url || t.title_url
                    }
                  });
                } else t.image_url && TS.inline_imgs.makeInternalInlineImg(t.from_url || t.image_url, {
                  src: t.image_url,
                  width: t.image_width,
                  height: t.image_height,
                  link_url: t.from_url || t.title_url || t.image_url,
                  bytes: t.image_bytes,
                  rotation: t.rotation,
                  content_type: t.content_type
                });
                TS.inline_attachments.massageAttachment(t, n);
              } else TS.warn("attachment is null!");
        },
        _slurpExtraData: function(e, t) {
          if (TS.utility.msgs.processAttachments(e.attachments), e._rxn_key = TS.rxns.getRxnKey("message", e.ts, t), e.reactions && (TS.rxns.upsertRxnsFromDataAndUpdateUI(e._rxn_key, e.reactions), delete e.reactions), e.img_vids && _.forOwn(e.img_vids, function(e, t) {
              "img" === e.img_vid_type ? TS.inline_imgs.makeInternalInlineImg(t, e) : "video" === e.img_vid_type && TS.inline_videos.makeInternalInlineVideo(t, e);
            }), e.imgs && _.forOwn(e.imgs, function(t, n) {
              e.imgs[n].from_url = n, TS.inline_imgs.makeInternalInlineImg(n, t);
            }), e.videos && _.forOwn(e.videos, function(t, n) {
              e.videos[n].from_url = n, TS.inline_videos.makeInternalInlineVideo(n, t);
            }), "file_share" === e.subtype || "file_mention" === e.subtype || "file_comment" === e.subtype)
            if (e.file && !e.file.id) TS.error("WTF no file id on file in imsg.subtype:" + e.subtype + " " + e.ts);
            else if (e.file && (TS.files.upsertAndSignal(e.file), "file_share" === e.subtype || e.subtype, "file_comment" === e.subtype))
            if (e.comment) {
              var n = TS.files.getFileById(e.file.id);
              n ? TS.files.addCommentToFile(e.comment, n) : TS.warn("WTF no file? id:" + e.file.id);
            } else TS.error("WTF no comment in imsg.subtype:" + e.subtype + " " + e.ts);
          "sh_room_created" !== e.subtype && "sh_room_shared" !== e.subtype || (e.room && !e.room.id ? TS.error("WTF no room id on room in imsg.subtype:" + e.subtype + " " + e.ts) : e.room ? TS.rooms.upsertAndSignal(e.room) : TS.error("WTF no room on imsg.subtype:" + e.subtype + " " + e.ts)), "pinned_item" === e.subtype && "F" === e.item_type && e.item && e.item.id && !e.item.is_deleted && TS.files.upsertAndSignal(e.item);
        },
        constructMsgPermalink: function(e, t, n) {
          if (!e) return "";
          var i;
          i = _.isString(e) ? e : e.id;
          var r = "/archives/" + i + "/p" + t.replace(".", "");
          return n && n !== t && (r += "?thread_ts=" + n + "&cid=" + e.id), r;
        },
        constructAbsoluteMsgPermalink: function(e, t, n) {
          return TS.boot_data.team_url.slice(0, -1) + TS.utility.msgs.constructMsgPermalink(e, t, n);
        },
        constructConversationPermalink: function(e, t) {
          return "/conversation/" + (_.isString(e) ? e : e.id) + "/p" + t.replace(".", "");
        },
        isTempMsg: function(e) {
          return !e.ts || e.ts.indexOf(TS.utility.date.fake_ts_unique_padder) > -1;
        },
        shouldMarkUnreadsOnMessageFetch: function(e) {
          if ("1" == TS.qs_args.no_unread_marking_on_msgs_fetch) return !1;
          var t;
          return !(e && (!(t = TS.shared.getActiveModelOb()) || t.id !== e.id)) && (TS.pri && t && TS.console.log(58, "shouldMarkUnreadsOnMessageFetch: returning TRUE for active model_ob of " + t.id), !0);
        },
        ipsum: function() {
          return ["Build Something People Want", "We know that we have built something which is genuinely useful: almost any team which adopts Slack as their central application for communication would be significantly better off than they were before.", "That means we have something people want.", "However, almost all of them have no idea that they want Slack.", "How could they?", "They’ve never heard of it.", "And only a vanishingly small number will have imagined it on their own.", "They think they want something different (if they think they want anything at all).", "They definitely are not looking for Slack.", "(But then no-one was looking for Post-it notes or GUIs either.)", "Just as much as our job is to build something genuinely useful, something which really does make people’s working lives simpler, more pleasant and more productive, our job is also to understand what people think they want and then translate the value of Slack into their terms.", "A good part of that is “just marketing,” but even the best slogans, ads, landing pages, PR campaigns, etc., will fall down if they are not supported by the experience people have when they hit our site, when they sign up for an account, when they first begin using the product and when they start using it day in, day out.", "Therefore, “understanding what people think they want and then translating the value of Slack into their terms” is something we all work on.", "It is the sum of the exercise of all our crafts.", "We do it with copy accompanying signup forms, with fast-loading pages, with good welcome emails, with comprehensive and accurate search, with purposeful loading screens, and with thoughtfully implemented and well-functioning features of all kinds.", "Marketing from Both Ends", "Much has been written about “product-market fit” in the last few years, probably as a result of the popularity of the lean startup movement (though the idea has been around much longer).", "The term refers to the degree to which a product could be successful, given sufficient promotion, appropriate pricing, adequate customer support and so on (before you find that fit, all the pushing in the world won’t get you up the hill).", "In this classic post on Marc Andreessen’s old blog, he calls getting to product-market fit the “only thing that matters” for startups and offers a way of thinking about the life of the startup that divides it into two distinct phases: before product-market fit and after.", "Once the product fits the market, a company is able to step on the gas, spending to promote a product that will actually sell.", "The things you need to do before are very different from the things you need to do after (generally test & iterate vs scale & optimize).", "We are right in the middle of that first phase.", "It seems we are doing well and there are many encouraging signs, but we’re definitely still in the first phase and it is very, very hard to tell how far we have to go to cross over into the promised land (the last 10% is 90% of the work, etc.)", "So, we should be working carefully from both the product end and the market end:", "Doing a better and better job of providing what people want (whether they know it or not)", "Communicating the above more and more effectively (so that they know they want it)", "In the best case, there is a dialectic at play here: the product itself and the way people use it should suggest new ways of articulating the value — and refinements to how we communicate the value should lead to principles which clarify decision-making around product features and design.", "Our position is different than the one many new companies find themselves in: we are not battling it out in a large, well-defined market with clear incumbents (which is why we can’t get away with “Other group chat products are poisonous. Slack is toasted.”).", "Despite the fact that there are a handful of direct competitors and a muddled history of superficially similar tools, we are setting out to define a new market.", "And that means we can’t limit ourselves to tweaking the product; we need to tweak the market too.", "Sell the innovation, not the product", "The best — maybe the only? — real, direct measure of “innovation” is change in human behaviour.", "In fact, it is useful to take this way of thinking as definitional: innovation is the sum of change across the whole system, not a thing which causes a change in how people behave.", "No small innovation ever caused a large shift in how people spend their time and no large one has ever failed to do so.", "By that measure, Slack is a real and large innovation.", "It is not as eye-catching as self-driving cars or implantable chips — it is not basic research-y kind of stuff.", "But, for organizations that adopt it, there will be a dramatic shift in how time is spent, how communication happens, and how the team’s archives are utilized.", "There will be changes in how team members relate to one another and, hopefully, significant changes in productivity.", "We are unlikely to be able to sell “a group chat system” very well: there are just not enough people shopping for group chat system (and, as pointed out elsewhere, our current fax machine works fine).", "That’s why what we’re selling is organizational transformation.", "What we are selling is not the software product — the set of all the features, in their specific implementation — because there are just not many buyers for this software product.", "(People buy “software” to address a need they already know they have or perform some specific task they need to perform, whether that is tracking sales contacts or editing video.)", "However, if we are selling “a reduction in the cost of communication” or “zero effort knowledge management” or “making better decisions, faster” or “all your team communication, instantly searchable, available wherever you go” or “75% less email” or some other valuable result of adopting Slack, we will find many more buyers.", "That’s why what we’re selling is organizational transformation.", "The software just happens to be the part we’re able to build & ship (and the means for us to get our cut).", "We’re selling a reduction in information overload, relief from stress, and a new ability to extract the enormous value of hitherto useless corporate archives.", "We’re selling better organizations, better teams.", "That’s a good thing for people to buy and it is a much better thing for us to sell in the long run.", "We will be successful to the extent that we create better teams.", "To see why, consider the hypothetical Acme Saddle Company.", "They could just sell saddles, and if so, they’d probably be selling on the basis of things like the quality of the leather they use or the fancy adornments their saddles include; they could be selling on the range of styles and sizes available, or on durability, or on price.", "Or, they could sell horseback riding.", "Being successful at selling horseback riding means they grow the market for their product while giving the perfect context for talking about their saddles.", "It lets them position themselves as the leader and affords them different kinds of marketing and promotion opportunities (e.g., sponsoring school programs to promote riding to kids, working on land conservation or trail maps).", "It lets them think big and potentially be big.", "Because the best possible way to find product-market fit is to define your own market.", "This isn’t a new idea.", "There are many brands whose marketing activities or positioning has them selling something other than (and usually larger than) their product: Harley Davidson sells motorcycle riding, but it especially sells freedom and independence.", "Most luxury brands sell something that comes down to “being better than you are” (richer, better looking, more attractive to those you find desirable, etc.)", "My favorite recent example is Lululemon: when they started, there was not a large market for yoga-specific athletic wear and accessories.", "They sold yoga like crazy: helping people find yoga studios near their homes, hosting free classes, sponsorships and scholarships, local ambassadors and training, etc.", "And as a result, they sold just under $1.4 billion worth of yoga-specific athletic wear and accessories in their most recent fiscal year.", "But going back to the Acme Saddle Company, the better analogy to what we are doing now is to imagine them selling horseback riding … about 4,000 years ago.", "It is almost inevitable that centralized internal communication systems will gradually replace email for most organizations over the next 10-20 years and we should do what we can to accelerate the trend and “own it”.", "We are at the beginning of a transition.", "We have an opportunity to both define the category and push hard for the whole market’s growth.", "We’d be crazy not to take it, because the best possible way to find product-market fit is to define your own market."];
        },
        removeFileSharesAndMentions: function(e, t) {
          if (TS.client)
            for (var n, i = e.msgs, r = i.length - 1; r > -1; r -= 1) n = i[r], "file_share" !== n.subtype && "file_mention" !== n.subtype || !n.file || n.file.id != t.id || (e.is_mpim ? TS.mpims.removeMsg(e.id, n) : e.is_group ? TS.groups.removeMsg(e.id, n) : e.is_channel ? TS.channels.removeMsg(e.id, n) : TS.ims.removeMsg(e.id, n));
        },
        removeFileComments: function(e, t) {
          if (TS.client)
            for (var n, i = e.msgs, r = i.length - 1; r > -1; r -= 1) n = i[r], "file_comment" === n.subtype && n.file && n.file.id == t.id && (e.is_mpim ? TS.mpims.removeMsg(e.id, n) : e.is_group ? TS.groups.removeMsg(e.id, n) : e.is_channel ? TS.channels.removeMsg(e.id, n) : TS.ims.removeMsg(e.id, n));
        },
        removeFileReferences: function(e, t) {
          if (TS.client)
            for (var n, i = e.msgs, r = i.length - 1; r > -1; r -= 1)
              if (n = i[r], n.attachments) {
                var a = TS.inline_attachments.getAttachmentBySlackFileId(n.attachments, t);
                a && !a._slack_file_is_deleted && (a._slack_file_is_deleted = !0, delete a._slack_file, e.id == TS.model.active_im_id ? TS.ims.message_changed_sig.dispatch(e, n) : e.id == TS.model.active_channel_id ? TS.channels.message_changed_sig.dispatch(e, n) : e.id == TS.model.active_group_id ? TS.groups.message_changed_sig.dispatch(e, n) : e.id == TS.model.active_mpim_id && TS.mpims.message_changed_sig.dispatch(e, n));
              }
        },
        updateFileMsgs: function(e, t) {
          var n = e.msgs,
            i = !(n && n.length) || TS.model.archive_view_is_showing && e.is_channel && !1 === e.is_member;
          if ((n = i ? e._archive_msgs : n) && n.length)
            for (var r, a = n.length - 1; a > -1; a -= 1) {
              if (r = n[a], t.is_deleted || "file_share" !== r.subtype && "file_mention" !== r.subtype && "file_comment" !== r.subtype || !r.file || r.file.id != t.id) {
                if (! function(e) {
                    return !!e && (!!e.attachments && (!!e.attachments.length && !!TS.inline_attachments.getAttachmentBySlackFileId(e.attachments, t.id)));
                  }(r)) continue;
              } else;
              if (t.is_tombstoned) e.id == TS.model.active_im_id ? TS.ims.message_changed_sig.dispatch(e, r) : e.id == TS.model.active_channel_id ? TS.channels.message_changed_sig.dispatch(e, r) : e.id == TS.model.active_group_id ? TS.groups.message_changed_sig.dispatch(e, r) : e.id == TS.model.active_mpim_id && TS.mpims.message_changed_sig.dispatch(e, r);
              else {
                if ("hosted" === t.mode || "external" === t.mode || "snippet" === t.mode) {
                  if (!t.comments.length && t.is_tombstoned) continue;
                  e.id == TS.model.active_im_id ? TS.ims.message_changed_sig.dispatch(e, r) : e.id == TS.model.active_channel_id ? TS.channels.message_changed_sig.dispatch(e, r) : e.id == TS.model.active_group_id ? TS.groups.message_changed_sig.dispatch(e, r) : e.id == TS.model.active_mpim_id && TS.mpims.message_changed_sig.dispatch(e, r);
                }
                TS.client ? TS.view.rebuildMsgFile(r, t, i) : TS.web && TS.web.channel.rebuildMsgFile(r, t);
              }
            }
        },
        updateCommentReferences: function(e) {
          if (e) {
            var t = TS.shared.getAllModelObsForUser();
            _.forEach(t, function(t) {
              _.forEach(t.msgs, function(t) {
                if (t.file && t.file.id === e.id && t.comment) {
                  var n = _.find(e.comments, {
                    id: t.comment.id
                  });
                  n && (t.comment = n);
                }
              });
            });
          }
        },
        tryToEditLastMsgFromShortcut: function(e) {
          var t = TS.shared.getActiveModelOb();
          if (t) {
            var n = TS.utility.msgs.getEditableMsgByProp("user", TS.model.user.id, t.msgs);
            if (!n) return TS.sounds.play("beep"), void alert(TS.i18n.t("Found no recent messages from you to edit :(", "msgs")());
            var i = TS.format.unFormatMsg(n.text, n),
              r = TS.utility.msgs.wordReplace(i, e);
            if (i == r) return void TS.sounds.play("beep");
            TS.msg_edit.commitEdit(n, TS.shared.getActiveModelOb(), r);
          }
        },
        getEditLastShortcutCmd: function(e) {
          var t = e.split("/");
          if ((5 == t.length || 4 == t.length) && "s" === t[1]) {
            var n = t[2],
              i = t[3],
              r = 5 == t.length && ("g" === t[4] || "gi" === t[4] || "ig" === t[4]),
              a = 5 == t.length && ("i" === t[4] || "gi" === t[4] || "ig" === t[4]);
            if (n) return {
              str: n,
              rpl: i,
              g: r,
              i: a
            };
          }
        },
        wordReplace: function(e, t) {
          if (!t) return e;
          var n = (t.g ? "g" : "") + (t.i ? "i" : ""),
            i = TS.utility.regexpEscape(t.str),
            r = new RegExp("(^|[\\s\\n\\r\\t.,'\"+!?\\-_|]+)(?:" + i + ")(?=[\\s\\n\\r\\t.,'\"+!?\\-_|]+|$)", n);
          return e.replace(r, "$1" + t.rpl);
        },
        maybeTruncateMsgs: function(e) {
          if (e && e.msgs && e.msgs.length && TS.model.active_cid && TS.shared.getActiveModelOb()) {
            var t = TS.model.initial_msgs_cnt + 1,
              n = Math.min(TS.model.hard_msg_limit, 2 * t),
              i = e.msgs,
              r = TS.utility.msgs.getDisplayedMsgs(i),
              a = Date.now(),
              s = e.has_fetched_history_after_scrollback ? a - e.fetched_history_after_scrollback_time : a;
            if (r.length > n && (e.id != TS.shared.getActiveModelOb().id || e.scroll_top < 1e3 && s > 2e4)) t = n;
            else {
              if (r.length - 50 <= t) return;
              if (e.last_made_active) {
                if (a - e.last_made_active < 0) return;
              }
              if (-1 != e.scroll_top) return;
            }
            if (!e.history_is_being_fetched) {
              for (var o = []; TS.utility.msgs.getDisplayedMsgs(i).length > t;) o.push(i.pop());
              e.is_limited && (TS.info("Truncated " + e.id + " and reset is_limited"), e.is_limited = !1), e.id == TS.shared.getActiveModelOb().id && TS.view.removeMsgsAfterTruncation(o);
            }
          }
        },
        checkForMsgsToTruncate: function() {
          if (TS.model && TS.model.channels) {
            var e, t, n = TS.model.channels;
            for (t = 0; t < n.length; t += 1) e = n[t], e.id != TS.model.active_channel_id && e.is_member && (e.is_archived || TS.utility.msgs.maybeTruncateMsgs(e));
            var i, r = TS.model.ims;
            for (t = 0; t < r.length; t += 1) i = r[t], i.id != TS.model.active_im_id && TS.utility.msgs.maybeTruncateMsgs(i);
            var a, s = TS.model.groups;
            for (t = 0; t < s.length; t += 1) a = s[t], a.id != TS.model.active_group_id && (a.is_archived || TS.utility.msgs.maybeTruncateMsgs(a));
            var o, l = TS.model.mpims;
            for (t = 0; t < l.length; t += 1) o = l[t], o.id != TS.model.active_mpim_id && TS.utility.msgs.maybeTruncateMsgs(o);
          }
        },
        getEphemeralMsgsByCidAndType: function(e, t) {
          var n, i = [],
            r = TS.shared.getModelObById(e);
          return r ? (_.forOwn(TS.utility.msgs.ephemeral_msgs_map, function(a, s) {
            if (a.ephemeral_type == t && a.c_id == e) {
              if (!(n = TS.utility.msgs.getMsg(s, r.msgs))) return;
              i.push(n);
            }
          }), i) : i;
        },
        removeAllEphemeralMsgsByType: function(e, t, n) {
          var i, r;
          _.forOwn(TS.utility.msgs.ephemeral_msgs_map, function(a, s) {
            if (a.ephemeral_type == e) {
              if (t && t != a.c_id) return;
              if (n && n != a.thread_ts) return;
              if (!(i = TS.shared.getModelObById(a.c_id))) return;
              if (!(r = TS.utility.msgs.getMsg(s, i.msgs))) return;
              i.is_im ? TS.ims.removeMsg(i.id, r) : i.is_mpim ? TS.mpims.removeMsg(i.id, r) : i.is_channel ? TS.channels.removeMsg(i.id, r) : i.is_group && TS.groups.removeMsg(i.id, r), delete TS.utility.msgs.ephemeral_msgs_map[s];
            }
          });
        },
        hasImgs: function(e) {
          if (!e) return !1;
          if (e.img_vids) _.forOwn(e.img_vids, function(e) {
            if ("img" === e.img_vid_type) return !0;
          });
          else if (e.attachments)
            for (var t = 0; t < e.attachments.length; t += 1)
              if (e.attachments[t].image_url) return !0;
          return !1;
        },
        ingestMessagesFromBootData: function(e) {
          if (TS.boot_data.msgs) {
            var t = TS.boot_data.msgs[e.id],
              n = [];
            if (t)
              for (var i, r = 0; r < t.length; r += 1) i = t[r], i.ts && n.push(TS.utility.msgs.processImsg(i, e.id));
            TS.utility.msgs.setMsgs(e, n);
          }
        },
        handleSearchHighlights: function(e) {
          return TS.format.replaceHighlightMarkers(e, '<span class="match">', "</span>");
        },
        findAllMsgsBySubtype: function(e) {
          var t, n, i, r = TS.shared.getAllModelObsForUser(),
            a = {};
          for (t = 0; t < r.length; t += 1)
            if (i = r[t], i.msgs)
              for (n = 0; n < i.msgs.length; n += 1) e == i.msgs[n].subtype && (a[i.name] = a[i.name] || {
                id: i.id
              }, a[i.name]["msg_index_" + n] = i.msgs[n]);
          TS.info(JSON.stringify(a, null, "\t"));
        },
        handleFailedMsgSend: function(e, t, n) {
          var i = TS.utility.msgs.getMsg(e, t.msgs);
          if (i) {
            var r, a;
            n && i.thread_ts && (r = TS.utility.msgs.findMsg(i.thread_ts, t.id), a = i._was_reply_broadcast), t.is_mpim ? (TS.mpims.removeMsg(t.id, i), n && TS.mpims.sendMsg(t.id, TS.format.unFormatMsg(i.text, i), r, a)) : t.is_channel ? (TS.channels.removeMsg(t.id, i), n && TS.channels.sendMsg(t.id, TS.format.unFormatMsg(i.text, i), r, a)) : t.is_group ? (TS.groups.removeMsg(t.id, i), n && TS.groups.sendMsg(t.id, TS.format.unFormatMsg(i.text, i), r, a)) : (TS.ims.removeMsg(t.id, i), n && TS.ims.sendMsg(t.id, TS.format.unFormatMsg(i.text, i), r, a)), delete TS.model.unsent_msgs[i.ts], delete TS.model.display_unsent_msgs[i.ts];
          } else TS.error("no msg?: " + e);
        },
        msgMightBeRolledUp: function(e) {
          return e.subtype && -1 != TS.model.join_leave_subtypes.indexOf(e.subtype);
        },
        msgRollUpWorker: function(e, t, n, i) {
          if (delete t._jl_rollup_hash, delete t._jl_rolled_up_in, TS.utility.msgs.msgMightBeRolledUp(t)) {
            if (i.push(t), 0 !== e && TS.utility.msgs.msgMightBeRolledUp(n[e - 1])) return "continue";
            i[0]._jl_rollup_hash = {
              msg_ids: [],
              users: {}
            };
            for (var r, a = i[0]._jl_rollup_hash, s = 0; s < i.length; s += 1) {
              r = i[s], a.users[r.user] = a.users[r.user] || {};
              var o = a.users[r.user];
              a.msg_ids.push(r.ts), r._jl_rolled_up_in = i[0].ts, "channel_join" === r.subtype || "group_join" === r.subtype ? (o.inviter = r.inviter, o.joined = !0, o.is_in = !0) : "channel_leave" !== r.subtype && "group_leave" !== r.subtype || (o.left = !0, o.is_in = !1);
            }
            return "swap";
          }
        },
        shouldHaveBotLabel: function(e, t) {
          var n = e.subtype && "bot_message" === e.subtype && "USLACKBOT" !== e.user,
            i = t && t.is_bot && !t.is_slackbot;
          return n || i;
        },
        checkConsistencyViaApi: function(e) {
          if (TS.boot_data.feature_msg_consistency && TS.model.ms_connected) {
            var t = TS.shared.getModelObById(e);
            if (t && t.msgs && t.msgs.length && !(t.is_archived || t.history_is_being_fetched || t._consistency_has_been_checked || t._consistency_is_being_checked)) {
              var n = TS.utility.msgs.getOldestValidTs(t);
              if (n) {
                var i = TS.utility.msgs.getMostRecentValidTs(t),
                  a = "checkConsistencyViaApi for: " + e;
                t._consistency_is_being_checked = !0;
                var s = {
                  channel: t.id,
                  oldest: n,
                  count: 1e3,
                  inclusive: !0,
                  ignore_replies: !0,
                  include_pin_count: !!TS.boot_data.feature_lazy_pins
                };
                i && (s.latest = i), TS.has_pri[d] && TS.log(d, a + ", range = " + s.oldest + " -> " + (s.latest || "now")), TS.api.call(TS.shared.getHistoryApiMethodForModelOb(t), s).then(function(n) {
                  TS.utility.msgs.checkConsistency(e, n.data.messages) ? (r += 1, TS.metrics.store("inconsistent_history_cnt", r, {
                    is_count: !0
                  }), TS.error(a + " NOT GOOD!")) : (t._consistency_has_been_checked = !0, TS.has_pri[d] && TS.log(d, a + " all good!"));
                }).catch(function(e) {
                  TS.error(a + " err:" + e);
                }).finally(function() {
                  t._consistency_is_being_checked = !1;
                });
              }
            }
          }
        },
        checkConsistency: function(e, t) {
          var n = TS.shared.getModelObById(e);
          if (n && n.msgs && n.msgs.length) {
            var i = [],
              r = "checkConsistency for: " + e;
            return TS.has_pri[d] && TS.log(d, r + " from_msgs.length:" + t.length + " model_ob.msgs.length:" + n.msgs.length), (t.forEach(function(t, a) {
              TS.utility.msgs.getMsg(t.ts, n.msgs) || (t = TS.utility.msgs.processImsg(t, e), i.push(t), TS.error(r + " found and fixed an inconsistency at i:" + a + ", ts=" + t.ts));
            }), i.length) ? (1 == i.length ? n.is_mpim ? TS.mpims.addMsg(e, i[0]) : n.is_group ? TS.groups.addMsg(e, i[0]) : n.is_im ? TS.ims.addMsg(e, i[0]) : n.is_channel && TS.channels.addMsg(e, i[0]) : TS.shared.addMsgs(n, i), !0) : !1;
          }
        },
        filterHTMLForEmbeds: function(e) {
          if (!e) return e;
          var n, r, a = new DOMParser,
            s = a.parseFromString(e, "text/html") || a.parseFromString(e, "text/xml"),
            o = "";
          return s && (r = $(s.body)), r ? (r && (n = r.find(i), n.length && (o = TS.utility.sanitizeHTML(n.first()[0].outerHTML, t, TS.utility.msgs.allowed_embed_attributes))), a = null, s = null, r = null, n = null, o) : e;
        },
        areMsgsSameDay: function(e, t) {
          var n = TS.interop.datetime.toDateObject(e.ts),
            i = TS.interop.datetime.toDateObject(t.ts);
          return TS.interop.datetime.isSameDay(n, i);
        },
        maybeCalcUnreadCnts: function(e) {
          if (TS.client && TS.client._should_defer_initial_msg_history) {
            if (!e) return void TS.warn("maybeCalcUnreadCnts: WTF no model_ob?");
            if (e._needs_unread_recalc && 1 == e.unread_cnt) {
              var t = TS.shared.getControllerForModelOb(e);
              if (!t) return void TS.warn("maybeCalcUnreadCnts: WTF no controller for id " + e.id + "?");
              t.calcUnreadCnts(e, !1), e._needs_unread_recalc = !1;
            }
          }
        },
        maybeSetPrevLastRead: function(e, t) {
          if (e) {
            t != TS.utility.msgs.getMostRecentValidTs(e) ? TS.utility.msgs.setPrevLastRead(e, t) : TS.utility.msgs.setPrevLastRead(e, e.last_read);
          }
        },
        setPrevLastRead: function(e, t) {
          if (e)
            if (e._prev_last_read || !e.unread_cnt || TS.notifs.isCorGMuted(e.id)) {
              var n = TS.utility.msgs.getMostRecentValidTs(e),
                i = TS.utility.msgs.getMsg(n, e.msgs);
              i && "pinned_item" === i.subtype && (e._prev_last_read = t);
            } else e._prev_last_read = t;
        },
        maybeClearPrevLastRead: function(e) {
          (e = e || TS.shared.getActiveModelOb()) && e._prev_last_read && (e._prev_last_read = void 0);
        },
        maybeClearUsersCountsInfo: function(e) {
          e && TS.shared.getUserCountsInfoById(e.id) && (TS.has_pri[c] && TS.log(c, "Deleting users_counts_info for " + e.id), TS.shared.deleteUserCountsInfoForId(e.id));
        },
        isMsgReply: function(e) {
          return !!e && (e.thread_ts && e.thread_ts != e.ts);
        },
        msgHasReplies: function(e) {
          return !!e && (e.ts === e.thread_ts && !!e.reply_count);
        },
        userRepliedToMsg: function(e) {
          return !(!e || !e.replies) && !!_.find(e.replies, function(e) {
            return e.user === TS.model.user.id;
          });
        },
        startUpdatingRelativeTimestamps: function(e) {
          s.start(e);
        },
        stopUpdatingRelativeTimestamps: function(e) {
          s.stop(e);
        },
        shouldHideChannelJoinOrLeaveMsg: function(e, t) {
          if (!TS.boot_data.feature_hide_join_leave) return !1;
          var n = TS.members.getMemberById(e.user),
            i = _.get(n, "is_bot", !1);
          if ("channel_join" === e.subtype || "member_joined_channel" === e.type) {
            var r = _.isObject(t) ? t : TS.channels.getChannelById(t);
            if (!r) return !1;
            var a, s = _.includes(TS.model.team.prefs.default_channels, r.id),
              o = !!e.inviter;
            if (TS.membership && TS.membership.lazyLoadChannelMembership()) {
              if (a = r.num_members, _.isUndefined(r.num_members)) {
                var l = TS.membership && TS.membership.getMembershipCounts(r);
                l.counts && (a = _.get(l, "counts.member_count"));
              }
            } else a = _.get(r, "members.length");
            var d = !_.isUndefined(a) && a > 20;
            if (!i && !s && !o && d) return !0;
          } else if (("channel_leave" === e.subtype || "member_left_channel" === e.type) && !i) return !0;
          return !1;
        },
        extractMsgDisplayContext: function(e) {
          var t = e.closest("#unread_msgs_div, #sli_briefing");
          return t.is("#unread_msgs_div") ? "all_unreads" : t.is("#sli_briefing") ? "briefing" : null;
        },
        extractLinkType: function(e, t, n) {
          return t.data("member-id") || e.data("member-id") ? "user" : t.data("channel-id") || e.data("channel-id") ? "channel" : t.data("file-id") || e.data("file-id") ? "file" : n && n.match(/\.slack\.com\/archives\//) ? "message" : n && !TS.utility.url.getHostName(n).match(/\.slack\.com/) ? "external" : "internal";
        },
        extractLinkItemId: function(e, t, n) {
          return "user" === n ? t.data("member-id") || e.data("member-id") : "channel" === n ? t.data("channel-id") || e.data("channel-id") : "file" === n ? t.data("file-id") || e.data("file-id") : null;
        },
        extractLinkAction: function(e, t) {
          return t.hasClass("file_preview_action") ? t.hasClass("file_ssb_download_link") ? "file_ssb_download_link" : t.hasClass("file_new_window_link") ? "file_new_window_link" : t.hasClass("file_comment_link") ? "file_comment_link" : "file_preview_action" : e.hasClass("file_viewer_external_link") ? "file_viewer_external_link" : e.hasClass("file_viewer_link") ? "file_viewer_link" : t.hasClass("file_preview_link") ? "file_preview_link" : t.hasClass("file_header") ? "file_header" : t.parent() && t.parent().hasClass("rest_text_expander") ? "rest_text_expander" : null;
        },
        extractLinkAttachmentField: function(e) {
          var t = e.parent();
          return t.hasClass("attachment_source_icon") ? "attachment_source_icon" : t.hasClass("attachment_source_name") ? "attachment_source_name" : t.hasClass("attachment_author_name") ? "attachment_author_name" : t.hasClass("attachment_title") ? "attachment_title" : null;
        },
        isRawLink: function(e, t) {
          if (!e || !t) return !1;
          if (!e.is("a")) return !1;
          var n = t.replace(/(^\w+:|^)\/\//, "");
          return e.text() === t || e.text() === n;
        },
        charsOverLimit: function(e) {
          if (e.length <= TS.model.input_maxbytes / 4) return 0;
          for (var t = 0, n = [], i = 0, r = 0; r < e.length; r++) {
            var a = e.charCodeAt(r);
            if ((a < 55296 || a > 57343) && (n.push(a), t += TS.utility.bytesInUnicodeCodePoint(a)), a >= 56320 && a <= 57343 && (n.push(65533), t += 1), a >= 55296 && a <= 56319)
              if (r == e.length - 1) n.push(65533), t += 1;
              else {
                var s = e.charCodeAt(r + 1);
                if (s >= 56320 && s <= 57343) {
                  var o = 1023 & a,
                    l = 1023 & s,
                    d = 66560 + o + l;
                  n.push(d), t += TS.utility.bytesInUnicodeCodePoint(d), r += 1;
                } else n.push(65533), t += 1;
              }
            t <= TS.model.input_maxbytes && (i = n.length);
          }
          return n.length - i;
        },
        getUnreadMsgTimestampsWithoutHighlights: function(e) {
          if (!e || !e.unread_cnt) return [];
          var t = parseFloat(e.last_read);
          return _.reduce(e.msgs, function(n, i) {
            return parseFloat(i.ts) > t && !TS.client.highlights.msgIsHighlight(e.id, i.ts) && !TS.client.highlights.isMsgBeingRequested(e.id, i.ts) && (n[i.ts] = !0), n;
          }, {});
        }
      });
      var e = !1,
        t = ["video", "iframe", "source"],
        i = t.join(","),
        r = 0,
        a = {},
        s = function() {
          function e(e) {
            _.includes(r, e) || (r.push(e), null === i && (i = setInterval(n, 6e4)));
          }

          function t(e) {
            _.pull(r, e), r.length || (clearInterval(i), i = null);
          }

          function n() {
            _.forEach(r, function(e) {
              $(e).find(".relative_ts").each(function() {
                var e = $(this).attr("data-ts"),
                  t = $(this).data("really-short"),
                  n = TS.interop.datetime.toTimeAgo(e, {
                    compact: t
                  });
                n !== $(this).text() && $(this).text(n);
              });
            });
          }
          var i = null,
            r = [];
          return {
            start: e,
            stop: t
          };
        }(),
        o = 67,
        l = 667,
        d = 773,
        c = 888;
    }();
  },
  2671: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";
      TS.registerModule("utility.number", {
        onStart: function() {},
        formatNumberWithAbbreviation: function(e, t) {
          if (isNaN(e)) return void TS.error("Expected input to be a string, got: " + (void 0 === e ? "undefined" : n(e)));
          if (e < 999) return String(e);
          t = t || {};
          var i, r = TS.i18n.locale(),
            a = TS.i18n.number_abbreviations[r] || TS.i18n.number_abbreviations["en-US"];
          switch (_.get(t, "abbreviation")) {
            case "K":
              i = 3;
              break;
            case "M":
              i = 6;
              break;
            case "B":
              i = 9;
              break;
            case "T":
              i = 12;
              break;
            default:
              var s = Math.floor(parseFloat((Math.log(e) / Math.LN10).toPrecision(12)));
              i = s >= 12 ? 12 : s >= 9 ? 9 : s >= 6 ? 6 : s >= 3 ? 3 : 0;
          }
          var o = e / Math.pow(10, i);
          if (!_.includes(String(o), ".")) return o + a[i];
          var l = _.get(t, "precision", 4);
          return (l > 21 || l < 1 || isNaN(l)) && (TS.warn("Precision must be a value between 1 and 21. Formatting with default precision (4) instead."), l = 4), parseFloat(o.toPrecision(l)) + a[i];
        },
        formatNumberToDecimalPlace: function(e, t) {
          if (isNaN(e) || isNaN(t)) return TS.warn("Input must be a number."), e;
          var n = e.toFixed(t),
            i = TS.i18n.locale(),
            r = _.get(TS.i18n.locales_number_formatting[i], "decimal_symbol", TS.i18n.locales_number_formatting.default.decimal_symbol);
          return n.replace(".", r);
        }
      });
    }();
  },
  2672: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.process_nicely", {
        process: function(e, t, n, i, r, a) {
          _.isUndefined(r) && (r = a ? e.length - 1 : 0);
          var s = a ? -1 : e.length,
            o = a ? -1 : 1;
          return new Promise(function(l, d) {
            var c, _ = performance.now();
            try {
              for (t(), c = r; c !== s; c += o) {
                n(e[c]);
                if (performance.now() - _ > 10) break;
              }
            } catch (e) {
              return void d(e);
            } finally {
              i();
            }
            if (!(c + 1 < s)) return void l();
            setTimeout(function() {
              TS.utility.process_nicely.process(e, t, n, i, c + 1, a).then(l).catch(d);
            }, 0);
          });
        },
        processRight: function(e, t, n, i, r) {
          return TS.utility.process_nicely.process(e, t, n, i, r, !0);
        }
      });
    }();
  },
  2673: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.search", {
        test: function() {
          return {
            _fetchMembersFromFlannel: i
          };
        },
        makeClause: function(t, n, i) {
          if (!e(t, n, i)) {
            var r = {
              type: t.toLowerCase(),
              value: n
            };
            return i && (r.field_id = i), r;
          }
        },
        makeConjunction: function(e, n) {
          if (!t(e, n)) return {
            type: e.toLowerCase(),
            clauses: n
          };
        },
        promiseToSearch: function(e) {
          if (!e || !e.query) return Promise.reject(new Error("cannot search without arguments and a query"));
          if (e.all_of_org && !TS.boot_data.page_needs_enterprise) return Promise.reject(new Error("cannot search an org when not an enterprise team"));
          if (TS.lazyLoadMembersAndBots()) {
            if (!e.hasOwnProperty("raw_query")) return Promise.reject(new Error("Flannel searches require a `raw_query` to be provided"));
            var t, a = e.raw_query,
              s = e.count || 1 / 0;
            return t = _.isEmpty(e.raw_query) ? Promise.resolve([]) : i(e.raw_query, s, e.determine_membership_for_channel), t.then(function(t) {
              var n = t.objects;
              if (!e.include_bots) {
                var i = _.remove(n, {
                  is_bot: !0
                });
                i.length && TS.has_pri[r] && TS.log(r, "Flannel: removed these bots from results:", i);
              }
              if (e.exclude_slackbot && e.include_bots) {
                var o = _.remove(n, {
                  is_slackbot: !0
                });
                o.length && TS.has_pri[r] && TS.log(r, "Flannel: removed slackbot from results:", o);
              }
              if (TS.boot_data.page_needs_enterprise && !e.all_of_org) {
                var l = _.remove(n, function(e) {
                  var t = _.get(e, "enterprise_user.teams", []);
                  return !_.includes(t, TS.model.team.id);
                });
                l.length && TS.has_pri[r] && TS.log(r, "Flannel: removed these org members from results:", l);
              }
              if (!e.include_deleted) {
                var d = _.remove(n, {
                  deleted: !0
                });
                d.length && TS.has_pri[r] && TS.log(r, "Flannel: removed these deleted members from results:", d);
              }
              return n = _.intersection(TS.members.getMembersForUser(), n), {
                ok: !0,
                data: {
                  items: n.slice(0, s),
                  next_cursor_mark: null,
                  num_found: n.length,
                  teams: [TS.model.team]
                },
                args: {
                  query: a
                }
              };
            });
          }
          var o = {
            query: JSON.stringify(e.query)
          };
          ["sort", "sort_direction", "count", "cursor_mark", "include_bots", "include_deleted", "exclude_slackbot"].forEach(function(t) {
            e.hasOwnProperty(t) && (o[t] = e[t]);
          });
          var l = e.endpoint;
          return l || (l = e.all_of_org ? "search.enterprise" : "search.team"), TS.api.call(l, o).catch(n);
        }
      });
      var e = function(e, t, n) {
          return e ? t ? void("custom" !== e || n || TS.error("cannot make a custom type clause without a field id")) : void TS.error("cannot make a clause without a value") : void TS.error("cannot make a clause without a type");
        },
        t = function(e, t) {
          if (!e) return void TS.error("cannot make a conjunction without an 'and' or 'or' type");
          (!t || t.length < 2) && TS.error("cannot make a conjunction without at least two clauses");
        },
        n = function(e) {
          throw TS.error(e.data.error + " error occured while searching"), TS.generic_dialog.alert(TS.i18n.t("Sorry! Something went wrong. Please try again.", "utility_search")()), e;
        },
        i = function(e, t, n) {
          var i = {
              query: e,
              count: t
            },
            r = TS.flannel.fetchAndUpsertObjectsWithQuery(i);
          if (!TS.membership.lazyLoadChannelMembership() || !n) return r;
          var a = _.assign({
              channels: [n]
            }, i),
            s = TS.flannel.fetchAndUpsertObjectsWithQuery(a);
          return Promise.join(r, s).then(function(e) {
            var t = e[0],
              i = e[1],
              r = _.map(t.objects, "id"),
              a = _.map(i.objects, "id"),
              s = TS.shared.getModelObById(n);
            return a.forEach(function(e) {
              TS.membership.setUserChannelMembership(e, s, !0);
            }), _.difference(r, a).forEach(function(e) {
              TS.membership.setUserChannelMembership(e, s, !1);
            }), t;
          });
        },
        r = 1989;
    }();
  },
  2674: function(e, t) {
    ! function() {
      "use strict";

      function e() {
        return _.cloneDeep(TS.members.getMemberById("USLACKBOT"));
      }

      function t(e, t) {
        switch (t) {
          case "sad_surprise":
            e.profile.image_20 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_20.png", e.profile.image_24 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_24.png", e.profile.image_32 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_32.png", e.profile.image_36 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_36.png", e.profile.image_48 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_48.png", e.profile.image_72 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_72.png", e.profile.image_192 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_192.png", e.profile.image_512 = cdn_url + "/c6db/img/slackbot/slackbot_sad_surprise_512.png";
            break;
          case "fancy":
            e.profile.image_20 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_20.png", e.profile.image_24 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_24.png", e.profile.image_32 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_32.png", e.profile.image_36 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_36.png", e.profile.image_48 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_48.png", e.profile.image_72 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_72.png", e.profile.image_192 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_192.png", e.profile.image_512 = cdn_url + "/c6db/img/slackbot/slackbot_fancy_512.png";
            break;
          default:
            TS.warn("Slackbot doesn't have an avatar for that feeling.");
        }
      }
      TS.registerModule("utility.slackbot", {
        getWithFeels: function(n) {
          var i = e();
          if (i && i.profile) return t(i, n), i;
        }
      });
    }();
  },
  2675: function(e, t) {
    var n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
      return typeof e;
    } : function(e) {
      return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
    };
    ! function() {
      "use strict";

      function e(e, t) {
        var n = TS.model.team.id;
        _.remove(t, function(t) {
          var i = _.find(e.messages.matches, function(e) {
              return e.channel.id == t;
            }, this),
            r = _.get(i, "channel.is_shared") || _.get(i, "channel.is_org_shared");
          if (i && _.get(i, "team") != n && _.startsWith(t, "C") && !r) return t;
        });
      }
      TS.registerModule("utility", {
        onStart: function() {
          TS.utility.makeRefererSafeLink = _.memoize(TS.utility.makeRefererSafeLink), TS.useSocket() && (TS.isSocketManagerEnabled() ? TS.interop.SocketManager.connectedSig.add(TS.utility.resetRefererSafeLinkCache) : TS.ms.connected_sig.add(TS.utility.resetRefererSafeLinkCache)), TS.prefs && TS.prefs.team_hide_referers_changed_sig && TS.prefs.team_hide_referers_changed_sig.add(TS.utility.resetRefererSafeLinkCache), i = TS.i18n.t("me", "utility")(), r = TS.i18n.t("you", "utility")();
        },
        keymap: {
          alt: 18,
          ctrl: 17,
          cmd_ff: 224,
          cmd_other: 91,
          cmd_right: 93,
          esc: 27,
          shift: 16,
          tab: 9,
          del: 8,
          delete: 46,
          enter: 13,
          left: 37,
          up: 38,
          right: 39,
          down: 40,
          pageup: 33,
          pagedown: 34,
          end: 35,
          home: 36,
          space: 32,
          semicolon: 59,
          equals_sign: 187,
          minus_sign: 189,
          comma: 188,
          period: 190,
          left_square_bracket: 219,
          right_square_bracket: 221,
          V: 86,
          a: 65,
          e: 69,
          b: 66,
          k: 75,
          i: 73,
          z: 90,
          y: 89,
          insert: 45
        },
        email_regex: new RegExp("^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$", "i"),
        regexpEscape: function(e, t) {
          return t = Math.min(t || 5e5, 5e5), e.length > t && (e = e.slice(0, t)), _.escapeRegExp(e);
        },
        ensureInArray: function(e, t) {
          return !(e.indexOf(t) > -1) && (e.push(t), !0);
        },
        compareVersions: function(e, t) {
          return e.major || (e.major = 0), e.minor || (e.minor = 0), t.major || (t.major = 0), t.minor || (t.minor = 0), e.major === t.major ? e.minor == t.minor ? 0 : e.minor > t.minor ? 1 : -1 : e.major > t.major ? 1 : -1;
        },
        makeComparableVersion: function(e) {
          var t = e.split("-")[0];
          return _.reduce(t.split("."), function(e, t) {
            return 1e3 * e + parseInt(t, 10);
          }, 0);
        },
        compareSemanticVersions: function(e, t) {
          var n = TS.utility.makeComparableVersion(e),
            i = TS.utility.makeComparableVersion(t);
          return n === i ? 0 : n > i ? 1 : -1;
        },
        isAppVersionBefore: function(e) {
          return !!TS.model.is_our_app && -1 === TS.utility.compareSemanticVersions(TS.model.desktop_app_version.major + "." + TS.model.desktop_app_version.minor + "." + TS.model.desktop_app_version.patch, e);
        },
        doRectsOverlap: function(e, t) {
          return !(t.left > e.right || t.right < e.left || t.top > e.bottom || t.bottom < e.top);
        },
        doesRectContainRect: function(e, t, n, i) {
          return n = n || 0, !(t.top < e.top - n) && (!(t.bottom > e.bottom + n) && (!!i || !(t.left < e.left - n) && !(t.right > e.right + n)));
        },
        shouldLinksHaveTargets: function() {
          return !!(TS.client || TS.web && TS.web.space);
        },
        parseJSONOrElse: function(e, t) {
          if ("" === e) return t;
          try {
            return JSON.parse(e);
          } catch (e) {
            return t;
          }
        },
        stringifyJSONOrElse: function(e, t, n, i) {
          try {
            return JSON.stringify(e, t, n);
          } catch (e) {
            return "function" == typeof i ? i(e) : i;
          }
        },
        ordinalNumber: function(e) {
          return TS.i18n.t("{number_str, selectordinal, one{#st}two{#nd}few{#rd}other{#th}}", "utilities")({
            number_str: e.toString()
          });
        },
        getChannelStringIdentifierForUrl: function(e) {
          var t = e.id,
            n = e.name,
            i = e.is_im;
          return (TS.boot_data.feature_shared_channels_client || TS.boot_data.feature_name_tagging_client) && (i || e.is_mpim) ? t : e.is_channel || e.is_group ? t : i ? "@" + n : n;
        },
        getChannelNameFromUrl: function(e) {
          var t = TS.utility.getPathFromSlackUrl(e);
          return t && ("messages" == t[0] || "archives" == t[0]) ? decodeURIComponent(t[1]) : "";
        },
        getMessageTimestampFromUrl: function(e) {
          var t = TS.utility.getPathFromSlackUrl(e);
          if (!t) return "";
          if ("messages" != t[0] && "archives" != t[0]) return "";
          var n = t[2];
          return n && "p" == n[0] && 17 == n.length ? (n = n.substr(1, 10) + "." + n.substr(11), decodeURIComponent(n)) : "";
        },
        getFlexNameFromUrl: function(e) {
          var t = TS.utility.getPathFromSlackUrl(e);
          if (!t) return "";
          var n = {
              messages: !0,
              archives: !0
            }[t[0]],
            i = n ? 2 : 1,
            r = t[i];
          return r ? decodeURIComponent(r) : "";
        },
        getFlexExtraFromUrl: function(e) {
          var t = TS.utility.getPathFromSlackUrl(e);
          if (!t) return "";
          var n = {
              messages: !0,
              archives: !0
            }[t[0]],
            i = n ? 3 : 2,
            r = t[i];
          return r ? decodeURIComponent(r).replace(/%2F/g, "/") : "";
        },
        isUnreadViewPath: function(e) {
          return 0 === e.indexOf("/unreads");
        },
        isThreadsViewPath: function(e) {
          return 0 === e.indexOf("/threads");
        },
        isAppSpaceViewPath: function(e) {
          return 0 === e.indexOf("/app-space");
        },
        getPathFromSlackUrl: function(e) {
          var t = e.match(S),
            n = t && t[1];
          if (n) {
            return (n + e.split(n)[1].split("?")[0]).split("/");
          }
        },
        refashionUrl: function(e, t, n, i) {
          var r = e.split(/\.com\/+(messages|unreads|threads|app-space)/),
            a = r[0] + ".com",
            s = r[2].split("?"),
            o = s[1] ? "?" + s[1] : "";
          return a + ([t, n, i].filter(function(e) {
            return e;
          }).join("/") + "/") + o;
        },
        dataURItoBlob: function(e) {
          return TS.utility.base64StrtoBlob(TS.utility.base64StrFromDataURI(e));
        },
        base64StrFromDataURI: function(e) {
          return e.split(",")[1];
        },
        base64StrtoBlob: function(e) {
          for (var t = atob(e), n = new ArrayBuffer(t.length), i = new Uint8Array(n), r = 0; r < t.length; r += 1) i[r] = t.charCodeAt(r);
          var a = new DataView(n);
          return new Blob([a]);
        },
        ellipsize: function(e, t) {
          if (!e) return e;
          if (t && parseInt(t, 10) || (t = 50), e.length > t) {
            e = e.substr(0, t / 2) + "..." + e.substr(-t / 2, e.length);
          }
          return e;
        },
        makeSafeForDomId: function(e) {
          return String(e).replace(/\./g, "_");
        },
        makeSafeForDomClass: function(e) {
          return e.replace(/\s/g, "_");
        },
        getImageIconClass: function(e, t) {
          var n = t;
          return e && (e.thumb_360_w < 80 || e.thumb_360_h < 80) && (n = e.thumb_360_w > e.thumb_360_h ? "landscape" : e.thumb_360_w < e.thumb_360_h ? "portrait" : "square"), n;
        },
        getAppliedClasses: function(e) {
          return _.reduce(e, function(e, t, n) {
            return t && e.push(n), e;
          }, []).join(" ");
        },
        convertFilesize: function(e, t, n) {
          if (0 === e) return n ? "0 bits" : "0 bytes";
          var i = n ? 1024 : 1e3;
          if (Math.abs(e) < i) return e + "B";
          var r = n ? ["KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"] : ["kB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
            a = -1;
          do {
            e /= i, a += 1;
          } while (Math.abs(e) >= i && a < r.length - 1);
          return t ? e.toFixed(t) + r[a] : Math.round(e) + r[a];
        },
        numberWithCommas: function(e) {
          var t = TS.i18n.locale(),
            n = TS.i18n.locales_number_formatting[t] || TS.i18n.locales_number_formatting.default;
          if (void 0 === e || null === e) return "";
          var i = e.toString().split(".");
          return i[0] = i[0].replace(/\B(?=(\d{3})+(?!\d))/g, n.thousands_separator), i.join(n.decimal_symbol);
        },
        numberWithK: function(e) {
          return e > 999 ? (e = Math.round(e / 1e3 * 10) / 10, TS.utility.numberWithCommas(e) + "K") : TS.utility.numberWithCommas(e);
        },
        cleanChannelName: function(e) {
          var t = XRegExp("[^\\pL\\pM\\pN_-]+", "g"),
            n = XRegExp("[\\pM\\pM\\pM]", "g"),
            i = /^[-_]+?$/;
          return e = e.toLowerCase(), e = e.replace(/^#+/g, ""), e = e.replace(/ /g, "-"), e = e.replace(t, "_"), e = e.replace(/-+/g, "-"), e = e.replace(/_+/g, "_"), i.test(e) || n.test(e) ? null : e;
        },
        openInNewTab: function(e, t) {
          if (0 === e.indexOf("/") && TS.boot_data.team_url) {
            var n = TS.boot_data.team_url;
            n = n.substr(0, n.length - 1), e = n + e;
          }
          var i = e,
            r = "",
            a = i.indexOf("?"),
            s = TS.utility.urlNeedsRefererHiding(e);
          if (-1 !== a) {
            s && (e = _.escape(e.substring(0, a)));
            var o = i.substring(a + 1, i.length);
            if (i = i.substring(0, a), o.length) {
              var l = TS.utility.url.queryStringParse(o);
              _.forEach(l, function(t, n) {
                s ? e = TS.utility.url.setUrlQueryStringValue(e, n, t || "") : r += '<input type="hidden" name="' + _.escape(n) + '" value="' + _.escape(t || "") + '">';
              });
            }
          }
          s && (r = '<input type="hidden" name="url" value="' + _.escape(e) + '">', i = "https://" + TS.boot_data.redir_domain + "/link"), $("<form>" + r + "</form>").attr({
            method: "GET",
            action: i,
            target: t
          }).appendTo("body").submit().remove();
        },
        isScalar: function(e) {
          return /boolean|number|string/.test(void 0 === e ? "undefined" : n(e));
        },
        sanitizeHTML: function(e, n, i, r) {
          t = t || new DOMParser;
          var a = t.parseFromString(e, "text/html") || t.parseFromString(e, "text/xml"),
            s = a.body;
          if (1 != s.children.length) return "";
          var o = function e(t) {
            var r = t.tagName.toLowerCase();
            return n.indexOf(r) < 0 ? null : (Array.prototype.slice.apply(t.attributes).forEach(function(e) {
              i.indexOf(e.name) < 0 && t.attributes.removeNamedItem(e.name);
            }), Array.prototype.slice.apply(t.children).forEach(function(n) {
              e(n) || t.removeChild(n);
            }), t);
          }(s.children[0]);
          return s = null, a = null, o ? r ? o : o.outerHTML : "";
        },
        getChildTextNodes: function(e) {
          var t = [];
          if (!e) return t;
          if (e instanceof Text) return t.push(e), t;
          for (var n = document.createTreeWalker(e, NodeFilter.SHOW_TEXT, null, !1), i = n.nextNode(); i;) t.push(i), i = n.nextNode();
          return t;
        },
        getAttributesFromHTMLString: function(e) {
          t = t || new DOMParser;
          var n = t.parseFromString(e, "text/html") || t.parseFromString(e, "text/xml"),
            i = n.body;
          if (1 != i.children.length) return {};
          var r = {};
          return [].slice.apply(i.children[0].attributes).forEach(function(e) {
            r[e.name] = e.value;
          }), i = null, n = null, r;
        },
        findUrls: function(e) {
          return e.match(m) || [];
        },
        linkify: function(e, t, n, i) {
          return e ? e = e.replace(m, function(e) {
            var r;
            if (0 === e.toLowerCase().indexOf("www.")) {
              if (!n) return e;
              r = "http://" + e;
            } else r = e;
            return i ? "<" + r + "|" + e + ">" : "<a " + TS.utility.makeRefererSafeLink(r) + ' target="' + (t || "") + '">' + e + "</a>";
          }) : e;
        },
        linkifyInternal: function(e, t) {
          return TS.utility.linkify(e, "", t, !0);
        },
        getCursorPosition: function(e) {
          if (TS.utility.contenteditable.supportsTexty()) return _.isString(e) && (e = $(e)), TS.utility.contenteditable.cursorPosition(e);
          var t, n, i;
          return t = e instanceof HTMLElement ? e : $(e).get(0), n = {
            start: 0,
            end: 0,
            length: 0
          }, "selectionStart" in t ? (n.start = t.selectionStart, n.end = t.selectionEnd, n.length = Math.abs(t.selectionEnd - t.selectionStart)) : "selection" in document && (t.focus(), i = document.selection.createRange(), n.length = document.selection.createRange().text.length, i.moveStart("character", -t.value.length), n.start = i.text.length - n.length, n.end = n.start + n.length), n;
        },
        setCursorPosition: function(e, t, n) {
          if (TS.utility.contenteditable.supportsTexty()) return _.isString(e) && (e = $(e)), TS.utility.contenteditable.cursorPosition(e, t, n);
          var i, r;
          (i = $(e).get(0)) && (i.setSelectionRange ? (i.focus(), n ? i.setSelectionRange(t, t + n) : i.setSelectionRange(t, t)) : i.createTextRange && (r = i.createTextRange(), n ? (r.moveStart("character", t), r.moveEnd("character", n - t)) : r.move("character", t), r.select()));
        },
        preg_quote: function(e) {
          return (e + "").replace(/([\\.+*?[^\]$(){}=!<>|:])/g, "\\$1");
        },
        getActiveElementProp: function(e) {
          return document.activeElement ? "NODENAME" === e ? document.activeElement.nodeName ? document.activeElement.nodeName.toUpperCase() : "" : document.activeElement[e] : "";
        },
        isTabCompleteShowing: function() {
          if (!TS.utility.isFocusOnInput()) return !1;
          var e = $(document.activeElement);
          return !!e.tab_complete_ui && (!!e.tab_complete_ui("instance") && !(!e.tab_complete_ui("isShowing") && !e.tab_complete_ui("wasJustHidden")));
        },
        isFocusOnInput: function() {
          var e = TS.utility.getActiveElementProp("NODENAME");
          return "" != e && ("INPUT" === e || ("TEXTAREA" === e || ("SELECT" === e || !!TS.utility.contenteditable.isContenteditable(document.activeElement))));
        },
        unformatTopicOrPurpose: function(e) {
          return TS.boot_data.feature_name_tagging_client ? TS.format.unFormatMsg(_.unescape(e)) : e;
        },
        formatTopicOrPurpose: function(e, t) {
          return TS.boot_data.feature_name_tagging_client ? (e = _.unescape(e), e = TS.format.formatWithOptions(e, {}, {
            no_preformatted: !!t
          }), e = e.replace(/(<br[^>]*>)/, '<span class="hidden br_ellipsis">…</span>$1')) : (e = TS.format.unFormatMsg(e), e = TS.format.cleanMsg(e), e = TS.utility.linkifyInternal(e, !0), e = TS.format.formatWithOptions(e, {}, {
            no_preformatted: !!t
          }), e = e.replace(/(<br[^>]*>)/, '<span class="hidden br_ellipsis">…</span>$1'));
        },
        removeLinksFromTabFlow: function(e) {
          return e.replace(T, '$1 tabindex="-1"$2');
        },
        populateInput: function(e, t, n) {
          t || (t = "");
          var i = $(e);
          TS.utility.contenteditable.value(i, t), _.isNumber(n) && TS.utility.contenteditable.cursorPosition(i, n), TS.utility.contenteditable.supportsTexty() || (i.data("textchange_lastvalue", t), i.trigger("autosize").trigger("autosize-resize"), i.trigger("textchange"));
        },
        populateThreadInputs: function(e, t, n) {
          TS.ui.replies.activeConvoModelId() === t && TS.ui.replies.activeConvoThreadTs() === n && TS.ui.replies.populateReplyInput(e), TS.model.threads_view_is_showing && TS.ui.thread.findAndPopulateInput(e, t, n);
        },
        urlNeedsRefererHiding: function(e) {
          if (!e) return !1;
          if (e = e.toLowerCase(), 0 !== e.indexOf("https://") && 0 !== e.indexOf("http://") && 0 !== e.indexOf("ftp://") && 0 !== e.indexOf("sftp://")) return !1;
          e = e.replace(/^https:\/\//, "").replace(/^http:\/\//, "");
          for (var t = getRefererHidingWhiteList(), n = 0; n < t.length; n += 1)
            if (e == t[n] || 0 === e.indexOf(t[n] + "/")) return !1;
          return !0;
        },
        referer_safe_url_map: {},
        makeRefererSafeLink: function(e) {
          if ("string" != typeof e) return void TS.error("Expected url to be a string, got: " + (void 0 === e ? "undefined" : n(e)));
          e = TS.format.replaceHighlightMarkers(e);
          var t = e.replace(/&amp;/g, "&");
          t.match(/javascript:/gi) && (t = "#");
          var i = TS.utility.sanitizeHTML('<a href="' + t + '"></a>', ["a"], ["href"], !0) || null;
          i && (t = i.href), t = _.escape(t), t = t.replace(/&amp;/g, "&"), e && e.lastIndexOf("/") !== e.length - 1 && t && t.lastIndexOf("/") === t.length - 1 && (t = t.slice(0, -1)), t = t || "#";
          var r = 'href="' + t + '"',
            a = "onclick",
            s = c();
          if (TS.model && TS.model.is_our_app || s && s.rewrite_on_right_click && (a = "onmousedown"), !TS.utility.urlNeedsRefererHiding(e)) return r;
          if (TS.utility.externalURLsNeedRedirecting()) {
            var o = encodeURIComponent(t),
              l = "https://" + TS.boot_data.redir_domain + "/link?url=" + o + (s && s.redirect_type ? "&v=" + s.redirect_type : ""),
              d = _.escape(o);
            TS.utility.referer_safe_url_map[d] = t, r += ' data-referer-safe="1" ' + a + '="this.href=&quot;' + l + '&quot;" onmouseover="this.href=TS.utility.referer_safe_url_map[&quot;' + d + '&quot;]" data-referer-original-href="' + t + '" rel="noreferrer"';
          } else r += ' rel="noreferrer"';
          return r;
        },
        resetRefererSafeLinkCache: function() {
          TS.utility.makeRefererSafeLink && TS.utility.makeRefererSafeLink.cache && TS.utility.makeRefererSafeLink.cache.clear();
        },
        makeSureAllExternalLinksAreRefererSafe: function(e) {
          var t = Date.now(),
            n = [];
          TS.utility.externalURLsNeedRedirecting() ? (e.find("a[href]:not([data-referer-safe])").each(function() {
            var e = $(this),
              t = e.attr("href");
            if (TS.utility.urlNeedsRefererHiding(t)) {
              n.push(this.outerHTML), e.removeAttr("href");
              var i = this.outerHTML.replace("<a", function() {
                return "<a " + TS.utility.makeRefererSafeLink(t) + " ";
              });
              e.replaceWith(i), n[n.length - 1] += "\n->\n" + i;
            }
          }), TS.model && TS.model.team && TS.has_pri[b] && TS.boot_data.feature_tinyspeck && (n.length ? (TS.log(b, "#" + e.attr("id") + " had " + n.length + " LINKS WITH EXT HREFS BUT NOT data-referer-safe! to fix it took " + (Date.now() - t) + "ms"), TS.dir(b, n)) : TS.log(b, "#" + e.attr("id") + " had " + n.length + " LINKS WITH EXT HREFS BUT NOT data-referer-safe! to check it took " + (Date.now() - t) + "ms"))) : (e.find("a[href]:not([rel])").each(function() {
            var e = $(this),
              t = e.attr("href");
            0 !== t.indexOf("mailto") && 0 !== t.indexOf("skype") && (t && "#" !== t ? TS.utility.urlNeedsRefererHiding(t) && (n.push(this.outerHTML), e.attr("rel", "noreferrer"), n[n.length - 1] += "\n->\n" + this.outerHTML) : e.removeAttr("href"));
          }), TS.model && TS.model.team && TS.has_pri[b] && TS.boot_data.feature_tinyspeck && (n.length ? (TS.log(b, "#" + e.attr("id") + " had " + n.length + ' LINKS WITH EXT HREFS BUT WITHOUT rel="noreferrer"! to add rel it took ' + (Date.now() - t) + "ms"), TS.dir(b, n)) : TS.log(b, "#" + e.attr("id") + " had " + n.length + ' LINKS WITH EXT HREFS BUT WITHOUT rel="noreferrer"! to check it took ' + (Date.now() - t) + "ms")));
        },
        makeSureAllLinksHaveTargets: function(e) {
          var t = Date.now(),
            n = [];
          e.find("a[href]:not([target])").each(function() {
            var e = $(this),
              t = e.attr("href");
            0 !== t.indexOf("mailto") && 0 !== t.indexOf("skype") && (t && "#" !== t ? (n.push(this.outerHTML), e.attr("target", t), n[n.length - 1] += "\n->\n" + this.outerHTML) : e.removeAttr("href"));
          }), TS.model && TS.model.team && TS.has_pri[b] && TS.boot_data.feature_tinyspeck && (n.length ? (TS.log(b, "#" + e.attr("id") + " had " + n.length + " LINKS WITH HREFS BUT WITHOUT TARGETS! to add targets it took " + (Date.now() - t) + "ms"), TS.dir(b, n)) : TS.log(b, "#" + e.attr("id") + " had " + n.length + " LINKS WITH HREFS BUT WITHOUT TARGETS! to check it took " + (Date.now() - t) + "ms")), TS.utility.makeSureAllExternalLinksAreRefererSafe(e);
        },
        sortTable: function(e, t, n, i, r) {
          function a(e, t) {
            return $(e).children("td").eq(t).attr("data-sort-val");
          }
          n = "desc" === n ? "desc" : "asc", r = "desc" === r ? "desc" : "asc";
          var s = e.find("tr:gt(0)").toArray().sort(function(e) {
            return function(t, s) {
              var o = a(t, e),
                l = a(s, e);
              return $.isNumeric(o) && $.isNumeric(l) ? o == l && i ? (o = a(t, i), l = a(s, i), $.isNumeric(o) && $.isNumeric(l) ? r != n ? l - o : o - l : r != n ? TS.i18n.sorter(l, o) : TS.i18n.sorter(o, l)) : o - l : TS.i18n.sorter(o, l);
            };
          }(t));
          "desc" === n && (s = s.reverse());
          for (var o = 0; o < s.length; o += 1) e.append(s[o]);
        },
        getPercSmartly: function(e, t) {
          if (!e || !t) return "0%";
          var n = e / t * 100;
          return 100 != n && 100 == Math.round(n) ? "99%" : n < .7 ? "<1%" : Math.round(n) + "%";
        },
        isCursorWithinTBTs: function(e) {
          var t = TS.utility.contenteditable.cursorPosition(e),
            n = TS.utility.contenteditable.value(e),
            i = n.substr(0, t.end),
            r = i.match(/```/g);
          return !!r && !!(r.length % 2);
        },
        hex2rgb: function(e) {
          var t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
          return t ? {
            r: parseInt(t[1], 16),
            g: parseInt(t[2], 16),
            b: parseInt(t[3], 16)
          } : void 0;
        },
        rgb2hex: function(e) {
          function t(e) {
            return ("0" + parseInt(e, 10).toString(16)).slice(-2);
          }
          if (/^#[0-9A-F]{6}$/i.test(e)) return e;
          var n = e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
          return n || (n = e.match(/^rgba\((\d+),\s*(\d+),\s*(\d+),\s*(\d*\.?\d+)\)$/)), n ? "#" + t(n[1]) + t(n[2]) + t(n[3]) : void 0;
        },
        setImmediate: function(e) {
          p(e);
        },
        immediateDebounce: function(e) {
          var t = !1;
          return function() {
            if (!t) {
              var n = this,
                i = arguments;
              t = !0, p(function() {
                t = !1, e.apply(n, i);
              });
            }
          };
        },
        debounce: function(e, t) {
          var n;
          return function() {
            var i = this,
              r = arguments;
            clearTimeout(n), n = setTimeout(function() {
              e.apply(i, r);
            }, t);
          };
        },
        debounceWithPromise: function(e, t) {
          var n;
          return function() {
            var i = this,
              r = arguments;
            return n && n.cancel(), n = new Promise(function(e) {
              setTimeout(e, t);
            }).then(function() {
              return e.apply(i, r);
            });
          };
        },
        throttleFunc: function(e, t, n) {
          var i = {},
            r = function n() {
              var r = Array.prototype.slice.apply(arguments);
              _.some(r, _.isObject) && TS.error("You're passing non-scalar arguments to a function throttled with TS.utility.throttleFunc; it will likely not work as you want");
              var a = "f-" + r.join("-");
              if (i[a] && i[a].context !== this) throw new Error("Cannot use this function with different `this` contexts across different calls " + this + " " + i[a].context);
              i[a] = i[a] || {
                requested: Date.now(),
                timeout: 0,
                context: this
              }, i[a].timeout || n.always_wait ? i[a].requested = Date.now() : e.apply(i[a].context, r), i[a].timeout || (i[a].timeout = setTimeout(function n() {
                var s = Date.now() - i[a].requested;
                s >= t ? (e.apply(i[a].context, r), delete i[a]) : i[a].timeout = setTimeout(n, t - s);
              }, t));
            };
          return r.always_wait = !!n, r;
        },
        cmdKey: function(e) {
          return !!e && (TS.model.is_mac ? !!e.metaKey : !!e.ctrlKey);
        },
        looksLikeKeyboardShortcut: function(e) {
          return !!(e.ctrlKey || e.altKey || e.metaKey) && (e.keyCode !== TS.utility.keymap.alt && e.keyCode !== TS.utility.keymap.ctrl && e.keyCode !== TS.utility.keymap.cmd_ff && e.keyCode !== TS.utility.keymap.cmd_other && e.keyCode !== TS.utility.keymap.cmd_right && (/^(\w|[$-\/:-?{-~!"^_`[\]])$/i.test(String.fromCharCode(e.keyCode)), !0));
        },
        isForwardDeleteKey: function(e) {
          return e.keyCode === TS.utility.keymap.delete || !(!TS.model.is_mac || !e.ctrlKey || "d" !== e.key);
        },
        isBoldKey: function(e) {
          return !!e && (e.keyCode === TS.utility.keymap.b && TS.utility.cmdKey(e));
        },
        isItalicKey: function(e) {
          return !!e && (e.keyCode === TS.utility.keymap.i && TS.utility.cmdKey(e));
        },
        throttle: function() {
          function e(e) {
            var t, n;
            if (i.timers[e]) {
              if (i.queues[e])
                for (t = 0, n = i.queues[e].length; t < n; t += 1) i.queues[e][t] && i.queues[e][t]();
              i.queues[e] = null, i.timers[e] = null;
            }
          }

          function t(t, r, a) {
            if (!t) return !1;
            r = r || n.timer_group, i.timers[r] || (a = a || n.delay, i.timers[r] = window.setTimeout(function() {
              e(r);
            }, a)), i.queues[r] || (i.queues[r] = []), i.queues[r].indexOf ? -1 === i.queues[r].indexOf(t) && i.queues[r].push(t) : i.queues[r].push(t);
          }
          var n, i;
          return n = {
            delay: 200,
            timer_group: "generic"
          }, i = {
            timers: {},
            queues: {}
          }, {
            method: t
          };
        }(),
        getImgProxyURL: function(e, t, n) {
          return TS.utility.getImgProxyURLWithOptions(e, {
            width: t,
            height: n
          });
        },
        getImgProxyURLWithOptions: function(e, t) {
          if (!e) return e;
          if (!TS.boot_data.image_proxy_url) return e;
          var n = TS.boot_data.image_proxy_url;
          if (0 === e.indexOf(n)) return e;
          var i, r, a, s = getRefererHidingWhiteList();
          if (!t.emoji && 0 === e.indexOf("https://"))
            for (a = e.replace(/^https:\/\//, ""), i = 0, r = s.length; i < r; i += 1)
              if (0 === a.indexOf(s[i] + "/")) {
                if (t.stop_animations && "slack-imgs.com" === s[i]) {
                  var o, l = TS.utility.url.urlQueryStringParse(a).o1;
                  return o = t.stop_animations || !1 === TS.model.prefs.a11y_animations ? l ? l + ".gu" : "gu" : l && l.replace(/\.gu|gu/, ""), TS.utility.url.setUrlQueryStringValue(e, "o1", o);
                }
                return e;
              }
          if (0 === e.indexOf("/img/")) return e;
          TS.boot_data.feature_imgproxy_multicloud && (n += "/mc"), n = TS.utility.url.setUrlQueryStringValue(n, "c", "1");
          var d = [],
            c = parseInt(t.width, 10),
            _ = parseInt(t.height, 10);
          return c && _ && (d.push("wi" + c), d.push("he" + _), t.resize && TS.boot_data.feature_use_imgproxy_resizing && d.push("si")), t.rotate && d.push("ro"), t.render_svg && d.push("sv2"), t.convert_ico && d.push("ip"), (t.stop_animations || 0 == TS.model.prefs.a11y_animations) && d.push("gu"), d.length > 0 && (n = TS.utility.url.setUrlQueryStringValue(n, "o1", d.join("."))), TS.utility.url.setUrlQueryStringValue(n, "url", e);
        },
        rAF: function() {
          var e, t = ["ms", "moz", "webkit", "o"],
            n = window.requestAnimationFrame;
          for (e = 0; e < t.length && !n; e += 1) n = window[t[e] + "RequestAnimationFrame"];
          if (!n) {
            var i = 0;
            return function(e) {
              var t = Date.now(),
                n = Math.max(0, 16 - (t - i)),
                r = window.setTimeout(function() {
                  e(t + n);
                }, n);
              return i = t + n, r;
            };
          }
          return function(e) {
            return n.call(window, e);
          };
        }(),
        cancelRAF: function() {
          var e, t = ["ms", "moz", "webkit", "o"],
            n = window.cancelAnimationFrame;
          for (e = 0; e < t.length && !n; e += 1) n = window[t[e] + "CancelAnimationFrame"] || window[t[e] + "CancelRequestAnimationFrame"];
          return n ? function(e) {
            n.call(window, e);
          } : function(e) {
            clearTimeout(e);
          };
        }(),
        startAnimation: function(e) {
          return g.subscribe(e);
        },
        getLocationHashString: function(e) {
          e = e || document;
          var t = e.location.hash;
          return t && t.length ? t.substr(1) : t;
        },
        getYoutubeIdFromURL: function(e) {
          var t = "";
          return e = e.replace(/(>|<)/gi, "").split(/(vi\/|v=|\/v\/|youtu\.be\/|\/embed\/)/), void 0 !== e[2] ? (t = e[2].split(/[^0-9a-z_-]/i), t = t[0]) : t = e, t;
        },
        loadUrlInWindowIfOnline: function(e, t) {
          t = t || document, TS.api.call("api.test", {}, function(n) {
            n ? ($("body").addClass("hidden"), t.location = e) : TS.generic_dialog.alert(TS.i18n.t("You can’t perform that action because you are not online :(", "utility")());
          });
        },
        externalURLsNeedRedirecting: function() {
          return !(!(TS.model.team && TS.model.team.prefs && TS.model.team.prefs.hide_referers) || TS.model.is_our_app);
        },
        swapInRedirUrlForIframe: function(e, t) {
          if (!(t = t || c())) return e;
          if (!t.iframe_redirect_type) return e;
          var n = $(e),
            i = n.attr("src");
          return i ? ("1" == TS.qs_args.test_iframe_referers && (i = "https://" + document.location.host + "/referertester.html?" + Date.now()), i = "https://" + TS.boot_data.redir_domain + "/link?v=" + t.iframe_redirect_type + "&url=" + encodeURIComponent(i), n.attr("src", i), e = n[0].outerHTML, "1" == TS.qs_args.test_iframe_referers && TS.info("html with redir:" + e), e) : e;
        },
        getPlaceholderHTMLFromIframe: function(e) {
          if (TS.boot_data.feature_no_placeholders_in_messages) throw new Error("Unsupported");
          e = e.replace(/<iframe/, "<div").replace(/<\/iframe/, "</div");
          var t = $(e);
          return t.attr("data-real-src", t.attr("src")).attr("src", "").addClass("iframe_placeholder"), e = t[0].outerHTML;
        },
        getIframeHTMLFromPlaceholder: function(e) {
          if (TS.boot_data.feature_no_placeholders_in_messages) throw new Error("Unsupported");
          e = e.replace(/<div/, "<iframe").replace(/<\/div/, "</iframe");
          var t = $(e);
          return t.attr("src", t.data("real-src")).removeClass("iframe_placeholder"), e = t[0].outerHTML;
        },
        setCssFromHeightAndWidthAttrs: function(e) {
          var t = $(e);
          return t.css({
            height: t.attr("height"),
            width: t.attr("width")
          }), t[0].outerHTML;
        },
        isArrowKey: function(e) {
          var t = TS.utility.keymap;
          return e == t.down || (e == t.up || (e == t.right || e == t.left));
        },
        isPageKey: function(e) {
          var t = TS.utility.keymap;
          return e == t.pageup || (e == t.pagedown || (e == t.home || e == t.end));
        },
        isNumericKey: function(e) {
          return e >= 48 && e <= 57;
        },
        getFileIDFromURL: function(e) {
          if (!e) return null;
          e = TS.utility.normalizeDevHost(String(e));
          var t = document.createElement("a");
          t.href = TS.model.files_url;
          var n = t.host,
            i = document.createElement("a");
          i.href = e;
          for (var r = i.pathname; 0 === r.indexOf("/");) r = r.substr(1);
          var a = [n, "files.dev.slack.com", "files.staging.slack.com", "files.slack.com"];
          if (TS.model.enterprise && TS.model.enterprise.domain && (TS.boot_data && "dev" === TS.boot_data.version_ts ? a.push(TS.model.enterprise.domain + ".enterprise.dev.slack.com") : a.push(TS.model.enterprise.domain + ".enterprise.slack.com")), -1 === a.indexOf(i.host)) return null;
          var s, o;
          if (0 === r.indexOf("files/")) {
            if (o = r.split("/"), o.length < 3) return null;
            var l = o[1];
            if (!l) return null;
            if (!TS.members.getMemberByName(l) && !TS.members.getMemberById(l)) return null;
            s = o[2];
          } else {
            if (0 !== r.indexOf("files-pri/")) return null;
            if (o = r.split("/"), o.length < 3) return null;
            var d = o[1];
            if (d.indexOf("-") < 0) return null;
            var c = d.split("-");
            if (2 !== c.length) return null;
            s = c[1];
          }
          return s ? "F" !== s.substr(0, 1) ? null : s.length < 2 ? null : s.length > 15 ? null : s : null;
        },
        getBotIDFromURL: function(e) {
          if (!e) return null;
          e = TS.utility.normalizeDevHost(String(e)), e = e.replace("https://", "").replace("http://", "");
          var t = TS.model.bots_url.replace("https://", "").replace("http://", "");
          for (0 === e.indexOf(t) && (e = e.replace(t, "services")); 0 === e.indexOf("/");) e = e.substr(1);
          if (0 !== e.indexOf("services/")) return null;
          var n = e.split("/");
          if (n.length < 2) return null;
          var i = n[1];
          return i ? "B" !== i.substr(0, 1) ? null : i.length < 2 ? null : i.length > 15 ? null : i : null;
        },
        getMemberIdFromURL: function(e) {
          if (!e) return null;
          e = TS.utility.normalizeDevHost(String(e)), e = e.replace("https://", "").replace("http://", "");
          var t = TS.model.team_url.replace("https://", "").replace("http://", "");
          for (0 === e.indexOf(t) && (e = e.replace(t, "team")); 0 === e.indexOf("/");) e = e.substr(1);
          if (0 !== e.indexOf("team/")) return null;
          var n = e.split("/");
          if (n.length < 2) return null;
          var i = n[1];
          if (!i) return null;
          var r = TS.members.getMemberById(i) || TS.members.getMemberByName(i);
          return r ? r.id : null;
        },
        normalizeDevHost: function(e) {
          return e.replace(/\.dev[0-9]*.slack.com/i, ".dev.slack.com").replace(/\.staging.slack.com/i, ".slack.com");
        },
        platformSupportsHtmlNotifications: function() {
          return !(!TS.model.win_ssb_version || !window.winssb) && (window.winssb.app.canShowHtmlNotifications ? window.winssb.app.canShowHtmlNotifications() : !1 !== window.winssb.app.willUseHwAcceleration);
        },
        platformSupportsImgEmojiInHtmlNotifications: function() {
          return TS.model.win_ssb_version && (TS.model.win_ssb_version > .9 || .9 == TS.model.win_ssb_version && TS.model.win_ssb_version_minor >= 5);
        },
        findAllTeamEmojiInStr: function(e, t) {
          e = $.trim(e);
          var n = [];
          if (!e) return n;
          n = e.match(TS.emoji.getColonsRx()) || n;
          var i = [];
          return n = n.filter(function(e) {
            return !!TS.emoji.isValidName(e) || (e.split("::").forEach(function(e) {
              var t = TS.emoji.isValidName(e);
              t && i.push(":" + t + ":");
            }), !1);
          }), n = n.concat(i), t && (n = _.uniq(n)), TS.dir(248, n), n;
        },
        areSimpleObjectsEqual: function e(t, i) {
          if (t === i) return !0;
          if (void 0 === t && i) return !1;
          if (void 0 === i && t) return !1;
          if ((void 0 === t ? "undefined" : n(t)) !== (void 0 === i ? "undefined" : n(i))) return !1;
          if (null === t && i) return !1;
          if (null === i && t) return !1;
          if (t.length !== i.length) return !1;
          var r;
          for (r in i) {
            if (void 0 === t[r] && void 0 !== i[r]) return !1;
            if (i[r]) switch (n(i[r])) {
              case "object":
                if (!e(t[r], i[r])) return !1;
                break;
              case "function":
                if (String(i[r]) != String(t[r])) return !1;
                break;
              default:
                if (i[r] !== t[r]) return !1;
            } else if (t[r]) return !1;
          }
          for (r in t)
            if (void 0 === i[r] && void 0 !== t[r]) return !1;
          return !0;
        },
        deepDiffObjects: function(e, t) {
          if (_.isEmpty(e)) return {};
          if (_.isEmpty(t)) return e;
          var i = {};
          return _.each(e, function(e, r) {
            var a = t[r];
            if (a !== e)
              if ((void 0 === e ? "undefined" : n(e)) !== (void 0 === a ? "undefined" : n(a))) i[r] = e;
              else if (_.isArray(e)) i[r] = _.difference(e, a);
            else if (_.isPlainObject(e)) {
              var s = TS.utility.deepDiffObjects(e, a);
              _.isEmpty(s) || (i[r] = s);
            } else i[r] = e;
          }), i;
        },
        appendLogToUrlWithLimit: function(e, t) {
          if (!e) return e;
          if (e += -1 == e.indexOf("?") ? "?" : "&", !t) return e;
          var n = 2e3 - e.length;
          return e + t.substr(0, n);
        },
        makeWebWorker: function(e, t) {
          var n = URL.createObjectURL(new Blob(["(", e, ")()"], {
              type: "application/javascript"
            })),
            i = new Worker(n);
          return URL.revokeObjectURL(n), i.onmessage = t, i;
        },
        extractAllModelObIds: function(t, i) {
          i = i && String(i) || "";
          var r = "search." === i.substr(0, 7),
            a = [],
            o = [],
            l = function(e, t) {
              return "channel" === e || !("id" !== e || !r || "channel" !== t);
            };
          return function e(t, i) {
            "object" === (void 0 === t ? "undefined" : n(t)) && (o.push(t), _.forOwn(t, function(e, t) {
              "string" == typeof e && (l(t, i) ? TS.utility.strLooksLikeAChannelId(e) && TS.utility.ensureInArray(a, e) : TS.format.extractIds(e).c_ids.forEach(function(e) {
                TS.utility.ensureInArray(a, e);
              }));
            }), _.forOwn(t, function(t, i) {
              if ("object" === (void 0 === t ? "undefined" : n(t))) {
                if (-1 != o.indexOf(t)) return;
                !Array.isArray(t) || "channels" !== i && "ims" !== i && "groups" !== i ? e(t, i) : t.forEach(function(e) {
                  "string" == typeof e && TS.utility.ensureInArray(a, e);
                });
              }
            }));
          }(t, "_DATA"), "search.messages" === i && TS.boot_data.page_needs_enterprise && e(t, a), TS.shouldLog("794") && d(t, i, a, s), a;
        },
        extractAllTeamIds: function(e) {
          var t = [];
          return _.toPairs(e).forEach(function(e) {
            var n = e[0],
              i = e[1];
            if (_.isArray(i)) "messages" !== n && "teams" !== n && "users" !== n || _.forEach(i, function(e) {
              var n = TS.utility.extractAllTeamIds(e);
              t.push(n);
            });
            else if (_.isObject(i)) {
              var r = TS.utility.extractAllTeamIds(i);
              t.push(r);
            } else _.isString(i) && ("team" !== n && "source_team" !== n && "user_team" !== n && "team_id" !== n || TS.utility.strLooksLikeATeamId(i) && t.push(i));
          }), _(t).flatten().uniq().value();
        },
        extractAllMemberIds: function(e, t, i) {
          t = t && String(t) || "";
          var r = [],
            a = [],
            s = [],
            l = [],
            c = function(e) {
              return "user" === e || ("inviter" === e || ("accepted_user" === e || "created_by" === e));
            };
          return function e(t) {
            if (_.isObject(t)) {
              l.push(t);
              var o;
              Object.keys(t).forEach(function(e) {
                "string" == typeof(o = t[e]) && (c(e) ? TS.interop.utility.looksLikeMemberId(o) && TS.utility.ensureInArray(r, o) && (a.push("string" == typeof t.channel && t.channel || "object" === n(t.channel) && t.channel && t.channel.id || i || void 0), s.push("string" == typeof t.team && t.team || "object" === n(t.team) && t.team && t.team.id || void 0)) : TS.format.extractIds(o).m_ids.forEach(function(e) {
                  TS.utility.ensureInArray(r, e) && (a.push(void 0), s.push(void 0));
                }));
              }), Object.keys(t).forEach(function(d) {
                if (o = t[d], "object" === (void 0 === o ? "undefined" : n(o))) {
                  if (-1 != l.indexOf(o)) return;
                  !Array.isArray(o) || "members" !== d && "users" !== d ? e(o) : o.forEach(function(e) {
                    TS.interop.utility.looksLikeMemberId(e) ? TS.utility.ensureInArray(r, e) && (a.push("string" == typeof t.id && t.channel || i || void 0), s.push("string" == typeof t.team && t.team || "object" === n(t.team) && t.team && t.team.id || void 0)) : e && "object" === (void 0 === e ? "undefined" : n(e)) && e.id && TS.interop.utility.looksLikeMemberId(e.id) && r.push(e.id);
                  });
                }
              });
            }
          }(e), r = _(r).uniq().value(), TS.shouldLog("794") && d(e, t, r, o), {
            c_ids: a,
            t_ids: s,
            m_ids: r
          };
        },
        extractAllBotIds: function(e) {
          var t, n = e.bot_id ? [e.bot_id] : [];
          return _.values(e).forEach(function(e) {
            _.isObject(e) ? (t = TS.utility.extractAllBotIds(e), n.push(t)) : _.isString(e) && (t = _(TS.utility.findUrls(e)).map(TS.utility.getBotIDFromURL).compact().value(), n.push(t));
          }), _(n).flatten().uniq().value();
        },
        strLooksLikeAChannelId: function(e) {
          return !("string" != typeof e || e.length < 9) && !!(e && TS.model.channel_id_prefixes.indexOf(e.charAt(0)) > -1);
        },
        strLooksLikeATeamId: function(e) {
          return !(!_.isString(e) || e.length !== TS.model.model_ob_id_length) && !(!e || "T" !== e.charAt(0) || !e.match(/^[A-Z0-9]+$/));
        },
        truncateToNearestWordBoundary: function(e, t) {
          if (e.length <= t) return e;
          var n = e.substring(0, t),
            i = n.lastIndexOf(" ");
          return i > 0 && i > t - 5 ? n.substring(0, i) + "…" : n.substring(0, n.length - 1) + "…";
        },
        truncateAndEscape: function(e, t) {
          return e.length <= t ? _.escape(e) : _.escape(e.substring(0, t - 1)) + "&hellip;";
        },
        truncateHTML: function() {
          function e(t, n, i) {
            var r = _.toArray(n.childNodes);
            return _.forEach(r, function(r) {
              if (t >= i) return void n.removeChild(r);
              if (r.nodeType === Node.TEXT_NODE) {
                var a = r.textContent;
                t + a.length > i ? (r.textContent = a.substring(0, i - t), t += i - t) : t += r.textContent.length;
              } else t = e(t, r, i);
            }), t;
          }
          var t;
          try {
            window.DOMParser && (t = new DOMParser, t.parseFromString("", "text/html") || (t = null));
          } catch (e) {
            t = null;
          }
          return function(n, i) {
            try {
              var r;
              if (t) {
                r = t.parseFromString(n, "text/html").body;
              } else {
                r = jQuery.parseHTML("<div>" + n + "</div>")[0];
              }
              if (e(0, r, i) >= i) {
                var a = document.createTextNode("…");
                r.appendChild(a);
              }
              return r.innerHTML;
            } catch (e) {
              return TS.error(e), n;
            }
          };
        }(),
        isSpaceClickEventSafe: function(e, t) {
          if (e.target) {
            var n = $(e.target).closest("[href]");
            if (!n[0]) return !0;
            if (!n.closest(".post_body").length && !n.closest("ts-rocket").length) return !0;
            var i = n[0].protocol;
            if (i && !1 === /^https?:$/.test(i)) return TS.warn("not following bad link from a post preview"), e.preventDefault(), !1;
            if (n.data("original-href")) {
              TS.warn("not following possibly spoofed link from a post preview"), e.preventDefault();
              var r = n.data("referer-original-href") || n.attr("href");
              return t || l(n.data("original-href"), n.attr("href"), r), !1;
            }
          }
          return !0;
        },
        getCachedScript: function(e, t) {
          return t = $.extend(t || {}, {
            dataType: "script",
            cache: !0,
            url: e
          }), jQuery.ajax(t);
        },
        disableElement: function(e, t) {
          e = $(e), e.attr("disabled", t), e.attr("aria-disabled", t);
        },
        strToApparentlyRndPerc: function(e) {
          return parseFloat("." + TS.utility.strToApparentlyRndNum(e));
        },
        strToApparentlyRndNum: function(e) {
          if (!e) return NaN;
          e = String(e), e = e.substr(Math.round(e.length / 2), 1) + e.split("middle").reverse().join();
          for (var t = "", n = e.length - 1; n > -1; n -= 1) t += (e.charCodeAt(n) * (n + 1)).toString().substr(-1, 1);
          return parseInt(t, 10);
        },
        enableFeatureForUser: function(e) {
          return e < 0 || e > 100 ? (TS.warn("TS.utility.enableFeatureForUser() expects a number between 0 and 100"), !1) : _.random(0, 100) < e;
        },
        roundToThree: function(e) {
          return +(Math.round(e + "e+3") + "e-3");
        },
        convertBytesToMegabytes: function(e) {
          return e / 1024 / 1024;
        },
        convertKilobytesToMegabytes: function(e) {
          return e / 1024;
        },
        queryIsMaybeSelf: function(e) {
          return "me" === (e = _.toLower(e)) || "you" === e || e === i || e === r;
        },
        openAuthenticatedInBrowser: function(e) {
          if (null !== TS.model.desktop_app_version && parseFloat(TS.model.desktop_app_version.major + "." + TS.model.desktop_app_version.minor) >= 2.6) {
            var t = TS.boot_data.team_url + "web/open" + e;
            TSSSB.call("openAuthenticatedInBrowser", t);
          } else window.open(e);
        },
        getFontDescriptorForElement: function(e) {
          var t = e instanceof jQuery ? e : $(e);
          return [t.css("font-style"), t.css("font-weight"), t.css("font-size"), t.css("font-family")].join(" ");
        },
        measureTextWidth: function(e, t) {
          if (!e) return 0;
          this._measure_text_width_canvas = this._measure_text_width_canvas || document.createElement("canvas");
          var n = this._measure_text_width_canvas.getContext("2d");
          return n.font = t, n.measureText(e).width;
        },
        bytesInUnicodeCodePoint: function(e) {
          if (e < 0 || e > 1114111) throw new RangeError("Invalid unicode code point {" + e + "}");
          return e < 128 ? 1 : e < 2048 ? 2 : e < 65536 ? 3 : e <= 1114111 ? 4 : void 0;
        },
        test: {
          clearAndGetRefererPolicy: function() {
            return a = void 0, c();
          },
          getRefererPolicy: function() {
            return c();
          }
        }
      });
      var t, i, r, a, s = /(?:"|<#)([CGD][0-9a-zA-Z]{8,10})(?:"|\||>)/g,
        o = /(?:"|<@)([WU][0-9a-zA-Z]{8,10})(?:"|\||>)/g,
        l = function(e, t, n) {
          var i = "",
            r = "";
          i += '<ts-icon class="ts_icon_warning yolk_orange small_right_margin"></ts-icon> ', i += TS.i18n.t("Caution: Tricky Link", "utility")(), r += "<p>", r += '  <span class="inline_block">' + TS.i18n.t("The link you clicked (<strong>{url}</strong>) is tricky.", "utility")({
            url: _.escape(n)
          }) + "</span>", r += '  <span class="inline_block">' + TS.i18n.t("It has been formatted to look like another web address (<strong>{url}</strong>).", "utility")({
            url: _.escape(e)
          }) + "</span>", r += "</p>", r += "<p>" + TS.i18n.t("Are you sure you want to follow it?", "utility")() + "</p>", TS.generic_dialog.start({
            title: i,
            body: r,
            show_cancel_button: !1,
            show_secondary_go_button: !0,
            secondary_go_button_text: TS.i18n.t("Let’s risk it", "utility")(),
            secondary_go_button_class: "btn_outline",
            onSecondaryGo: function() {
              window.open(t);
            },
            go_button_text: TS.i18n.t("Take me back to safety", "utility")(),
            esc_for_ok: !0,
            enter_always_gos: !0
          });
        },
        d = function(e, t, n, i) {
          var r = JSON.stringify(e),
            a = _.uniq(function(e, t) {
              for (var n = [], i = t.exec(e); i;) n.push(i[1]), i = t.exec(e);
              return n;
            }(r, i));
          a.length != n.length && (TS.warn(t + "   A: " + a.join(", ")), TS.info(t + " ids: " + n.join(", ")), a.length > n.length ? TS.info(t + " dif: " + _.difference(a, n).join(", ")) : TS.info(t + " dif: " + _.difference(n, a).join(", ")));
        },
        c = function() {
          if (!_.isUndefined(a)) return a;
          if (!window.boot_data) return TS.warn("window.boot_data not available"), a = null;
          var e = {
              iframe_redirect_type: 4,
              redirect_type: 3,
              rewrite_on_right_click: !0
            },
            t = TS.console && TS.console.warn;
          return window.bowser ? bowser.chrome && bowser.version >= 4.1 || bowser.opera && bowser.version >= 15 ? a = {
            iframe_redirect_type: 4,
            redirect_type: null,
            rewrite_on_right_click: !1
          } : bowser.ie ? a = {
            iframe_redirect_type: 4,
            redirect_type: 3,
            rewrite_on_right_click: !0
          } : bowser.firefox ? a = {
            iframe_redirect_type: bowser.version >= 36 ? 4 : 2,
            redirect_type: 3,
            rewrite_on_right_click: bowser.version < 36
          } : bowser.safari && bowser.version >= 5 || navigator.userAgent.match(/(Slack_SSB)/g) ? a = {
            iframe_redirect_type: 2,
            redirect_type: null,
            rewrite_on_right_click: !1
          } : (navigator.userAgent && navigator.userAgent.match(/phantomjs/i) && (t = !1), t && TS.console.warn(8675309, "browser not recognized, defaulting to restrictive referrer policy"), a = e, e) : (t && TS.console.warn(8675309, "window.bowser undefined, defaulting to restrictive referrer policy"), a = e);
        },
        u = null;
      window.getRefererHidingWhiteList = function() {
        if (u) return u;
        u = [TS.model.team.domain + ".dev.slack.com", TS.model.team.domain + ".staging.slack.com", TS.model.team.domain + ".slack.com", "files.staging.slack.com", "files.dev.slack.com", "files.slack.com", "dev.slack-files.com", "staging.slack-files.com", "www.slack-files.com", "slack-files.com", "slack-imgs.com", "dev.slack.com", "slack.com", TS.boot_data.redir_domain, "my.slack.com", "www.slack.com", "status.slack.com"];
        for (var e = 0; e < 205; e += 1) u.push(TS.model.team.domain + ".dev" + e + ".slack.com"), u.push("files.dev" + e + ".slack.com"), u.push("dev" + e + ".slack-files.com"), u.push("dev" + e + ".slack.com");
        return u;
      };
      var m = /((ftp|http|https):\/\/|\bw{3}\.)[a-z0-9\-.]+[a-z]+(:[a-z0-9]*)?\/?([@a-z0-9\-._?,'\/\\+&amp;%:!$#=~])*/gi,
        p = window.setImmediate;
      if (!p)
        if (window.MutationObserver) {
          var f = document.createElement("div"),
            h = [];
          new MutationObserver(function() {
            var e = h.slice();
            h.length = 0, e.forEach(function(e) {
              e();
            });
          }).observe(f, {
            attributes: !0
          }), p = function(e) {
            h.length || f.setAttribute("yes", "no"), h.push(e);
          };
        } else p = function(e) {
          setTimeout(e, 0);
        };
      var g = function() {
          function e() {
            n && (i.forEach(function(e) {
              e();
            }), TS.utility.rAF(e));
          }

          function t(t) {
            var r = {
              start: function() {
                i.push(t), n || (n = !0, TS.utility.rAF(e));
              },
              stop: function() {
                i.splice(i.indexOf(t), 1), i.length || (n = !1);
              }
            };
            return r.start(), r;
          }
          var n = !1,
            i = [];
          return {
            subscribe: t,
            subscribers: i,
            isRunning: function() {
              return n;
            }
          };
        }(),
        S = /\.slack\.com\/((?:messages|archives|unreads|threads)\/)/,
        T = /(<a\b[^>]*)(>)/gi,
        b = 365;
    }();
  },
  2676: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.teams", {
        isMemberExternal: function(e) {
          return !!TS.boot_data.feature_shared_channels_client && (!!_.isObject(e) && (!!e.team_id && (!(!e._is_local && e._is_from_org) && (!e._is_local && !e._is_from_org))));
        },
        isMemberExternalById: function(e) {
          var t = TS.members.getMemberById(e);
          return t ? TS.utility.teams.isMemberExternal(t) : (TS.console.warn("Trying to check for external team membership by id (" + e + ") but member is not present in the model."), !1);
        },
        isMemberGuest: function(e) {
          return !!_.isObject(e) && !(!e.is_external && !e.is_restricted);
        },
        isMsgFromOtherTeam: function(e) {
          return !!_.isObject(e) && (!!e.source_team_id && !(!e.source_team_id || TS.model.team.id == e.source_team_id));
        },
        getMembersForTeam: function(e) {
          if (_.isObject(e) && e.id) {
            return _.filter(TS.model.members, {
              team_id: e.id
            });
          }
        },
        validateTeamName: function(t) {
          var n = {
            is_valid: !0,
            error_key: "",
            error_message: ""
          };
          return t && "" !== t ? (t.length > 255 && (n.is_valid = !1, n.error_key = "maxlength", n.error_message = e[n.error_key]), n) : (n.is_valid = !1, n.error_key = "empty", n.message = e[n.error_key], n);
        }
      });
      var e = {
        empty: TS.i18n.t("Please fill in your team name.", "ui_validation")(),
        maxlength: TS.i18n.t("Sorry, your team name must be 255 characters or fewer!", "ui_validation")()
      };
    }();
  },
  2677: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.welcome_post", {
        WELCOME_POST_NAME: "Getting_started_with_Slack__team_creator_welcome_post_identifier",
        clogWelcomePostExpand: function(e) {
          e && e.name === TS.utility.welcome_post.WELCOME_POST_NAME && (TS.model.user.is_primary_owner ? TS.clog.track("WEBSITE_CLICK", {
            click_target: "expand_post_button",
            trigger: "welcome_post_team_creator",
            action: "open_post"
          }) : TS.clog.track("WEBSITE_CLICK", {
            click_target: "expand_post_button",
            trigger: "welcome_post_team_joiner",
            action: "open_post"
          }));
        },
        clogWelcomePostOpen: function(e) {
          var t = e.data("file-id"),
            n = TS.files.getFileById(t);
          n && n.name === TS.utility.welcome_post.WELCOME_POST_NAME && (TS.model.user.is_primary_owner ? e.hasClass("welcome_post_slackbot_message") ? TS.clog.track("WEBSITE_CLICK", {
            click_target: "edit_post_link",
            trigger: "welcome_post_team_creator",
            action: "open_post"
          }) : TS.clog.track("WEBSITE_CLICK", {
            click_target: "edit_in_new_window_button",
            trigger: "welcome_post_team_creator",
            action: "open_post"
          }) : TS.clog.track("WEBSITE_CLICK", {
            click_target: "open_in_new_window_button",
            trigger: "welcome_post_team_joiner",
            action: "open_post"
          }));
        },
        clogWelcomePostSetting: function(e) {
          e ? TS.clog.track("WEBSITE_CLICK", {
            click_target: "save_welcome_post_setting",
            trigger: "button_click",
            action: "enable"
          }) : TS.clog.track("WEBSITE_CLICK", {
            click_target: "save_welcome_post_setting",
            trigger: "button_click",
            action: "disable"
          });
        }
      });
    }();
  },
  2746: function(e, t) {
    ! function() {
      "use strict";

      function e(e) {
        var t = {
          attributes: {},
          insert: e.insert
        };
        return _.each(e.attributes, function(e, n) {
          "fontFamily" === n && a(e) && (n = "code"), l[n] && e && ("code-block" === n && (n = "code"), t.attributes[n] = !0);
        }), t;
      }

      function t(e) {
        var t = e.slice(0, 1);
        return _.each(e.slice(1), function(e) {
          var n = _.last(t);
          _.isEqual(e.attributes, n.attributes) ? n.insert += e.insert : t.push(e);
        }), t;
      }

      function n(e) {
        var t = {
          insert: e.insert
        };
        return _.each(e.attributes, function(e, n) {
          if (n = r(t.insert, n), !_.includes(c, n))
            if (_.includes(d, n)) {
              var a = t.insert.split("\n").map(function(e) {
                return i(e, l[n]);
              });
              t.insert = a.join("\n");
            } else t.insert = i(t.insert, l[n]);
        }), t;
      }

      function i(e, t) {
        return /^\s*$/.test(e) ? e : e.replace(/^(\s*)((?:.|\n)*?)(\s*)$/, function(e, n, i, r) {
          return n + t(i) + r;
        });
      }

      function r(e, t) {
        return "code-block" === t && e.match(/^[^\n]*\n?$/) ? "code" : "code" === t && e.match(/\n/g) ? "code-block" : t;
      }

      function a(e) {
        if (!e) return !1;
        var t = e.toLowerCase();
        return !!_.includes(t, " mono") || u.some(function(e) {
          return _.includes(t, e);
        });
      }

      function s(e, t) {
        return TS.emoji.eachEmoticon(e, function(n) {
          e = e.replace(n, function(e) {
            var n = "<emoticon-placeholder-" + Date.now() + ">";
            return t.push({
              emoticon: e,
              placeholder: n
            }), n;
          });
        }), e;
      }

      function o(e, t) {
        return t.forEach(function(t) {
          e = e.replace(t.placeholder, t.emoticon);
        }), e;
      }
      TS.registerModule("format.texty", {
        memberToSlug: function(e, t) {
          if (e && e.id && e.name) {
            var n;
            return n = TS.boot_data.feature_name_tagging_client ? TS.members.getPrefCompliantMemberName(e, !1, !0) : "@" + e.name, {
              insert: n,
              attributes: {
                slackmention: {
                  id: e.id,
                  label: n,
                  should_highlight: !!t
                }
              }
            };
          }
        },
        convertContentsToString: function(e) {
          return e.contents ? _.reduce(e.contents, function(e, t) {
            if (t.attributes && t.attributes.slackmention) {
              if (t.insert.length > t.attributes.slackmention.label.length) {
                var n = t.insert.split(t.attributes.slackmention.label);
                if (n.length > 1) return n.shift(), n = n.map(function() {
                  return "<@" + t.attributes.slackmention.id + "|" + _.escape(t.attributes.slackmention.label) + ">";
                }), e + n.join("");
              }
              return e + "<@" + t.attributes.slackmention.id + "|" + _.escape(t.attributes.slackmention.label) + ">";
            }
            return e + t.insert;
          }, "").replace(/\n$/, "") : "";
        },
        convertContentsToStringForDisplay: function(e) {
          return e.contents ? (e = _.reduce(e.contents, function(e, t) {
            return t.attributes && t.attributes.slackmention ? e + t.attributes.slackmention.label : e + t.insert;
          }, ""), e.replace(/\n$/, "")) : "";
        },
        convertContentsStringToContents: function(e) {
          var t = {
            contents: []
          };
          if (-1 !== e.search(p)) {
            var n = [];
            e.replace(p, function(e, t, i, r) {
              n.push({
                id: t,
                label: _.unescape(i),
                index: r,
                length: e.length
              });
            });
            var i = 0;
            n.forEach(function(n) {
              var r = e.substring(i, n.index);
              r.length && t.contents.push({
                insert: r
              });
              var a = TS.format.texty.shouldHighlightMention(n.id, n.label),
                s = "UNVERIFIED" === n.id;
              t.contents.push({
                insert: n.label,
                attributes: {
                  slackmention: {
                    label: n.label,
                    id: n.id,
                    mention: a,
                    unverified: s
                  }
                }
              }), i = n.index + n.length;
            });
            var r = e.substr(i);
            return r.length && t.contents.push({
              insert: r
            }), t;
          }
          return t.contents.push({
            insert: e
          }), t;
        },
        convertContentsStringForSlashCommands: function(e) {
          var t = TS.format.texty.convertContentsStringToContents(e);
          return _.reduce(t.contents, function(e, t) {
            if (t.attributes && t.attributes.slackmention) {
              var n = t.attributes.slackmention.id;
              return "BKeveryone" === n ? e + "@everyone" : "BKhere" === n ? e + "@here" : "BKchannel" === n ? e + "@channel" : "BKgroup" === n ? e + "@group" : e + "@" + n;
            }
            return e + t.insert;
          }, "");
        },
        getMemberAsContentsString: function(e) {
          return e ? "<@" + e.id + "|" + TS.members.getPrefCompliantMemberName(e, !1, !0) + ">" : "";
        },
        getFormattedDelta: function(i) {
          if (i) {
            var r = i.map(e),
              a = t(r),
              s = _.last(a);
            s.insert = s.insert.replace(/\n$/, "");
            var o = a.map(n);
            return new TS.interop.texty.Delta(o);
          }
        },
        replaceFormatMentions: function(e, t, n) {
          var i = 0;
          return t = t.replace(p, function(t, r, a) {
            i += 1;
            var s = "mention-placeholder-" + Date.now() + "-" + i,
              o = n ? _.escape(a) : a;
            if ("BKeveryone" === r) o = "<!everyone>";
            else if ("BKhere" === r) o = "<!here>";
            else if ("BKchannel" === r) o = "<!channel>";
            else if ("BKgroup" === r) o = "<!group>";
            else if ("S" === r.charAt(0)) {
              var l = TS.user_groups.getUserGroupsById(r);
              l && (o = "<!subteam^" + l.id + "|@" + l.handle + ">");
            } else {
              var d = TS.members.getMemberById(r);
              d && (o = "<@" + d.id + ">");
            }
            return e.push({
              mention: o,
              placeholder: s
            }), s;
          });
        },
        buildSmartQuotesDelta: function(e) {
          var t = new TS.interop.texty.Delta,
            n = 0,
            i = e.reduce(function(e, t) {
              if (t.attributes && t.attributes.slackmention) {
                return e + t.insert.replace(/./g, "a");
              }
              return e + t.insert;
            }, ""),
            r = TS.format.texty.replaceSmartQuotes(i);
          if (i === r) return t;
          for (var a = 0; a < i.length; a++) i[a] !== r[a] && -1 !== m.indexOf(i[a]) && -1 !== m.indexOf(r[a]) && (t.retain(a - n).delete(1).insert(r[a]), n = a + 1);
          return t;
        },
        replaceSmartQuotes: function(e) {
          e = e.replace(/[\u2018|\u2019]/g, "'"), e = e.replace(/[\u201c|\u201d]/g, '"');
          var t = [];
          e = TSF.replaceFormatContents(t, e, {
            replace_pre: !0,
            replace_code: !0,
            replace_url: !0
          });
          var n = [];
          return e = s(e, n), e = e.replace(/([^A-Za-z0-9]|^)"(\S)/g, "$1“$2").replace(/(\u201c[^"]*)"([^"]*$|[^\u201c"]*\u201c)/g, "$1”$2").replace(/([^0-9])"/g, "$1”").replace(/([^A-Za-z0-9]|^)'(\S)/g, "$1‘$2").replace(/([a-z])'([a-z])/gi, "$1’$2").replace(/((\u2018[^']*)|[a-z])'([^0-9]|$)/gi, "$1’$3").replace(/(\u2018)([0-9]{2}[^\u2019]*)(\u2018([^0-9]|$)|$|\u2019[a-z])/gi, "’$2$3").replace(/(\B|^)\u2018(?=([^\u2019]*\u2019\b)*([^\u2019\u2018]*\W[\u2019\u2018]\b|[^\u2019\u2018]*$))/gi, "$1‘").replace(/'/g, "′"), e = o(e, n), e = TSF.swapOutPlaceholders(t, e);
        },
        removeInvalidMentions: function(e) {
          return e.contents = e.contents.map(function(e) {
            return e.attributes && e.attributes.slackmention && !TS.members.getMemberById(e.attributes.slackmention.id) && !TS.user_groups.getUserGroupsById(e.attributes.slackmention.id) && -1 === ["BKeveryone", "BKhere", "BKchannel", "BKgroup"].indexOf(e.attributes.slackmention.id) ? {
              insert: e.insert
            } : e;
          }), e;
        },
        shouldHighlightMention: function(e, t) {
          return TS.model.user.id === e || (!(!TS.user_groups.getUserGroupsById(e) || -1 === TS.model.highlight_words.indexOf(t)) || -1 !== ["BKeveryone", "BKhere", "BKchannel", "BKgroup"].indexOf(e));
        },
        test: function() {
          var e = {};
          return Object.defineProperty(e, "IGNORED_FORMATS", {
            get: function() {
              return c;
            },
            set: function(e) {
              c = e;
            }
          }), e;
        }
      });
      var l = {
          bold: function(e) {
            return "*" + e + "*";
          },
          italic: function(e) {
            return "_" + e + "_";
          },
          code: function(e) {
            return "`" + e + "`";
          },
          strike: function(e) {
            return "~" + e + "~";
          },
          "code-block": function(e) {
            return "```\n" + e + "\n```";
          },
          bracketed: function(e) {
            return "[" + e + "]";
          }
        },
        d = ["bold", "italic", "code", "strike", "bracketed"],
        c = ["code", "code-block"],
        u = ["monospace", "menlo", "consolas", "inconsolata", "courier", "monaco", "anonymous pro", "terminus", "source code pro"],
        m = ["'", '"', "“", "”", "‘", "’"],
        p = /(?:<)@((?:(?:U|W|S)[A-Z0-9]{8})|BKeveryone|BKhere|BKchannel|BKgroup|UNVERIFIED)\|(@.+?)(?:>)/g;
    }();
  },
  2750: function(e, t) {
    ! function() {
      "use strict";

      function e(e) {
        var t;
        t = TS.useRedux() ? {
          channels: _.reject(TS.redux.channels.dangerouslyGetChannelsForUser(), "is_archived")
        } : {
          channels: TS.channels.getUnarchivedChannelsForUser()
        };
        var n = {
            prefer_exact_match: !0,
            frecency: !0,
            limit: 25,
            allow_empty_query: !0,
            search_previous_channel_names: !0
          },
          i = e.replace(/^#/, ""),
          r = TS.sorter.search(i, t, n);
        return _.map(r, "model_ob");
      }
      TS.registerModule("tabcomplete.channels", {
        type: "channels",
        getMatch: function(e) {
          if (_.isString(e)) {
            var t, n, i;
            if (t = /(^|\n|.)(#[^~`!@#$%^&*()+=[\]{}\\|;:'",.<>\/?\s]*)$/i, TS.i18n.deburr(e).replace(t, function(t, r, a, s) {
                TS.tabcomplete.isAllowedSurroundingCharacter(r) && (i = s + r.length, n = e.substr(i, a.length));
              }), n) return {
              match: n,
              index: i
            };
          }
        },
        shouldDisplayResults: function(e, t) {
          if (!e || _.isEmpty(t)) return !1;
          var n = e.replace(/^#/, "").toLowerCase();
          return !(1 === t.length && t[0].name === n);
        },
        getResultAtIndex: function(e, t) {
          if (e && _.isNumber(t)) return e[t];
        },
        getInsertData: function(e) {
          if (e) {
            TS.clog.track("PFP_ACTION", {
              contexts: {
                growth: {
                  action: "autocomplete_select",
                  trigger: "channel"
                }
              }
            });
            return {
              text: "#" + e.name
            };
          }
        },
        search: function(t, n, i) {
          i(null, e(t));
        },
        render: function(e, t) {
          var n = TS.templates.tabcomplete_channel_header({
              text: e
            }),
            i = TS.templates.tabcomplete_channel_results({
              results: t
            });
          return TS.tabcomplete.renderMenu(n, i);
        },
        onSelect: function(e, t) {
          e && (t || (t = ""), t = t.replace(/^#/, ""), TS.ui.frecency.record(e, t));
        },
        onSelectedIndexChange: function(e) {
          TS.tabcomplete.onSelectedIndexChange(e);
        }
      });
    }();
  },
  2751: function(e, t) {
    ! function() {
      "use strict";

      function e(e, n) {
        var i = t(n),
          r = e.toLowerCase();
        r && (i = i.filter(function(e) {
          return 0 === e.name.indexOf(r) || !!e.aliases && e.aliases.some(function(e) {
            return 0 === e.indexOf(r);
          });
        }));
        var a = _.map(i, "name"),
          s = TS.cmd_handlers.sortNames(a),
          o = s.map(function(e, t) {
            return _.assign({
              index: t,
              name: e
            }, TS.cmd_handlers[e]);
          });
        return TS.cmd_handlers.groupCmdsByType(o);
      }

      function t(e) {
        var t = TS.cmd_handlers.getAvailableUserCmds(e);
        return _.map(t, function(e, t) {
          return _.assign({
            name: t
          }, e);
        });
      }
      TS.registerModule("tabcomplete.commands", {
        type: "commands",
        getMatch: function(e, t, n) {
          if (_.isString(e) && (!_.isNumber(n) || 0 === n)) {
            e.startsWith("／") && (e = "/" + e.substring(1)), "/" === e && TS.clog.track("PFP_ACTION", {
              contexts: {
                growth: {
                  action: "autcomplete_start",
                  trigger: "slash_command"
                }
              }
            });
            var i, r;
            if (_.deburr(e).replace(/^(\/\S*)$/i, function(t, n, a) {
                r = a, i = e.substr(r, n.length);
              }), i) return {
              match: i,
              index: r
            };
          }
        },
        getResultAtIndex: function(e, t) {
          if (e && _.isNumber(t)) {
            var n = _.flatMap(e, "cmds");
            return _.find(n, {
              index: t
            });
          }
        },
        getInsertData: function(e) {
          if (e) {
            TS.clog.track("PFP_ACTION", {
              contexts: {
                growth: {
                  action: "autcomplete_select",
                  trigger: "slash_command"
                }
              }
            });
            return {
              text: e.name
            };
          }
        },
        search: function(t, n, i) {
          i(null, e(t, n));
        },
        render: function(e, t) {
          var n = TS.templates.tabcomplete_command_header({
              text: e
            }),
            i = TS.templates.tabcomplete_command_results({
              results: t
            });
          return TS.tabcomplete.renderMenu(n, i);
        },
        onSelectedIndexChange: function(e) {
          TS.tabcomplete.onSelectedIndexChange(e);
        }
      });
    }();
  },
  2752: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("tabcomplete.emoji", {
        type: "emoji",
        getMatch: function(e, t) {
          if (_.isString(e)) {
            var n, i, r;
            if (r = TS.boot_data.feature_localization ? /(^|\n|[^+-]+)([+-]?:[^~`@#$%^&*()=[\]{}\\|;:",.<>\/ ]*)$/i : /(^|\n|[^+-]+)([+-]?:[\w\-+'’]*)$/i, TS.i18n.deburr(e).replace(r, function(t, r, a, s) {
                var o = r[r.length - 1];
                TS.tabcomplete.isAllowedSurroundingCharacter(o) && (r.trim() && /^[+-]/.test(a) && (a = a.slice(1), s += 1), i = s + r.length, n = e.substr(i, a.length));
              }), n && (t || l(n, TS.i18n.locale()))) return {
              match: n,
              index: i
            };
          }
        },
        shouldDisplayResults: function(e, t, n) {
          return !(!e || _.isEmpty(t) || _.isEmpty(t.results)) && (1 !== t.results.length || !n);
        },
        getResultAtIndex: function(e, t) {
          if (e && e.results && _.isNumber(t)) {
            var n = e.results[t];
            if (n) return {
              action: e.action,
              emoji: n
            };
          }
        },
        getInsertData: function(e) {
          if (e && e.emoji) {
            TS.clog.track("PFP_ACTION", {
              contexts: {
                growth: {
                  action: "autocomplete_select",
                  trigger: "emoji"
                }
              }
            });
            var t = ":" + (e.emoji.display_name || e.emoji.name) + ":";
            if (e.emoji.is_skin) {
              var n = !!TS.boot_data.feature_localization;
              t += TS.emoji.getChosenSkinToneModifier(n) || "";
            }
            return "add_rxn" === e.action ? t = "+" + t : "remove_rxn" === e.action && (t = "-" + t), {
              text: t
            };
          }
        },
        getNextSelectedIndex: function(e) {
          var a;
          switch (e.keyCode) {
            case TS.utility.keymap.right:
              a = "right";
              break;
            case TS.utility.keymap.left:
              a = "left";
              break;
            case TS.utility.keymap.up:
              a = "up";
              break;
            case TS.utility.keymap.down:
              a = "down";
          }
          if (a) {
            var s = t(e.menu);
            if (1 === s.length) return 0;
            if ("right" === a) return e.selectedIndex < s.length - 1 ? e.selectedIndex + 1 : 0;
            if ("left" === a) return e.selectedIndex > 0 ? e.selectedIndex - 1 : s.length - 1;
            if (e.keyCode === TS.utility.keymap.home || "up" === a && e.metaKey) return 0;
            if (e.keyCode === TS.utility.keymap.end || "down" === a && e.metaKey) return s.length - 1;
            if (TS.boot_data.feature_tinyspeck) {
              var o = _.map(s, function(e, t) {
                  var i = n(e);
                  return i.index = t, i;
                }),
                l = o[e.selectedIndex],
                d = i(l, o, "down" === a),
                c = r(l, d);
              if (!c) {
                if ("down" === a) return s.length - 1;
                if ("up" === a) return 0;
              }
              return c.index;
            }
          }
        },
        search: function(t, n, i) {
          var r = /^(\+|-):/.test(t) ? t[0] : "",
            o = n.index;
          t = TS.emoji.normalizeSearchTerm(t);
          var l, d = a(t);
          if (0 === o && r) {
            var c = TS.shared.getActiveModelOb(),
              u = e(c);
            if ("-" === r) {
              var m;
              m = TS.boot_data.feature_tinyspeck ? s(t, u) : d, _.isEmpty(m) || (l = {
                action: "remove_rxn",
                results: m
              });
            } else if ("+" === r) {
              var p;
              p = TS.boot_data.feature_tinyspeck ? _.difference(d, u) : d, _.isEmpty(p) || (l = {
                action: "add_rxn",
                results: p
              });
            }
          } else l = {
            action: "search",
            results: d
          };
          l && !l.results.length && (l = null), i(null, l);
        },
        render: function(e, t) {
          var n = TS.templates.tabcomplete_emoji_header({
              text: e,
              action: t.action
            }),
            i = _.map(t.results, function(e) {
              return o(e, t.action);
            }),
            r = TS.templates.tabcomplete_emoji_results({
              results: i
            });
          return TS.tabcomplete.renderMenu(n, r);
        },
        onSelect: function(e, t) {
          e && e.emoji && (t || (t = ""), t = t.replace(/^:/, ""), TS.ui.frecency.record(e.emoji, t));
        },
        onSelectedIndexChange: function(e) {
          TS.tabcomplete.onSelectedIndexChange(e);
        },
        test: function() {
          var n = {};
          return Object.defineProperty(n, "_getResultElements", {
            get: function() {
              return t;
            },
            set: function(e) {
              t = e;
            }
          }), Object.defineProperty(n, "_getLocalResults", {
            get: function() {
              return a;
            },
            set: function(e) {
              a = e;
            }
          }), Object.defineProperty(n, "_getPrevMsgRxns", {
            get: function() {
              return e;
            },
            set: function(t) {
              e = t;
            }
          }), Object.defineProperty(n, "_sortResults", {
            get: function() {
              return s;
            },
            set: function(e) {
              s = e;
            }
          }), n;
        }
      });
      var e = function(e) {
          var t = TS.utility.msgs.getDisplayedMsgs(e.msgs),
            n = _.find(t, function(e) {
              return !e.is_ephemeral;
            });
          if (n) {
            var i = TS.rxns.getMemberRxnsFromMessage(n, TS.model.user.id),
              r = _.map(i, function(e) {
                var t = e.name.replace(/(:.+)$/, "");
                return TS.emoji.getEmojiByName(t);
              });
            return _.compact(r);
          }
        },
        t = function(e) {
          return e ? _.toArray(e.querySelectorAll(".tab_complete_ui_item")) : [];
        },
        n = function(e) {
          var t = e.offsetLeft;
          return {
            left: t,
            right: t + e.offsetWidth,
            top: e.offsetTop
          };
        },
        i = function(e, t, n) {
          if (e && t && t.length) {
            var i = _.groupBy(t, "top"),
              r = _.map(_.keys(i), _.toNumber),
              a = r.indexOf(e.top);
            return i[r[n ? a + 1 : a - 1]];
          }
        },
        r = function(e, t) {
          if (e && t && t.length) {
            var n = t.filter(function(t) {
              return !!_.inRange(t.left, e.left, e.right) || (!!_.inRange(t.right, e.left, e.right) || t.left < e.left && t.right > e.right);
            });
            if (n) {
              return _.maxBy(n, function(t) {
                var n = Math.max(t.left, e.left);
                return Math.min(t.right, e.right) - n;
              });
            }
          }
        },
        a = function(e) {
          return s(e, TS.model.emoji_map);
        },
        s = function(e, t) {
          if (!t || !t.length) return [];
          var n = {
              emoji: t
            },
            i = {
              allow_empty_query: !0,
              frecency: !0,
              limit: 50,
              prefer_exact_match: !0
            },
            r = e.replace(/^(\+|-)?:/, "");
          return t = TS.sorter.search(r, n, i), _.map(t, "model_ob");
        },
        o = function(e) {
          var t = ":" + (e.display_name || e.name) + ":",
            n = {
              emoji_is_plain_text_only: "as_text" === TS.model.prefs.emoji_mode,
              emoji: e,
              emoji_display_name_with_colons: t
            };
          if (e.is_skin) {
            n.show_skin_tone_variant = e.is_skin, n.emoji_name_with_colons_and_skin = e.name_with_colons + TS.emoji.getChosenSkinToneModifier();
            var i = !!TS.boot_data.feature_localization;
            n.emoji_display_name_with_colons_and_skin = t + TS.emoji.getChosenSkinToneModifier(i);
          }
          return n;
        },
        l = function(e, t) {
          switch (t) {
            case "ja-JP":
              return e.length >= 2;
            default:
              return e.length >= 3;
          }
        };
    }();
  },
  2753: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("tabcomplete.members", {
        type: "members",
        getMatch: function(e, t, n, i) {
          var r, a, s = /(^|\n|.)?(@[^\s\n@]*)$/i;
          if (TS.boot_data.feature_name_tagging_client && (s = /(^|\n|.)?((?:@|\uFF20)[^\n@\uFF20]*)$/i), e.replace(s, function(e, t, n, s) {
              (TS.tabcomplete.isAllowedSurroundingCharacter(t) || i && i.allowed_preceding_symbols && -1 !== i.allowed_preceding_symbols.indexOf(t)) && (t && (s += t.length), r = n, a = s);
            }), !r && (!TS.model.prefs.require_at || t)) {
            var o;
            o = TS.boot_data.feature_name_tagging_client ? _.last(/(^|\s)([^\s\n@\uFF20]+)$/.exec(e)) : _.last(/(^|\s)([^\s\n@]+)$/.exec(e)), o = TS.tabcomplete.trimSurroundingSymbols(o), u(o, t) && (r = o, a = e.length - o.length);
          }
          if (r) return {
            match: r,
            index: a
          };
        },
        shouldDisplayResults: function(e, t) {
          return !(!e || _.isEmpty(t)) && (!!TS.boot_data.feature_name_tagging_client || !(1 === t.length && g(e, t[0])));
        },
        getResultAtIndex: function(e, t) {
          if (e && _.isNumber(t)) return e[t];
        },
        getInsertData: function(e, t) {
          if (e) {
            TS.clog.track("PFP_ACTION", {
              contexts: {
                growth: {
                  action: "autocomplete_select",
                  trigger: "member"
                }
              }
            });
            var n = t && t.length && 0 === t.indexOf("@");
            TS.boot_data.feature_name_tagging_client && (n = t && t.length && (0 === t.indexOf("@") || 0 === t.indexOf("＠")));
            var i = TS.tabcomplete.members.getDisplayTextForResult(e, n);
            if (TS.client && TS.client.msg_input && TS.utility.contenteditable.hasFocus(TS.client.msg_input.$input) && -1 === ["@everyone", "@channel", "@here"].indexOf(i)) {
              var r = TS.shared.getActiveModelOb();
              TS.client.msg_input.tabcomplete_completions[r.id] || (TS.client.msg_input.tabcomplete_completions[r.id] = []), -1 === TS.client.msg_input.tabcomplete_completions[r.id].indexOf(i) && TS.client.msg_input.tabcomplete_completions[r.id].push(i.substring(1));
            }
            if (TS.boot_data.feature_texty_mentions) {
              var a = TS.format.texty.shouldHighlightMention(e.id, i);
              return {
                text: i,
                format: {
                  slackmention: {
                    id: e.id,
                    label: i,
                    mention: a
                  }
                }
              };
            }
            return {
              text: i
            };
          }
        },
        getDisplayTextForResult: function(e, t) {
          return e.is_broadcast_keyword ? "@" + e.name : e.is_usergroup ? "@" + e.handle : f(e, t);
        },
        search: function(n, i, r) {
          var d, c = p(n, i.isUserSolicited),
            u = m(c);
          i.no_model_ob || (d = i.model_ob || TS.shared.getActiveModelOb());
          var f, g = l(d, i.no_model_ob),
            S = TS.user_groups.getActiveUserGroups();
          i.complete_member_specials && (f = TS.tabcomplete.members.getBroadcastKeywords(i.complete_member_specials));
          var T = a(d, n, {
            members: g,
            usergroups: S,
            broadcast_keywords: f
          });
          if (u(function() {
              r(null, T);
            }), d) {
            var b = _(g).map("id").without("USLACKBOT").value();
            if (b.length > e) {
              var v = TS.boot_data.page_needs_enterprise ? "W" : "U",
                y = TS.ui.frecency.getMostCommonWithPrefix(v, e),
                w = _.map(y, "id"),
                k = _.intersection(b, w),
                x = _.difference(b, k);
              b = k.concat(x.slice(0, e - k.length));
            }
            TS.log(1990, "Ensuring we have membership for " + b.length + " users in " + d.id + ": " + b), TS.membership.ensureChannelMembershipIsKnownForUsers(d.id, b).then(function(e) {
              TS.log(1990, "Got membership for " + b.length + " users in " + d.id + "; any fetches required? " + e), e && u(function() {
                r(null, T);
              });
            }), TS.boot_data.feature_app_permissions_api_site && TS.apps.permissions.ensureAppResourceMembershipIsKnown(d.id).then(function(e) {
              e && u(function() {
                r(null, T);
              });
            });
          }
          if (o(n, g, i)) {
            s(d, n, t).then(function(e) {
              var t = _(g).concat(e).compact().uniqBy("id").value(),
                i = a(d, n, {
                  members: t,
                  usergroups: S,
                  broadcast_keywords: f
                }),
                s = [];
              if (d) {
                var o = _.filter(i, "is_usergroup");
                s = _.reduce(o, function(e, t) {
                  var n = TS.user_groups.ensureUserGroupMembersInModelObNumIsKnown(t.id, d.id);
                  return n.isResolved() || e.push(n), e;
                }, []), TS.membership.ensureChannelMembershipIsKnownForUsers(d.id, _.map(i, "id"));
              }
              return s.length ? Promise.all(s).then(function() {
                u(function() {
                  r(null, i);
                });
              }) : h(T, i) || u(function() {
                r(null, i);
              }), null;
            });
          }
        },
        render: function(e, t, n) {
          "@" !== e[0] && (e = "@" + e);
          var i, r = TS.templates.tabcomplete_member_header({
            text: e
          });
          n.no_model_ob || (i = n.model_ob || TS.shared.getActiveModelOb());
          var a = t.map(function(t) {
              return t.is_broadcast_keyword ? t : t.is_usergroup ? c(i, t) : d(i, t, e);
            }),
            s = TS.templates.tabcomplete_member_results({
              results: a,
              is_client: !!TS.client
            });
          return TS.tabcomplete.renderMenu(r, s);
        },
        onSelect: function(e, t) {
          e && (t || (t = ""), t = t.replace(/^@/, ""), TS.ui.frecency.record(e, t));
        },
        onSelectedIndexChange: function(e) {
          TS.tabcomplete.onSelectedIndexChange(e);
        },
        getBroadcastKeywords: function(e) {
          var t = TS.utility.members.getBroadcastKeywordsForUser();
          return _.isArray(e) && (t = t.filter(function(t) {
            return -1 !== e.indexOf(t.id);
          })), t;
        },
        test: function() {
          var e = {
            IGNORED_SEARCH_TERMS: n,
            MIN_UNPREFIXED_MATCH_LENGTH: i
          };
          return Object.defineProperty(e, "IGNORED_SEARCH_TERMS", {
            get: function() {
              return n;
            },
            set: function(e) {
              n = e;
            }
          }), Object.defineProperty(e, "_shouldDoAsyncSearch", {
            get: function() {
              return o;
            },
            set: function(e) {
              o = e;
            }
          }), Object.defineProperty(e, "_getLocalMembers", {
            get: function() {
              return l;
            },
            set: function(e) {
              l = e;
            }
          }), Object.defineProperty(e, "_sortResults", {
            get: function() {
              return a;
            },
            set: function(e) {
              a = e;
            }
          }), Object.defineProperty(e, "SEARCH_DELAY_MS", {
            get: function() {
              return r;
            },
            set: function(e) {
              r = e;
            }
          }), e;
        }
      });
      var e = 100,
        t = 25,
        n = ["the", "and"],
        i = 3,
        r = 500,
        a = function(e, n, i) {
          var r = {
              allow_empty_query: !0,
              frecency: !0,
              limit: t,
              prefer_exact_match: !0
            },
            a = e && !e.is_im;
          a && (r.model_ob = e, r.prefer_channel_members = a);
          var s = n.replace(/^@/, ""),
            o = TS.sorter.search(s, i, r),
            l = _.map(o, "model_ob");
          return S(s, l);
        },
        s = function(e, t, n) {
          var i = {
            query: t.replace(/^@/, ""),
            max_api_results: n,
            include_org: !0,
            include_slackbot: !0,
            include_self: !0,
            full_profile_filter: !1,
            limit_by_model_relevancy: e
          };
          return e && !e.is_im && (i.determine_membership_for_channel = e.id), TS.members.promiseToSearchMembers(i).then(function(e) {
            return e && e.items && e.items.length ? e.items : [];
          });
        },
        o = function(e, t, r) {
          if (!TS.boot_data.page_needs_enterprise && !TS.lazyLoadMembersAndBots()) return !1;
          if (0 !== e.indexOf("@")) {
            if (-1 !== n.indexOf(e)) return !1;
            if (e.length < i) return !1;
            if (r.member_prefix_required) return !1;
            if (TS.model.prefs.require_at) return !1;
          }
          return !t || !t.length || 1 !== t.length || "@" + t[0].name !== e;
        },
        l = function(e, t) {
          var n = TS.members.getActiveMembersWithSelfAndSlackbot();
          return t || (n = n.filter(function(t) {
            return TS.utility.members.isMemberRelevantToModel(t, e);
          })), n;
        },
        d = function(e, t) {
          var n, i, r = [],
            a = [];
          TS.boot_data.feature_name_tagging_client ? (n = TS.members.getPrefCompliantMemberName(t, !1, !1), i = TS.members.getMemberSecondaryName(t), r.push("primary_name"), a.push("secondary_name")) : (r.push("username"), a.push("realname"), n = t.name, i = TS.members.getMemberRealName(t));
          var s, o, l, d = e && !e.is_im;
          TS.boot_data.feature_app_permissions_api_site && t.is_app_user ? (l = TS.apps.permissions.getAppUserResourceMembershipStatus(t.id, e.id), o = l.is_known, s = !l.is_member) : d && (l = TS.membership.getUserChannelMembershipStatus(t.id, e), (o = l.is_known) && (s = !l.is_member));
          var c;
          if (TS.boot_data.feature_shared_channels_client && TS.utility.teams.isMemberExternal(t)) {
            var _ = TS.teams.getTeamById(t.team_id);
            _ && _.name && (c = _.name);
          }
          return {
            is_member: !0,
            member: t,
            primary_name_classes: r.join(" "),
            secondary_name_classes: a.join(" "),
            show_channel_membership: d,
            member_does_not_belong_to_channel: s,
            secondary_name: i,
            primary_name: n,
            membership_status_is_known: o,
            team_name: c
          };
        },
        c = function(e, t) {
          var n = 0;
          return e && (n = TS.user_groups.getUserGroupMembersNotInModelObCount(t.id, e.id)), {
            description: t.description || t.name,
            is_usergroup: !0,
            members_not_in_channel: n,
            usergroup: t
          };
        },
        u = function(e, t) {
          return !!e && (!!t || !(e.length < i) && !_.includes(n, e.toLowerCase()));
        },
        m = function(e) {
          var t = Date.now() + e;
          return function(e) {
            var n = Date.now(),
              i = Math.max(0, t - n);
            setTimeout(e, i);
          };
        },
        p = function(e, t) {
          return 0 === e.indexOf("@") ? 0 : t ? 0 : r;
        },
        f = function(e, t) {
          var n = e.name;
          if (TS.boot_data.feature_name_tagging_client) n = TS.members.getPrefCompliantMemberName(e);
          else if (TS.boot_data.feature_shared_channels_client && TS.utility.teams.isMemberExternal(e)) {
            var i = TS.teams.getTeamById(e.team_id),
              r = e.team_id;
            i && i.domain && (r = i.domain), n += "+" + r, i || TS.console.warn("team " + e.team_id + " not in local model so not avail for tabcomplete");
          }
          var a = TS.model.team.prefs.require_at_for_mention || TS.model.prefs.require_at;
          return (t || a) && (n = "@" + n), n;
        },
        h = function(e, t) {
          return !t && !e || !(!t || !e) && (e.length === t.length && _.isEqualWith(e, t, function(e, t) {
            return e.id === t.id;
          }));
        },
        g = function(e, t) {
          var n = e.replace(/^@/, "").toLowerCase();
          return t.name === n;
        },
        S = function(e, t) {
          return Array.isArray(t) ? TS.model.prefs.require_at || "you" !== e ? t : t.filter(function(e) {
            return e.id !== TS.model.user.id;
          }) : t;
        };
    }();
  },
  2754: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("tabcomplete", {
        positionUIRelativeToInput: function(e, t, n) {
          if (e && t) {
            var i = $(t).offset();
            e.style.left = i.left + "px";
            var r;
            if (n) {
              var a = i.top + $(t).height() + 2;
              e.style.top = a + "px", r = $(window).height() - a;
            } else e.style.bottom = $(window).height() - i.top + "px", r = i.top;
            var s = _.clamp(r - $(e).find(".tab_complete_ui_header").outerHeight() - 2, 454);
            $(e).find(".tab_complete_ui_scroller").css("maxHeight", s + "px");
          }
        },
        render: function(e, t, n, i) {
          switch (e) {
            case "members":
              return TS.tabcomplete.members.render(t, n, i);
            case "commands":
              return TS.tabcomplete.commands.render(t, n, i);
            case "emoji":
              return TS.tabcomplete.emoji.render(t, n, i);
            case "channels":
              return TS.tabcomplete.channels.render(t, n, i);
            default:
              TS.warn('TS.tabcomplete: unknown render type "' + e + '"');
          }
        },
        renderMenu: function(e, t) {
          return TS.templates.tabcomplete_menu({
            safe_header_html: new Handlebars.SafeString(e),
            safe_results_html: new Handlebars.SafeString(t)
          });
        },
        onSelectedIndexChange: function(e) {
          var t = $(".tab_complete_ui_item");
          t.removeClass("active"), t.eq(e).addClass("active"), t.eq(e).scrollintoview({
            duration: 0
          });
        },
        isAllowedSurroundingCharacter: function(e) {
          return !e || !e.trim() || "" === TS.tabcomplete.trimSurroundingSymbols(e);
        },
        trimSurroundingSymbols: function(e) {
          return e ? e.replace(t, "") : "";
        },
        test: function() {
          return {
            ALLOWED_PRECEDING_SYMBOLS: e
          };
        }
      });
      var e = ["{", "[", "(", "*", "_", "/", '"', "“", "'", "‘", "<"],
        t = function(e) {
          var t = e.map(function(e) {
            return "\\" + e;
          });
          return new RegExp("^(" + t.join("|") + ")+", "g");
        }(e);
    }();
  },
  2992: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.channels.interop", {
        onStart: function() {
          TS.useRedux() && (e = TS.redux.bindSingleArgSelectorToStore(TS.interop.redux.entities.channels.getChannelById));
        },
        maybeWrapEntity: function(e) {
          return TS.useRedux() && e && e.id ? b(e.id) : e;
        },
        getSetCounts: function() {
          return _.chain(t).map(function(e, t) {
            return {
              key: t,
              value: e
            };
          }).sortBy("value").reverse().value();
        },
        getReduxSetCounts: function() {
          return _.chain(n).map(function(e, t) {
            return {
              key: t,
              value: e
            };
          }).sortBy("value").reverse().value();
        },
        test: function() {
          return {};
        }
      });
      var e, t = {},
        n = {},
        i = {},
        r = function(e, t, n) {
          TS.metrics.count("redux_unknown_model_key_access_v8");
          var i = {
              message: "Getting or setting an unknown key on a model object, key:" + n + ". Immediate caller: " + e,
              stack: t
            },
            r = e.match(/\((.+):(\d+:\d+)\)/);
          r && 3 == r.length && (i.fileName = r[1], i.lineNumber = r[2]), $.post(TS.boot_data.beacon_error_url, {
            description: "redux_unknown_model_key_access_caller_v8",
            error_json: JSON.stringify(i),
            team: _.get(TS, "model.team.id", "none"),
            user: TS.boot_data.user_id,
            version: TS.boot_data.version_ts
          });
        },
        a = function() {
          return window.Proxy && T();
        },
        s = function(e, t, n) {
          if (e && t) {
            var i = {
              id: e
            };
            i[t] = n, TS.redux.dispatch(TS.interop.redux.entities.channels.updateOneKeyForChannel(i));
          }
        },
        o = ["_show_in_list_even_though_no_unreads", "deleted", "has_draft", "is_archived", "is_channel", "is_group", "is_im", "is_mpim", "is_open", "is_org_shared", "is_self_im", "is_shared", "is_slackbot_im", "is_starred", "members", "priority", "unread_cnt", "unread_highlight_cnt"],
        l = ["_archive_msgs", "_checking_at_channel_status", "_consistency_has_been_checked", "_consistency_is_being_checked", "_delayed_fetch_timer", "_did_defer_initial_msg_history", "_display_name_lc", "_display_name_truncated", "_has_auto_scrolled", "_history_fetched_since_last_connect", "_i18n_ns_history", "_i18n_ns", "_internal_name", "_jumper_previous_name_match", "_latest_via_users_counts", "_mark_most_recent_read_timer", "_marked_reason", "_members", "_mention_count_display_via_users_counts", "_name_lc", "_needs_unread_recalc", "_prev_last_read", "_score", "_temp_last_read", "_temp_unread_cnt", "_users_counts_info", "active_members", "create_channel", "created", "creator", "date_created", "enterprise_id", "fetched_history_after_scrollback_time", "has_fetched_history_after_scrollback", "has_pins", "history_changed", "history_fetch_failed", "history_fetch_retries", "history_is_being_fetched", "id", "inviter", "is_default", "is_general", "is_global_shared", "is_limited", "is_member", "is_moved", "is_org_default", "is_org_mandatory", "is_private", "is_read_only", "last_made_active", "last_msg_input", "last_read", "latest", "length", "member", "msgs", "name_normalized", "name", "needs_created_message", "needs_invited_message", "needs_joined_message", "never_needs_joined_msg", "note", "num_members", "old_name", "oldest_msg_ts", "opened_this_session", "parent_group", "pinned_items", "pinned_items_count", "presence", "previous_names", "purpose", "scroll_top", "shared_team_ids", "team_url", "tooltip", "topic", "unread_count_display", "unread_count", "unread_highlight_cnt_in_client", "unread_highlights", "unreads", "user", "was_archived_this_session"];
      TS.useReactSidebar() ? o.push("_display_name") : l.push("_display_name");
      var d = ["_get", "_is_interop_channel_object", "_set", "_setWithReduxAction", "attributes", "children", "disabled", "is_broadcast_keyword", "is_divider", "is_emoji", "is_usergroup", "is_view", "nodeType", "old_name", "props_to_define", "selector", "then", "title", "toJSON", "window"],
        c = _.reduce(o, function(e, t) {
          return e[t] = !0, e;
        }, {}),
        u = _.reduce(l, function(e, t) {
          return e[t] = !0, e;
        }, {}),
        m = _.reduce(d, function(e, t) {
          return e[t] = !0, e;
        }, {}),
        p = {},
        f = function(t, n) {
          if (!u[n] && !c[n] && !m[n] && _.isString(n)) {
            TS.console.logStackTrace("Accessing an unknown key " + n + " on a model object");
            var a = TS.console.getStackTrace(),
              s = _.get(a.split("\n"), "[2]");
            if (i[n] || (i[n] = !0, r(s, a, n)), T()) throw new Error("Dev only warning: Trying to get an unknown field " + n + " from a model object. If this is not a typo and you are relying on this property, please try and store this data outside of the model ob, or add to the model_ob_keys_as_map whitelist in TS.redux.channels.interop.source.js. Questions? Feel free to ask in #devel-redux");
            var o = e(t.id);
            return o && o[n];
          }
          return t[n];
        },
        h = function(n, a, s) {
          if (_.isString(a) && (t[a] = (t[a] || 0) + 1), !u[a] && !c[a] && _.isString(a)) {
            TS.console.logStackTrace("Setting an unknown key " + a + " on a model object");
            var o = TS.console.getStackTrace(),
              l = _.get(o.split("\n"), "[2]");
            if (i[a] || (i[a] = !0, r(l, o, a)), T()) throw new Error("Dev only warning: Trying to set an unknown field " + a + " on a model object. If this is not a typo and you are relying on this property, please try and store this data outside of the model ob, or add to the model_ob_keys_as_map whitelist in TS.redux.channels.interop.source.js. Questions? Feel free to ask in #devel-redux");
            var d = e(n.id);
            d && (d[a] = s);
          }
          return n[a] = s, !0;
        },
        g = function(e) {
          this.id = e, Object.defineProperties(this, this.props_to_define);
        },
        S = {};
      _.without(l, "id").forEach(function(e) {
        S[e] = {
          enumerable: !0,
          get: function() {
            return this._get(e);
          },
          set: function(t) {
            return this._set(e, t);
          }
        }, o.forEach(function(e) {
          S[e] = {
            enumerable: !0,
            get: function() {
              return this._get(e);
            },
            set: function(t) {
              return this._setWithReduxAction(e, t);
            }
          };
        });
      }), g.prototype.props_to_define = S, g.prototype._is_interop_channel_object = !0, g.prototype._get = function(t) {
        var n = e(this.id);
        if (n) return n[t];
      }, g.prototype._set = function(t, n) {
        var i = e(this.id);
        return i && (i[t] = n), !0;
      }, g.prototype._setWithReduxAction = function(t, i) {
        var r = e(this.id);
        return r && r[t] !== i && (s(this.id, t, i), n[t] = (n[t] || 0) + 1), !0;
      };
      var T = function() {
          return TS.boot_data && ("dev" === TS.boot_data.version_ts || "local_js" === TS.boot_data.version_ts);
        },
        b = function(e) {
          if (!e) throw new Error("Must pass in a valid id to _createWrappedEntityById");
          var t, n = a();
          return p[e] ? t = p[e] : (t = new g(e), n && (t = new window.Proxy(t, {
            get: function(e, t) {
              return f(e, t);
            },
            set: function(e, t, n) {
              return h(e, t, n);
            }
          })), p[e] = t), t;
        };
    }();
  },
  3046: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.prefs", {
        onStart: function() {
          TS.useRedux() && n();
        },
        setUserPrefs: function(e) {
          TS.useRedux() && TS.redux.dispatch(TS.interop.redux.features.prefs.setUserPrefs(e));
        },
        setTeamPrefs: function(e) {
          TS.useRedux() && TS.redux.dispatch(TS.interop.redux.features.prefs.setTeamPrefs(e));
        },
        test: function() {
          return {};
        }
      });
      var e = function() {
          TS.redux.dispatch(TS.interop.redux.features.prefs.forcePrefRefresh());
        },
        t = _.throttle(e, 1e3),
        n = function() {
          _.filter(TS.prefs, function(e, t) {
            return t.indexOf("changed_sig") > -1;
          }).forEach(function(e) {
            e.add(t);
          });
        };
    }();
  },
  3079: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.custom_status", {
        onStart: function() {
          TS.useRedux() && n();
        },
        updateStatusForMember: function(e) {
          e && e.id && e.profile && TS.redux.dispatch(TS.interop.redux.features.customStatus.updateStatus({
            memberId: e.id,
            status: {
              emoji: e.profile.status_emoji,
              text: e.profile.status_text
            }
          }));
        },
        addToBulkUpsertPayload: function(t) {
          e.push(t);
        },
        test: function() {
          return {};
        }
      });
      var e = [],
        t = function() {
          e.length && (TS.redux.dispatch(TS.interop.redux.features.customStatus.bulkUpdateStatus(e)), e = []);
        },
        n = function() {
          TS.members.changed_current_status_sig.add(TS.redux.custom_status.updateStatusForMember), TS.members.batch_upserted_sig.add(t);
        };
    }();
  },
  3142: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.members", {
        onStart: function() {
          TS.useRedux() && TS.boot_data.feature_store_members_in_redux && (r(), e = TS.redux.bindSingleArgSelectorToStore(TS.interop.redux.entities.members.getAllMembers), t = TS.redux.bindSingleArgSelectorToStore(TS.interop.redux.entities.members.getMemberById), Object.defineProperty(TS.model, "members", {
            get: function() {
              return TS.redux.members.getAllMembers();
            },
            set: function() {
              return TS.error("TS.redux.members: trying to set TS.model.members???"), !1;
            }
          }));
        },
        getMemberById: function(e) {
          var n = t(e);
          return n && n.id === e ? n : null;
        },
        getAllMembers: function() {
          return _.values(e());
        },
        addMember: function(e) {
          e && TS.redux.dispatch(TS.interop.redux.entities.members.addMember(e));
        },
        addToBulkUpsertPayload: function(e) {
          n.push(e);
        },
        test: function() {
          var e = {};
          return Object.defineProperty(e, "_bulk_upsert_payload", {
            get: function() {
              return n;
            },
            set: function(e) {
              n = e;
            }
          }), e;
        }
      });
      var e, t, n = [],
        i = function() {
          n.length && (TS.redux.dispatch(TS.interop.redux.entities.members.bulkAddMembers(n)), n = []);
        },
        r = function() {
          TS.members.batch_upserted_sig.add(i);
        };
    }();
  },
  3180: function(e, t) {
    ! function() {
      "use strict";

      function e() {
        TS.redux.all_unreads.updateHasUnreadThreads(TS.model.threads_has_unreads), TS.redux.all_unreads.updateThreadsMentionCount(TS.model.threads_mention_count);
      }

      function t() {
        _.get(TS, "client.threads.threads_unread_changed") && TS.client.threads.threads_unread_changed.add(e);
      }
      TS.registerModule("redux.all_unreads", {
        onStart: function() {
          TS.useRedux() && t();
        },
        updateHasUnreads: function(e) {
          "boolean" == typeof e && TS.redux.dispatch(TS.interop.redux.features.allUnreads.updateHasUnreads(e));
        },
        updateHasUnreadThreads: function(e) {
          "boolean" == typeof e && TS.redux.dispatch(TS.interop.redux.features.allUnreads.updateHasUnreadThreads(e));
        },
        updateThreadsMentionCount: function(e) {
          _.isInteger(e) && TS.redux.dispatch(TS.interop.redux.features.allUnreads.updateThreadsMentionCount(e));
        }
      });
    }();
  },
  3184: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.reactions", {
        updateReaction: function(e, t) {
          e && TS.redux.dispatch(TS.interop.redux.entities.reactions.updateReaction({
            key: e,
            reactions: t
          }));
        }
      });
    }();
  },
  3426: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("apps.permissions", {
        ensureAppResourceMembershipIsKnown: function(n) {
          return !t.hasOwnProperty(n) || t[n].ts && t[n].ts < Date.now() - e ? (t = {}, t[n] = {
            ts: null,
            apps: []
          }, TS.api.call("apps.permissions.listForResource", {
            channel: n
          }).then(function(e) {
            return t[n].ts = Date.now(), t[n].apps = _.get(e, "data.apps", []), !0;
          })) : Promise.resolve(!1);
        },
        promiseToGetAppsForResource: function(e) {
          return TS.apps.permissions.ensureAppResourceMembershipIsKnown(e).then(function() {
            return t[e].apps;
          });
        },
        getAppUserResourceMembershipStatus: function(e, n) {
          var i = t[n];
          return i ? {
            is_known: !!i.ts,
            is_member: _.findIndex(i.apps, function(t) {
              return t.app_user_id === e;
            }) > -1
          } : {
            is_known: !1,
            is_member: !1
          };
        }
      });
      var e = 12e4,
        t = {};
    }();
  },
  3627: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.bots", {
        onStart: function() {
          TS.useRedux() && TS.boot_data.feature_store_members_in_redux && (r(), e = TS.redux.bindSingleArgSelectorToStore(TS.interop.redux.entities.bots.getAllBots), t = TS.redux.bindSingleArgSelectorToStore(TS.interop.redux.entities.bots.getBotById), Object.defineProperty(TS.model, "bots", {
            get: function() {
              return TS.redux.bots.getAllBots();
            },
            set: function() {
              return TS.error("TS.redux.bots: trying to set TS.model.bots???"), !1;
            }
          }));
        },
        getBotById: function(e) {
          var n = t(e);
          return n && n.id === e ? n : null;
        },
        getAllBots: function() {
          return _.values(e());
        },
        addBot: function(e) {
          e && TS.redux.dispatch(TS.interop.redux.entities.bots.addBot(e));
        },
        addToBulkUpsertPayload: function(e) {
          n.push(e);
        },
        test: function() {
          var e = {};
          return Object.defineProperty(e, "_bulk_upsert_payload", {
            get: function() {
              return n;
            },
            set: function(e) {
              n = e;
            }
          }), e;
        }
      });
      var e, t, n = [],
        i = function() {
          n.length && (TS.redux.dispatch(TS.interop.redux.entities.bots.bulkAddBots(n)), n = []);
        },
        r = function() {
          TS.bots.batch_upserted_sig.add(i);
        };
    }();
  },
  3633: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.messages", {
        onStart: function() {
          TS.useRedux() && TS.boot_data.feature_react_messages && e();
        },
        addMessages: function(e, t, n) {
          if (TS.redux.dispatch(TS.interop.redux.entities.messages.addMessages(e)), t) {
            var i = e && e[0] && e[0].channel;
            TS.redux.dispatch(TS.interop.redux.entities.channelHistory.addTimestamps({
              channelId: i,
              timestamps: _.map(e, "ts"),
              reachedEnd: n
            }));
          }
        },
        addMessage: function(e) {
          e && e.channel && e.ts && (TS.redux.dispatch(TS.interop.redux.entities.messages.addMessages([e])), TS.redux.dispatch(TS.interop.redux.entities.channelHistory.addTimestamps({
            channelId: e.channel,
            timestamps: [e.ts],
            append: !0
          })));
        },
        replaceMessage: function(e) {
          e && e.channel && e.ts && TS.redux.dispatch(TS.interop.redux.entities.messages.addMessages([e]));
        },
        removeMessage: function(e) {
          e && e.channel && e.ts && (TS.redux.dispatch(TS.interop.redux.entities.channelHistory.removeTimestamp({
            channelId: e.channel,
            timestamp: e.ts
          })), TS.redux.dispatch(TS.interop.redux.entities.messages.removeMessage(e)));
        }
      });
      var e = function() {
        function e(e, t) {
          TS.redux.messages.addMessage(t);
        }

        function t(e, t) {
          TS.redux.messages.replaceMessage(t);
        }

        function n(e, t) {
          TS.redux.messages.removeMessage(t);
        }
        TS.ims.message_received_sig.add(e), TS.mpims.message_received_sig.add(e), TS.groups.message_received_sig.add(e), TS.channels.message_received_sig.add(e), TS.ims.message_changed_sig.add(t), TS.mpims.message_changed_sig.add(t), TS.groups.message_changed_sig.add(t), TS.channels.message_changed_sig.add(t), TS.ims.message_removed_sig.add(n), TS.mpims.message_removed_sig.add(n), TS.groups.message_removed_sig.add(n), TS.channels.message_removed_sig.add(n);
      };
    }();
  },
  3890: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("utility.ui", {
        onStart: function() {},
        isElementVisible: function(r, a, s) {
          var o = window.getComputedStyle(r);
          return !!n(a, s).all && (!!i(a) && (!!t(o) && !!e(r)));
        }
      });
      var e = function(e) {
          for (; e.parentNode && "HTML" !== e.tagName;) {
            var n = window.getComputedStyle(e);
            if (!t(n)) return !1;
            e = e.parentNode;
          }
          return !0;
        },
        t = function(e) {
          return "none" !== e.display && "hidden" !== e.visibility && 0 != e.opacity && 0 != e.maxHeight && 0 != e.maxWidth;
        },
        n = function(e, t) {
          t = t || 0;
          var n = (window.innerHeight || document.documentElement.clientHeight) + t,
            i = (window.innerWidth || document.documentElement.clientWidth) + t,
            r = e.top > -t,
            a = e.left > -t,
            s = e.right <= i,
            o = e.bottom <= n;
          return {
            all: r && s && o && a,
            top: r,
            right: s,
            bottom: o,
            left: a
          };
        },
        i = function(e) {
          return e.height > 0 && e.width > 0;
        };
    }();
  },
  3914: function(e, t) {
    ! function() {
      "use strict";
      TS.registerModule("redux.socket", {
        onStart: function() {
          TS.useRedux() && TS.boot_data.feature_react_messages && (TS.isSocketManagerEnabled() ? (TS.interop.SocketManager.connectedSig.add(e), TS.interop.SocketManager.disconnectedSig.add(t), TS.interop.SocketManager.troubleConnectingSig.add(n), TS.interop.SocketManager.reconnectingSig.add(i)) : (TS.ms.connected_sig.add(e), TS.ms.trouble_sig.add(n), TS.ms.disconnected_sig.add(t), TS.ms.reconnecting_sig.add(i)));
        },
        test: function() {
          return {
            socketConnectedMS: e
          };
        }
      });
      var e = function(e) {
          TS.redux.dispatch(TS.interop.redux.features.socket.connected(e));
        },
        t = function() {
          TS.redux.dispatch(TS.interop.redux.features.socket.disconnected());
        },
        n = function() {
          TS.redux.dispatch(TS.interop.redux.features.socket.troubleConnecting());
        },
        i = function() {
          TS.redux.dispatch(TS.interop.redux.features.socket.reconnecting());
        };
    }();
  },
  3915: function(e, t, n) {
    n(2499), n(2362), n(2423), n(2526), n(2366), n(2365), n(2496), n(2493), n(2494), n(2495), n(2533), n(2491), n(2505), n(3180), n(2501), n(2992), n(2504), n(3079), n(2502), n(3142), n(3627), n(2503), n(3046), n(3184), n(3633), n(3914), n(2389), n(2473), n(2387), n(2388), n(2391), n(2663), n(2425), n(2456), n(2449), n(2507), n(2459), n(2485), n(2516), n(2528), n(2676), n(2471), n(2492), n(2527), n(2367), n(3426), n(2371), n(2472), n(2498), n(2511), n(2488), n(2487), n(2450), n(2486), n(2429), n(2532), n(2530), n(2529), n(2531), n(2665), n(2670), n(2668), n(2675), n(2331), n(2672), n(2667), n(3890), n(2451), n(2514), n(2482), n(2475), n(2476), n(2477), n(2624), n(2478), n(2479), n(2480), n(2481), n(2426), n(2422), n(2524), n(2474), n(2468), n(2462), n(2466), n(2489), n(2613), n(2538), n(2550), n(2655), n(2651), n(2446), n(2656), n(2457), n(2640), n(2497), n(2650), n(2464), n(2508), n(2631), n(2649), n(2623), n(2633), n(2654), n(2427), n(2620), n(2627), n(2393), n(2452), n(2612), n(2520), n(2453), n(2642), n(2647), n(2657), n(2539), n(2335), n(2518), n(2455), n(2330), n(2309), n(2673), n(2661), n(2662), n(2660), n(2664), n(2658), n(2460), n(2467), n(2619), n(2616), n(2543), n(2641), n(2369), n(2368), n(2535), n(2674), n(2677), n(2666), n(2652), n(2634), n(2363), n(2506), n(2648), n(2669), n(2637), n(2537), n(2513), n(2519), n(2671), n(2746), n(2754), n(2753), n(2750), n(2751), e.exports = n(2752);
  }
}, [3915]);
