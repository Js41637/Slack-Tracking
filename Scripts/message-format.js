webpackJsonp([72], {
  0: function(n, e) {
    n.exports = function(n) {
      "undefined" != typeof execScript ? execScript(n) : eval.call(null, n);
    };
  },
  109: function(n, e, r) {
    r(0)(r(138));
  },
  138: function(n, e) {
    n.exports = "(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.MessageFormat = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n/**\n * formatting information\n **/\nmodule.exports = {\n  number: {\n    decimal: {\n      style: 'decimal'\n    },\n    integer: {\n      style: 'decimal',\n      maximumFractionDigits: 0\n    },\n    currency: {\n      style: 'currency',\n      currency: 'USD'\n    },\n    percent: {\n      style: 'percent'\n    },\n    default: {\n      style: 'decimal'\n    }\n  },\n  date: {\n    short: {\n      month: 'numeric',\n      day: 'numeric',\n      year: '2-digit'\n    },\n    medium: {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    },\n    long: {\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric'\n    },\n    full: {\n      month: 'long',\n      day: 'numeric',\n      year: 'numeric',\n      weekday: 'long'\n    },\n    default: {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }\n  },\n  time: {\n    short: {\n      hour: 'numeric',\n      minute: 'numeric'\n    },\n    medium: {\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    },\n    long: {\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      timeZoneName: 'short'\n    },\n    full: {\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      timeZoneName: 'short'\n    },\n    default: {\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    }\n  }\n}\n\n},{}],2:[function(require,module,exports){\n/* globals Intl */\n'use strict'\n\nvar formats = require('format-message-formats')\nvar lookupClosestLocale = require('lookup-closest-locale')\nvar plurals = require('./plurals')\n\nmodule.exports = function interpret (locale, ast) {\n  return interpretSubs(locale, ast)\n}\n\n// useful for detecting what the resolved locale will be\nmodule.exports.closestSupportedLocale = function (locale) {\n  return lookupClosestLocale(locale, plurals)\n}\n\nfunction interpretSubs (locale, elements, parent) {\n  elements = elements.map(function (element) {\n    return interpretElement(locale, element, parent)\n  })\n\n  // optimize common case\n  if (elements.length === 1) {\n    return elements[0]\n  }\n\n  return function format (args) {\n    var message = ''\n    for (var e = 0, ee = elements.length; e < ee; ++e) {\n      message += typeof elements[e] === 'string'\n        ? elements[e]\n        : elements[e](args)\n    }\n    return message\n  }\n}\n\nfunction interpretElement (locale, element, parent) {\n  if (typeof element === 'string') {\n    return element\n  }\n\n  var id = element[0]\n  var type = element[1]\n  var style = element[2]\n  var offset = 0\n  var options\n\n  if (id === '#') {\n    id = parent[0]\n    type = 'number'\n    offset = parent[2]\n    style = null\n  }\n\n  switch (type) {\n    case 'number':\n    case 'ordinal': // TODO: rbnf\n    case 'spellout': // TODO: rbnf\n    case 'duration': // TODO: duration\n      return interpretNumber(locale, id, offset, style)\n    case 'date':\n    case 'time':\n      return interpretDateTime(locale, id, type, style)\n    case 'plural':\n    case 'selectordinal':\n      offset = element[2]\n      options = element[3]\n      return interpretPlural(locale, id, type, offset, options)\n    case 'select':\n      return interpretSelect(locale, id, style)\n    default:\n      return interpretSimple(id)\n  }\n}\n\nfunction helper (type, style, locale) {\n  var options = formats[type][style] || formats[type].default\n  var cache = options.cache || (options.cache = {})\n  var format = cache[locale] || (cache[locale] = type === 'number'\n    ? Intl.NumberFormat(locale, options).format\n    : Intl.DateTimeFormat(locale, options).format\n  )\n  return format\n}\n\nfunction interpretNumber (locale, id, offset, style) {\n  offset = offset || 0\n  var frmt = helper('number', style, locale)\n  return function format (args) {\n    return frmt(+getArg(id, args) - offset)\n  }\n}\n\nfunction interpretDateTime (locale, id, type, style) {\n  var frmt = helper(type, style, locale)\n  return function format (args) {\n    return frmt(getArg(id, args))\n  }\n}\n\nfunction interpretPlural (locale, id, type, offset, children) {\n  var parent = [ id, type, offset ]\n  var options = {}\n  Object.keys(children).forEach(function (key) {\n    options[key] = interpretSubs(locale, children[key], parent)\n  })\n\n  var closest = lookupClosestLocale(locale, plurals)\n  var plural = type === 'selectordinal'\n    ? plurals[closest].ordinal\n    : plurals[closest].cardinal\n  if (!plural) return options.other\n\n  return function format (args) {\n    var clause =\n      options['=' + +getArg(id, args)] ||\n      options[plural(getArg(id, args) - offset)] ||\n      options.other\n    if (typeof clause === 'string') return clause\n    return clause(args)\n  }\n}\n\nfunction interpretSelect (locale, id, children) {\n  var options = {}\n  Object.keys(children).forEach(function (key) {\n    options[key] = interpretSubs(locale, children[key], null)\n  })\n  return function format (args) {\n    var clause =\n      options[getArg(id, args)] ||\n      options.other\n    if (typeof clause === 'string') return clause\n    return clause(args)\n  }\n}\n\nfunction interpretSimple (id) {\n  return function format (args) {\n    return '' + getArg(id, args)\n  }\n}\n\nfunction getArg (id, args) {\n  if (args[id] !== undefined) return args[id]\n  var parts = id.split('.')\n  if (parts.length > 1) {\n    var i = 0\n    var l = parts.length\n    var a = args\n    for (i; i < l; i++) {\n      a = a[parts[i]]\n      if (a === undefined) return\n    }\n    return a\n  }\n}\n\n},{\"./plurals\":3,\"format-message-formats\":1,\"lookup-closest-locale\":4}],3:[function(require,module,exports){\n'use strict'\nvar f = [\n  function (s) {\n    var n = +s\n    return n === 1 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return 0 <= n && n <= 1 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var n = +s\n    return i === 0 || n === 1 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 0 ? 'zero'\n      : n === 1 ? 'one'\n      : n === 2 ? 'two'\n      : 3 <= n % 100 && n % 100 <= 10 ? 'few'\n      : 11 <= n % 100 && n % 100 <= 99 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    return i === 1 && v === 0 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n % 10 === 1 && n % 100 !== 11 ? 'one'\n      : (2 <= n % 10 && n % 10 <= 4) && (n % 100 < 12 || 14 < n % 100) ? 'few'\n      : n % 10 === 0 || (5 <= n % 10 && n % 10 <= 9) || (11 <= n % 100 && n % 100 <= 14) ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n % 10 === 1 && (n % 100 !== 11 && n % 100 !== 71 && n % 100 !== 91) ? 'one'\n      : n % 10 === 2 && (n % 100 !== 12 && n % 100 !== 72 && n % 100 !== 92) ? 'two'\n      : ((3 <= n % 10 && n % 10 <= 4) || n % 10 === 9) && ((n % 100 < 10 || 19 < n % 100) && (n % 100 < 70 || 79 < n % 100) && (n % 100 < 90 || 99 < n % 100)) ? 'few'\n      : n !== 0 && n % 1000000 === 0 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    var f = +(s + '.').split('.')[1]\n    return v === 0 && i % 10 === 1 && i % 100 !== 11 || f % 10 === 1 && f % 100 !== 11 ? 'one'\n      : v === 0 && (2 <= i % 10 && i % 10 <= 4) && (i % 100 < 12 || 14 < i % 100) || (2 <= f % 10 && f % 10 <= 4) && (f % 100 < 12 || 14 < f % 100) ? 'few'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    return i === 1 && v === 0 ? 'one'\n      : (2 <= i && i <= 4) && v === 0 ? 'few'\n      : v !== 0 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 0 ? 'zero'\n      : n === 1 ? 'one'\n      : n === 2 ? 'two'\n      : n === 3 ? 'few'\n      : n === 6 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var t = +('' + s).replace(/^[^.]*.?|0+$/g, '')\n    var n = +s\n    return n === 1 || t !== 0 && (i === 0 || i === 1) ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    var f = +(s + '.').split('.')[1]\n    return v === 0 && i % 100 === 1 || f % 100 === 1 ? 'one'\n      : v === 0 && i % 100 === 2 || f % 100 === 2 ? 'two'\n      : v === 0 && (3 <= i % 100 && i % 100 <= 4) || (3 <= f % 100 && f % 100 <= 4) ? 'few'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    return i === 0 || i === 1 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    var f = +(s + '.').split('.')[1]\n    return v === 0 && (i === 1 || i === 2 || i === 3) || v === 0 && (i % 10 !== 4 && i % 10 !== 6 && i % 10 !== 9) || v !== 0 && (f % 10 !== 4 && f % 10 !== 6 && f % 10 !== 9) ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 1 ? 'one'\n      : n === 2 ? 'two'\n      : 3 <= n && n <= 6 ? 'few'\n      : 7 <= n && n <= 10 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 1 || n === 11 ? 'one'\n      : n === 2 || n === 12 ? 'two'\n      : ((3 <= n && n <= 10) || (13 <= n && n <= 19)) ? 'few'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    return v === 0 && i % 10 === 1 ? 'one'\n      : v === 0 && i % 10 === 2 ? 'two'\n      : v === 0 && (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80) ? 'few'\n      : v !== 0 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    var n = +s\n    return i === 1 && v === 0 ? 'one'\n      : i === 2 && v === 0 ? 'two'\n      : v === 0 && (n < 0 || 10 < n) && n % 10 === 0 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var t = +('' + s).replace(/^[^.]*.?|0+$/g, '')\n    return t === 0 && i % 10 === 1 && i % 100 !== 11 || t !== 0 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 1 ? 'one'\n      : n === 2 ? 'two'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 0 ? 'zero'\n      : n === 1 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var n = +s\n    return n === 0 ? 'zero'\n      : (i === 0 || i === 1) && n !== 0 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var f = +(s + '.').split('.')[1]\n    var n = +s\n    return n % 10 === 1 && (n % 100 < 11 || 19 < n % 100) ? 'one'\n      : (2 <= n % 10 && n % 10 <= 9) && (n % 100 < 11 || 19 < n % 100) ? 'few'\n      : f !== 0 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var v = (s + '.').split('.')[1].length\n    var f = +(s + '.').split('.')[1]\n    var n = +s\n    return n % 10 === 0 || (11 <= n % 100 && n % 100 <= 19) || v === 2 && (11 <= f % 100 && f % 100 <= 19) ? 'zero'\n      : n % 10 === 1 && n % 100 !== 11 || v === 2 && f % 10 === 1 && f % 100 !== 11 || v !== 2 && f % 10 === 1 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    var f = +(s + '.').split('.')[1]\n    return v === 0 && i % 10 === 1 || f % 10 === 1 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    var n = +s\n    return i === 1 && v === 0 ? 'one'\n      : v !== 0 || n === 0 || n !== 1 && (1 <= n % 100 && n % 100 <= 19) ? 'few'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 1 ? 'one'\n      : n === 0 || (2 <= n % 100 && n % 100 <= 10) ? 'few'\n      : 11 <= n % 100 && n % 100 <= 19 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    return i === 1 && v === 0 ? 'one'\n      : v === 0 && (2 <= i % 10 && i % 10 <= 4) && (i % 100 < 12 || 14 < i % 100) ? 'few'\n      : v === 0 && i !== 1 && (0 <= i % 10 && i % 10 <= 1) || v === 0 && (5 <= i % 10 && i % 10 <= 9) || v === 0 && (12 <= i % 100 && i % 100 <= 14) ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return (0 <= n && n <= 2) && n !== 2 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var v = (s + '.').split('.')[1].length\n    var n = +s\n    return n === 1 && v === 0 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    return v === 0 && i % 10 === 1 && i % 100 !== 11 ? 'one'\n      : v === 0 && (2 <= i % 10 && i % 10 <= 4) && (i % 100 < 12 || 14 < i % 100) ? 'few'\n      : v === 0 && i % 10 === 0 || v === 0 && (5 <= i % 10 && i % 10 <= 9) || v === 0 && (11 <= i % 100 && i % 100 <= 14) ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var n = +s\n    return i === 0 || n === 1 ? 'one'\n      : 2 <= n && n <= 10 ? 'few'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var f = +(s + '.').split('.')[1]\n    var n = +s\n    return (n === 0 || n === 1) || i === 0 && f === 1 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    var v = (s + '.').split('.')[1].length\n    return v === 0 && i % 100 === 1 ? 'one'\n      : v === 0 && i % 100 === 2 ? 'two'\n      : v === 0 && (3 <= i % 100 && i % 100 <= 4) || v !== 0 ? 'few'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return (0 <= n && n <= 1) || (11 <= n && n <= 99) ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 1 || n === 5 || n === 7 || n === 8 || n === 9 || n === 10 ? 'one'\n      : n === 2 || n === 3 ? 'two'\n      : n === 4 ? 'few'\n      : n === 6 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    return (i % 10 === 1 || i % 10 === 2 || i % 10 === 5 || i % 10 === 7 || i % 10 === 8) || (i % 100 === 20 || i % 100 === 50 || i % 100 === 70 || i % 100 === 80) ? 'one'\n      : (i % 10 === 3 || i % 10 === 4) || (i % 1000 === 100 || i % 1000 === 200 || i % 1000 === 300 || i % 1000 === 400 || i % 1000 === 500 || i % 1000 === 600 || i % 1000 === 700 || i % 1000 === 800 || i % 1000 === 900) ? 'few'\n      : i === 0 || i % 10 === 6 || (i % 100 === 40 || i % 100 === 60 || i % 100 === 90) ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return (n % 10 === 2 || n % 10 === 3) && (n % 100 !== 12 && n % 100 !== 13) ? 'few'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 1 || n === 3 ? 'one'\n      : n === 2 ? 'two'\n      : n === 4 ? 'few'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 0 || n === 7 || n === 8 || n === 9 ? 'zero'\n      : n === 1 ? 'one'\n      : n === 2 ? 'two'\n      : n === 3 || n === 4 ? 'few'\n      : n === 5 || n === 6 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n % 10 === 1 && n % 100 !== 11 ? 'one'\n      : n % 10 === 2 && n % 100 !== 12 ? 'two'\n      : n % 10 === 3 && n % 100 !== 13 ? 'few'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 1 ? 'one'\n      : n === 2 || n === 3 ? 'two'\n      : n === 4 ? 'few'\n      : n === 6 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 1 || n === 5 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 11 || n === 8 || n === 80 || n === 800 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    return i === 1 ? 'one'\n      : i === 0 || ((2 <= i % 100 && i % 100 <= 20) || i % 100 === 40 || i % 100 === 60 || i % 100 === 80) ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n % 10 === 6 || n % 10 === 9 || n % 10 === 0 && n !== 0 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var i = Math.floor(Math.abs(+s))\n    return i % 10 === 1 && i % 100 !== 11 ? 'one'\n      : i % 10 === 2 && i % 100 !== 12 ? 'two'\n      : (i % 10 === 7 || i % 10 === 8) && (i % 100 !== 17 && i % 100 !== 18) ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 1 ? 'one'\n      : n === 2 || n === 3 ? 'two'\n      : n === 4 ? 'few'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return 1 <= n && n <= 4 ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n === 1 ? 'one'\n      : n % 10 === 4 && n % 100 !== 14 ? 'many'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return (n % 10 === 1 || n % 10 === 2) && (n % 100 !== 11 && n % 100 !== 12) ? 'one'\n      : 'other'\n  },\n  function (s) {\n    var n = +s\n    return n % 10 === 3 && n % 100 !== 13 ? 'few'\n      : 'other'\n  }\n]\n\nmodule.exports = {\n  af: { cardinal: f[0] },\n  ak: { cardinal: f[1] },\n  am: { cardinal: f[2] },\n  ar: { cardinal: f[3] },\n  as: { cardinal: f[2], ordinal: f[35] },\n  asa: { cardinal: f[0] },\n  ast: { cardinal: f[4] },\n  az: { cardinal: f[0], ordinal: f[36] },\n  be: { cardinal: f[5], ordinal: f[37] },\n  bem: { cardinal: f[0] },\n  bez: { cardinal: f[0] },\n  bg: { cardinal: f[0] },\n  bh: { cardinal: f[1] },\n  bn: { cardinal: f[2], ordinal: f[35] },\n  br: { cardinal: f[6] },\n  brx: { cardinal: f[0] },\n  bs: { cardinal: f[7] },\n  ca: { cardinal: f[4], ordinal: f[38] },\n  ce: { cardinal: f[0] },\n  cgg: { cardinal: f[0] },\n  chr: { cardinal: f[0] },\n  ckb: { cardinal: f[0] },\n  cs: { cardinal: f[8] },\n  cy: { cardinal: f[9], ordinal: f[39] },\n  da: { cardinal: f[10] },\n  de: { cardinal: f[4] },\n  dsb: { cardinal: f[11] },\n  dv: { cardinal: f[0] },\n  ee: { cardinal: f[0] },\n  el: { cardinal: f[0] },\n  en: { cardinal: f[4], ordinal: f[40] },\n  eo: { cardinal: f[0] },\n  es: { cardinal: f[0] },\n  et: { cardinal: f[4] },\n  eu: { cardinal: f[0] },\n  fa: { cardinal: f[2] },\n  ff: { cardinal: f[12] },\n  fi: { cardinal: f[4] },\n  fil: { cardinal: f[13], ordinal: f[0] },\n  fo: { cardinal: f[0] },\n  fr: { cardinal: f[12], ordinal: f[0] },\n  fur: { cardinal: f[0] },\n  fy: { cardinal: f[4] },\n  ga: { cardinal: f[14], ordinal: f[0] },\n  gd: { cardinal: f[15] },\n  gl: { cardinal: f[4] },\n  gsw: { cardinal: f[0] },\n  gu: { cardinal: f[2], ordinal: f[41] },\n  guw: { cardinal: f[1] },\n  gv: { cardinal: f[16] },\n  ha: { cardinal: f[0] },\n  haw: { cardinal: f[0] },\n  he: { cardinal: f[17] },\n  hi: { cardinal: f[2], ordinal: f[41] },\n  hr: { cardinal: f[7] },\n  hsb: { cardinal: f[11] },\n  hu: { cardinal: f[0], ordinal: f[42] },\n  hy: { cardinal: f[12], ordinal: f[0] },\n  is: { cardinal: f[18] },\n  it: { cardinal: f[4], ordinal: f[43] },\n  iu: { cardinal: f[19] },\n  iw: { cardinal: f[17] },\n  jgo: { cardinal: f[0] },\n  ji: { cardinal: f[4] },\n  jmc: { cardinal: f[0] },\n  ka: { cardinal: f[0], ordinal: f[44] },\n  kab: { cardinal: f[12] },\n  kaj: { cardinal: f[0] },\n  kcg: { cardinal: f[0] },\n  kk: { cardinal: f[0], ordinal: f[45] },\n  kkj: { cardinal: f[0] },\n  kl: { cardinal: f[0] },\n  kn: { cardinal: f[2] },\n  ks: { cardinal: f[0] },\n  ksb: { cardinal: f[0] },\n  ksh: { cardinal: f[20] },\n  ku: { cardinal: f[0] },\n  kw: { cardinal: f[19] },\n  ky: { cardinal: f[0] },\n  lag: { cardinal: f[21] },\n  lb: { cardinal: f[0] },\n  lg: { cardinal: f[0] },\n  ln: { cardinal: f[1] },\n  lt: { cardinal: f[22] },\n  lv: { cardinal: f[23] },\n  mas: { cardinal: f[0] },\n  mg: { cardinal: f[1] },\n  mgo: { cardinal: f[0] },\n  mk: { cardinal: f[24], ordinal: f[46] },\n  ml: { cardinal: f[0] },\n  mn: { cardinal: f[0] },\n  mo: { cardinal: f[25], ordinal: f[0] },\n  mr: { cardinal: f[2], ordinal: f[47] },\n  mt: { cardinal: f[26] },\n  nah: { cardinal: f[0] },\n  naq: { cardinal: f[19] },\n  nb: { cardinal: f[0] },\n  nd: { cardinal: f[0] },\n  ne: { cardinal: f[0], ordinal: f[48] },\n  nl: { cardinal: f[4] },\n  nn: { cardinal: f[0] },\n  nnh: { cardinal: f[0] },\n  no: { cardinal: f[0] },\n  nr: { cardinal: f[0] },\n  nso: { cardinal: f[1] },\n  ny: { cardinal: f[0] },\n  nyn: { cardinal: f[0] },\n  om: { cardinal: f[0] },\n  or: { cardinal: f[0] },\n  os: { cardinal: f[0] },\n  pa: { cardinal: f[1] },\n  pap: { cardinal: f[0] },\n  pl: { cardinal: f[27] },\n  prg: { cardinal: f[23] },\n  ps: { cardinal: f[0] },\n  pt: { cardinal: f[28] },\n  'pt-PT': { cardinal: f[29] },\n  rm: { cardinal: f[0] },\n  ro: { cardinal: f[25], ordinal: f[0] },\n  rof: { cardinal: f[0] },\n  ru: { cardinal: f[30] },\n  rwk: { cardinal: f[0] },\n  saq: { cardinal: f[0] },\n  sdh: { cardinal: f[0] },\n  se: { cardinal: f[19] },\n  seh: { cardinal: f[0] },\n  sh: { cardinal: f[7] },\n  shi: { cardinal: f[31] },\n  si: { cardinal: f[32] },\n  sk: { cardinal: f[8] },\n  sl: { cardinal: f[33] },\n  sma: { cardinal: f[19] },\n  smi: { cardinal: f[19] },\n  smj: { cardinal: f[19] },\n  smn: { cardinal: f[19] },\n  sms: { cardinal: f[19] },\n  sn: { cardinal: f[0] },\n  so: { cardinal: f[0] },\n  sq: { cardinal: f[0], ordinal: f[49] },\n  sr: { cardinal: f[7] },\n  ss: { cardinal: f[0] },\n  ssy: { cardinal: f[0] },\n  st: { cardinal: f[0] },\n  sv: { cardinal: f[4], ordinal: f[50] },\n  sw: { cardinal: f[4] },\n  syr: { cardinal: f[0] },\n  ta: { cardinal: f[0] },\n  te: { cardinal: f[0] },\n  teo: { cardinal: f[0] },\n  ti: { cardinal: f[1] },\n  tig: { cardinal: f[0] },\n  tk: { cardinal: f[0] },\n  tl: { cardinal: f[13], ordinal: f[0] },\n  tn: { cardinal: f[0] },\n  tr: { cardinal: f[0] },\n  ts: { cardinal: f[0] },\n  tzm: { cardinal: f[34] },\n  ug: { cardinal: f[0] },\n  uk: { cardinal: f[30], ordinal: f[51] },\n  ur: { cardinal: f[4] },\n  uz: { cardinal: f[0] },\n  ve: { cardinal: f[0] },\n  vo: { cardinal: f[0] },\n  vun: { cardinal: f[0] },\n  wa: { cardinal: f[1] },\n  wae: { cardinal: f[0] },\n  xh: { cardinal: f[0] },\n  xog: { cardinal: f[0] },\n  yi: { cardinal: f[4] },\n  zu: { cardinal: f[2] },\n  lo: { ordinal: f[0] },\n  ms: { ordinal: f[0] },\n  vi: { ordinal: f[0] }\n}\n\n},{}],4:[function(require,module,exports){\n// \"lookup\" algorithm http://tools.ietf.org/html/rfc4647#section-3.4\nmodule.exports = function lookupClosestLocale (locale, available) {\n  if (available[locale]) return locale\n  var locales = [].concat(locale || [])\n  for (var l = 0, ll = locales.length; l < ll; ++l) {\n    var current = locales[l].split('-')\n    while (current.length) {\n      if (current.join('-') in available) {\n        return current.join('-')\n      }\n      current.pop()\n    }\n  }\n  return 'en'\n}\n\n},{}],5:[function(require,module,exports){\n/**\n * Parser\n *\n * Turns this:\n *  `You have { numBananas, plural,\n *       =0 {no bananas}\n *      one {a banana}\n *    other {# bananas}\n *  } for sale`\n *\n * into this:\n *  [ \"You have \", [ \"numBananas\", \"plural\", 0, {\n *       \"=0\": [ \"no bananas\" ],\n *      \"one\": [ \"a banana\" ],\n *    \"other\": [ [ '#' ], \" bananas\" ]\n *  } ], \" for sale.\" ]\n **/\n'use strict'\n\nmodule.exports = function parse (pattern) {\n  if (typeof pattern !== 'string') throw new SyntaxError('Pattern must be a string')\n  return parseMessage({ pattern: pattern, index: 0 }, 'message')\n}\n\nfunction isDigit (char) {\n  return (\n    char === '0' ||\n    char === '1' ||\n    char === '2' ||\n    char === '3' ||\n    char === '4' ||\n    char === '5' ||\n    char === '6' ||\n    char === '7' ||\n    char === '8' ||\n    char === '9'\n  )\n}\n\nfunction isWhitespace (char) {\n  var code = char && char.charCodeAt(0)\n  return (\n    (code >= 0x09 && code <= 0x0D) ||\n    code === 0x20 || code === 0x85 || code === 0xA0 || code === 0x180E ||\n    (code >= 0x2000 && code <= 0x200D) ||\n    code === 0x2028 || code === 0x2029 || code === 0x202F || code === 0x205F ||\n    code === 0x2060 || code === 0x3000 || code === 0xFEFF\n  )\n}\n\nfunction skipWhitespace (current) {\n  var pattern = current.pattern\n  var length = pattern.length\n  while (\n    current.index < length &&\n    isWhitespace(pattern[current.index])\n  ) {\n    ++current.index\n  }\n}\n\nfunction parseText (current, parentType) {\n  var pattern = current.pattern\n  var length = pattern.length\n  var isHashSpecial = (parentType === 'plural' || parentType === 'selectordinal')\n  var isArgStyle = (parentType === 'style')\n  var text = ''\n  var char\n  while (current.index < length) {\n    char = pattern[current.index]\n    if (\n      char === '{' ||\n      char === '}' ||\n      (isHashSpecial && char === '#') ||\n      (isArgStyle && isWhitespace(char))\n    ) {\n      break\n    } else if (char === '\\'') {\n      char = pattern[++current.index]\n      if (char === '\\'') { // double is always 1 '\n        text += char\n        ++current.index\n      } else if (\n        // only when necessary\n        char === '{' ||\n        char === '}' ||\n        (isHashSpecial && char === '#') ||\n        (isArgStyle && isWhitespace(char))\n      ) {\n        text += char\n        while (++current.index < length) {\n          char = pattern[current.index]\n          if (pattern.slice(current.index, current.index + 2) === '\\'\\'') { // double is always 1 '\n            text += char\n            ++current.index\n          } else if (char === '\\'') { // end of quoted\n            ++current.index\n            break\n          } else {\n            text += char\n          }\n        }\n      } else { // lone ' is just a '\n        text += '\\''\n        // already incremented\n      }\n    } else {\n      text += char\n      ++current.index\n    }\n  }\n\n  return text\n}\n\nfunction parseArgument (current) {\n  var pattern = current.pattern\n  if (pattern[current.index] === '#') {\n    ++current.index // move passed #\n    return [ '#' ]\n  }\n\n  ++current.index // move passed {\n  var id = parseArgId(current)\n  var char = pattern[current.index]\n  if (char === '}') { // end argument\n    ++current.index // move passed }\n    return [ id ]\n  }\n  if (char !== ',') {\n    throwExpected(current, ',')\n  }\n  ++current.index // move passed ,\n\n  var type = parseArgType(current)\n  char = pattern[current.index]\n  if (char === '}') { // end argument\n    if (\n      type === 'plural' ||\n      type === 'selectordinal' ||\n      type === 'select'\n    ) {\n      throwExpected(current, type + ' message options')\n    }\n    ++current.index // move passed }\n    return [ id, type ]\n  }\n  if (char !== ',') {\n    throwExpected(current, ',')\n  }\n  ++current.index // move passed ,\n\n  var format\n  var offset\n  if (type === 'plural' || type === 'selectordinal') {\n    offset = parsePluralOffset(current)\n    format = parseSubMessages(current, type)\n  } else if (type === 'select') {\n    format = parseSubMessages(current, type)\n  } else {\n    format = parseSimpleFormat(current)\n  }\n  char = pattern[current.index]\n  if (char !== '}') { // not ended argument\n    throwExpected(current, '}')\n  }\n  ++current.index // move passed\n\n  return (type === 'plural' || type === 'selectordinal')\n    ? [ id, type, offset, format ]\n    : [ id, type, format ]\n}\n\nfunction parseArgId (current) {\n  skipWhitespace(current)\n  var pattern = current.pattern\n  var length = pattern.length\n  var id = ''\n  while (current.index < length) {\n    var char = pattern[current.index]\n    if (char === '{' || char === '#') {\n      throwExpected(current, 'argument id')\n    }\n    if (char === '}' || char === ',' || isWhitespace(char)) {\n      break\n    }\n    id += char\n    ++current.index\n  }\n  if (!id) {\n    throwExpected(current, 'argument id')\n  }\n  skipWhitespace(current)\n  return id\n}\n\nfunction parseArgType (current) {\n  skipWhitespace(current)\n  var pattern = current.pattern\n  var argType\n  var types = [\n    'number', 'date', 'time', 'ordinal', 'duration', 'spellout', 'plural', 'selectordinal', 'select'\n  ]\n  for (var t = 0, tt = types.length; t < tt; ++t) {\n    var type = types[t]\n    if (pattern.slice(current.index, current.index + type.length) === type) {\n      argType = type\n      current.index += type.length\n      break\n    }\n  }\n  if (!argType) {\n    throwExpected(current, types.join(', '))\n  }\n  skipWhitespace(current)\n  return argType\n}\n\nfunction parseSimpleFormat (current) {\n  skipWhitespace(current)\n  var style = parseText(current, 'style')\n  if (!style) {\n    throwExpected(current, 'argument style name')\n  }\n  skipWhitespace(current)\n  return style\n}\n\nfunction parsePluralOffset (current) {\n  skipWhitespace(current)\n  var offset = 0\n  var pattern = current.pattern\n  var length = pattern.length\n  if (pattern.slice(current.index, current.index + 7) === 'offset:') {\n    current.index += 7 // move passed offset:\n    skipWhitespace(current)\n    var start = current.index\n    while (\n      current.index < length &&\n      isDigit(pattern[current.index])\n    ) {\n      ++current.index\n    }\n    if (start === current.index) {\n      throwExpected(current, 'offset number')\n    }\n    offset = +pattern.slice(start, current.index)\n    skipWhitespace(current)\n  }\n  return offset\n}\n\nfunction parseSubMessages (current, parentType) {\n  skipWhitespace(current)\n  var pattern = current.pattern\n  var length = pattern.length\n  var options = {}\n  var hasSubs = false\n  while (\n    current.index < length &&\n    pattern[current.index] !== '}'\n  ) {\n    var selector = parseSelector(current)\n    skipWhitespace(current)\n    options[selector] = parseSubMessage(current, parentType)\n    hasSubs = true\n    skipWhitespace(current)\n  }\n  if (!hasSubs) {\n    throwExpected(current, parentType + ' message options')\n  }\n  if (!('other' in options)) { // does not have an other selector\n    throwExpected(current, null, null, '\"other\" option must be specified in ' + parentType)\n  }\n  return options\n}\n\nfunction parseSelector (current) {\n  var pattern = current.pattern\n  var length = pattern.length\n  var selector = ''\n  while (current.index < length) {\n    var char = pattern[current.index]\n    if (char === '}' || char === ',') {\n      throwExpected(current, '{')\n    }\n    if (char === '{' || isWhitespace(char)) {\n      break\n    }\n    selector += char\n    ++current.index\n  }\n  if (!selector) {\n    throwExpected(current, 'selector')\n  }\n  skipWhitespace(current)\n  return selector\n}\n\nfunction parseSubMessage (current, parentType) {\n  var char = current.pattern[current.index]\n  if (char !== '{') {\n    throwExpected(current, '{')\n  }\n  ++current.index // move passed {\n  var message = parseMessage(current, parentType)\n  char = current.pattern[current.index]\n  if (char !== '}') {\n    throwExpected(current, '}')\n  }\n  ++current.index // move passed }\n  return message\n}\n\nfunction parseMessage (current, parentType) {\n  var pattern = current.pattern\n  var length = pattern.length\n  var text\n  var elements = []\n  if ((text = parseText(current, parentType))) {\n    elements.push(text)\n  }\n  while (current.index < length) {\n    if (pattern[current.index] === '}') {\n      if (parentType === 'message') {\n        throwExpected(current)\n      }\n      break\n    }\n    elements.push(parseArgument(current, parentType))\n    if ((text = parseText(current, parentType))) {\n      elements.push(text)\n    }\n  }\n  return elements\n}\n\nfunction throwExpected (current, expected, found, message) {\n  var pattern = current.pattern\n  var lines = pattern.slice(0, current.index).split(/\\r?\\n/)\n  var offset = current.index\n  var line = lines.length\n  var column = lines.slice(-1)[0].length\n  if (!found) {\n    if (current.index >= pattern.length) {\n      found = 'end of input'\n    } else {\n      found = pattern[current.index]\n      while (++current.index < pattern.length) {\n        var char = pattern[current.index]\n        // keep going until a non alphanumeric (allow accents)\n        if (!isDigit(char) && char.toUpperCase() === char.toLowerCase()) break\n        found += char\n      }\n    }\n  }\n  if (!message) {\n    message = errorMessage(expected, found)\n  }\n  message += ' in ' + pattern.replace(/\\r?\\n/g, '\\n')\n\n  throw new SyntaxError(message, expected, found, offset, line, column)\n}\n\nfunction errorMessage (expected, found) {\n  if (!expected) {\n    return 'Unexpected ' + found + ' found'\n  }\n  return 'Expected ' + expected + ' but ' + found + ' found'\n}\n\n/**\n * SyntaxError\n *  Holds information about bad syntax found in a message pattern\n **/\nfunction SyntaxError (message, expected, found, offset, line, column) {\n  Error.call(this, message)\n  this.name = 'SyntaxError'\n  this.message = message\n  this.expected = expected\n  this.found = found\n  this.offset = offset\n  this.line = line\n  this.column = column\n}\n\nSyntaxError.prototype = Object.create(Error.prototype)\n\nmodule.exports.SyntaxError = SyntaxError\n\n},{}],6:[function(require,module,exports){\n/*!\n * Intl.MessageFormat prollyfill\n * Copyright(c) 2015 Andy VanWagoner\n * MIT licensed\n **/\n'use strict'\n\nvar parse = require('format-message-parse')\nvar interpret = require('format-message-interpret')\nvar closestSupportedLocale = interpret.closestSupportedLocale\n\nfunction MessageFormat (locales, pattern) {\n  if (!(this instanceof MessageFormat)) {\n    return new MessageFormat(locales, pattern)\n  }\n\n  var root = interpret(locales, parse(pattern))\n  this._internal = {\n    locale: closestSupportedLocale(locales),\n    format: typeof root === 'string'\n      ? function format () { return root }\n      : root\n  }\n}\nmodule.exports = MessageFormat\n\nObject.defineProperties(MessageFormat.prototype, {\n  resolvedOptions: {\n    configurable: true,\n    writable: true,\n    value: function resolvedOptions () {\n      return {\n        locale: this._internal.locale\n      }\n    }\n  },\n  format: {\n    configurable: true,\n    get: function () {\n      return this._internal.format\n    }\n  },\n  _internal: {\n    configurable: true,\n    writable: true,\n    value: {\n      locale: 'en',\n      format: function format () {\n        return ''\n      }\n    }\n  }\n})\n\nObject.defineProperties(MessageFormat, {\n  supportedLocalesOf: {\n    configurable: true,\n    writable: true,\n    value: function supportedLocalesOf (requestedLocales) {\n      // if the closest match is a prefix of the requested,\n      // and it isn't a duplicate, then it is supported\n      return [].concat(requestedLocales || [])\n        .filter(function (locale, i, array) {\n          var closest = closestSupportedLocale(locale)\n          return (\n            closest === locale.slice(0, closest.length) &&\n            array.indexOf(locale) === i\n          )\n        })\n    }\n  }\n})\n\n},{\"format-message-interpret\":2,\"format-message-parse\":5}]},{},[6])(6)\n});";
  }
}, [109]);
